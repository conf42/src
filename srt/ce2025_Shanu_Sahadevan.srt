1
00:00:00,070 --> 00:00:05,340
Hi, my name is Shanu Sahadevan, and
in this talk, Maximizing Android App

2
00:00:05,380 --> 00:00:09,650
Efficiency, Proven Techniques for
Seamless Performance Across Devices,

3
00:00:10,100 --> 00:00:14,980
I will share practical tips and proven
methods to help you make your Android

4
00:00:15,010 --> 00:00:20,089
app run faster, use less battery,
and work smoothly on all devices.

5
00:00:20,589 --> 00:00:24,769
Jetpack Compose and efficient
layout strategies can significantly

6
00:00:24,789 --> 00:00:28,399
boost performance, reduce lag,
and enhance user experience.

7
00:00:28,899 --> 00:00:33,479
Jetpack Compose simplifies UI development
with a declarative approach, making

8
00:00:33,479 --> 00:00:35,649
code cleaner and easier to maintain.

9
00:00:36,329 --> 00:00:41,319
It optimizes UI updates by
recomposing only necessary

10
00:00:41,349 --> 00:00:43,729
parts, improving responsiveness.

11
00:00:44,169 --> 00:00:48,439
It also reduces memory usage and
recompositions significantly,

12
00:00:48,809 --> 00:00:50,469
ensuring smoother performance.

13
00:00:50,929 --> 00:00:54,279
With built in state management,
Compose delivers high frame

14
00:00:54,279 --> 00:00:55,919
rates and fluid user experience.

15
00:00:56,419 --> 00:00:58,399
Deep layouts slow down the rendering.

16
00:00:58,399 --> 00:01:00,439
By increasing CPU and GPU.

17
00:01:00,439 --> 00:01:05,189
Workload ing view can cut rendering
times significantly, making the

18
00:01:05,189 --> 00:01:07,499
uua faster and more responsive.

19
00:01:07,999 --> 00:01:13,009
Efficient resource management helps
reduce app size and speed up loading

20
00:01:13,009 --> 00:01:15,169
times for a better user experience.

21
00:01:15,319 --> 00:01:22,239
Converting PNG and JPG majors
to cut file size by up to 55

22
00:01:22,239 --> 00:01:24,189
percentage without losing quality.

23
00:01:24,984 --> 00:01:30,194
This reduces APK size, improves download
speed, and saves storage with real world

24
00:01:30,194 --> 00:01:33,024
cases, showing up to 3MB reduction.

25
00:01:33,524 --> 00:01:37,574
Lazy loading defers non
essential resources, cutting

26
00:01:37,584 --> 00:01:40,094
initial load times by 40%.

27
00:01:40,704 --> 00:01:46,024
By loading images and heavy UI
components only when needed, apps achieve

28
00:01:46,024 --> 00:01:51,664
faster first page render, improving
performance on mid range devices.

29
00:01:52,164 --> 00:01:56,154
Optimizing app size ensures
faster downloads, lower storage

30
00:01:56,164 --> 00:01:58,074
use, and better performance.

31
00:01:58,574 --> 00:02:04,834
Android app bundles reduce APK
size by up to 35 percent by

32
00:02:04,854 --> 00:02:08,984
delivering only the necessary code
and resources for each device.

33
00:02:09,504 --> 00:02:13,914
This results in faster downloads,
lower storage use, and higher

34
00:02:13,964 --> 00:02:15,064
installation success rates.

35
00:02:15,564 --> 00:02:20,374
ProGuard removes unused code,
reducing app size by up to 90%.

36
00:02:20,874 --> 00:02:24,334
It also optimizes bytecode,
enhancing security and

37
00:02:24,334 --> 00:02:25,824
improving runtime performance.

38
00:02:26,324 --> 00:02:30,494
Efficient memory management prevents
leaks and keeps apps running smoothly.

39
00:02:31,414 --> 00:02:37,104
Using SparseArray instead of
HashMap reduces memory usage by 50

40
00:02:37,104 --> 00:02:38,864
percent by avoiding auto boxing.

41
00:02:39,384 --> 00:02:42,164
It's especially effective
for large collections.

42
00:02:43,159 --> 00:02:47,639
Weak references help prevent memory
leaks by allowing cached objects to

43
00:02:47,649 --> 00:02:49,929
be garbage collected when needed.

44
00:02:50,449 --> 00:02:53,949
This reduces out of memory
errors by up to 40 percent in

45
00:02:53,969 --> 00:02:56,359
production, improving app stability.

46
00:02:56,859 --> 00:03:00,319
Optimizing network usage
reduces data consumption and

47
00:03:00,329 --> 00:03:02,129
improves app responsiveness.

48
00:03:03,129 --> 00:03:07,249
Retrofits built in caching cuts
network requests and reduces

49
00:03:07,249 --> 00:03:10,269
API response times from 2.

50
00:03:10,269 --> 00:03:11,429
5 seconds to 0.

51
00:03:11,429 --> 00:03:11,879
3 seconds.

52
00:03:12,839 --> 00:03:17,339
By reusing valued responses,
apps stay responsive and

53
00:03:17,339 --> 00:03:18,859
even with poor connectivity.

54
00:03:19,819 --> 00:03:24,629
OKHTTP caching with custom
interceptors lower data usage

55
00:03:24,659 --> 00:03:26,599
and enable offline access.

56
00:03:27,119 --> 00:03:31,589
A well configured disk cache balance
performance and storage efficiently.

57
00:03:32,089 --> 00:03:37,899
When it comes to threading, efficient
multi threading keeps apps responsive

58
00:03:37,939 --> 00:03:39,279
and smooth during background tasks.

59
00:03:39,779 --> 00:03:44,709
Call in coroutines reduce UI thread
blocking, ensuring smooth animations,

60
00:03:44,779 --> 00:03:49,344
and trends responsiveness during
network calls and image processing.

61
00:03:49,344 --> 00:03:54,625
Also using Room Database with suspended
functions boosts data operation

62
00:03:54,625 --> 00:04:00,759
efficiency, enabling seamless pagination,
real time updates, and offline

63
00:04:00,799 --> 00:04:03,619
caching without affecting frame rates.

64
00:04:04,119 --> 00:04:09,009
Optimizing battery usage helps extend
device life and improve user experience.

65
00:04:09,509 --> 00:04:14,579
Smart week log management cuts battery
drain and ensuring background process

66
00:04:14,809 --> 00:04:18,019
don't keep device awake unnecessarily.

67
00:04:18,519 --> 00:04:22,389
Also, batching network requests
and deferring tasks to ideal

68
00:04:22,429 --> 00:04:25,199
periods reduce CPU wake up time.

69
00:04:26,089 --> 00:04:29,909
Using job scheduler and work
manager ensures tasks run only

70
00:04:29,949 --> 00:04:32,749
when charging or on Wi Fi.

71
00:04:33,249 --> 00:04:37,979
Android Studio Profiler helps identify
and fix performance bottlenecks

72
00:04:38,339 --> 00:04:39,699
for a smoother app experience.

73
00:04:40,199 --> 00:04:44,859
Track real time CPU usage, memory
allocation, and thread activity

74
00:04:45,289 --> 00:04:47,089
to detect performance issues.

75
00:04:48,029 --> 00:04:52,559
Use CPU sampling, heap dumps,
and network analysis to find

76
00:04:52,859 --> 00:04:55,429
bottlenecks across different devices.

77
00:04:55,929 --> 00:05:00,459
Apply Profiler Insights can cut
app load times by 40 percent

78
00:05:00,459 --> 00:05:02,819
and reduce memory usage by 30%.

79
00:05:03,319 --> 00:05:06,459
By implementing the techniques
discussed in this presentation,

80
00:05:06,759 --> 00:05:10,739
you can significantly improve the
performance of your Android apps.

81
00:05:10,949 --> 00:05:14,389
This leads to enhancing user
satisfaction to a great level.

82
00:05:14,889 --> 00:05:17,669
Thank you all for
watching my presentation.

