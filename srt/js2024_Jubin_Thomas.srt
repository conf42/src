1
00:00:00,520 --> 00:00:01,409
Greetings, everyone.

2
00:00:01,469 --> 00:00:02,829
I am Jubin Thomas.

3
00:00:02,860 --> 00:00:05,700
I work as a technical
architect at Signet Jewelers.

4
00:00:06,160 --> 00:00:08,010
I'm also a senior member of IEEE.

5
00:00:08,555 --> 00:00:12,215
Today, the topic which I would like
to discuss is building scalable e

6
00:00:12,215 --> 00:00:14,125
commerce backend with microservices.

7
00:00:14,555 --> 00:00:18,434
And before I start with my presentation,
I would like to thank Mark and all the

8
00:00:18,435 --> 00:00:23,594
organizers of JavaScript Conference
2024 Con 42 to invite me as a speaker.

9
00:00:24,094 --> 00:00:28,784
As you all know that there are a lot of
pioneers in the world of microservices

10
00:00:28,784 --> 00:00:30,874
and some of them are listed over here.

11
00:00:31,100 --> 00:00:37,089
Netflix, Spotify, eBay, Amazon
Web Services, Airbnb, Uber, Nike,

12
00:00:37,089 --> 00:00:39,259
Twitter, Walmart, and Verizon.

13
00:00:39,759 --> 00:00:43,969
the agenda for talk today is going
over the overview and infrastructure

14
00:00:43,969 --> 00:00:48,449
architecture, like what are microservices,
when should I use them, what is

15
00:00:48,459 --> 00:00:52,349
the right size for a microservice,
Why is microservices better than

16
00:00:52,349 --> 00:00:54,479
monoliths infrastructure architecture?

17
00:00:55,199 --> 00:00:59,539
Then we'll go through the testing
strategies like microservices, testing

18
00:00:59,539 --> 00:01:01,309
strategy, and the testing tools used.

19
00:01:01,979 --> 00:01:04,619
We'll go over the Docker
and Kubernetes architecture.

20
00:01:04,619 --> 00:01:05,519
What is the docker?

21
00:01:05,519 --> 00:01:06,509
What is Kubernetes?

22
00:01:07,179 --> 00:01:10,669
What is the, Kubernetes architecture
and the Kubernetes concepts?

23
00:01:11,229 --> 00:01:14,499
Finally, we'll go through
node js expressed in MongoDB.

24
00:01:15,364 --> 00:01:17,734
We will see what are the
different types of Node.

25
00:01:17,744 --> 00:01:21,414
js available, the
advantages of using Node.

26
00:01:21,424 --> 00:01:21,834
js.

27
00:01:22,384 --> 00:01:27,624
then we will go through what is MongoDB
and what is the requirement for a Node.

28
00:01:27,654 --> 00:01:30,064
js based microservice platform.

29
00:01:30,384 --> 00:01:33,834
Then we will see a simple
application using Node.

30
00:01:33,834 --> 00:01:34,224
js.

31
00:01:34,724 --> 00:01:36,074
So what are microservices?

32
00:01:36,354 --> 00:01:41,484
it's an approach to engineering focused
on building single function modules with

33
00:01:41,514 --> 00:01:43,494
well defined interfaces and operations.

34
00:01:44,129 --> 00:01:46,849
It minimizes the risk and scope of change.

35
00:01:46,959 --> 00:01:51,279
It is easy to deploy and easy to
understand across the various business.

36
00:01:51,779 --> 00:01:56,369
So as you can see in this image, the
left, side is basically the monolith

37
00:01:56,399 --> 00:02:00,899
architecture, which is a typical,
architecture for a monolith system

38
00:02:00,909 --> 00:02:04,609
where there's a user interface and
then we will have a business logic and

39
00:02:04,609 --> 00:02:08,379
a data layer, and a data layer is a
layer which connects to the database.

40
00:02:08,669 --> 00:02:14,284
With the implementation of microservice,
the same user service, is actually

41
00:02:14,404 --> 00:02:16,724
connected to multiple microservices.

42
00:02:16,734 --> 00:02:20,404
So the whole monolith business
logic is actually divided into

43
00:02:20,434 --> 00:02:25,714
multiple microservices and we
will be having different databases

44
00:02:25,714 --> 00:02:27,254
for each of these microservices.

45
00:02:27,754 --> 00:02:32,194
Now a question comes that what is
the right size for a microservice?

46
00:02:32,694 --> 00:02:36,194
The business function domain of the
service determines more important

47
00:02:36,204 --> 00:02:40,639
than its scale which means that
rather than focusing on the scale of

48
00:02:40,639 --> 00:02:45,259
the microservice or the size of the
microservice, it is more important to

49
00:02:45,259 --> 00:02:49,959
understand what is the business function,
which that microservice will perform.

50
00:02:50,509 --> 00:02:53,989
one microservice might have a dozen
entities and the other will have a

51
00:02:53,989 --> 00:02:59,869
couple of dozen ENT entities For every
bounded context from, DTD enables

52
00:02:59,869 --> 00:03:05,059
you to break down a big multi-domain
monolith into a microservice.

53
00:03:05,684 --> 00:03:09,314
Emphasizing user stories will
enable us to precisely outline

54
00:03:09,314 --> 00:03:10,914
the limits of the business domain.

55
00:03:11,414 --> 00:03:13,564
Now, why is Microsoft
better than monoliths?

56
00:03:14,344 --> 00:03:19,594
As you see that monolith is actually built
as a single unit as we saw in the diagram.

57
00:03:19,704 --> 00:03:22,214
It's basically a database back
end code and front end code.

58
00:03:22,854 --> 00:03:30,044
And at the same time, any feature addition
requires the entire unit to be deployed.

59
00:03:30,064 --> 00:03:34,244
On the other hand, in microservice,
we basically do a small autonomous

60
00:03:34,244 --> 00:03:35,834
services that work together.

61
00:03:36,074 --> 00:03:38,514
It's loosely coupled with bounded context.

62
00:03:39,014 --> 00:03:44,484
Now the image what you see here is a
typical microservice example where we

63
00:03:44,484 --> 00:03:51,714
have a UI layer and then in case of a
e commerce world we will be having four

64
00:03:51,734 --> 00:03:56,644
different entities here like shopping
cart, order, customer, inventory and

65
00:03:56,654 --> 00:04:01,974
this is a bare minimum things which is
required for an e commerce background and

66
00:04:01,974 --> 00:04:03,889
we see here There's a database over here.

67
00:04:04,269 --> 00:04:09,759
but at the same time, in the microservice
world, we will be having a customer

68
00:04:09,809 --> 00:04:14,159
order shopping cart inventory as totally
different services and it could be

69
00:04:14,409 --> 00:04:16,479
connected to different other databases.

70
00:04:16,509 --> 00:04:20,819
as you see, customer could be connected
to Redis and order could be in

71
00:04:20,819 --> 00:04:27,299
MongoDB, shopping cart in Microsoft
SQL server and inventory in Oracle 12c.

72
00:04:27,799 --> 00:04:31,349
Now, what is a capability centric design?

73
00:04:31,369 --> 00:04:37,179
Usually in a monolith manner, the team is
splitting depending more on the technology

74
00:04:37,179 --> 00:04:38,829
or skill set than corporate goals.

75
00:04:39,369 --> 00:04:43,079
In business centric development,
it basically focuses on

76
00:04:43,079 --> 00:04:44,119
business capabilities.

77
00:04:44,694 --> 00:04:47,554
The entire team is aligned
towards business capabilities.

78
00:04:47,554 --> 00:04:52,984
For example, here we have three different
capabilities listed over here and,

79
00:04:53,034 --> 00:04:56,814
the product team is defined based on
the number of capabilities we assign.

80
00:04:57,314 --> 00:05:01,474
Now, understanding the root, an
aggregate will have one of the

81
00:05:01,474 --> 00:05:03,684
component objects be the aggregate root.

82
00:05:03,864 --> 00:05:09,244
So for example, here in this case,
order, is connected to various different

83
00:05:09,244 --> 00:05:13,475
entities like customer, shipping
address, payment strategy, and payment

84
00:05:13,484 --> 00:05:16,524
strategy is actually connected to
credit card, cash, bank transfer.

85
00:05:17,024 --> 00:05:23,634
So this is a typical shopping menu,
if you see over here, where there

86
00:05:23,694 --> 00:05:29,854
are entities there are service
ports and utils and the adapters are

87
00:05:29,854 --> 00:05:35,164
something which helps, to implement
the database access services APIs.

88
00:05:35,384 --> 00:05:38,824
Converters are used to convert
an enum value to proper

89
00:05:38,824 --> 00:05:40,254
integer value in the database.

90
00:05:40,754 --> 00:05:44,714
As you see the, there are different
adapters like order repository, order

91
00:05:44,714 --> 00:05:48,114
service, order web service, order
query web service, shipping address

92
00:05:48,134 --> 00:05:49,554
web service, and so on and so forth.

93
00:05:50,054 --> 00:05:54,664
as we all know that CRUD, which is
basically create, read, update and

94
00:05:54,664 --> 00:05:57,124
delete has its own disadvantage.

95
00:05:57,754 --> 00:06:01,384
a mismatch between the read and
write representations of the data, it

96
00:06:01,384 --> 00:06:05,424
risks data contention where records
are locked in the data store in a

97
00:06:05,424 --> 00:06:10,324
collaborative domain and it can make
managing security and permissions more

98
00:06:10,324 --> 00:06:14,414
complex because each entity is subject
to both read and write operations.

99
00:06:14,914 --> 00:06:18,134
Let's go through the
microservice testing strategy.

100
00:06:18,324 --> 00:06:23,094
So as we all know that there are many
testing components, like unit testing is

101
00:06:23,094 --> 00:06:24,954
the smallest piece of testable software.

102
00:06:25,754 --> 00:06:29,554
Component testing is something having
a scope of exercise software to a

103
00:06:29,554 --> 00:06:31,614
portion of the system under test.

104
00:06:32,234 --> 00:06:36,134
Integrated testing defines the
communication paths and interactions

105
00:06:36,134 --> 00:06:38,144
between components to detect errors.

106
00:06:38,354 --> 00:06:39,484
interface defects.

107
00:06:39,794 --> 00:06:44,064
And, finally, we have an integration
contract testing to see, whether

108
00:06:44,064 --> 00:06:45,434
the contract is matching.

109
00:06:45,644 --> 00:06:48,574
And finally, we have an end
to end test, which tells that

110
00:06:48,574 --> 00:06:51,794
the system meets the external
requirements and achieves its goal.

111
00:06:52,294 --> 00:06:55,984
there are many microservice tool
out of which some of them, which

112
00:06:55,984 --> 00:06:59,284
I listed over here, they are
pretty famous and pretty known.

113
00:06:59,514 --> 00:07:04,584
So as we know that JUnit, is one
of a great testing tool, in, the

114
00:07:04,584 --> 00:07:09,334
combination of Cucumber and also
we have Mockito, to define the unit

115
00:07:09,334 --> 00:07:11,094
testing and the component testing scope.

116
00:07:11,594 --> 00:07:13,114
Now let's go through what is a Docker.

117
00:07:13,204 --> 00:07:17,764
So Docker, as you all know, it's an
open source platform for developers and

118
00:07:17,794 --> 00:07:22,384
assist admins to develop and deploy,
and run applications with containers.

119
00:07:22,934 --> 00:07:26,534
so it works on the principle
of build, ship and run.

120
00:07:27,034 --> 00:07:32,334
And this is a typical docker architecture
where there is a client and then we

121
00:07:32,344 --> 00:07:37,294
have a docker host where a docker
host has docker daemon and there are

122
00:07:37,304 --> 00:07:43,854
multiple containers within that and
we do have a registry for this docker.

123
00:07:44,354 --> 00:07:49,644
Going through kubernetes overview,
kubernetes is again an open source

124
00:07:49,654 --> 00:07:52,254
system for container orchestration.

125
00:07:52,744 --> 00:07:55,214
It is focused around scheduling, scaling.

126
00:07:55,694 --> 00:07:56,664
and self filling.

127
00:07:57,164 --> 00:08:02,084
This is a typical Kubernetes architecture
where we have an API, connected to the

128
00:08:02,184 --> 00:08:05,954
user interface and Kamala interface
and which is actually connected to

129
00:08:05,954 --> 00:08:11,384
the Kubernetes master and a Kubernetes
master could be connected to multiple

130
00:08:11,434 --> 00:08:13,764
nodes as we could see in this image.

131
00:08:14,264 --> 00:08:17,064
And Kubernetes works
with the concept of pods.

132
00:08:17,284 --> 00:08:21,474
So a pod is basically a
logical application with one

133
00:08:21,474 --> 00:08:22,974
or more containers and volumes.

134
00:08:23,324 --> 00:08:26,904
It is having a shared
namespace and one IP per pod.

135
00:08:27,404 --> 00:08:31,894
And a service is basically a thing which
basically connects to multiple pods.

136
00:08:31,994 --> 00:08:35,654
In this case, if you see a service
connected to three different pods.

137
00:08:36,154 --> 00:08:39,264
now let me go through, the
microservice framework using Node.

138
00:08:39,274 --> 00:08:43,624
js and what is the
advantage we have with this.

139
00:08:44,534 --> 00:08:48,884
So the advantage of creating
microservices with Node.

140
00:08:48,904 --> 00:08:54,794
js is, as listed over here, it is a
single threaded microservice and then

141
00:08:54,794 --> 00:08:57,244
we have bufferless atmosphere over here.

142
00:08:57,594 --> 00:09:01,194
It's asynchronous, highly
scalable, extremely quick,

143
00:09:01,204 --> 00:09:02,664
event driven and licensed.

144
00:09:03,164 --> 00:09:04,734
the most popular Node.

145
00:09:04,744 --> 00:09:09,994
js microservices are ExpressJS and
NestJS and, in this, presentation I

146
00:09:09,994 --> 00:09:14,594
have used ExpressJS to build a simple
application which I will be displaying

147
00:09:14,884 --> 00:09:16,284
in the later part of the slides.

148
00:09:16,784 --> 00:09:17,924
Now, what is a MongoDB?

149
00:09:17,944 --> 00:09:21,464
As you all know, MongoDB
is no SQL database.

150
00:09:21,504 --> 00:09:23,174
And what are the benefits out of it?

151
00:09:23,684 --> 00:09:28,924
It is schema less, it has a lot
of scalability, and it gives

152
00:09:28,924 --> 00:09:31,584
us a great performance benefit.

153
00:09:32,084 --> 00:09:34,534
Now, the requirement to
write microservices is Node.

154
00:09:34,544 --> 00:09:34,954
js.

155
00:09:35,249 --> 00:09:39,629
as we all know that writing a
microservice which also includes a

156
00:09:39,629 --> 00:09:42,389
producer, message broker and a consumer.

157
00:09:42,749 --> 00:09:49,179
and, with this, we will be having certain
requirements, like installing the Node.

158
00:09:49,189 --> 00:09:53,799
js, installing NPM, installing
Docker and RabbitMQ if you

159
00:09:53,799 --> 00:09:54,889
are using a message broker.

160
00:09:55,389 --> 00:09:57,429
No, I am actually
covering, a separate video.

161
00:09:57,839 --> 00:10:02,089
creation of a simple application, which is
basically to order a product using node.

162
00:10:02,099 --> 00:10:02,399
js.

163
00:10:02,719 --> 00:10:05,429
So as part of this, we
have five different files.

164
00:10:05,429 --> 00:10:10,389
And I'm going to the details of these
files as I explained in this talk.

165
00:10:10,809 --> 00:10:12,609
So we have db.

166
00:10:12,610 --> 00:10:13,599
js, Product.

167
00:10:13,599 --> 00:10:16,249
js, and another product.

168
00:10:16,249 --> 00:10:18,509
js which is basically
launching as a server.

169
00:10:18,819 --> 00:10:20,299
Then we have an order.

170
00:10:20,299 --> 00:10:22,739
js and to launch order.

171
00:10:22,739 --> 00:10:24,259
js we have another order.

172
00:10:24,259 --> 00:10:27,079
js which is basically
the server for order.

173
00:10:27,079 --> 00:10:27,649
js.

174
00:10:28,149 --> 00:10:29,409
So what is db.

175
00:10:29,410 --> 00:10:29,429
js?

176
00:10:29,429 --> 00:10:33,044
You know it is a creating a
database connection using Mongoose.

177
00:10:33,114 --> 00:10:37,514
As you can see on the right side, we are
using Mongoose to connect to the database.

178
00:10:37,534 --> 00:10:41,054
And if the connection is successful, it
displays a connection successful message.

179
00:10:41,374 --> 00:10:43,454
Otherwise it throws a
connection is failed.

180
00:10:43,954 --> 00:10:45,524
now what is a product or JS?

181
00:10:45,909 --> 00:10:50,559
we are creating a product service over
here, so customer should be able to

182
00:10:50,889 --> 00:10:53,039
order a product using this microservice.

183
00:10:53,119 --> 00:10:55,219
So in this case, we have a product.

184
00:10:55,219 --> 00:10:59,909
js where we have product description
as one attribute and product

185
00:10:59,909 --> 00:11:01,349
name, product ID and brand.

186
00:11:01,849 --> 00:11:03,789
And similarly, we create products.

187
00:11:04,039 --> 00:11:07,619
js, which is basically creating
a server for product service.

188
00:11:07,969 --> 00:11:10,579
So in this, to launch this.

189
00:11:10,914 --> 00:11:12,554
We have a port, 3000

190
00:11:13,054 --> 00:11:15,354
and as you can see here,
there are different, app.

191
00:11:15,354 --> 00:11:18,744
post here, one for the product
and products and then we have app.

192
00:11:18,744 --> 00:11:21,224
get for product ID and, app.

193
00:11:21,424 --> 00:11:23,354
delete for deleting a product.

194
00:11:23,854 --> 00:11:24,604
Now what is order.

195
00:11:24,644 --> 00:11:25,194
js?

196
00:11:25,604 --> 00:11:29,674
it is basically giving a
platform to create, orders, or

197
00:11:29,694 --> 00:11:31,234
basically to order a product.

198
00:11:31,474 --> 00:11:34,244
So in this case, we have a product ID.

199
00:11:34,754 --> 00:11:37,994
initial date and the delivery
date as part of the order schema.

200
00:11:38,494 --> 00:11:39,194
And order.

201
00:11:39,194 --> 00:11:44,934
js is another, file which we create
into, to, create as a server for order J.

202
00:11:44,934 --> 00:11:49,384
So in this case, we see, that we have
a new order do saved to save an order.

203
00:11:49,654 --> 00:11:53,174
If an order is actually
saved, we basically say new

204
00:11:53,174 --> 00:11:54,764
order has added successfully.

205
00:11:55,244 --> 00:11:59,684
And if there is a connection
error, we basically say that it's

206
00:11:59,684 --> 00:12:04,044
an internal server At the same
time, we have, app dot get for.

207
00:12:04,819 --> 00:12:08,259
Fetching the orders and if we have
a specific order to be fetched,

208
00:12:08,259 --> 00:12:12,579
we can also pass the order ID to
fetch their respective product.

209
00:12:13,079 --> 00:12:15,909
In conclusion, I would like to
say that microservices in Node.

210
00:12:15,929 --> 00:12:18,649
js are really good for
developing applications.

211
00:12:19,029 --> 00:12:21,869
We can modify without
affecting other services.

212
00:12:22,369 --> 00:12:24,779
Thank you so much for
listening to my talk.

213
00:12:24,799 --> 00:12:26,289
That's pretty much what I have to share.

214
00:12:26,559 --> 00:12:28,369
And that is my contact information, jupin.

215
00:12:28,639 --> 00:12:30,689
thomas at i3p.

216
00:12:30,689 --> 00:12:30,719
org.

217
00:12:30,739 --> 00:12:34,199
I would be very happy to
connect with anyone who would

218
00:12:34,199 --> 00:12:35,259
like to send me a request.

219
00:12:35,369 --> 00:12:36,079
Thank you so much.

