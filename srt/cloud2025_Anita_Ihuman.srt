1
00:00:00,010 --> 00:00:00,919
Hello everyone.

2
00:00:01,130 --> 00:00:04,610
Wouldn't it be nice if we could shift
left on cloud testing and shorten

3
00:00:04,610 --> 00:00:10,110
the development loop from hours to
seconds without having to wait all

4
00:00:10,120 --> 00:00:11,589
the way to the end of the pipeline.

5
00:00:12,510 --> 00:00:15,610
during this section, we're going to
be discussing cloud testing without

6
00:00:15,610 --> 00:00:19,320
the weight and how to transform the
Kubernetes developers experience.

7
00:00:19,849 --> 00:00:21,830
A little bit about me before we dive in.

8
00:00:21,950 --> 00:00:23,120
I am Anita Ihuman.

9
00:00:23,189 --> 00:00:27,129
I'm a developer advocate at MetalBear,
where we're building a cool tool

10
00:00:27,130 --> 00:00:30,530
called MirrorD that aims to make
developers life a lot easier.

11
00:00:31,150 --> 00:00:34,150
I like to think of myself as an open
source fine girl, and that is because

12
00:00:34,200 --> 00:00:35,990
a lot of my work revolves around.

13
00:00:36,200 --> 00:00:38,460
Open source tools and open source project.

14
00:00:38,800 --> 00:00:42,450
I am a member of the chaos board
where we focus on improving open

15
00:00:42,450 --> 00:00:44,320
source community health and analytics.

16
00:00:44,820 --> 00:00:49,730
And when I'm not doing open source work
or advocating for, development tools,

17
00:00:49,960 --> 00:00:55,120
you'll find me organizing local community
meetups at KCD Nigeria and CNCF Abuja.

18
00:00:55,620 --> 00:00:58,019
Now that we have that out
of the way, let's look in.

19
00:00:58,519 --> 00:01:02,489
During this section, we're going to
be looking at First, the traditional

20
00:01:02,540 --> 00:01:08,050
development workflow, then we'll move
on to talk more on what's shifting

21
00:01:08,050 --> 00:01:09,910
left on cloud testing is all about.

22
00:01:10,350 --> 00:01:13,419
And obviously we're going to
talk about the benefits of

23
00:01:13,419 --> 00:01:15,039
shifting left on cloud testing.

24
00:01:15,270 --> 00:01:19,810
And if the guts of demos allow
us, we'll look briefly at a demo

25
00:01:19,839 --> 00:01:21,600
of how Meridi works in action.

26
00:01:22,100 --> 00:01:22,910
So let's get in.

27
00:01:23,410 --> 00:01:24,080
First off.

28
00:01:24,789 --> 00:01:28,399
Let's think about the traditional
development workflow for a second.

29
00:01:28,899 --> 00:01:33,759
As developers, ideally, you'd want
to just, write your code base, right?

30
00:01:33,929 --> 00:01:37,749
And then once it looks good,
you create a pull request.

31
00:01:37,759 --> 00:01:42,059
It runs through the automated test
and the process just goes on smoothly.

32
00:01:42,089 --> 00:01:46,789
you quickly iterate whenever a fix
comes up and then you deploy it, right?

33
00:01:46,949 --> 00:01:47,679
However.

34
00:01:48,179 --> 00:01:52,890
That's not often the case because, with
cloud based applications now, instead

35
00:01:52,919 --> 00:01:57,299
of just writing our code base and then,
making sure that it goes through the

36
00:01:57,300 --> 00:02:02,440
pipeline without any hassle, we find
ourselves like wrestling with adjacent

37
00:02:02,480 --> 00:02:06,290
issues where you write the code base,
but then you also need to build the

38
00:02:06,290 --> 00:02:10,740
code base and then ensure that your code
functions correctly in the containers,

39
00:02:10,960 --> 00:02:12,350
and then you also have to like.

40
00:02:12,404 --> 00:02:16,404
make sure that this code runs in the
clusters and then it plays nicely

41
00:02:16,404 --> 00:02:18,424
with like other containerized apps.

42
00:02:18,454 --> 00:02:22,824
And then it's, finally, tested
and then deployed to production

43
00:02:22,984 --> 00:02:24,464
without breaking anything.

44
00:02:24,694 --> 00:02:28,095
Now we see that cloud testing enters
the picture, like at the far end.

45
00:02:28,324 --> 00:02:29,744
Of the, pipeline, right?

46
00:02:30,134 --> 00:02:33,004
And you might think that is
not so much of a big deal.

47
00:02:33,384 --> 00:02:39,334
However, the issue with this, particular
workflow is that since we're dealing

48
00:02:39,334 --> 00:02:43,665
with cloud based applications,
which are often complex in nature,

49
00:02:44,014 --> 00:02:48,445
we're having up to hundreds and
thousands of like micro services.

50
00:02:48,685 --> 00:02:52,495
And these micro services require
like a lot of like resources.

51
00:02:53,195 --> 00:02:57,195
that developers are not subjected
to dealing with, the difficulty

52
00:02:57,195 --> 00:02:59,285
debugging these applications.

53
00:02:59,995 --> 00:03:05,505
And in the case where like testing,
especially against like production

54
00:03:05,505 --> 00:03:10,295
states is at the far end, whenever
those issues that reproduce themselves

55
00:03:10,325 --> 00:03:12,465
in the cloud or in production.

56
00:03:12,785 --> 00:03:16,605
I'm not notice at the initial phase,
the developers will assume there are

57
00:03:16,625 --> 00:03:20,465
actually no complications and the
application will go through all of these

58
00:03:20,465 --> 00:03:22,515
phases without having to deal with that.

59
00:03:22,545 --> 00:03:26,595
And you find it's at the end of the
pipeline, then only to realize that

60
00:03:26,605 --> 00:03:29,385
there's a broken, There's an error
somewhere, or there's something

61
00:03:29,385 --> 00:03:32,375
that is broken in the production
state that needs to come back.

62
00:03:32,415 --> 00:03:35,685
And then you need to go through this
entire workflow that we just looked at.

63
00:03:36,075 --> 00:03:40,635
And that can really be very, difficult
to fix on its end because it could

64
00:03:40,635 --> 00:03:44,875
take hours and two days from the
developer's time, depending on how

65
00:03:44,875 --> 00:03:46,285
complex these applications are.

66
00:03:46,335 --> 00:03:50,335
And I know that so many persons are
probably saying that we have mocks on,

67
00:03:50,395 --> 00:03:52,165
our team has mocks that we offer you.

68
00:03:52,165 --> 00:03:53,295
So that's not a big problem.

69
00:03:53,615 --> 00:03:55,245
However, the issues with these mocks.

70
00:03:55,720 --> 00:03:59,500
are that they only give you like
some opt, some optimal conditions

71
00:03:59,530 --> 00:04:00,850
that you're testing against.

72
00:04:01,000 --> 00:04:04,890
And because this marks give you like
an implicit assumption of what the

73
00:04:04,910 --> 00:04:06,449
production states would look like.

74
00:04:06,949 --> 00:04:10,999
And you still have to deal with like
configuring and like managing the smocks.

75
00:04:11,139 --> 00:04:15,269
So first off, you're not getting the
a hundred percent assurance that your

76
00:04:15,269 --> 00:04:19,199
application would function this way
in production, but then you also have

77
00:04:19,199 --> 00:04:23,509
to manage the workload of configuring
and then managing, maintaining these

78
00:04:23,549 --> 00:04:27,659
particular mugs and all of that is
on the developers, which adds like

79
00:04:27,889 --> 00:04:29,589
additional complexities to the developers.

80
00:04:30,089 --> 00:04:33,949
And then, let's not talk about
like how this plays a huge role

81
00:04:33,969 --> 00:04:37,509
in like the productivity of the
developers at the end of the day.

82
00:04:37,509 --> 00:04:42,509
Cause now they have to deal with the
endless build push test cycle, which

83
00:04:42,699 --> 00:04:47,449
affects like the overall, development
loops and, affects their performance

84
00:04:47,490 --> 00:04:49,550
and productivity on the long run.

85
00:04:49,910 --> 00:04:52,940
And obviously we can leave out
the fact that this also like.

86
00:04:53,000 --> 00:04:58,550
increase in cloud costs because
so many organizations today have

87
00:04:58,590 --> 00:05:03,050
opt for like remote, development
environments where each developer

88
00:05:03,090 --> 00:05:07,189
is assigned their, environments
that they have to walk to work with.

89
00:05:07,239 --> 00:05:09,749
And if maybe you're working
with a team where you have

90
00:05:09,749 --> 00:05:11,930
like hundreds of developers.

91
00:05:12,445 --> 00:05:17,135
Each individual developers has like
their own assigned environments

92
00:05:17,135 --> 00:05:20,485
that they're making their changes
and doing all of these changes in.

93
00:05:21,314 --> 00:05:27,225
And that alone takes up a whole lot in
terms of paying for this cloud, resources

94
00:05:27,235 --> 00:05:29,285
that you're actually, subscribing to.

95
00:05:29,624 --> 00:05:33,015
And, You also have to think about
the fact that by the time all of

96
00:05:33,015 --> 00:05:37,455
this is done, the application is
taking longer to get to the market.

97
00:05:37,705 --> 00:05:43,335
Since there's a lot of like rework that
is going on in a process back and forth,

98
00:05:43,605 --> 00:05:46,895
the application takes a longer time
to actually hit production like that.

99
00:05:46,925 --> 00:05:48,575
You would anticipate it to.

100
00:05:49,125 --> 00:05:52,825
no wonder a research by the
national institution of.

101
00:05:53,325 --> 00:05:58,065
National Institution of Standards and
Technology states that the longer it

102
00:05:58,075 --> 00:06:04,745
takes for testing and also identifying
and then resolving issues, the more

103
00:06:04,775 --> 00:06:09,665
impact it actually has on the, the costs
and also Security of the application.

104
00:06:09,855 --> 00:06:14,325
And what this actually tells us is that
it's a lot easier to detect issues, right?

105
00:06:14,445 --> 00:06:18,865
When the code, when the developers
are still writing the code base or

106
00:06:18,865 --> 00:06:23,075
when the developers still have much
control over the code base compared to

107
00:06:23,075 --> 00:06:27,855
when the code base is, Like at the far
end of the pipeline, so it's easier

108
00:06:28,315 --> 00:06:30,475
for them to, identify the issues.

109
00:06:30,525 --> 00:06:34,965
If you have access to that, production,
base environment, it's easier for

110
00:06:34,965 --> 00:06:38,065
them to tackle these issues without
having to go through all of this

111
00:06:38,085 --> 00:06:41,795
chaos that they could deal with if
it's tackled at the initial state.

112
00:06:42,155 --> 00:06:42,735
And then.

113
00:06:42,970 --> 00:06:48,160
Once the software is like in the testing
phase, Reproducing certain, issues in

114
00:06:48,160 --> 00:06:53,090
the local environment tends to produce
additional complexity because now you have

115
00:06:53,090 --> 00:06:58,370
to like, think of, how to, reproduce that
particular state in the local environment.

116
00:06:58,440 --> 00:07:03,800
And so many, developers now have to like,
if maybe the application or the, team is

117
00:07:03,820 --> 00:07:08,370
working with like local based, development
environments, the applications might

118
00:07:08,370 --> 00:07:13,690
not actually, Their software may not
be able to handle all of the data, the

119
00:07:13,700 --> 00:07:17,690
environmental variables and the resources
that the application in production would

120
00:07:17,690 --> 00:07:22,980
need, which also adds like another level
of complexity to the whole process.

121
00:07:23,050 --> 00:07:28,600
Additionally, why it's easy to catch
certain, issues or setting, bugs

122
00:07:28,790 --> 00:07:30,620
during like development, right?

123
00:07:30,910 --> 00:07:35,330
Because, your application or you're not
testing against actual production state.

124
00:07:35,830 --> 00:07:39,150
It's still difficult to
identify these issues.

125
00:07:39,200 --> 00:07:44,420
And, like I said earlier, the mocks that
a lot of organizations are using today

126
00:07:44,420 --> 00:07:49,010
cannot actually mimic the databases,
overall database, environmental

127
00:07:49,010 --> 00:07:51,580
variables, and also resources
that this application would need.

128
00:07:51,770 --> 00:07:55,230
100 percent in production
still leading us to So many,

129
00:07:55,260 --> 00:07:56,590
questions at the end of the day.

130
00:07:56,810 --> 00:08:02,430
Now, this leads to why we actually need
the shift left on, cloud testing, first

131
00:08:02,430 --> 00:08:08,100
of all, the concept of, shifts left
testing on its own is like the stage

132
00:08:08,150 --> 00:08:10,550
of the process where you like push.

133
00:08:11,340 --> 00:08:16,360
Testing to the left, or you
push testing overall to the

134
00:08:16,410 --> 00:08:17,960
early stage of the pipeline.

135
00:08:18,150 --> 00:08:22,920
And the idea of this approach is to
actually identify and also resolve

136
00:08:22,920 --> 00:08:28,120
bugs and in the early stage of the
development process before it gets all

137
00:08:28,130 --> 00:08:30,380
the way to the close to production.

138
00:08:31,105 --> 00:08:35,795
However, in terms of, cloud based
application, we're talking about,

139
00:08:35,975 --> 00:08:40,275
or in terms of this particular topic
or presentation, we're focusing

140
00:08:40,315 --> 00:08:43,185
on shifting cloud testing left.

141
00:08:43,425 --> 00:08:48,195
And what this means is moving cloud
based testing to the early stage of

142
00:08:48,195 --> 00:08:53,965
development, allowing developers to
validate, their code in real cloud against

143
00:08:53,965 --> 00:08:58,955
real cloud environments without waiting
all the way to, For the staging or for

144
00:08:58,955 --> 00:09:00,685
the deployment at the end of the day.

145
00:09:00,915 --> 00:09:05,835
And the goal is to actually improve
software, quality, and also reduce

146
00:09:05,855 --> 00:09:10,585
the time that developers spend in
resolving issues and over time.

147
00:09:10,805 --> 00:09:14,805
The, entire, Over time, improve the
entire software development workflow

148
00:09:15,145 --> 00:09:18,215
for, and also like developers
experience on the long run.

149
00:09:18,715 --> 00:09:23,475
And the key principles behind this is
first, you want to be able to identify

150
00:09:23,515 --> 00:09:26,275
issues very early into the development.

151
00:09:26,505 --> 00:09:30,245
You want to be able to catch the
bugs, at the initial phase, like

152
00:09:30,255 --> 00:09:34,955
before waiting to the end, which saves
a lot of time for the developers.

153
00:09:35,455 --> 00:09:39,225
You also want to ensure continuous
feedback loop, because instead of having

154
00:09:39,225 --> 00:09:44,305
to go over and over the development,
loop, which like, slows all the time

155
00:09:44,315 --> 00:09:49,365
of reiteration, you want to regularly
get feedback as fast as possible so

156
00:09:49,365 --> 00:09:52,795
that you can, move on to the next
phase of the development workflow.

157
00:09:53,065 --> 00:09:56,685
You also want to produce high
quality applications that have.

158
00:09:56,860 --> 00:10:02,490
Fewer code when it gets to testing and
you also want to be able to reduce the,

159
00:10:02,580 --> 00:10:09,030
instances of like delay in application
delivery instead of spending hours writing

160
00:10:09,220 --> 00:10:13,810
and fix rewriting, actually rewriting
and fixing the code over and over again.

161
00:10:13,990 --> 00:10:17,430
You want to just test it, in the local
states where the developers are more

162
00:10:17,430 --> 00:10:21,930
familiar with, the tools and gets, the.

163
00:10:22,095 --> 00:10:25,875
issues out of the way as fast as
possible and then push finally

164
00:10:25,935 --> 00:10:28,125
to, for deployment and so on.

165
00:10:28,870 --> 00:10:35,600
And so the benefits of actually, shifting
cloud testing left are obviously it

166
00:10:35,600 --> 00:10:39,710
comes to so many advantages we've looked
at some of the challenges of this and

167
00:10:39,710 --> 00:10:43,190
the benefits of this, not only to the
developers, but to the organization as

168
00:10:43,190 --> 00:10:48,410
a whole, is that you're able to detect
the bugs at an early stage, which makes

169
00:10:48,420 --> 00:10:55,190
it very easy to like, you Identify the
issues, where need be not just issues

170
00:10:55,200 --> 00:10:58,260
that would appear in the local states,
but the issues that would appear in the

171
00:10:58,260 --> 00:11:02,950
production states, identify them as early
as possible in the stage of development.

172
00:11:02,960 --> 00:11:06,390
When developers are still writing the
code, you want to be able to increase

173
00:11:06,420 --> 00:11:11,590
the efficiency of, of course, any, bug
detection in the environments that,

174
00:11:11,680 --> 00:11:13,440
especially when they are like closely.

175
00:11:14,235 --> 00:11:17,305
The environment that closely matches
like the production leads to a smoother

176
00:11:17,835 --> 00:11:22,475
development workflow, the another benefit
is that you want to save a lot of cost

177
00:11:22,515 --> 00:11:27,085
because instead of paying so much for
cloud, cloud resources for like your

178
00:11:27,310 --> 00:11:31,300
number of developers and all of that,
you could actually work with a shared

179
00:11:31,340 --> 00:11:36,130
development environment where every single
developer has access to, this without

180
00:11:36,130 --> 00:11:37,900
paying for like individual cloud costs.

181
00:11:38,470 --> 00:11:42,410
And you also want to like, fastened
development because you want to

182
00:11:42,410 --> 00:11:45,930
quickly iterate within these tight
feedback loops without waiting for

183
00:11:45,930 --> 00:11:49,570
the build push, test, circle that
developers would normally deal with.

184
00:11:50,190 --> 00:11:52,340
In traditional development workflows.

185
00:11:52,690 --> 00:11:55,570
And you're also thinking
about the development.

186
00:11:55,630 --> 00:11:59,230
the developers will be on the long
run because this gives developers

187
00:11:59,450 --> 00:12:04,070
the confidence that they can actually
write code and then run like they're

188
00:12:04,070 --> 00:12:10,070
testing more frequently without having
to go through so much, chaos and all

189
00:12:10,070 --> 00:12:13,440
of the hassle that the traditional
development workflows introduced.

190
00:12:13,940 --> 00:12:20,620
Which is why a development to MirrorD
becomes very much of a high need.

191
00:12:20,990 --> 00:12:24,540
And if you're wondering what
MirrorD actually is, it's simple.

192
00:12:24,540 --> 00:12:29,540
MirrorD is a development tool that
connects like your local processes to.

193
00:12:30,040 --> 00:12:31,200
A remote cluster.

194
00:12:31,410 --> 00:12:36,630
So you can actually test and debug as if
you're running your code in production

195
00:12:36,800 --> 00:12:39,050
without actually deploying it first.

196
00:12:39,290 --> 00:12:43,320
Now with Miradee, developers can
actually work locally, but on a

197
00:12:43,320 --> 00:12:45,670
remote shared development environment.

198
00:12:45,900 --> 00:12:49,670
And every developer has like
access to the cluster services

199
00:12:49,880 --> 00:12:51,450
as if they're running it locally.

200
00:12:51,640 --> 00:12:54,560
They can actually reroute
the clusters traffic.

201
00:12:54,765 --> 00:12:58,665
local services and all of this
while keeping convenience, like the

202
00:12:59,025 --> 00:13:01,795
local development environment that
they're very much familiar with,

203
00:13:01,835 --> 00:13:05,415
as well as debugging tools that
they're also like very familiar with.

204
00:13:06,000 --> 00:13:10,750
So it becomes a lot easier to test
your code on a cloud environment

205
00:13:10,790 --> 00:13:14,460
that, let's say staging, for instance,
without actually having to go

206
00:13:14,460 --> 00:13:19,810
through the hassle of, dockerization,
continuous integration and deployment

207
00:13:20,090 --> 00:13:25,850
without, also disrupting like the
environment by deploying untested code.

208
00:13:25,850 --> 00:13:30,410
And the good thing is Meredith comes like
with the, With your ID is that you're

209
00:13:30,410 --> 00:13:33,240
very familiar with VS code or IntelliJ.

210
00:13:33,580 --> 00:13:38,070
And it's also available in like in
the CLI with just a simple command.

211
00:13:38,080 --> 00:13:41,250
You have MirrorD running
in a matter of seconds.

212
00:13:41,750 --> 00:13:45,090
And, to break it down, when you're
running like a development workflow

213
00:13:45,100 --> 00:13:49,370
with MirrorD, instead of going
back and forth, like we looked at

214
00:13:49,440 --> 00:13:53,180
earlier, you write your code base and
confirm that it's actually working.

215
00:13:53,320 --> 00:13:57,640
works well, not just works well locally,
but then because you actually tested it

216
00:13:57,640 --> 00:14:02,530
against cloud based conditions at the
initial or like at the development phase,

217
00:14:02,600 --> 00:14:05,850
you can go on and create a pull request.

218
00:14:06,250 --> 00:14:10,600
And obviously, because this has been
tested and you've made sure and confirmed

219
00:14:10,600 --> 00:14:14,400
that the application is working well,
and it should work well, even if it

220
00:14:14,400 --> 00:14:16,410
goes through all of the pipelines.

221
00:14:17,155 --> 00:14:21,395
You open your pull request and then every
other test that is expected passes through

222
00:14:21,395 --> 00:14:27,145
without any struggles and the application
is finally deployed to staging and the end

223
00:14:27,155 --> 00:14:31,475
to end testing also goes on smoothly and
finally you can deploy your application

224
00:14:31,795 --> 00:14:34,815
to, production without any challenges.

225
00:14:35,370 --> 00:14:40,520
So what happens when you run MirrorD
is that MirrorD runs into places in the

226
00:14:40,520 --> 00:14:45,380
memory of your local process, which is the
MirrorD layer, and as a port in your cloud

227
00:14:45,400 --> 00:14:47,360
environment, which is the MirrorD agent.

228
00:14:48,270 --> 00:14:54,400
So when you initiate MirrorD or run it in
like your IDE or in the CLI, MirrorD, it

229
00:14:54,400 --> 00:14:58,620
starts like the port called the MirrorD
agent, which operates like within the

230
00:14:58,620 --> 00:15:03,180
same network, namespace as the port
that you're targeting or the specific.

231
00:15:03,370 --> 00:15:06,150
remote, distant port
that you're targeting.

232
00:15:06,650 --> 00:15:11,590
And then this agent tends to have access
to everything that your application

233
00:15:11,590 --> 00:15:16,320
would need in the cloud state, like
the networks, the file systems, the

234
00:15:16,350 --> 00:15:18,340
environmental variables, and all of that.

235
00:15:18,570 --> 00:15:24,260
And so Your local machine doesn't have to
do like all of the heavy lifting and the,

236
00:15:24,350 --> 00:15:29,200
managing all of this, like it would in the
traditional workflows that we looked at.

237
00:15:29,670 --> 00:15:35,310
Whereas on your system, the Miradi
layer is going to, integrate with like

238
00:15:35,310 --> 00:15:39,530
your local, your local developments,
your local development, environments,

239
00:15:39,530 --> 00:15:45,800
Intercepting and redirecting all low,
level functions to the Miradi agent.

240
00:15:46,300 --> 00:15:49,820
And what this does is allows you to
interact with the resources, like

241
00:15:49,830 --> 00:15:55,540
the files, databases, APIs, just like
your application would, if it was

242
00:15:55,560 --> 00:15:58,190
actually running, in the cloud basis.

243
00:15:58,300 --> 00:16:03,020
And the end result of this is that,
The remote, the remote server,

244
00:16:03,070 --> 00:16:05,100
relayed back to a developer, machine.

245
00:16:05,430 --> 00:16:09,700
And so instead of having to do all of
the heavy, weights lifting of managing

246
00:16:09,700 --> 00:16:14,600
this locally, you're able to assess the
state of the application, like it would

247
00:16:14,620 --> 00:16:16,880
in real time on your local machine.

248
00:16:17,030 --> 00:16:19,500
While Meredith does all
of the heavy lifting.

249
00:16:19,530 --> 00:16:23,320
And this happens in a matter of
Seconds, without even realizing it.

250
00:16:23,340 --> 00:16:26,620
And at the end of the year, developers
feel like they're actually running

251
00:16:26,620 --> 00:16:31,510
their applications, as if it is in
the cloud, enough of the rambling.

252
00:16:31,600 --> 00:16:36,870
Let us actually look at how Miradee does
all of this magic in the background.

253
00:16:37,060 --> 00:16:42,549
So for this demo, I have a very, small
microservice application or project

254
00:16:42,559 --> 00:16:46,949
that I would like us to look into as
even I'm working in a team that has

255
00:16:46,949 --> 00:16:49,259
multiple microservices and I was.

256
00:16:49,429 --> 00:16:55,379
Assigned these projects, a weather app
to, the weather app, microservice rights

257
00:16:55,379 --> 00:17:01,540
to the bug and, maybe, this header was no
longer shooting and I need to update that.

258
00:17:01,600 --> 00:17:04,999
And by the way, this weather app
projects basically just calls

259
00:17:05,000 --> 00:17:09,630
to an API and it, returns the
weather update in different cities.

260
00:17:10,035 --> 00:17:11,275
Like you can see here.

261
00:17:11,635 --> 00:17:15,715
And so as you mean, I
want to like, change that.

262
00:17:15,795 --> 00:17:19,014
And, I don't like the color of this
background cause it doesn't suit

263
00:17:19,085 --> 00:17:20,395
with me, but the brand anymore.

264
00:17:20,405 --> 00:17:24,624
And I don't like the text on the header
cause it doesn't also align anymore.

265
00:17:25,254 --> 00:17:28,055
And I want to make changes to this, right?

266
00:17:28,084 --> 00:17:31,675
I'm going to, first of all,
go to the, the code base.

267
00:17:32,065 --> 00:17:36,715
by the way, this, application is,
running on AKS cluster, right?

268
00:17:37,225 --> 00:17:42,065
And so what I'm going to do
is let's update this here.

269
00:17:42,565 --> 00:17:47,935
KCD Acra demo project.

270
00:17:48,555 --> 00:17:54,475
And, as you may also want to change that
color, I'd change it to maybe purple.

271
00:17:55,210 --> 00:17:58,630
It gives me like a, a purple
background at the end of the day.

272
00:17:59,280 --> 00:18:03,760
And if you're wondering how to actually
get started with MirrorD, in case I

273
00:18:03,760 --> 00:18:09,360
didn't point that out, MirrorD runs like
a CLI, but it also has an extension.

274
00:18:09,830 --> 00:18:15,750
And then this extension is available on VS
code right here and also like on IntelliJ.

275
00:18:16,050 --> 00:18:20,490
So depending on the one you actually
want to go with, the speed and everything

276
00:18:20,530 --> 00:18:23,800
is I'm going to just use the extension
to show you how simple it can be.

277
00:18:24,130 --> 00:18:26,910
I already have my extension
installed, but once you install the

278
00:18:26,910 --> 00:18:31,090
extension, you get like an icon at
the bottom here that says Mirror D.

279
00:18:31,400 --> 00:18:34,000
It's disabled right now, but if
I want to use Mirror D, I have

280
00:18:34,000 --> 00:18:35,830
to enable it by, turning off.

281
00:18:36,180 --> 00:18:40,700
toggling on the, button, and then you
can select like an active configuration.

282
00:18:40,720 --> 00:18:45,410
What happens to the configuration file
is, it's just a way for you to customize

283
00:18:45,420 --> 00:18:49,780
what you want MiroD to do, what you, what,
where you want MiroD to have access in.

284
00:18:50,250 --> 00:18:54,580
Like for instance, I am targeting
the weather app deployment port.

285
00:18:55,190 --> 00:18:59,000
But you can choose the particular,
service that you want to target, right?

286
00:18:59,290 --> 00:19:01,390
Or the particular port you are targeting.

287
00:19:01,720 --> 00:19:05,080
And then you can define,
what you want MIRIDI to do.

288
00:19:05,160 --> 00:19:10,410
by default, MIRIDI kind of mirrors the,
traffic and mirrors the state of, The

289
00:19:10,410 --> 00:19:15,780
cluster, but you can actually tell it
to still incoming traffic and outgoing

290
00:19:15,780 --> 00:19:17,870
traffic instead of mirroring it.

291
00:19:18,320 --> 00:19:24,550
And then it's also like able to get me
environments, the, return all of the

292
00:19:24,560 --> 00:19:26,730
file systems and so many other things.

293
00:19:26,730 --> 00:19:30,030
But basically it's a basic,
mirror D configuration file.

294
00:19:30,030 --> 00:19:32,970
There's so much more you can do with
these mirror D configuration files.

295
00:19:33,020 --> 00:19:37,680
So now that I have my configuration
sets, the, MIRDI is enabled

296
00:19:38,170 --> 00:19:42,290
and, the changes I also want to
do have also been implemented.

297
00:19:42,610 --> 00:19:45,280
I look at my, API dot, PY file.

298
00:19:45,340 --> 00:19:46,200
This looks good.

299
00:19:46,700 --> 00:19:52,300
Next thing I'm going to go to the
debug and hit, start debugging.

300
00:19:52,800 --> 00:19:57,070
And once you do that, MIRDI is going
to take a matter of like seconds.

301
00:19:57,570 --> 00:20:02,480
To initiate is going to like, get the
binaries that you need and every other

302
00:20:02,660 --> 00:20:06,680
thing set up in a matter of minutes.

303
00:20:07,290 --> 00:20:11,100
And just like I said, Meredith
has already, started getting

304
00:20:11,550 --> 00:20:13,640
itself ready to, do its job.

305
00:20:14,140 --> 00:20:18,550
And, you can see that it's already
started the debugging process is active.

306
00:20:19,310 --> 00:20:23,540
And yes, once you see that it's
turned orange at the bottom here,

307
00:20:23,590 --> 00:20:26,420
it's a sign that we're already,
it's like already, doing its job.

308
00:20:27,140 --> 00:20:31,960
And like I mentioned earlier, What
happens when you like start MIRDI

309
00:20:32,010 --> 00:20:37,150
is it injects like the MIRDI agent
into the pod that you're targeting.

310
00:20:38,000 --> 00:20:40,930
let's go and see if the
MIRDI agent exists right now.

311
00:20:41,430 --> 00:20:41,770
okay.

312
00:20:41,800 --> 00:20:45,070
So we have the MIRDI agents right
here that is already running.

313
00:20:45,090 --> 00:20:47,180
It started, 56 seconds ago.

314
00:20:47,690 --> 00:20:51,670
And that shows us that if we want to check
the changes to this particular project.

315
00:20:52,005 --> 00:20:53,805
It's going to be implemented.

316
00:20:54,185 --> 00:20:57,215
Now, this is what the application
in production looks like.

317
00:20:57,545 --> 00:21:00,465
Now, let's try to run this same thing.

318
00:21:00,465 --> 00:21:04,845
The good thing is you can actually
use the, the same URL for the project.

319
00:21:05,345 --> 00:21:08,375
And, it will still
render the same, returns.

320
00:21:08,885 --> 00:21:12,815
So now we have the version that
actually says KCD Acura demo project.

321
00:21:13,215 --> 00:21:15,435
And if you try to also check the weather.

322
00:21:15,935 --> 00:21:20,585
It should come out in purple, which
is the color we indicated, right?

323
00:21:20,895 --> 00:21:25,505
So now that is exactly what you're going
to get with, regardless of how complex the

324
00:21:25,505 --> 00:21:30,745
project is, you're working on, this is how
fast Mirodi works and the good thing is

325
00:21:30,745 --> 00:21:35,225
Mirodi does not select maybe, technologies
or languages to work on any technology

326
00:21:35,225 --> 00:21:38,425
that you're using for your project,
Mirodi is going to work regardless.

327
00:21:38,465 --> 00:21:40,335
And it is just as fast as possible.

328
00:21:40,975 --> 00:21:44,255
And, basically that is how Miradee works.

329
00:21:44,325 --> 00:21:47,145
And another amazing thing
with Miradee is right.

330
00:21:47,605 --> 00:21:52,355
once you're done with this, once you're
like done with this whole process, you can

331
00:21:52,385 --> 00:21:56,825
actually just see that the Miradee agents
will automatically terminate itself.

332
00:21:56,845 --> 00:22:01,505
Once you're completed with the debugging
and you disable, Miradee to automatically

333
00:22:01,555 --> 00:22:07,270
disable itself and leave the cluster
without Any interruptions or doing any

334
00:22:07,270 --> 00:22:10,290
further damage to the cluster at all.

335
00:22:10,620 --> 00:22:11,650
let's see how that goes.

336
00:22:11,670 --> 00:22:14,500
While this is even going on
the application in production,

337
00:22:14,510 --> 00:22:15,860
nothing is affecting it.

338
00:22:16,260 --> 00:22:17,830
And let me show you what I mean.

339
00:22:18,330 --> 00:22:22,790
While this works, the application
itself in production is not affected.

340
00:22:23,220 --> 00:22:26,480
And then, so I'm going to,
first of all, end this debugging

341
00:22:26,880 --> 00:22:34,075
session and then disable mirror
D. And, if you try to reload this,

342
00:22:34,575 --> 00:22:37,635
it's going to go back to the,
original state of the application

343
00:22:37,685 --> 00:22:38,965
as it is in production.

344
00:22:38,965 --> 00:22:40,955
Right now, that works fine.

345
00:22:40,965 --> 00:22:45,735
Now, let's see if the port still, the
MIRDI that, the MIRDI agent still exists.

346
00:22:46,235 --> 00:22:50,025
Now the meridi agent no longer exists here
because we have already ended the whole

347
00:22:50,025 --> 00:22:56,175
debugging session and it is completely
Terminated right now one exciting

348
00:22:56,225 --> 00:23:00,835
thing or the it has meridi has a lot of
exciting things, by the way But like one

349
00:23:00,845 --> 00:23:04,665
exciting thing about meridi is that you
don't actually need root access to use

350
00:23:04,665 --> 00:23:09,060
meridi It is easy to get started with you
already saw how we you can install medi

351
00:23:09,060 --> 00:23:12,330
and in a matter of seconds you're already
working with the whole projects, right?

352
00:23:12,570 --> 00:23:16,320
And, medi is not invasive to like
your remote cluster, so it just

353
00:23:16,350 --> 00:23:19,080
attaches itself to the specific port.

354
00:23:19,380 --> 00:23:22,060
And, once you're done with
the whole debunking session,

355
00:23:22,090 --> 00:23:26,370
it's destroyed immediately in
a matter of 15 to 30 seconds.

356
00:23:26,370 --> 00:23:27,840
Melody is already started up.

357
00:23:28,175 --> 00:23:32,155
So you're not wasting a lot of time
loading things or downloading anything.

358
00:23:32,425 --> 00:23:35,805
You'll see, just going to
like your ID is to install it.

359
00:23:35,875 --> 00:23:39,045
It's all that you need to get
started with Meredith and you can run

360
00:23:39,295 --> 00:23:41,395
multiple processes at once, right?

361
00:23:41,455 --> 00:23:43,725
Each connected to like
different remote board.

362
00:23:44,075 --> 00:23:48,605
you're not even limited to just
maybe one specific, board at a time.

363
00:23:48,795 --> 00:23:50,885
You can get all of that with Meredith.

364
00:23:51,385 --> 00:23:56,325
And it also does not care how your
cluster is set up at the end of the day.

365
00:23:56,325 --> 00:24:01,085
So whether you have like a service
mesh or you're using a VPN or any other

366
00:24:01,135 --> 00:24:03,445
thing, Mirodi will still work regardless.

367
00:24:03,685 --> 00:24:08,505
And like I said, we have a configuration
that you can also customize things to

368
00:24:08,555 --> 00:24:10,405
your project's need at the end of the day.

369
00:24:11,140 --> 00:24:14,850
And so if you have any questions
or you want to basically learn more

370
00:24:14,860 --> 00:24:20,400
about MirrorD, we have a QR code
here that I would say you should

371
00:24:20,410 --> 00:24:24,380
scan this will take you like to the
MirrorD website so you can find out

372
00:24:24,380 --> 00:24:28,530
more about MirrorD, but then we'll,
you can also like just type mirrord.

373
00:24:28,540 --> 00:24:33,040
dev and you to the website if you want to
check out the repository, MirrorD is open

374
00:24:33,040 --> 00:24:36,890
source, so you should feel free to start
a project and appreciate the developers

375
00:24:37,180 --> 00:24:38,980
for doing such an awesome project.

376
00:24:38,980 --> 00:24:39,040
Thank you.

377
00:24:39,315 --> 00:24:40,535
You can stop me already.

378
00:24:40,535 --> 00:24:44,915
If you want to contribute to me already
as an open source, it's as well.

379
00:24:45,235 --> 00:24:47,235
discord community is really welcoming.

380
00:24:47,235 --> 00:24:50,315
We're able to support you in any
ways that you can to make your

381
00:24:50,315 --> 00:24:52,555
contribution experience really smooth.

382
00:24:53,455 --> 00:24:58,525
So you can also check out the discord
and then say hi once you do just.

383
00:24:58,840 --> 00:25:03,210
Say, hi, you're joining from KC the
Accra and I will, indicate that you're

384
00:25:03,210 --> 00:25:06,220
welcome and give you any resources
that you need to get started.

385
00:25:06,580 --> 00:25:11,620
If you also just want to find out more
about mirror D and, chat about how you

386
00:25:11,620 --> 00:25:16,220
can use it in your development workflow
as well, feel free to reach out to me

387
00:25:16,240 --> 00:25:21,470
via my email or any of like my social
media platforms at Anita is human.

388
00:25:22,000 --> 00:25:22,970
Thank you very much.

