1
00:00:00,190 --> 00:00:00,830
Hello.

2
00:00:01,190 --> 00:00:03,850
Welcome to AI with JavaScript.

3
00:00:04,520 --> 00:00:07,720
There's a great chance that you've
come to this talk because you want

4
00:00:07,730 --> 00:00:12,949
to learn how to develop your own AI
applications, all with JavaScript.

5
00:00:13,699 --> 00:00:19,649
And there's also a possibility that you
want to be able to use JavaScript because

6
00:00:19,650 --> 00:00:25,350
maybe you don't have much of an experience
with data science or machine learning.

7
00:00:26,230 --> 00:00:27,940
And I want to say to you, that's awesome.

8
00:00:28,310 --> 00:00:28,940
Because.

9
00:00:29,585 --> 00:00:35,095
Although you may not have a, like any
experience with, with machine learning,

10
00:00:35,095 --> 00:00:38,205
or if you're not very experienced
with machine learning, that doesn't

11
00:00:38,205 --> 00:00:43,995
mean that you can't actually develop
applications that can work with ML models.

12
00:00:44,225 --> 00:00:47,795
In fact, I am definitely not an expert.

13
00:00:48,220 --> 00:00:53,230
I'm probably just like you, I work
with people who I consider to be

14
00:00:53,260 --> 00:00:58,150
machine learning experts, but I
am definitely not one of them.

15
00:00:58,420 --> 00:01:02,830
However, the great thing is that so
many libraries exist now, they make

16
00:01:02,830 --> 00:01:06,989
it so easy for us to get started,
to get to learn, to build our own

17
00:01:06,989 --> 00:01:11,720
applications and from there, can like
Catapult us to learning more, right?

18
00:01:11,720 --> 00:01:16,780
Can let us go deeper into learning how
to work with machine learning, how to

19
00:01:17,040 --> 00:01:21,260
create our own models, how to train
or how to retrain existing models.

20
00:01:22,015 --> 00:01:28,555
And so two of the models that, sorry,
skipped over to the code a little bit

21
00:01:28,555 --> 00:01:34,234
sooner than I was supposed to, but two
of the models that, two of the libraries

22
00:01:34,345 --> 00:01:39,834
that, can actually help us with this in
JavaScript in particular are TensorFlow.

23
00:01:39,844 --> 00:01:44,095
js, which was created by
Google and Transformers.

24
00:01:44,095 --> 00:01:47,605
js, which was created by HuggingFace.

25
00:01:48,105 --> 00:01:52,075
Great thing about the both of these
libraries is that they're open source.

26
00:01:52,865 --> 00:01:56,685
They allow for machine
learning on the client side.

27
00:01:56,705 --> 00:02:01,925
So we don't actually have to work with
the server to actually be able to create

28
00:02:01,944 --> 00:02:04,875
our own applications with these models.

29
00:02:05,375 --> 00:02:07,495
Again, the models have been pre trained.

30
00:02:07,815 --> 00:02:12,055
They have Been trained
on an existing data set.

31
00:02:12,055 --> 00:02:16,405
You don't actually have to provide
your own data sets in order to be

32
00:02:16,405 --> 00:02:18,115
able to work with these models.

33
00:02:18,505 --> 00:02:23,065
So depending on the type of model that
you're working with, and depending

34
00:02:23,065 --> 00:02:26,275
on what you need to provide, you
wouldn't necessarily have to provide.

35
00:02:26,335 --> 00:02:29,485
you wouldn't have necessarily have
to create a data set or clean a

36
00:02:29,485 --> 00:02:31,045
data set or anything like that.

37
00:02:31,525 --> 00:02:34,675
also TensorFlow and transformers are two.

38
00:02:35,085 --> 00:02:39,255
Like libraries in Python, so you have
TensorFlow and Transformers, the Python

39
00:02:39,255 --> 00:02:44,895
libraries, and they have TensorFlow JS and
Transformers JS, the JavaScript libraries.

40
00:02:45,275 --> 00:02:49,845
So what that means is that if you
see a model that has been created,

41
00:02:49,855 --> 00:02:53,225
like with the Python libraries,
but you want to try to use them in

42
00:02:53,225 --> 00:02:58,260
JavaScript, it is possible that they
could be converted for use in Python.

43
00:02:58,420 --> 00:03:02,900
In JavaScript really depends on like
the type of, like the type of model

44
00:03:02,910 --> 00:03:06,100
that you want to work with and if
that is supported in a JavaScript

45
00:03:06,100 --> 00:03:10,720
library, however, it is possible in
both libraries actually provide like

46
00:03:10,770 --> 00:03:13,020
a conversion script that you can use.

47
00:03:13,520 --> 00:03:16,980
We can work with these libraries like
we would any other like JavaScript

48
00:03:16,980 --> 00:03:24,000
library by installing them via a CDN
npm package and both actually do allow

49
00:03:24,300 --> 00:03:26,390
for server side inferencing with node.

50
00:03:26,400 --> 00:03:27,610
js as well.

51
00:03:28,110 --> 00:03:32,755
So just to talk a little bit more
about like why machine learning in

52
00:03:32,755 --> 00:03:34,485
the browser could be a good thing.

53
00:03:34,995 --> 00:03:38,335
because, these libraries, they take care
of a lot of the work for us, but it is

54
00:03:38,335 --> 00:03:42,495
a good idea to know exactly, what type
of benefits they potentially provide.

55
00:03:43,175 --> 00:03:49,235
And One is that they can increase privacy
for our users because we wouldn't have to,

56
00:03:49,315 --> 00:03:55,165
Like we wouldn't have to send their data
elsewhere for, use with the models that

57
00:03:55,175 --> 00:03:58,096
have been developed, their data will stay
So, these are all things that you can do.

58
00:03:58,096 --> 00:03:59,601
But the last thing I want to talk
about is that you can do a model

59
00:03:59,601 --> 00:04:00,165
that is running on their device.

60
00:04:00,165 --> 00:04:02,650
And this is something that I think a lot
of people are very much concerned about.

61
00:04:03,440 --> 00:04:06,810
And so it can be really important,
especially depending on the type

62
00:04:06,810 --> 00:04:10,340
of application that you're working
with, and the type of data that you

63
00:04:10,370 --> 00:04:13,660
are, you're working with and how
like you want to keep it secure.

64
00:04:13,930 --> 00:04:20,580
working with a model that is run on
a user's device in the browser could

65
00:04:20,580 --> 00:04:24,450
definitely Be useful another thing.

66
00:04:24,540 --> 00:04:28,750
that's pretty great about working with
models in a browser is that it can

67
00:04:28,750 --> 00:04:32,880
reduce latency because again, you're
not like, you don't have to send,

68
00:04:32,930 --> 00:04:37,310
the user's data, their information
elsewhere, and then get a response to

69
00:04:37,310 --> 00:04:39,004
them, be able to provide them, with.

70
00:04:39,564 --> 00:04:41,514
Whatever that response may be, right?

71
00:04:41,514 --> 00:04:44,654
If you're working with images,
maybe you provide like information

72
00:04:44,654 --> 00:04:48,384
about the type of image or maybe
you provide text about the image.

73
00:04:49,214 --> 00:04:51,604
depending on whatever the response
is, you don't have to worry about it.

74
00:04:51,624 --> 00:04:54,534
Then like being returned
from an API, for example.

75
00:04:55,034 --> 00:04:58,654
Which kind of gets to another great
benefit of working with machine

76
00:04:58,654 --> 00:05:02,244
learning models in a browser is
that, the models can still be run

77
00:05:02,254 --> 00:05:04,074
without an internet connection.

78
00:05:04,434 --> 00:05:08,134
So if you have, an application that
maybe needs to be a progressive web app,

79
00:05:08,354 --> 00:05:13,154
this could be, a really good use for
working with machine learning models in

80
00:05:13,154 --> 00:05:17,644
a browser versus, another, alternative,
like working with it on the server.

81
00:05:18,144 --> 00:05:22,964
Another thing to note is that deployment
could be much easier if you are working

82
00:05:22,974 --> 00:05:29,174
with a machine learning model in this
way, because you would simply, deploy the

83
00:05:29,174 --> 00:05:33,964
application like a static site, like any
traditional static site, you wouldn't need

84
00:05:33,974 --> 00:05:36,874
to develop an API or anything like that.

85
00:05:37,134 --> 00:05:39,344
Could just, run as you normally would.

86
00:05:39,844 --> 00:05:43,104
However, With anything, there's
always going to be some tradeoffs and

87
00:05:43,104 --> 00:05:47,024
drawbacks, definitely, I want to keep
these things in mind when thinking

88
00:05:47,034 --> 00:05:52,704
about, whether or not working with, ML
models in a browser is the best thing,

89
00:05:52,754 --> 00:05:57,094
to do depending on exactly the type of
application that you're trying to create.

90
00:05:57,804 --> 00:06:03,804
So something to note is that once, a user
actually, once like a model is initially

91
00:06:03,804 --> 00:06:09,134
downloaded onto a user's device, it could
be a little slow the very first time

92
00:06:09,134 --> 00:06:12,784
because, to have to download it, it has
to, the initial load can take some time.

93
00:06:13,174 --> 00:06:14,254
that could take a few minutes.

94
00:06:14,614 --> 00:06:16,644
and especially depending on
the type of device that they're

95
00:06:16,644 --> 00:06:18,704
using and the network connection.

96
00:06:19,204 --> 00:06:22,894
That they have or where they are, that,
that initial load could be a little

97
00:06:22,894 --> 00:06:30,104
slow, but, after, some use it, that,
that should go away, models, when they

98
00:06:30,104 --> 00:06:33,834
are running the browser, they could be
extracted or even potentially copied.

99
00:06:34,134 --> 00:06:37,434
great thing is that in this particular
case, we're working with open source.

100
00:06:37,819 --> 00:06:39,829
libraries have open source models.

101
00:06:39,839 --> 00:06:42,179
this is not a concern
with these two libraries.

102
00:06:42,179 --> 00:06:45,999
However, depending on, what type
of models you're working with,

103
00:06:45,999 --> 00:06:47,189
this is something to keep in mind.

104
00:06:47,209 --> 00:06:50,299
Maybe if you're working with
custom models, and you're looking

105
00:06:50,379 --> 00:06:53,139
to be able to work with them in
the browser, that is something

106
00:06:53,209 --> 00:06:54,199
that you may want to think about.

107
00:06:54,749 --> 00:06:59,389
if a model is pretty large, then
it probably wouldn't be best to

108
00:06:59,389 --> 00:07:02,809
use for, I could probably be best
to use in the browser in this way.

109
00:07:02,859 --> 00:07:06,909
just because you could run into
some performance issues, especially

110
00:07:06,909 --> 00:07:08,959
depending on the user's device.

111
00:07:09,769 --> 00:07:14,379
And, something else to note is that when
working with the machine learning models

112
00:07:14,379 --> 00:07:17,289
in this way on the client side, you
have to think about, like, how are you

113
00:07:17,289 --> 00:07:21,719
going to update them because, they are
definitely going to have to, be updated.

114
00:07:22,159 --> 00:07:23,749
You don't want them to go stale.

115
00:07:24,119 --> 00:07:27,159
And then you also want to be able to
keep in mind, exactly how will you

116
00:07:27,159 --> 00:07:29,479
handle version control for those models.

117
00:07:29,979 --> 00:07:34,109
So let's get started
talking about TensorFlow JS.

118
00:07:34,609 --> 00:07:36,029
Three things that you
can do with TensorFlow.

119
00:07:36,029 --> 00:07:39,679
js is, you can work
with an existing model.

120
00:07:39,899 --> 00:07:42,739
as I mentioned, those pre trained
models, they've already been

121
00:07:42,739 --> 00:07:44,889
trained on an existing data set.

122
00:07:44,919 --> 00:07:48,729
You don't have to actually, provide data
in order to be able to work with these.

123
00:07:49,419 --> 00:07:50,219
however, TensorFlow.

124
00:07:50,219 --> 00:07:50,234
js.

125
00:07:50,514 --> 00:07:55,314
There's also the possibility of using
transfer learning to retrain models

126
00:07:55,644 --> 00:07:58,224
into Cisaflow JS with your own data.

127
00:07:58,434 --> 00:08:04,094
So if you see a model and it, it has
like a type of a task that you're

128
00:08:04,124 --> 00:08:07,674
interested in, does something that
you're particularly interested in, you

129
00:08:07,684 --> 00:08:13,124
could potentially retrain it with your
own data so that you wouldn't actually

130
00:08:13,124 --> 00:08:15,774
have to create the model from scratch.

131
00:08:15,774 --> 00:08:15,814
Thanks.

132
00:08:16,449 --> 00:08:18,919
But just actually just
change the data set.

133
00:08:19,579 --> 00:08:23,159
however, it is possible to create and
train your own models with TensorFlow.

134
00:08:23,159 --> 00:08:24,599
js as well.

135
00:08:24,829 --> 00:08:28,519
as I mentioned, you're, as a beginner,
you're probably looking to work

136
00:08:28,539 --> 00:08:30,659
with existing models, get started.

137
00:08:31,069 --> 00:08:35,864
but then as you're becoming more, as you
become more familiar, And more comfortable

138
00:08:36,194 --> 00:08:40,214
with working with, machine learning models
in a browser, or as you just want to dive

139
00:08:40,224 --> 00:08:45,114
deeper into how to, get more familiar with
the different types of models out there

140
00:08:45,114 --> 00:08:50,034
and how to, train them, then you could go
to retraining a model, as your next step.

141
00:08:50,434 --> 00:08:53,909
And then, from there, you
decide, Hey, I am ready to go.

142
00:08:54,109 --> 00:08:55,879
develop my very own model.

143
00:08:56,099 --> 00:08:59,809
And so then as that last like step
there that you can definitely do all

144
00:08:59,819 --> 00:09:01,969
with this one particular library.

145
00:09:02,469 --> 00:09:05,419
Some things that you can do in TensorFlow.

146
00:09:05,419 --> 00:09:11,189
js are like image classification,
object detection, post detection,

147
00:09:11,199 --> 00:09:13,179
and even speech command recognition.

148
00:09:13,679 --> 00:09:14,679
So I'm on the TensorFlow.

149
00:09:14,679 --> 00:09:20,389
js website here at the moment, and
I'm here on the page for the models

150
00:09:20,389 --> 00:09:23,969
page where you can see the different
types of models that are available

151
00:09:23,979 --> 00:09:27,609
for use on, for use with this library.

152
00:09:28,029 --> 00:09:30,289
You see how like different
types of vision models, as I

153
00:09:30,289 --> 00:09:31,979
mentioned, image classification.

154
00:09:32,414 --> 00:09:37,564
Object detection, we have models that
can work in particular with the body.

155
00:09:37,614 --> 00:09:40,614
So you have like face
detection type models, pose

156
00:09:40,614 --> 00:09:43,624
detection, hand pose detection.

157
00:09:44,124 --> 00:09:46,554
There are different,
like text models as well.

158
00:09:46,934 --> 00:09:50,244
So you can, have models that
work with question answering.

159
00:09:50,629 --> 00:09:54,639
text, they have a text toxicity
detector, so you can check to see,

160
00:09:54,739 --> 00:09:58,529
if the content that you see on social
media, for example, the text that you

161
00:09:58,529 --> 00:10:02,769
see on social media, you could actually
use this text toxicity detection model

162
00:10:03,079 --> 00:10:05,359
to determine, is it toxic or is it not?

163
00:10:05,859 --> 00:10:07,239
There's also audio.

164
00:10:07,579 --> 00:10:10,719
So here we have the speech command
recognition and that particular

165
00:10:10,719 --> 00:10:12,409
model, that you can work with.

166
00:10:12,909 --> 00:10:17,219
So there's also, you can go to, the
trends, not the transfer flow hub.

167
00:10:17,219 --> 00:10:17,499
Sorry.

168
00:10:17,709 --> 00:10:18,949
You can go to Kaggle.

169
00:10:18,949 --> 00:10:23,269
com models to see the
TensorFlow JS model hub.

170
00:10:23,749 --> 00:10:29,589
so I'm on the website here and I'm
going to select framework and I'm

171
00:10:29,589 --> 00:10:33,429
going to look for TensorFlow JS.

172
00:10:33,929 --> 00:10:40,339
So these are all the different models that
actually can be used with TensorFlow JS.

173
00:10:41,064 --> 00:10:42,544
and there, there are several more.

174
00:10:42,894 --> 00:10:44,354
I'm going to select this first one here.

175
00:10:44,364 --> 00:10:45,924
It's an object detection model.

176
00:10:46,424 --> 00:10:49,974
And as you can see here, it
provides more information about,

177
00:10:50,044 --> 00:10:51,764
the model and what it does.

178
00:10:52,234 --> 00:10:53,644
there's more details.

179
00:10:54,464 --> 00:10:55,204
click read more.

180
00:10:55,204 --> 00:10:57,774
You can see how this object
detector, how it works.

181
00:10:57,824 --> 00:11:00,944
it shows car, table.

182
00:11:01,494 --> 00:11:04,574
and if you continue to scroll down,
you'll even see like how to work with it.

183
00:11:04,834 --> 00:11:06,244
There's some code examples.

184
00:11:06,744 --> 00:11:07,644
So if I come down to TensorFlow.

185
00:11:07,644 --> 00:11:13,564
js, here we are, and then provide
more information about like

186
00:11:13,784 --> 00:11:15,054
how you can work with it here.

187
00:11:15,554 --> 00:11:19,684
So now what we're going to do
is actually look at a demo, that

188
00:11:19,684 --> 00:11:24,634
I've created for, this particular,
that I've created with TensorFlow.

189
00:11:24,634 --> 00:11:26,964
js for this, for this talk.

190
00:11:27,434 --> 00:11:30,534
And as you can see here, we're going
to start off with some very just

191
00:11:30,694 --> 00:11:35,424
simple HTML, very much what we're all
pretty much used to, here, I'm just

192
00:11:35,424 --> 00:11:39,554
going to have, I'm going to upload
an image and then I have a container

193
00:11:39,554 --> 00:11:44,364
where I'm actually going to, place that
particular image that has been uploaded.

194
00:11:45,064 --> 00:11:51,004
Here you can see we have the script
tags that are installing TensorFlow.

195
00:11:51,005 --> 00:11:55,844
js and then also installing the particular
image classification, image, image

196
00:11:55,844 --> 00:11:57,604
classification, model that I'm using.

197
00:11:57,604 --> 00:11:57,904
Sorry.

198
00:11:58,239 --> 00:12:00,619
Thinking image classification because
I have worked with another one before,

199
00:12:00,649 --> 00:12:03,369
but actually this one is supposed
to be the object detection model.

200
00:12:03,379 --> 00:12:04,069
My apologies.

201
00:12:04,899 --> 00:12:06,519
So here we have the TensorFlow.

202
00:12:06,520 --> 00:12:08,139
js object detection model.

203
00:12:08,339 --> 00:12:10,139
And then here I'm just importing this app.

204
00:12:10,229 --> 00:12:10,869
js.

205
00:12:11,249 --> 00:12:12,429
I'm just calling this app.

206
00:12:12,489 --> 00:12:13,859
js script here.

207
00:12:14,359 --> 00:12:16,389
Here we just have plain
old vanilla JavaScript.

208
00:12:16,889 --> 00:12:20,549
What we're going to do is we're
just going to listen for the

209
00:12:20,569 --> 00:12:22,699
image once it has been uploaded.

210
00:12:22,700 --> 00:12:22,844
That's it.

211
00:12:23,344 --> 00:12:27,754
And then we're going to
create a URL from that image.

212
00:12:28,304 --> 00:12:32,654
And then we're going to, Add the
image to, a container, like the image

213
00:12:32,654 --> 00:12:35,384
container that I showed, in the HTML.

214
00:12:35,994 --> 00:12:40,174
And the reason why we're going to do that,
because with this particular model, it

215
00:12:40,254 --> 00:12:45,214
will not work if you send the, it didn't,
work when I tried to send a file directly

216
00:12:45,214 --> 00:12:46,734
over, it didn't really enjoy that.

217
00:12:47,124 --> 00:12:51,014
we're going to create, an image
element, and then it's going to

218
00:12:51,014 --> 00:12:54,184
give it an ID if I upload the image
so that we can easily, grab it.

219
00:12:54,684 --> 00:12:59,754
And then I have this, this function that
I've created called getImagePredictions.

220
00:13:00,074 --> 00:13:03,984
And so this is where we're actually
going to have the, work with TensorFlow.

221
00:13:04,044 --> 00:13:04,714
js.

222
00:13:05,274 --> 00:13:11,434
And as you can see here, we are calling
the particular model, that was loaded.

223
00:13:11,554 --> 00:13:14,434
So if I go back to the script
tag, you see that name, CocoaSSD.

224
00:13:14,934 --> 00:13:18,924
So here, CocoaSSD, we're
going to first load the model.

225
00:13:19,649 --> 00:13:24,269
And then, from there, we're going to use
this detect method and we're going to

226
00:13:24,279 --> 00:13:28,849
send the image that has been uploaded
and it's going to make a prediction.

227
00:13:29,439 --> 00:13:33,699
And so I want to display
information about that prediction.

228
00:13:33,699 --> 00:13:37,489
I want to display the prediction
information in the, in the browser,

229
00:13:37,519 --> 00:13:40,959
so that the users can actually see,
the information about the image.

230
00:13:41,309 --> 00:13:44,869
And so what we're going to do is,
we're going to take the class.

231
00:13:45,684 --> 00:13:47,544
That's returned from the model.

232
00:13:47,814 --> 00:13:54,624
So the class will be like
the name of what is seen.

233
00:13:54,624 --> 00:13:59,304
So for example, ball would be
class in this particular model.

234
00:13:59,314 --> 00:14:01,344
So that would be part
of the response there.

235
00:14:01,834 --> 00:14:03,754
and then there is a score.

236
00:14:03,984 --> 00:14:08,324
So the score, will, Indicate
like how confident the model

237
00:14:08,354 --> 00:14:10,254
is in its actual prediction.

238
00:14:10,794 --> 00:14:12,984
And then we're just going to
convert that to a percentage.

239
00:14:13,004 --> 00:14:16,434
So it's a little bit easier to, see
and understand, when we look at the

240
00:14:16,434 --> 00:14:21,064
demo and then here we just have some
styling that we're gonna do to be

241
00:14:21,064 --> 00:14:22,934
able to display the predictions.

242
00:14:23,839 --> 00:14:28,719
and in here, we're going to use
information from that response.

243
00:14:28,809 --> 00:14:32,649
in what this particular model is
called, like it's labeled as B box.

244
00:14:32,939 --> 00:14:39,179
So there's, it can be an array,
that has information about each,

245
00:14:39,319 --> 00:14:41,889
like multiple objects in an image.

246
00:14:42,149 --> 00:14:44,559
And inside of that, you'll
have like the B box.

247
00:14:45,059 --> 00:14:48,269
And then we'll provide, the position,
select the left, the top, leave

248
00:14:48,279 --> 00:14:49,509
also the height and the width.

249
00:14:49,919 --> 00:14:52,719
And so we're going to use it
to help us better position, the

250
00:14:52,719 --> 00:14:54,929
predictions inside of the image.

251
00:14:55,429 --> 00:14:59,819
So now we're going to actually,
upload the image into, in this

252
00:14:59,829 --> 00:15:01,409
app just to show how it works.

253
00:15:01,909 --> 00:15:02,029
Upload.

254
00:15:02,529 --> 00:15:06,929
Going to upload this image
of Messi, the soccer player.

255
00:15:07,239 --> 00:15:08,389
he's holding a trophy.

256
00:15:08,529 --> 00:15:11,789
I'm imagining this is probably
after the World Cup win.

257
00:15:12,169 --> 00:15:15,129
and so you can see here, he's like
holding a trophy and that's him.

258
00:15:15,479 --> 00:15:19,769
and so the model returned
the class of person.

259
00:15:19,959 --> 00:15:23,329
So it has detected a person
inside of this image and it has

260
00:15:23,329 --> 00:15:26,129
like a 60, 66 percent confidence.

261
00:15:26,514 --> 00:15:29,464
in this prediction, probably
need to improve to see it.

262
00:15:29,464 --> 00:15:30,324
I need to improve to see it.

263
00:15:30,324 --> 00:15:34,244
It says a little bit more so that the
label, so we naturally see a little bit

264
00:15:34,254 --> 00:15:36,734
more on messy versus the trophy here.

265
00:15:37,154 --> 00:15:40,614
so it looks like this particular
datasets mainly focused on people,

266
00:15:40,904 --> 00:15:45,264
doesn't recognize, a trophy,
however, what can be done then when.

267
00:15:45,544 --> 00:15:50,084
Would be to retrain this particular
model with a data set that has more

268
00:15:50,114 --> 00:15:55,234
images, like images with trophies, or
you can even have one that maybe have

269
00:15:55,234 --> 00:15:59,924
a data set that has like images of
various soccer players, and you could

270
00:15:59,984 --> 00:16:04,884
take this model and train it so that
it could detect various soccer players.

271
00:16:05,124 --> 00:16:09,384
So instead of, it returning this
person, it could return, like messy,

272
00:16:09,384 --> 00:16:11,824
for example, or soccer, if you have.

273
00:16:12,184 --> 00:16:13,414
A data set with players.

274
00:16:13,414 --> 00:16:15,234
If you have one, it's
just maybe with athletes.

275
00:16:15,534 --> 00:16:17,734
Maybe it could determine
that, as a soccer player.

276
00:16:17,974 --> 00:16:21,364
So you could definitely be able to
find a way, to provide like more

277
00:16:21,364 --> 00:16:26,744
details by, training, retraining the
particular model with, a data set

278
00:16:26,744 --> 00:16:29,044
with even more, images to learn from.

279
00:16:29,544 --> 00:16:34,434
Okay, so next we're going to now
talk about Transformers JS and

280
00:16:34,434 --> 00:16:37,984
learn about how we can work with
this particular library as well.

281
00:16:38,484 --> 00:16:40,824
It also works with pre trained models.

282
00:16:41,084 --> 00:16:45,424
So he, these models have already
been, already have been trained on

283
00:16:45,434 --> 00:16:47,504
data set, which is really great.

284
00:16:47,604 --> 00:16:51,384
because again, as a beginner, you
can just choose the particular type

285
00:16:51,384 --> 00:16:52,622
of model you want to work with.

286
00:16:52,672 --> 00:16:55,492
another thing that is really
cool about transformers.

287
00:16:55,492 --> 00:17:00,042
js is that it can be used with custom
models that have been converted.

288
00:17:00,352 --> 00:17:04,132
So I mentioned earlier that, they're
like Python, like there's a transformers

289
00:17:04,132 --> 00:17:07,962
and it's TensorFlow, Python libraries,
and those models can be converted.

290
00:17:08,352 --> 00:17:12,282
But also my understanding is that
with transformers JS, like if you're

291
00:17:12,522 --> 00:17:17,282
working with a team, and let's say
maybe someone actually creates their

292
00:17:17,282 --> 00:17:23,782
own particular model, maybe not even
with transformers, or, PyTorch is

293
00:17:23,782 --> 00:17:25,392
usually pretty common with transformers.

294
00:17:25,792 --> 00:17:29,462
But my understanding is that there
is a way in which you can convert the

295
00:17:29,462 --> 00:17:33,452
models on these custom models that
can be used with transformers JS.

296
00:17:34,162 --> 00:17:37,862
In that particular library,
like in the browser as well,

297
00:17:38,362 --> 00:17:40,552
some of the tasks are
supported by transformers.

298
00:17:40,552 --> 00:17:40,772
J.

299
00:17:40,772 --> 00:17:40,972
S.

300
00:17:40,972 --> 00:17:42,842
or natural language processing or an L.

301
00:17:42,842 --> 00:17:43,442
P.

302
00:17:43,722 --> 00:17:48,172
such, like your test classification, your
translation, you have computer vision.

303
00:17:48,467 --> 00:17:52,307
With image classification and
object detection, automatic speech

304
00:17:52,327 --> 00:17:54,687
recognition and audio classification.

305
00:17:55,077 --> 00:17:58,857
And we even also have like multimodal
tasks that will support it.

306
00:17:59,197 --> 00:18:03,087
So an example of that would be
zero shot image classification.

307
00:18:03,487 --> 00:18:08,387
So with image classification, a model
will be trained on a particular data set.

308
00:18:08,807 --> 00:18:13,867
and so then it will recognize different
types of different types of, what we

309
00:18:13,867 --> 00:18:18,327
just saw with the TensorFlow JS that
demo, like how we recognize the person.

310
00:18:19,257 --> 00:18:25,047
However, with XeroShot, these types
of models could then, also be able

311
00:18:25,047 --> 00:18:28,717
to recognize images that they maybe
haven't been trained on, the dataset

312
00:18:28,747 --> 00:18:31,067
doesn't include, doesn't include.

313
00:18:31,682 --> 00:18:34,922
A particular image in a data set, but
it would still be able to recognize.

314
00:18:34,962 --> 00:18:38,102
So like with that image of Messi, where
he's got the trophy, maybe if we were

315
00:18:38,102 --> 00:18:42,512
working with the multimodal model, maybe
it would have recognized the trophy.

316
00:18:43,012 --> 00:18:45,112
Another thing, to note about Transformers.

317
00:18:45,112 --> 00:18:48,232
js, that I think that makes
it really, beginner friendly.

318
00:18:48,592 --> 00:18:50,292
And to be honest, this is just my opinion.

319
00:18:50,292 --> 00:18:54,352
I think it may be even more, a little
more beginner friendly than TensorFlow.

320
00:18:54,352 --> 00:18:55,442
js.

321
00:18:55,552 --> 00:18:56,942
just a little bit more beginner friendly.

322
00:18:57,212 --> 00:18:59,592
But I still think both are really
great libraries to work with.

323
00:18:59,932 --> 00:19:01,862
but something that I think
that makes Transform.

324
00:19:01,862 --> 00:19:05,642
js pretty easy to work with is
that it has this pipeline API.

325
00:19:06,492 --> 00:19:09,242
And so what that does is that it
groups a lot of the, it groups like

326
00:19:09,242 --> 00:19:13,172
the inputs and the outputs, the pre
processing of the inputs and the

327
00:19:13,182 --> 00:19:14,922
post processing the outputs together.

328
00:19:15,222 --> 00:19:18,612
So as you can see, like in this
example, there's a lot less code

329
00:19:18,642 --> 00:19:23,132
written here in comparison to that
demo, that I had with TensorFlow.

330
00:19:23,132 --> 00:19:23,152
js.

331
00:19:23,552 --> 00:19:28,282
So here, you're just going to, import
this, the pipeline from the library.

332
00:19:28,692 --> 00:19:32,752
and then here with the pipeline, you
can see I have let pipe equal await

333
00:19:32,782 --> 00:19:34,922
pipeline and then sentiment analysis.

334
00:19:35,172 --> 00:19:40,772
So here you're actually going to declare
the particular task that the model will,

335
00:19:40,872 --> 00:19:43,742
will run, like what the model will do.

336
00:19:44,192 --> 00:19:45,152
It is possible.

337
00:19:45,447 --> 00:19:48,697
To specify a specific model as well.

338
00:19:49,027 --> 00:19:54,947
However, if you don't do that, then
HuggingFace, the TransformerJS library, it

339
00:19:54,947 --> 00:19:57,637
will just choose a default model for you.

340
00:19:58,137 --> 00:20:01,367
So here we're doing a
sentiment analysis task.

341
00:20:01,577 --> 00:20:04,657
And so here I'm just going to enter
some text, in this particular example.

342
00:20:04,667 --> 00:20:07,597
So COM 42 JavaScript
is a great conference.

343
00:20:07,987 --> 00:20:13,087
And then it could return And, returned
the, a score and a label here.

344
00:20:13,307 --> 00:20:15,687
And it would be a positive,
in this particular case.

345
00:20:15,687 --> 00:20:17,137
Yes, it is a positive.

346
00:20:17,187 --> 00:20:20,107
it could also like return
like negative, for example.

347
00:20:20,387 --> 00:20:23,947
And then it will return a score
like, how positive or, negative the

348
00:20:23,947 --> 00:20:28,217
particular test is, when using this
particular sentiment analysis model.

349
00:20:28,717 --> 00:20:29,117
Like TensorFlow.

350
00:20:29,117 --> 00:20:35,647
js, HuggingFace also has a hub where you
can actually choose models to work with.

351
00:20:36,107 --> 00:20:39,037
And here we are on the website here.

352
00:20:39,367 --> 00:20:41,037
And so I'm on huggingface.

353
00:20:41,427 --> 00:20:42,927
co slash models.

354
00:20:42,937 --> 00:20:47,637
So the models page and you
can then filter by the type of

355
00:20:47,637 --> 00:20:49,247
library that you're working with.

356
00:20:49,567 --> 00:20:50,857
So I'm going to select transformers.

357
00:20:50,997 --> 00:20:52,527
js here.

358
00:20:53,027 --> 00:20:56,977
So we can only get models that
will only work that we know for

359
00:20:56,977 --> 00:20:58,747
sure will work with transformers.

360
00:20:58,747 --> 00:20:59,377
js.

361
00:20:59,927 --> 00:21:02,737
I'm going to go back to task
and so I'm going to select.

362
00:21:03,237 --> 00:21:08,007
let's see, let's say
text to video hashing.

363
00:21:08,007 --> 00:21:12,657
There aren't any texts to video,
so let's try image to text.

364
00:21:13,187 --> 00:21:17,837
So here we can see that there
are, 14 models that have, that are

365
00:21:17,837 --> 00:21:19,507
currently available to work with.

366
00:21:19,912 --> 00:21:25,112
The transformers JS library that, would,
take an image so you could take an image

367
00:21:25,362 --> 00:21:30,252
and then the model, but then provide
a text description of that, image.

368
00:21:30,612 --> 00:21:34,132
So if I click on, let's see, this
particular model seems to be pretty.

369
00:21:34,977 --> 00:21:35,627
popular.

370
00:21:36,127 --> 00:21:38,137
And here you have like more information.

371
00:21:38,927 --> 00:21:42,367
You can see how, many downloads
is received in the past month.

372
00:21:42,737 --> 00:21:44,567
You can see more information.

373
00:21:44,947 --> 00:21:49,957
this one doesn't have a whole ton of
information about like exactly what this

374
00:21:50,017 --> 00:21:54,717
model would do, but if you click, use
this model, this click on transformers JS,

375
00:21:55,087 --> 00:21:59,217
it will show like an example of how you
can actually, work with this particular.

376
00:21:59,492 --> 00:22:00,042
Model.

377
00:22:00,052 --> 00:22:04,622
So here you see with the pipeline, we're
declaring the task of image to text,

378
00:22:04,942 --> 00:22:09,862
and then we are specifying the model
name, and then from there, we can go

379
00:22:09,862 --> 00:22:12,392
on and work with this particular model.

380
00:22:13,222 --> 00:22:15,582
Something I have noticed is
that hugging face will often

381
00:22:15,582 --> 00:22:19,952
provide a link to maybe like the
transformers version of the model.

382
00:22:19,972 --> 00:22:24,522
If there's not a whole lot of information,
if you need like more details.

383
00:22:25,022 --> 00:22:28,722
However, there are some
that can have more details.

384
00:22:28,732 --> 00:22:33,302
I think I saw like an image text
to text one that provided Yeah,

385
00:22:33,302 --> 00:22:34,572
this one's a really popular one.

386
00:22:34,572 --> 00:22:38,052
So it has like more details again It
also has the use this model so you

387
00:22:38,052 --> 00:22:43,257
can still see how to we're up in this
particular model with the pipeline API.

388
00:22:43,897 --> 00:22:48,447
but then it also has some more code
examples here in the detail as well.

389
00:22:48,757 --> 00:22:53,427
and it even has an example kind of showing
how this looks, when working with this

390
00:22:53,467 --> 00:22:55,067
particular model, which is really neat.

391
00:22:55,567 --> 00:23:00,657
So I have a, demo, so I've created a
demo for, working with transformers.

392
00:23:00,657 --> 00:23:01,747
js as well.

393
00:23:02,277 --> 00:23:06,527
with this particular demo, we are
actually going to upload an image.

394
00:23:07,037 --> 00:23:11,957
I'm going to upload an image and then
we're actually going to, use the text

395
00:23:11,967 --> 00:23:16,167
to, the image to text model, to be
able to provide a text description

396
00:23:16,297 --> 00:23:18,127
of the image that has been uploaded.

397
00:23:18,127 --> 00:23:18,142
Okay.

398
00:23:18,772 --> 00:23:21,722
So a little different from what
we did with the previous demo.

399
00:23:22,282 --> 00:23:25,892
a thing I really like about HuggingFace
is that it has something known as spaces.

400
00:23:26,272 --> 00:23:30,632
And so with a space, you can actually
upload your code and then it will

401
00:23:30,642 --> 00:23:35,672
create the, then it will create app
for you is deployed automatically.

402
00:23:36,102 --> 00:23:39,932
so you don't have to actually do
anything more than just upload your code.

403
00:23:40,372 --> 00:23:41,922
if you're working with.

404
00:23:42,552 --> 00:23:47,782
If you're working with, GitHub, if you
use GitHub to, store your code remotely,

405
00:23:48,552 --> 00:23:53,812
then you can actually, connect your GitHub
repository to a space so that you can

406
00:23:53,812 --> 00:23:55,482
actually just upload it in one place.

407
00:23:55,862 --> 00:24:00,312
in this particular, example, I ended
up just I'm going to be sharing it,

408
00:24:00,312 --> 00:24:02,742
uploading the code directly to the space.

409
00:24:03,562 --> 00:24:07,572
And so you can see it was very
similar to any kind of like remote

410
00:24:07,572 --> 00:24:10,052
repository of like your branch.

411
00:24:10,402 --> 00:24:12,262
have the different files here.

412
00:24:12,762 --> 00:24:15,462
And so start off with my HTML.

413
00:24:15,797 --> 00:24:19,337
it's very similar to what we saw
with the other demo here was have

414
00:24:19,347 --> 00:24:24,037
a place where we're going to upload
the image, have um, container to

415
00:24:24,107 --> 00:24:27,957
show the image, maybe display, an
error message if there's an error.

416
00:24:28,287 --> 00:24:32,887
And then also like the, we want to,
display the description of the image.

417
00:24:33,787 --> 00:24:38,317
As you can see here, I am not actually,
I'm not, I don't have a script.

418
00:24:38,597 --> 00:24:46,047
For the, installation of the transformers
JS library here, actually, when we

419
00:24:46,107 --> 00:24:54,297
get to the JavaScript file, you will
see that it is actually being called.

420
00:24:54,517 --> 00:24:57,217
So here we're using, I'm using the
CDN here again, just, this would

421
00:24:57,227 --> 00:24:59,667
be a little easier to make it a
little bit quicker for the demo.

422
00:25:00,307 --> 00:25:05,267
but you can see here, we're call, we're
importing the pipeline from the, via

423
00:25:05,267 --> 00:25:07,927
the CDN here in the JavaScript file.

424
00:25:07,927 --> 00:25:10,117
So we didn't actually have
to declare it in the HTML.

425
00:25:10,667 --> 00:25:14,707
and then we're also, getting this,
importing this in which, you can see

426
00:25:14,747 --> 00:25:16,777
here, I have a comment that says, skip.

427
00:25:16,822 --> 00:25:18,032
so we're going to go ahead
and create our new model.

428
00:25:18,032 --> 00:25:19,022
And we're going to do a local model check.

429
00:25:19,022 --> 00:25:20,662
This model will be downloaded
from Huggy Face Hub.

430
00:25:20,892 --> 00:25:23,172
So that's why we've imported that here.

431
00:25:23,802 --> 00:25:25,402
we have, allow local models.

432
00:25:25,402 --> 00:25:27,812
We've set that to false just
to be able to skip that.

433
00:25:28,522 --> 00:25:31,662
and now we're calling, we're
going to have the pipeline API.

434
00:25:31,692 --> 00:25:35,422
We're going to specify our
task, image to text, along with

435
00:25:35,442 --> 00:25:36,722
the model that we're using.

436
00:25:36,722 --> 00:25:40,242
And, And then here again, it's like
uploading the image, getting, the

437
00:25:40,242 --> 00:25:45,012
file, creating a URL, and then what
we're going to do is here's how

438
00:25:45,012 --> 00:25:48,772
we'll actually add it into the DOM.

439
00:25:49,237 --> 00:25:53,777
create like an image element, and
then we're going to, have call this

440
00:25:53,777 --> 00:25:55,637
function called get test description.

441
00:25:55,977 --> 00:25:59,107
And so here we're actually, that
image URL, we're actually going

442
00:25:59,107 --> 00:26:03,327
to put that into, we're going to
send that to the function here.

443
00:26:03,827 --> 00:26:09,707
And when the pipe With the, like
the pipe here, when it returns, the

444
00:26:09,707 --> 00:26:11,717
text, that's what we're going to get.

445
00:26:11,717 --> 00:26:15,597
So we have this out, generated text,
and then we're actually going to

446
00:26:15,597 --> 00:26:20,557
display that text inside, like just
below the image inside the app.

447
00:26:21,357 --> 00:26:25,957
So if I go back up and I just
click on app, here, upload image.

448
00:26:26,047 --> 00:26:26,987
So I'm going to click that.

449
00:26:27,302 --> 00:26:31,362
I'm going to click a different image and
have a different soccer player this time.

450
00:26:31,712 --> 00:26:35,422
So here we have Alice Morgan,
celebrating, scoring a goal

451
00:26:35,432 --> 00:26:37,652
several years ago with Rosabelle.

452
00:26:38,082 --> 00:26:41,832
And here it has a description of two
women are playing soccer on the field,

453
00:26:42,122 --> 00:26:45,072
which is a pretty great, it's a pretty,
accurate description, I would say.

454
00:26:45,502 --> 00:26:49,602
And this particular model kind of
has pretty basic, test descriptions.

455
00:26:49,892 --> 00:26:51,672
However, maybe there's another model.

456
00:26:52,507 --> 00:26:56,257
That's in the transformers, like
library that I could convert that

457
00:26:56,257 --> 00:26:59,597
may be able to provide even more
detail about this particular image.

458
00:26:59,967 --> 00:27:05,347
I know that also I've seen in the
documentation that reinforcement learning.

459
00:27:05,682 --> 00:27:09,652
Is a supported task
with, in Transformers js.

460
00:27:09,682 --> 00:27:14,202
maybe it's possible to be able to
take a model, train it, kinda do some

461
00:27:14,202 --> 00:27:18,382
reinforcement learning to maybe kinda
like work with, adding, like working with

462
00:27:18,382 --> 00:27:21,733
your own data set and creating, and like
adding more onto that particular model.

463
00:27:22,233 --> 00:27:24,493
If you'd like to learn more about
how you can work with TensorFlow.

464
00:27:24,493 --> 00:27:26,603
js or Transformers.

465
00:27:26,603 --> 00:27:31,913
js to develop your own AI applications,
here's a link, and send my slides.

466
00:27:32,393 --> 00:27:36,493
And, and if you would like to be able
to view these slides or even the code

467
00:27:36,493 --> 00:27:43,233
examples, you Feel free to scan this
QR code and you'll be able to see, I'll

468
00:27:43,233 --> 00:27:48,263
actually have a link tree where you'll be
able to go directly to the code examples,

469
00:27:48,293 --> 00:27:51,073
the demos and the slides as well.

470
00:27:51,463 --> 00:27:55,523
Thank you so much for watching this talk.

471
00:27:55,873 --> 00:27:57,483
I hope you've enjoyed it.

472
00:27:57,503 --> 00:28:01,103
I hope you've enjoyed the Conf
42 JS conference completely.

473
00:28:01,113 --> 00:28:02,203
I hope you've learned a lot.

474
00:28:02,673 --> 00:28:06,313
And again, remember, you don't have
to be an expert to get started with

475
00:28:06,313 --> 00:28:08,913
working with AI in the browser.

476
00:28:09,133 --> 00:28:12,423
However, once you get going
with these different types of

477
00:28:12,423 --> 00:28:14,473
libraries, such as TensorFlow.

478
00:28:14,473 --> 00:28:15,213
js and Transformer.

479
00:28:15,213 --> 00:28:18,973
js, you can definitely continue to
build upon the knowledge that you gain.

480
00:28:19,833 --> 00:28:22,533
Thank you so much again,
and have a great day.

