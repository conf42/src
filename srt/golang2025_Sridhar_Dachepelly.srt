1
00:00:00,000 --> 00:00:04,160
Hello, my name is Sli, working
as a Senior principal software

2
00:00:04,160 --> 00:00:05,900
engineer at Dell Technologies.

3
00:00:06,500 --> 00:00:09,980
Today we are discussing
about the evaluation of test

4
00:00:09,980 --> 00:00:11,840
orchestration in ERP system.

5
00:00:12,340 --> 00:00:16,750
This presentation will guide you through
the evaluation challenges and future

6
00:00:16,750 --> 00:00:21,520
of test orchestration frameworks that
are ever revolutionizing the quality

7
00:00:21,670 --> 00:00:23,650
assurance in ERP implementations.

8
00:00:24,150 --> 00:00:24,720
As we.

9
00:00:25,220 --> 00:00:27,350
I explored this critical technology.

10
00:00:27,470 --> 00:00:33,050
We will uncover how organizations, can
achieve faster delivery cycles, improve

11
00:00:33,050 --> 00:00:38,089
test coverage, and significant cost
savings while maintaining the highest

12
00:00:38,089 --> 00:00:40,699
quality standards in their ERP systems.

13
00:00:41,199 --> 00:00:43,179
Let us talk some key numbers here.

14
00:00:43,679 --> 00:00:48,096
ERP market is expected to
reach $78 billion by 2029.

15
00:00:49,065 --> 00:00:57,654
And, that is up from $50 billion
in 2024, almost 50% growth and 75%

16
00:00:57,654 --> 00:01:02,844
of ERP projects face implementation
delays with 40% of these release

17
00:01:02,844 --> 00:01:05,334
are due to testing bottlenecks.

18
00:01:05,834 --> 00:01:09,195
So what are the main reason
growing complexity of ERP

19
00:01:09,195 --> 00:01:11,684
systems integration challenges.

20
00:01:12,179 --> 00:01:13,619
And testing requirements.

21
00:01:13,830 --> 00:01:20,250
ERP systems has complexity due to
integrating the functions like finance,

22
00:01:20,339 --> 00:01:25,979
hr, inventory, supply chain operations,
and some in-house applications.

23
00:01:26,479 --> 00:01:30,514
So traditional testing is not sufficient
for growing complex ERP systems.

24
00:01:30,564 --> 00:01:34,764
Traditional testing methods often
fall short for modern ERP deployments,

25
00:01:34,764 --> 00:01:41,004
leading to missed deadlines, reduce
quality and budget overruns stress,

26
00:01:41,004 --> 00:01:45,384
the urgent need for organizations to
transform their testing strategies.

27
00:01:45,884 --> 00:01:50,084
So let us understand
the test orchestration.

28
00:01:50,584 --> 00:01:52,169
So test coordination.

29
00:01:52,879 --> 00:01:59,509
We have to closely work with the
CPLs across all modules, integration

30
00:01:59,509 --> 00:02:01,399
management, and workflow automation.

31
00:02:01,899 --> 00:02:04,959
So I will provide you one good
example in these both topics,

32
00:02:04,959 --> 00:02:09,339
like in suppose in our ERP systems
has the 2230 different modules.

33
00:02:09,879 --> 00:02:12,549
Each module has the multiple test teams.

34
00:02:12,664 --> 00:02:14,614
Every team manages their own.

35
00:02:15,299 --> 00:02:19,499
Style of automation testing framework
and automation testing strategies

36
00:02:19,499 --> 00:02:21,104
and everything is at their own way.

37
00:02:21,604 --> 00:02:25,834
and, they have their own docker to
run execute, or the grid to run the,

38
00:02:25,834 --> 00:02:30,154
their automation scripts orchestration
team has to work with the business

39
00:02:30,154 --> 00:02:32,344
transformation team and CPL teams.

40
00:02:32,924 --> 00:02:38,024
Get the all the end to end scenario
requirements, and then we have to

41
00:02:38,024 --> 00:02:40,394
orchestrate their automation test scripts.

42
00:02:40,424 --> 00:02:44,384
each module test automation
scripts, we have to orchestrate it.

43
00:02:44,744 --> 00:02:49,784
So based on that, the requirements
provided by the CPLs and Business

44
00:02:49,784 --> 00:02:54,534
Transformation team, It'll be, and we
will maintain our own centralized test

45
00:02:54,759 --> 00:03:00,189
database and the every module will be
connected with the centralized database.

46
00:03:00,429 --> 00:03:05,169
And after the execution of the data
automation test script, automatically

47
00:03:05,169 --> 00:03:08,859
critically puts the results into
the our centralized database.

48
00:03:09,249 --> 00:03:12,189
So suppose first module will be execution.

49
00:03:12,189 --> 00:03:14,379
He's completed and goes to the second.

50
00:03:14,979 --> 00:03:18,699
Module and the execution starts
based on the first execution

51
00:03:18,699 --> 00:03:22,629
result because both are connected
to the our centralized database.

52
00:03:22,959 --> 00:03:25,749
So that is how it'll be seamlessly.

53
00:03:25,749 --> 00:03:28,964
It'll be connected to the one
module, to another module.

54
00:03:29,294 --> 00:03:31,484
That is how this test start castration.

55
00:03:31,984 --> 00:03:35,244
So how it'll work a little bit more.

56
00:03:35,244 --> 00:03:37,749
We will discuss in the
orchestration architecture place.

57
00:03:38,259 --> 00:03:43,749
So here we have the, like a orchestration
engine that is a command central.

58
00:03:44,289 --> 00:03:48,129
Like you can centralize your command, you
can think like that orchestration engine.

59
00:03:48,699 --> 00:03:53,819
So here, this orchestration engine
will have the control, all the

60
00:03:53,819 --> 00:04:00,580
GitLab pipelines and the, it'll be
triggered the each pipeline and.

61
00:04:01,210 --> 00:04:04,720
And it'll be connected automatically
with the centralized database

62
00:04:04,720 --> 00:04:11,620
and put the date, statuses of
the each work workflow results.

63
00:04:11,869 --> 00:04:14,089
and it'll be integrated
with the integration layer.

64
00:04:14,329 --> 00:04:15,679
What is the integration layer?

65
00:04:15,769 --> 00:04:19,859
It has the, all the GI guitar
pipelines, information, and

66
00:04:19,859 --> 00:04:21,744
the tested data information.

67
00:04:22,289 --> 00:04:26,340
Each and every data will be
stored into the integration layer.

68
00:04:26,840 --> 00:04:28,400
So what is the test execution framework?

69
00:04:29,000 --> 00:04:34,220
So each module maintains their own test
execution so that, we don't need to worry

70
00:04:34,220 --> 00:04:38,890
about the, what are the individual team
maintains the what type of framework, so

71
00:04:39,039 --> 00:04:40,960
it'll be fine, whatever the framework.

72
00:04:40,960 --> 00:04:44,609
They maintenance so they
maintain their bone tested data.

73
00:04:44,609 --> 00:04:45,840
Everything will be, that is.

74
00:04:46,275 --> 00:04:48,105
and the environment management.

75
00:04:48,405 --> 00:04:53,415
So here the, in the orchestration layer
when you implement the environment

76
00:04:53,415 --> 00:04:58,005
management as well, because in the
traditional ERP applications, we will

77
00:04:58,005 --> 00:05:00,045
see the environment management by the.

78
00:05:00,885 --> 00:05:05,354
Separate team and it has the lot
of, challenges also at the same time

79
00:05:05,354 --> 00:05:09,465
because when they are copying that
data from the production to sit our

80
00:05:09,465 --> 00:05:13,604
sitar, the dev environments, we'll miss
a lot of data and validation missing.

81
00:05:13,724 --> 00:05:15,705
So there are so many
challenges we will face it.

82
00:05:15,914 --> 00:05:21,394
and the, what are the re what are the
conditions required for the, our envi

83
00:05:21,444 --> 00:05:24,244
environment, like a, validation rules?

84
00:05:24,244 --> 00:05:25,964
Those are all the things
we are going to miss it.

85
00:05:26,174 --> 00:05:30,374
So if it's a part of the orchestration
layer, we don't miss that part.

86
00:05:30,704 --> 00:05:33,554
And the reporting analytics,
we are maintaining our own

87
00:05:33,914 --> 00:05:38,264
decentralized database, so it'll
be good for the generating the

88
00:05:38,264 --> 00:05:41,689
reports on our every requirement.

89
00:05:42,294 --> 00:05:46,484
so orchestration, that's how it
be, the orchestration architecture.

90
00:05:46,984 --> 00:05:50,914
So let us discuss about the, some
performance metrics and benefits.

91
00:05:51,414 --> 00:05:57,434
So environment set up time reduced
by the 85 by percent because we are

92
00:05:57,464 --> 00:06:00,794
maintaining the, everything is the
automated way, so that is the reason

93
00:06:01,394 --> 00:06:02,294
it'll be reduced, will be hugely.

94
00:06:02,474 --> 00:06:06,134
And the test execution time will
be reduced by the 70% of time.

95
00:06:06,494 --> 00:06:11,029
Because the way of maintaining the
test execution will be there from the

96
00:06:11,329 --> 00:06:15,519
beginning to end, and it'll be you, I
know it'll be, the implementation is

97
00:06:15,519 --> 00:06:20,079
a little tough, but at the same time,
once the implementation is done, it'll

98
00:06:20,079 --> 00:06:21,819
be, the continuous usage is there.

99
00:06:21,999 --> 00:06:23,019
Very huge here.

100
00:06:23,754 --> 00:06:25,644
And the business benefits faster.

101
00:06:25,719 --> 00:06:30,244
EERP implementation cycles better
release quality, fewer defect, making

102
00:06:30,244 --> 00:06:34,774
it to production and substantial
savings through optimized resource use.

103
00:06:35,274 --> 00:06:39,609
So artificial intelligence
in the test orchestration.

104
00:06:40,269 --> 00:06:43,839
So where we can utilize the
artificial intelligence many places.

105
00:06:44,649 --> 00:06:49,719
But here I will cover the four important
places intelligent test planning.

106
00:06:50,409 --> 00:06:54,339
So yay identifies the critical
test parts based on the user

107
00:06:54,339 --> 00:06:56,709
stories and the regression defects.

108
00:06:57,099 --> 00:07:02,214
If you integrated with the your
own model with Uber, JIRA, or Uber

109
00:07:02,364 --> 00:07:04,854
test management tool, and it'll.

110
00:07:05,354 --> 00:07:09,764
Based on the fine tuning of the ever
model, it'll be created for you.

111
00:07:10,034 --> 00:07:11,469
Very intelligent test planning.

112
00:07:12,169 --> 00:07:14,829
and the second part is the
automated test generation.

113
00:07:15,129 --> 00:07:19,574
So you have your code repository
and, the, All the methods and the

114
00:07:19,574 --> 00:07:24,824
utilities, every will, everything will
be there all already in a base, right?

115
00:07:24,944 --> 00:07:29,654
So you can create your own model and
it'll be generated the automatically

116
00:07:29,864 --> 00:07:31,244
based on the requirements.

117
00:07:31,664 --> 00:07:36,494
So end-to-end profile requirements or the
internal requirements, model requirements

118
00:07:36,674 --> 00:07:40,034
based on that one, it'll be generated
the automatically test generation.

119
00:07:40,349 --> 00:07:44,279
So the third part is the
predictive analysis based on

120
00:07:44,279 --> 00:07:45,419
the new code introduction.

121
00:07:45,419 --> 00:07:48,929
In the GitLab code report, it'll
forecast the failure pins and

122
00:07:48,929 --> 00:07:53,759
generate the new automation scripts,
self-healing, the execution.

123
00:07:53,999 --> 00:07:55,709
So what is the self-healing execution?

124
00:07:56,189 --> 00:07:59,969
If any scripts fails based on the
error, it'll fix the automation script

125
00:07:59,999 --> 00:08:05,069
automatically and generate the automation
test script so that almost 40% of the

126
00:08:05,069 --> 00:08:06,804
manual intervention will be reduced.

127
00:08:07,484 --> 00:08:11,324
so we can implement our own machine
learning models in these four steps

128
00:08:11,474 --> 00:08:13,604
and reduce the manual dependencies.

129
00:08:14,104 --> 00:08:17,104
Let us talk about the cloud
native orchestration solutions.

130
00:08:17,614 --> 00:08:22,294
the major is the scalability,
cloud-based orchestration, to handle

131
00:08:22,655 --> 00:08:27,034
over 1 million test requests per
second and intelligently allocates the

132
00:08:27,034 --> 00:08:28,714
resources based on the requirements.

133
00:08:29,254 --> 00:08:29,885
So availability.

134
00:08:30,385 --> 00:08:32,875
Enterprise grade 99 point 99%.

135
00:08:32,875 --> 00:08:37,015
Availability offered by advanced
distributed cloud architecture so that

136
00:08:37,015 --> 00:08:41,304
across global teams can execute test
scripts without any interruptions.

137
00:08:41,664 --> 00:08:44,245
Cost efficiency, flexible pay as you go.

138
00:08:44,245 --> 00:08:48,055
Models that achieve 32 40%
cost savings compared to

139
00:08:48,055 --> 00:08:49,734
traditional on-premise solutions.

140
00:08:50,275 --> 00:08:53,515
Business impact of test
orchestration, accelerated.

141
00:08:53,635 --> 00:08:57,444
Time to market, 75% faster delivery.

142
00:08:57,944 --> 00:08:58,425
Sorry.

143
00:08:58,925 --> 00:09:03,185
So business impact of test
orchestration, so accelerated time

144
00:09:03,185 --> 00:09:08,435
to market, 74% faster delivery of new
features and updates to end users.

145
00:09:09,185 --> 00:09:14,795
Enhanced quality, 65% of the reduction in
production defects leading to better user

146
00:09:14,795 --> 00:09:16,955
experience and streamlined operations.

147
00:09:17,455 --> 00:09:18,775
Improved change management.

148
00:09:18,835 --> 00:09:24,085
90% of improvement in change management
efficiency, cost optimization.

149
00:09:24,385 --> 00:09:28,730
Substantial annual savings
through optimized resource use and

150
00:09:29,130 --> 00:09:30,530
improved financial performance.

151
00:09:31,030 --> 00:09:36,150
So implementation, best practices,
always the We do, whenever we start

152
00:09:36,150 --> 00:09:40,410
the new projects, we will do small
POCs and the vendor success will come.

153
00:09:40,410 --> 00:09:43,080
Then we will go further
bigger, the same way.

154
00:09:43,380 --> 00:09:45,540
I mean start small and scale fast.

155
00:09:45,690 --> 00:09:49,330
Targeted pilot launch, begin with
your focused pilot and a critical

156
00:09:49,330 --> 00:09:51,340
ERP model before expanding.

157
00:09:51,490 --> 00:09:55,360
This methodical approach helps build
the team's expertise in orchestration

158
00:09:55,540 --> 00:09:56,830
techniques while delivering.

159
00:09:57,500 --> 00:09:59,960
Immediate measurable value rapid scaling.

160
00:10:00,230 --> 00:10:04,130
Successful organizations typically
evolve from pilot to enterprise

161
00:10:04,130 --> 00:10:07,970
wide implementation three to within
three to six months, ensuring a

162
00:10:07,970 --> 00:10:09,650
smooth and efficient transition.

163
00:10:10,150 --> 00:10:11,955
And what are the standardized test sets?

164
00:10:12,280 --> 00:10:16,900
Test sets establish unified testing
frameworks, precise naming conventions,

165
00:10:17,110 --> 00:10:19,360
and comprehensive documentation standards.

166
00:10:19,540 --> 00:10:23,849
Across all ERP components are
the modules, and, standardization

167
00:10:23,849 --> 00:10:29,339
enhances asset reusability by up
to 60% streamlines maintenance

168
00:10:29,579 --> 00:10:33,839
workflows, and it dramatically reduces
onboarding time for new team members.

169
00:10:34,339 --> 00:10:39,589
and the continuous optimization,
structured review cycles like a institute

170
00:10:39,679 --> 00:10:44,189
structured, review cycles to evaluate
orchestration performance metrics

171
00:10:44,189 --> 00:10:46,319
and uncover efficiency opportunities.

172
00:10:46,739 --> 00:10:51,659
Resource allocation, like a high
performer, organizations like

173
00:10:51,659 --> 00:10:55,314
allocate 10 to 15% of testing
resources to optimize initiatives.

174
00:10:55,814 --> 00:11:00,734
Generating three to five XRYA through
reduce execution times and improve.

175
00:11:01,234 --> 00:11:06,274
So how to implement, technical design
considerations further, orchestration

176
00:11:06,274 --> 00:11:12,184
layer, like a EA first architecture,
engineer your orchestration platform

177
00:11:12,184 --> 00:11:16,684
with comprehensive APAs that facilitate
frictionless integration with your ERP.

178
00:11:17,029 --> 00:11:22,099
Ecosystem implement, well-documented,
restful a PS with robust authentication

179
00:11:22,099 --> 00:11:27,169
protocols and consistent response
structures to ensure adaptability as

180
00:11:27,169 --> 00:11:33,679
testing requirements evolve and expand
the another main technical problem.

181
00:11:33,739 --> 00:11:39,019
We will face it when we are developing
any product security integration, so

182
00:11:39,019 --> 00:11:42,444
embed systematic security validation
within our orchestration framework.

183
00:11:42,919 --> 00:11:45,829
Including automated, vulnerable
vulnerability detection

184
00:11:46,009 --> 00:11:48,079
and regulatory complaints.

185
00:11:48,079 --> 00:11:48,769
Verification.

186
00:11:49,159 --> 00:11:54,199
Emphasize the need for continuous security
assessment through the entire development,

187
00:11:54,569 --> 00:12:00,389
and testing pipeline to safeguard critical
business assets in ERP environments.

188
00:12:01,289 --> 00:12:06,239
The another one challenge is that test
data management deploy sophisticated

189
00:12:06,294 --> 00:12:11,904
data provisioning mechanisms that
dynamically generate and maintain and

190
00:12:11,904 --> 00:12:17,094
refresh contextually appropriate data
sets for diverse testing scenarios.

191
00:12:17,844 --> 00:12:23,334
I live the importance of strategic data
management for accurately simulating the

192
00:12:23,574 --> 00:12:25,804
complex transactional workflows that.

193
00:12:26,504 --> 00:12:28,664
Characterize modern ERP systems.

194
00:12:29,164 --> 00:12:34,174
So let us go to the features
of ERP test orchestration.

195
00:12:34,674 --> 00:12:42,864
So in from 2024 to 2025, so the
mainstream adoption of sophisticated

196
00:12:42,864 --> 00:12:48,624
air power test, auto optimization, and
dynamic test generation capabilities.

197
00:12:49,209 --> 00:12:53,409
Advanced machine learning algorithms
will analyze test results in real

198
00:12:53,409 --> 00:12:58,539
time, continuously refining the
test coverage and precision without

199
00:12:58,659 --> 00:13:00,234
requiring manual interventions.

200
00:13:00,734 --> 00:13:06,914
So from the 2025 to 2027, I'm expecting
the predictive pa, like what is that?

201
00:13:06,914 --> 00:13:09,014
predictive PA transformation.

202
00:13:09,014 --> 00:13:12,194
From reactive to predictive
quality assurance methodologies,

203
00:13:12,644 --> 00:13:17,204
intelligent orchestration systems
will anticipate potential defects

204
00:13:17,264 --> 00:13:22,639
before code implementation so that
even the scope declared, when the

205
00:13:22,639 --> 00:13:24,534
scope is defined, only you can.

206
00:13:25,034 --> 00:13:28,444
Based on that one, only you can
define the Uber, test automation

207
00:13:28,444 --> 00:13:33,634
scripts, everything, so that it'll
be 50% will be reduced by that time.

208
00:13:33,814 --> 00:13:39,014
So from the 2027 to 2029,
autonomous testing, what is

209
00:13:39,014 --> 00:13:40,154
the meaning of autonomous?

210
00:13:40,604 --> 00:13:46,204
The evaluation toward fully autonomous
testing, ecosystem capable of self

211
00:13:46,204 --> 00:13:50,644
configuration, self-op optimization,
and self-healing operations.

212
00:13:51,004 --> 00:13:56,614
How human Q professionals will evolve into
strategic quality consultants focusing

213
00:13:56,614 --> 00:14:01,804
primarily on business value alignment
rather than manual test execution.

214
00:14:02,304 --> 00:14:04,074
This is end of my presentation.

215
00:14:04,574 --> 00:14:08,894
If you would like to, have a discussion,
our working session on this topic,

216
00:14:09,045 --> 00:14:11,444
I would like to have a conversation.

217
00:14:11,744 --> 00:14:12,344
Please reach out to me.

218
00:14:12,844 --> 00:14:18,964
I would like to extend my heartfelt thanks
to the Con two organization for putting

219
00:14:18,994 --> 00:14:24,364
together such a fantastic event, a special
thank you to our sponsors for their

220
00:14:24,634 --> 00:14:29,824
generous support and to all the attendees
for being here and the contributing

221
00:14:29,824 --> 00:14:32,314
to the success of this conference.

222
00:14:33,184 --> 00:14:33,634
Thank you all.

