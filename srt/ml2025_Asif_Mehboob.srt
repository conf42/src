1
00:00:00,840 --> 00:00:01,650
Hey everyone.

2
00:00:01,920 --> 00:00:04,630
I hope y'all are having a
wonderful conference at con

3
00:00:04,630 --> 00:00:06,579
42 Machine Learning 2025.

4
00:00:07,180 --> 00:00:10,570
My name is Asif Mabu, and today
I'd like to talk to you about a

5
00:00:10,570 --> 00:00:15,819
topic which has kept me awake quite
a few times at night, especially

6
00:00:15,819 --> 00:00:17,529
when designing new applications.

7
00:00:18,040 --> 00:00:25,389
And that is the decision to choose between
which architecture is right for the

8
00:00:25,389 --> 00:00:26,884
application that I'm currently building.

9
00:00:27,619 --> 00:00:32,629
Whether to go with microservices or
to go with monoliths, the decision

10
00:00:32,629 --> 00:00:37,070
between this monolithic or microservices
architecture is a really critical one

11
00:00:37,070 --> 00:00:41,910
because whatever you decide with, you
get stuck with it for a long time.

12
00:00:42,269 --> 00:00:47,700
And changing the architecture at a later
time is not always a straightforward one.

13
00:00:48,140 --> 00:00:51,800
This decision early on is what shapes
the future of your application.

14
00:00:52,835 --> 00:00:57,755
In this presentation we'll we'll explore
how each approach impacts key factors like

15
00:00:57,785 --> 00:01:02,864
scalability, performance, the efficiency
to help you make the optimal choice.

16
00:01:03,504 --> 00:01:06,514
This slide illustrates the
contrast between between the two.

17
00:01:07,204 --> 00:01:12,904
Monolith is a single unified
structure versus microservices are

18
00:01:12,964 --> 00:01:14,925
distributed modular components.

19
00:01:15,690 --> 00:01:18,570
And understanding the trade-offs
between these two architectural

20
00:01:18,600 --> 00:01:22,739
types is what is going to be crucial
for your application and selecting

21
00:01:22,739 --> 00:01:24,949
that right fit is really important.

22
00:01:26,600 --> 00:01:32,419
So what is this software architecture
dilemma, and why is it so critical?

23
00:01:32,880 --> 00:01:36,930
It's because once you decide on an
architecture and you move forward with

24
00:01:36,930 --> 00:01:42,150
that architecture, it becomes really
difficult to switch lanes at a later time.

25
00:01:42,554 --> 00:01:48,220
It's not as easy as just replacing
a function or replacing a piece

26
00:01:48,220 --> 00:01:50,240
of code within your application.

27
00:01:50,510 --> 00:01:54,070
It's it's something much bigger
than that, and more often than not,

28
00:01:54,070 --> 00:01:58,490
it'll be a rebuild from scratch if
you want to change the architecture

29
00:01:58,670 --> 00:02:00,440
of your of your application.

30
00:02:01,100 --> 00:02:04,430
So the software architecture
Choice is a critical foundation

31
00:02:04,430 --> 00:02:07,910
decision that will impact the entire
development process going forward.

32
00:02:07,910 --> 00:02:12,680
It and the right architecture can
enable scalability and business agility

33
00:02:12,990 --> 00:02:14,850
as your product and company grows.

34
00:02:15,160 --> 00:02:18,820
However, this architecture, it also
affects your long-term maintenance

35
00:02:18,820 --> 00:02:20,769
costs and your technical debt.

36
00:02:20,829 --> 00:02:26,109
So it's really important that
you choose wisely and ultimately

37
00:02:26,140 --> 00:02:27,669
your architectural decision.

38
00:02:27,729 --> 00:02:31,569
It needs to support your strategic
goals and the market responsiveness

39
00:02:31,619 --> 00:02:32,819
for the business to succeed.

40
00:02:34,964 --> 00:02:38,234
So now that we've heard the two
terms that we are discussing over

41
00:02:38,234 --> 00:02:41,864
here, let's like break that down
and see what each of them means.

42
00:02:42,224 --> 00:02:43,994
So what is a monolithic architecture?

43
00:02:44,104 --> 00:02:48,544
A monolithic architecture refers to
a single unified application where

44
00:02:48,544 --> 00:02:52,724
all of your components everything
lives within one code base.

45
00:02:53,014 --> 00:02:56,254
Components in a monolith are
tightly coupled, which means that

46
00:02:56,254 --> 00:03:00,484
they are directly interacting
with shared memory and resources.

47
00:03:01,139 --> 00:03:05,579
The entire monolithic application
is deployed as a single unit.

48
00:03:05,979 --> 00:03:09,209
Now this architectural approach
has of course some advantages,

49
00:03:09,209 --> 00:03:10,709
otherwise it wouldn't really be used.

50
00:03:10,759 --> 00:03:14,029
Simplicity of development,
simplicity of deployment.

51
00:03:14,339 --> 00:03:19,799
However as your application grows
it becomes more complex to scale

52
00:03:20,129 --> 00:03:21,359
this kind of an architecture.

53
00:03:23,249 --> 00:03:27,059
And then in comparison, we have
the microservices architecture.

54
00:03:27,389 --> 00:03:31,239
In this architecture, your approach
when you're building your applications

55
00:03:31,449 --> 00:03:35,799
is to build them as a collection of
small but independent services, right?

56
00:03:35,859 --> 00:03:39,669
Each service is focused on a specific
business function or capability,

57
00:03:39,789 --> 00:03:43,109
and the communicate with each
other through well-defined APIs.

58
00:03:43,749 --> 00:03:48,099
This allows for decentralized
data model where each service

59
00:03:48,099 --> 00:03:49,719
maintains its own database.

60
00:03:50,089 --> 00:03:55,639
Thereby reducing dependencies between
services the whole independent and modular

61
00:03:55,639 --> 00:04:00,859
nature of microservices makes it easier
to develop, deploy, and scale individual

62
00:04:00,859 --> 00:04:03,229
components as your application grows.

63
00:04:03,719 --> 00:04:08,279
Now this architectural style, it
promotes flexibility, scalability, and

64
00:04:08,279 --> 00:04:10,729
resilience of your software systems.

65
00:04:10,939 --> 00:04:16,229
Think of microservices, architecture as
service oriented architecture done right.

66
00:04:18,869 --> 00:04:22,959
So let's summarize that, what are the
core differences between your monolith

67
00:04:22,959 --> 00:04:24,639
versus microservices architecture?

68
00:04:25,239 --> 00:04:27,489
The key differences between
these two architectural

69
00:04:27,489 --> 00:04:29,619
styles are what on the slide.

70
00:04:29,979 --> 00:04:33,219
On the left, we have the characteristics
of the monolithic approach.

71
00:04:33,429 --> 00:04:38,429
Centralized code base, unified deployment,
shared database direct function

72
00:04:38,429 --> 00:04:40,709
calls, and a single technology stack.

73
00:04:40,919 --> 00:04:44,219
In contrast, we have the microservices
architecture on the right.

74
00:04:44,379 --> 00:04:48,439
It is basically distributed with
independent service deployment separate

75
00:04:48,439 --> 00:04:53,119
databases per service, API or network
communication and the ability to use

76
00:04:53,119 --> 00:04:55,279
different technologies for each service.

77
00:04:55,859 --> 00:04:58,169
These fundamental differences
in architecture have.

78
00:04:59,009 --> 00:05:05,339
Significant implications on your
application, scalability, its flexibility

79
00:05:05,339 --> 00:05:06,849
and long-term maintainability.

80
00:05:07,629 --> 00:05:11,294
And we'll explore all of that
in in the presentation further.

81
00:05:13,124 --> 00:05:16,014
So let's look at some of the
pros and cons of of the two

82
00:05:16,014 --> 00:05:17,484
different architectural styles.

83
00:05:17,534 --> 00:05:20,799
So the pros of monolith
simplicity and speed.

84
00:05:21,694 --> 00:05:25,534
Direct function calls between your
components that eliminates network

85
00:05:25,534 --> 00:05:29,664
overhead which in turn makes
your communication really fast.

86
00:05:29,944 --> 00:05:30,904
Debugging is simpler.

87
00:05:30,904 --> 00:05:33,844
Since you can trace execution
flow through a single code base.

88
00:05:34,004 --> 00:05:38,394
Initial development is quicker with less
infrastructure complexity to set it up.

89
00:05:38,634 --> 00:05:43,074
And using a single technology stack
means a simpler tool chain with fewer

90
00:05:43,074 --> 00:05:45,429
tools for developers to learn and manage.

91
00:05:47,349 --> 00:05:52,749
Now some of the cons of this like we spoke
about, it limits your flexibility, right?

92
00:05:52,989 --> 00:05:56,909
So they often have tight coupling
between your components, which, in

93
00:05:56,909 --> 00:06:01,469
turn like I said, limits flexibility
and makes it difficult to make changes

94
00:06:01,469 --> 00:06:03,269
without impacting the entire system.

95
00:06:03,759 --> 00:06:07,359
Scaling a monolith can be
really challenging as I've seen

96
00:06:07,359 --> 00:06:08,949
multiple times in my career.

97
00:06:09,304 --> 00:06:12,754
Because you have to scale the entire
application, even if a small part

98
00:06:12,754 --> 00:06:15,874
of your application is what is
experiencing the bottleneck, you'll

99
00:06:15,874 --> 00:06:21,984
have to scale the entire application
to, to scale that particular component.

100
00:06:22,594 --> 00:06:25,654
And as a monolith application
grows over time, the code base

101
00:06:25,654 --> 00:06:29,564
can become increasingly complex
increasingly unwieldy, and

102
00:06:29,564 --> 00:06:32,974
therefore it makes maintainability
a challenge as your code base grows.

103
00:06:34,519 --> 00:06:38,539
Now for the pros and cons of the
microservices architecture pros

104
00:06:38,639 --> 00:06:40,619
scalability, agility, right?

105
00:06:40,619 --> 00:06:41,369
Microservices.

106
00:06:41,399 --> 00:06:45,959
It allows us to scale individual
services independently rather than

107
00:06:45,959 --> 00:06:47,639
scaling the entire application.

108
00:06:47,999 --> 00:06:53,999
So this gives us much more control
over what our infrastructure needs are

109
00:06:54,059 --> 00:06:55,859
and what the costs are going to be.

110
00:06:56,409 --> 00:07:00,429
Each mi microservice can be deployed
independently, and it does not

111
00:07:00,429 --> 00:07:04,659
affect the rest of the application
as long as your contracts between

112
00:07:05,059 --> 00:07:07,009
those services remains the same.

113
00:07:07,309 --> 00:07:10,819
So this enables us to release new
features and updates much more

114
00:07:10,819 --> 00:07:13,009
quickly and much more frequently.

115
00:07:13,349 --> 00:07:16,439
With microservices, we have the
flexibility to choose the best programming

116
00:07:16,439 --> 00:07:20,339
language, the best frameworks, and the
best tools for each individual services.

117
00:07:20,819 --> 00:07:23,569
You want to do something
in Python do that.

118
00:07:23,629 --> 00:07:27,109
You want another portion
written in rust or go for it.

119
00:07:27,389 --> 00:07:32,754
You want something in do net you're
free to use that, best tools for the

120
00:07:32,754 --> 00:07:35,274
job is what microservices enables.

121
00:07:35,354 --> 00:07:38,384
So this allows us to
optimize for performance.

122
00:07:38,594 --> 00:07:42,224
It optimizes the developer's
productivity and also other

123
00:07:42,224 --> 00:07:43,814
specific needs of the application.

124
00:07:44,619 --> 00:07:48,849
Microservices also enables a high degree
of team autonomy, so different teams

125
00:07:48,849 --> 00:07:52,569
can work independently on different
services without having to coordinate

126
00:07:52,729 --> 00:07:55,279
extensively between each other, right?

127
00:07:55,459 --> 00:07:59,859
As you saw with monolith architectures,
that is a channel challenge

128
00:07:59,859 --> 00:08:01,239
with that architectural style.

129
00:08:03,459 --> 00:08:06,799
It's not all hunky dory when it
comes to microservices either.

130
00:08:06,799 --> 00:08:08,239
There's cons on that too.

131
00:08:08,550 --> 00:08:10,620
Mostly around complexity and overhead.

132
00:08:10,780 --> 00:08:14,760
It can introduce a lot of complexity
in managing the the coordination

133
00:08:14,760 --> 00:08:16,260
between your different services.

134
00:08:16,510 --> 00:08:20,510
Running more services means, you need
more infrastructure your operational

135
00:08:20,510 --> 00:08:22,590
costs to maintain those services.

136
00:08:22,620 --> 00:08:27,880
Then increases debugging issues because,
now that you have multiple services, it

137
00:08:27,880 --> 00:08:32,850
requires more sophisticated tools and by,
it can be a little bit more challenging.

138
00:08:33,130 --> 00:08:36,810
Network calls between your services
and the latency between those causes

139
00:08:36,810 --> 00:08:38,640
your communication overheads, right?

140
00:08:40,320 --> 00:08:45,305
So this is an interesting visualization
and shows you a visual comparison between

141
00:08:45,305 --> 00:08:47,015
the two architectural styles, right?

142
00:08:47,555 --> 00:08:51,185
So as you can see on the left, that
represents the monolithic architecture.

143
00:08:51,275 --> 00:08:53,255
So it's basically a single large weight.

144
00:08:53,565 --> 00:08:57,225
And on the right you have the
microservices architecture where you are.

145
00:08:57,550 --> 00:08:59,590
You've got smaller distributed weights.

146
00:08:59,640 --> 00:09:04,900
This basically says that when you are
scaling a monolithic architecture,

147
00:09:04,960 --> 00:09:06,850
your entire application must scale.

148
00:09:06,880 --> 00:09:10,720
Whereas with microservices, you
can scale individual services.

149
00:09:10,780 --> 00:09:14,230
Right now, monoliths have
lower resource efficiency.

150
00:09:14,390 --> 00:09:17,450
As you have to scale everything together.

151
00:09:17,855 --> 00:09:21,875
Whereas microservices allow for
more targeted scaling, so your

152
00:09:21,925 --> 00:09:23,215
resource efficiency is higher.

153
00:09:23,765 --> 00:09:27,215
Scaling a monolith is
a much simpler process.

154
00:09:27,465 --> 00:09:29,985
But microservices requires
more coordination.

155
00:09:30,565 --> 00:09:35,275
Monoliths have limited elasticity,
whereas microservices are highly elastic

156
00:09:35,275 --> 00:09:37,765
and scale up or down much more easily.

157
00:09:38,275 --> 00:09:38,635
Right

158
00:09:40,675 --> 00:09:44,685
now let's look at some of the
performance of the architecture.

159
00:09:44,970 --> 00:09:48,210
Internal function calls within a
monolith typically takes around

160
00:09:48,270 --> 00:09:52,990
one millisecond to complete because
it is within the same memory space

161
00:09:53,020 --> 00:09:54,940
within the same shared resources.

162
00:09:55,250 --> 00:09:58,410
Calling an API between
microservices usually takes 50

163
00:09:58,410 --> 00:10:00,060
to a hundred milliseconds, right?

164
00:10:00,250 --> 00:10:04,630
Microservice to microservice communication
adds about five to 10 times the

165
00:10:04,630 --> 00:10:09,390
processing overhead compared to a monolith
because of, serialization network cost.

166
00:10:09,880 --> 00:10:12,700
The performance latency differences
between a monolith and microservices

167
00:10:12,940 --> 00:10:16,760
architecture are significant, and it
is important to to understand because

168
00:10:16,760 --> 00:10:21,020
these latency differences can have a big
impact on the overall user experience

169
00:10:21,320 --> 00:10:23,280
and your systems responsiveness.

170
00:10:23,520 --> 00:10:28,260
So careful design and optimization are
required to mitigate these performance

171
00:10:28,260 --> 00:10:31,650
impacts when mo moving forward with
the microservices architecture.

172
00:10:34,530 --> 00:10:38,750
This slide basically highlights
the differences in failure modes

173
00:10:38,750 --> 00:10:42,020
between your monolithic architectures
and microservices architecture.

174
00:10:42,700 --> 00:10:47,050
On the left we see that a single
critical bug in a monolith can bring

175
00:10:47,050 --> 00:10:52,120
down the entire application because,
it's one, one single unit, right?

176
00:10:52,120 --> 00:10:54,670
Anything happens within
one component of it.

177
00:10:54,670 --> 00:10:56,770
It affects the entire
application, just like.

178
00:10:57,005 --> 00:11:00,425
When you're scaling the application,
you have to scale it completely.

179
00:11:00,455 --> 00:11:05,545
A bug affects it completely, right
on the right we see a microservices

180
00:11:05,545 --> 00:11:10,355
architecture, and in there service
failures remain isolated and the

181
00:11:10,355 --> 00:11:13,715
system can degrade gracefully.

182
00:11:14,445 --> 00:11:16,665
It shows that how microservices.

183
00:11:17,305 --> 00:11:21,475
Enables resilience patterns like
almost like circuit breakers and

184
00:11:21,475 --> 00:11:23,955
fallback mechanisms to handle failures.

185
00:11:24,315 --> 00:11:28,035
The key point is that microservices
provide more fault tolerance

186
00:11:28,035 --> 00:11:30,585
and reliability compared
to a monolithic approach.

187
00:11:32,355 --> 00:11:35,465
Now, of course building an
application is one thing.

188
00:11:35,515 --> 00:11:40,285
After the application is completed,
there are maintenance and update

189
00:11:40,285 --> 00:11:42,085
scenarios that need to be considered.

190
00:11:42,585 --> 00:11:46,225
Of course they are very important
when choosing between monolithic

191
00:11:46,225 --> 00:11:47,875
or microservices architecture.

192
00:11:47,935 --> 00:11:52,585
With the monolith, changes to the
shared code base requires modifying the

193
00:11:52,585 --> 00:11:56,635
entire application, which then needs
to be completely tested, and then the

194
00:11:56,635 --> 00:11:58,405
entire application gets redeployed.

195
00:11:58,785 --> 00:12:02,625
In contrast, microservices allow
you to update specific services

196
00:12:02,625 --> 00:12:06,945
independently, and this minimizes the
scope of your testing and deployment.

197
00:12:07,570 --> 00:12:10,510
For development, a monolith
requires modifying the shared code

198
00:12:10,510 --> 00:12:14,480
base while microservices lets you
update just the affected service.

199
00:12:14,920 --> 00:12:16,180
Testing is also more efficient.

200
00:12:16,180 --> 00:12:19,900
With microservices, you only need
to test the updated service and

201
00:12:19,900 --> 00:12:23,030
all of its integration points
rather than the entire application.

202
00:12:23,290 --> 00:12:25,600
Deployment is simpler
too with microservices.

203
00:12:25,650 --> 00:12:30,070
You can deploy just the updated service
rather than the entire application.

204
00:12:32,245 --> 00:12:36,075
Now smaller teams work well with
the monolithic architecture,

205
00:12:36,195 --> 00:12:41,575
whereas microservices are more for
accommodation of multiple teams.

206
00:12:41,885 --> 00:12:45,635
Monoliths require less coordination
between the teams, whereas microservices

207
00:12:45,635 --> 00:12:47,375
involves more cross planning.

208
00:12:47,425 --> 00:12:51,715
Monoliths have a lower initial
complexity while microservices require

209
00:12:51,995 --> 00:12:54,255
more distributed systems knowledge.

210
00:12:54,760 --> 00:12:59,610
Monoliths allow for faster delivery
initially, but microservices

211
00:12:59,610 --> 00:13:04,435
enables long-term feature delivery
in a in a more quicker pace.

212
00:13:06,685 --> 00:13:10,635
Now here's a comparison between the
cost and resource considerations between

213
00:13:10,705 --> 00:13:13,105
monolith and microservices architecture.

214
00:13:13,655 --> 00:13:17,735
The bar chart shows the relative cost
for for the different categories.

215
00:13:18,060 --> 00:13:21,750
Including initial development,
infrastructure, maintenance, scaling

216
00:13:21,970 --> 00:13:24,280
anti onboarding for initial development.

217
00:13:24,310 --> 00:13:28,410
Microservices have a higher cost
compared to a monolith infrastructure

218
00:13:28,410 --> 00:13:30,420
costs are also higher for microservices.

219
00:13:30,940 --> 00:13:33,820
Maintenance costs are lower
for microservices, obviously.

220
00:13:34,130 --> 00:13:37,730
Scaling costs are significantly
lower for microservices.

221
00:13:37,980 --> 00:13:40,470
Team onboarding costs are
higher for microservices.

222
00:13:40,560 --> 00:13:43,080
And overall the trade offs
between the two approaches.

223
00:13:43,245 --> 00:13:49,835
Is what you need to consider carefully
because that determines the scale of

224
00:13:49,835 --> 00:13:52,715
your application and that determines
the future of your application.

225
00:13:52,715 --> 00:13:55,245
So based on the needs and
constraints of your project you

226
00:13:55,245 --> 00:13:56,725
need to look at these trade offs.

227
00:13:56,780 --> 00:14:00,200
Really so where does the
monolith architecture make sense?

228
00:14:00,270 --> 00:14:03,090
Small, simple applications
with limited functionality.

229
00:14:03,705 --> 00:14:07,830
You don't need to really go into
the overhead and the complexity of

230
00:14:07,830 --> 00:14:12,840
microservices architecture go for
the simplicity of of monoliths and

231
00:14:12,840 --> 00:14:16,920
the ease of maintenance that this
architectural style provides is best

232
00:14:16,920 --> 00:14:18,860
suited for smaller applications.

233
00:14:19,260 --> 00:14:22,960
Like I said, the overhead and complexity
of microservices architecture is not

234
00:14:22,960 --> 00:14:26,920
worth the investment for these type of
applications, for early stage startups,

235
00:14:26,920 --> 00:14:31,400
speed to market is more important than
your perfect software architecture.

236
00:14:31,700 --> 00:14:35,240
So focusing on validating the
business idea should take priority

237
00:14:35,240 --> 00:14:37,040
over optimizing the infrastructure.

238
00:14:37,500 --> 00:14:41,425
Teams with limited resources, such as
tight budgets or smaller head counts,

239
00:14:41,605 --> 00:14:43,315
can minimize infrastructure cost.

240
00:14:43,315 --> 00:14:46,585
By going with the monolithic
architecture approach smaller

241
00:14:46,585 --> 00:14:50,275
teams can also more effectively
maintain that entire code base.

242
00:14:50,540 --> 00:14:56,570
Rather than the distributed code base of
a microservices architecture microservices

243
00:14:56,990 --> 00:15:01,130
are a very powerful architectural style
that can be highly beneficial for certain

244
00:15:01,130 --> 00:15:03,680
types of organizations and applications.

245
00:15:04,110 --> 00:15:08,190
They're particularly well suited for large
enterprises with multiple development

246
00:15:08,610 --> 00:15:10,960
teams high traffic web apps that need to.

247
00:15:11,495 --> 00:15:16,885
Scale depending on consumer needs have
complex business domains with distinct

248
00:15:16,885 --> 00:15:21,215
bounded contexts and organizations that
require rapid independent releases.

249
00:15:21,675 --> 00:15:25,755
The distributed nature of microservices
allows teams to work autonomously

250
00:15:25,975 --> 00:15:27,955
deploy features to production quickly.

251
00:15:27,985 --> 00:15:29,845
Without impacting other
parts of the system.

252
00:15:30,405 --> 00:15:31,815
Think Amazon, right?

253
00:15:32,685 --> 00:15:36,785
I. Microservices can also enable
scalability as individual resources

254
00:15:36,785 --> 00:15:40,905
can be scaled independently to
handle increased traffic or load,

255
00:15:41,005 --> 00:15:42,295
Christmas shopping at Amazon.

256
00:15:43,055 --> 00:15:45,875
However, microservices also
introduce additional complexity

257
00:15:45,875 --> 00:15:49,875
in areas like service discovery
interservice communication, and

258
00:15:49,925 --> 00:15:51,935
overall system observability, right?

259
00:15:52,455 --> 00:15:54,935
These trade offs need to
be, carefully considered.

260
00:15:55,175 --> 00:15:59,795
And the key is to evaluate whether the
benefits of microservices outweighs

261
00:16:00,035 --> 00:16:04,965
the added complexity for your specific
use cases and organizational needs.

262
00:16:06,585 --> 00:16:11,715
So Netflix started as a single
monolithic Java application and then,

263
00:16:11,765 --> 00:16:15,395
they had a major database corruption,
which led to a multi-day outage.

264
00:16:15,475 --> 00:16:18,625
And that kind of highlighted to
them the need for a more scalable

265
00:16:18,625 --> 00:16:19,855
and resilient architecture.

266
00:16:20,245 --> 00:16:25,035
So gradually they decomposed the monolith
into cloud-based microservices, and it

267
00:16:25,065 --> 00:16:30,525
now runs over 700 microservices that
handle over 2 billion API requests daily.

268
00:16:31,255 --> 00:16:34,405
The microservices based architecture
provides greater scalability,

269
00:16:34,405 --> 00:16:36,685
reliability, and flexibility.

270
00:16:37,045 --> 00:16:37,965
Compared to the original model.

271
00:16:38,040 --> 00:16:38,130
With,

272
00:16:40,350 --> 00:16:44,130
so this slide provides a
framework for deciding between

273
00:16:44,130 --> 00:16:47,280
a monolithic or microservices
architecture for your application.

274
00:16:47,770 --> 00:16:50,230
So there's four key factors
that you need to consider when

275
00:16:50,230 --> 00:16:51,370
you're making this decision.

276
00:16:51,400 --> 00:16:54,520
First, assess the complexity
of your application.

277
00:16:54,730 --> 00:16:59,660
Simple apps tend to work better with a
monolithic app approach, whereas complex

278
00:16:59,660 --> 00:17:01,370
domains often benefit from Microsoft.

279
00:17:02,300 --> 00:17:04,650
Next evaluate your scale requirements.

280
00:17:04,680 --> 00:17:08,590
So high volume or variable workloads
can be better handled with the

281
00:17:08,590 --> 00:17:10,910
targeted scaling of microservices.

282
00:17:11,280 --> 00:17:12,870
Also think about your team structure.

283
00:17:12,930 --> 00:17:16,440
Large distributed teams, they'll
often work more effectively with

284
00:17:16,440 --> 00:17:20,100
the ownership boundaries that
is provided by by microservices.

285
00:17:20,400 --> 00:17:23,480
And finally, map out your
growth trajectory for the

286
00:17:23,480 --> 00:17:24,440
next three to five years.

287
00:17:24,930 --> 00:17:29,010
This can help determine which
architecture will best support your

288
00:17:29,235 --> 00:17:31,885
company as your application evolves.

289
00:17:32,245 --> 00:17:37,235
And considering these factors carefully is
what will enable you to make an informed

290
00:17:37,235 --> 00:17:41,175
decision about the right architectural
approach for your specific needs.

291
00:17:42,495 --> 00:17:46,625
In conclusion, I'd say there's no
one size fits all solution when it

292
00:17:46,625 --> 00:17:48,335
comes to application architecture.

293
00:17:48,740 --> 00:17:52,610
The right approach depends on your
specific business context and goals.

294
00:17:52,940 --> 00:17:56,240
And rather than being dogmatic,
it's important to be pragmatic

295
00:17:56,300 --> 00:17:59,180
and flexible when it comes to
your architectural decisions.

296
00:17:59,520 --> 00:18:03,390
Hybrid approach that starts with a modular
monolith and strategically extracts

297
00:18:03,390 --> 00:18:08,360
microservices that can be effective an
effective way to balance your immediate

298
00:18:08,360 --> 00:18:10,430
needs with long-term scalability.

299
00:18:10,760 --> 00:18:13,880
And ultimately, the focus should be
on choosing the architecture that best

300
00:18:13,880 --> 00:18:16,160
supports your business objectives.

301
00:18:16,505 --> 00:18:20,705
And not what is the
norm or fad of the day.

302
00:18:21,045 --> 00:18:24,705
This requires balancing short-term
requirements with your long-term

303
00:18:24,765 --> 00:18:25,995
maintainability and growth.

304
00:18:26,635 --> 00:18:29,505
With this I come to a
end of my presentation.

305
00:18:29,785 --> 00:18:33,975
Hope this proved useful to you and hope
you have a good rest of the conference.

306
00:18:34,095 --> 00:18:34,455
Thank you.

