1
00:00:01,135 --> 00:00:01,860
Hey everyone.

2
00:00:01,980 --> 00:00:03,330
Thanks for joining me today.

3
00:00:03,900 --> 00:00:05,400
My name is La Bari Lan.

4
00:00:05,490 --> 00:00:10,830
I'm chief scientist at Bit Cloud
and today I'm going to show you how

5
00:00:10,830 --> 00:00:15,780
teaching AI to work with components
can help you build features faster,

6
00:00:16,170 --> 00:00:20,115
reuse more of your own code, and
stay in control of your code base.

7
00:00:21,675 --> 00:00:25,335
By the end of this talk, you'll
learn how to shift from using

8
00:00:25,395 --> 00:00:30,495
code generation tools that produce
isolated code snippets to using AI

9
00:00:30,495 --> 00:00:33,015
with an architecture first mindset.

10
00:00:33,975 --> 00:00:39,105
This will help you not only build faster,
but also keep your code base maintainable,

11
00:00:39,255 --> 00:00:42,075
scalable and understandable over time.

12
00:00:43,635 --> 00:00:47,415
If you think about it, software
development has never been about

13
00:00:47,415 --> 00:00:49,455
writing lines of code Writing.

14
00:00:49,455 --> 00:00:53,505
Lines of code is just a means
to an end, which is creating

15
00:00:53,505 --> 00:00:55,275
digital products and features.

16
00:00:56,085 --> 00:01:00,465
However, if you look at today's code
assistance like copilot or cursor,

17
00:01:01,065 --> 00:01:05,340
which I'm sure a lot of you're using,
they don't see this big picture yet.

18
00:01:05,835 --> 00:01:09,555
They do an impressive job creating
code, snippets and files, but

19
00:01:09,555 --> 00:01:13,155
they don't see the products, the
features, and the architecture

20
00:01:13,155 --> 00:01:15,014
we're actually trying to build.

21
00:01:16,365 --> 00:01:21,315
So today I'll show you how teaching
AI to think in components lets it

22
00:01:21,315 --> 00:01:26,354
move beyond code snippets and start
building full products and features and

23
00:01:26,354 --> 00:01:31,365
platforms with composable architecture
principles and reusable components.

24
00:01:32,414 --> 00:01:36,405
I'll show you why components are
the ideal building blocks for a

25
00:01:36,405 --> 00:01:41,055
common language between developers,
data scientists, non-technical

26
00:01:41,055 --> 00:01:43,785
stakeholders, and of course ai.

27
00:01:44,625 --> 00:01:48,105
And why this language can help
keep us humans in the loop

28
00:01:48,315 --> 00:01:50,205
as AI continues to advance.

29
00:01:51,130 --> 00:01:51,880
Let's dig in.

30
00:01:52,880 --> 00:01:58,460
We'll start with a quick journey surveying
how our communication with machines has

31
00:01:58,460 --> 00:02:04,940
evolved over time and why speaking in
components is just the natural next phase.

32
00:02:05,870 --> 00:02:09,350
In the beginning, were
zeroes and ones right.

33
00:02:09,350 --> 00:02:14,660
In the 1940s, the first programmers
had punch cards where each hole in the

34
00:02:14,660 --> 00:02:17,300
card physically controlled a machine.

35
00:02:18,049 --> 00:02:19,340
No abstractions.

36
00:02:19,429 --> 00:02:20,480
No shortcuts.

37
00:02:20,690 --> 00:02:25,640
You are literally speaking the machine's
language one painful bit at a time.

38
00:02:26,720 --> 00:02:32,660
Then in the 1950s came assembly languages
with commands like move, add, or jump.

39
00:02:33,350 --> 00:02:37,970
Still close to the hardware, but now you
could use symbolic instructions instead

40
00:02:37,970 --> 00:02:40,160
of remembering endless binary codes.

41
00:02:40,549 --> 00:02:43,965
So this was a small step
toward human readability.

42
00:02:45,230 --> 00:02:49,640
The real jump though came with high
level procedural languages in the

43
00:02:49,640 --> 00:02:52,160
late fifties, like Fortran and cobalt.

44
00:02:52,520 --> 00:02:57,260
And in the seventies when C was
invented, these languages introduced

45
00:02:57,320 --> 00:03:02,630
structured logic loops and
conditionals and functions, and they

46
00:03:02,630 --> 00:03:04,490
were the first compiled languages.

47
00:03:04,820 --> 00:03:08,660
The code you wrote was already
semi human, and the compiler

48
00:03:08,660 --> 00:03:10,340
translated it to machine code.

49
00:03:11,345 --> 00:03:15,334
Then in the eighties and nineties
we started using object oriented

50
00:03:15,334 --> 00:03:17,195
programming with c plus and Java.

51
00:03:17,825 --> 00:03:22,984
These languages really nailed how we
see the world as humans because the code

52
00:03:22,984 --> 00:03:28,174
was finally organized around objects
that modeled real world entities,

53
00:03:28,355 --> 00:03:30,635
not just procedures and instructions.

54
00:03:31,715 --> 00:03:35,435
The turn of the century, the mid
nineties to early two thousands

55
00:03:35,885 --> 00:03:40,234
saw the rise of scripting languages
like JavaScript, Python, and PHP.

56
00:03:41,075 --> 00:03:45,364
So these languages not only added
another level of abstraction,

57
00:03:45,665 --> 00:03:49,715
but also shifted programming
even closer to natural language.

58
00:03:50,255 --> 00:03:56,045
Not only that, but they encapsulated
many tiring technicalities, like memory

59
00:03:56,045 --> 00:03:58,204
allocation and manual compilation.

60
00:03:59,165 --> 00:04:03,785
These freed us to focus more on logic
and outcomes rather than infrastructure.

61
00:04:04,295 --> 00:04:05,704
And this is an important shift.

62
00:04:05,885 --> 00:04:10,275
Remember it for later and in
the past couple of years we've

63
00:04:10,275 --> 00:04:15,015
entered a new frontier, which is
AI assisted, co assisted coding.

64
00:04:15,855 --> 00:04:19,454
Now we have low code and no
code platforms, and we have code

65
00:04:19,454 --> 00:04:21,315
assistance for code generation.

66
00:04:22,094 --> 00:04:23,775
These aren't just new tools.

67
00:04:24,375 --> 00:04:26,955
They represent a new kind of language.

68
00:04:27,659 --> 00:04:31,679
It's not exactly natural
language, and it's not also

69
00:04:31,950 --> 00:04:33,780
code in the traditional sense.

70
00:04:34,080 --> 00:04:38,880
It's more like a dialect of English
with domain specific jargon, let's

71
00:04:38,880 --> 00:04:40,890
call it a semi-natural language.

72
00:04:42,059 --> 00:04:45,869
In just a few decades, we've
moved from speaking directly to

73
00:04:45,869 --> 00:04:50,580
the hardware to conveying the
abstract concepts of human intent.

74
00:04:51,300 --> 00:04:56,640
So if you think about it, the history of
programming is actually the history of

75
00:04:56,640 --> 00:04:59,310
making machines fluent in human language.

76
00:05:01,020 --> 00:05:02,670
So what do components have to do with it?

77
00:05:03,870 --> 00:05:07,860
This evolution that we just saw
has two main characteristics.

78
00:05:07,950 --> 00:05:12,210
One, it moves away from the
hardware toward human language

79
00:05:12,210 --> 00:05:13,560
and conceptual systems.

80
00:05:14,715 --> 00:05:20,265
Two, the building blocks of communication
between humans and machines gradually

81
00:05:20,265 --> 00:05:26,655
shifted to bigger and more complex
building blocks, just like you can

82
00:05:26,655 --> 00:05:28,215
see with the Russian dolls here.

83
00:05:28,695 --> 00:05:33,765
So these bigger and more complex
building blocks, they encapsulate

84
00:05:33,765 --> 00:05:38,445
more and more of the technical
complexity, allowing us to focus on

85
00:05:38,445 --> 00:05:43,335
the architecture and the business and
product intent rather than technicalities.

86
00:05:44,550 --> 00:05:48,630
In the earliest days, a single instruction
might simply move a value into a

87
00:05:48,630 --> 00:05:51,390
register, a tiny mechanical action.

88
00:05:52,260 --> 00:05:55,590
Later, a building block might
represent something bigger like a

89
00:05:55,590 --> 00:05:57,990
mathematical operation or an algorithm.

90
00:05:59,490 --> 00:06:02,820
As abstraction grew, our
building blocks expanded.

91
00:06:03,150 --> 00:06:08,130
They became user accounts and
shopping carts and payment flows.

92
00:06:08,490 --> 00:06:14,970
They became real world entities and
actions wrapped up neatly in code and

93
00:06:14,970 --> 00:06:19,980
as abstract abstraction grows, so do
the meaning bearing units we build with.

94
00:06:20,790 --> 00:06:22,680
We no longer move single bites.

95
00:06:22,680 --> 00:06:28,350
We move products and features, and these
are best represented by components.

96
00:06:29,940 --> 00:06:33,900
Let's dig into that a little
bit and see what components are.

97
00:06:35,010 --> 00:06:40,110
Essentially, components are independent
software entities, each representing a

98
00:06:40,110 --> 00:06:42,600
single business or product functionality.

99
00:06:43,350 --> 00:06:46,830
They're like packages or meaning
repositories, designed to be

100
00:06:46,830 --> 00:06:49,350
shared and reused across projects.

101
00:06:50,340 --> 00:06:52,560
You probably know
components from front end.

102
00:06:53,100 --> 00:06:56,880
Most developers are at least
familiar with React components like

103
00:06:56,880 --> 00:06:58,800
headers and buttons and webpages.

104
00:06:59,610 --> 00:07:03,870
But we at bid use components
to model our entire code base,

105
00:07:03,960 --> 00:07:05,580
both front end and backend.

106
00:07:06,480 --> 00:07:11,580
So we also represent each entity,
each database handler, each algorithm,

107
00:07:11,580 --> 00:07:16,740
and each microservice as a component
that everyone can access and reuse.

108
00:07:19,425 --> 00:07:24,705
But one of the most important things
about components is that they encapsulate

109
00:07:24,855 --> 00:07:27,405
all the gory technical complexity.

110
00:07:28,365 --> 00:07:31,875
First of all, the business logic
itself, the implementation.

111
00:07:32,415 --> 00:07:37,215
Then things like tests and configurations
and version control, all the things

112
00:07:37,215 --> 00:07:40,575
that you don't really need to
know in order to use a component.

113
00:07:41,595 --> 00:07:46,095
It's like you don't have to know what Lego
bricks look like on the inside in order

114
00:07:46,095 --> 00:07:47,865
to connect them with other Lego bricks.

115
00:07:48,195 --> 00:07:50,955
You just need to know what
they look like on the outside.

116
00:07:51,975 --> 00:07:57,135
So I imagine components like an iceberg
where you only see the tip, which in

117
00:07:57,135 --> 00:07:59,955
our case is the components API and docs.

118
00:08:00,615 --> 00:08:04,405
But that's really all you or the AI
need to know in order to use them.

119
00:08:06,039 --> 00:08:10,419
Having a product meaning, and a
human readable interface and hidden

120
00:08:10,419 --> 00:08:15,129
implementation makes components the
ultimate building blocks for component

121
00:08:15,129 --> 00:08:19,919
language for a common language, sorry,
a lingua franca, if you will, that can

122
00:08:19,919 --> 00:08:25,529
connect both non-technical stakeholders
and AI to what we do as developers.

123
00:08:26,340 --> 00:08:32,250
Moreover, as developers, we can be less
and less bothered by implementation and

124
00:08:32,250 --> 00:08:37,200
move more and more towards higher level
product and architecture definitions.

125
00:08:38,200 --> 00:08:42,280
So components are the words in that
language of product and business meaning.

126
00:08:42,910 --> 00:08:47,620
But like any language, there's also
syntax, a set of rules that defines

127
00:08:47,650 --> 00:08:49,390
how those words fit together.

128
00:08:50,095 --> 00:08:53,635
In this case, that syntax is
the component dependency graph.

129
00:08:54,595 --> 00:08:55,615
Here's an example.

130
00:08:56,245 --> 00:09:00,355
You can see that each node on the graph
is a frontend or backend component,

131
00:09:00,715 --> 00:09:03,175
and each edge is a dependency relation.

132
00:09:04,135 --> 00:09:08,455
This graph represents an architecture
of the entire code base, so you can.

133
00:09:09,040 --> 00:09:12,400
You can see, for example,
that header depends on logo,

134
00:09:12,520 --> 00:09:14,170
avatar and navigation menu.

135
00:09:14,500 --> 00:09:18,820
And that in turn navigation menu
is using search box, which uses

136
00:09:18,820 --> 00:09:21,310
button and search service and so on.

137
00:09:23,020 --> 00:09:26,920
But this graph actually
represents something much more.

138
00:09:27,760 --> 00:09:32,650
It's a live map of the entire business and
product functionality in the organization.

139
00:09:33,640 --> 00:09:35,470
This has a few crucial implications.

140
00:09:36,220 --> 00:09:36,940
Implications.

141
00:09:37,390 --> 00:09:41,140
This map, first of all, is visible
and clear to everyone in the

142
00:09:41,140 --> 00:09:45,280
organization, including non-technical
stakeholders and upper management.

143
00:09:46,240 --> 00:09:48,580
Second, it promotes reuse.

144
00:09:49,060 --> 00:09:53,590
When we want to create new functionality,
we first search for it on the

145
00:09:53,590 --> 00:09:58,330
existing graph, and then we create
it only if it doesn't already exist.

146
00:09:59,020 --> 00:10:02,980
So if we see, for example, that
menu already exists, we'll use

147
00:10:02,980 --> 00:10:04,660
it instead of creating a new one.

148
00:10:05,470 --> 00:10:09,940
This keeps our code base lean and
healthy and prevents it from inflating.

149
00:10:10,750 --> 00:10:15,640
But most importantly, this map can
be taught to AI and help it become

150
00:10:15,730 --> 00:10:17,920
an amazing software architect.

151
00:10:20,680 --> 00:10:21,430
Think about it.

152
00:10:21,970 --> 00:10:27,070
When a human developer and AI look
at code, they both seemingly see

153
00:10:27,130 --> 00:10:31,750
the same thing, lines of code, but
there's a significant difference.

154
00:10:32,605 --> 00:10:37,105
When AI looks at our code, it
only sees sequences of tokens.

155
00:10:37,615 --> 00:10:38,605
What are tokens?

156
00:10:39,235 --> 00:10:43,165
Operators, names of functions,
classes and variables.

157
00:10:43,465 --> 00:10:48,735
Reserved words, all the ifs and
elses, and this is comparable

158
00:10:48,735 --> 00:10:50,715
to viewing a topographical map.

159
00:10:51,465 --> 00:10:55,475
You get an exact view of the terrain,
but you don't see the functional

160
00:10:55,475 --> 00:11:00,545
meaning and boundaries that we see
as humans when we look at the code.

161
00:11:00,890 --> 00:11:03,230
We see it more like a political map.

162
00:11:03,830 --> 00:11:07,310
We see the functional boundaries
between products and features.

163
00:11:07,610 --> 00:11:11,210
We see the components that make up our
code, and we see their connections.

164
00:11:11,750 --> 00:11:14,330
And this is what we
want to teach AI to do.

165
00:11:16,520 --> 00:11:19,490
We wanna teach AI to work with
components for a few reasons.

166
00:11:19,520 --> 00:11:20,060
First of all.

167
00:11:21,875 --> 00:11:26,225
Tokens have a very small syntax
level, meaning while components

168
00:11:26,225 --> 00:11:30,500
have product or business, meaning
components have clear APIs.

169
00:11:31,085 --> 00:11:34,865
That allow them to be easily composed
with each other, which turns the task.

170
00:11:34,985 --> 00:11:40,475
We give AI from generation with
tokens to composition with components.

171
00:11:40,985 --> 00:11:45,665
Instead of generating lines of code
from scratch, it searches for existing

172
00:11:45,665 --> 00:11:51,155
components that can be reused and composes
them together, which is a much easier

173
00:11:51,155 --> 00:11:53,045
task than generating from scratch.

174
00:11:54,335 --> 00:11:58,415
Third components encapsulate
their EnCap, their implementation.

175
00:11:59,135 --> 00:12:02,585
So they both protect the
organization's IP because they

176
00:12:02,585 --> 00:12:07,025
don't expose the implementation to
the model, and they don't burden

177
00:12:07,025 --> 00:12:09,275
the model with unnecessary details.

178
00:12:09,755 --> 00:12:13,865
They provide only the exact context
the model needs without burden

179
00:12:14,075 --> 00:12:16,175
burdening it with implementation noise.

180
00:12:16,835 --> 00:12:19,565
Just like what I said about
Lego bricks a few slides ago.

181
00:12:20,255 --> 00:12:22,925
In order to put them together,
you don't need to know what

182
00:12:22,925 --> 00:12:24,425
they look like on the inside.

183
00:12:27,410 --> 00:12:31,430
Now providing AI with components and
their relations through the component

184
00:12:31,430 --> 00:12:36,770
graph means that the AI no longer
needs to infer the business or product

185
00:12:36,770 --> 00:12:39,050
functionality from sequences of tokens.

186
00:12:39,950 --> 00:12:43,940
And it also doesn't need to infer
the relations between parts of the

187
00:12:43,940 --> 00:12:48,950
code anymore, from import statements
scattered across files and repositories.

188
00:12:49,865 --> 00:12:54,965
Both the product and business meaning,
and the relations are provided to the

189
00:12:54,965 --> 00:13:02,885
model explicitly, but if we wanna be
accurate, what we're actually doing is we

190
00:13:02,885 --> 00:13:05,705
use a hybrid approach to code generation.

191
00:13:06,455 --> 00:13:12,605
It's both top down architecture first and
bottom up, which is generating tokens.

192
00:13:13,085 --> 00:13:14,435
How exactly does it work?

193
00:13:15,375 --> 00:13:17,805
It all begins with a user prompt.

194
00:13:17,985 --> 00:13:21,625
So the user prompts the model to
create a product or feature, build

195
00:13:21,625 --> 00:13:26,095
me a shopping cart or a website for
blogging or an authentication service.

196
00:13:27,265 --> 00:13:28,585
So we start top down.

197
00:13:28,855 --> 00:13:33,025
The model creates the architecture of
components that make up this new feature.

198
00:13:33,985 --> 00:13:38,395
It then proceeds to search existing
components it can reuse in this

199
00:13:38,395 --> 00:13:42,265
architecture, and it uses whatever
relevant components it found.

200
00:13:43,300 --> 00:13:47,620
Then we move to the bottom up part,
which is composed of three elements.

201
00:13:48,220 --> 00:13:54,040
One, making modifications in
existing components if necessary.

202
00:13:54,820 --> 00:13:59,530
Second, generating code
for using these components.

203
00:14:00,040 --> 00:14:04,540
And third, generating new components
for the relevant functionality that

204
00:14:04,540 --> 00:14:06,940
doesn't exist yet in the component graph.

205
00:14:08,620 --> 00:14:14,890
So it also generates tokens, but
it generates them into actual

206
00:14:14,890 --> 00:14:17,620
components and not just snippets.

207
00:14:18,820 --> 00:14:23,050
Then finally, after human review and
approval, all the changes and new

208
00:14:23,050 --> 00:14:28,900
components are immediately integrated
into the component graph and are reusable

209
00:14:28,930 --> 00:14:32,650
for everyone, both humans and ai.

210
00:14:34,120 --> 00:14:36,340
What does it actually
look like on our platform?

211
00:14:37,885 --> 00:14:43,435
So at the top left, you can see the
user's prompt build a news platform.

212
00:14:44,155 --> 00:14:50,305
Then our model called Hope AI suggests the
architecture here, for example, you can

213
00:14:50,305 --> 00:14:57,655
see it's suggesting a few scopes, design
news platform, and articles, and you can

214
00:14:57,655 --> 00:15:00,325
also see that the components inside them.

215
00:15:00,625 --> 00:15:05,395
Some are new, but some are
reused and some are modified.

216
00:15:06,535 --> 00:15:11,125
Finally on the right, you can see what
it looks like in product production after

217
00:15:11,125 --> 00:15:14,965
the components have been created and
approved by the developer and deployed.

218
00:15:17,815 --> 00:15:21,355
So what does this shift
actually mean for developers?

219
00:15:21,835 --> 00:15:23,125
Let's start with speed.

220
00:15:24,115 --> 00:15:29,575
Many of us, probably most of us, are
already expected to deliver at AI speed.

221
00:15:30,445 --> 00:15:33,505
This shift is happening whether
we're ready for it or not.

222
00:15:34,705 --> 00:15:38,925
Make, but working with components
makes that speed manageable.

223
00:15:40,065 --> 00:15:43,905
First of all, you spend less time
on low level implementation and more

224
00:15:43,905 --> 00:15:47,535
time on high level architecture,
which accelerates delivery.

225
00:15:48,735 --> 00:15:53,805
Second, you ship faster because you reuse
and compose rather than code from scratch.

226
00:15:54,765 --> 00:15:58,995
Third, new and modified components,
since they're automatically

227
00:15:58,995 --> 00:16:00,495
integrated into the graph.

228
00:16:00,975 --> 00:16:04,035
Instantly reusable over time.

229
00:16:04,035 --> 00:16:06,735
You need to generate
less and less components.

230
00:16:07,275 --> 00:16:11,865
The more components you have, the more you
can reuse, the less you need to create.

231
00:16:13,305 --> 00:16:18,105
And finally, components are runnable
and testable, so you can validate their

232
00:16:18,105 --> 00:16:23,115
functionality and their impact on the
rest of the graph before they're deployed.

233
00:16:23,265 --> 00:16:27,075
This is a big difference too,
about the systems that exist today.

234
00:16:30,015 --> 00:16:30,585
Second.

235
00:16:30,635 --> 00:16:34,895
The second implication is
having maintainable code bases.

236
00:16:35,915 --> 00:16:41,615
So building with components doesn't just
make us faster, it keeps our code bases

237
00:16:41,615 --> 00:16:43,835
lean, understandable, and scalable.

238
00:16:44,285 --> 00:16:49,025
How first, as I said before, the
component graph is a live map

239
00:16:49,685 --> 00:16:52,805
of all the business and product
functionality in the organization.

240
00:16:53,495 --> 00:16:59,825
So all the existing components are visible
to everyone, and you and the AI can

241
00:16:59,825 --> 00:17:03,125
always know what you can reuse Second.

242
00:17:03,545 --> 00:17:06,035
Representing the entire code base is one.

243
00:17:06,035 --> 00:17:11,345
Graph means that changes are made at
the component level and not scattered

244
00:17:11,405 --> 00:17:13,715
across files and separate repositories.

245
00:17:14,285 --> 00:17:18,515
This makes it easy for both humans
and AI to understand and maintain.

246
00:17:19,535 --> 00:17:24,545
Third, by reusing components, we
avoid inflating our code bases

247
00:17:24,545 --> 00:17:26,105
with duplicate functionality.

248
00:17:26,705 --> 00:17:30,875
Today, two developers sitting in
the same room can ask the model to

249
00:17:30,875 --> 00:17:32,975
generate the exact same functionality.

250
00:17:33,065 --> 00:17:37,745
Let's say a button, and the model
will happily create both instances.

251
00:17:38,465 --> 00:17:43,220
Now think about what happens in
a big company over time, how much

252
00:17:43,325 --> 00:17:48,005
duplicate code is created and how
much chaos it can create at scale.

253
00:17:50,590 --> 00:17:53,135
The third thing I wanna
talk about is collaboration.

254
00:17:54,005 --> 00:17:57,545
So that's another interesting
aspect in that shift.

255
00:17:58,295 --> 00:18:03,065
It doesn't just affect developers,
it transforms collaboration

256
00:18:03,065 --> 00:18:05,045
across the entire organization.

257
00:18:05,825 --> 00:18:10,715
At the center, we can find the component
graph as a basis for co collaboration.

258
00:18:11,405 --> 00:18:16,085
It's visible to everyone, even if not
everyone goes into the implementation

259
00:18:16,085 --> 00:18:17,885
details or can understand them.

260
00:18:19,145 --> 00:18:24,935
Then in the circle closest to it, we have
developers and AI who can compose features

261
00:18:24,995 --> 00:18:27,515
and guide architecture and review outputs.

262
00:18:28,805 --> 00:18:33,605
The next circle includes non-technical
or less technical stakeholders that are

263
00:18:33,605 --> 00:18:35,270
still involved in the development process.

264
00:18:36,485 --> 00:18:41,495
The product managers and designers
who can now see, understand, and

265
00:18:41,495 --> 00:18:42,935
iterate on the component graph.

266
00:18:43,445 --> 00:18:44,015
How come?

267
00:18:44,735 --> 00:18:47,855
Because first of all, people don't
have to be highly technical to

268
00:18:47,855 --> 00:18:50,345
understand component APIs and docs.

269
00:18:51,035 --> 00:18:56,105
Second components have version control,
so now product and design can actually

270
00:18:56,165 --> 00:19:00,635
make changes and open pool requests
and review and approve components.

271
00:19:01,865 --> 00:19:04,715
This means that they are now
part of the development loop.

272
00:19:05,300 --> 00:19:11,810
Much more than before, which makes dev
cycles a lot faster and more efficient.

273
00:19:14,060 --> 00:19:18,800
Then in the outermost circles, we
have marketing, sales, business and

274
00:19:18,800 --> 00:19:23,900
leadership teams who, for the first
time gain visibility into system

275
00:19:23,900 --> 00:19:28,670
structure and feature flow so they
can now understand how the product

276
00:19:28,670 --> 00:19:31,190
is actually evolving in real time.

277
00:19:32,645 --> 00:19:37,265
Basically, this is what happens when
development becomes a shared language

278
00:19:37,355 --> 00:19:39,785
rather than a siloed activity.

279
00:19:42,635 --> 00:19:48,965
And finally, as we assign more and
more development tasks to ai, it's

280
00:19:48,965 --> 00:19:53,000
important to think about how to keep
humans in the loop in the long run.

281
00:19:54,245 --> 00:19:58,355
This is another advantage of components,
is a shared language for a few reasons.

282
00:19:59,330 --> 00:20:01,220
First using components.

283
00:20:01,460 --> 00:20:04,790
We have a shared entity to
collaborate on and improve.

284
00:20:04,790 --> 00:20:09,770
Over time, AI can propose improvements,
which humans can understand and

285
00:20:09,770 --> 00:20:11,720
valid validate or fine tune.

286
00:20:12,560 --> 00:20:17,300
It's so much easier to read component
documentation and tests than going over

287
00:20:17,300 --> 00:20:19,160
all the lines of code in a snippet.

288
00:20:20,075 --> 00:20:24,515
And when human developers change
individual components, it's easier for

289
00:20:24,515 --> 00:20:28,925
the AI to understand these changes, and
not only that, it can also understand

290
00:20:28,925 --> 00:20:30,995
their impact on the entire graph.

291
00:20:32,495 --> 00:20:37,115
Second, when we build with components,
we augment our code base carefully

292
00:20:37,295 --> 00:20:41,315
instead of just letting AI generate
endless amounts of duplicate code.

293
00:20:42,245 --> 00:20:46,235
This keeps our code bases lean and
understandable to humans in the long run.

294
00:20:47,615 --> 00:20:53,285
Third human control over ai crucially
depends on the permissions we give it,

295
00:20:54,035 --> 00:20:56,255
what it can access, what it can decide.

296
00:20:57,275 --> 00:21:01,715
A modular component based approach
ensures granular permissions.

297
00:21:01,940 --> 00:21:06,320
In instead of letting AI act
across a monolithic system,

298
00:21:06,980 --> 00:21:08,960
each component is isolated.

299
00:21:09,380 --> 00:21:15,620
So if something behaves unpredictably, it
can be reviewed or modified or replaced

300
00:21:15,680 --> 00:21:17,840
without risking the entire system.

301
00:21:18,740 --> 00:21:24,170
In short, composable AI means
controllable ai critical

302
00:21:24,170 --> 00:21:26,270
decisions stay human controlled.

303
00:21:26,750 --> 00:21:31,790
AI can't overstep and systems stay
safe and visible and scalable.

304
00:21:32,790 --> 00:21:36,929
So through components, humans and
AI are finally speaking the same

305
00:21:36,929 --> 00:21:41,909
language, the language of product,
functionality, architecture and intent.

306
00:21:42,689 --> 00:21:46,740
This is how we build faster and smarter
and how we keep humans in the loop.

307
00:21:47,699 --> 00:21:52,139
Because let's face it, GI blame only
tells half the story now, doesn't it?

308
00:21:55,080 --> 00:21:55,920
So thank you.

309
00:21:56,460 --> 00:22:00,750
Come check us out at Bit Cloud
and connect with me on LinkedIn.

310
00:22:01,350 --> 00:22:02,820
My name is Ali Bar Lan.

311
00:22:02,910 --> 00:22:05,910
I'd love to hear your thoughts
and of course if you have any

312
00:22:05,910 --> 00:22:07,650
questions, I'd love to answer.

313
00:22:08,670 --> 00:22:12,450
So hope to hear from you and hope
you enjoy the rest of the conference.

