1
00:00:00,040 --> 00:00:00,710
Hello, everyone.

2
00:00:00,720 --> 00:00:05,050
Welcome to cloud native 2025
from conf 40 to conference.

3
00:00:05,360 --> 00:00:06,890
I'm Gayatri Jehanmohan.

4
00:00:06,970 --> 00:00:11,000
I am going to talk about Kubernetes
for industrial IOT ecosystem.

5
00:00:11,340 --> 00:00:15,049
I'm a software engineer at Microsoft
and we'll get into the talk today.

6
00:00:15,549 --> 00:00:19,660
So the first thing I want to talk about is
what are the different architecture that

7
00:00:19,660 --> 00:00:21,800
is out there for industrial ecosystem?

8
00:00:22,350 --> 00:00:25,580
So the first one that I want to
talk is the monolithic architecture.

9
00:00:25,935 --> 00:00:31,725
So in monolithic architecture, as you can
see in this diagram, that every layer in

10
00:00:31,725 --> 00:00:34,485
the architecture is very tightly coupled.

11
00:00:34,575 --> 00:00:37,935
So they are all deployed
in one single unit.

12
00:00:38,235 --> 00:00:45,125
So what it does is all these, layers like
the device layer, which is the one which

13
00:00:45,125 --> 00:00:49,295
closer to the devices and sensors, and
the second layer is the data tion layer.

14
00:00:49,595 --> 00:00:53,375
And then the third layer is the business
logic unit, the actual processing.

15
00:00:53,685 --> 00:00:58,235
Part of it, and then the UI layer,
all these are very tightly coupled.

16
00:00:58,235 --> 00:01:02,515
So what happens is when anything goes
wrong, it affects the whole application.

17
00:01:02,885 --> 00:01:06,375
So this is an example of a
monolithic, architecture.

18
00:01:07,065 --> 00:01:09,955
Let's talk about the other architecture,
which is famous out there, which is

19
00:01:10,305 --> 00:01:12,025
getting more popularity these days.

20
00:01:12,025 --> 00:01:16,165
And it was also implemented in a lot of
technological industrial technological

21
00:01:16,185 --> 00:01:18,265
solution is microservice architecture.

22
00:01:18,675 --> 00:01:21,725
So microservice architecture is
very different from monolithic.

23
00:01:22,075 --> 00:01:27,115
You can see in this, in this diagram
that each of the microservice, you can

24
00:01:27,135 --> 00:01:32,815
think of it as a simple, small program,
which is running and it does, it has

25
00:01:32,895 --> 00:01:35,135
have a single responsibility principle.

26
00:01:35,525 --> 00:01:39,605
So all of these microservices are
independently deployable services.

27
00:01:39,935 --> 00:01:42,054
So meaning that if this is.

28
00:01:42,315 --> 00:01:45,075
doing one operation, it doesn't
affect the other microservices

29
00:01:45,075 --> 00:01:46,295
that is running parallelly.

30
00:01:46,635 --> 00:01:49,335
So all these, microservices
are loosely coupled.

31
00:01:50,035 --> 00:01:55,505
And say if one microservice is using
another tech stack, it doesn't necessarily

32
00:01:55,505 --> 00:01:56,995
have to follow the same tech stack.

33
00:01:56,995 --> 00:02:02,615
So every person can develop that,
develop their microservices with the tech

34
00:02:02,615 --> 00:02:04,195
stack that they are comfortable with.

35
00:02:04,725 --> 00:02:10,140
So because of this, architecture, these
microservices application can be scaled

36
00:02:10,210 --> 00:02:13,500
because if you want to add another
microservice, you can pretty much add

37
00:02:13,510 --> 00:02:18,170
that, which makes it more resilient
because if this microservices goes down,

38
00:02:18,450 --> 00:02:23,900
then you can pretty much add another
one and the resilience is very good.

39
00:02:24,160 --> 00:02:26,320
It also makes the fault isolation.

40
00:02:26,560 --> 00:02:30,770
So if this microservices is not running
properly, or if there is some issues,

41
00:02:30,790 --> 00:02:34,660
it's not going to affect the entire
system like the monolithic architecture.

42
00:02:35,100 --> 00:02:38,020
It is also very DevOps and
continuous integration and

43
00:02:38,060 --> 00:02:39,560
continuous deployment friendly.

44
00:02:39,770 --> 00:02:44,700
you can keep on deploying new versions
of the microservices very easily.

45
00:02:45,040 --> 00:02:48,860
now that we have seen both the type of
architecture, let's see which one is

46
00:02:48,860 --> 00:02:51,130
better for the industrial IoT ecosystem.

47
00:02:51,680 --> 00:02:53,619
first let's talk about
the monolithic part.

48
00:02:54,029 --> 00:02:56,879
In the monolithic, there is
a single point of failure.

49
00:02:56,929 --> 00:03:01,010
if say for example, the business logic
is no longer working, then what happens

50
00:03:01,029 --> 00:03:05,556
is it doesn't it does affect the whole
thing, so it doesn't give time to recover.

51
00:03:05,556 --> 00:03:09,025
So you need to wait for the
whole system to recover.

52
00:03:09,265 --> 00:03:13,155
which makes it, not a comfortable
situation for large industrial ecosystem.

53
00:03:13,815 --> 00:03:14,775
So you have to wait.

54
00:03:14,845 --> 00:03:16,295
There's a lot of downtime.

55
00:03:16,645 --> 00:03:21,745
And also there is very, less chance
for scalability because in order to add

56
00:03:21,795 --> 00:03:25,715
another app or another new technology,
you have to wait for the downtime.

57
00:03:26,135 --> 00:03:29,915
So also it makes it very difficult to
integrate with any modern solutions.

58
00:03:29,925 --> 00:03:34,145
For example, if you want to add a, an
app to use the AI models, then you have

59
00:03:34,145 --> 00:03:38,795
to ensure that you have to test it and
ensure that everything works and make

60
00:03:38,795 --> 00:03:42,125
sure that the application is down for
some time, add it and then get it back.

61
00:03:42,455 --> 00:03:46,215
It is only suitable for small scale
operations, but for industrial operations,

62
00:03:46,215 --> 00:03:50,645
it's not at all profitable because the
scale of the number of devices in the

63
00:03:50,645 --> 00:03:54,355
industry and the number of factories
that you want to add, if it's a lot,

64
00:03:54,705 --> 00:03:56,425
then monolithic will definitely fail.

65
00:03:57,165 --> 00:04:00,335
And also latency is very
critical in industrial ecosystem.

66
00:04:00,375 --> 00:04:03,555
If any of the machine goes down,
you want to be notified very

67
00:04:03,555 --> 00:04:07,615
quickly and with no downtime, which
is not supported in monolithic.

68
00:04:07,955 --> 00:04:09,905
So that's why monolithic is not.

69
00:04:10,245 --> 00:04:12,275
going to work for industrial ecosystem.

70
00:04:12,755 --> 00:04:13,865
So what works then?

71
00:04:14,755 --> 00:04:16,795
Which is the microservice architecture.

72
00:04:17,145 --> 00:04:20,025
The reason I'll get into it
later, but before that we should

73
00:04:20,025 --> 00:04:22,895
look into what are the different
architecture in the microservice

74
00:04:22,945 --> 00:04:24,605
architecture itself available.

75
00:04:24,955 --> 00:04:29,325
So one is the Kubernetes based
microservice architecture and other is

76
00:04:29,385 --> 00:04:32,015
serverless and other is traditional VMs.

77
00:04:32,135 --> 00:04:33,315
These are the top three ones.

78
00:04:33,315 --> 00:04:35,215
We'll get into the
features of each of them.

79
00:04:35,610 --> 00:04:39,180
So first is the Kubernetes,
powered microservice architecture.

80
00:04:39,630 --> 00:04:44,930
The feature of it is pretty much, you can
imagine like an opera concert where the

81
00:04:44,940 --> 00:04:50,810
person is standing and understanding who
has to go first, the guitarist or pianist.

82
00:04:51,110 --> 00:04:53,320
The similar is like the
Kubernetes environment.

83
00:04:53,720 --> 00:04:57,930
It is a very, automated orchestration
for container deployment.

84
00:04:58,030 --> 00:05:00,110
So it's an open source
one, open source software.

85
00:05:00,705 --> 00:05:04,385
So it also gives automatic
scaling and self healing features.

86
00:05:04,775 --> 00:05:08,605
So it is widely used during, during a
large scale industrial application, and

87
00:05:08,605 --> 00:05:10,795
also most of the apps are cloud native.

88
00:05:11,335 --> 00:05:15,525
And also, it's good to use Kubernetes
environment when you need high

89
00:05:15,525 --> 00:05:17,525
resilience as well as high observability.

90
00:05:18,275 --> 00:05:20,125
So the next, type of
architecture is serverless.

91
00:05:20,625 --> 00:05:24,825
The serverless, you can imagine
like a small serverless function

92
00:05:24,825 --> 00:05:29,235
running the cloud, just like
Azure Functions or AWS Lambda.

93
00:05:30,145 --> 00:05:32,875
So those functions are
mostly event driven.

94
00:05:33,145 --> 00:05:36,515
So whenever some changes happens in the
database or the user interface, then

95
00:05:36,525 --> 00:05:39,005
those serverless functions get deployed.

96
00:05:39,245 --> 00:05:42,905
So they are very fully managed
and also it scales automatically,

97
00:05:43,255 --> 00:05:44,935
but it is very lightweight.

98
00:05:45,105 --> 00:05:47,685
So you don't have to wait
for the whole service to run.

99
00:05:48,290 --> 00:05:51,120
It can do its function
and then finish it off.

100
00:05:51,480 --> 00:05:53,330
So only when there is an event.

101
00:05:53,600 --> 00:05:56,340
So this is a serverless type
of microservice architecture,

102
00:05:56,340 --> 00:05:57,640
which is also widely used.

103
00:05:58,120 --> 00:06:02,430
And also now we have the traditional
VMs, which is, like you can

104
00:06:02,430 --> 00:06:04,480
deploy all your services in a VM.

105
00:06:04,500 --> 00:06:06,600
But, you have direct
control of your hardware.

106
00:06:06,650 --> 00:06:07,740
You want to ensure.

107
00:06:08,205 --> 00:06:11,845
That, hardware resources are fully
optimized and you go for this method.

108
00:06:12,145 --> 00:06:17,305
And, also these, the solution is widely
preferred during, legacy constraints.

109
00:06:17,315 --> 00:06:21,595
So you have an old software running
and you want to keep them in that VM.

110
00:06:21,905 --> 00:06:25,795
And also there's security reasons because
you cannot deploy it in the cloud.

111
00:06:25,795 --> 00:06:29,375
So you have it in the traditional
VM, bare metal software.

112
00:06:29,865 --> 00:06:33,695
So understanding all these
three microservice architecture,

113
00:06:33,695 --> 00:06:34,845
let's get into the detail of.

114
00:06:35,340 --> 00:06:40,070
Why kubernetes environment is really
good for the industrial IoT ecosystem.

115
00:06:40,520 --> 00:06:43,590
So we'll get into five
reasons why it is really good.

116
00:06:43,600 --> 00:06:47,340
So let's talk about the first one,
which is scalability and resilience.

117
00:06:47,840 --> 00:06:53,380
So as I said, kubernetes is an open source
container deployment and orchestrator.

118
00:06:53,880 --> 00:06:57,120
So it's, it's open source is
developed by Google in the beginning

119
00:06:57,120 --> 00:06:58,300
and then it was open source.

120
00:06:58,300 --> 00:06:59,730
Now it's very widely used.

121
00:07:00,340 --> 00:07:04,210
So some of the properties of
Kubernetes is it has auto scaling

122
00:07:04,210 --> 00:07:09,350
feature, which means that it can
support horizontal or vertical pods.

123
00:07:09,850 --> 00:07:13,370
Like you can add pods whenever
you have a high workload.

124
00:07:13,650 --> 00:07:15,690
So it can adjust the workload dynamically.

125
00:07:15,790 --> 00:07:18,880
So if you don't have that much
workload, you can scale it down as well.

126
00:07:18,880 --> 00:07:22,750
So scaling up and scaling down is such
a good feature, which makes it very

127
00:07:22,750 --> 00:07:26,080
easy for industrial ecosystem because
things are changing very quickly.

128
00:07:26,630 --> 00:07:28,970
As well as it has self
healing properties, which is.

129
00:07:29,425 --> 00:07:32,935
Automatically, it restarts if
any of the failed services are

130
00:07:33,245 --> 00:07:34,175
not working as per expectation.

131
00:07:34,175 --> 00:07:37,965
So that it can have zero downtime.

132
00:07:37,965 --> 00:07:42,015
You will pretty much not even notice that
there's something, some services have gone

133
00:07:42,035 --> 00:07:46,415
down because Kubernetes will ensure that
the resources are moved automatically.

134
00:07:46,765 --> 00:07:49,667
Because it makes it a very
compelling reason for critical

135
00:07:49,667 --> 00:07:51,064
industrial applications, right?

136
00:07:51,064 --> 00:07:53,394
and also multi node failover.

137
00:07:53,794 --> 00:07:58,264
In, Kubernetes, if one node fails over,
then the other nodes takes over because

138
00:07:58,294 --> 00:08:04,274
it creates multiple redundancy across and
also ensures that the, that it is in the

139
00:08:04,274 --> 00:08:06,254
device on prem as well as in the cloud.

140
00:08:06,524 --> 00:08:10,964
So it makes it a very good, solution
for scalability and resilience purpose.

141
00:08:11,384 --> 00:08:12,024
The second is.

142
00:08:12,839 --> 00:08:16,979
For IoT, for industrial IoT, you
have a lot of devices running on

143
00:08:16,979 --> 00:08:19,229
the edge, cloud, as well as on prem.

144
00:08:19,519 --> 00:08:22,639
which all these scenarios
are supported by Kubernetes.

145
00:08:23,089 --> 00:08:26,469
And also there are lightweight
Kubernetes like K3S and micro kubernetes.

146
00:08:27,429 --> 00:08:30,149
They can run on very low
power industrial gateways.

147
00:08:30,369 --> 00:08:33,519
Because you need some gateways
very close to the industry.

148
00:08:33,779 --> 00:08:36,379
And this Kubernetes is capable,
this lightweight Kubernetes

149
00:08:37,019 --> 00:08:38,149
are capable of running.

150
00:08:38,479 --> 00:08:40,619
in the industrial gateways as well.

151
00:08:40,899 --> 00:08:42,689
And there is also multi cloud support.

152
00:08:42,689 --> 00:08:46,299
for example, you can deploy
in AWS as well as in Azure.

153
00:08:46,299 --> 00:08:49,909
You don't have to go for all
or nothing cloud scenarios.

154
00:08:49,919 --> 00:08:54,089
that makes it a very compelling reason
for industry because you might, you might

155
00:08:54,129 --> 00:08:57,509
want to use one cloud for one purpose
and another cloud for another purpose.

156
00:08:57,949 --> 00:09:02,049
this all makes it a very compelling
reason to also go for, given it

157
00:09:02,049 --> 00:09:03,709
is microservice architecture.

158
00:09:04,309 --> 00:09:07,859
And the third one, which is a more
important one in today's world, because

159
00:09:07,889 --> 00:09:10,449
this is security is getting more traction.

160
00:09:10,739 --> 00:09:14,699
So in Kubernetes, it has like
role based access control.

161
00:09:14,699 --> 00:09:18,619
So only person who needs to get the
access will get the access and other

162
00:09:18,619 --> 00:09:23,889
person have either a read or a, very fine
grained control access can be also given.

163
00:09:24,229 --> 00:09:26,419
with RBAC support in Kubernetes.

164
00:09:26,689 --> 00:09:30,039
And also we have network policies,
autologging and monitoring.

165
00:09:30,279 --> 00:09:34,809
All these are taken care by the
Kubernetes orchestration itself.

166
00:09:34,809 --> 00:09:39,199
So the industry don't have to go
and look for it and do extra stuff.

167
00:09:39,739 --> 00:09:43,709
And the fourth one, which is another
important aspect, is the observability.

168
00:09:44,009 --> 00:09:46,709
We want to know what's going on in
the industry, whether if you need

169
00:09:46,709 --> 00:09:50,979
a maintenance, if you need, if you
need immediate action into something

170
00:09:50,999 --> 00:09:55,309
like The machines are heating up
and we need to ensure the cool down.

171
00:09:55,609 --> 00:09:59,909
All these things can be really
done real time and Kubernetes

172
00:09:59,929 --> 00:10:01,669
makes a very compelling reason.

173
00:10:02,479 --> 00:10:07,129
The reason because it supports Prometheus,
Grafana, all these advanced logging

174
00:10:07,129 --> 00:10:11,659
metrics and alerting system, which makes
it much, much easier for industrial

175
00:10:11,659 --> 00:10:16,699
ecosystem to take actions immediately and
then serve the customers in the right way.

176
00:10:17,199 --> 00:10:18,669
Which is for the developer aspects.

177
00:10:18,669 --> 00:10:23,139
So anytime you want to deploy a new
version and ensure that you want to

178
00:10:23,179 --> 00:10:25,359
deploy it very quickly, test it out.

179
00:10:25,629 --> 00:10:28,109
Then the continuous integration
and continuous deployment

180
00:10:28,119 --> 00:10:29,839
support in Kubernetes is amazing.

181
00:10:30,284 --> 00:10:34,594
Also, you can roll any updates, for
example, if the new version is not

182
00:10:35,104 --> 00:10:39,064
supporting, then you can go back to
the older version in a minute of time.

183
00:10:39,424 --> 00:10:43,654
And also there is blue green deployment,
which is basically A B testing, where you

184
00:10:43,654 --> 00:10:48,214
can test out blue, another solution, a
green, another solution, and ensure that

185
00:10:48,529 --> 00:10:52,669
Which one is working fine before going
to production you can check it out and

186
00:10:52,669 --> 00:10:58,149
ensure that everything is smooth So this
kind of gives no downtime scenario because

187
00:10:58,149 --> 00:11:02,359
everything is tested out before you go
into the production environment So all

188
00:11:02,369 --> 00:11:07,249
these five are reasons are very compelling
to go into the kubernetes So now I'll

189
00:11:07,689 --> 00:11:09,499
get into the benefits of it, right?

190
00:11:09,499 --> 00:11:13,489
Because we have seen all these things,
but what does it mean in numbers?

191
00:11:13,489 --> 00:11:14,869
What does it actually do?

192
00:11:15,199 --> 00:11:17,109
So we have four, big numbers.

193
00:11:17,389 --> 00:11:20,009
One is first is the
faster deployment cycle.

194
00:11:20,009 --> 00:11:21,439
As I mentioned, right?

195
00:11:21,439 --> 00:11:24,599
It has Kubernetes and it
enables continuous delivery.

196
00:11:24,699 --> 00:11:26,719
So you can roll updates.

197
00:11:27,144 --> 00:11:30,084
in a matter of, less time
than you would imagine.

198
00:11:30,344 --> 00:11:32,934
And also, if there is any security
patches that need to be applied,

199
00:11:32,934 --> 00:11:34,714
it can be done very seamlessly.

200
00:11:34,824 --> 00:11:38,194
we also, you will have no
downtime, which makes it very

201
00:11:38,194 --> 00:11:40,004
easy to do faster deployments.

202
00:11:40,354 --> 00:11:44,534
And also, if you want to deploy
only one, component and you want

203
00:11:44,534 --> 00:11:48,654
to not affect the other one, then
also it is a pretty good, solution.

204
00:11:48,714 --> 00:11:53,454
making it overall 40 percent faster
than the monolithic, architecture.

205
00:11:54,084 --> 00:11:59,154
So the next one is the uptime, which is
one of the favorite part, because you will

206
00:11:59,154 --> 00:12:01,714
not even notice if anything goes down.

207
00:12:02,084 --> 00:12:04,604
So the self healing
capabilities are amazing.

208
00:12:04,614 --> 00:12:08,354
And also Kubernetes has this
way of offloading the workloads

209
00:12:08,394 --> 00:12:09,534
across different nodes.

210
00:12:09,844 --> 00:12:11,274
It makes it well balanced.

211
00:12:11,564 --> 00:12:14,424
So when one node goes down, the
other node takes over, making

212
00:12:14,424 --> 00:12:15,764
it a very quick healing time.

213
00:12:16,134 --> 00:12:19,474
And also it reschedules the
workloads based on node availability.

214
00:12:19,744 --> 00:12:23,744
Making sure we have very less,
impact on any things that go wrong.

215
00:12:24,194 --> 00:12:27,284
And third one is the reduction in cost.

216
00:12:27,694 --> 00:12:31,844
So the cost part is, can be looked
into the optimization, right?

217
00:12:31,864 --> 00:12:35,044
Whenever we don't use much,
we want to make sure that we

218
00:12:35,044 --> 00:12:36,254
are scaling it down, right?

219
00:12:36,534 --> 00:12:38,244
in the monolithic, it's not possible.

220
00:12:38,304 --> 00:12:41,634
The whole full fledged architecture
needs to be running all the time

221
00:12:42,004 --> 00:12:43,464
in order to serve the customers.

222
00:12:43,754 --> 00:12:46,974
But in the case of kubernetes,
then if you don't have that much

223
00:12:47,004 --> 00:12:50,834
workload, then you can tone it down
or tone it up based on your needs.

224
00:12:51,194 --> 00:12:56,034
And also you can set the node to
occupy a certain type of memory

225
00:12:56,044 --> 00:13:00,674
and resources, making it a very
constrained environment for the node

226
00:13:00,704 --> 00:13:04,154
so that you're not over utilizing it
so that your budget is not crossing.

227
00:13:04,644 --> 00:13:08,034
And also the same goes for
agent cloud environment.

228
00:13:08,034 --> 00:13:11,724
You can dynamically scale up
and down, making it a very.

229
00:13:12,104 --> 00:13:17,694
A good reason to switch because it can
give you a lot of money that is, that

230
00:13:17,694 --> 00:13:20,164
gets saved in the operational cost.

231
00:13:20,404 --> 00:13:24,044
And the fourth and the main
important thing is fault isolation.

232
00:13:24,044 --> 00:13:29,124
we talked about like how much, Kubernetes
can actually move the workloads around

233
00:13:29,124 --> 00:13:32,264
so that you don't see the impact at all.

234
00:13:32,264 --> 00:13:34,694
So the entire system is
intact and still running.

235
00:13:35,079 --> 00:13:38,249
And also there is another feature
in kubernetes, which is namespace

236
00:13:38,369 --> 00:13:40,329
isolation as well as pod isolation.

237
00:13:40,629 --> 00:13:45,659
So ensuring all the services are managed,
separately, so that if one thing is

238
00:13:46,529 --> 00:13:48,599
changed, it doesn't affect the other one.

239
00:13:48,869 --> 00:13:52,409
So overall it gives like 3x
improvement in fault isolation.

240
00:13:52,909 --> 00:13:56,899
And finally, I have a case study for
you, which is Azure IoT Operation.

241
00:13:56,919 --> 00:14:01,209
All this theory and concepts is actually
implemented in an actual product.

242
00:14:01,559 --> 00:14:06,239
Microsoft has recently launched this
product called as Azure IoT Operation.

243
00:14:06,599 --> 00:14:09,379
And we're going to touch base on
the architecture a little bit.

244
00:14:09,779 --> 00:14:13,249
So here you can see in the
left most side is the factory.

245
00:14:13,669 --> 00:14:18,479
So the factory is going to have
all these cameras, IP cameras and

246
00:14:18,479 --> 00:14:20,089
different standard of cameras.

247
00:14:20,669 --> 00:14:22,629
And then there is
something called as OPC UA.

248
00:14:22,629 --> 00:14:26,859
It's also another standard
where it can, get details of the

249
00:14:27,259 --> 00:14:29,149
edge devices in different ways.

250
00:14:29,149 --> 00:14:31,489
Like it can be a truck,
it can be a gateway.

251
00:14:31,829 --> 00:14:32,379
Excuse me.

252
00:14:32,559 --> 00:14:36,579
So all these are the different,
devices that exist in the camera.

253
00:14:36,939 --> 00:14:41,359
And all these workloads needs to be
managed using Kubernetes environment.

254
00:14:41,714 --> 00:14:46,454
So Azure IoT operation is not just a
microservice architecture of Kubernetes,

255
00:14:46,474 --> 00:14:51,094
but it also has an event driven
mechanism of using a highly available

256
00:14:51,094 --> 00:14:54,174
and highly scalable MQTT broker.

257
00:14:54,634 --> 00:14:59,394
So you can also use Azure Arc services
like machine learning, app services, etc.

258
00:15:00,214 --> 00:15:05,304
And also it is, you can use the different
Azure infrastructure services like

259
00:15:05,304 --> 00:15:10,234
Defender, Monitor, etc. So this is
the whole Azure IoT operation which is

260
00:15:10,254 --> 00:15:15,284
enabled by Azure Arc. And also it has
the highly available broker as well as

261
00:15:15,284 --> 00:15:19,344
data flows, which converts your data
format from one to another format so

262
00:15:19,344 --> 00:15:20,804
that you can process in the cloud.

263
00:15:21,244 --> 00:15:24,964
So once this data comes through from the
broker, you can manage it in the cloud

264
00:15:24,984 --> 00:15:31,484
using different cloud, data visualization
and pipeline like fabric, even grid and

265
00:15:32,204 --> 00:15:34,524
hub storage, data explorers and so on.

266
00:15:34,524 --> 00:15:37,944
So these are all cloud based
application and you can use also

267
00:15:37,944 --> 00:15:41,324
Power BI to look into the data in
a way that you like, filter it.

268
00:15:41,944 --> 00:15:45,404
And also there is an operational
support where the operator can see

269
00:15:45,404 --> 00:15:47,084
the whole deployment end to end.

270
00:15:47,424 --> 00:15:51,944
So this is an example of,
Kubernetes orchestration in action.

271
00:15:51,954 --> 00:15:55,114
This is actually getting
deployed in industries today.

272
00:15:55,614 --> 00:15:59,384
And the main features of it
is like it's built up recent

273
00:15:59,424 --> 00:16:02,184
Kubernetes native application,
which is what we talked about.

274
00:16:02,484 --> 00:16:04,394
We are seeing that live in action.

275
00:16:04,654 --> 00:16:09,014
It's highly scalable, resilient,
as well as extensible and making

276
00:16:09,014 --> 00:16:10,494
it all secure from end to end.

277
00:16:11,114 --> 00:16:15,414
Also, it lets you manage Edge services
and resources from the cloud, as I talked

278
00:16:15,414 --> 00:16:19,894
about, using Azure Arc. And also, it can
integrate the customer workloads, to a

279
00:16:19,894 --> 00:16:22,024
platform to create a unified solution.

280
00:16:22,464 --> 00:16:27,724
it also supports GitOps, so making it easy
for deployment and also rolling updates.

281
00:16:28,104 --> 00:16:31,334
And it integrates with, as I said,
the data service pipeline like

282
00:16:31,334 --> 00:16:35,264
Event Hub Grid, making it very easy
to integrate with the cloud and

283
00:16:35,264 --> 00:16:37,454
ensure post processing is easier.

284
00:16:37,934 --> 00:16:42,794
And as I said, it includes a highly
industry grade, edge native MQTT broker.

285
00:16:43,084 --> 00:16:46,104
So it powers even the
event driven architecture.

286
00:16:46,404 --> 00:16:50,384
So you're using a kind of like a
hybrid, Kubernetes as well as event

287
00:16:50,394 --> 00:16:52,404
driven in the Azure IoT operation.

288
00:16:53,004 --> 00:16:56,084
So yeah, that's all for this talk.

289
00:16:56,394 --> 00:16:58,754
If you have any questions, please
reach out to me on LinkedIn.

290
00:16:59,254 --> 00:17:00,134
Thank you so much.

