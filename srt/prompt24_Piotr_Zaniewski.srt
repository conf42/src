1
00:00:00,140 --> 00:00:03,510
Today, I would like to talk to
you about prompt automation.

2
00:00:04,100 --> 00:00:08,530
We all know about creating prompts, but
using command line tools and automating

3
00:00:08,530 --> 00:00:11,540
them can bring us more efficiency.

4
00:00:12,040 --> 00:00:13,739
the rise of AI in automation.

5
00:00:14,090 --> 00:00:15,839
AI is obviously everywhere.

6
00:00:15,950 --> 00:00:17,299
We are here on this conference.

7
00:00:17,860 --> 00:00:18,980
We want to hear about it.

8
00:00:19,869 --> 00:00:21,580
That's a no brainer.

9
00:00:22,389 --> 00:00:25,819
However, there are certain
challenges in integrating AI tools.

10
00:00:25,830 --> 00:00:27,679
There's a proliferation of AI tools.

11
00:00:28,289 --> 00:00:33,080
There's quite a few of them, and
I always found command line based

12
00:00:33,080 --> 00:00:35,690
workflows to be the most efficient.

13
00:00:35,720 --> 00:00:42,389
They lend themselves very well to be
automated, and I feel that integrating

14
00:00:42,419 --> 00:00:47,080
AI in this way into your workflow
is just the best bang for the buck.

15
00:00:47,580 --> 00:00:51,340
this talk will be about
simplifying AI integration.

16
00:00:51,350 --> 00:00:55,430
We'll explore how we make, how
we can make this command line

17
00:00:55,430 --> 00:00:57,459
integration more accessible.

18
00:00:57,915 --> 00:00:59,955
Easier and more efficient.

19
00:01:00,455 --> 00:01:03,785
But before we start a little
bit about me, my name is Piotr.

20
00:01:03,885 --> 00:01:07,164
I work at Loft Labs as a head
of engineering enablement.

21
00:01:07,854 --> 00:01:11,845
You can reach me via my
web page or an email.

22
00:01:12,505 --> 00:01:17,905
I typically, I work with cloud native
technologies, so if you have questions

23
00:01:17,905 --> 00:01:22,954
around docker, kubernetes, vcluster,
linux and so on, I'd be happy to chat.

24
00:01:23,415 --> 00:01:27,745
Otherwise, in my spare time, I
do a lot of open source work.

25
00:01:28,645 --> 00:01:31,465
I tweak my dot files as a hobby.

26
00:01:32,220 --> 00:01:35,890
So this is called perpetual
erasing, I believe.

27
00:01:36,730 --> 00:01:38,150
So if then you know.

28
00:01:38,150 --> 00:01:43,770
If you don't, that means that I'm simply a
geek that likes to tweak with my computer.

29
00:01:44,270 --> 00:01:48,039
All right, so let's talk about
how to create prompts easier.

30
00:01:48,060 --> 00:01:49,760
There's a few ways.

31
00:01:49,839 --> 00:01:50,764
how I found.

32
00:01:51,115 --> 00:01:53,125
That prompts can be
created in an easier way.

33
00:01:53,125 --> 00:01:59,705
First of all, if you're an Antropic
user, and you have access to Claude, they

34
00:01:59,705 --> 00:02:02,675
recently introduced a prompt generator.

35
00:02:02,805 --> 00:02:04,094
So let me show you how it works.

36
00:02:04,495 --> 00:02:09,494
You have this generate prompt command
here, and we can simply say something

37
00:02:09,504 --> 00:02:13,464
like, summarize my daily activities.

38
00:02:13,465 --> 00:02:14,099
activities.

39
00:02:14,599 --> 00:02:17,239
So that's just a simple sentence,
and we can click generate.

40
00:02:17,909 --> 00:02:23,039
And what it will do, it will try
to generate a pretty solid prompt

41
00:02:23,399 --> 00:02:27,519
using best practices in prompt
generation, such as using tags and

42
00:02:28,299 --> 00:02:29,909
separating the prompt and so on.

43
00:02:29,909 --> 00:02:35,009
So this is a good one if you
have access to Cloud and you want

44
00:02:35,019 --> 00:02:37,259
to generate prompts via WebUI.

45
00:02:37,889 --> 00:02:39,119
That's one way of doing it.

46
00:02:39,249 --> 00:02:42,369
However, we are focusing today on CLI.

47
00:02:42,749 --> 00:02:44,139
But there's also other ways.

48
00:02:44,749 --> 00:02:45,689
We can use Fabric.

49
00:02:45,689 --> 00:02:50,039
We'll talk about Fabric in a second,
but you can use Fabric, to essentially

50
00:02:50,499 --> 00:02:53,829
help us improve or create our prompt.

51
00:02:54,199 --> 00:02:55,929
So you can see here this in action.

52
00:02:55,969 --> 00:03:00,239
I, input the command here, echo
summarize my daily activities, and

53
00:03:00,240 --> 00:03:02,739
I piped it into Fabric command line.

54
00:03:03,649 --> 00:03:06,970
So now it helped us also generate
a slightly different prompt,

55
00:03:07,000 --> 00:03:09,730
not as elaborate as Cloud,
but it's pretty good as well.

56
00:03:10,195 --> 00:03:14,355
providing us some kind of, springboard
so we can work with it easier.

57
00:03:14,855 --> 00:03:19,605
And the third way I found very useful is
just maintain your own prompt snippets.

58
00:03:20,035 --> 00:03:23,365
I'm using a program
called AutoKey on Linux.

59
00:03:23,425 --> 00:03:26,435
I believe it's AutoHotKey
on Mac or Windows.

60
00:03:27,205 --> 00:03:32,495
This is a very simple program that
enables you to have key bindings or

61
00:03:32,740 --> 00:03:39,030
abbreviations, and then you can just input
in any text box, your prompt snippet.

62
00:03:39,040 --> 00:03:42,680
So I use this very often when I want to
summarize my discussion with ChatGPT.

63
00:03:43,180 --> 00:03:46,870
I have a prompt which starts with double
exclamation marks and then summary.

64
00:03:47,380 --> 00:03:50,350
And then it just, inputs a prompt
right then in the chat box.

65
00:03:50,670 --> 00:03:55,629
So those three ways are very nice to
start with prompts and start creating

66
00:03:55,630 --> 00:03:57,370
them, start working with prompts.

67
00:03:57,870 --> 00:04:03,290
So I mentioned briefly Fabric and
Fabric is a really cool project.

68
00:04:03,310 --> 00:04:07,220
It's created by Daniel Missler
and it's fully open source,

69
00:04:07,240 --> 00:04:08,790
has a lot of stuff on GitHub.

70
00:04:08,830 --> 00:04:10,770
If you don't know about it,
definitely check it out.

71
00:04:11,430 --> 00:04:17,830
And it's really democratizes and
simplifies prompts in fabric speech.

72
00:04:17,830 --> 00:04:19,170
Those things are called patterns.

73
00:04:19,550 --> 00:04:22,430
Those are simple prompts that you can use.

74
00:04:23,319 --> 00:04:25,979
It is essentially manages
your prompts for you.

75
00:04:26,269 --> 00:04:30,840
There's quite a few other enhanced
capabilities that we will see in action.

76
00:04:31,130 --> 00:04:33,920
And in and of itself, fabric
is already quite powerful.

77
00:04:34,420 --> 00:04:36,620
And, I will show you how
it works in a second.

78
00:04:37,460 --> 00:04:38,600
So a few features.

79
00:04:38,950 --> 00:04:42,800
Fabric uses patterns, so
those are reusable prompts

80
00:04:43,070 --> 00:04:45,140
that you can define yourself.

81
00:04:45,179 --> 00:04:49,160
And they are going to drive your
agent behavior or your LLM behavior.

82
00:04:49,905 --> 00:04:54,165
It's very modular, in the sense that
you can pipe prompts into each other.

83
00:04:54,675 --> 00:04:59,485
So the output of, one prompt or
one LLM, output would be passed

84
00:04:59,485 --> 00:05:00,915
as an input to another prompt.

85
00:05:01,785 --> 00:05:04,855
It supports multiple interfaces
and is very highly extensible and

86
00:05:04,855 --> 00:05:09,815
maybe, Not necessarily extensible as
the project, but extensible because

87
00:05:09,825 --> 00:05:11,735
of the fact that this is a CLI.

88
00:05:12,235 --> 00:05:16,205
So since this is a CLI, it works
with text interface, then we can

89
00:05:16,205 --> 00:05:18,875
extend it with all other tools.

90
00:05:19,375 --> 00:05:22,215
So this is just a graphical
representation of how it works.

91
00:05:22,265 --> 00:05:24,255
A user would input a request.

92
00:05:24,935 --> 00:05:29,335
Typically, it would be either an
echo from command line, or maybe you

93
00:05:29,335 --> 00:05:33,815
want to read a file, or you want to
type an output of an actual command.

94
00:05:34,285 --> 00:05:38,695
Then you select a fabric pattern, and
then the model would output the result.

95
00:05:39,195 --> 00:05:42,525
So what are the benefits of
using Fabric as a command line?

96
00:05:42,575 --> 00:05:45,945
obviously it simplifies the
integration because there's

97
00:05:45,945 --> 00:05:48,455
a lot of pre built patterns.

98
00:05:48,455 --> 00:05:50,275
We'll see some of them
in action in a moment.

99
00:05:50,795 --> 00:05:54,685
You can add your own patterns,
and this is already great.

100
00:05:54,915 --> 00:05:58,025
On top of that, it's very
customizable and modular.

101
00:05:58,865 --> 00:06:01,595
You can create your own stuff
and, as I mentioned earlier,

102
00:06:01,605 --> 00:06:03,145
integrate with other things.

103
00:06:04,130 --> 00:06:08,210
For me, it improves efficiency
because, I created some automation

104
00:06:08,210 --> 00:06:09,670
on top of it, which I will show you.

105
00:06:10,250 --> 00:06:15,690
And it just gives me an ability to
quickly select the pattern, pass something

106
00:06:15,710 --> 00:06:19,480
through it, and then quickly have an
output without leaving my terminal.

107
00:06:19,980 --> 00:06:21,820
And it also enhances accessibility.

108
00:06:21,820 --> 00:06:26,945
I believe the idea of having prompts
in such a way where you can share them

109
00:06:26,985 --> 00:06:31,805
with your colleagues or just have them
for you stored in a github repository.

110
00:06:32,285 --> 00:06:37,805
It's really cool and that's definitely
a very useful, trait in and of itself.

111
00:06:38,305 --> 00:06:41,034
So I mentioned custom prompts.

112
00:06:41,064 --> 00:06:45,224
So those simply are prompts like
other prompts at Fabric, but simply

113
00:06:45,225 --> 00:06:46,935
you can create them yourself.

114
00:06:47,425 --> 00:06:52,114
So here you can see a Fabric folder
and I can have my custom prompts.

115
00:06:52,235 --> 00:06:58,015
Every prompt It has its own folder, and
inside of the folder, you have a system.

116
00:06:58,195 --> 00:07:00,485
md usually, which is a markdown file.

117
00:07:00,935 --> 00:07:04,905
if we go to scripter prompt,
you can see it's, quite heavy.

118
00:07:04,965 --> 00:07:09,334
This is prompt I created for
helping me write bash scripts.

119
00:07:09,654 --> 00:07:13,985
If I need something super quick, I
don't usually bother writing it myself.

120
00:07:13,985 --> 00:07:18,165
I just generate it real quick and then
maybe I'll fix it or, improve it further.

121
00:07:18,740 --> 00:07:22,710
So that's just a prompt as you would
expect to have also for yourself.

122
00:07:23,600 --> 00:07:24,040
All right.

123
00:07:24,170 --> 00:07:26,110
So those are custom prompts.

124
00:07:26,799 --> 00:07:31,840
However, since this talk is
about automation, we want to take

125
00:07:31,880 --> 00:07:34,140
the tools that are available.

126
00:07:34,140 --> 00:07:38,090
So one of them is Fabric and make
it better, make it more usable.

127
00:07:38,590 --> 00:07:41,630
So the goal when I created the
automation around Fabric for

128
00:07:41,630 --> 00:07:46,190
me was to inject more context.

129
00:07:46,690 --> 00:07:51,190
As you saw earlier with the command
where I piped the echo output and then

130
00:07:51,470 --> 00:07:54,380
instructed Fabric to improve prompt.

131
00:07:54,749 --> 00:07:56,510
I used the improve prompt pattern.

132
00:07:56,560 --> 00:07:57,680
It was one command.

133
00:07:57,940 --> 00:08:00,659
You could imagine me piping more and more.

134
00:08:00,860 --> 00:08:03,580
fabric prompts, but I
found it a bit cumbersome.

135
00:08:03,590 --> 00:08:06,840
So I added, a tool called wipe.

136
00:08:06,960 --> 00:08:11,010
If you don't know, vibe, it's
part of a more utilities package.

137
00:08:11,460 --> 00:08:16,380
And it essentially enables you
to edit text before passing it

138
00:08:16,380 --> 00:08:18,200
into pipe to another command.

139
00:08:18,829 --> 00:08:22,209
So think of it as a month produces output.

140
00:08:22,589 --> 00:08:26,299
And instead of passing the output
and changed to another command, you

141
00:08:26,485 --> 00:08:30,205
with a pipe, you can essentially
slot a wipe in between, and then you

142
00:08:30,205 --> 00:08:32,035
will be able to edit your output.

143
00:08:32,035 --> 00:08:34,935
So I found it very useful
in this specific case.

144
00:08:35,815 --> 00:08:38,025
I also enabled prompt chaining.

145
00:08:38,025 --> 00:08:42,165
So Fabric already enables prompt chaining,
but you have to chain them upfront.

146
00:08:42,654 --> 00:08:44,315
So you have to know what you want to do.

147
00:08:44,315 --> 00:08:50,295
And I might not know because an agent
can, or LLM can give me an output that

148
00:08:50,295 --> 00:08:54,765
I want to slightly modify, or I might
change my mind where I want to prompt

149
00:08:54,765 --> 00:08:56,795
it or where I want to pass it over.

150
00:08:57,295 --> 00:09:01,195
Also, the prompt selection
fabric doesn't really allow you

151
00:09:01,255 --> 00:09:03,775
to dynamically select prompt.

152
00:09:03,775 --> 00:09:07,595
So I just used FZF, which if you
don't know, it's a super awesome

153
00:09:07,595 --> 00:09:09,505
project for command line users.

154
00:09:09,535 --> 00:09:14,185
It's just essentially a fuzzy finder
that you can use in various ways.

155
00:09:14,685 --> 00:09:20,114
And at the end of this process, we
are ending up with an output of the

156
00:09:20,114 --> 00:09:23,785
last fabric prompt in a Neofim buffer.

157
00:09:24,505 --> 00:09:26,175
So let's see how it works in action.

158
00:09:27,025 --> 00:09:33,365
So let's close this file and I can have
orchestration or orchestrator script.

159
00:09:33,365 --> 00:09:35,615
I also have a shortcut, I
just wanna call it like that.

160
00:09:36,125 --> 00:09:40,745
And you can see here first we
can have all the fabric patterns.

161
00:09:41,395 --> 00:09:45,115
So you can see in the main part
of the FCF output, this is the

162
00:09:45,115 --> 00:09:48,865
fabric pattern content, which is a
content of the system empty file.

163
00:09:49,345 --> 00:09:52,435
And here are all the fabric pattern names.

164
00:09:53,135 --> 00:09:56,575
So what I want to do for this demo,
I want to use the pattern called

165
00:09:56,585 --> 00:09:58,515
scripter that you've seen earlier.

166
00:09:59,325 --> 00:10:01,035
So we're just going to go to scripter.

167
00:10:01,395 --> 00:10:05,575
When I hit enter, opens NeoVim
buffer, which is a wipe command,

168
00:10:05,575 --> 00:10:06,615
which I mentioned earlier.

169
00:10:07,065 --> 00:10:09,645
And now it essentially wants my input.

170
00:10:10,315 --> 00:10:15,930
So why I am opening NeoVim buffer to
Collect user input rather than just

171
00:10:15,940 --> 00:10:17,660
simply collecting it from command line.

172
00:10:18,650 --> 00:10:23,640
First of all, NeoVim gives me
much more control over what input

173
00:10:23,780 --> 00:10:25,980
I give and how I, format it.

174
00:10:26,460 --> 00:10:32,540
I can also use NeoVim external commands,
to essentially, pipe anything from

175
00:10:32,550 --> 00:10:34,240
those commands directly into the buffer.

176
00:10:34,240 --> 00:10:39,450
So I could, for example, pull a command,
like list files or anything I want.

177
00:10:39,950 --> 00:10:41,440
This gives me much more flexibility.

178
00:10:41,460 --> 00:10:44,730
Also, as multi line
editing is simply nicer.

179
00:10:45,490 --> 00:10:51,014
So let's say I want a
simple, system info script.

180
00:10:51,905 --> 00:10:55,405
So script that will just give
me a system information and you

181
00:10:55,405 --> 00:10:57,315
can see fabric is, executed.

182
00:10:57,755 --> 00:11:01,295
And this is the command that we are
executing fabric, minus P, which is for

183
00:11:01,295 --> 00:11:03,575
prompt, we are calling the scripter.

184
00:11:04,105 --> 00:11:08,940
And then here at the, in the, in the
background fabric is creating a session.

185
00:11:09,320 --> 00:11:10,970
A session is very important.

186
00:11:11,480 --> 00:11:16,050
This is essentially a chat, session
if I want to use multiple prompts.

187
00:11:16,975 --> 00:11:21,335
So you can see that this specific LLM
came back to me as it was instructed,

188
00:11:21,835 --> 00:11:23,355
pulling some more information from me.

189
00:11:23,355 --> 00:11:27,275
It says what specific system information
would you like and some more details.

190
00:11:28,055 --> 00:11:30,905
And this automation gives me a choice.

191
00:11:30,955 --> 00:11:37,280
I can either run the same pattern again
and I can specify this for our LLM,

192
00:11:37,830 --> 00:11:41,880
or I can select a completely different
pattern and pipe it, or I can finish.

193
00:11:41,900 --> 00:11:46,130
In our case, we want to actually
select the same pattern.

194
00:11:46,130 --> 00:11:47,240
So I'm going to select one.

195
00:11:48,000 --> 00:11:51,250
And now you can see the
same Vibe application opens.

196
00:11:51,670 --> 00:11:54,799
But this time, this is actually
what the LLM looks like.

197
00:11:55,170 --> 00:11:56,300
wants me to provide.

198
00:11:56,300 --> 00:12:02,380
So here I'm just going to say
simple uname output would type life.

199
00:12:02,380 --> 00:12:03,260
That's always wrong.

200
00:12:03,790 --> 00:12:09,480
Simple uname output and
then maybe, and false name.

201
00:12:09,630 --> 00:12:10,090
Why not?

202
00:12:10,920 --> 00:12:17,390
So I'm providing this additional input to
the LLM and then the LLM generated script.

203
00:12:17,890 --> 00:12:20,390
So we generated the script, but I want to.

204
00:12:21,000 --> 00:12:25,280
Actually pass it to another
specialized LLM or prompt.

205
00:12:25,350 --> 00:12:27,660
This is the same LLM behind the scenes.

206
00:12:27,660 --> 00:12:30,300
I'm calling a GPT 4 in this case.

207
00:12:30,800 --> 00:12:34,990
But this script is of course super
simple, but just for the demo purposes,

208
00:12:34,990 --> 00:12:36,340
I want to select a new pattern.

209
00:12:36,340 --> 00:12:39,920
So I'm selecting two and I want
to select the pattern tester.

210
00:12:39,920 --> 00:12:43,780
So this is a specialized from
that essentially analyzes the

211
00:12:43,780 --> 00:12:46,590
shell check output and tests.

212
00:12:46,910 --> 00:12:49,340
So now, thank you for
providing more details.

213
00:12:50,000 --> 00:12:53,730
And then I'm essentially, want
the tester to test it so I

214
00:12:53,730 --> 00:12:56,700
can change it and please test.

215
00:12:57,200 --> 00:13:00,580
So this is the prompt for tester
and you could see that I was able to

216
00:13:00,590 --> 00:13:05,150
modify the prompt so I can add my own
context to the prompt and every time

217
00:13:05,150 --> 00:13:08,720
this is being kept very interactive.

218
00:13:09,410 --> 00:13:12,160
So now the tester output
something in the script.

219
00:13:12,555 --> 00:13:17,725
Pass the shell check results, script
executed successfully, and then the

220
00:13:17,775 --> 00:13:19,495
tester suggests some improvements.

221
00:13:19,595 --> 00:13:23,175
So I'm going to call the
script pattern again.

222
00:13:23,185 --> 00:13:25,305
So I'm going to select a new pattern.

223
00:13:25,305 --> 00:13:27,915
So again, two, and then scripter.

224
00:13:27,955 --> 00:13:32,355
And you can see that this time
scripter has, this is a feedback.

225
00:13:32,475 --> 00:13:35,775
So I can say, please incorporate.

226
00:13:36,275 --> 00:13:37,025
feedback.

227
00:13:37,525 --> 00:13:40,035
You can see the github
copilot suggestions.

228
00:13:40,045 --> 00:13:44,295
It's one benefit of using vibe and
neovim, for collecting feedback.

229
00:13:44,795 --> 00:13:48,345
So now we are calling the scripter
again, with the additional feedback.

230
00:13:48,345 --> 00:13:50,235
And now the script looks
a little bit bigger.

231
00:13:50,645 --> 00:13:55,525
There's some additional feedback from the
tester, and the script looks a bit nicer.

232
00:13:56,025 --> 00:13:58,030
So we want to finish.

233
00:13:58,120 --> 00:14:00,770
So when I hit three, we are
finishing the whole process

234
00:14:01,250 --> 00:14:02,820
and we are left with a script.

235
00:14:02,860 --> 00:14:06,500
So we don't want this E here, for example,
we can, of course, review everything.

236
00:14:07,160 --> 00:14:08,920
So far, that looks all right.

237
00:14:09,400 --> 00:14:10,750
So I want to copy it.

238
00:14:10,850 --> 00:14:12,550
So I'm copying the whole script.

239
00:14:12,910 --> 00:14:15,980
I can quit it and let's, paste it.

240
00:14:16,850 --> 00:14:20,120
So we're just going to paste this
to a file called system info.

241
00:14:20,260 --> 00:14:22,820
a stage I pasted this file.

242
00:14:23,040 --> 00:14:23,620
We can.

243
00:14:24,280 --> 00:14:28,890
make this file executable and then
let's see if it's working and indeed

244
00:14:28,920 --> 00:14:33,300
we have our system information
here at the bottom running on Pop!

245
00:14:33,500 --> 00:14:35,750
OS and then my host name is also Pop!

246
00:14:35,750 --> 00:14:36,150
OS.

247
00:14:36,630 --> 00:14:39,680
That was fabric automation in action.

248
00:14:39,690 --> 00:14:43,905
We were able to take Fabric, which
is already an amazing tool, adds

249
00:14:43,935 --> 00:14:48,135
some open source tools on top of
it and make it very usable and very

250
00:14:48,165 --> 00:14:50,665
nice for the command based workflow.

251
00:14:51,165 --> 00:14:56,405
So just a reminder, we use NeoVim,
pipe in between Fabric and FZ

252
00:14:56,485 --> 00:14:58,165
IF to string all this together.

253
00:14:58,665 --> 00:15:02,775
Another tool that I want to
show you is called GPT script.

254
00:15:03,365 --> 00:15:07,365
This is a tool developed by,
guys from a company called Acorn.

255
00:15:07,885 --> 00:15:12,405
they were previously, developing
like a Dockerfile alternative.

256
00:15:12,445 --> 00:15:16,335
And they were also the same
people, that developed Rancher

257
00:15:16,355 --> 00:15:17,865
and other cloud native products.

258
00:15:17,865 --> 00:15:21,215
And this is simply pivoted,
to doing GPT script.

259
00:15:21,715 --> 00:15:27,145
GPT script is really a framework and
more like a system of tools, that

260
00:15:27,175 --> 00:15:32,885
enables you to have more structure
in how you're writing your prompts.

261
00:15:33,295 --> 00:15:36,745
So instead of just writing pure
prompts, you're essentially writing

262
00:15:37,265 --> 00:15:42,525
like a scripting language for LLM,
with very lightweight syntax, and

263
00:15:42,595 --> 00:15:44,335
bringing the prompts in this way.

264
00:15:45,250 --> 00:15:51,260
So the purpose of this is really to
simplify the creation of assistants.

265
00:15:51,340 --> 00:15:55,270
It's really like agentic type of
workloads where you have various tools

266
00:15:55,550 --> 00:16:00,740
and you have various, GPTs that are
capable of executing different tasks.

267
00:16:01,240 --> 00:16:05,640
So the key feature of this is that
you obviously can script in natural

268
00:16:05,650 --> 00:16:07,790
language, so you incorporate prompts.

269
00:16:08,490 --> 00:16:14,550
But, differently to Fabric, it actually
has a very extensible tooling system.

270
00:16:15,100 --> 00:16:19,460
So you can use all external
tools and scripts and so on.

271
00:16:19,860 --> 00:16:23,510
We will see this in action in a
moment, but I just wanted to mention.

272
00:16:24,010 --> 00:16:25,720
So how the workflow looks like.

273
00:16:25,870 --> 00:16:31,040
So first of all, we create a
file with the GPT extension, and

274
00:16:31,040 --> 00:16:33,340
then we provide some header data.

275
00:16:34,140 --> 00:16:38,320
Then this header data and our
instructions are being translated

276
00:16:38,320 --> 00:16:39,890
into executable actions.

277
00:16:40,780 --> 00:16:45,050
And then we execute commands
on specific tools and systems.

278
00:16:45,730 --> 00:16:48,430
Those tools and systems
are really, interesting.

279
00:16:48,750 --> 00:16:51,640
You can use local command line tools.

280
00:16:51,650 --> 00:16:53,110
You can call an API.

281
00:16:53,470 --> 00:16:55,690
You can call completely custom tool.

282
00:16:56,060 --> 00:16:58,360
You can authenticate to API.

283
00:16:59,170 --> 00:17:01,380
Maybe you have a, API key or something.

284
00:17:01,950 --> 00:17:07,135
So it's adds this additional layer of
programming that we all know, brings on a

285
00:17:07,135 --> 00:17:08,995
little bit more determinism in this sense.

286
00:17:09,495 --> 00:17:13,105
And the benefits of this tool,
it's also accessibility, it makes

287
00:17:13,105 --> 00:17:17,565
the interaction with LLMs very
flexible and very efficient.

288
00:17:17,785 --> 00:17:19,085
Slightly different than Fabric.

289
00:17:19,115 --> 00:17:24,045
Fabric was all about prompts, and
this is a great initiative in and of

290
00:17:24,045 --> 00:17:29,725
its own, but GPT Script is more about
really scripting agentic workflows.

291
00:17:30,225 --> 00:17:31,975
So the structure of a file.

292
00:17:32,235 --> 00:17:32,975
It's very simple.

293
00:17:32,985 --> 00:17:35,785
We're going to see this in a
moment, but it's just a header

294
00:17:36,175 --> 00:17:37,605
and the body is a prompt.

295
00:17:37,925 --> 00:17:40,855
And then, as I mentioned earlier,
you can also integrate various tools.

296
00:17:41,355 --> 00:17:44,545
So the first demo, we're going to do
a little city demo about the weather.

297
00:17:44,555 --> 00:17:45,625
So you can see here.

298
00:17:46,115 --> 00:17:51,995
We have GPT script command line, and I
am calling a GPT script, called weather.

299
00:17:52,425 --> 00:17:56,365
I will show you the script in a second,
but when I hit enter, it's running

300
00:17:56,375 --> 00:17:58,765
the tool and there's a lot of output.

301
00:17:58,825 --> 00:18:00,675
Let me scroll a little bit up here.

302
00:18:01,085 --> 00:18:04,535
You can see it used a, tool, or weather.

303
00:18:04,565 --> 00:18:05,995
This is a curl command.

304
00:18:06,305 --> 00:18:09,435
It's a really cool tool, and
it shows me the weather now.

305
00:18:10,290 --> 00:18:11,270
where I am located.

306
00:18:11,270 --> 00:18:12,080
So in Hanoi.

307
00:18:12,800 --> 00:18:13,390
Okay, great.

308
00:18:13,390 --> 00:18:14,580
so this is what it did.

309
00:18:14,610 --> 00:18:20,420
But on top of that, what it did, it also
gives me some additional information.

310
00:18:20,450 --> 00:18:24,190
So the current weather, it's like
more described the weather, then

311
00:18:24,190 --> 00:18:27,610
showed me the forecast, and then I
asked it a tool for recommendation.

312
00:18:27,610 --> 00:18:32,180
So it tells me what kind of clothing
should I wear and what kind of activities.

313
00:18:32,190 --> 00:18:35,900
So it's a great day for outdoor
activities, which is definitely true.

314
00:18:35,920 --> 00:18:36,930
It's really nice weather.

315
00:18:37,775 --> 00:18:39,885
So how did it all work?

316
00:18:40,305 --> 00:18:42,615
Let's see the weather script.

317
00:18:43,315 --> 00:18:45,265
So this is the header data I mentioned.

318
00:18:45,785 --> 00:18:51,595
So we have name, description, tools, and
whether we want to be in chat mode or not.

319
00:18:52,315 --> 00:18:54,025
So the tool is actually the key.

320
00:18:54,025 --> 00:18:57,085
So the weather assistant
have its own prompt.

321
00:18:57,615 --> 00:19:02,305
So we simply prompt it to interpret
the weather based on the tool.

322
00:19:02,805 --> 00:19:06,850
And we Tell the system to give us
some recommendations for activities

323
00:19:06,850 --> 00:19:11,100
and clothing and here in the
same file I have a weather tool.

324
00:19:11,670 --> 00:19:14,190
So the weather tool is
actually a bash script.

325
00:19:14,230 --> 00:19:18,360
You can see this inline I'm actually
inlining a bash script and I

326
00:19:18,360 --> 00:19:21,920
am using curl to call the Wtdr.

327
00:19:22,490 --> 00:19:27,840
in which is a weather service
and Appending the my location.

328
00:19:27,840 --> 00:19:30,345
So That's as simple as that.

329
00:19:30,455 --> 00:19:35,925
And then GPT script can use this
tool and decide when to use it.

330
00:19:36,425 --> 00:19:38,625
And, in our case, provide
the weather output.

331
00:19:39,405 --> 00:19:42,455
you can, of course, have
much more elaborate tools.

332
00:19:42,485 --> 00:19:44,215
You can use Python scripts.

333
00:19:44,475 --> 00:19:46,635
I believe also Go binaries are supported.

334
00:19:47,395 --> 00:19:53,215
You can create a really elaborate
and complicated, b not BGPT scripts.

335
00:19:53,715 --> 00:19:57,345
This was just a fun example, how
you can, in a few lines of pseudo

336
00:19:57,345 --> 00:20:02,255
code, including actual code, have
your own personal weather assistant.

337
00:20:02,755 --> 00:20:07,915
So you might wonder, since we have
those two tools, Fabric with its

338
00:20:07,925 --> 00:20:13,165
own strengths and GPTScript, which
you've seen me using now, is there

339
00:20:13,165 --> 00:20:15,585
a way to integrate those two?

340
00:20:15,585 --> 00:20:16,765
And the answer is yes.

341
00:20:17,235 --> 00:20:24,095
You can actually treat Fabric as a
repository of prompts that GPTScript

342
00:20:24,495 --> 00:20:28,045
can use as a tool, or set of tools.

343
00:20:28,575 --> 00:20:32,805
So you can instruct GPT script
saying, Fabric, commands.

344
00:20:33,045 --> 00:20:37,355
This is something that you can use
to help user with various requests.

345
00:20:38,215 --> 00:20:43,035
And this brings us to this kind of
do it yourself agentic workflow.

346
00:20:43,225 --> 00:20:47,895
when you integrate GPT script and fabric,
you will see in a demo in a second, I did

347
00:20:47,895 --> 00:20:52,865
it in like a pass through manner, but you
can do, all kinds of crazy stuff with it.

348
00:20:53,365 --> 00:20:59,075
without using any actual, agentic workflow
framework, mostly in Python, you can

349
00:20:59,075 --> 00:21:03,585
actually have your own quasi agentic,
workflow, which is really powerful,

350
00:21:04,045 --> 00:21:06,425
built from your own patterns or prompts.

351
00:21:06,925 --> 00:21:13,015
So in the demo that we see in a second,
GPT script suggests prompts and it

352
00:21:13,015 --> 00:21:18,285
decides what kind of prompts to select
based off of user query and input.

353
00:21:19,085 --> 00:21:22,005
As previously, it can
also use additional tools.

354
00:21:22,075 --> 00:21:25,685
We are not doing this for this
demo, but as I mentioned earlier,

355
00:21:26,535 --> 00:21:30,835
you have a lot of possibilities of
using external API or tools or CLI.

356
00:21:31,335 --> 00:21:34,385
So let's try Fabric Assistant.

357
00:21:34,395 --> 00:21:37,685
So again, GPT script, simple command line.

358
00:21:37,685 --> 00:21:37,735
Okay.

359
00:21:38,150 --> 00:21:40,180
And then the name of our fabric agent.

360
00:21:40,180 --> 00:21:45,010
So let's see it in action first, and then
we are going to, check the file itself.

361
00:21:45,510 --> 00:21:46,800
how can I assist you today?

362
00:21:46,970 --> 00:21:49,490
If you have a specific task, just query.

363
00:21:49,740 --> 00:21:50,070
All right.

364
00:21:50,100 --> 00:21:53,740
And it tells me I can provide the best
possible prompts for you to choose from.

365
00:21:54,410 --> 00:22:01,410
Okay, I want to, let's say,
summarize something in a short form.

366
00:22:01,910 --> 00:22:08,190
So I'm instructing it and then GPT
script selects for me, possible fabric

367
00:22:08,240 --> 00:22:10,640
patterns, or prompts that I can use.

368
00:22:10,650 --> 00:22:15,930
So it says, summarize, create five
sentence summary, or summarize micro.

369
00:22:15,930 --> 00:22:18,280
And I can tell you from using
fabric, those are exactly the

370
00:22:18,280 --> 00:22:22,340
prompts, that I would use to
summarize something, in a short way.

371
00:22:23,200 --> 00:22:24,220
So let's say.

372
00:22:24,720 --> 00:22:26,510
Okay, so summarize,

373
00:22:27,010 --> 00:22:31,820
summarize the current state
of JavaScript framework.

374
00:22:32,320 --> 00:22:33,850
So this will definitely confuse it.

375
00:22:34,520 --> 00:22:37,510
So now I'm saying, summarize the
current state of JavaScript frameworks.

376
00:22:37,830 --> 00:22:40,460
So without the current data, of
course, this will be a futile task.

377
00:22:40,960 --> 00:22:45,920
But, GPT script soldiers on and it tells
me I'm going to execute this command.

378
00:22:45,920 --> 00:22:51,130
So you notice that it equals my
request and it pipes it to a fabric

379
00:22:51,130 --> 00:22:52,560
and it's selected to summarize.

380
00:22:52,570 --> 00:22:55,610
Since I didn't specify that
I want to want it to be super

381
00:22:55,610 --> 00:22:57,460
small, it's selected itself.

382
00:22:57,640 --> 00:22:59,060
What pattern should be applied.

383
00:22:59,060 --> 00:23:04,919
So I'm hitting yes for please
execute the summarization.

384
00:23:05,419 --> 00:23:09,799
Call and then it called out and
it also summarizes it for me.

385
00:23:09,809 --> 00:23:14,699
And here is the output one sentence
summary JavaScript framework continue

386
00:23:14,699 --> 00:23:18,529
to evolve rapidly which react dominating
but view and felt gaining popularity.

387
00:23:19,359 --> 00:23:24,419
That's probably correct I'm not a
JavaScript expert, but Definitely a

388
00:23:24,419 --> 00:23:29,369
quick summary and you can imagine that
you can input here a file content of

389
00:23:29,369 --> 00:23:31,219
a script or a program that you want.

390
00:23:31,679 --> 00:23:34,869
You can use additional features
of Fabric I didn't mention,

391
00:23:34,869 --> 00:23:39,099
such as pulling transcripts from
YouTube videos and other things.

392
00:23:39,099 --> 00:23:43,889
And you can type all of this into GPT
script, and it will be able to read files

393
00:23:43,889 --> 00:23:46,909
content and then pass it on to Fabric.

394
00:23:47,664 --> 00:23:54,624
So those are two ways how you could
interact with command line based

395
00:23:54,664 --> 00:24:00,424
tools and how you could make your
terminal centric workflow way more

396
00:24:00,604 --> 00:24:02,574
interactive and more responsive.

397
00:24:03,219 --> 00:24:08,169
So the way I use this is mostly
through typing the output of

398
00:24:08,179 --> 00:24:10,209
various commands that I do.

399
00:24:10,229 --> 00:24:12,869
So if I see an error somewhere, I pipe it.

400
00:24:13,279 --> 00:24:17,609
Or if I want to, if I work with
prose, or if I edit a file or a

401
00:24:17,609 --> 00:24:22,919
blog, this is also often something
I do to improve writing and so on.

402
00:24:22,949 --> 00:24:28,559
And I can do this directly with a file
without needing to go to web, to WebUI

403
00:24:29,529 --> 00:24:31,639
and do this right inside of my terminal.

404
00:24:32,139 --> 00:24:37,629
So Best practices, after doing it for
some time, it's very critical to start

405
00:24:37,629 --> 00:24:39,689
with a clear and concise prompts.

406
00:24:39,739 --> 00:24:40,969
this is super important.

407
00:24:41,509 --> 00:24:44,849
If your prompts are clear,
then you get better results.

408
00:24:44,899 --> 00:24:51,599
And one thing to make prompts clear is
to clearly separate the parts prompt

409
00:24:51,639 --> 00:24:53,399
that you have or the sections of it.

410
00:24:54,099 --> 00:24:59,589
Whether by using markdown headers or XML
tags work also very well, so that the

411
00:24:59,609 --> 00:25:01,979
LLM understands, what needs to happen.

412
00:25:02,479 --> 00:25:07,349
Modular design, it's better to have more
but smaller prompts, rather than very

413
00:25:07,349 --> 00:25:10,849
big and elaborate, and just string them
together with the tools I showed you.

414
00:25:11,339 --> 00:25:13,549
Those things are definitely easier to do.

415
00:25:14,379 --> 00:25:18,409
And also the prompts in and of
themselves are self documented,

416
00:25:18,419 --> 00:25:22,619
but the process that you come up
with should really be documented

417
00:25:22,689 --> 00:25:25,139
because it's very easy to get lost.

418
00:25:25,189 --> 00:25:26,709
why did I create this prompt?

419
00:25:26,709 --> 00:25:28,749
Or what was the purpose
of what I was thinking?

420
00:25:28,749 --> 00:25:32,799
So more from the process perspective,
I started creating simple documents

421
00:25:32,809 --> 00:25:36,919
showing me what I meant and what
was the idea behind a certain

422
00:25:36,919 --> 00:25:38,449
prompts or set of prompts.

423
00:25:38,949 --> 00:25:42,649
Common pitfalls in, designing
both, GPT scripts and prompts,

424
00:25:43,289 --> 00:25:44,939
overcomplicating scripts.

425
00:25:45,019 --> 00:25:46,029
That's a big one.

426
00:25:46,119 --> 00:25:48,849
with AI now we have proliferation of code.

427
00:25:49,369 --> 00:25:54,379
and if the code comes from non
programmers, then the quality bar

428
00:25:54,399 --> 00:25:59,079
is low because those people simply
do not know what they do not know.

429
00:25:59,109 --> 00:26:02,299
And, AI LLMs is not really helping always.

430
00:26:02,299 --> 00:26:07,424
So Definitely it's better to keep
the scripts, simple, and make sure

431
00:26:07,424 --> 00:26:10,884
that they just do whatever you want
and then move on to the next part.

432
00:26:11,884 --> 00:26:15,164
Neglecting error handling, that's
a big one as well, for the same

433
00:26:15,164 --> 00:26:16,734
reason that I mentioned a moment ago.

434
00:26:17,379 --> 00:26:22,229
A lot of things can go wrong because
you are not anymore in charge of

435
00:26:22,289 --> 00:26:23,809
orchestrating what you're doing.

436
00:26:24,329 --> 00:26:27,799
There's an LLM non deterministic
output in play here.

437
00:26:28,219 --> 00:26:31,309
You should be able to always
narrow down to the part that you're

438
00:26:31,309 --> 00:26:33,729
interested in and have a plan.

439
00:26:34,009 --> 00:26:36,639
proper error handling to help you.

440
00:26:37,139 --> 00:26:39,539
And also do not ignore updates.

441
00:26:39,559 --> 00:26:41,759
those tools are being rapidly developed.

442
00:26:41,779 --> 00:26:46,159
They are command line tools, depending
on how you install them, make sure

443
00:26:46,159 --> 00:26:49,419
that you keep them up to date and
they are getting security patches

444
00:26:49,419 --> 00:26:51,329
and improvements really quickly.

445
00:26:51,359 --> 00:26:53,349
It bite me a few times, that I ignored.

446
00:26:53,509 --> 00:26:55,409
I'm not really ignored,
but forgot to update.

447
00:26:56,099 --> 00:26:57,409
And then I had some issues.

448
00:26:57,419 --> 00:26:59,259
So definitely something
you, you should do.

449
00:26:59,759 --> 00:27:01,049
a few more tips for.

450
00:27:01,254 --> 00:27:06,664
effective automation, first start small,
just create a very simple prompt, very

451
00:27:06,664 --> 00:27:09,224
simple script, and just see how it works.

452
00:27:09,274 --> 00:27:15,874
do not add, resist the temptation to let
AI completely generate everything for you.

453
00:27:15,874 --> 00:27:20,384
Try to write it yourself because
it's really hard later to decipher

454
00:27:20,384 --> 00:27:23,904
and untangle all the things
that AI can put on top of it.

455
00:27:24,894 --> 00:27:27,024
Leverage community resources, to support.

456
00:27:27,434 --> 00:27:31,624
Quite a few, great blogs and
forums, definitely worthwhile to

457
00:27:31,624 --> 00:27:33,584
share, as I am sharing with you.

458
00:27:33,844 --> 00:27:36,994
You can check GitHub and see
what other people are doing.

459
00:27:37,564 --> 00:27:41,844
my GitHub repository is, public with
all the scripts that you've seen today.

460
00:27:42,224 --> 00:27:43,584
You can simply go and grab them.

461
00:27:43,884 --> 00:27:45,344
Most of them are in my files.

462
00:27:45,844 --> 00:27:50,684
interactive development, so definitely
keep on refining, And again, try to,

463
00:27:50,774 --> 00:27:56,304
limit the AI here, just the other day,
I was, Improving a script and I just,

464
00:27:56,334 --> 00:28:02,094
I was lazy, I threw it to AI and say,
Hey, change whatever x and it went

465
00:28:02,114 --> 00:28:08,544
essentially and did it, but it became
a rabbit hole because what I really

466
00:28:08,544 --> 00:28:11,374
wanted wasn't what I asked AI for.

467
00:28:12,134 --> 00:28:16,774
I really wanted to, essentially I ended
up doing, changing three lines of code.

468
00:28:17,274 --> 00:28:20,544
And I just thought about it a little
bit more and then what I asked

469
00:28:20,544 --> 00:28:22,264
AI wasn't actually what I wanted.

470
00:28:22,274 --> 00:28:26,544
So definitely, it's, a temptation
that we, we all have to resist,

471
00:28:26,594 --> 00:28:29,394
to try and develop, ourselves.

472
00:28:29,894 --> 00:28:34,014
question, collaborate with others, in the
same way as leverage community resources.

473
00:28:34,514 --> 00:28:39,114
So here, just a few resources, you can
screenshot it, or just, it's pretty

474
00:28:39,114 --> 00:28:45,064
easy to search, so Fabric, Repository,
GPT Script, I mentioned VIPE, here is

475
00:28:45,064 --> 00:28:49,964
a more utile package that the command
comes from, NeoVim, which I used for

476
00:28:49,964 --> 00:28:55,094
displaying the output, and also VIPE
uses it, and the SCF, command line

477
00:28:55,094 --> 00:28:56,954
that, a lot of my scripts are based on.

478
00:28:57,454 --> 00:28:59,004
So that's it for today.

479
00:28:59,104 --> 00:29:03,454
if you have some questions, I
would love to connect with you.

480
00:29:03,794 --> 00:29:05,754
You can connect with me on LinkedIn.

481
00:29:05,814 --> 00:29:08,154
Just simply snap a photo of this QR code.

482
00:29:08,504 --> 00:29:10,484
It will take you to my LinkedIn profile.

483
00:29:10,934 --> 00:29:13,204
otherwise, thank you
again for your attention.

484
00:29:13,224 --> 00:29:14,174
Thank you for your time.

485
00:29:14,484 --> 00:29:16,174
Enjoy the rest of your conference.

486
00:29:16,664 --> 00:29:21,244
And let me know what you think about
automating AI with command line.

