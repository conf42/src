1
00:00:00,500 --> 00:00:01,250
Hello everyone.

2
00:00:01,250 --> 00:00:03,830
I'm Michel Moto, but
everyone call me Mitch.

3
00:00:04,040 --> 00:00:08,360
I'm a developer advocate at me platform,
and today I will talk about platform

4
00:00:08,360 --> 00:00:11,540
engineering and AI and cognitive lots.

5
00:00:12,040 --> 00:00:17,800
I started to work at 2004 and I
become a developer guy in 2015.

6
00:00:18,340 --> 00:00:23,170
I love to share knowledge about platform
engineer, developer experience in cloud

7
00:00:23,240 --> 00:00:26,060
native, but also about sustainability.

8
00:00:26,660 --> 00:00:31,850
I'm one of the organizer of cloud
Native Days, Italy, a conference related

9
00:00:31,850 --> 00:00:34,190
to cloud native topic here in Italy.

10
00:00:35,000 --> 00:00:37,280
And I founded a couple of community.

11
00:00:37,280 --> 00:00:42,170
I co-founded a couple of community
one, it's developer life,

12
00:00:42,410 --> 00:00:46,520
it's Italian community to help
people to join in our field.

13
00:00:46,700 --> 00:00:51,590
And the second one, it's Green of Italia,
a community related to green software.

14
00:00:52,130 --> 00:00:54,170
I'm ACF Ambassador and.

15
00:00:54,455 --> 00:00:57,155
Advisory board member of Dev Network.

16
00:00:57,845 --> 00:01:01,535
I talk about these kind of
topics because it's part of my

17
00:01:01,535 --> 00:01:04,285
daily work, but also a passion.

18
00:01:04,614 --> 00:01:09,005
I love to help people to reduce
the complexity and also improve

19
00:01:09,005 --> 00:01:10,414
the developer experience.

20
00:01:10,655 --> 00:01:14,874
And I think that better developer
experience can create happier

21
00:01:14,874 --> 00:01:17,034
and more productive developer.

22
00:01:17,534 --> 00:01:19,724
I want to start with this chart.

23
00:01:20,004 --> 00:01:23,214
The first date in this
chart, it's the 2004.

24
00:01:23,304 --> 00:01:27,174
I started to work in 2004
and when I started to work,

25
00:01:27,444 --> 00:01:29,754
my profession was webmaster.

26
00:01:29,754 --> 00:01:34,554
I'm not know if it's an international
world, but at the end it's a person

27
00:01:34,554 --> 00:01:40,734
that can create application website on
internet to create the application you

28
00:01:40,734 --> 00:01:43,774
need just to know a language like PHP.

29
00:01:44,579 --> 00:01:50,789
HTML and CSS and after that you need
just to create your software drag and

30
00:01:50,789 --> 00:01:57,119
drop your folder from local to the server
and you are deploy at your application.

31
00:01:57,119 --> 00:01:59,159
Online was very different.

32
00:01:59,839 --> 00:02:04,109
During the time there are complexity
to manage all the staff increase,

33
00:02:04,499 --> 00:02:10,259
and our ability to manage the
complexity is low than the complexity.

34
00:02:10,749 --> 00:02:17,349
This is why in the last 15, 20 years,
there is a lot of new job position and

35
00:02:17,349 --> 00:02:21,039
job roles because the before in 2004.

36
00:02:21,354 --> 00:02:26,694
You need just to know a language and you
can do all the stuff by yourself today.

37
00:02:26,694 --> 00:02:30,894
You need the other people to
manage the design, to manage the

38
00:02:30,894 --> 00:02:34,584
front end, the backend, but also
the cloud, the automation, the

39
00:02:34,584 --> 00:02:36,474
pipeline, the testing, and so on.

40
00:02:36,974 --> 00:02:40,334
I love this sentence, but
I think that is not true.

41
00:02:41,289 --> 00:02:45,049
At the end I think that Kubernetes,
of course it's complex, but it's

42
00:02:45,049 --> 00:02:48,199
not too hard to understand because
at the end it's just a tool.

43
00:02:49,039 --> 00:02:52,309
The real complexity to
create application today.

44
00:02:52,669 --> 00:02:58,369
It's for example, the scalability that we
want to have, the distribution, but also

45
00:02:58,369 --> 00:03:04,189
the data that we use, the integration,
the interoperability, the user experience.

46
00:03:04,694 --> 00:03:10,664
But also the security and the privacy and
the AI and machine learning now and so on.

47
00:03:11,534 --> 00:03:15,884
If we look in the cloud native,
we can sort this maybe, it's

48
00:03:15,884 --> 00:03:18,074
the CNCF landscape at the end.

49
00:03:18,074 --> 00:03:21,834
It's chart with a lot of
different technology inside.

50
00:03:22,434 --> 00:03:27,144
When you want to create a new cloud
native application, you can find a lot

51
00:03:27,144 --> 00:03:32,184
of open source project in this landscape
and you can choose it to create stuff.

52
00:03:32,934 --> 00:03:37,104
Just an example, if you want to
have a new a PA gateway, you can go

53
00:03:37,104 --> 00:03:41,684
here in the right session and you
can find 20 different API gateway.

54
00:03:42,044 --> 00:03:44,454
Of course, it's not easier.

55
00:03:44,844 --> 00:03:46,594
For you understand.

56
00:03:46,954 --> 00:03:49,594
The different between
20 different project.

57
00:03:49,594 --> 00:03:51,754
And for this season, you need to study.

58
00:03:52,354 --> 00:03:53,884
After that, you need to choose.

59
00:03:53,884 --> 00:03:57,484
And after you choose our right
project, you need to improve

60
00:03:57,484 --> 00:03:58,984
your knowledge about the tool.

61
00:03:59,584 --> 00:04:03,784
If you want to create an application
today, you need to know a lot of

62
00:04:03,784 --> 00:04:07,594
different tool and you need to
have a lot of different knowledge.

63
00:04:08,104 --> 00:04:14,024
In the left side, in the list, I put also
the automation and the SCI and CD tools.

64
00:04:14,499 --> 00:04:18,940
Some of you can say that is
not a tool to improve the

65
00:04:18,940 --> 00:04:21,399
complexity, and I agree with you.

66
00:04:21,789 --> 00:04:28,039
But of course if you want to have
automation or continuous integration

67
00:04:28,039 --> 00:04:32,659
and delivery in your project, you
need to know new tools, understand

68
00:04:32,659 --> 00:04:34,460
it, and after that use it.

69
00:04:34,820 --> 00:04:36,560
It's part of the cognitive law.

70
00:04:37,060 --> 00:04:39,880
When we talk about cognitive
load, we talk about the mental

71
00:04:39,880 --> 00:04:44,110
effort required to process
information and complete that task.

72
00:04:44,610 --> 00:04:47,040
There is three different
type of cognitive load.

73
00:04:48,030 --> 00:04:50,250
The first of one, it's intrinsic.

74
00:04:51,164 --> 00:04:54,795
It's at the end that not
really complex of a task.

75
00:04:55,485 --> 00:04:56,835
Some tasks are hard.

76
00:04:57,015 --> 00:05:00,015
You need to have knowledge
to do that, and that's it.

77
00:05:00,435 --> 00:05:04,775
You can reduce without any kind of
trick, this kind of cognitive load.

78
00:05:05,465 --> 00:05:10,235
Of course, if you study, you improve
your knowledge, you can reduce

79
00:05:10,995 --> 00:05:15,705
using structured learning, but in
other case, it's part of the work.

80
00:05:16,205 --> 00:05:20,645
The second one, it's related
to the cognitive law that

81
00:05:20,645 --> 00:05:23,585
you use to improve yourself.

82
00:05:24,245 --> 00:05:29,785
For example, effort that you use
to learn and understand better

83
00:05:29,845 --> 00:05:33,235
a task or to learn new stuff.

84
00:05:34,105 --> 00:05:39,025
To complete that task and this
kind of cognitive load can be

85
00:05:39,025 --> 00:05:40,645
good because I improve yourself.

86
00:05:40,675 --> 00:05:45,304
For example, if we talk about
CICD, that we look in the previous

87
00:05:45,304 --> 00:05:51,135
slide if you want to know how to
create a pipeline and manage all

88
00:05:51,135 --> 00:05:52,815
the automation, your application.

89
00:05:53,444 --> 00:05:59,204
This load can be a German load and
this could because you after study

90
00:05:59,624 --> 00:06:07,704
can understand new tools exp explore
new stuff and expand your knowledge.

91
00:06:08,204 --> 00:06:13,934
The last one, it's all the cognitive
law, not related to your knowledge

92
00:06:13,964 --> 00:06:18,514
and the tools and let me say new
tools that you want to learn, but

93
00:06:18,514 --> 00:06:21,814
it's related to unnecessary effort.

94
00:06:22,114 --> 00:06:26,994
For example, coset by port
tools, ENT processes, and so on.

95
00:06:27,504 --> 00:06:31,594
Of course systems are not
intuitive or process with.

96
00:06:32,439 --> 00:06:39,679
Too many step or unclear workflow
or tools with operate UI or a lot

97
00:06:39,679 --> 00:06:45,769
of information, unclear docs can
increase this kind of cognitive loans.

98
00:06:46,189 --> 00:06:51,109
And our goal is try to reduce this
kind of cognitive load because

99
00:06:51,139 --> 00:06:56,329
it's the only one that we can
improve without any kind of fish.

100
00:06:56,829 --> 00:06:59,889
Just to do a very clear example.

101
00:07:00,069 --> 00:07:02,379
As a developer, you
need a new environment.

102
00:07:02,879 --> 00:07:08,249
20 years ago, you can create by yourself
and with a drag and drop, you can

103
00:07:08,489 --> 00:07:10,409
upload your project and your done.

104
00:07:10,909 --> 00:07:15,329
Today you need to ask, in the
majority of the case in a structured

105
00:07:15,329 --> 00:07:20,579
companies to our colleagues in ops
team, for example, and it can it

106
00:07:20,969 --> 00:07:24,389
have the permission and the knowledge
to create the environment for you.

107
00:07:25,029 --> 00:07:30,959
After the request, the ops guy can
create the resource configuration.

108
00:07:31,549 --> 00:07:36,229
The configuration of environments,
for example, variable seeker and so

109
00:07:36,229 --> 00:07:41,989
on, create the right network, set up
the security set up and many others.

110
00:07:42,409 --> 00:07:46,399
After that, it can provide to
you analysis and you can out your

111
00:07:46,399 --> 00:07:52,759
application, but sometimes is not
the upper in the same team or in

112
00:07:52,759 --> 00:07:54,409
the same desk or in the same room.

113
00:07:54,979 --> 00:08:02,735
You need to ask this kind of with a
request on Jira, Asana and other system.

114
00:08:03,065 --> 00:08:07,175
And of course the answer is not
very fast because the ops team,

115
00:08:07,175 --> 00:08:12,524
maybe in the meantime other stuff
do, can be on vacation and so on.

116
00:08:13,024 --> 00:08:16,324
And of course this is,
it's part of a poor.

117
00:08:16,699 --> 00:08:17,959
Develop experience.

118
00:08:18,459 --> 00:08:22,179
For this reason, we can introduce
the platform engineering.

119
00:08:22,359 --> 00:08:26,795
When we talk about platform engineering,
we can say that it's a software

120
00:08:26,795 --> 00:08:31,594
engineering discipline focused on
the development of self service,

121
00:08:31,955 --> 00:08:34,145
tool chain service and processes.

122
00:08:34,655 --> 00:08:38,194
It's based on these six
keywords, let me say.

123
00:08:38,554 --> 00:08:42,004
The first one, it's try to
centralize all the stuff.

124
00:08:42,574 --> 00:08:46,594
For example, manage all the
project and all the source of

125
00:08:46,594 --> 00:08:48,484
your project in a single place.

126
00:08:49,234 --> 00:08:53,775
The second one, it's try to
automate create automation about

127
00:08:53,805 --> 00:08:58,545
all the stuff, industrialize and
automate the entire DevOp cycle.

128
00:08:59,415 --> 00:09:02,114
The third one, it's simplicity.

129
00:09:02,439 --> 00:09:08,099
Try to solve complex task and
integration, for example, with

130
00:09:08,099 --> 00:09:10,889
the cloud in a very simple way.

131
00:09:11,789 --> 00:09:14,129
And the four, the efficiency.

132
00:09:14,159 --> 00:09:20,269
Try to avoid bottleneck to organization
like the stuff that we saw before.

133
00:09:21,040 --> 00:09:26,539
But also try to improve the quality
because of course if you put in your

134
00:09:26,539 --> 00:09:32,019
application completely automation,
you can insert in the pipeline, for

135
00:09:32,019 --> 00:09:41,369
example, quality check and also order
stuff that can provide to you a good and

136
00:09:41,369 --> 00:09:43,259
improve the quality of your software.

137
00:09:43,739 --> 00:09:47,219
But all this stuff need
to be self-service.

138
00:09:47,719 --> 00:09:53,059
The developers need to use all the
stuff in our cell service mode.

139
00:09:53,559 --> 00:09:57,309
At the end, the idea about platform
engineering is try to reduce the

140
00:09:57,309 --> 00:10:01,549
complexity of your application
because in this way you can

141
00:10:01,849 --> 00:10:03,290
have the ability to manage it.

142
00:10:03,790 --> 00:10:08,800
When we look at platform engineering,
the majority of the people looks just

143
00:10:09,339 --> 00:10:14,619
at the internal developer portal and the
orchestrator just for the infrastructure.

144
00:10:15,194 --> 00:10:17,594
But I think that it's more than that.

145
00:10:18,165 --> 00:10:21,795
For example, in the left side, you
have your internal developer portal

146
00:10:21,795 --> 00:10:28,074
with a new I-O-C-L-I or API or
maybe ai with a different feature

147
00:10:28,074 --> 00:10:32,385
like the software catalog store
scorecard dashboard, and so on.

148
00:10:32,885 --> 00:10:37,380
In the middle you have the platform
orchestrator that can help the people

149
00:10:37,380 --> 00:10:41,070
that use the internal developer
portal to manage the right side.

150
00:10:41,910 --> 00:10:42,750
In the right side.

151
00:10:42,750 --> 00:10:47,010
We have in the bottom, of course, the
infrastructure can be, for example,

152
00:10:47,670 --> 00:10:50,400
cloud services, but also AI provider.

153
00:10:51,000 --> 00:10:56,580
And the infrastructure platform can
be, for example, Kubernetes, but also

154
00:10:57,180 --> 00:11:03,150
container managed services or functions
or so on, and the DevOps platform.

155
00:11:03,150 --> 00:11:06,840
In the DevOps platform you
have, for example, GI, but

156
00:11:06,840 --> 00:11:10,620
also pipeline, the tracing, the
monitoring, the testing and so on.

157
00:11:11,460 --> 00:11:15,420
But I think that there are very
interesting part on these images.

158
00:11:15,920 --> 00:11:20,240
The yellow part, the application
assets and possibility.

159
00:11:20,640 --> 00:11:26,560
For example, the poss ability to have
out of the box API gateways or a API

160
00:11:26,560 --> 00:11:32,440
portal or Evans portal system to manage
a automatization and authentication, but

161
00:11:32,440 --> 00:11:36,130
also microservices, a PI or Evan or cast.

162
00:11:37,100 --> 00:11:41,950
Software or marketplace, let me say
software catalog or marketplace,

163
00:11:42,340 --> 00:11:45,790
but also system to create and
manage microphone and so on.

164
00:11:46,690 --> 00:11:50,710
Of course, the data, it's a very
important part, and have a data control

165
00:11:50,710 --> 00:11:55,240
plane can be good with system like
fast data, but also data catalog.

166
00:11:55,240 --> 00:12:01,130
Also, crowd systems can be very
good to improve the velocity

167
00:12:01,130 --> 00:12:02,780
and reduce the cognitive loan.

168
00:12:03,140 --> 00:12:04,395
And of course the AI.

169
00:12:05,005 --> 00:12:10,465
When we talk about ai, for sure, we talk
about LLM, but also speech, ai, multimodal

170
00:12:10,465 --> 00:12:17,485
and other system like the AI agent to
manage all the stuff that you can need.

171
00:12:17,985 --> 00:12:21,945
This kind of architecture that
we saw in the previous slide can

172
00:12:21,945 --> 00:12:25,445
open a new, very powerful concept.

173
00:12:25,955 --> 00:12:28,385
The concept of circular economy.

174
00:12:29,165 --> 00:12:30,575
They, it's very simple.

175
00:12:30,665 --> 00:12:35,585
Let's imagine a team that need
microservices to make payments.

176
00:12:36,170 --> 00:12:42,130
Of course there is no microservices around
and they start to develop the system from

177
00:12:42,130 --> 00:12:45,820
zero at the end of the development cycle.

178
00:12:45,820 --> 00:12:52,810
They have a system based on talker, for
example, to create a manage payment.

179
00:12:53,285 --> 00:12:58,270
You can call API, this API can
get, I don't know, the credit

180
00:12:58,270 --> 00:13:04,830
number the card credit number and
after that he can make payments.

181
00:13:05,330 --> 00:13:08,390
After that, he, they do
the work in this way.

182
00:13:08,990 --> 00:13:14,270
If another team need to create the same
system, they need to start from zero.

183
00:13:15,185 --> 00:13:20,985
But if they create a good
documentation, they can be create a

184
00:13:20,985 --> 00:13:23,235
general software that can be reused.

185
00:13:23,835 --> 00:13:28,845
They can put this service in a
marketplace or software catalog.

186
00:13:29,445 --> 00:13:33,585
Another team that need the same
stuff can get this component

187
00:13:33,585 --> 00:13:36,045
and use it without use effort.

188
00:13:36,545 --> 00:13:39,035
Of course, sometimes the new team need to.

189
00:13:39,440 --> 00:13:43,910
Change stuff, add new possibility,
add new functionality.

190
00:13:44,240 --> 00:13:47,960
And of course, if the functionality
it's related to the payment, they

191
00:13:47,960 --> 00:13:51,950
can change the code, update the
documentation, and release a new

192
00:13:51,950 --> 00:13:54,620
version, for example, to support PayPal.

193
00:13:55,550 --> 00:14:01,520
But if they need another functionality,
like a system to create invoice

194
00:14:02,130 --> 00:14:06,245
after the payments, they can get the
payment system from the team one.

195
00:14:07,095 --> 00:14:13,725
After that, create the system to create
invoice and put together and use it.

196
00:14:14,225 --> 00:14:18,755
Another team, of course, can get
only the payment system, the invoice

197
00:14:18,755 --> 00:14:24,555
system, but or get some stuff and
after that, create new stuff or improve

198
00:14:24,555 --> 00:14:26,645
the stuff that already used exist.

199
00:14:27,185 --> 00:14:31,935
Of course, this kind of circular economy
can be very good for your developer

200
00:14:31,965 --> 00:14:36,985
because the this kind of system can
reduce a lot of the community load

201
00:14:36,985 --> 00:14:39,715
inside your team because they don't need.

202
00:14:40,150 --> 00:14:44,920
To create from zero each time
the stuff, but they can use and

203
00:14:44,920 --> 00:14:47,290
reuse stuff created by orders.

204
00:14:47,650 --> 00:14:48,310
Of course.

205
00:14:48,310 --> 00:14:52,960
To do this, they need to have a good
documentation and a good product.

206
00:14:53,460 --> 00:14:53,970
Okay.

207
00:14:54,030 --> 00:14:58,700
Of course, when we talk about ai, we
need to talk about some stuff that

208
00:14:58,700 --> 00:15:02,900
can help the developer to reduce
the cognitive load using the ai.

209
00:15:03,400 --> 00:15:08,150
Of course we look a lot around and
there is a lot of different tools that

210
00:15:08,150 --> 00:15:10,490
can improve the ai, but for example.

211
00:15:11,345 --> 00:15:17,615
AI assisted devs can reduce the
manual task and all your developer

212
00:15:17,645 --> 00:15:20,135
to have a focus on their creativity.

213
00:15:20,765 --> 00:15:26,115
If an AI can manage some task
for your developer, simple

214
00:15:26,115 --> 00:15:27,915
task, can repetitive task.

215
00:15:28,455 --> 00:15:30,855
The developer are free
to create other stuff.

216
00:15:31,815 --> 00:15:36,345
For example, in this kind of of
AI example, we can talk also about

217
00:15:36,345 --> 00:15:37,610
code generation and debugging.

218
00:15:38,310 --> 00:15:44,520
The developer can use a tool to create
code for computation or debugging

219
00:15:44,880 --> 00:15:47,340
and to reduce the cognitive load.

220
00:15:48,090 --> 00:15:53,225
But another important stuff, it's
related to let me say documentation.

221
00:15:53,455 --> 00:15:53,745
Okay.

222
00:15:54,710 --> 00:16:01,040
For example, a developer can ask
to AI to have information about

223
00:16:01,040 --> 00:16:03,320
functionality, documentation, and so on.

224
00:16:03,830 --> 00:16:10,610
Of course, this kind of system can be
created by a rag power AI system, and

225
00:16:10,610 --> 00:16:12,680
we call it conversational dev device.

226
00:16:13,180 --> 00:16:20,890
If you have all this stuff in
your system all interconnected,

227
00:16:21,490 --> 00:16:26,520
you can have assist devs in real
time using conversational direct.

228
00:16:27,155 --> 00:16:34,005
DDI is if a developer need to make some
manual task, he can ask to an AI and AI

229
00:16:34,005 --> 00:16:40,065
can do the task for your developer, or
if a developer have problems with some

230
00:16:40,065 --> 00:16:42,675
stuff, can ask to the AI and so on.

231
00:16:43,175 --> 00:16:48,960
When we imagine this kind of plaque for
my image, this kind of very simple draw.

232
00:16:49,495 --> 00:16:51,235
In the top, we have the platform.

233
00:16:51,235 --> 00:16:53,215
In the right we have the AI.

234
00:16:53,275 --> 00:16:58,735
In the left, we have the person that
want to use this kind of of system.

235
00:16:59,235 --> 00:17:03,765
In this example for example we can
talk about a couple of different stuff.

236
00:17:03,795 --> 00:17:10,665
The first one, it's if a developer need to
have information he can ask to ai r inside

237
00:17:10,665 --> 00:17:16,265
the AI Iraq you have for example, LLM,
but also all the documentation related

238
00:17:16,265 --> 00:17:18,425
to your application and your platform.

239
00:17:18,845 --> 00:17:23,495
And of course the AI have context about
your technology, your feature, and so on.

240
00:17:23,495 --> 00:17:24,035
And he can.

241
00:17:24,310 --> 00:17:27,210
The AI cannot answer to your developer.

242
00:17:27,960 --> 00:17:35,960
Of course, we can add to the AI in
the rug also the logs in the specific

243
00:17:35,960 --> 00:17:37,940
configuration of your platform.

244
00:17:38,570 --> 00:17:42,020
Of course, if we have all
the configuration and all the

245
00:17:42,020 --> 00:17:46,520
stuff centralized and in the
platform, we can provide all this

246
00:17:46,520 --> 00:17:51,290
configuration to the ai and with the
documentation the AI can understand.

247
00:17:52,075 --> 00:17:57,055
What your platform do and all the
stuff related to your platform.

248
00:17:57,555 --> 00:18:03,555
Just an example, if you provide all the
documentation with all the code error

249
00:18:04,215 --> 00:18:11,080
about your services to the ai, and after
that you provide all the logs to the ai.

250
00:18:12,000 --> 00:18:17,850
A developer can ask, you can
find in the logs of my platform

251
00:18:17,880 --> 00:18:23,400
any warning or any error, and of
course they, I can say yes or no.

252
00:18:23,430 --> 00:18:29,320
If yes, you can ask, okay which
kind of error or warning you find in

253
00:18:29,320 --> 00:18:31,780
the logs and how I can resolve it.

254
00:18:32,440 --> 00:18:37,090
If you think about that, you can think
that the AI have all the information

255
00:18:37,180 --> 00:18:39,610
about the Earth that happens.

256
00:18:40,120 --> 00:18:44,650
About why it happened because in the
documentation you have all the information

257
00:18:44,650 --> 00:18:51,520
and can be a very good system to reduce
a lot the cognitive load of your teams.

258
00:18:52,020 --> 00:18:53,250
Just a practical team.

259
00:18:53,280 --> 00:18:55,870
Of course, this is a theoretical talks.

260
00:18:55,870 --> 00:18:57,430
I'm hope that you enjoy it.

261
00:18:57,460 --> 00:19:03,220
But of course you, we need to
understand how we can start

262
00:19:03,280 --> 00:19:05,410
with platform engineer and ai.

263
00:19:06,100 --> 00:19:09,790
The first one, it's the first
question that you need to do.

264
00:19:09,790 --> 00:19:15,690
It's why why you need to adopting a
platform or why you need to adopt.

265
00:19:15,720 --> 00:19:20,680
AI platform of course, which kind
of problem you want to solve,

266
00:19:21,180 --> 00:19:24,505
what problem you want to solve.

267
00:19:24,505 --> 00:19:29,455
Of course, if you work in a very large
company, you have different business unit.

268
00:19:29,485 --> 00:19:33,955
Different business unit have different
problems, and of course you can start

269
00:19:33,955 --> 00:19:36,685
to solve all the problem together.

270
00:19:37,195 --> 00:19:39,835
You need to choose the a couple.

271
00:19:40,340 --> 00:19:46,000
You need to create priority and choose
the problem that you want to solve in this

272
00:19:46,000 --> 00:19:52,050
case, for example what capability should
my platform have in the beginning can be

273
00:19:52,050 --> 00:20:00,390
a good question, and of course how this
kind of change can impact your business.

274
00:20:01,230 --> 00:20:04,500
Of course, you need to understand
if you already have metrics.

275
00:20:05,000 --> 00:20:11,430
Choose metrics to use and of
course, try to understand if

276
00:20:11,430 --> 00:20:17,310
your platform, initiative and AI
initiative can improve your metrics.

277
00:20:18,120 --> 00:20:25,520
When we talk about metrics as suggestion
that I get from Graziano cast is try to

278
00:20:25,550 --> 00:20:32,500
not define at all the metrics because,
for sure if you write code, if you have

279
00:20:32,500 --> 00:20:35,290
a company, you already have the metrics.

280
00:20:35,830 --> 00:20:39,060
For example, in the case that
we saw in the beginning of this

281
00:20:39,060 --> 00:20:44,835
presentation, a metrics can be if
a developer need a new environment,

282
00:20:45,335 --> 00:20:47,960
how many minutes, hours, days.

283
00:20:48,725 --> 00:20:51,665
He need to wait a new environment.

284
00:20:52,205 --> 00:20:57,095
That can be a good metrics and you
don't need to define new metrics.

285
00:20:57,095 --> 00:21:00,855
It's perfect for you if you define that.

286
00:21:01,495 --> 00:21:06,195
The reason to adopt the platform
initiative can be create

287
00:21:06,195 --> 00:21:07,845
the environment very fast.

288
00:21:08,595 --> 00:21:12,810
And the first stuff, it's
permitted developer to have.

289
00:21:13,310 --> 00:21:16,700
Self service platform to
create a new environment.

290
00:21:17,570 --> 00:21:20,110
This is, its geometric of course.

291
00:21:20,110 --> 00:21:26,355
When you start this kind of initiative,
you need also to talk with all

292
00:21:26,755 --> 00:21:29,235
interesting people to understand.

293
00:21:30,030 --> 00:21:34,350
All the company that can have
benefit from your initiative.

294
00:21:34,980 --> 00:21:42,100
And of course you need to find methods
that can be used by the world company.

295
00:21:42,100 --> 00:21:45,230
It's just not deployment frequency.

296
00:21:45,230 --> 00:21:48,890
You need to find the right
way to use the right metrics.

297
00:21:49,390 --> 00:21:54,100
And of course you need to evaluate
the progress of this metrics

298
00:21:54,130 --> 00:21:58,600
during the time because sometimes
new technologies can improve in

299
00:21:58,600 --> 00:22:02,750
the phos period the productivity
and reduce the cognitive load.

300
00:22:03,500 --> 00:22:08,550
But in the long run adding new
functionality and modify out

301
00:22:08,550 --> 00:22:14,000
this kind of new technology work,
that metrics during the long time

302
00:22:14,000 --> 00:22:16,440
can be less than the beginning.

303
00:22:16,830 --> 00:22:22,530
Of course, your goal, it's try to look
at the metrics during the long run.

304
00:22:23,140 --> 00:22:29,380
And try to look the metrics for the
technical part, but also identify

305
00:22:29,380 --> 00:22:35,130
business value because, the business
is part of our job in any case.

306
00:22:35,630 --> 00:22:36,140
Okay.

307
00:22:36,410 --> 00:22:38,030
A couple of general suggestions.

308
00:22:38,060 --> 00:22:44,420
Try to invest time to sell service
experience for developers related

309
00:22:44,420 --> 00:22:46,370
to platform, but also to ai.

310
00:22:47,245 --> 00:22:52,405
Try to align your technology
closely with business objective.

311
00:22:52,795 --> 00:22:58,915
I know sometime it's hard because if you
are a tech person, you look at tech part.

312
00:22:58,915 --> 00:23:01,795
If you're a business person,
you look at the business part.

313
00:23:02,215 --> 00:23:05,065
But the best companies work.

314
00:23:05,065 --> 00:23:11,455
When tech and business align it, try to
support the change because the people,

315
00:23:11,485 --> 00:23:16,345
not all the people are ready to change,
and sometimes you need to be patient

316
00:23:16,465 --> 00:23:23,935
and try to create tutors and guidance
to help these people to change with you.

317
00:23:24,435 --> 00:23:30,385
In any case, it's related to platform
ai, but also if you don't use this kind

318
00:23:30,385 --> 00:23:35,405
of technology I think that the, one of
the majority stuff, it's try to include

319
00:23:35,645 --> 00:23:41,225
the collaboration because when the people
work together, you can avoid common pit

320
00:23:41,225 --> 00:23:49,845
fails and try to create, solution that
the people can enjoy using, because

321
00:23:50,055 --> 00:23:55,575
I think that the most important part,
if you look at developer experience,

322
00:23:55,815 --> 00:24:01,785
if you look at platform engineer, but
also if you look at ai, the first goal,

323
00:24:01,785 --> 00:24:09,515
it's try to create a good ecosystem
to the developer and try to improve.

324
00:24:10,080 --> 00:24:14,270
The quality of the tool that the
developer use to create stuff.

325
00:24:14,770 --> 00:24:16,840
Of course there is a lot of resources.

326
00:24:16,840 --> 00:24:19,210
The first one is the platform model.

327
00:24:19,240 --> 00:24:24,220
Maybe you know it, there is link here
if you don't know nothing about platform

328
00:24:24,460 --> 00:24:26,800
by suggesting it's starting from here.

329
00:24:27,190 --> 00:24:29,850
But another very interesting to blog post.

330
00:24:29,850 --> 00:24:33,400
It's this expanding that all
of the platform engineering.

331
00:24:33,990 --> 00:24:35,400
You can find the link here.

332
00:24:36,000 --> 00:24:40,680
I use a lot of ideas about
this blog post in this talks.

333
00:24:40,680 --> 00:24:44,180
But in the blog post, you can
find a lot of good information.

334
00:24:44,750 --> 00:24:46,040
And that's it.

335
00:24:46,820 --> 00:24:51,850
Here you can find my, for me, if you
want to leave a feedback I love read

336
00:24:51,850 --> 00:24:54,220
it and try to improve for the future.

337
00:24:54,580 --> 00:24:59,020
Of course, if you have any suggestion
to improve the talk or to add

338
00:24:59,020 --> 00:25:00,790
new part, please let me know.

339
00:25:01,330 --> 00:25:04,940
You can feel free to add me on
LinkedIn and Social Network.

340
00:25:04,940 --> 00:25:10,835
You can find me as a Mission
Mohabi or Mitch Moha or on GitHub.

341
00:25:11,555 --> 00:25:13,895
If you have any question, I here for you.

342
00:25:14,195 --> 00:25:15,670
Thank you and bye-bye.

