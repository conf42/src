1
00:00:00,750 --> 00:00:01,230
Hello everyone.

2
00:00:01,230 --> 00:00:04,120
I'm pr data solution
architect with Quantified.

3
00:00:04,540 --> 00:00:08,380
So I have over 10 years of experience
in designing cloud native analytics

4
00:00:08,380 --> 00:00:12,640
platforms for several different
customers specifically on AWS.

5
00:00:13,300 --> 00:00:17,620
And in working with customers from
different domains, I've repeatedly

6
00:00:17,620 --> 00:00:23,600
seen a common pattern, which is
services are often were misapplied.

7
00:00:24,530 --> 00:00:29,000
So specifically when it comes
to observability, it leads to

8
00:00:29,000 --> 00:00:33,190
a lot of bad outcomes, which is
it leads to blind spots, alert,

9
00:00:33,190 --> 00:00:35,290
fatigue, balloon cough, and mis.

10
00:00:35,790 --> 00:00:41,660
So today at QU Con 42 we will keep
it at a very high level and focus

11
00:00:41,660 --> 00:00:45,859
mainly on real world monitoring
and observability use cases.

12
00:00:46,370 --> 00:00:51,539
In today's cloud first managed services
promises, agility, accountability,

13
00:00:51,539 --> 00:00:53,699
and reduced operational overhead.

14
00:00:54,299 --> 00:00:57,419
And these services have become
the foundation of modern

15
00:00:57,419 --> 00:00:59,219
digital and data architectures.

16
00:00:59,219 --> 00:01:04,649
And the ease of adoption often masks a
very critical risk, which is misalignment

17
00:01:04,654 --> 00:01:07,440
between the service capabilities
and actual workload requirements.

18
00:01:07,949 --> 00:01:11,519
So when cloud services are selected
without clear understanding of their

19
00:01:11,519 --> 00:01:16,349
intended function in context, they can
definitely introduce long-term friction

20
00:01:16,919 --> 00:01:21,829
and it costs teams valuable time,
capacity, and financial resources so

21
00:01:21,829 --> 00:01:25,714
that by the end of the session, we will
have a clear mapping of the requirement

22
00:01:25,714 --> 00:01:30,799
tool choices, so that we never over or
under provision our telemetry stack.

23
00:01:31,409 --> 00:01:35,429
And it addition framework that will
help us wa it and see complexity and

24
00:01:35,429 --> 00:01:41,949
granularity and best practices and common
pitfalls to watch out as we build and

25
00:01:41,949 --> 00:01:45,399
optimize our observability layer in AWS.

26
00:01:46,149 --> 00:01:47,619
So what is observability?

27
00:01:48,069 --> 00:01:52,659
So observability is nothing but the
measure of internal state of the system.

28
00:01:53,274 --> 00:01:58,004
By examining outputs such as
logs, metrics, and traces,

29
00:01:58,664 --> 00:02:00,644
it's not about just monitoring.

30
00:02:00,644 --> 00:02:04,054
It's about deep insight and
understanding the system.

31
00:02:04,554 --> 00:02:09,694
And its main purpose is to
empower teams to direct, diagnose,

32
00:02:10,174 --> 00:02:11,974
and resolve issues faster.

33
00:02:12,904 --> 00:02:18,184
So it helps improve reliability,
performance, and user satisfaction.

34
00:02:18,684 --> 00:02:25,944
So when it comes to cloud platforms,
cloud and data platforms, we have a lot

35
00:02:25,944 --> 00:02:33,074
of microservices, serverless functions,
distributed pipelines, and observability

36
00:02:33,074 --> 00:02:38,684
is connected tissue that holds the
modern data architectures together.

37
00:02:39,374 --> 00:02:44,754
So without it blind spots emerge
lead to increasing downtime.

38
00:02:45,414 --> 00:02:47,634
User frustration and loss of trust.

39
00:02:48,294 --> 00:02:54,294
So from a strategic standpoint,
observability is the foundation for

40
00:02:54,294 --> 00:03:01,074
cloud analytics platform and it enables
real time decision making, compliance

41
00:03:01,074 --> 00:03:03,804
assurance, and proactive optimization.

42
00:03:04,304 --> 00:03:08,114
So here are some core
pillars of observability.

43
00:03:08,325 --> 00:03:12,904
So one is logs second is
metrics, and third is traces.

44
00:03:13,699 --> 00:03:15,859
So let's understand each one of these.

45
00:03:16,349 --> 00:03:22,949
Locks are nothing but in immutable
records of events that have occurred

46
00:03:22,949 --> 00:03:28,499
within the system, such as error
messages, user actions, state

47
00:03:28,499 --> 00:03:35,859
changes it locks provide granular,
timestamped context and are vital for

48
00:03:36,639 --> 00:03:38,739
post-incident analysis and auditing.

49
00:03:39,239 --> 00:03:42,839
When it comes to metrics quantitative
measurements taken at interval,

50
00:03:42,959 --> 00:03:45,509
for example, we take CP usage.

51
00:03:45,569 --> 00:03:50,279
So it's a quantitative
metric that 80% is utilized.

52
00:03:50,379 --> 00:03:52,569
Memory, it's a quantitative metric.

53
00:03:53,099 --> 00:03:55,284
Request counts error rates, right?

54
00:03:55,464 --> 00:04:01,044
These are all, something we call
metrics and these are compact

55
00:04:01,524 --> 00:04:03,834
and efficient for trend analysis.

56
00:04:04,159 --> 00:04:06,439
How's the CCP utilization over time?

57
00:04:06,739 --> 00:04:08,329
How's the performance over time?

58
00:04:08,599 --> 00:04:13,949
So this is something the metrics are going
to be really helpful in such scenario.

59
00:04:14,609 --> 00:04:16,919
And the last one is traces.

60
00:04:17,009 --> 00:04:22,529
So tracers show the journey of
a single request for example,

61
00:04:22,529 --> 00:04:24,959
across various services.

62
00:04:25,329 --> 00:04:26,769
So it catches the latency.

63
00:04:27,114 --> 00:04:31,794
And this is very critical
for understanding complex

64
00:04:31,944 --> 00:04:34,214
and interconnected systems.

65
00:04:34,904 --> 00:04:38,324
And it'll definitely help
with the root cause analysis.

66
00:04:38,824 --> 00:04:43,574
So let's understand some of
the core services in AWS.

67
00:04:43,884 --> 00:04:45,774
The very first one is CloudWatch.

68
00:04:45,924 --> 00:04:51,194
So when it comes to capabilities
it is used for lock collection.

69
00:04:51,509 --> 00:04:58,339
Metric aggregation customizable dashboards
for alarms and automated actions.

70
00:04:59,059 --> 00:05:02,719
The general use case is general
purpose monitoring, alerting,

71
00:05:02,719 --> 00:05:04,309
and automated responses.

72
00:05:05,239 --> 00:05:10,760
So CloudWatch is a foundational
observability tool provided by AWS.

73
00:05:10,760 --> 00:05:16,990
So it'll allow us to gather all these
logs, metrics and define these dashboards.

74
00:05:17,469 --> 00:05:22,309
We will also have an ability to
configure customer alarms, proactive

75
00:05:22,309 --> 00:05:24,529
alerts, and automated remediation.

76
00:05:25,159 --> 00:05:29,299
So it's a versatile and integrate
seamlessly across various AWS services.

77
00:05:30,049 --> 00:05:34,609
Making it very ideal for monitoring
and basic troubleshooting.

78
00:05:35,109 --> 00:05:40,539
So when it comes to x-ray end-to-end
tracing requests through distributed

79
00:05:40,539 --> 00:05:45,829
application detail, insights into
microservice interaction, and

80
00:05:45,879 --> 00:05:49,839
it's mainly used for debugging and
performance optimization of these

81
00:05:49,839 --> 00:05:52,389
microservices so we can understand.

82
00:05:52,729 --> 00:05:56,869
Which microservices is taking
more time versus the one that

83
00:05:56,869 --> 00:05:58,459
is acting up very quickly.

84
00:05:59,119 --> 00:06:03,109
So it's a very helpful service
and offering that AWS has.

85
00:06:03,609 --> 00:06:05,679
So the next one is the managed Grafana.

86
00:06:05,869 --> 00:06:09,919
Capabilities wise, it's very
rich in terms of visualization.

87
00:06:10,599 --> 00:06:14,769
It provides seamless integration
with multiple AWS services.

88
00:06:15,324 --> 00:06:19,494
As well as multiple open source
databases, it'll provide real

89
00:06:19,494 --> 00:06:21,174
time dashboards and analytics.

90
00:06:21,594 --> 00:06:27,804
So majorly this managed Grafana is used
for real time visualization of system

91
00:06:27,804 --> 00:06:30,534
metrics and logs for operational insight.

92
00:06:31,034 --> 00:06:32,444
The next one is a BI offering.

93
00:06:32,534 --> 00:06:34,664
So QuickSight, it's
it's called QuickSight.

94
00:06:34,664 --> 00:06:39,034
It's a very popular tool and, the
cab are, it's a bi service offering.

95
00:06:39,164 --> 00:06:44,934
It's not really an observability tool,
but it provides interactive dashboards in

96
00:06:45,004 --> 00:06:50,004
insightful analytics and natural language
query processing using QuickSight queue.

97
00:06:50,874 --> 00:06:54,444
So the use case wise, it is used for
business intelligence and analytics

98
00:06:54,444 --> 00:06:56,714
reporting with periodic data refresh.

99
00:06:56,714 --> 00:06:57,884
It's not real time though.

100
00:06:58,384 --> 00:07:00,989
And the last one is
restore for Open Telemetry.

101
00:07:01,169 --> 00:07:05,669
So capabilities include standardized
instrumentation and data collection

102
00:07:05,669 --> 00:07:07,339
across various platforms.

103
00:07:07,489 --> 00:07:10,559
So it's a vendor neutral
broad comparability.

104
00:07:11,039 --> 00:07:16,199
So it provides a unified observability
across our diverse application stacks.

105
00:07:16,699 --> 00:07:21,049
So here is another list of
expanded AWS observability tools.

106
00:07:21,079 --> 00:07:22,519
The first one is cloud rail.

107
00:07:23,074 --> 00:07:29,204
So CloudTrail audits every a PA action
in AWS account essential for governance

108
00:07:29,204 --> 00:07:31,304
compliance tracking and tracking changes.

109
00:07:31,754 --> 00:07:37,074
So it locks any unauthorized attempt
to access something or and it keeps

110
00:07:37,074 --> 00:07:41,504
the log of various services interacting
with each other, or, the users

111
00:07:41,504 --> 00:07:43,634
trying to access certain services.

112
00:07:43,634 --> 00:07:46,844
It'll try to keep track
of all those actions.

113
00:07:47,344 --> 00:07:52,299
AWS config on the other hand continuously
monitors the resource configuration.

114
00:07:52,809 --> 00:07:58,299
It ensures adherence to the
regulatory standards and DevOps crew.

115
00:07:58,489 --> 00:08:03,669
It uses ML to detect anomalies in the
application, suggesting root causes.

116
00:08:03,669 --> 00:08:08,179
And remediations, it's a very
helpful tool and trusted advisor.

117
00:08:08,359 --> 00:08:10,399
It evaluates our AWS setup.

118
00:08:11,014 --> 00:08:14,984
Again, as best practices for cost,
security and performance and provide

119
00:08:14,984 --> 00:08:21,604
recommendations compute optimizer so it
recommends the most efficient compute

120
00:08:22,204 --> 00:08:24,604
a resource based on our usage patterns.

121
00:08:25,444 --> 00:08:31,394
And finally, inspector, it automates
the the security scans on EC2

122
00:08:31,394 --> 00:08:33,434
Lambda Uncon container workloads.

123
00:08:33,934 --> 00:08:37,534
So let's understand now
some architecture patterns.

124
00:08:37,754 --> 00:08:39,704
Centralized telemetry pipelines.

125
00:08:39,794 --> 00:08:44,134
So we collect a store process
observability data from various

126
00:08:44,134 --> 00:08:48,664
sources in a centralized manner using
services like S3 and open search.

127
00:08:49,164 --> 00:08:52,434
And when it comes to real time
monitoring, so let's say if you

128
00:08:52,434 --> 00:08:55,134
want to enable live dashboards.

129
00:08:55,509 --> 00:09:00,309
And alert alerts using tools like
Grafana and CloudWatch for immediate

130
00:09:00,309 --> 00:09:02,439
visibility into system performance.

131
00:09:02,869 --> 00:09:06,935
In this scenario, like Grafana
and CloudWatch stands out.

132
00:09:07,024 --> 00:09:11,644
Along with that, we can use multiple
other services, which can be easily

133
00:09:11,644 --> 00:09:16,749
integrated to send notifications
like S-N-S-S-E-S, et cetera.

134
00:09:17,249 --> 00:09:19,379
And for AI ML integration.

135
00:09:19,709 --> 00:09:25,739
So it's recommended to leverage
AWS SageMaker and bedrock to apply

136
00:09:25,739 --> 00:09:30,089
machine learning models for prior
to analysis on automatic automated

137
00:09:30,089 --> 00:09:32,259
diagnostics and anomaly detection.

138
00:09:33,249 --> 00:09:37,999
So for automated response implement
automated remediation and scaling

139
00:09:38,479 --> 00:09:43,939
using AWS Lambda and eBridge, it'll
help us quickly address, issue,

140
00:09:43,999 --> 00:09:45,299
and maintain the reliability.

141
00:09:45,799 --> 00:09:50,809
As it is mentioned a robust observability
architecture, centralizes the data

142
00:09:51,459 --> 00:09:55,920
powers real time monitoring and
leverages ai and automate the response

143
00:09:55,920 --> 00:09:57,720
for resilience and scalability.

144
00:09:58,220 --> 00:10:01,879
So now let's understand what is
function and what is friction.

145
00:10:02,029 --> 00:10:05,000
So it's a framework that we
should keep in mind when.

146
00:10:05,845 --> 00:10:10,064
Selecting cloud managed services
and it's very important to

147
00:10:10,094 --> 00:10:11,744
follow this approach, right?

148
00:10:12,104 --> 00:10:18,194
So function is when tools we
pick, accelerate, insight, and

149
00:10:18,194 --> 00:10:20,144
integrate seamlessly at scale.

150
00:10:20,924 --> 00:10:25,805
So observability tools empower
teams by providing clear,

151
00:10:25,805 --> 00:10:27,935
fast, and aligned insights.

152
00:10:28,415 --> 00:10:30,724
On the other hand, friction is when.

153
00:10:31,444 --> 00:10:35,255
Tool introduces the
noise lag and complexity.

154
00:10:35,885 --> 00:10:41,405
So it often come hinders team ability
and causes delays and confusion

155
00:10:41,975 --> 00:10:43,935
and ultimately a higher cause.

156
00:10:44,655 --> 00:10:49,660
So looking through function versus
friction lens, it'll help teams to choose

157
00:10:50,160 --> 00:10:54,780
observability tools that drives the
operational excellence by maximizing the

158
00:10:54,780 --> 00:10:56,790
insights and minimizing the complexity.

159
00:10:57,290 --> 00:11:00,960
Now let's take a look at
the examples of function.

160
00:11:01,560 --> 00:11:06,830
So the very first one is using
CloudWatch alarms for real time alerts.

161
00:11:07,310 --> 00:11:10,540
So it's a very good function.

162
00:11:11,000 --> 00:11:13,570
So it's recommended and best practice.

163
00:11:14,485 --> 00:11:18,895
To use cloud wash to collect
metrics logs and visualize the data

164
00:11:19,435 --> 00:11:21,405
using cloud wash data dashboards.

165
00:11:21,855 --> 00:11:26,655
And we can also have trigger alarm
for EC2 monitoring Lambda metrics,

166
00:11:27,255 --> 00:11:29,115
container insights and cost tracking.

167
00:11:29,115 --> 00:11:31,815
So it's a very helpful
tool in this context.

168
00:11:32,235 --> 00:11:37,234
Cloud wash definitely acts, adds
a function and it's, whenever

169
00:11:37,234 --> 00:11:40,645
we have such use case, it's
recommended to go with CloudWatch.

170
00:11:41,604 --> 00:11:45,704
And the next one is X-ray for
pinpointing service bottlenecks.

171
00:11:46,064 --> 00:11:51,664
So let's say we have a web of
microservices that's that are, and we

172
00:11:51,664 --> 00:11:54,184
don't know, like what is taking more time.

173
00:11:54,544 --> 00:11:59,164
So in such scenarios x-ray provides a
distributed tracing for microservices.

174
00:11:59,554 --> 00:12:02,414
And it'll help us debug
the performance issues.

175
00:12:02,904 --> 00:12:07,284
Traces API, gateway lambda flows
and visualize the service maps.

176
00:12:07,764 --> 00:12:12,594
So it's a great tool and it'll help
identify bottlenecks very easily.

177
00:12:12,864 --> 00:12:18,494
So it's another example of function
and my favorite one is Grafana

178
00:12:18,494 --> 00:12:20,804
Dashboard for live performance views.

179
00:12:21,284 --> 00:12:25,424
So not only just for
observability, but for monitoring.

180
00:12:25,949 --> 00:12:28,300
Iot many other use cases.

181
00:12:28,660 --> 00:12:34,340
So Grafana or Managed Grafana enables
live dashboards from cloud Wash

182
00:12:34,340 --> 00:12:37,150
Prometheus and several data sources.

183
00:12:37,150 --> 00:12:38,020
You can name it.

184
00:12:38,050 --> 00:12:44,330
Used in N Cs solar tracking service
level objective and anomaly detection.

185
00:12:44,830 --> 00:12:48,030
And open telemetry for
unified instrumentation.

186
00:12:48,120 --> 00:12:53,600
It provides standardized instrumentation
across applications like E-C-S-E-K-S

187
00:12:53,600 --> 00:12:58,730
or hybrid environments, sending data
to CloudWatch or third party tools.

188
00:12:59,420 --> 00:13:04,870
So these tools overall reduce time to
detect and time to resolve provides

189
00:13:04,870 --> 00:13:09,070
actionable and high value insights
that drive the operational excellence.

190
00:13:09,570 --> 00:13:11,430
Let's see some examples of friction.

191
00:13:11,700 --> 00:13:15,270
So let's say if you use QuickSight
for realtime monitoring, right?

192
00:13:15,630 --> 00:13:20,040
So QuickSight is not a real
realtime tool that we can use.

193
00:13:20,130 --> 00:13:23,820
So using QuickSight for
realtime monitoring, definitely

194
00:13:23,820 --> 00:13:24,900
there is going to be a lag.

195
00:13:25,410 --> 00:13:29,055
And it, it is due to the nature
of QuickSight batch processing.

196
00:13:29,564 --> 00:13:35,375
Approach that it makes it un unsuitable
for time sensitive monitoring and

197
00:13:35,425 --> 00:13:40,314
scaling CloudWatch logs without structured
queries, acquiring challenges due

198
00:13:40,314 --> 00:13:45,714
to unstructured log data, leading to
reduced visibility and insights and,

199
00:13:45,714 --> 00:13:47,664
overlapping tools without integration.

200
00:13:47,664 --> 00:13:52,674
So tools, sprawl causing fragmented
data and complexity, and it hinders

201
00:13:52,674 --> 00:13:54,234
collaboration and efficiency.

202
00:13:54,734 --> 00:13:58,064
Friction arises when tools
are misapplied, architectures,

203
00:13:58,064 --> 00:14:00,854
fragment, or signal overwhelm teams.

204
00:14:01,305 --> 00:14:04,204
So it leads to delays
confusion and higher cost.

205
00:14:05,104 --> 00:14:08,780
So what is the role of
genis and observability?

206
00:14:08,949 --> 00:14:13,779
So today there is a lot of
hype about AI and it definitely

207
00:14:13,779 --> 00:14:15,039
has a role in observability.

208
00:14:15,429 --> 00:14:20,219
So one is credit to
analytics, to forecast issues.

209
00:14:20,269 --> 00:14:22,069
That's more of a machine learning.

210
00:14:22,429 --> 00:14:27,409
So we use machine learning to predict
problems and system failures before they

211
00:14:27,409 --> 00:14:30,379
occur, and enable proactive remediation.

212
00:14:30,879 --> 00:14:35,909
And automated diagnostic
tools suggest root causes.

213
00:14:36,359 --> 00:14:42,179
So we can use the AI powered analysis
of logs, metrics, and traces to

214
00:14:42,179 --> 00:14:47,499
quickly identify root causes of
issues and can help accelerate

215
00:14:48,129 --> 00:14:49,689
troubleshooting and resolution.

216
00:14:50,189 --> 00:14:55,139
And we can also use natural language
processing to simplify inserts.

217
00:14:55,759 --> 00:15:00,169
Allow users to ask questions about
system performance and behavior in plan.

218
00:15:00,859 --> 00:15:04,619
So it'll help us generate tailored
visualizations and reports.

219
00:15:05,119 --> 00:15:08,219
And then smart alert
alerting to reduce noise.

220
00:15:08,219 --> 00:15:11,669
So we use machine learning to
intelligently filter and prioritize

221
00:15:12,119 --> 00:15:18,419
alerts to reduce alert static and ensure
teams focus on most critical issues.

222
00:15:18,959 --> 00:15:23,909
So Gen AI or machine learning when
it comes to observability they

223
00:15:23,909 --> 00:15:29,659
are ready to foresight, accelerate
diagnostics and enabling simpler,

224
00:15:29,719 --> 00:15:32,609
more intuitive access to the insights.

225
00:15:33,299 --> 00:15:37,429
So earlier when we discussed function
with friction, we discussed and

226
00:15:37,429 --> 00:15:42,239
understood how choosing the wrong tool
can impact overall objectives, right?

227
00:15:42,824 --> 00:15:47,534
So here we'll discuss, some of the common
pitfalls and how we can mitigate them.

228
00:15:48,374 --> 00:15:49,604
Siloed tools.

229
00:15:49,954 --> 00:15:55,294
So observability tools that are
not integrated leads to fragmented

230
00:15:55,294 --> 00:15:58,474
data and reduced data visibility.

231
00:15:58,474 --> 00:16:00,194
So it'll cause all fat.

232
00:16:00,694 --> 00:16:05,124
Overwhelming number of alerts, distract
and desensitize teams, and they'll

233
00:16:05,124 --> 00:16:12,284
hinder effective response And reactive
troubleshooting, relying on manual time

234
00:16:12,284 --> 00:16:17,544
consuming process to diagnose and resolve
issues rather than proactive prevention.

235
00:16:17,934 --> 00:16:22,284
And addressing this common pitfalls
upfront ensures observability

236
00:16:22,314 --> 00:16:27,324
and strengthens the operation
without overwhelming teams through

237
00:16:27,324 --> 00:16:32,024
centralized pipelines, automated
alerts, and design time observability

238
00:16:32,834 --> 00:16:34,984
integration coming to best practices.

239
00:16:34,984 --> 00:16:39,175
So it's important to
implement observability early.

240
00:16:39,504 --> 00:16:42,894
Always incorporate observability
capabilities into your architecture

241
00:16:42,894 --> 00:16:47,154
and design process from the start
rather than bolting it later.

242
00:16:47,904 --> 00:16:54,374
So align SLOs and SLIs service
level objectives and service level

243
00:16:54,374 --> 00:16:56,204
indicators to the business goals.

244
00:16:56,624 --> 00:17:01,394
Ensure observability metrics and
targets are closely tied to the KPIs

245
00:17:01,784 --> 00:17:04,004
that drive the organization's success.

246
00:17:04,004 --> 00:17:05,024
It's very important.

247
00:17:05,804 --> 00:17:09,174
And leverage automation wherever
possible, and machine learning.

248
00:17:09,254 --> 00:17:12,074
Automating observability tasks
like a large generation root

249
00:17:12,074 --> 00:17:16,374
cause analysis help optimize and
improve efficiency and accuracy.

250
00:17:16,874 --> 00:17:20,954
And last but not least focus on
continuously improving reviewing

251
00:17:20,954 --> 00:17:22,304
and optimizing the pipelines.

252
00:17:22,814 --> 00:17:27,044
So regularly assessing the
pipelines or tools and processes

253
00:17:27,104 --> 00:17:31,814
to identify areas for improvement
and ensure they remain relevant.

254
00:17:32,684 --> 00:17:38,984
So observability thrives when baked
into the architecture, so aligned to the

255
00:17:38,984 --> 00:17:44,104
business value, consistently refined,
and for efficiency and relevance.

256
00:17:44,604 --> 00:17:48,894
In this slide, we'll talk about real
world use cases, various use cases are

257
00:17:48,894 --> 00:17:54,764
applicable for I'm just discussing a
few of them, which is manufacturing iot.

258
00:17:55,004 --> 00:18:00,154
So help monitor sensor sticker, predict
to maintenance optimized uptime.

259
00:18:00,484 --> 00:18:06,454
So for financial platforms, trace
transaction, direct fraud, and mantra

260
00:18:07,444 --> 00:18:10,204
e-commerce track conversions, right?

261
00:18:10,204 --> 00:18:13,714
So monitor customer journeys,
AB test performance.

262
00:18:14,359 --> 00:18:15,319
Many other things.

263
00:18:15,929 --> 00:18:19,409
Real world example shows how
observability drives operational,

264
00:18:19,409 --> 00:18:24,809
financial, and customer outcomes from
factory floor to the online storefront.

265
00:18:25,309 --> 00:18:31,839
So in summary, observability enables
scalable, resilient, and reliable systems.

266
00:18:31,869 --> 00:18:35,829
It's very crucial for modern
data and cloud native systems.

267
00:18:35,829 --> 00:18:39,459
It'll enable teams to maintain
reliability, performance, and trust.

268
00:18:40,419 --> 00:18:46,094
And so AWS offers powerful suit of
observability tools like CloudWatch,

269
00:18:46,304 --> 00:18:50,659
X-Ray Grafana that provide diverse
per perspectives on system health.

270
00:18:51,159 --> 00:18:56,509
And from a best practice standpoint we
can definitely rely leverage gen ai.

271
00:18:56,984 --> 00:19:00,464
To a strategic advantage by
following observability best

272
00:19:00,464 --> 00:19:02,834
practices and leveraging power of ai.

273
00:19:02,834 --> 00:19:07,714
And machine learning organizations can
bring strategic strategic advantage

274
00:19:07,714 --> 00:19:11,784
through real time insights spread
to analytics and automated response.

275
00:19:12,384 --> 00:19:16,634
So it is very important for
modern cloud native system and

276
00:19:16,634 --> 00:19:20,384
AWS provides a comprehensive
observability tool sets and by.

277
00:19:20,939 --> 00:19:25,739
Combining it with best practices
that latest AI capabilities.

278
00:19:26,639 --> 00:19:28,279
So yeah.

279
00:19:28,779 --> 00:19:33,389
So finally as we conclude, so
observability in AWS it's very

280
00:19:33,489 --> 00:19:37,119
not just AWS but any cloud
offering, it's very important.

281
00:19:37,859 --> 00:19:42,779
It's a very crucial capability for
modern data architectures and solutions.

282
00:19:43,519 --> 00:19:47,189
It enables teams to maintain
reliability, performance, and trust.

283
00:19:47,579 --> 00:19:53,439
And using some of the, approaches,
recommendations, and best practices we

284
00:19:53,439 --> 00:19:58,849
can build scalable and res resilient and
reliable systems that can drive strategic

285
00:19:58,849 --> 00:20:03,919
advantages through real time inserts
prior to analytics and automated response.

286
00:20:04,419 --> 00:20:04,719
Thank you.

