1
00:00:00,500 --> 00:00:01,279
Hello everybody.

2
00:00:01,779 --> 00:00:02,619
This is Sund.

3
00:00:03,119 --> 00:00:06,299
I am working as technical
architect in UBS.

4
00:00:06,799 --> 00:00:12,229
Prior to that, I worked with
Cognizant and I worked with different

5
00:00:12,235 --> 00:00:20,119
clients like Amex X, Broadridge,
like financial organizations and

6
00:00:20,119 --> 00:00:22,759
especially in wealth management.

7
00:00:23,299 --> 00:00:23,899
System.

8
00:00:24,399 --> 00:00:31,449
Okay, so today I'm going to give a
demo on Java script vulnerabilities.

9
00:00:31,950 --> 00:00:33,750
Let's start,

10
00:00:34,250 --> 00:00:35,330
let me share the screen.

11
00:00:35,839 --> 00:00:38,180
So here is my screen.

12
00:00:38,680 --> 00:00:43,230
So securing JavaScript, which means how.

13
00:00:43,730 --> 00:00:50,000
We need to protect our
code from external attacks.

14
00:00:50,600 --> 00:00:59,900
So it may be either front end related
or it may be either from backend related

15
00:01:00,470 --> 00:01:07,929
or it may be either from any other tools
or libraries, any other components that.

16
00:01:08,364 --> 00:01:10,044
Security challenges here.

17
00:01:10,544 --> 00:01:18,209
Okay, so nowadays many people are
using frontend applications as well

18
00:01:18,209 --> 00:01:21,784
as backend server side components.

19
00:01:22,744 --> 00:01:32,439
The attack can come from any point in
the sense like from the front end or.

20
00:01:33,129 --> 00:01:40,570
From backend front end, React,
not backend, like no js.

21
00:01:41,070 --> 00:01:48,480
So there is a lot of opportunity
for the attackers to create a lot of

22
00:01:48,839 --> 00:01:56,695
attacks and vulnerabilities across
our different frameworks across our.

23
00:01:57,450 --> 00:02:06,409
Different APAs and across the
different components that we are using.

24
00:02:06,909 --> 00:02:10,750
So the normal, traditional
security approach.

25
00:02:11,140 --> 00:02:14,895
So they do not address
all the vulnerabilities.

26
00:02:15,255 --> 00:02:22,910
Definitely we need a. Some sort of
patterns, some sort of mechanism to

27
00:02:23,119 --> 00:02:26,379
address all these vulnerable system.

28
00:02:26,529 --> 00:02:27,159
Let us see.

29
00:02:27,659 --> 00:02:32,350
Okay, so we will cover java
script attack landscape.

30
00:02:32,739 --> 00:02:36,950
So which means what are
different ways of threats?

31
00:02:37,745 --> 00:02:41,584
And second vulnerability
management framework.

32
00:02:41,915 --> 00:02:47,585
How we can mitigate those issues frontend.

33
00:02:48,065 --> 00:02:51,234
And third one, frontend security patterns.

34
00:02:51,684 --> 00:02:56,274
Definitely we can protect
our code by following some

35
00:02:56,515 --> 00:02:58,285
patterns like design patterns.

36
00:02:59,155 --> 00:03:02,095
No fourth one, no GS security.

37
00:03:02,524 --> 00:03:05,224
So how we can manage our backend code?

38
00:03:05,989 --> 00:03:08,599
With using some sort of specification.

39
00:03:09,079 --> 00:03:12,679
And fifth one, automation and integration.

40
00:03:13,179 --> 00:03:18,859
Also, automation and integration means
everything is like automated, so it's like

41
00:03:18,859 --> 00:03:21,589
workflow and components are integrated.

42
00:03:22,279 --> 00:03:27,169
So that is process and risk
based patch management.

43
00:03:27,889 --> 00:03:33,529
If there are any issues immediately
identify that and apply some

44
00:03:33,589 --> 00:03:34,879
patches, something like that.

45
00:03:35,379 --> 00:03:35,769
Okay.

46
00:03:36,099 --> 00:03:39,999
As I said, common Java
script attack vectors.

47
00:03:40,499 --> 00:03:44,989
So if you consider Dom based excesses.

48
00:03:45,964 --> 00:03:49,504
Cross site scripting.

49
00:03:50,004 --> 00:04:00,174
So this is one of the major vulnerability
attack that our code base is facing.

50
00:04:00,504 --> 00:04:01,134
What it means.

51
00:04:01,634 --> 00:04:02,839
So it means.

52
00:04:03,339 --> 00:04:09,999
For example in JavaScript, our
frontend code, if we are retrieving

53
00:04:09,999 --> 00:04:18,984
some value from the URL, for example,
a name or designation or anything.

54
00:04:19,979 --> 00:04:20,429
Okay.

55
00:04:20,729 --> 00:04:24,599
And you are including that
as part of inner HTML.

56
00:04:24,659 --> 00:04:31,969
You are making those values into
some document and you are trying

57
00:04:31,969 --> 00:04:34,609
to execute the application.

58
00:04:35,109 --> 00:04:38,529
So this is like not a bad habit of coding.

59
00:04:38,899 --> 00:04:43,429
There is a lot of scope that
external attacks can happen.

60
00:04:43,929 --> 00:04:47,299
So this is one of attack that can happen.

61
00:04:47,689 --> 00:04:51,219
And second thing, prototype pollution.

62
00:04:52,209 --> 00:04:59,619
So prototype pollution means for
example so you are creating a

63
00:04:59,619 --> 00:05:04,149
Java script for example in the
sense window, dark location.

64
00:05:04,649 --> 00:05:12,739
So in that case it is harm to read
those values and definitely, and there

65
00:05:12,739 --> 00:05:18,079
may be attack from external site,
external pupil dependency, confus.

66
00:05:18,579 --> 00:05:24,779
Dependency confusion is like, for example
in our application, lots of components

67
00:05:24,839 --> 00:05:28,529
we are downloading for Maven website.

68
00:05:28,919 --> 00:05:31,709
So lots of components we are downloading.

69
00:05:32,229 --> 00:05:38,619
So attackers want to create a
confusion between the original

70
00:05:38,619 --> 00:05:42,069
component and a harmful component.

71
00:05:42,519 --> 00:05:43,449
So they want to.

72
00:05:43,914 --> 00:05:52,134
Make use of similar name pom xms
components and try to now expose those

73
00:05:52,134 --> 00:05:55,084
components into the public websites.

74
00:05:55,614 --> 00:06:03,424
And in turn people can download that
and try to install and try to put

75
00:06:03,424 --> 00:06:05,799
their components in the application.

76
00:06:06,299 --> 00:06:10,019
So obviously that's a big attack.

77
00:06:10,559 --> 00:06:14,189
And another one is server side injection.

78
00:06:14,729 --> 00:06:20,309
Server side injection is nothing
but the core will execute at.

79
00:06:20,809 --> 00:06:22,129
To interact with the database.

80
00:06:22,849 --> 00:06:25,849
So definitely there is a lot of scope.

81
00:06:26,179 --> 00:06:28,939
If the code is not written
properly, there's a lot of code.

82
00:06:29,149 --> 00:06:33,499
They can manipulate SQL
queries and they can include.

83
00:06:34,399 --> 00:06:36,649
The values, whatever they want.

84
00:06:37,189 --> 00:06:44,259
And even non SQL also, they can
manipulate and they can attack the data.

85
00:06:44,319 --> 00:06:47,709
They can get the data, they
can manipulate the data.

86
00:06:47,709 --> 00:06:49,179
They can delete the data.

87
00:06:49,419 --> 00:06:51,729
So there are lots of possibilities.

88
00:06:51,779 --> 00:06:52,439
Like this.

89
00:06:52,599 --> 00:06:54,729
The externals can attack.

90
00:06:55,229 --> 00:06:57,419
Okay, so now what to do?

91
00:06:57,919 --> 00:06:58,459
We can.

92
00:06:59,354 --> 00:07:02,504
We can get a vulnerability
management framework.

93
00:07:02,934 --> 00:07:09,965
We can use some sort of frameworks good
frameworks where we can it can handle all

94
00:07:10,054 --> 00:07:12,695
these sort of things in appropriate way.

95
00:07:13,205 --> 00:07:13,744
So it.

96
00:07:14,244 --> 00:07:21,444
First it assessment, so it identifies
and quantifies the risk across our

97
00:07:21,924 --> 00:07:25,724
JavaScript stack and prevention.

98
00:07:25,964 --> 00:07:32,084
Im, so it it implements some security
patterns and some controllers, some

99
00:07:32,084 --> 00:07:35,164
security related admin, admin roles.

100
00:07:36,089 --> 00:07:36,929
Something like that.

101
00:07:37,469 --> 00:07:41,279
Detection, so it continuously monitors.

102
00:07:42,014 --> 00:07:43,634
And automated the scanning.

103
00:07:43,634 --> 00:07:48,614
For example, if there is any code which
is vulnerable immediately, it gives alert.

104
00:07:49,214 --> 00:07:54,415
So it continuously monitors and it
gives an alert if there is any issue.

105
00:07:54,744 --> 00:07:59,114
And instant workflow and patch
management, which is in the sensor.

106
00:07:59,145 --> 00:08:04,874
If there is any incident happened
immediately it applies related.

107
00:08:05,219 --> 00:08:05,969
Batch.

108
00:08:06,509 --> 00:08:07,590
Now, let's see.

109
00:08:07,590 --> 00:08:14,580
Quantity to risk assessment for some sort
of depend system, evaluation criteria.

110
00:08:14,909 --> 00:08:16,409
So vulnerability history.

111
00:08:16,729 --> 00:08:20,269
It tracks the fast security
issues and resolution terms.

112
00:08:20,550 --> 00:08:24,890
How many issues are reported what
are the resolution time within

113
00:08:24,890 --> 00:08:27,060
what time it has been resolved.

114
00:08:27,290 --> 00:08:32,420
So it gets the, all the history of that
vulnerabilities, maintenance activity.

115
00:08:32,600 --> 00:08:35,200
So monitor, commit frequency.

116
00:08:35,785 --> 00:08:38,515
Issue response and active maintenance.

117
00:08:38,785 --> 00:08:42,315
So it frequently monitors
what is the code committed?

118
00:08:42,315 --> 00:08:46,435
Who is the code committed and
when it is committed so what

119
00:08:46,435 --> 00:08:47,845
are the impacts of that commit?

120
00:08:48,325 --> 00:08:52,455
So whether it can be a. Removed or not.

121
00:08:53,445 --> 00:08:58,965
So dependency chain chapter
SSS translate to dependencies

122
00:08:58,965 --> 00:09:01,095
and their security posture.

123
00:09:01,595 --> 00:09:06,935
Download metrics, evaluate community
adaption and security levels.

124
00:09:07,435 --> 00:09:12,965
Another one is automate auditing tools
enable consistent data driven security

125
00:09:13,005 --> 00:09:16,125
editions across the JavaScript projects.

126
00:09:16,865 --> 00:09:20,885
Front end sec. Coming to the point of
front end security, client side defense.

127
00:09:21,335 --> 00:09:27,615
So how these are all the points how
to mediate or how to manage those

128
00:09:27,615 --> 00:09:33,015
vulner vulnerabilities, sir? So if you
consider accesses right, cross script.

129
00:09:33,515 --> 00:09:34,625
Cross set scripting.

130
00:09:35,165 --> 00:09:41,415
So these, for example, these
externals can attack by giving

131
00:09:41,655 --> 00:09:44,875
some dummy values or some images.

132
00:09:45,375 --> 00:09:50,565
Or some path to image in the
URLs, so when the code traced

133
00:09:50,565 --> 00:09:52,725
to get that particular value.

134
00:09:52,915 --> 00:09:58,995
The attacker included an
image which is n. Not secure.

135
00:09:59,295 --> 00:10:02,995
And our code tries to get that
image, load, that image, or

136
00:10:02,995 --> 00:10:05,105
it may be something like that.

137
00:10:05,155 --> 00:10:06,715
Any link or something.

138
00:10:06,925 --> 00:10:09,505
Which is obviously it is under attack.

139
00:10:09,835 --> 00:10:13,375
So second one, secure API communication.

140
00:10:13,615 --> 00:10:18,585
So we have to use proper
HTPS implement proper VO RS.

141
00:10:18,655 --> 00:10:24,055
Policies and especially
validate all the data.

142
00:10:24,235 --> 00:10:28,975
So what is that data input, validation,
simple input, validation, what it contains

143
00:10:29,095 --> 00:10:34,535
what are the re required values or
what are the mandatory values that can

144
00:10:34,535 --> 00:10:36,925
contain, you cannot simply pass through.

145
00:10:37,255 --> 00:10:43,745
So definitely how to validate all the data
received from the external source input.

146
00:10:44,165 --> 00:10:46,805
Third one, input sanitization.

147
00:10:47,760 --> 00:10:54,570
Which means before you do document
or using any others so use some

148
00:10:54,810 --> 00:11:00,195
validation libraries spec and use
some specific formats where the user

149
00:11:00,695 --> 00:11:05,340
can give and, and we can validate
the data, especially the fourth one.

150
00:11:05,580 --> 00:11:06,960
Authentication security.

151
00:11:07,110 --> 00:11:08,220
Security token.

152
00:11:08,280 --> 00:11:09,800
As you can use certificates.

153
00:11:10,100 --> 00:11:11,420
You can use tokens.

154
00:11:11,800 --> 00:11:12,160
Okay.

155
00:11:12,340 --> 00:11:17,555
So using that, we can definitely
not secure our website item.

156
00:11:18,055 --> 00:11:19,510
React modern frameworks.

157
00:11:20,190 --> 00:11:25,250
And we need to consider a word
dangerous self inner HTML.

158
00:11:25,730 --> 00:11:26,840
This is very high.

159
00:11:26,850 --> 00:11:27,810
Very important point.

160
00:11:28,400 --> 00:11:31,060
Okay when there is a necessary to use Dom.

161
00:11:31,385 --> 00:11:37,365
Okay, we can use purify or similar any
other libraries which can San sanitize

162
00:11:37,435 --> 00:11:46,225
data before we render to any other
webpages or to backend and validate.

163
00:11:46,535 --> 00:11:51,105
Prototypes are type scripting
to enforce type safety and

164
00:11:51,105 --> 00:11:52,725
prevent unexpected data flow.

165
00:11:53,025 --> 00:11:53,415
Okay.

166
00:11:53,685 --> 00:11:56,625
Carefully manage the data
flow between components.

167
00:11:56,960 --> 00:12:02,770
And validate the data at Bond raise,
sir. Okay, so no GS back in security.

168
00:12:03,130 --> 00:12:04,660
Secure coding practice.

169
00:12:05,110 --> 00:12:10,030
There are lots of things here, so
input, validation, whatever the value

170
00:12:10,030 --> 00:12:16,040
received from your request parameters
or URLs you need to validate and

171
00:12:16,190 --> 00:12:18,340
especially parameters, queries.

172
00:12:18,820 --> 00:12:26,110
They can in query parameter, they can
give some value ease admin through.

173
00:12:26,610 --> 00:12:30,100
Or they can give some account
number, wrong account number.

174
00:12:30,130 --> 00:12:35,040
They can put some account
number to deposit money or to

175
00:12:35,040 --> 00:12:36,480
withdraw or something like that.

176
00:12:36,820 --> 00:12:43,130
They can manipulate the SQL queries and
then trace to execute at server side.

177
00:12:43,520 --> 00:12:48,525
So definitely we need to validate
all the input data that we received.

178
00:12:49,070 --> 00:12:56,360
And proper exception handling especially
without exposing whatever it comes to.

179
00:12:56,360 --> 00:13:01,780
Before exposing, we have to put proper
exception handling, mess message and

180
00:13:01,780 --> 00:13:08,790
secure authentication authorization and
on rate limiting and request throttling.

181
00:13:09,090 --> 00:13:12,600
So runtime production
environment variable, securely.

182
00:13:13,100 --> 00:13:15,350
We can use different
environment variables.

183
00:13:15,530 --> 00:13:18,720
So we have to use all
those in a secure way.

184
00:13:18,960 --> 00:13:19,320
Okay.

185
00:13:19,560 --> 00:13:20,940
And principle of list, er.

186
00:13:21,780 --> 00:13:22,230
Okay.

187
00:13:22,470 --> 00:13:27,940
And if there is a need,
then only give the roles and

188
00:13:27,940 --> 00:13:30,190
responsibilities roles in the sense.

189
00:13:30,220 --> 00:13:30,490
Okay.

190
00:13:30,790 --> 00:13:36,510
So secure dependency management and
regular security areas with NPM Ator.

191
00:13:37,010 --> 00:13:40,340
So container security for
JavaScript application, minimal

192
00:13:40,340 --> 00:13:46,460
base images use airplane or on
images to reduce attack surfaces

193
00:13:46,460 --> 00:13:48,470
and eliminate unnecessary packages.

194
00:13:48,940 --> 00:13:53,450
Non user run node js process
as non-privileged users within

195
00:13:53,450 --> 00:13:55,850
containers to limit potential damage.

196
00:13:56,350 --> 00:13:59,170
Integrate vulnerability
scanning into CACD pipelines.

197
00:13:59,590 --> 00:14:01,900
To catch issues before deployment even.

198
00:14:01,950 --> 00:14:07,230
CICD pipelines is a major workflow
management system, so definitely we

199
00:14:07,230 --> 00:14:13,200
can automate all the code to avoid
any issues before the deployment and

200
00:14:13,700 --> 00:14:15,860
never break the secret symptom images.

201
00:14:16,100 --> 00:14:19,430
Use orchestration platform
secret management instead.

202
00:14:19,610 --> 00:14:22,220
Okay, so automation
throughout the development.

203
00:14:22,780 --> 00:14:26,770
Pre-committed in the sense before
we commit the code into Git

204
00:14:26,770 --> 00:14:28,060
report or whatever it may be.

205
00:14:28,270 --> 00:14:34,510
Scan for secrets, you have to make
sure that there are no credentials

206
00:14:34,990 --> 00:14:39,520
or PA passports related issue
issues, vulnerability issues

207
00:14:39,610 --> 00:14:41,920
before code goes to repository.

208
00:14:42,730 --> 00:14:43,000
Okay.

209
00:14:43,030 --> 00:14:44,050
And pull the request.

210
00:14:44,530 --> 00:14:51,130
Automated dependency audits the security
and test execution for every submission.

211
00:14:51,630 --> 00:14:55,320
And C-A-D-C-D pipelines integrated
into build and deployment process,

212
00:14:55,530 --> 00:14:59,330
and then continuation monitoring,
runtime, application build log

213
00:14:59,330 --> 00:15:02,570
analysis and deployment to production.

214
00:15:03,070 --> 00:15:06,970
So risk patch, risk-based
patch management, mattresses.

215
00:15:07,000 --> 00:15:08,460
These are many things here.

216
00:15:08,820 --> 00:15:15,090
Okay, so critical zero day, immediate
patching within 24 hours active.

217
00:15:15,210 --> 00:15:20,700
Two, exploration in the wild, which means
if there are any instance or anything

218
00:15:20,940 --> 00:15:26,910
immediate, immediately we can apply patch
so that it can come to normal position.

219
00:15:27,330 --> 00:15:29,070
How high severe.

220
00:15:29,430 --> 00:15:32,340
Severity, so patch within seven days.

221
00:15:32,370 --> 00:15:37,570
Non exploit, high severity score
effects production, medium risk should

222
00:15:37,570 --> 00:15:42,180
within 30 days low prior, include a
run term maintenance, minimal impact

223
00:15:42,180 --> 00:15:46,705
of the required local access, so
types of scripts, role in security.

224
00:15:47,205 --> 00:15:52,515
Type safety prevents common
vulnerabilities, which means static typing

225
00:15:52,515 --> 00:15:58,335
ca. Caches type country issues prevent
prototype pollution through sticker

226
00:15:58,335 --> 00:16:04,945
objects handling and enforce interface
contact atel time enhanced code quality.

227
00:16:05,375 --> 00:16:10,195
There are lots of sonar, for
example, sonar, sonar cube.

228
00:16:10,695 --> 00:16:10,965
Okay.

229
00:16:10,965 --> 00:16:16,855
Sonar cube, it gives all the correlated
issues before we commit the code.

230
00:16:17,065 --> 00:16:21,845
So if it passes, then only we have
to put a condition in the pipeline

231
00:16:22,035 --> 00:16:27,515
stop deployment or stop proceeding
to commit if it identifies any

232
00:16:28,225 --> 00:16:29,815
issues, vulnerability issues.

233
00:16:30,315 --> 00:16:31,575
Okay, not a silver bullet.

234
00:16:31,575 --> 00:16:36,435
Light TypeScript does not replace
random validation, secure testing,

235
00:16:36,435 --> 00:16:38,355
or secure coding practices.

236
00:16:38,745 --> 00:16:41,625
It's one layer of the
defense in depth strategy.

237
00:16:42,375 --> 00:16:45,855
Okay, so these are the
points that we cover.

238
00:16:46,065 --> 00:16:47,625
Adopt a framework mindset.

239
00:16:48,175 --> 00:16:48,565
Okay.

240
00:16:48,765 --> 00:16:50,955
Secure is NAIA checkbox.

241
00:16:50,985 --> 00:16:55,605
It's a systematic approach
spanning assessment, prevention,

242
00:16:55,605 --> 00:16:57,375
detection, and response.

243
00:16:57,915 --> 00:16:59,475
Automate everything possible.

244
00:16:59,565 --> 00:17:00,105
Yes.

245
00:17:00,385 --> 00:17:03,765
Avoid manual processor, for example.

246
00:17:04,265 --> 00:17:07,395
Do not use any manual created passwords.

247
00:17:07,895 --> 00:17:08,815
Automate it.

248
00:17:08,905 --> 00:17:11,120
For example, if you consider cloud it.

249
00:17:11,690 --> 00:17:13,670
Automatically creates the password.

250
00:17:13,670 --> 00:17:14,805
No knows it.

251
00:17:15,350 --> 00:17:18,950
It automatically creates,
it automatically works.

252
00:17:19,220 --> 00:17:19,610
That's it.

253
00:17:20,390 --> 00:17:22,375
Nobody knows the password.

254
00:17:23,190 --> 00:17:23,550
Okay.

255
00:17:23,620 --> 00:17:27,750
And especially nowadays even that
is go, that is also going away.

256
00:17:27,990 --> 00:17:32,350
There's no password just based on
the user entitlements user roles.

257
00:17:32,720 --> 00:17:35,290
We can go for the website browsing.

258
00:17:35,905 --> 00:17:40,975
Prior that intelligently use risk-based
patch management to focus efforts where

259
00:17:41,335 --> 00:17:43,555
they matter most without security.

260
00:17:43,975 --> 00:17:47,785
Think full stack JavaScripts
security requests protecting

261
00:17:47,785 --> 00:17:49,765
both front end and backend.

262
00:17:50,125 --> 00:17:52,525
It's not know only front end,
it's not like only background

263
00:17:52,555 --> 00:17:54,145
from end-to-end application.

264
00:17:54,485 --> 00:17:56,085
And contrast the each thing.

265
00:17:56,585 --> 00:17:57,660
Thank you very much.

