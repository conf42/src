1
00:00:00,350 --> 00:00:01,000
Welcome everyone.

2
00:00:01,360 --> 00:00:05,410
Today, I wanted to take you on a
journey into the art of building long

3
00:00:05,420 --> 00:00:10,350
management stacking systems that combine
modularity, scalability, and simplicity.

4
00:00:10,850 --> 00:00:14,400
I have learned that the most
resilient systems often operate

5
00:00:14,409 --> 00:00:18,029
invisibly, allowing businesses to
thrive without constant firefighting.

6
00:00:18,559 --> 00:00:20,519
Let's explore how to achieve this harmony.

7
00:00:21,019 --> 00:00:23,329
Back end architectures
have come a long way.

8
00:00:23,969 --> 00:00:27,569
We started with simple, monolithic
systems that were easy to

9
00:00:27,569 --> 00:00:29,189
understand but hard to scale.

10
00:00:29,929 --> 00:00:34,069
Today, we work with cloud native,
distributed systems that serve

11
00:00:34,349 --> 00:00:35,609
global users in real time.

12
00:00:36,329 --> 00:00:41,269
However, this complexity often leads to
systems requiring constant maintenance.

13
00:00:42,049 --> 00:00:45,229
How do we build systems that
scale without becoming a burden?

14
00:00:45,729 --> 00:00:47,009
Modularity is the key.

15
00:00:47,419 --> 00:00:51,529
Microservices allow teams to build,
deploy, and scale independently.

16
00:00:52,129 --> 00:00:55,949
However, the goal is not
microservices for their own sake.

17
00:00:56,269 --> 00:00:58,079
Design around your business dominance.

18
00:00:58,609 --> 00:01:01,879
If your application doesn't need
microservices, don't force it.

19
00:01:02,379 --> 00:01:04,709
Complexity can grow fast
if we are not careful.

20
00:01:05,209 --> 00:01:10,269
Cloud providers offer managed services
that handle infrastructure concerns

21
00:01:10,339 --> 00:01:12,669
like scaling, patching, and backups.

22
00:01:13,409 --> 00:01:17,509
Serverless computing takes this further
by abstracting servers altogether.

23
00:01:18,389 --> 00:01:22,026
This allows developers to
focus solely on business logic.

24
00:01:22,026 --> 00:01:24,869
Yet a serverless isn't a silver bullet.

25
00:01:25,469 --> 00:01:28,239
Hold starts and time
limits can be constraints.

26
00:01:28,649 --> 00:01:31,089
Often a hybrid approach works best.

27
00:01:31,589 --> 00:01:35,379
In modern software design, event
driven architectures have become a

28
00:01:35,379 --> 00:01:40,309
critical approach to building scalable,
responsive, and resilient systems.

29
00:01:40,309 --> 00:01:45,709
Unlike traditional request response
architectures, EDA enables services

30
00:01:45,709 --> 00:01:50,509
to communicate asynchronously,
ensuring flexibility and efficiency

31
00:01:50,629 --> 00:01:52,519
in handling unpredictable workloads.

32
00:01:53,019 --> 00:01:56,519
One of the most significant advantages
of event driven architectures

33
00:01:56,639 --> 00:01:58,669
is asynchronous communication.

34
00:01:59,079 --> 00:02:02,859
Instead of directly invoking
other services and waiting for

35
00:02:02,859 --> 00:02:07,999
responses, the system generates and
publishes events that interested

36
00:02:08,039 --> 00:02:09,979
consumers can process independently.

37
00:02:10,974 --> 00:02:15,844
This decoupling allows services to
operate at their own pace without being

38
00:02:15,854 --> 00:02:20,784
blocked by slower components, leading to
improved responsiveness and reliability.

39
00:02:21,284 --> 00:02:25,504
To facilitate this asynchronous
event flow, systems use event

40
00:02:25,504 --> 00:02:27,674
blockers like Apache Kafka.

41
00:02:28,604 --> 00:02:30,384
AWS EventBridge and RapidMQ.

42
00:02:30,864 --> 00:02:37,194
These tools act as message intermediaries,
ensuring that producers and consumers

43
00:02:37,274 --> 00:02:42,204
remain loosely coupled, which means that
the services do not need to be aware of

44
00:02:42,684 --> 00:02:48,364
each other's existence, and the consumers
can process events at their own speed.

45
00:02:48,684 --> 00:02:53,984
Without overwhelming upstream services,
systems can evolve independently,

46
00:02:53,994 --> 00:02:55,604
making them more maintainable.

47
00:02:56,004 --> 00:03:01,604
For example, in an e commerce platform, an
order placement event can trigger multiple

48
00:03:02,044 --> 00:03:06,934
downstream processes, like payment
processing, inventory update, shipping

49
00:03:06,964 --> 00:03:13,094
initiation, customer notification,
etc. And each of these events listens

50
00:03:13,454 --> 00:03:16,044
for the event and acts independently.

51
00:03:17,004 --> 00:03:19,954
Improving scalability and fault isolation.

52
00:03:20,544 --> 00:03:23,434
One of the biggest challenges
in the modern architectures

53
00:03:23,494 --> 00:03:25,714
is high load scenarios.

54
00:03:26,584 --> 00:03:30,594
Event driven architectures naturally
support backpressure, which is a

55
00:03:30,594 --> 00:03:35,894
mechanism that prevents the system from
being overwhelmed by incoming requests.

56
00:03:36,324 --> 00:03:40,264
This is crucial for maintaining
system stability under spike loads.

57
00:03:40,764 --> 00:03:44,984
Kafka and Sibila systems provide
mechanisms like consumer lag

58
00:03:44,994 --> 00:03:49,404
monitoring and rate limiting,
ensuring services do not process

59
00:03:49,444 --> 00:03:51,494
events faster than they can handle.

60
00:03:51,994 --> 00:03:57,094
Since consumers process messages
independently, they can scale services

61
00:03:57,144 --> 00:04:00,204
horizontally by adding more consumers.

62
00:04:01,124 --> 00:04:03,144
to distribute the load dynamically.

63
00:04:03,194 --> 00:04:08,324
If a sudden surge in the traffic
occurs, such as a flash sale on

64
00:04:08,324 --> 00:04:13,014
an e commerce website, additional
consumers can be spun up automatically

65
00:04:13,064 --> 00:04:15,324
to handle the increased event flow.

66
00:04:15,824 --> 00:04:19,604
In today's digital landscape,
the scalability is not just

67
00:04:19,804 --> 00:04:20,974
a feature, it's a necessity.

68
00:04:21,734 --> 00:04:26,314
The application must handle
unpredictable traffic, growing user

69
00:04:26,389 --> 00:04:30,899
basis and fluctuating workloads by
maintaining performance and reliability.

70
00:04:31,399 --> 00:04:36,279
The scalability ensures that a
system can efficiently grow or

71
00:04:36,279 --> 00:04:40,839
shrink in response to demand without
compromising speed or availability.

72
00:04:41,339 --> 00:04:46,629
A key principle of scalable architecture
is designing stateless applications.

73
00:04:47,584 --> 00:04:52,114
So in a stateless system, each request
is processed independently without

74
00:04:52,254 --> 00:04:53,954
relying on stored session data.

75
00:04:54,764 --> 00:05:00,464
Any instance of the application
can handle any request and scaling

76
00:05:00,574 --> 00:05:05,464
horizontally, which means adding more
instances, is straightforward as there

77
00:05:05,464 --> 00:05:08,064
is no dependency on local state storage.

78
00:05:08,564 --> 00:05:13,554
For example, in a microservices based
e commerce platform, the stateless

79
00:05:14,074 --> 00:05:18,594
services like authentication, order
processing, and inventory management can

80
00:05:18,594 --> 00:05:20,924
be deployed across multiple instances.

81
00:05:21,474 --> 00:05:26,084
Since, they do not store session specific
data, they can be dynamically scaled

82
00:05:26,424 --> 00:05:28,684
up or down based on traffic volume.

83
00:05:29,184 --> 00:05:30,834
Manage user sessions.

84
00:05:30,894 --> 00:05:35,694
In a stateless architecture, the
developers use external storage solutions

85
00:05:35,694 --> 00:05:42,104
such as, or for session cing, database
backend storage for persistent user,

86
00:05:42,584 --> 00:05:46,184
and jwt, which means the J to for.

87
00:05:46,320 --> 00:05:49,709
or stateless authentication,
where the session data is

88
00:05:49,709 --> 00:05:51,649
embedded in the token itself.

89
00:05:52,149 --> 00:05:55,979
By ensuring that the applications
remain stateless, we eliminate

90
00:05:56,159 --> 00:05:59,199
bottlenecks and make scaling seamless.

91
00:05:59,699 --> 00:06:04,449
As traffic increases, distributing
incoming requests efficiently across

92
00:06:04,449 --> 00:06:06,249
multiple instances is crucial.

93
00:06:06,749 --> 00:06:10,879
Load balancers act as traffic
directors, ensuring that no

94
00:06:10,969 --> 00:06:12,199
single server is overwhelmed.

95
00:06:12,699 --> 00:06:16,959
There are different types of load
balancing strategies, which include round

96
00:06:16,969 --> 00:06:22,569
robin in which each request is distributed
sequentially to the available servers.

97
00:06:23,469 --> 00:06:27,719
The least connections in which the
requests are routed to server with

98
00:06:27,909 --> 00:06:33,175
fewer active connections and weighted
load balancing in which the servers

99
00:06:33,175 --> 00:06:38,065
are assigned different weights based
on their capacity directing more

100
00:06:38,065 --> 00:06:40,509
traffic to high performing instances.

101
00:06:40,510 --> 00:06:47,429
The popular load balancers include
AWS Elastic Load Balancer for

102
00:06:47,429 --> 00:06:52,539
the cloud environments, Nginx for
premises deployments and Cloudflare

103
00:06:52,539 --> 00:06:54,739
for global traffic distribution.

104
00:06:55,319 --> 00:07:01,664
The load balancing enhances the fault
tolerance as failed instances can be

105
00:07:01,664 --> 00:07:06,814
automatically removed from the pool
while new instances take over seamlessly.

106
00:07:07,314 --> 00:07:11,574
Even with load balancing, a static
infrastructure is insufficient

107
00:07:11,584 --> 00:07:13,714
for handling spikes in demand.

108
00:07:14,214 --> 00:07:17,944
The auto scaling allows systems to
dynamically adjust computing resources

109
00:07:17,974 --> 00:07:20,484
based on real time traffic patterns.

110
00:07:21,004 --> 00:07:26,554
The auto scaling groups monitor
key performance metrics such as CPU

111
00:07:26,554 --> 00:07:31,074
utilization, memory usage, network
traffic, and request per second.

112
00:07:31,574 --> 00:07:35,594
When the threshold are
exceeded, additional instances

113
00:07:35,644 --> 00:07:36,584
are spun up automatically.

114
00:07:37,524 --> 00:07:41,554
On the other hand, during low
traffic periods, excess resources

115
00:07:41,844 --> 00:07:44,234
are deallocated to optimize cost.

116
00:07:44,734 --> 00:07:49,304
For example, an online streaming
service like Netflix experiences

117
00:07:49,434 --> 00:07:50,654
peak loads in the evening.

118
00:07:51,574 --> 00:07:57,294
Using AWS Auto Scaling, they can deploy
more instances in real time and scale

119
00:07:57,354 --> 00:07:59,534
down overnight when the demand decreases.

120
00:08:00,359 --> 00:08:05,869
Autoscaling is most commonly used with
cloud native services like AWS Autoscaling

121
00:08:05,869 --> 00:08:08,279
Groups and Google Cloud Instance Group.

122
00:08:08,779 --> 00:08:14,249
By integrating autoscaling, businesses
reduce operational costs while ensuring

123
00:08:14,319 --> 00:08:16,399
high availability and optimal performance.

124
00:08:16,899 --> 00:08:21,299
Observability ensures system reliability
by providing deep insights into

125
00:08:21,339 --> 00:08:25,999
application performance and behavior
through logs, matrices, and traces.

126
00:08:26,919 --> 00:08:33,729
The tools like ELK Stack, AWS Cloud Watch
help us to capture and analyze logs and

127
00:08:33,729 --> 00:08:38,089
system health in real time and thereby
reducing the troubleshooting time.

128
00:08:38,639 --> 00:08:42,419
The distributed tracing with open
telemetry allows developers to

129
00:08:42,479 --> 00:08:44,769
track requests across microservices.

130
00:08:44,929 --> 00:08:47,389
pinpointing bottlenecks efficiently.

131
00:08:47,889 --> 00:08:52,959
The smart alerting systems like PagerDuty
can notify teams about anomalies before

132
00:08:53,269 --> 00:08:55,349
they escalate into critical failures.

133
00:08:56,269 --> 00:09:01,379
By integrating observability into your
architecture, you can proactively detect,

134
00:09:01,449 --> 00:09:06,289
diagnose, and resolve issues, minimizing
downtime and enhancing user experience.

135
00:09:06,789 --> 00:09:10,299
Avoiding common pitfalls in software
design ensures maintainability

136
00:09:11,059 --> 00:09:12,119
and long term success.

137
00:09:12,979 --> 00:09:17,539
Overengineering leads to unnecessary
complexity, making systems harder

138
00:09:17,539 --> 00:09:19,149
to debug, scale, and maintain.

139
00:09:19,959 --> 00:09:22,929
Therefore, simplicity should
be always prioritized.

140
00:09:23,849 --> 00:09:27,469
ignoring legacy systems can
create integration roadblocks.

141
00:09:27,819 --> 00:09:31,639
Instead, adopt a gradual migration
strategy or, wrap them with

142
00:09:32,069 --> 00:09:33,639
APIs to extend their usability.

143
00:09:34,139 --> 00:09:38,299
lack of documentation causes
confusion and slows down development.

144
00:09:38,709 --> 00:09:43,909
So clear up to date documentation ensures
smooth onboarding and knowledge transfer.

145
00:09:44,299 --> 00:09:46,029
By focusing on practicality.

146
00:09:46,549 --> 00:09:49,209
seamless integration and
thorough documentation.

147
00:09:49,689 --> 00:09:52,749
Teams can build efficient
and sustainable systems.

148
00:09:53,249 --> 00:09:56,479
Scalability starts with choosing the
right database for your workload.

149
00:09:57,399 --> 00:10:03,039
NoSQL databases like MongoDB and
Cassandra excel at handling large scale

150
00:10:03,599 --> 00:10:06,029
distributed data with high write output.

151
00:10:06,559 --> 00:10:10,549
The relational databases such as
PostgreSQL, now enhanced with JSON

152
00:10:11,299 --> 00:10:15,559
support, Provide a structured query
while allowing semi structured

153
00:10:15,599 --> 00:10:20,139
flexibility, making them a hybrid
solution for evolving applications.

154
00:10:20,949 --> 00:10:26,059
Blindly adopting a database trend can
lead to inefficiencies, so it's crucial to

155
00:10:26,059 --> 00:10:31,379
evaluate data consistency, query patterns,
and scaling needs before making a choice.

156
00:10:31,584 --> 00:10:37,124
A well planned database strategy ensures
optimal performance, maintainability, and

157
00:10:37,164 --> 00:10:39,314
cost effectiveness as your system grows.

158
00:10:39,814 --> 00:10:44,234
Building adaptable systems ensures
long term stability and smooth

159
00:10:44,624 --> 00:10:46,514
evolution as requirements change.

160
00:10:46,944 --> 00:10:51,724
Feature flags enable controlled
rollouts and instant rollbacks,

161
00:10:51,724 --> 00:10:56,774
allowing teams to test new
functionality without disrupting users.

162
00:10:56,794 --> 00:11:02,574
API versioning and continuous refactoring
prevent breaking changes and keep

163
00:11:02,574 --> 00:11:06,144
the codebase maintainable, reducing
technical depth and ensuring seamless

164
00:11:06,574 --> 00:11:08,594
integration with future enhancements.

165
00:11:09,094 --> 00:11:13,234
Invisible infrastructure means a
system that runs smoothly without

166
00:11:13,234 --> 00:11:17,444
drawing attention, allowing both
users and developers to focus on

167
00:11:17,604 --> 00:11:19,344
functionality rather than maintenance.

168
00:11:19,844 --> 00:11:24,084
Modularity ensures that components are
loosely coupled and easily replaceable,

169
00:11:24,614 --> 00:11:27,174
making scaling and updates seamless.

170
00:11:28,094 --> 00:11:32,384
Automation eliminates manual
interventions, enabling self healing

171
00:11:32,384 --> 00:11:36,804
systems, efficient deployments,
and reduced operational overhead.

172
00:11:37,404 --> 00:11:41,314
By prioritizing simplicity, teams
can build resilient, scalable

173
00:11:42,064 --> 00:11:47,564
architectures that enhance agility and
innovation while minimizing complexity.

174
00:11:48,379 --> 00:11:52,689
At its core, technology exists
to drive business value, not just

175
00:11:52,689 --> 00:11:54,089
to implement the latest trends.

176
00:11:54,539 --> 00:11:59,179
The true measure of success lies in
building resilient, scalable systems

177
00:11:59,379 --> 00:12:03,819
that support long term growth while
minimizing maintenance overhead.

178
00:12:04,614 --> 00:12:08,864
By focusing on stability,
adaptability, and efficiency, we

179
00:12:08,864 --> 00:12:13,444
ensure that architecture remains
an enabler for innovation rather

180
00:12:13,444 --> 00:12:15,298
than a source of complexity.

181
00:12:15,298 --> 00:12:19,534
A well designed system doesn't
just keep up with the change, it

182
00:12:19,604 --> 00:12:23,644
also anticipates it, allowing the
businesses to evolve with confidence.

183
00:12:24,144 --> 00:12:26,514
Thank you all for your
time and attention today.

184
00:12:26,884 --> 00:12:30,284
I hope you found valuable
insights that you can apply to

185
00:12:30,284 --> 00:12:31,994
your own backend architectures.

186
00:12:32,454 --> 00:12:35,754
And if you'd like to continue
the conversation, feel free to

187
00:12:35,754 --> 00:12:37,114
connect with me on LinkedIn.

188
00:12:37,584 --> 00:12:40,264
Let's keep learning and
building great systems together.

