1
00:00:00,230 --> 00:00:04,130
Hello, I'm Samir Cario, Developer Advocate
at Gatling, and today we will see how to

2
00:00:04,130 --> 00:00:08,240
maximize optimization of your application
with load testing thanks to Gatling.

3
00:00:09,070 --> 00:00:10,850
So first, why we need a load testing?

4
00:00:10,979 --> 00:00:15,799
So right now we have BigFirm, which was
down because of some events, for example,

5
00:00:15,799 --> 00:00:16,889
I've tried to be turned up in the area.

6
00:00:17,130 --> 00:00:23,270
Microsoft Search, also Ticketmaster,
which is a lot of times down

7
00:00:23,280 --> 00:00:27,699
because of big ticket sales, like
Wazis or Taylor Swift, for example.

8
00:00:27,700 --> 00:00:29,940
And also, if you have an e
commerce website and you launch

9
00:00:29,990 --> 00:00:34,109
a new project, for example, a
new iPhone, Apple Ninja was down.

10
00:00:34,609 --> 00:00:38,679
Also, workflow testing is important,
because thanks to two studies, we

11
00:00:38,679 --> 00:00:41,143
see that the highest conversion
rate in e commerce occurs on a page

12
00:00:41,143 --> 00:00:43,430
with a test between 0 and 2 seconds.

13
00:00:43,440 --> 00:00:46,390
Because The thing is right now
we have a lot of competitors

14
00:00:46,390 --> 00:00:47,670
in the e commerce sector.

15
00:00:48,170 --> 00:00:53,140
For example, i'm on amazon I will not wait
for the page to load like five seconds

16
00:00:53,310 --> 00:00:57,690
I will just go to ebay or aliexpress And
also the bounce probability increased

17
00:00:57,690 --> 00:01:01,369
by 32 percent with page load time
increased from one to three seconds So

18
00:01:01,389 --> 00:01:05,840
for example, if you want to keep your
user your web page Your website and

19
00:01:05,840 --> 00:01:07,810
webpage need to be pretty fast to load.

20
00:01:08,310 --> 00:01:09,340
So what is the testing?

21
00:01:09,360 --> 00:01:11,380
So typically this was in france.

22
00:01:11,490 --> 00:01:16,570
Yes, i'm french You I don't know if you
hear by my accent, but this is our train.

23
00:01:16,970 --> 00:01:19,590
A lot of time, it's what we experience.

24
00:01:19,990 --> 00:01:23,360
And it's an analogy between
load testing and the real life.

25
00:01:23,360 --> 00:01:26,460
Because load testing is typically,
you will send a lot of users and

26
00:01:26,460 --> 00:01:28,889
see when the application will crash.

27
00:01:29,389 --> 00:01:30,349
So what is load testing?

28
00:01:30,379 --> 00:01:34,499
So load testing is part of non trivial
testing and performance testing.

29
00:01:34,579 --> 00:01:37,009
And inside of it, you have two branches.

30
00:01:37,129 --> 00:01:39,519
You have weight performance
and you have load testing.

31
00:01:39,589 --> 00:01:43,179
Load testing is typically We
monitor when you have between

32
00:01:43,409 --> 00:01:45,099
the backend and the computer.

33
00:01:45,369 --> 00:01:46,939
It's only the network request.

34
00:01:47,789 --> 00:01:50,689
And after you have the monitoring
part, Between data trace,

35
00:01:50,709 --> 00:01:52,599
data dog, or other APM tool.

36
00:01:53,529 --> 00:01:56,269
So first, you have a multiple
way of doing load test.

37
00:01:56,989 --> 00:01:58,609
The first one is capacity test.

38
00:01:58,989 --> 00:02:01,439
It's typically when you go, have 5 users.

39
00:02:01,839 --> 00:02:04,529
You add 5 users every
10 seconds, for example.

40
00:02:04,849 --> 00:02:05,699
It's permitted to you.

41
00:02:06,199 --> 00:02:10,179
See where your application breaking
point is and the maximum capacity.

42
00:02:10,979 --> 00:02:12,179
After that you have stress test.

43
00:02:12,469 --> 00:02:15,499
So stress test is you would say, I
don't know, for example, you pass on

44
00:02:15,519 --> 00:02:20,829
TV, you would send 1 million user at
one time, and you will see if you can

45
00:02:20,869 --> 00:02:25,539
handle this traffic and success is a
capacity test, but at a constant rate.

46
00:02:25,799 --> 00:02:30,369
And it's for me to see if you
have a memory leak or some issue

47
00:02:30,529 --> 00:02:31,699
when you have a lot of user.

48
00:02:32,044 --> 00:02:32,804
In the long time.

49
00:02:33,304 --> 00:02:35,304
So now I will do demo time.

50
00:02:35,334 --> 00:02:37,674
I hope that anything will break.

51
00:02:38,174 --> 00:02:40,424
So I have a small, react API.

52
00:02:40,454 --> 00:02:44,764
So this title is in French, but
it's typically the user interface.

53
00:02:44,874 --> 00:02:49,294
I can add a new user called, for
example, Samir called Conf42.

54
00:02:49,794 --> 00:02:52,214
I can delete it, which is easy.

55
00:02:52,214 --> 00:02:56,044
I can edit, not on this page, but
on the API, I can do the edit.

56
00:02:56,544 --> 00:02:57,394
And now I will show you.

57
00:02:57,939 --> 00:02:58,889
The gatling script.

58
00:02:59,389 --> 00:03:03,920
So typically is some, JavaScript,
because we are SDK in JavaScript,

59
00:03:03,920 --> 00:03:05,530
Java, and other language.

60
00:03:05,830 --> 00:03:11,070
But right now, this is
typically JavaScript code.

61
00:03:11,250 --> 00:03:15,620
So what we do is import all the library
from Gatling Core and Gatling HTTP.

62
00:03:16,060 --> 00:03:23,590
We create a simulation and here it's like
a simulation is typically the recipe of

63
00:03:23,590 --> 00:03:28,340
a dishes is what step Gatling will do
in order to load test your application.

64
00:03:28,920 --> 00:03:33,427
So first Gatling will connect
to the, sorry, to my API.

65
00:03:33,427 --> 00:03:39,629
So localhost 5, 000 slash API with a
good as our user agent and accepted us

66
00:03:40,129 --> 00:03:45,789
here, it will check the endpoints slash
users and check if everything is good.

67
00:03:45,819 --> 00:03:50,869
So if statues is 200 after that,
we will create a new users.

68
00:03:50,909 --> 00:03:55,919
So thanks to post, we will send a
JSON file to say okay, it's the name

69
00:03:55,969 --> 00:03:59,039
of the new user will be a random UID.

70
00:03:59,959 --> 00:04:01,959
And we check if all was good.

71
00:04:01,999 --> 00:04:04,459
So 201, we get.

72
00:04:04,959 --> 00:04:10,499
And here's the exciting part because
you can, each user you will send to your

73
00:04:10,509 --> 00:04:12,589
website, we have an independent session.

74
00:04:12,909 --> 00:04:15,019
So in this session, you
can set a lot of things.

75
00:04:15,029 --> 00:04:18,999
For example, me, I set the user
ID and the username that I can use

76
00:04:19,079 --> 00:04:21,489
after in my session, in my script.

77
00:04:21,489 --> 00:04:25,779
So after that, I just get
the information of this user.

78
00:04:25,789 --> 00:04:30,949
So thanks to user ID that I set into
my session, I check if it's a name,

79
00:04:31,369 --> 00:04:33,869
same username, and I check the status.

80
00:04:34,669 --> 00:04:35,964
I do the same thing with edit.

81
00:04:36,864 --> 00:04:39,224
And I delete the user
and I check the thing.

82
00:04:39,784 --> 00:04:40,954
Here, I create my scenario.

83
00:04:41,034 --> 00:04:44,894
I say that my scenario first will
get the user, after add the user,

84
00:04:44,934 --> 00:04:47,316
get the user, edit and delete.

85
00:04:47,316 --> 00:04:51,624
And here, the setup permits
you to do multiple things.

86
00:04:51,624 --> 00:04:56,304
First, I didn't do this on my
simulation, but you can do a session.

87
00:04:56,714 --> 00:05:00,424
You can say that I want my
simulation to have less than 20

88
00:05:00,424 --> 00:05:01,894
percent of error, for example.

89
00:05:02,604 --> 00:05:06,684
Or you have each request,
I want 10 percent of error.

90
00:05:06,684 --> 00:05:09,834
And You can also say how
you want to inject the user.

91
00:05:09,894 --> 00:05:14,364
So for example, on my simulation, I
would say, so no user for one minute.

92
00:05:14,554 --> 00:05:17,604
After that, I send a
lot of user at one time.

93
00:05:18,194 --> 00:05:20,554
So I wait, I do a capacity test.

94
00:05:20,804 --> 00:05:22,374
I wait and I do a sock test.

95
00:05:22,874 --> 00:05:26,954
So now in order to launch a simulation,
you just need to do NPX run Gatling.

96
00:05:27,454 --> 00:05:27,814
Yes.

97
00:05:27,814 --> 00:05:28,534
Sorry.

98
00:05:28,534 --> 00:05:33,374
I was, yeah, I was not in
the good, folder or NPM.

99
00:05:33,874 --> 00:05:33,934
oh.

100
00:05:33,934 --> 00:05:34,054
No.

101
00:05:34,054 --> 00:05:35,194
Was it a good one?

102
00:05:35,694 --> 00:05:37,074
NPX Gatling Run.

103
00:05:37,074 --> 00:05:37,314
Sorry.

104
00:05:37,814 --> 00:05:41,344
So now, this value be converted
thanks to G Gravity end, and

105
00:05:41,614 --> 00:05:42,754
the simulation is running.

106
00:05:42,964 --> 00:05:46,174
I will not wait for this simulation to
finish because it'll take three minutes.

107
00:05:46,204 --> 00:05:48,384
So I already have the file, the.

108
00:05:48,884 --> 00:05:52,294
So here it's what you will have
after the simulation is finished.

109
00:05:52,794 --> 00:05:53,894
Sorry, I will just stop.

110
00:05:54,394 --> 00:05:58,254
So typically, you have a big
summary of the simulation.

111
00:05:58,644 --> 00:06:02,044
For example, I see that some requests
fail, some requests are pretty good.

112
00:06:02,354 --> 00:06:04,014
Also, I have my gatling version.

113
00:06:04,514 --> 00:06:06,804
And also, I have a lot of information.

114
00:06:07,134 --> 00:06:11,734
I can see the minimum of response
time, the percentile of response

115
00:06:11,734 --> 00:06:13,464
time, the maximum, and the mean.

116
00:06:13,744 --> 00:06:18,304
For example, I see that one request takes
one second, approximately one second.

117
00:06:18,314 --> 00:06:18,374
Thank you.

118
00:06:19,339 --> 00:06:20,599
I can see all the error I have.

119
00:06:20,939 --> 00:06:23,379
For example, I see that my
checks are pretty failing

120
00:06:23,389 --> 00:06:24,929
because I don't have concurrency.

121
00:06:24,929 --> 00:06:28,589
I don't trust concurrency in my
API, so I need to implement this.

122
00:06:29,139 --> 00:06:37,807
Also, I see that I found 4, 404
errors, but me, I needed to have 200.

123
00:06:38,307 --> 00:06:42,687
And also, what is pretty good with
Gapping, it's you can also see details.

124
00:06:43,067 --> 00:06:46,577
For example, right now, okay, I see that
I have file requests, but where are they?

125
00:06:46,577 --> 00:06:49,627
I can directly see here, where are they?

126
00:06:49,692 --> 00:06:52,092
But I can also go directly into details.

127
00:06:52,272 --> 00:06:55,072
I see that it's not on
get or loser, not here.

128
00:06:55,442 --> 00:07:00,202
On get or loser, I see that I have
a lot of error, also this error, and

129
00:07:00,202 --> 00:07:04,962
I can also see on the right the same
information, but only for get users.

130
00:07:05,192 --> 00:07:07,442
For example, the response time range, etc.

131
00:07:07,942 --> 00:07:12,652
But right now, you will tell me, okay,
I have this on my computer, but now I

132
00:07:12,652 --> 00:07:16,952
want to add this into my CI, because
I don't want to, each time I have a

133
00:07:16,992 --> 00:07:22,102
pull request, Run the pull request,
relaunch my API, and test with Gatling.

134
00:07:22,602 --> 00:07:24,782
I want this to be directly
integrated to my CI.

135
00:07:25,352 --> 00:07:28,002
And I will say, we have
a solution with Gatling.

136
00:07:28,832 --> 00:07:32,232
So at Gatling, we built what
we call Gatling Enterprise.

137
00:07:33,212 --> 00:07:36,912
And if I go on integration, you can
see that we have a lot of integration

138
00:07:36,942 --> 00:07:41,552
with CLC tool, Jenkins, GitHub CI,
GitHub Action, blah, blah, blah.

139
00:07:42,312 --> 00:07:45,412
Also with IPM tool like DataTrace,
you can send notification

140
00:07:45,412 --> 00:07:47,022
with Slack, Microsoft Teams.

141
00:07:47,642 --> 00:07:48,502
So to do it.

142
00:07:49,137 --> 00:07:53,937
What you can do, I will just stop
it, is typically when getting,

143
00:07:53,947 --> 00:07:58,937
you to price package, it will
create on target a package.

144
00:07:58,937 --> 00:07:58,967
zip.

145
00:07:58,967 --> 00:08:03,057
After that, you will need to create
a simulation, import your package,

146
00:08:03,107 --> 00:08:05,377
and configure the simulation.

147
00:08:05,417 --> 00:08:06,667
I already have one.

148
00:08:07,167 --> 00:08:08,587
So I will just take this.

149
00:08:08,827 --> 00:08:13,047
After that, you just need to, just
for after, but copy the simulation ID.

150
00:08:13,867 --> 00:08:17,957
And if workflow, it's typically
a really simple workflow.

151
00:08:18,457 --> 00:08:23,117
is typically what we do is asking
the simulation ID from the users.

152
00:08:23,167 --> 00:08:27,557
You can directly put it as a secret
or just do it into you into your file.

153
00:08:27,597 --> 00:08:31,547
And after we launched a simulation on
getting thanks to getting actual action.

154
00:08:32,047 --> 00:08:38,477
So now if I went The simulation, I will
just make an ID, run workflow, refresh.

155
00:08:38,977 --> 00:08:43,117
So now, GitHub will wait for
a runner to be available.

156
00:08:43,617 --> 00:08:45,827
So here we see that the
runner is available.

157
00:08:45,827 --> 00:08:49,067
For now, we're just running a new version.

158
00:08:49,267 --> 00:08:50,237
And now it's building.

159
00:08:51,057 --> 00:08:53,197
And now we see that we have
a new simulation running.

160
00:08:53,697 --> 00:08:56,737
So now what the simulation
will do is getting the static

161
00:08:56,737 --> 00:08:59,147
debugger, the load tester.

162
00:08:59,592 --> 00:09:00,502
As a load generator.

163
00:09:00,502 --> 00:09:06,562
So we and lunch is a lot similar to the
load and doing a simulation, but we don't

164
00:09:06,562 --> 00:09:08,892
have really time to wait for it to finish.

165
00:09:09,212 --> 00:09:11,752
So I will just take the previous one.

166
00:09:12,252 --> 00:09:12,842
This one.

167
00:09:12,842 --> 00:09:19,642
Sorry, but this one and we see that we
have a better view for simulation because

168
00:09:19,642 --> 00:09:21,192
we have a summary of the simulation.

169
00:09:21,202 --> 00:09:25,322
It can be showed to business side or
to some developers in order to get a

170
00:09:25,322 --> 00:09:28,655
better Light view of the simulation,
because we have the error ratio, we

171
00:09:28,655 --> 00:09:31,977
have the total of requests, we have
the number of maximal concurrent

172
00:09:32,047 --> 00:09:34,335
virtual users, and we have the error.

173
00:09:34,335 --> 00:09:37,867
Also, on the report, we
have a lot of information.

174
00:09:38,177 --> 00:09:40,867
We can see the request timeline,
we can see the number of requests

175
00:09:40,917 --> 00:09:42,777
and requests per second, typically.

176
00:09:43,197 --> 00:09:46,987
So the number of requests, the one
which was OK, the one which was K.

177
00:09:46,997 --> 00:09:49,847
You can filter also the response by.

178
00:09:50,347 --> 00:09:52,377
Okay, so it was by the second by statues.

179
00:09:52,467 --> 00:09:55,467
You can say, okay, I
want only the true 1201.

180
00:09:56,427 --> 00:09:57,857
And it's a pretty good thing.

181
00:09:57,857 --> 00:10:02,027
Also, with gasping enterprise is
typically that you can generate

182
00:10:02,077 --> 00:10:04,227
a lot everywhere in the world.

183
00:10:04,407 --> 00:10:06,187
So typically is AWS region.

184
00:10:06,197 --> 00:10:09,727
But for example, you are a commerce
website and you want to load test.

185
00:10:10,697 --> 00:10:16,047
You want to have people coming into
the website from Sydney and Paris and

186
00:10:16,187 --> 00:10:20,377
united states you can easily do it
with gatling enterprise because we're

187
00:10:20,397 --> 00:10:26,822
getting open source So we need to have
servers In multiple place, and doing a

188
00:10:26,822 --> 00:10:30,092
lot of research and development in order
to do what getting Enterprise does.

189
00:10:30,592 --> 00:10:34,212
So now if I go back to my
presentation, you can support

190
00:10:34,212 --> 00:10:35,862
us by joining our community.

191
00:10:35,892 --> 00:10:37,812
So on community, do gatting io.

192
00:10:38,282 --> 00:10:43,562
You can start us on GitHub, on Gatting as
Gatting, and you can try and test gaping

193
00:10:44,062 --> 00:10:46,742
. Thanks you to thank you for your time.

194
00:10:46,982 --> 00:10:48,692
Also, you can scan my QR code.

195
00:10:48,752 --> 00:10:49,097
You will see.

196
00:10:49,942 --> 00:10:54,442
A lot of things, you will see, office
hours, our recording of the webinar

197
00:10:54,452 --> 00:10:58,762
with Gatling and TestContainer,
and also my LinkedIn and GitHub.

