1
00:00:00,000 --> 00:00:00,930
Hello everyone.

2
00:00:01,020 --> 00:00:07,290
My name is Ima Etsy, and I'll be talking
on optimizing cash usage in Docker Butte.

3
00:00:07,980 --> 00:00:12,150
about me, I'm a software engineer
and I'm very passionate about

4
00:00:12,150 --> 00:00:14,340
sharing knowledge through writing.

5
00:00:14,760 --> 00:00:20,190
I'm also an active contributor to the open
source com, community, and then you can

6
00:00:20,190 --> 00:00:23,070
connect with me on LinkedIn or Twitter.

7
00:00:23,280 --> 00:00:28,260
Let's get started by talking about
why Docker bees can feel very slow.

8
00:00:28,860 --> 00:00:35,550
So one of the biggest pain, points with
Docker, build is that even the smallest

9
00:00:35,550 --> 00:00:38,820
code change can trigger a full rebuild.

10
00:00:39,030 --> 00:00:42,390
That means you are often rebuilding
parts of your application that

11
00:00:42,390 --> 00:00:49,140
haven't even changed, and this can
significantly, increase view times.

12
00:00:49,710 --> 00:00:55,440
So without optimization of your
docker, Docker will usually run through

13
00:00:55,440 --> 00:00:57,900
unnecessary steps again and again.

14
00:00:58,695 --> 00:01:02,025
Wasting, the compute power, right?

15
00:01:02,025 --> 00:01:08,055
And, if you've ever worked in A-C-I-C-D
environment, this is usually a very real

16
00:01:08,085 --> 00:01:14,415
problem because it's causes a very long
view time and slows down your testing

17
00:01:14,445 --> 00:01:21,135
or your deployment, which, ultimately
reduces the entire developer productivity.

18
00:01:21,465 --> 00:01:25,755
And no one wants to really sit around
waiting for views to finish when.

19
00:01:26,565 --> 00:01:31,335
They can, they could be shipped or they
could ship features really quickly.

20
00:01:32,085 --> 00:01:34,365
So why does this
optimization really matter?

21
00:01:34,875 --> 00:01:42,555
First, it speeds up the development
faster, and also it's, allows the

22
00:01:42,555 --> 00:01:47,235
developers to retreat, iterate, and
test their changes really quickly.

23
00:01:48,795 --> 00:01:51,465
also it helps, saves money, right?

24
00:01:51,465 --> 00:01:54,675
Because when you have a
faster build, it means that,

25
00:01:56,685 --> 00:01:59,925
we will have to spend a lot
of compute power, which can

26
00:02:00,165 --> 00:02:02,115
reduce infrastructure cost.

27
00:02:02,985 --> 00:02:06,075
so yeah, understanding docker build.

28
00:02:06,765 --> 00:02:11,325
So now let's take a closer look at
how Docker builds actually work.

29
00:02:13,455 --> 00:02:19,390
the first thing is that, when you start
building Docker loads, the build context.

30
00:02:20,085 --> 00:02:24,315
So when you run a Docker build, like it
gathers all the files in the directory

31
00:02:24,315 --> 00:02:29,325
where you are building the image, and
these files make up the build context

32
00:02:29,655 --> 00:02:31,605
and can impact the build process.

33
00:02:32,745 --> 00:02:35,865
the next thing that it does is
that it passes the Docker file.

34
00:02:36,075 --> 00:02:41,325
So Docker reads instruction in the
docker file and execute them one by one.

35
00:02:41,970 --> 00:02:46,260
And then, the next step is that
it creates an imitable layer.

36
00:02:46,590 --> 00:02:51,720
So just these are like set of
instructions in the docker file, right?

37
00:02:51,810 --> 00:02:55,440
And it creates a new layer in
the, for each layer, for each

38
00:02:55,500 --> 00:02:57,000
instruction in the docker file.

39
00:02:57,000 --> 00:02:58,530
It creates a new layer.

40
00:02:59,670 --> 00:03:01,830
and then this layer are imitable.

41
00:03:02,040 --> 00:03:04,470
So once they're built, they do not change.

42
00:03:05,610 --> 00:03:06,090
also.

43
00:03:06,720 --> 00:03:11,130
And last thing that happens is that
Docker uses caching to speed up rebuild.

44
00:03:11,130 --> 00:03:15,030
So rebuild like when you need
to build your docker, your

45
00:03:15,030 --> 00:03:16,710
application again using Docker.

46
00:03:17,010 --> 00:03:21,870
So Docker just uses the unchanged
layout to avoid redundant processing

47
00:03:21,930 --> 00:03:23,580
and making your build much faster.

48
00:03:24,240 --> 00:03:30,330
So this is an example of, and, let me
just break this down really quickly.

49
00:03:30,900 --> 00:03:33,750
we have the first one that's
from Python three one.

50
00:03:34,995 --> 00:03:36,555
So this is like the base image.

51
00:03:36,585 --> 00:03:41,145
Ideally you could use like an Alpine,
which is really in the content app,

52
00:03:41,505 --> 00:03:46,335
and then it copies all the content from
the requirement that CXT file first.

53
00:03:46,335 --> 00:03:50,145
So this is like Python project, right?

54
00:03:50,145 --> 00:03:53,265
And then it installs the dependency.

55
00:03:53,565 --> 00:03:58,485
And this step is you can be cashed if
the requirement of T XT doesn't change.

56
00:03:58,485 --> 00:04:00,555
So if you do not add any new.

57
00:04:01,980 --> 00:04:08,220
Stuff to the requirement re any new model
to do or package the requirement of TST,

58
00:04:08,760 --> 00:04:11,640
it doesn't, install more dependency.

59
00:04:12,000 --> 00:04:16,980
And then the next thing is that it copies
the rest of the application files, right?

60
00:04:17,190 --> 00:04:20,730
And then it defines the
command to run the application.

61
00:04:20,910 --> 00:04:23,910
So this is what happens.

62
00:04:25,560 --> 00:04:27,390
but there's one very
important thing, right?

63
00:04:27,450 --> 00:04:29,880
The order of the
instruction really matters.

64
00:04:30,360 --> 00:04:36,030
So if you place, placing copy
the requirement, your TXT and

65
00:04:36,030 --> 00:04:40,710
run peep install would first help
Docker to cache the dependencies

66
00:04:40,710 --> 00:04:43,710
separately from the application code.

67
00:04:44,040 --> 00:04:49,530
And this avoid or unnecessary reinstalling
dependencies when only code changes.

68
00:04:52,170 --> 00:04:56,280
now that we've really understood the
fundamentals, let's explore ways to

69
00:04:56,280 --> 00:04:59,340
optimize cushion for even faster build.

70
00:05:01,305 --> 00:05:02,925
How does C work?

71
00:05:03,315 --> 00:05:06,495
Now we understand how docker buts work.

72
00:05:07,844 --> 00:05:09,225
let's just talk about caution.

73
00:05:09,915 --> 00:05:13,935
which is one of the most important
ways doca uses to speed up buts.

74
00:05:14,235 --> 00:05:15,405
So what is doca?

75
00:05:16,125 --> 00:05:17,715
basically docker cash.

76
00:05:18,555 --> 00:05:25,545
docker saves previously image layers
and reuses unchanged steps whenever.

77
00:05:25,920 --> 00:05:29,370
Possible and this avoid rebuilding
the part of the image that haven't

78
00:05:29,370 --> 00:05:31,980
changed, making the build much faster.

79
00:05:32,310 --> 00:05:36,120
So for example, if you want to, if you
want to install a dependence in a docker

80
00:05:36,120 --> 00:05:42,030
file and they haven't changed, docker
res reuses, the previous build layer,

81
00:05:42,030 --> 00:05:46,740
instead of running the application
process, again, concepts in layers,

82
00:05:46,770 --> 00:05:51,690
caching, and if each instruction, the
dock file creates a layer and some

83
00:05:51,690 --> 00:05:53,940
layers can be cached while others can't.

84
00:05:54,315 --> 00:05:59,205
So let's go over the table in
the slides, from the previous,

85
00:06:00,164 --> 00:06:05,534
slide I showed you, a Doco file.

86
00:06:07,425 --> 00:06:10,424
so here I'm just gonna talk
about the layers that can

87
00:06:10,424 --> 00:06:12,405
be cashed in that doca file.

88
00:06:13,245 --> 00:06:15,735
we have, the, from Python.

89
00:06:16,500 --> 00:06:22,860
Three point, one zero that is
cacheable base image is usually cache.

90
00:06:22,860 --> 00:06:27,630
So unless you pull a new version,
this layer remains the same.

91
00:06:27,630 --> 00:06:32,280
So when you're bu the working
direct change often, so Docker

92
00:06:32,280 --> 00:06:34,050
usually caches the spot.

93
00:06:36,090 --> 00:06:41,700
the step, for copying the
requirement of T XT is also cashable.

94
00:06:41,700 --> 00:06:46,380
So this step is cash as long as like
the requirement of TXT remains the same.

95
00:06:47,400 --> 00:06:52,560
And then, if the requirement of
TXT hasn't changed, the car will

96
00:06:52,560 --> 00:06:54,900
reuse the cash dependencies.

97
00:06:56,430 --> 00:07:03,150
so the command to copy the entire,
application code is usually no cacheable.

98
00:07:04,094 --> 00:07:09,284
And these steps, copies all the
files basically in the directory.

99
00:07:09,435 --> 00:07:15,255
And if any file changes, disturb, breaks,
and the cache is forced, disturb breaks

100
00:07:15,255 --> 00:07:16,875
the cache and is forced to review.

101
00:07:16,905 --> 00:07:18,855
So that's what happens.

102
00:07:19,245 --> 00:07:23,085
So this is why it's important to
structure your docker strategically.

103
00:07:26,775 --> 00:07:30,975
problem why docker builds
can become inefficient.

104
00:07:31,185 --> 00:07:31,665
So even.

105
00:07:32,190 --> 00:07:37,140
With caching, docker builds can
be very slow, and here's why.

106
00:07:37,409 --> 00:07:42,150
So one thing is, small mistakes in
the Docker file can invalidate the

107
00:07:42,150 --> 00:07:45,270
cache and forcing a necessary build.

108
00:07:46,200 --> 00:07:49,050
So another thing also is the structure.

109
00:07:49,050 --> 00:07:55,080
So if the instructions are not
properly, ordered, this can also

110
00:07:55,080 --> 00:07:57,659
fo force an unnecessary rebuild.

111
00:07:58,200 --> 00:08:02,340
So another thing is,
frequent dependency change.

112
00:08:02,340 --> 00:08:07,140
So if you are constantly updating
your dependency means that you're

113
00:08:07,140 --> 00:08:13,890
forcing docket to install, the entire,
requirement that takes every time.

114
00:08:14,580 --> 00:08:18,540
And then, also using copy.

115
00:08:18,540 --> 00:08:26,070
So if you use copy at the beginning
of your, your docker file, this.

116
00:08:26,340 --> 00:08:30,840
Can just cause like this can break
the cache and then it rebuilds again.

117
00:08:31,230 --> 00:08:35,130
And also another thing is
like bigger image are usually

118
00:08:35,130 --> 00:08:38,280
longer to build and, deploy

119
00:08:40,679 --> 00:08:47,010
some common pitfalls, like I already said
earlier, are you order up instructions.

120
00:08:47,370 --> 00:08:50,460
Then, another thing is
using add instead of copy.

121
00:08:50,460 --> 00:08:55,230
So this extract files
unnecessary, but copy uses like.

122
00:08:55,950 --> 00:08:59,760
Copy, use copy like, unless
downloading archives.

123
00:08:59,970 --> 00:09:03,930
So try to avoid using add, sorry.

124
00:09:04,590 --> 00:09:07,590
try to use add instead of
copy every single time.

125
00:09:08,340 --> 00:09:12,120
And then, any changes
in validate the cache.

126
00:09:12,210 --> 00:09:15,270
So be very explicit
about your copied file.

127
00:09:17,880 --> 00:09:20,155
you can try to always use the wild card.

128
00:09:21,775 --> 00:09:27,239
It practices for optimizing docker
duties is in cache, structure, a

129
00:09:27,239 --> 00:09:30,000
docker file for maximum cache we use.

130
00:09:31,650 --> 00:09:37,229
so another thing is you need to
place table instructions before the

131
00:09:37,229 --> 00:09:43,260
frequently changed ones, and then
you can use the multi-stage build

132
00:09:43,739 --> 00:09:46,439
to reduce the final image size.

133
00:09:47,160 --> 00:09:53,850
So you only want to keep what's necessary
in the final image, to reduce blot, and

134
00:09:53,850 --> 00:09:59,160
then make sure to leverage the docker
ignore, to reduce the build context size.

135
00:09:59,160 --> 00:10:07,035
So exclude any, unnecessary power that
the, that could slow down the build.

136
00:10:08,670 --> 00:10:13,650
Another thing we want to do is we
want to use arguments as the ag

137
00:10:13,680 --> 00:10:15,690
instead of environment variable.

138
00:10:16,080 --> 00:10:20,550
And because ag is always available, it's
only available during the view time.

139
00:10:21,210 --> 00:10:23,040
it keeps your image cleaner.

140
00:10:24,000 --> 00:10:29,010
so we can see from the Docker
file that I placed here and we see

141
00:10:29,010 --> 00:10:31,200
how it was properly structured.

142
00:10:34,695 --> 00:10:39,435
why this is optimized, because
the dependencies are copied first,

143
00:10:39,735 --> 00:10:41,325
and so they are cashed separately.

144
00:10:41,505 --> 00:10:44,775
And then the application files
are copied last, so preventing

145
00:10:44,775 --> 00:10:46,785
the necessary cache invalidation.

146
00:10:47,925 --> 00:10:55,095
so there are this is the basic caching
instructions or caching techniques.

147
00:10:55,155 --> 00:11:00,375
So in the next slide I'll be talking
about advanced caching techniques.

148
00:11:01,290 --> 00:11:04,500
So now we've covered the
basic ca cushion techniques.

149
00:11:06,960 --> 00:11:11,069
there are some really advanced
cushion techniques and that is

150
00:11:11,069 --> 00:11:13,140
using the mouths for building cache.

151
00:11:13,710 --> 00:11:18,270
So one powerful way we can speed off
things is by using mouths for cushion.

152
00:11:20,130 --> 00:11:26,939
buying mount, or volume mount, can
help persist dependencies across build

153
00:11:27,569 --> 00:11:30,150
and reduce a redundant installation.

154
00:11:30,675 --> 00:11:38,625
So we can add the amount, equal to type
and equal to type cache with build kit.

155
00:11:38,655 --> 00:11:44,385
And this allows docker to cache immediate
build without creating unnecessary layer.

156
00:11:44,505 --> 00:11:47,084
And this would help to
improve the performance.

157
00:11:50,444 --> 00:11:54,285
we can also leverage
external cash sources.

158
00:11:55,770 --> 00:12:02,040
one of the, Docker has, built X for
distributed C and this allows cach

159
00:12:02,219 --> 00:12:07,050
to be stored to be shared across
multiple platforms and environments.

160
00:12:10,079 --> 00:12:16,170
yeah, I just placed a code on how to, an
example of how to, stop build cash in the

161
00:12:16,170 --> 00:12:19,079
registry so every new build can reuse it.

162
00:12:20,040 --> 00:12:24,180
So this ensures that the build.

163
00:12:25,380 --> 00:12:29,010
ensures the build, we use the
cache layers, making them much

164
00:12:29,010 --> 00:12:33,510
faster, especially if you're
working in A-C-I-C-D environment.

165
00:12:35,610 --> 00:12:40,140
So another thing, when you've
improved your cache layer

166
00:12:40,199 --> 00:12:45,089
properly, you want to measure or
deb bulk your build performance.

167
00:12:45,480 --> 00:12:52,110
And, there are different ways of
checking it or, so one way it's by.

168
00:12:52,439 --> 00:12:58,860
Using the Docker Build Progress
plane and this shows, it just gives

169
00:12:58,860 --> 00:13:04,890
you a more detailed out output to
check if the layers are being reused.

170
00:13:05,160 --> 00:13:07,469
And you can also use the Docker history.

171
00:13:08,699 --> 00:13:13,890
this would basically list immediately and
the sizes to see what exactly is cached.

172
00:13:14,985 --> 00:13:18,704
So if you wanna analyze the
Docker image, you can use, you

173
00:13:18,704 --> 00:13:22,185
can also use the docker history,
you can use the time docker build.

174
00:13:22,515 --> 00:13:29,265
And this, measures like the duration
to track if your, if there's

175
00:13:29,265 --> 00:13:32,564
any improvement in your, caution

176
00:13:35,595 --> 00:13:36,615
in all these tools.

177
00:13:36,620 --> 00:13:41,025
It's, it helps spot any efficiencies.

178
00:13:41,865 --> 00:13:43,574
and then it can keep your build.

179
00:13:44,190 --> 00:13:46,680
Or can make your build run really fast.

180
00:13:49,020 --> 00:13:49,950
Docker builds.

181
00:13:50,010 --> 00:13:53,850
In conclusion, docker build is very
essential for speeding of builds

182
00:13:54,210 --> 00:13:56,910
and it reduces the resource usage.

183
00:13:57,180 --> 00:14:03,630
So by structuring your Docker files affect
and avoiding common mistakes and utilizing

184
00:14:03,660 --> 00:14:10,475
advanced techniques, like I mentioned,
using the Build X, we can significantly.

185
00:14:10,740 --> 00:14:13,170
Frequently improve the build performance.

186
00:14:13,650 --> 00:14:19,350
And the next step after doing all of
this is to, apply this to your real

187
00:14:19,350 --> 00:14:28,110
life in your real project and then also
try to, analyze if your build time or

188
00:14:28,110 --> 00:14:34,260
analyze if the C works properly based
on the technique I explained earlier.

189
00:14:34,620 --> 00:14:35,160
Thank you.

