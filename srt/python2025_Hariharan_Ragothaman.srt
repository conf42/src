1
00:00:00,150 --> 00:00:00,820
Hello, everyone.

2
00:00:00,830 --> 00:00:06,210
Welcome to today's talk on integrating
C and Python at Conf 42, Python 2025.

3
00:00:06,710 --> 00:00:10,739
I'm Hariharan, currently a software
engineer at AMD Advanced Micro Devices.

4
00:00:11,169 --> 00:00:14,139
I previously worked as a lead software
engineer at Athena Health, and I've

5
00:00:14,139 --> 00:00:18,400
also worked at other organizations
like Bain Capital and Bose Corporation.

6
00:00:18,789 --> 00:00:23,340
My large areas of interest are
DevSecOps, distributed systems,

7
00:00:23,390 --> 00:00:28,620
applied AI, And the two languages that
I frequently use are C and Python.

8
00:00:29,349 --> 00:00:32,959
feel free to connect with me on LinkedIn
and also feel free to follow me on GitHub.

9
00:00:33,459 --> 00:00:37,639
So for today's talk, I've split
them into around 10 parts.

10
00:00:37,929 --> 00:00:42,759
So first we'll talk about, what the, about
the problem statement and then slowly move

11
00:00:42,759 --> 00:00:47,669
on to similarities and differences between
Python and C Then, talk about, static

12
00:00:47,669 --> 00:00:51,949
binding, dynamic binding, and then, brief
overview of Boost Python and PyBind11.

13
00:00:52,739 --> 00:00:56,539
And then let's look at some actual code
and how the project is set up, some

14
00:00:56,539 --> 00:01:00,669
minimal examples, a short demo, and
then touch upon a few advanced topics.

15
00:01:01,399 --> 00:01:04,589
And then, talk about distribution
and packaging and then, wrap

16
00:01:04,589 --> 00:01:05,940
it up with some top takeaways.

17
00:01:06,380 --> 00:01:07,169
So let's get started.

18
00:01:07,719 --> 00:01:10,229
in terms of introduction, in this
session, I'll share how you can

19
00:01:10,229 --> 00:01:14,209
leverage the strengths of both C and
Python, to build robust applications.

20
00:01:14,629 --> 00:01:17,939
The idea is to gain, insights into
tools like Boost Python, PyBind11.

21
00:01:18,439 --> 00:01:22,949
And other dynamic binding tools and
learn how to seamlessly integrate,

22
00:01:23,039 --> 00:01:27,349
cross language projects and discover
strategies to optimize the code base.

23
00:01:27,909 --> 00:01:29,069
So the goal is very simple.

24
00:01:29,429 --> 00:01:32,949
By the end of this talk, you will
understand when and why to choose

25
00:01:32,960 --> 00:01:34,990
Boost Python, PyBind 11 or other tools.

26
00:01:35,310 --> 00:01:38,370
And you'll walk away with a clear
idea on how to set up a project and

27
00:01:38,370 --> 00:01:40,240
write minimal and functional examples.

28
00:01:40,910 --> 00:01:41,640
So let's get started.

29
00:01:42,140 --> 00:01:47,369
So before, actually diving into the,
diving into code and other contents.

30
00:01:47,839 --> 00:01:50,609
So let's talk about why Python
in the first place, right?

31
00:01:50,609 --> 00:01:55,179
So we know that Python, Python
currently is being rapidly used for

32
00:01:55,239 --> 00:02:01,039
prototyping, due to, ease of learning,
relatively simpler interfaces and usage.

33
00:02:01,510 --> 00:02:02,430
faster development.

34
00:02:02,880 --> 00:02:07,199
But when we look at C and Python,
although, there are a lot of

35
00:02:07,200 --> 00:02:09,730
differences, but there are a
lot of similarities as well.

36
00:02:09,780 --> 00:02:13,230
Modern C is trying to get closer
and closer to Python, I would say.

37
00:02:13,650 --> 00:02:16,429
for example, if you take a, if you
take a look at these two snippet of

38
00:02:16,429 --> 00:02:19,859
codes, of course they're very simple,
where they try to add two numbers.

39
00:02:19,879 --> 00:02:22,779
The idea is, even in Python,
you have type hinting.

40
00:02:22,829 --> 00:02:25,779
In the recent versions, where you
can explicitly mention that a and

41
00:02:25,789 --> 00:02:29,749
b are integers, whereas in C you
have, it is enforced and then if you

42
00:02:29,749 --> 00:02:32,659
do not mention what type it is, you
essentially get a compilation error.

43
00:02:33,159 --> 00:02:37,949
Similarly, like on the left you
have a function that takes a vector

44
00:02:37,950 --> 00:02:41,149
of strings and then displays hello
for every string that it takes.

45
00:02:41,450 --> 00:02:46,000
On the right you have a library called
typing from which you could import a list.

46
00:02:46,335 --> 00:02:50,005
And clearly, say that the
function takes a list of strings.

47
00:02:50,505 --> 00:02:54,264
Over here on the right, here we
have a class called box, right?

48
00:02:54,275 --> 00:02:57,454
So there are other types called type
var and generic that allow you to

49
00:02:57,454 --> 00:03:01,025
create classes and functions that
work with any type, which is very

50
00:03:01,025 --> 00:03:04,744
similar to the concept of C templates,
which on the right hand side.

51
00:03:04,745 --> 00:03:08,265
So on the left hand side, Type var
and generic are used on the right.

52
00:03:08,555 --> 00:03:11,965
You can clearly see the equivalent
in, implemented using C templates.

53
00:03:12,355 --> 00:03:17,135
The box class can hold any type and its
method reflect that type, which is the

54
00:03:17,175 --> 00:03:18,925
underlying concept of templates as well.

55
00:03:19,425 --> 00:03:21,765
So even though modern C is.

56
00:03:22,580 --> 00:03:26,460
Heading closer to, syntactically, that's
a very broad statement, but even though

57
00:03:26,520 --> 00:03:30,440
modern C is try, even though Python
and C are, having a lot of similarities

58
00:03:30,710 --> 00:03:32,970
in terms of performance, right?

59
00:03:33,040 --> 00:03:35,410
C is much, much faster than Python.

60
00:03:35,670 --> 00:03:37,680
Although the recent versions of Python 3.

61
00:03:37,680 --> 00:03:42,080
3, 3. 13 have introduced new modes such
as, modes where you can disable the

62
00:03:42,080 --> 00:03:45,940
global interpreter lock modes where you
can, have another just in time compiler

63
00:03:45,990 --> 00:03:49,910
you can, and it's set to be like 15
percent faster for module imports

64
00:03:50,120 --> 00:03:53,240
and 10 percent faster for function
calls and other CPU intensive tasks.

65
00:03:54,110 --> 00:03:59,700
but even in pure, even in, codebases
that predominantly use Python, For

66
00:03:59,700 --> 00:04:04,700
data intensive tasks, we end up using
other packages such as NumPy, Scikit

67
00:04:04,700 --> 00:04:09,150
learn, PyTorch, and so on, because,
they have APIs and abstractions

68
00:04:09,150 --> 00:04:11,790
that are much more, high performing.

69
00:04:12,050 --> 00:04:15,540
and when you look deeper into those
libraries, the core implementation

70
00:04:15,540 --> 00:04:20,060
is either in C or C the performance
is just one side of the coin.

71
00:04:20,330 --> 00:04:21,830
In one of my previous workplaces.

72
00:04:22,330 --> 00:04:26,290
We've had teams affiliated
to a particular code base.

73
00:04:26,740 --> 00:04:31,630
For example, the software development
team in an embedded space might just

74
00:04:31,630 --> 00:04:35,850
be writing C code, whereas the testing
team might be writing Python code.

75
00:04:36,270 --> 00:04:39,990
So sometimes when there has to be
collaboration between the development

76
00:04:39,990 --> 00:04:43,365
team and testing teams, there needs
to be an overlap between C and

77
00:04:43,365 --> 00:04:45,195
Python, rather the code that we write.

78
00:04:45,915 --> 00:04:48,974
so there needs to be code that
talks with both, the C code

79
00:04:48,974 --> 00:04:50,004
base and the Python code base.

80
00:04:50,074 --> 00:04:53,374
there are other needs where, we have to
make C and Python talk to each other.

81
00:04:53,874 --> 00:04:57,944
Rather than, the, so what, the point
I'm trying to drive home is, sometimes

82
00:04:57,944 --> 00:05:03,004
we might have, a Python code base,
And we might want to optimize part of

83
00:05:03,004 --> 00:05:05,334
that code base, for specific reasons.

84
00:05:05,334 --> 00:05:09,524
So we might pick that batch of code
from the Python code base integrated in

85
00:05:09,524 --> 00:05:12,054
C for it to be more highly performant.

86
00:05:12,394 --> 00:05:16,254
On the other hand, two teams, two
different teams have to interact with

87
00:05:16,254 --> 00:05:20,984
each other and they might have different
objectives, but, One development team can

88
00:05:20,984 --> 00:05:23,964
be writing C code, whereas the testing
team can be writing Python code, but they

89
00:05:23,964 --> 00:05:25,024
still have to interact with each other.

90
00:05:25,264 --> 00:05:26,454
we might have to do some binding.

91
00:05:26,904 --> 00:05:29,704
sometimes the need for binding
can be performance, sometimes

92
00:05:29,704 --> 00:05:33,444
the need for binding can be cross
collaboration, but we'll learn more

93
00:05:33,474 --> 00:05:36,724
as we, we'll learn how to do all that
as we move on to the next slides.

94
00:05:37,224 --> 00:05:41,234
for the purpose of this talk, if you want
to follow along and actually try it out,

95
00:05:41,334 --> 00:05:45,674
in your local IDE or compiler, some of
the prerequisites are you need to have,

96
00:05:45,724 --> 00:05:51,434
a working C compiler that at least has
C 11, and, have, Python 3 installed.

97
00:05:51,804 --> 00:05:54,534
you can either install it through,
if you're on Ubuntu, you can either

98
00:05:54,584 --> 00:05:56,064
install all these through APT get.

99
00:05:56,334 --> 00:06:00,164
Or if you are on, on a macro
system, you can use the Homebrew, to

100
00:06:00,164 --> 00:06:01,664
install all of these dependencies.

101
00:06:02,034 --> 00:06:03,864
build system like CMake is recommended.

102
00:06:03,924 --> 00:06:06,654
That helps you to coordinate
compilation linking library parts.

103
00:06:07,034 --> 00:06:11,274
And since we'll be talking about
Boost Python five 11, please, I mean

104
00:06:11,544 --> 00:06:15,934
you can install it either through,
similar through like package managers

105
00:06:16,714 --> 00:06:18,154
or, you can also use Cmec to fetch it.

106
00:06:18,654 --> 00:06:22,254
or if in case of five 11 you can just copy
the headers into your project as well.

107
00:06:22,754 --> 00:06:26,864
let's take a small look at, Boost and
PyBait11 just to understand what they are.

108
00:06:26,884 --> 00:06:30,534
Boost Python is essentially part
of the larger Boost ecosystem.

109
00:06:30,854 --> 00:06:32,314
It's actively maintained for many years.

110
00:06:32,314 --> 00:06:36,264
It's stable, well documented, and
ships Python module in the library.

111
00:06:36,264 --> 00:06:38,564
PyBait11 is a more modern alternative.

112
00:06:38,564 --> 00:06:41,494
or rather I would say it's
slightly slower than Boost Python

113
00:06:41,494 --> 00:06:42,814
also in terms of performance.

114
00:06:43,194 --> 00:06:46,934
But, if you dislike additional library
dependencies and want an easy install,

115
00:06:46,934 --> 00:06:48,984
PyBrain 11 just might be your choice.

116
00:06:49,984 --> 00:06:53,774
But, when I show you like actual code,
I'll show you like both implementations

117
00:06:53,784 --> 00:06:56,034
in both Boost Python and, PyBrain 11.

118
00:06:57,014 --> 00:06:59,374
And I've also attached references
in case you want to check them out.

119
00:06:59,804 --> 00:07:02,494
they have extensive documentation
for both these libraries.

120
00:07:02,994 --> 00:07:05,624
Yeah, so let's take a look at actual
code before going to advanced topics.

121
00:07:06,154 --> 00:07:07,174
so here's my ID.

122
00:07:07,974 --> 00:07:09,704
So let's take a look at on the left.

123
00:07:09,774 --> 00:07:13,824
we have on the left, I have a PI
bind and on the right, I have, boost.

124
00:07:14,784 --> 00:07:19,534
So when we write in, so here we have a C
plus here to have C plus a score where we

125
00:07:19,544 --> 00:07:22,264
have, simple, function process function.

126
00:07:22,794 --> 00:07:23,364
Just to add.

127
00:07:23,864 --> 00:07:27,614
And then we can actually expose it to,
we can define a Python module called

128
00:07:27,644 --> 00:07:32,954
PyBindModule and essentially, add an, add
a doc string and then, expose it and say

129
00:07:32,954 --> 00:07:34,024
this is a function to add two numbers.

130
00:07:34,024 --> 00:07:41,564
And, I, the corresponding CMake lists
for this also clearly says that I want

131
00:07:41,564 --> 00:07:45,744
to create a Python module and as a shared
library and call it as PyBain module

132
00:07:45,794 --> 00:07:47,794
for this file PyBain underscore module.

133
00:07:47,794 --> 00:07:49,914
cpp, which we see here, right?

134
00:07:49,924 --> 00:07:53,454
So generally the code that
exposes it to Python is actually

135
00:07:53,454 --> 00:07:54,284
written in a separate file.

136
00:07:54,829 --> 00:07:57,329
But for the sake of simplicity
here, I have it in the same file.

137
00:07:57,909 --> 00:08:01,859
so when this is compiled, so
I've already compiled it using

138
00:08:01,859 --> 00:08:04,059
CMake for the sake of simplicity.

139
00:08:04,369 --> 00:08:08,069
But when we actually compile this,
it generates a shared library

140
00:08:08,149 --> 00:08:09,829
called a PyBain underscore module.

141
00:08:10,714 --> 00:08:16,264
And this pyvain underscore module is what
is I actually, I can actually, and once I

142
00:08:16,264 --> 00:08:21,254
actually like export, it to Python path,
I can actually directly import, the pyvain

143
00:08:21,254 --> 00:08:26,984
module and then directly call the function
add, which is actually, implemented as

144
00:08:26,984 --> 00:08:30,844
a C, which is actually a C function,
which takes two integers A and B, right?

145
00:08:31,179 --> 00:08:35,909
So the corresponding, Python function
for that is over here, which is,

146
00:08:35,929 --> 00:08:39,876
pi byte, pi, which we are directly
calling through the pi byte, pi bind

147
00:08:39,876 --> 00:08:44,519
underscore module, which we, which is
actually like a shared library, right?

148
00:08:45,009 --> 00:08:51,999
So a similar example in boost would be,
over here, where here we imported the

149
00:08:52,009 --> 00:08:56,594
pi byte, PyBind11 header, where here
we import the boost header and then

150
00:08:56,634 --> 00:09:01,134
here we basically say we want to create
a Boost Python module and this is the

151
00:09:01,134 --> 00:09:03,154
function that adds two numbers, right?

152
00:09:03,424 --> 00:09:07,904
So similarly, when I, when I compile
it, I create a, I again have a shared

153
00:09:07,904 --> 00:09:09,124
library called boost underscore module.

154
00:09:09,624 --> 00:09:12,984
And I can directly call the
boost underscore module in my

155
00:09:13,024 --> 00:09:17,504
Python, file as boost module
dot add three, three comma four.

156
00:09:17,504 --> 00:09:21,414
The syntaxes are fairly similar, but
they're not, they were different.

157
00:09:21,834 --> 00:09:23,419
The setup is, different though.

158
00:09:23,919 --> 00:09:25,749
with regard to our, so
this is very simple, right?

159
00:09:25,749 --> 00:09:29,459
Look, just a function to expose, just a
function, just features have a function to

160
00:09:29,459 --> 00:09:35,129
add two numbers and it is exposed in C and
we, and we expose it to the Python world.

161
00:09:35,129 --> 00:09:37,905
We can do some advanced
operations as well.

162
00:09:37,905 --> 00:09:43,758
for example, we can also have, a class
and, Here I have a class called person

163
00:09:43,788 --> 00:09:47,078
and then you have a constructor with
name and age and then with getters

164
00:09:47,078 --> 00:09:51,208
and setters for the age and a function
to get name and then some private

165
00:09:51,208 --> 00:09:52,698
variables for name and age as well.

166
00:09:53,168 --> 00:09:58,818
So in PyBind I can clearly say I want to,
I am calling this head library as PyBind

167
00:09:58,818 --> 00:10:04,843
class module and I say that hey, I, this
is a class and I want to essentially allow

168
00:10:04,863 --> 00:10:08,613
Python to call all these functions, right?

169
00:10:08,693 --> 00:10:13,383
So similarly, when we go to some,
as I mentioned here, we could

170
00:10:14,023 --> 00:10:17,003
directly import, and this also
I have pre built it over here.

171
00:10:17,363 --> 00:10:22,313
I, once you, when you run CMake, it
generates PyBindClass underscore module.

172
00:10:22,783 --> 00:10:26,643
And I can directly import the PyBindClass
underscore module, and then directly

173
00:10:26,643 --> 00:10:28,123
call, directly call the constructor.

174
00:10:28,543 --> 00:10:30,743
Say, I want to parse AliceN28.

175
00:10:30,953 --> 00:10:35,643
And then it creates and person is like
the instance of that class and then I

176
00:10:35,643 --> 00:10:37,123
can directly call the helper functions.

177
00:10:37,883 --> 00:10:43,323
So this is another example to where you
can expose a C class to Python, right?

178
00:10:43,333 --> 00:10:46,723
So similarly, we have, similarly,
we could also do it in Boost.

179
00:10:47,423 --> 00:10:51,603
So we import the Boost header
and the class is very similar,

180
00:10:51,603 --> 00:10:54,633
but then the exposing function is
like, slightly different syntax

181
00:10:54,633 --> 00:10:56,023
where we use the Boost namespace.

182
00:10:56,523 --> 00:11:01,953
So this is an example of how we
could expose C functions and C

183
00:11:01,953 --> 00:11:03,563
classes onto the Python world.

184
00:11:04,063 --> 00:11:07,113
But we can do much more advanced stuff.

185
00:11:07,143 --> 00:11:11,233
We can also like, we can also map
C exceptions to Python exceptions.

186
00:11:11,643 --> 00:11:15,363
We can easily parse vectors
other containers and iterators.

187
00:11:15,708 --> 00:11:19,688
because both, PyBind11 and Boost
have HTL container support.

188
00:11:20,358 --> 00:11:25,278
We could also, PyBind11 has a NumPy
header too, so we could also, and

189
00:11:25,288 --> 00:11:30,888
Boost Python has a NumPy sub module,
so they can also be, easily be

190
00:11:30,888 --> 00:11:32,468
parsed between those two languages.

191
00:11:32,778 --> 00:11:37,628
So the idea is, when we have heavy
compute related operations, the idea is

192
00:11:37,628 --> 00:11:41,768
to pick and choose them and move that
logic into C In terms of distribution,

193
00:11:41,768 --> 00:11:45,388
packaging, as you saw, like when I
run cec, when I run CEC and built it

194
00:11:45,388 --> 00:11:50,573
locally, I do get, for the I do get
like a do two.so files over here and

195
00:11:50,573 --> 00:11:52,843
on and for, C and for Boost Python.

196
00:11:52,843 --> 00:11:55,603
Then I also get a boost,
boost module Do so file here.

197
00:11:55,963 --> 00:11:59,713
So the data, so file can essentially
be added to the Python path, and

198
00:11:59,713 --> 00:12:01,453
then the Python scripts can be run.

199
00:12:01,903 --> 00:12:06,343
But, but for larger projects, the idea
is to, use, create a pip installable

200
00:12:06,343 --> 00:12:08,768
package where you use setup p or psych.

201
00:12:08,788 --> 00:12:13,123
Or you can also use psyche.build
to publish the pipe or any

202
00:12:13,123 --> 00:12:15,933
other container registry that,
that is of the user's choice.

203
00:12:16,173 --> 00:12:20,323
So I have a simple P through which I
could, Push it, push the Pi by module

204
00:12:20,343 --> 00:12:22,193
to a content registry of my choice.

205
00:12:22,733 --> 00:12:26,363
And others can just grab that module
and then, add it to and install

206
00:12:26,363 --> 00:12:27,903
it in their virtual environment.

207
00:12:27,913 --> 00:12:30,433
And then essentially, run their scripts.

208
00:12:30,933 --> 00:12:32,403
But, given all this, right?

209
00:12:32,413 --> 00:12:34,443
So what about the overall
binding performance?

210
00:12:34,453 --> 00:12:40,703
the idea is to, move part pieces of
code and read them, in C and then make

211
00:12:40,783 --> 00:12:45,123
the two code, make the C code and the
Python code talk to each other, but then,

212
00:12:45,143 --> 00:12:48,343
but in terms of binding performance,
are we like, are there any overheads?

213
00:12:48,643 --> 00:12:50,033
There are definitely overheads, right?

214
00:12:50,033 --> 00:12:53,013
Because data needs to go back and
forth between C objects and Py objects.

215
00:12:53,733 --> 00:12:55,553
There's an implementation
difference between Boost.

216
00:12:55,553 --> 00:13:00,123
py and PyBind11, where PyBind11,
everything is like a smart pointer,

217
00:13:00,403 --> 00:13:04,803
so it heavily relies on smart pointers
and vectors, so it makes things slower.

218
00:13:05,303 --> 00:13:08,913
So it's very imperative that we
choose the right parts of our code

219
00:13:08,913 --> 00:13:09,983
and product that need to be optimized.

220
00:13:10,873 --> 00:13:13,863
I did find some benchmarks
online that said Boost Python

221
00:13:13,863 --> 00:13:15,533
is slightly faster than PyPy11.

222
00:13:15,533 --> 00:13:20,613
And of course, C and Python are like,
raw C and raw Python are much faster.

223
00:13:21,413 --> 00:13:24,663
but there are some countermeasures
that we can take to be, cautious.

224
00:13:25,283 --> 00:13:28,943
Five 11 and Boost Python are special
types that directly bin Python and c plus.

225
00:13:29,003 --> 00:13:32,463
So we can directly use those objects
like ic, instead of passing the

226
00:13:32,463 --> 00:13:36,848
data, we can also use optimized
type findings like, array T double.

227
00:13:37,348 --> 00:13:40,563
And we can also use smart pointers
instead of regular pointers.

228
00:13:40,613 --> 00:13:44,363
because by being, garbage
collected language, we can

229
00:13:44,363 --> 00:13:45,743
avoid the whole landing pointer.

230
00:13:46,328 --> 00:13:46,638
Problem.

231
00:13:47,138 --> 00:13:51,298
There is, when we use both, PyBind11
and GhostPython, we actually create

232
00:13:51,298 --> 00:13:56,248
shared libraries where we statically
bind, the C code to Python, right?

233
00:13:56,548 --> 00:13:59,968
but, there is also another concept
called dynamic binding, through, that

234
00:13:59,998 --> 00:14:04,868
through another library called cppyy,
which directly writes C code into Python.

235
00:14:05,173 --> 00:14:11,613
So there is no need for any sort
of like compilation and, uh, like

236
00:14:11,623 --> 00:14:14,353
adding into Python path or putting
into a container history, we can

237
00:14:14,353 --> 00:14:16,253
just write C directly into Python.

238
00:14:16,713 --> 00:14:19,503
This is facilitated because
of the C Kling interpreter.

239
00:14:19,973 --> 00:14:23,793
In this screenshot, that you could
directly write this Python code using

240
00:14:23,793 --> 00:14:27,253
CPPY and then you could get that, you
can actually call it in the global

241
00:14:27,253 --> 00:14:29,353
namespace, and print the output.

242
00:14:29,883 --> 00:14:34,043
This is much, much faster than PyBrain
Python, and it's much more easy to use.

243
00:14:34,913 --> 00:14:38,658
The advantages are, as I said, There's
no setup, no installation compilation.

244
00:14:38,688 --> 00:14:41,918
It has a lot more support, for
templates, inheritance, callbacks, and

245
00:14:41,918 --> 00:14:44,508
lambdas and other modern C features.

246
00:14:44,848 --> 00:14:50,708
So the industry is moving towards using,
CVPYY, in cross language projects.

247
00:14:51,208 --> 00:14:55,318
So overall, the top takeaways are,
Boost Python and PyBind11 are excellent

248
00:14:55,328 --> 00:14:59,648
tools to blend the power of C and the
expressiveness, expressiveness of Python.

249
00:15:00,158 --> 00:15:02,778
if you're already part of a
Boost ecosystem, It's probably

250
00:15:02,778 --> 00:15:05,848
saner to use Boost Python and
use its robust set of features.

251
00:15:06,218 --> 00:15:08,948
if you just want a lightweight,
open source project, you can

252
00:15:08,948 --> 00:15:11,898
choose PyBind 11, but of course it
comes with performance overheads.

253
00:15:12,348 --> 00:15:16,758
but the, but in terms of like static
binding, the idea is very simple.

254
00:15:17,198 --> 00:15:20,948
Write the, choose which parts of
code that you want to edit in C use

255
00:15:20,948 --> 00:15:24,908
a module defining macro to expose
it, and then compile it as a shared

256
00:15:24,908 --> 00:15:27,548
library, and import it in Python.

257
00:15:27,548 --> 00:15:31,418
But, and then you can also expose
it as a pip installable package,

258
00:15:31,418 --> 00:15:32,868
or, put it in a context registry.

259
00:15:33,248 --> 00:15:35,798
On the other hand, if you would like
to dynamically bind it, You can use

260
00:15:35,798 --> 00:15:40,848
cppyy that uses the cling interpreter
and for reference, all the code that

261
00:15:40,858 --> 00:15:43,498
have been mentioned in the slide
deck are in my GitHub repository.

262
00:15:43,498 --> 00:15:45,878
So feel free to check it out
in case you want to run if in

263
00:15:45,878 --> 00:15:49,208
case you want to run those code
locally and then get a feel of it.

264
00:15:49,708 --> 00:15:50,078
Thank you.

