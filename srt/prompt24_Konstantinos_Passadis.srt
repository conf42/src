1
00:00:00,270 --> 00:00:01,170
Welcome everyone.

2
00:00:01,940 --> 00:00:07,879
Today we're going to discuss Azure AI,
Azure Prompt Flow, Vectors, and Appendix.

3
00:00:08,209 --> 00:00:13,339
And we're going to see our end
to end chatbot where we can

4
00:00:13,339 --> 00:00:16,229
interact with for our own data.

5
00:00:16,729 --> 00:00:23,089
I have chosen this presentation and
this demonstration to show how easy

6
00:00:23,099 --> 00:00:30,179
it is for us to create actually
our own generative AI deployment.

7
00:00:30,724 --> 00:00:36,264
Integrate it into our web app without
touching a single line of code.

8
00:00:36,984 --> 00:00:44,194
It is very easy to start with and it is
very user friendly and beginner friendly.

9
00:00:44,674 --> 00:00:53,104
So someone that starts now their journey
with the AI technologies, Azure and the

10
00:00:53,104 --> 00:00:58,524
prompting from the engineering, this
presentation may be very beneficial

11
00:00:58,914 --> 00:01:01,604
for you, but enough about it.

12
00:01:02,394 --> 00:01:03,094
Let's see.

13
00:01:03,684 --> 00:01:04,764
Who am I?

14
00:01:05,374 --> 00:01:06,464
I am Konstantinos.

15
00:01:07,454 --> 00:01:10,774
Pasalis is my last name, and
I'm calling from Athens, Greece.

16
00:01:11,274 --> 00:01:16,624
You can find a lot of my projects,
including this in my GitHub, where

17
00:01:16,624 --> 00:01:18,314
it is displayed on the screen.

18
00:01:19,104 --> 00:01:22,784
I'm a Microsoft Azure
MVP certified trainer.

19
00:01:23,694 --> 00:01:28,724
I pursue a lot of certifications
when I have the time to do I work

20
00:01:28,724 --> 00:01:33,754
as a solutions architect here in
Athens for a multinational company.

21
00:01:33,775 --> 00:01:41,054
I enjoy solving complex problems,
especially when it comes to hybrid

22
00:01:41,054 --> 00:01:45,414
technologies, multi cloud, data
and analytics, and of course,

23
00:01:45,914 --> 00:01:47,974
artificial intelligence, AI.

24
00:01:48,474 --> 00:01:51,554
Let's see what we're
going to discuss today.

25
00:01:52,424 --> 00:01:56,974
We're going to see how we can
create our own PromptFlow and

26
00:01:57,094 --> 00:02:04,934
deploy this PromptFlow into our
Azure subscription using AI studio.

27
00:02:05,434 --> 00:02:11,694
There are some basic blocks that
construct the sum of our solution.

28
00:02:12,194 --> 00:02:15,214
The tools we're going to use,
of course, and the services we

29
00:02:15,214 --> 00:02:17,254
need is an Azure subscription.

30
00:02:17,464 --> 00:02:24,764
You can create a free one, with, A number
of credits around 200 for 30 days, which

31
00:02:24,774 --> 00:02:31,484
you have, you will have access to all
services, including AI studio and open AI.

32
00:02:31,984 --> 00:02:39,274
We're going to need an Azure AI search for
us to have a vector database and store.

33
00:02:39,704 --> 00:02:47,774
Our data for indexing and we're going to
publish our prompt flow as an Azure web

34
00:02:47,904 --> 00:02:50,594
app, which in fact will be our endpoint.

35
00:02:51,114 --> 00:02:53,774
It will be an API endpoint
at the end of the day.

36
00:02:54,434 --> 00:02:55,934
So let's see.

37
00:02:56,334 --> 00:03:02,094
We need, of course, our Visual Studio
code for our developer, actions.

38
00:03:02,114 --> 00:03:04,184
Our developer workstation would be that.

39
00:03:04,474 --> 00:03:05,554
I'm using this code.

40
00:03:05,684 --> 00:03:08,034
You can use whatever ID you prefer to.

41
00:03:08,534 --> 00:03:13,984
What we're going to do is that once
we have our Azure subscription at

42
00:03:14,024 --> 00:03:18,014
hand, we're going to deploy our index.

43
00:03:18,514 --> 00:03:23,814
We're going to utilize AI studio
machine learning and our open AI model.

44
00:03:24,674 --> 00:03:29,094
And finally, publish our
PromFlow as a web app endpoint.

45
00:03:29,594 --> 00:03:32,484
This is going to be a Flask web app.

46
00:03:32,984 --> 00:03:38,134
We need the basic tier
for Azure AI search.

47
00:03:38,634 --> 00:03:44,224
We're going to use machine learning
workspace, and we're going to see

48
00:03:44,234 --> 00:03:47,494
how easy it is to interact with it.

49
00:03:47,814 --> 00:03:50,084
You don't need to create nothing else.

50
00:03:50,154 --> 00:03:56,904
Everything will be created for us in the
process of this prompt flow creation.

51
00:03:57,224 --> 00:04:00,104
It's actually will be created.

52
00:04:00,579 --> 00:04:05,589
When you create your first Azure AI
Hub, everything will be created for

53
00:04:05,589 --> 00:04:07,379
you, including the storage accounts.

54
00:04:07,879 --> 00:04:11,569
The serverless compute is something
that we're going to select when

55
00:04:11,569 --> 00:04:13,769
we want to build our PromFlow.

56
00:04:14,269 --> 00:04:18,609
And of course, platform as a service,
we can scale out, we can scale

57
00:04:18,619 --> 00:04:20,859
up, we can use our custom domain.

58
00:04:20,919 --> 00:04:24,309
And of course, it supports TLS.

59
00:04:24,724 --> 00:04:25,354
End to end.

60
00:04:25,854 --> 00:04:29,054
What is the, this aspect of problem flow?

61
00:04:29,554 --> 00:04:33,754
And because there are a lot of
examples, the one that I have chosen

62
00:04:33,864 --> 00:04:36,644
is what you see here on your screen.

63
00:04:37,144 --> 00:04:42,314
It's actually a bunch of PDF
documents, which is our data.

64
00:04:42,814 --> 00:04:49,424
We're going to throw them into our index,
which actually are stored in an Azure

65
00:04:49,434 --> 00:04:51,154
storage account, but we don't care.

66
00:04:51,424 --> 00:04:55,094
Just throw them through the
user interface and they are

67
00:04:55,094 --> 00:04:56,764
stored in this storage account.

68
00:04:57,264 --> 00:05:05,474
The index is creating the vectors
for this data, and we have already

69
00:05:05,654 --> 00:05:11,204
at our hands the ability to create
this prompt flow based on our data.

70
00:05:11,704 --> 00:05:16,434
When we start interacting ultimately
with the endpoint will be able to

71
00:05:16,644 --> 00:05:19,764
answer any question about this data.

72
00:05:20,694 --> 00:05:26,764
We have also control over the
system prompt and warn users.

73
00:05:27,364 --> 00:05:29,654
In case they ask anything irrelevant.

74
00:05:30,154 --> 00:05:35,734
So if you want to have a deeper look
in the pro flow deployment guide,

75
00:05:35,914 --> 00:05:42,384
this is a diagram where you first have
to identify your business use case.

76
00:05:42,674 --> 00:05:47,509
You have to collect your sample data
and learn how to build the basic prompt.

77
00:05:48,169 --> 00:05:51,589
Develop this flow based on the
prompt to extend the capability

78
00:05:51,659 --> 00:05:53,339
and then start experimenting.

79
00:05:53,839 --> 00:05:55,789
It's actually the tuning phase.

80
00:05:55,919 --> 00:06:00,769
And then after the experimentation,
you start evaluating and refining

81
00:06:01,079 --> 00:06:03,949
your, final version of it.

82
00:06:04,109 --> 00:06:06,809
And then you are ready to deploy.

83
00:06:07,309 --> 00:06:08,389
Let's go to our demo.

84
00:06:08,889 --> 00:06:13,129
Our demo consists of, several

85
00:06:13,629 --> 00:06:14,849
parts, let's say.

86
00:06:14,919 --> 00:06:17,249
Okay, so let's see.

87
00:06:17,634 --> 00:06:20,604
What is this for us?

88
00:06:20,654 --> 00:06:21,854
What does this mean?

89
00:06:22,324 --> 00:06:22,744
Sorry.

90
00:06:23,294 --> 00:06:24,754
what we need is our portal.

91
00:06:24,754 --> 00:06:25,354
Portal.

92
00:06:26,134 --> 00:06:27,464
azure.

93
00:06:27,504 --> 00:06:32,474
com is where we get
access to our resources.

94
00:06:32,794 --> 00:06:37,334
We're going to need a resource
group, which I have already created.

95
00:06:38,304 --> 00:06:45,914
Resource groups are, Containers that hold
our resources into a logical separation.

96
00:06:46,394 --> 00:06:52,514
Okay, so we have here our resource
group that contains our resources.

97
00:06:53,014 --> 00:06:57,434
I have already built the Prompt Flow,
but we can build it together again.

98
00:06:57,934 --> 00:06:59,914
Some important, remarks here.

99
00:07:00,414 --> 00:07:03,157
First of all, we need an Azure AI Hub.

100
00:07:03,157 --> 00:07:11,224
An Azure AI Hub is a resource in Azure AI
Studio, where you can have your Azure IAM.

101
00:07:11,724 --> 00:07:17,644
All your resources are there, one
networking, and you can create

102
00:07:17,664 --> 00:07:20,294
different projects under this hub.

103
00:07:20,794 --> 00:07:25,224
So you can see here the parent
resource, which is an AI hub.

104
00:07:25,454 --> 00:07:29,644
And into this hub, you deploy
your different projects.

105
00:07:29,644 --> 00:07:34,574
For example, you can have projects that
are dealing only with prompt flows.

106
00:07:34,654 --> 00:07:39,694
You can have another project that deals
only with chat completions and so on.

107
00:07:40,424 --> 00:07:41,154
The hub.

108
00:07:41,879 --> 00:07:46,409
It's the infrastructure, let's
say, that holds all our projects.

109
00:07:47,079 --> 00:07:50,859
You can apply different network
configurations and so on.

110
00:07:51,359 --> 00:07:57,509
So once we create our AI hub,
then we create our project.

111
00:07:58,009 --> 00:08:02,879
We can select our project
and start creating.

112
00:08:02,989 --> 00:08:06,709
As you can see, everything will
be done through the interface.

113
00:08:07,189 --> 00:08:11,629
Again, it's a very user
friendly deployment.

114
00:08:12,129 --> 00:08:17,049
Especially for people that are
just starting to deal with prompt

115
00:08:17,049 --> 00:08:23,749
engineering, prompts in general,
and want to have a deeper look into

116
00:08:23,929 --> 00:08:26,529
Microsoft's technology being Azure.

117
00:08:27,029 --> 00:08:30,569
Of course, Azure AI and
Azure Machine Learning.

118
00:08:31,069 --> 00:08:36,899
When we want to create a new, AI hub, all
we have to do is go to Azure AI Studio.

119
00:08:37,529 --> 00:08:39,329
The address is ai.

120
00:08:39,329 --> 00:08:39,379
azure.

121
00:08:39,379 --> 00:08:39,689
com.

122
00:08:40,189 --> 00:08:43,159
And from there We can create a new hub.

123
00:08:43,659 --> 00:08:49,219
The hubs, as we said earlier, is the
main Azure resource for studio, and

124
00:08:49,219 --> 00:08:53,049
we have access to a number of models.

125
00:08:53,099 --> 00:08:55,659
We have access to fine tuning, evaluation.

126
00:08:56,559 --> 00:09:05,059
We can also include OpenAI resources and,
extend our capabilities because Azure

127
00:09:05,149 --> 00:09:13,469
OpenAI is a different type of resource
and it's limited to OpenAI, but Azure AI

128
00:09:13,469 --> 00:09:19,449
Studio and Azure AI in general includes
Models from other vendors as well.

129
00:09:19,949 --> 00:09:24,299
So we have created our hub and
then we create our project.

130
00:09:24,799 --> 00:09:28,509
If I click here on the project,
you will see that I have these

131
00:09:28,539 --> 00:09:30,339
flows, which I have created.

132
00:09:30,349 --> 00:09:36,279
But I have also an open AI
resource and other deployment

133
00:09:36,289 --> 00:09:39,589
here and another flow here.

134
00:09:40,089 --> 00:09:44,879
The underlying infrastructure
is more than this.

135
00:09:44,909 --> 00:09:46,289
And let's have a quick look.

136
00:09:46,789 --> 00:09:50,539
The underlying infrastructure
includes storage.

137
00:09:51,039 --> 00:09:55,559
I have connected an AI search
service, which is needed when we want

138
00:09:55,569 --> 00:10:00,239
to vectorize and create embeddings
and store them for our data.

139
00:10:00,739 --> 00:10:05,239
And Azure Key Vault, for you that
you don't understand what Key

140
00:10:05,239 --> 00:10:09,109
Vault is a resource where you can
store your connection strings,

141
00:10:10,069 --> 00:10:12,689
secrets, certificates, and so on.

142
00:10:13,319 --> 00:10:19,059
And instead of including these
Details into your code for your

143
00:10:19,059 --> 00:10:21,779
integration between different services.

144
00:10:21,999 --> 00:10:25,839
You just refer to these
from the Key Vault service.

145
00:10:26,339 --> 00:10:32,119
A container registry, which is needed
by Azure to store the images we create,

146
00:10:32,209 --> 00:10:37,109
because when we create a new prompt
flow, it actually creates a container

147
00:10:37,119 --> 00:10:42,869
and OpenAI, as you saw earlier,
resource and the hub and the project.

148
00:10:43,399 --> 00:10:44,029
That's simple.

149
00:10:44,529 --> 00:10:46,284
Let's return to AI Studio.

150
00:10:46,784 --> 00:10:48,424
So here we are in our ai.

151
00:10:48,604 --> 00:10:49,414
azure.

152
00:10:49,454 --> 00:10:52,704
com, we have created a
hub and a new project.

153
00:10:53,204 --> 00:10:58,704
Let's say that we want to start using
and creating our first prompt flow.

154
00:10:59,204 --> 00:11:01,164
We need to start from the indexes.

155
00:11:01,664 --> 00:11:05,814
So if we don't have an index,
we need to create it, of course.

156
00:11:06,314 --> 00:11:08,214
So if I click here, new index,

157
00:11:08,714 --> 00:11:11,174
you need to select your data.

158
00:11:11,674 --> 00:11:13,024
Where is your data?

159
00:11:13,724 --> 00:11:16,024
Is it already in Azure AI Search?

160
00:11:16,874 --> 00:11:19,494
Have you brought it over in AI Studio?

161
00:11:20,084 --> 00:11:22,184
Is it another blob storage?

162
00:11:22,864 --> 00:11:24,064
Is it a storage URL?

163
00:11:24,104 --> 00:11:26,144
Or you can upload your files.

164
00:11:26,524 --> 00:11:28,434
I want to upload my files right now.

165
00:11:28,724 --> 00:11:30,554
So let's go and upload our files.

166
00:11:31,144 --> 00:11:36,954
For your information, the files
that I have selected are going to be

167
00:11:37,454 --> 00:11:43,294
files that refer to, Microsoft licensing.

168
00:11:43,794 --> 00:11:45,564
I'm going to explain what I mean.

169
00:11:45,704 --> 00:11:47,974
So we know what we are going to deal with.

170
00:11:48,034 --> 00:11:53,164
Let me upload this data and I'm going
to show you what this data is about.

171
00:11:53,664 --> 00:11:58,354
So this data is a number
of PDF files, as you saw.

172
00:11:58,854 --> 00:12:01,484
Let me share my screen from this point.

173
00:12:02,434 --> 00:12:04,574
And let's open

174
00:12:05,074 --> 00:12:06,564
one or two PDFs.

175
00:12:06,574 --> 00:12:07,464
Let's see this one.

176
00:12:07,894 --> 00:12:09,444
Licensing Windows 10.

177
00:12:10,014 --> 00:12:15,174
So this type of data is
like this, looks like this.

178
00:12:15,874 --> 00:12:21,204
All of these are, one or two
pages PDF files that explain.

179
00:12:21,704 --> 00:12:26,574
The licensing options of
different Microsoft services.

180
00:12:26,674 --> 00:12:29,294
Here we have Windows 10, for example.

181
00:12:29,794 --> 00:12:32,934
Here we have Office 2019,

182
00:12:33,434 --> 00:12:33,874
right?

183
00:12:34,684 --> 00:12:39,584
So we're going to ask questions
through our prompt flow and see how

184
00:12:39,594 --> 00:12:44,844
the model responds based on the data
that it has extracted from these PDFs.

185
00:12:45,344 --> 00:12:45,744
All right.

186
00:12:45,744 --> 00:12:49,424
So I have uploaded my data
and I'm clicking next.

187
00:12:49,924 --> 00:12:52,694
In case you forgot to create
your AI search service.

188
00:12:53,194 --> 00:12:56,664
You have the ability to create
a new AI search resource.

189
00:12:57,164 --> 00:13:00,954
In our case, we have it
ready and it's this one.

190
00:13:01,814 --> 00:13:06,344
So I can create the vector
index, I can give it my own name.

191
00:13:06,754 --> 00:13:12,314
So let's say that this
is files from the GLR001.

192
00:13:12,814 --> 00:13:15,174
This is going to be our vector index.

193
00:13:15,674 --> 00:13:22,539
Now, the virtual machine is the
computing power needed to run it.

194
00:13:23,039 --> 00:13:28,969
Extract data, break it into chunks,
and store it into our AI search.

195
00:13:29,489 --> 00:13:35,499
We can leave it to auto select unless
we have specific requirements, or we can

196
00:13:35,519 --> 00:13:39,099
just leave it to auto select, and I'm
going to leave it to auto select for now.

197
00:13:39,599 --> 00:13:44,129
We need, of course, to add vector
search to this resource, and you can

198
00:13:44,129 --> 00:13:48,909
see here that in order to create this
vector search, it needs an OpenAI

199
00:13:49,089 --> 00:13:56,659
connection with The relevant embeddings
deployment in order to create the

200
00:13:56,659 --> 00:14:00,679
embeddings from the data and store it
back to the search service that we have.

201
00:14:01,179 --> 00:14:04,689
So I have already here
my OpenAI connection.

202
00:14:05,189 --> 00:14:07,289
And I'm just going to click next.

203
00:14:07,789 --> 00:14:09,829
We are ready to create our index.

204
00:14:09,899 --> 00:14:13,999
Let's say, okay, create the vector index.

205
00:14:14,499 --> 00:14:16,919
And it started creating it.

206
00:14:17,419 --> 00:14:22,939
Now I will go back, not back,
I will change my screen to ml.

207
00:14:22,979 --> 00:14:23,129
azure.

208
00:14:23,179 --> 00:14:23,509
com.

209
00:14:24,329 --> 00:14:26,579
This is the machine learning.

210
00:14:27,204 --> 00:14:29,264
Studio workspace.

211
00:14:29,764 --> 00:14:34,254
We can select different workspaces
based on which, ones are assigned

212
00:14:34,264 --> 00:14:35,874
to our account and so on.

213
00:14:36,184 --> 00:14:37,984
I have already opened ml.

214
00:14:37,984 --> 00:14:39,024
azure.

215
00:14:39,064 --> 00:14:42,314
com and selected the specific workspace.

216
00:14:42,434 --> 00:14:45,814
It has the same name from our AI project.

217
00:14:46,314 --> 00:14:52,014
You can see here that I have also
this option, Prompt Flow, which is

218
00:14:52,044 --> 00:14:55,074
actually the same one if I go here and.

219
00:14:55,699 --> 00:14:57,169
Select PromptFlow,

220
00:14:57,669 --> 00:14:58,059
this one,

221
00:14:58,559 --> 00:15:02,619
let's give it a moment to
finalize the, indexing.

222
00:15:03,529 --> 00:15:07,929
If I click here to job details, you
would see that I'm taken directly

223
00:15:08,669 --> 00:15:10,329
to the machine learning workspace.

224
00:15:11,009 --> 00:15:12,739
This is where everything happens.

225
00:15:13,089 --> 00:15:13,469
Okay.

226
00:15:14,149 --> 00:15:20,839
You can say that the underlying
mechanisms of indexing the PromptFlow

227
00:15:20,839 --> 00:15:26,679
creation, the deployment Are done
into the machine learning workspace.

228
00:15:27,179 --> 00:15:29,259
We don't need a separate workspace.

229
00:15:29,409 --> 00:15:35,999
If we create with the method of creating
the Azure AI Hub and the Azure AI

230
00:15:35,999 --> 00:15:42,729
project, we're given also this machine
learning workspace for our operations.

231
00:15:42,729 --> 00:15:46,489
If you want to have a quick
look in what's going on here.

232
00:15:46,989 --> 00:15:53,329
You will understand by this, selections
that we are in the process of cracking

233
00:15:53,349 --> 00:15:58,819
the documents, creating chunks out of
them, and generating the embeddings.

234
00:15:58,819 --> 00:16:04,219
Once the embeddings are generated,
they are stored back into the

235
00:16:04,219 --> 00:16:10,989
Azure AI search resource, and it is
registered as a new vector index.

236
00:16:11,489 --> 00:16:16,049
It's going to take some moments,
but in the meantime, we can

237
00:16:16,049 --> 00:16:18,709
start creating our prompt flow.

238
00:16:19,209 --> 00:16:21,839
So prompt flow and create.

239
00:16:22,339 --> 00:16:25,479
From here, there are
already templates for us.

240
00:16:25,489 --> 00:16:30,599
So our life is much, much easier,
especially when we want to build something

241
00:16:30,619 --> 00:16:32,720
that is not ready for production.

242
00:16:32,720 --> 00:16:35,489
We just want to understand the service.

243
00:16:35,529 --> 00:16:38,119
We just want to see how
that goes, how it works.

244
00:16:38,619 --> 00:16:41,929
So the easier thing for
me and my suggestion is.

245
00:16:42,429 --> 00:16:45,969
To select one of the available ones.

246
00:16:45,979 --> 00:16:47,989
So Q& A on your data.

247
00:16:48,489 --> 00:16:49,709
What better than this?

248
00:16:50,029 --> 00:16:57,199
Let's clone this one and let's
say it conf 42 pl prompt flow pf.

249
00:16:57,699 --> 00:16:58,119
Perfect.

250
00:16:58,619 --> 00:17:05,154
Now when I clone this one, it is
Provided to us with the default

251
00:17:05,164 --> 00:17:07,234
options from the template.

252
00:17:07,444 --> 00:17:12,004
We're going to work on this and
don't imagine very hard work.

253
00:17:12,744 --> 00:17:16,364
It's very easy to change
it to fit our own case.

254
00:17:16,864 --> 00:17:22,854
So we just cloned a template for our
prompt flow from the available templates.

255
00:17:23,354 --> 00:17:25,524
Let's see also how our job goes.

256
00:17:26,444 --> 00:17:28,124
It's continuing cracking.

257
00:17:28,184 --> 00:17:32,044
I have selected a number of documents,
so it's going to take some time.

258
00:17:32,544 --> 00:17:34,894
So let's return to our flow now.

259
00:17:35,394 --> 00:17:38,414
You can see that the interface
in Azure AI studio, it's the

260
00:17:38,414 --> 00:17:41,094
same as here in machine learning.

261
00:17:41,514 --> 00:17:41,964
Okay.

262
00:17:42,034 --> 00:17:46,854
And you see here in machine learning,
the new prompt flow is already available.

263
00:17:47,104 --> 00:17:50,494
it's the same underlying, offering.

264
00:17:50,634 --> 00:17:51,034
Okay.

265
00:17:51,524 --> 00:17:52,324
Everything is here.

266
00:17:53,004 --> 00:17:58,504
So no matter if you like to work
from a Azure AI studio or machine

267
00:17:58,504 --> 00:18:00,144
learning, it doesn't matter.

268
00:18:00,234 --> 00:18:00,504
It's just.

269
00:18:01,124 --> 00:18:01,884
Simply the same.

270
00:18:02,434 --> 00:18:03,534
what do we need to do?

271
00:18:04,484 --> 00:18:09,154
Our demand here is first
about the question.

272
00:18:09,614 --> 00:18:11,384
We need dynamic questions.

273
00:18:11,644 --> 00:18:13,274
We don't need just one question.

274
00:18:13,774 --> 00:18:19,044
in our case, this one
will be changed to this.

275
00:18:19,544 --> 00:18:25,024
I will continue with the next steps,
but first of all, I need to start a

276
00:18:25,024 --> 00:18:28,104
compute session, so I can save my flow.

277
00:18:28,604 --> 00:18:35,714
Execute it once or two or twice and see
how it works for me and it is just a

278
00:18:35,764 --> 00:18:41,334
compute session that it's only for the
purpose of running it and testing it.

279
00:18:42,124 --> 00:18:45,254
It's not, a compute session
that will stay here forever.

280
00:18:46,194 --> 00:18:50,204
So I can just click here and
machine learning will select the

281
00:18:50,204 --> 00:18:56,294
serverless compute for me and will
facilitate my testing process and

282
00:18:56,304 --> 00:18:58,124
my prone flow creation process.

283
00:18:58,124 --> 00:18:58,299
very much.

284
00:18:58,799 --> 00:19:04,539
Because it needs computing power and
that's the computer session four.

285
00:19:05,039 --> 00:19:07,419
So we have two jobs running right now.

286
00:19:07,719 --> 00:19:14,949
One is the job that creates
the vector index from our data.

287
00:19:15,789 --> 00:19:20,129
And the other one is the compute
session that is starting right now.

288
00:19:20,629 --> 00:19:27,019
One very important detail, especially
when you are working with free.

289
00:19:27,809 --> 00:19:32,899
offerings of Azure, the pre
trial for example, you may start

290
00:19:32,929 --> 00:19:35,489
creating more and more resources.

291
00:19:35,989 --> 00:19:42,759
There is a very high probability that
you may fall under the quota limits.

292
00:19:42,759 --> 00:19:51,819
Azure has some limitations
regarding quotas, as it is named.

293
00:19:52,399 --> 00:19:55,839
And it means that I cannot
have, for example, more.

294
00:19:56,479 --> 00:20:04,279
than 16 CPUs per region, or I
cannot have more than, say, five,

295
00:20:05,209 --> 00:20:07,949
virtual machines in other regions.

296
00:20:08,449 --> 00:20:13,869
So when you are experimenting,
remember to delete everything after

297
00:20:13,879 --> 00:20:15,249
you finished your experiments.

298
00:20:15,749 --> 00:20:21,549
In case you want to keep it,
make sure that you are creating a

299
00:20:21,579 --> 00:20:24,319
stronger resource so it can fit.

300
00:20:25,134 --> 00:20:27,224
All of your paradigms there.

301
00:20:27,724 --> 00:20:28,704
Be careful or not.

302
00:20:29,204 --> 00:20:36,554
Our pipeline, it's coming to an end,
and the vector index will be created.

303
00:20:37,084 --> 00:20:38,024
Let's see here.

304
00:20:38,694 --> 00:20:42,814
We are waiting for the
computer session to start.

305
00:20:43,314 --> 00:20:47,054
And let's move on by
editing our prompt flow.

306
00:20:47,054 --> 00:20:53,474
We started by removing this
question and adding the quotes.

307
00:20:53,664 --> 00:20:56,244
This is going to be a dynamic
question when we deploy it.

308
00:20:56,344 --> 00:21:01,914
So we want to have the ability
to provide any questions we want.

309
00:21:02,414 --> 00:21:03,394
You can see here that it's.

310
00:21:04,014 --> 00:21:07,504
broken into different, sections, right?

311
00:21:07,554 --> 00:21:09,654
The first section is this one, the inputs.

312
00:21:10,154 --> 00:21:11,534
Then we have the outputs.

313
00:21:12,034 --> 00:21:13,064
Then we have the lookup.

314
00:21:13,564 --> 00:21:20,354
Here is the lookup section where we
can, of course, integrate other LLMs,

315
00:21:20,854 --> 00:21:23,764
extend the ProFlow or add our own code.

316
00:21:24,234 --> 00:21:25,444
We have the ability to.

317
00:21:25,984 --> 00:21:30,604
To extend the whole template to
our own liking, but we're going

318
00:21:30,604 --> 00:21:32,404
to keep this one for our case.

319
00:21:33,204 --> 00:21:38,504
So in the lookup, we need to
provide a mechanism to the flow to

320
00:21:38,504 --> 00:21:41,364
be able to understand the context.

321
00:21:41,744 --> 00:21:48,414
Okay, so the lookup function will
set, I'm sorry, will set the index,

322
00:21:48,584 --> 00:21:50,454
which index I'm going to use.

323
00:21:51,164 --> 00:21:54,299
we're waiting for the
Computer session to start.

324
00:21:54,379 --> 00:21:56,309
So let's give it a moment here.

325
00:21:56,439 --> 00:21:56,959
Okay.

326
00:21:57,459 --> 00:21:59,159
The index is completed.

327
00:21:59,819 --> 00:22:01,889
So that's a good start.

328
00:22:02,389 --> 00:22:05,779
And let's wait for the compute session.

329
00:22:06,279 --> 00:22:07,759
Yes, it is starting.

330
00:22:08,259 --> 00:22:09,239
Let me see.

331
00:22:09,639 --> 00:22:13,279
We can go here in the front flow menu.

332
00:22:13,399 --> 00:22:15,539
You can see other front flows as well.

333
00:22:16,039 --> 00:22:21,639
The compute session used to be this one,
this runtime, but it has been removed.

334
00:22:22,339 --> 00:22:24,879
And it is renamed to Compute Session.

335
00:22:25,379 --> 00:22:30,809
So all we have to do is go to
the Prompt Flow and just click

336
00:22:30,809 --> 00:22:32,469
on the Start Compute Session.

337
00:22:32,749 --> 00:22:35,789
Of course, we can create our own here.

338
00:22:36,379 --> 00:22:40,229
As you saw from the dropdown,
we can select different details

339
00:22:40,229 --> 00:22:41,979
for our Compute Session.

340
00:22:42,479 --> 00:22:43,949
All right, let's continue.

341
00:22:44,349 --> 00:22:50,159
Now, here you can see that we have
already the Python code that will

342
00:22:50,169 --> 00:22:52,459
generate the context for the prompt.

343
00:22:52,959 --> 00:22:57,159
Again, we don't need to intervene
anywhere in this process.

344
00:22:57,249 --> 00:22:59,519
It's already there for us.

345
00:23:00,019 --> 00:23:02,999
Now, you're noticing this
activateConfig thing.

346
00:23:03,499 --> 00:23:05,849
Our computer session is ready, by the way.

347
00:23:06,719 --> 00:23:12,029
This activateConfig is like a
conditional function for our prompt

348
00:23:12,029 --> 00:23:17,209
flow, and it says that it's If this

349
00:23:17,709 --> 00:23:24,999
thing stands or happens, or if, when
this thing is this one, is string or

350
00:23:25,009 --> 00:23:31,829
double, okay, when this condition,
let's say, exists, then you're

351
00:23:31,869 --> 00:23:33,469
going to activate this section.

352
00:23:33,969 --> 00:23:40,949
And if we start seeing around, you can
see that it is the same for every section.

353
00:23:41,739 --> 00:23:47,069
So we can say that if this
condition stands, then In that case,

354
00:23:47,069 --> 00:23:48,629
you're going to run this section.

355
00:23:48,859 --> 00:23:49,179
Okay.

356
00:23:49,739 --> 00:23:53,509
I'm just, highlighting this because
you're going to find it here.

357
00:23:53,659 --> 00:23:56,369
You're going to wonder
what this activate config.

358
00:23:56,999 --> 00:23:59,979
For now, we don't need
to have this conditional.

359
00:24:00,479 --> 00:24:01,989
Configuration activation.

360
00:24:02,129 --> 00:24:03,999
Every section is needed.

361
00:24:04,889 --> 00:24:05,849
So let's continue.

362
00:24:06,529 --> 00:24:13,029
Again, let's, because the computer session
started, it resetted our initial question.

363
00:24:13,029 --> 00:24:17,059
Again, let's set it to, double
quotes with an empty string.

364
00:24:17,559 --> 00:24:19,719
The output remains the same.

365
00:24:20,039 --> 00:24:21,819
We need to select our index.

366
00:24:21,819 --> 00:24:22,409
Let's go.

367
00:24:22,909 --> 00:24:25,539
What's the type of your index?

368
00:24:25,609 --> 00:24:26,659
It's the question.

369
00:24:26,789 --> 00:24:29,439
It's an Azure AI search index.

370
00:24:30,299 --> 00:24:32,499
Which service are you using?

371
00:24:32,509 --> 00:24:33,159
This one.

372
00:24:33,729 --> 00:24:35,499
What is your index?

373
00:24:35,999 --> 00:24:37,729
Which one is your index?

374
00:24:38,229 --> 00:24:43,069
It is created a few moments ago,
so it needs to search for it.

375
00:24:43,569 --> 00:24:44,389
it is,

376
00:24:44,889 --> 00:24:45,819
how did we name it?

377
00:24:46,319 --> 00:24:47,649
I don't remember the name.

378
00:24:47,879 --> 00:24:48,949
Let me find out.

379
00:24:49,449 --> 00:24:50,619
Yeah, we can leave it.

380
00:24:51,119 --> 00:24:51,469
The files.

381
00:24:51,469 --> 00:24:52,449
GLR.

382
00:24:52,539 --> 00:24:53,119
Okay.

383
00:24:53,409 --> 00:24:54,889
our index is the files.

384
00:24:54,889 --> 00:24:55,359
GRR.

385
00:24:55,559 --> 00:24:57,069
This is what we created.

386
00:24:57,199 --> 00:24:57,269
The

387
00:24:57,769 --> 00:24:58,489
content.

388
00:24:58,989 --> 00:24:59,849
The vector.

389
00:25:00,349 --> 00:25:02,399
I think we are good to go here.

390
00:25:02,419 --> 00:25:03,899
Semantic configuration.

391
00:25:04,399 --> 00:25:04,969
Default.

392
00:25:05,469 --> 00:25:07,239
It's Azure OpenAI.

393
00:25:07,739 --> 00:25:10,959
And here we are setting, the
configuration for the index.

394
00:25:11,829 --> 00:25:13,079
We have the ability.

395
00:25:13,079 --> 00:25:14,249
I've seen that it works.

396
00:25:14,279 --> 00:25:16,189
Let me see if we can just say.

397
00:25:16,599 --> 00:25:16,959
Okay.

398
00:25:17,189 --> 00:25:19,679
I need you to select this index for me.

399
00:25:20,089 --> 00:25:24,179
And yes, we can just select
it as you can see here and

400
00:25:24,259 --> 00:25:26,809
not add anything else matters.

401
00:25:27,199 --> 00:25:28,719
It's everything there for us.

402
00:25:29,119 --> 00:25:32,299
So the easiest thing is to
select the register index.

403
00:25:32,859 --> 00:25:37,079
I was not sure if this worked
every time, but it works now.

404
00:25:37,079 --> 00:25:41,239
So register index, it's the
easiest selection and you're just

405
00:25:41,249 --> 00:25:43,269
selecting the index we just created

406
00:25:43,769 --> 00:25:44,099
and save.

407
00:25:44,599 --> 00:25:47,369
let's go back and see
what we have selected.

408
00:25:47,379 --> 00:25:53,299
We set to the lookup function,
where we need to look for the index

409
00:25:53,299 --> 00:25:55,579
to be able to answer questions.

410
00:25:56,079 --> 00:25:57,609
And because we have that template.

411
00:25:58,164 --> 00:25:59,724
Q& A on your data.

412
00:25:59,994 --> 00:26:02,034
In that case, it needs an index, right?

413
00:26:02,064 --> 00:26:07,974
So we selected the registered index, and
it is registered because we already did

414
00:26:07,974 --> 00:26:12,824
it, and it is already registered into
the machine learning workspace for us.

415
00:26:13,344 --> 00:26:19,084
the inputs, the queries will be the
inputs question, the query type, we

416
00:26:19,084 --> 00:26:21,894
can say hybrid vector and keyword.

417
00:26:22,394 --> 00:26:26,164
We leave the default top
k, configuration, setting.

418
00:26:26,569 --> 00:26:31,019
Yeah, the code, no need to
touch anything, as I told you

419
00:26:31,019 --> 00:26:34,669
earlier, non deactivate config.

420
00:26:35,169 --> 00:26:39,859
The search results, of course, is the
object that you're going to, utilize

421
00:26:39,869 --> 00:26:41,509
the previous section of the lookup.

422
00:26:41,759 --> 00:26:43,299
And now the system message.

423
00:26:43,799 --> 00:26:46,659
Show you some details here.

424
00:26:46,719 --> 00:26:48,519
Now we have the system message.

425
00:26:49,019 --> 00:26:53,669
You're an AI assistant that helps users
answer questions given a specific context.

426
00:26:53,669 --> 00:26:57,929
You will be given a context and ask
a question based on that context.

427
00:26:57,939 --> 00:27:02,679
Your answer should be as precise
as possible and should only

428
00:27:02,729 --> 00:27:05,289
come from the context, right?

429
00:27:05,829 --> 00:27:11,389
Please add citation after each sentence
when possible in a form source citation.

430
00:27:11,389 --> 00:27:16,924
So for every answer that we're
going to Take back, we're going to

431
00:27:16,934 --> 00:27:22,844
be given also the citations where
they, this data came from, right?

432
00:27:23,344 --> 00:27:25,474
and there we have the variant.

433
00:27:25,474 --> 00:27:27,164
So let me go slowly.

434
00:27:27,664 --> 00:27:34,814
You can see here that this section,
where we read the system message, has the

435
00:27:34,814 --> 00:27:40,654
name variants, because we can use three
different variants, and we can have three

436
00:27:40,694 --> 00:27:44,234
different flavors for our PROM flow.

437
00:27:45,084 --> 00:27:50,284
And if I go to show variants, you're
going to see that I have the variant zero.

438
00:27:50,784 --> 00:27:53,474
The variant one and the variant two.

439
00:27:53,494 --> 00:27:57,744
Now I can change the system
message here, play a little bit

440
00:27:57,814 --> 00:28:01,754
with the context or if I want to
provide something else I can do it.

441
00:28:02,254 --> 00:28:07,274
And this allows me to have three
different flavors either for testing

442
00:28:07,314 --> 00:28:14,394
or if I want to be able to have a more
flexible deployment for my prompt flow.

443
00:28:15,039 --> 00:28:17,129
I don't want to use variants.

444
00:28:17,859 --> 00:28:23,759
I would like to use only the
default one, but for the testing

445
00:28:23,859 --> 00:28:25,669
purpose, we can use them.

446
00:28:26,279 --> 00:28:31,279
You will see that I have the ability
to say, okay, in the testing, just use

447
00:28:31,279 --> 00:28:33,589
the, the first variant and that's all.

448
00:28:34,089 --> 00:28:38,599
So let's ask a question here
for the testing purpose.

449
00:28:39,099 --> 00:28:45,598
What are the licensing options for.

450
00:28:46,098 --> 00:28:48,018
Windows 10.

451
00:28:48,518 --> 00:28:49,458
Let me save

452
00:28:49,958 --> 00:28:51,148
and let me run it.

453
00:28:51,648 --> 00:28:52,848
Ah, we need the question.

454
00:28:53,348 --> 00:28:58,718
We need to configure the question
and the answer question with context.

455
00:28:58,718 --> 00:28:59,608
Yes, of course.

456
00:29:00,108 --> 00:29:00,508
Question.

457
00:29:01,008 --> 00:29:03,518
Here, the connection with our OpenAI.

458
00:29:03,588 --> 00:29:05,808
Okay, I have the deployment here.

459
00:29:06,678 --> 00:29:08,118
I can use GPT 4 or GPT 4.

460
00:29:08,118 --> 00:29:08,998
0.

461
00:29:09,798 --> 00:29:11,818
Let me use the GPT 4.

462
00:29:12,798 --> 00:29:14,188
I can use chatter completion.

463
00:29:14,188 --> 00:29:14,553
Thank you for joining.

464
00:29:15,003 --> 00:29:20,203
Chat is now what is the most,
the latest deployments are, chat.

465
00:29:20,783 --> 00:29:23,743
So I can use text for the
response format or JSON.

466
00:29:23,963 --> 00:29:27,813
It depends on how my application
is going to take this out.

467
00:29:28,313 --> 00:29:29,653
Again, let me save.

468
00:29:30,153 --> 00:29:34,193
So for the answer the question with
context for each variant, we need

469
00:29:34,203 --> 00:29:38,713
to select our OpenAI connection
and select our model, right?

470
00:29:39,213 --> 00:29:41,923
Now it's saved and now I can press run.

471
00:29:42,333 --> 00:29:45,523
And now you can see that,
do you want to use all three

472
00:29:46,063 --> 00:29:48,323
variants or just use the default?

473
00:29:48,633 --> 00:29:54,003
So since we didn't went that far
to have different variants for our

474
00:29:54,003 --> 00:29:55,783
flow, we can use just the default.

475
00:29:55,853 --> 00:29:56,383
So submit.

476
00:29:56,523 --> 00:29:56,743
It's

477
00:29:57,243 --> 00:30:00,313
going to take some moments to run.

478
00:30:00,313 --> 00:30:04,123
You can see here that
every section is activated.

479
00:30:04,623 --> 00:30:05,983
I hope the question is there.

480
00:30:06,173 --> 00:30:07,073
Yes, it is.

481
00:30:07,573 --> 00:30:09,893
It is going through each phase.

482
00:30:10,463 --> 00:30:13,953
The lookup is completed, the
generate prompt is completed, the

483
00:30:14,193 --> 00:30:18,543
variant selection is completed,
and the answer is, generated.

484
00:30:18,543 --> 00:30:19,913
Let's see what we have here.

485
00:30:20,413 --> 00:30:23,693
Yes, you can see here that
we have already our answer.

486
00:30:23,813 --> 00:30:26,873
The output is that Windows 10
can be licensed through several

487
00:30:26,873 --> 00:30:32,953
options, sorry, and we have also the
citations that are just references

488
00:30:32,953 --> 00:30:36,253
to the PDF files that we have.

489
00:30:36,753 --> 00:30:37,633
Here is the output.

490
00:30:37,633 --> 00:30:38,483
I can just click it.

491
00:30:38,983 --> 00:30:42,843
And be taken there on the screen.

492
00:30:43,343 --> 00:30:44,303
That was it.

493
00:30:44,413 --> 00:30:46,113
We already tested it.

494
00:30:46,393 --> 00:30:48,023
And we are very happy with it.

495
00:30:48,143 --> 00:30:51,053
The answer is very,
constructed, as you can see.

496
00:30:51,553 --> 00:30:56,293
And yeah, we can view the full output
for you to be able to understand.

497
00:30:56,603 --> 00:30:56,963
Okay.

498
00:30:57,463 --> 00:30:58,703
And here is the,

499
00:30:59,203 --> 00:31:01,633
maybe assigned to any
device with no requirements.

500
00:31:01,643 --> 00:31:02,823
Yes, everything is there.

501
00:31:02,823 --> 00:31:08,193
So let's go back and see
everything in action.

502
00:31:08,693 --> 00:31:12,463
Let's say we're happy with our,
prod flow, since we tested it

503
00:31:12,463 --> 00:31:15,253
and returned our, output here.

504
00:31:15,753 --> 00:31:17,573
And let's see again the output.

505
00:31:17,643 --> 00:31:18,543
This is the output.

506
00:31:18,623 --> 00:31:21,263
Windows 10 can be licensed
through several options.

507
00:31:21,283 --> 00:31:23,453
One option is, and blah, blah, blah.

508
00:31:23,693 --> 00:31:24,033
Okay.

509
00:31:24,533 --> 00:31:25,473
Now what's next?

510
00:31:25,973 --> 00:31:28,253
The next phase is to
deploy this prod flow.

511
00:31:28,753 --> 00:31:34,123
Now, because it's going to take
a little bit of time, and We may

512
00:31:34,193 --> 00:31:37,373
not be able to see it end to end.

513
00:31:37,403 --> 00:31:41,843
I have already deployed it, but let's
go and see how we're going to deploy it.

514
00:31:42,343 --> 00:31:50,473
So let me change now this
question again to an empty string.

515
00:31:50,963 --> 00:31:54,773
So we have the ability to pass
the data through our web app as

516
00:31:54,773 --> 00:31:57,503
a dynamic content and save it.

517
00:31:58,003 --> 00:32:00,263
And then I can press deploy.

518
00:32:00,763 --> 00:32:01,473
It needs.

519
00:32:01,973 --> 00:32:07,253
An endpoint, a deployment, and of
course it needs a virtual machine.

520
00:32:07,753 --> 00:32:12,913
Now, I can select a very strong virtual
machine or I can select something that

521
00:32:12,913 --> 00:32:16,113
it is a little bit cheaper, for example.

522
00:32:16,613 --> 00:32:22,293
But we want to be a little bit fast here,
so I would leave this one with 10 cores.

523
00:32:22,653 --> 00:32:24,873
I just need only one instance.

524
00:32:24,893 --> 00:32:26,633
I don't need three of them.

525
00:32:27,133 --> 00:32:27,513
Okay.

526
00:32:27,513 --> 00:32:27,573
That's it.

527
00:32:28,073 --> 00:32:32,513
So let's say that we have the
end point that it is licenses

528
00:32:32,693 --> 00:32:39,113
q and a and the deployment name
will be licenses q and a one.

529
00:32:39,853 --> 00:32:44,603
Next authentication is key
based, and force access.

530
00:32:44,603 --> 00:32:45,143
Yes.

531
00:32:45,263 --> 00:32:48,893
I want, if I want, I can create
a description here that will be

532
00:32:48,893 --> 00:32:53,453
added as metadata along with any
tags that I want also to have.

533
00:32:53,953 --> 00:32:59,613
Also, I can use deployment tags
for my deployments and I can use a

534
00:32:59,643 --> 00:33:04,093
customized environment or environment
of current flow definition.

535
00:33:04,493 --> 00:33:10,123
I can have, if I am utilizing another LLM
or I want to utilize my own model, I can

536
00:33:10,123 --> 00:33:12,713
create another environment and have this.

537
00:33:13,068 --> 00:33:17,328
Environment serve my prompt
flow per my requirements.

538
00:33:17,588 --> 00:33:22,768
In our case, we are happy with the default
and what we already have in our hands.

539
00:33:23,638 --> 00:33:28,298
The application insights diagnostic is
the thing that you need to have already

540
00:33:28,338 --> 00:33:34,788
connected this resource with your,
AI resource and application insights

541
00:33:34,828 --> 00:33:39,998
is a resource in Azure that provides
Monitoring, you can have deep monitoring

542
00:33:39,998 --> 00:33:46,138
from everything that happens, to your
deployment, to your function, to your

543
00:33:46,178 --> 00:33:49,198
code, the user interactions, everything.

544
00:33:49,298 --> 00:33:54,988
It's a very, structured service for,
deep insights in your application.

545
00:33:54,998 --> 00:34:01,848
We don't have this need right now,
and I already don't have this option

546
00:34:01,848 --> 00:34:04,068
enabled, so I can't do it right now.

547
00:34:04,538 --> 00:34:07,078
It just warns me that you
have to do it beforehand.

548
00:34:07,578 --> 00:34:08,238
Let's go.

549
00:34:08,738 --> 00:34:12,518
Specify what flow outputs to be
included in your endpoint response

550
00:34:12,518 --> 00:34:14,128
and what connections to be used.

551
00:34:14,238 --> 00:34:18,758
Yes, I want the output to be
included in the endpoint response.

552
00:34:18,868 --> 00:34:20,698
Answer the question with context.

553
00:34:20,718 --> 00:34:27,338
Yes, everything as we, you created
it in our port flow and create.

554
00:34:27,838 --> 00:34:32,708
Now you can see here that we
have, A new job that will create

555
00:34:32,888 --> 00:34:35,608
this endpoint, let me show you,

556
00:34:36,108 --> 00:34:42,258
I have already my first endpoint here
and now it's going to create this one.

557
00:34:42,758 --> 00:34:45,558
It's the real time endpoints as we say.

558
00:34:46,058 --> 00:34:50,558
If I click on this, you will see that
the provisioning state is creating

559
00:34:51,278 --> 00:34:54,268
and we don't have any other data here.

560
00:34:54,758 --> 00:34:59,518
It needs to be able to create it and
then we're going to have data here.

561
00:34:59,903 --> 00:35:00,353
Okay.

562
00:35:00,903 --> 00:35:08,593
now, yes, the endpoint creation is
completed and the state is accidental.

563
00:35:08,623 --> 00:35:11,353
Let me refresh very well.

564
00:35:11,373 --> 00:35:15,273
What we are waiting now is the deployment,
which is going to take some time.

565
00:35:15,773 --> 00:35:18,803
It's going to allocate 100
percent of the traffic here.

566
00:35:19,393 --> 00:35:20,233
And now you have.

567
00:35:20,733 --> 00:35:22,533
A wide range of options.

568
00:35:22,763 --> 00:35:26,553
You can have, for example, two
protflows dealing with different

569
00:35:26,563 --> 00:35:32,443
data and based on how you build your
application you can direct different

570
00:35:32,483 --> 00:35:33,423
people to different protflow.

571
00:35:33,923 --> 00:35:38,333
You can start allocating less
people to a testing protflow.

572
00:35:38,833 --> 00:35:39,803
You can do a lot of stuff.

573
00:35:40,303 --> 00:35:44,663
But since this is going to take
some time, I have already created

574
00:35:44,943 --> 00:35:50,053
another, flow and another endpoint
that has already a deployment ready.

575
00:35:50,053 --> 00:35:51,563
And I'm going to show you what I mean.

576
00:35:51,593 --> 00:35:55,213
This is the one if I click on it, you
will see that the deployment is ready.

577
00:35:55,613 --> 00:35:59,103
It's allocated 100 percent of the
traffic coming to this endpoint

578
00:35:59,523 --> 00:36:01,363
directly to this deployment.

579
00:36:01,863 --> 00:36:03,313
The provisioning is succeeded.

580
00:36:04,013 --> 00:36:05,263
this is the environment.

581
00:36:05,623 --> 00:36:08,643
Again, it's exactly the
same as you saw earlier.

582
00:36:09,143 --> 00:36:14,393
We have this rested point and now
let's go to the fun stuff test.

583
00:36:14,543 --> 00:36:15,343
I can test it.

584
00:36:15,843 --> 00:36:17,873
I can test it again.

585
00:36:18,033 --> 00:36:24,883
What are the license
options for Windows 10

586
00:36:25,383 --> 00:36:25,893
test

587
00:36:26,393 --> 00:36:29,103
and we have our response back.

588
00:36:29,163 --> 00:36:36,673
So before deploying our code and
that means consuming our deployment.

589
00:36:36,673 --> 00:36:36,723
And.

590
00:36:37,218 --> 00:36:41,888
Which is this part, and you can see
here that you have the code ready in

591
00:36:41,928 --> 00:36:48,108
four different types of consumption
as it is named, but in fact it

592
00:36:48,108 --> 00:36:50,548
is different language frameworks.

593
00:36:50,768 --> 00:36:54,748
So you can have it in JSON, C
sharp, I don't know why JSON

594
00:36:54,748 --> 00:36:56,288
is empty, I don't remember why.

595
00:36:56,438 --> 00:36:59,458
Anyway, you have C sharp,
Python and JavaScript.

596
00:36:59,528 --> 00:37:05,918
So all you have to go to do
is take the code snippet and

597
00:37:05,958 --> 00:37:08,228
integrate it into your own app.

598
00:37:08,728 --> 00:37:11,728
And then let me show you
what is happening here.

599
00:37:11,828 --> 00:37:18,978
I have my VS code, my workstation, I have
created a very simple, web application.

600
00:37:19,478 --> 00:37:21,248
You will see how that looks.

601
00:37:21,668 --> 00:37:29,368
And what I did is I integrated my code
taken from the portal into my application.

602
00:37:29,868 --> 00:37:33,588
So I have created a flask, okay, web app.

603
00:37:33,968 --> 00:37:39,203
This is the code that I was given
from The prompt flow screen.

604
00:37:39,323 --> 00:37:40,093
This is the one.

605
00:37:40,833 --> 00:37:41,943
So just take it.

606
00:37:42,003 --> 00:37:42,523
Copy.

607
00:37:42,963 --> 00:37:43,463
That's all.

608
00:37:43,633 --> 00:37:47,903
Copy and paste to your,
VS code or your ID.

609
00:37:48,693 --> 00:37:53,373
You need all the only detail that
you need is the API key, which is not

610
00:37:53,393 --> 00:38:00,603
included here, but you can take it from
the consume menu or you have two keys.

611
00:38:00,623 --> 00:38:02,973
Of course, you can
utilize any one of them.

612
00:38:03,473 --> 00:38:05,293
Microsoft is using this logic.

613
00:38:05,758 --> 00:38:09,988
Always two keys, primary and
secondary key for endpoints that

614
00:38:09,988 --> 00:38:12,478
need access through, through keys.

615
00:38:12,978 --> 00:38:16,938
So you can have one key to the
primary developer team, secondary

616
00:38:16,938 --> 00:38:22,278
key for you or for any service
principle for automation and that

617
00:38:22,278 --> 00:38:24,848
stuff, they do exactly the same job.

618
00:38:25,348 --> 00:38:28,768
Since you have the key and the
API endpoint, you can interact

619
00:38:28,768 --> 00:38:29,998
and consume the service.

620
00:38:30,838 --> 00:38:31,798
Let's go back to our code.

621
00:38:31,798 --> 00:38:34,078
So we took our code from Python.

622
00:38:34,228 --> 00:38:36,368
We integrate it into our app.

623
00:38:37,158 --> 00:38:42,138
All I had to do is, create
these, environment variables.

624
00:38:42,928 --> 00:38:47,098
So to add a little bit more of a
business flavor here, you don't

625
00:38:47,188 --> 00:38:52,518
add sensitive details like an API
key or the endpoint into the code.

626
00:38:52,558 --> 00:38:55,508
So I created these
variables and by variables.

627
00:38:56,208 --> 00:39:00,398
I mean that, we have, a web app in Azure,

628
00:39:00,898 --> 00:39:01,598
let me show you,

629
00:39:02,098 --> 00:39:03,738
we have here a web app.

630
00:39:04,238 --> 00:39:04,648
Okay.

631
00:39:05,148 --> 00:39:10,778
So for me to avoid storing
sensitive data into my code, I

632
00:39:10,778 --> 00:39:17,148
created environment variables, the
API key, and the Azure endpoint.

633
00:39:17,418 --> 00:39:18,628
What the code needs.

634
00:39:18,888 --> 00:39:19,198
Okay.

635
00:39:19,738 --> 00:39:24,708
If you see in the code, it is
provided to us by the consume code.

636
00:39:24,868 --> 00:39:25,388
Okay.

637
00:39:25,558 --> 00:39:26,728
I'm given the URL.

638
00:39:26,728 --> 00:39:32,048
I have to insert the API key and
purposely I have left the code like this.

639
00:39:32,048 --> 00:39:36,518
So you can see that I commented
out this one and created these

640
00:39:36,548 --> 00:39:43,688
two environment variables that are
declared into the Azure app service.

641
00:39:44,348 --> 00:39:49,158
Which is hosting this
application and enough is enough.

642
00:39:49,308 --> 00:39:56,278
Let's go and check it out So all we
have to go and see is this URL and of

643
00:39:56,278 --> 00:40:00,458
course as this is a web app You can
have your own custom domain, right?

644
00:40:01,378 --> 00:40:06,978
You can add authentication and this
is the easier thing that you can do.

645
00:40:07,618 --> 00:40:15,233
You can take my code from my Blog
and utilize it as you like I think

646
00:40:15,233 --> 00:40:21,723
it's for anyone that is already
into, very basic web deployment.

647
00:40:22,353 --> 00:40:28,853
You can understand easily how to create
a web application in flask with flask in

648
00:40:28,853 --> 00:40:32,373
Python in your favorite hosting provider.

649
00:40:32,853 --> 00:40:35,903
In our case, it is Azure
web apps, as it is called.

650
00:40:36,403 --> 00:40:40,523
And let me also show you
something while this is loading.

651
00:40:41,143 --> 00:40:41,573
Come on.

652
00:40:42,073 --> 00:40:42,943
Yes.

653
00:40:43,443 --> 00:40:44,313
Let's go from here.

654
00:40:44,363 --> 00:40:46,993
Maybe it's a little bit faster
because the other one is a,

655
00:40:47,493 --> 00:40:49,123
is a workstation in the cloud.

656
00:40:49,123 --> 00:40:50,813
This is my PC directly.

657
00:40:50,843 --> 00:40:51,173
So

658
00:40:51,673 --> 00:40:53,263
let's see how that went.

659
00:40:53,543 --> 00:40:55,273
The end point is here.

660
00:40:55,773 --> 00:41:00,143
There is a good chance that it has
been, no, it is, that it takes some

661
00:41:00,143 --> 00:41:01,963
time to finalize the deployment.

662
00:41:02,463 --> 00:41:02,783
Okay.

663
00:41:03,283 --> 00:41:04,933
This one takes some time also.

664
00:41:04,943 --> 00:41:06,303
I don't like it anyway.

665
00:41:06,353 --> 00:41:06,823
Let me see.

666
00:41:06,823 --> 00:41:07,213
Okay.

667
00:41:07,273 --> 00:41:08,243
This one is open.

668
00:41:08,743 --> 00:41:10,363
Okay, the app is stopped.

669
00:41:10,403 --> 00:41:11,393
I have to start it.

670
00:41:11,443 --> 00:41:15,313
Now, for cost management, you
can stop a web application and

671
00:41:15,323 --> 00:41:17,403
you are not charged that much.

672
00:41:18,303 --> 00:41:20,693
You are just charged for the storage.

673
00:41:20,703 --> 00:41:25,613
in my case, I had it stopped
and now I started it.

674
00:41:26,113 --> 00:41:31,703
The way to deploy your app from VS
Code to Azure is very straightforward.

675
00:41:32,143 --> 00:41:35,833
You just need to create your
virtual environment, add your data.

676
00:41:36,423 --> 00:41:39,883
compile the code, run it locally,
test that everything is all right.

677
00:41:39,903 --> 00:41:45,143
And then it's just a simple command
to deploy your app in Azure.

678
00:41:45,643 --> 00:41:47,133
It needs some time to load.

679
00:41:47,733 --> 00:41:52,363
in the meantime, let me show you something
very important that you need to know.

680
00:41:53,043 --> 00:41:57,873
So remember that starting with
this, deployment, we talked

681
00:41:57,873 --> 00:42:00,043
about resource groups, right?

682
00:42:00,543 --> 00:42:03,943
In Azure, the first level is
the subscription and the second

683
00:42:03,943 --> 00:42:05,323
level is the resource group.

684
00:42:05,583 --> 00:42:08,893
Resource group is the logical
separation of resources.

685
00:42:08,903 --> 00:42:12,083
You can have different
resources into a group of it.

686
00:42:12,793 --> 00:42:18,203
It doesn't play any operational
role other than that you can apply

687
00:42:18,203 --> 00:42:22,303
policies and be inherited into
the, resources that are contained

688
00:42:22,303 --> 00:42:24,073
into the resource group and so on.

689
00:42:25,043 --> 00:42:28,793
What I wanted to show you
is that when I created my.

690
00:42:29,673 --> 00:42:30,543
Prompt flow.

691
00:42:30,673 --> 00:42:36,343
I have these two new things here
and you are going to see them

692
00:42:36,353 --> 00:42:38,373
also for our own deployment.

693
00:42:38,873 --> 00:42:43,423
The one is that we have a machine
learning online and point and the

694
00:42:43,433 --> 00:42:45,573
machine learning online deployment.

695
00:42:46,423 --> 00:42:47,833
So this is the deployment.

696
00:42:48,333 --> 00:42:54,833
And here you can apply scaling
rules based on specific rules.

697
00:42:55,333 --> 00:42:59,173
I can have custom of the scaling
and say, okay, one traffic is.

698
00:42:59,823 --> 00:43:04,493
85 percent for five minutes,
then deploy another instance.

699
00:43:05,143 --> 00:43:09,553
So this is very helpful when you
go to production and you want to

700
00:43:09,553 --> 00:43:13,843
serve hundreds or thousands of
users through a single endpoint.

701
00:43:13,843 --> 00:43:20,533
And this is the online endpoint where
you will see that it has assigned

702
00:43:20,533 --> 00:43:23,253
an identity with specific roles.

703
00:43:23,303 --> 00:43:25,563
Everything has been done for us.

704
00:43:25,603 --> 00:43:26,653
This is amazing.

705
00:43:26,793 --> 00:43:30,173
You can see here that we have
one, two, three, four, five roles.

706
00:43:30,673 --> 00:43:35,723
And the roles are, I need to be able
to write in the machinery workspace,

707
00:43:36,463 --> 00:43:43,873
I need to be able to read my secrets,
read the storage account, pull the

708
00:43:43,883 --> 00:43:47,833
image from the container registry
that it is stored for the deployment

709
00:43:47,833 --> 00:43:53,373
purpose, and also be able to read
and write into storage for logging.

710
00:43:53,873 --> 00:43:57,613
let's see this one, how it
goes, it will start eventually.

711
00:43:58,113 --> 00:43:59,853
And in the meantime.

712
00:44:00,603 --> 00:44:01,923
Let's return

713
00:44:02,423 --> 00:44:07,013
to, let me see if this is
faster, to the deployment here.

714
00:44:07,513 --> 00:44:08,493
It's not ready yet.

715
00:44:08,683 --> 00:44:09,683
We have to wait.

716
00:44:10,183 --> 00:44:11,563
Let's see how that goes.

717
00:44:12,063 --> 00:44:17,833
It seems that it needs a little bit
of time to start to fire up, as we

718
00:44:17,833 --> 00:44:20,573
say, but it will be up eventually.

719
00:44:21,073 --> 00:44:23,303
Let's see this app service, let

720
00:44:23,803 --> 00:44:24,783
me stop this,

721
00:44:25,283 --> 00:44:26,663
yeah, it timed out.

722
00:44:27,163 --> 00:44:29,283
I hope we don't fall in a problem here.

723
00:44:29,783 --> 00:44:31,523
The deployment is in progress.

724
00:44:32,023 --> 00:44:34,113
Yeah, it needed a restart.

725
00:44:34,813 --> 00:44:38,683
This is our very simple web app.

726
00:44:38,963 --> 00:44:42,513
you can integrate it, of course,
into a larger website of yours.

727
00:44:43,203 --> 00:44:44,893
It is, the prompt flow.

728
00:44:45,023 --> 00:44:50,723
But, the same exact thing will happen when
we take the code that we created here.

729
00:44:51,363 --> 00:44:51,753
Okay?

730
00:44:51,933 --> 00:44:54,533
From the consume, when it is open.

731
00:44:54,693 --> 00:44:55,643
Because it's still open.

732
00:44:56,083 --> 00:44:57,513
Creating the deployment.

733
00:44:58,013 --> 00:45:03,353
But, if we take our code, make some nice
additions as you saw here in my VS Code.

734
00:45:03,443 --> 00:45:07,963
I just added some visualization, a
little bit of coloring, and there we are.

735
00:45:08,373 --> 00:45:09,833
We have this nice thing.

736
00:45:10,293 --> 00:45:18,653
Q& A web app, where we can ask our
question, what are the license,

737
00:45:19,153 --> 00:45:24,053
license options for Windows 10.

738
00:45:24,553 --> 00:45:28,313
Now the format, formatting
of your response.

739
00:45:28,603 --> 00:45:29,333
It's up to you.

740
00:45:29,583 --> 00:45:33,443
You can work with anything
you prefer to, work with.

741
00:45:33,943 --> 00:45:34,633
It could be.

742
00:45:35,133 --> 00:45:37,633
Any type of response.

743
00:45:38,133 --> 00:45:38,653
Okay.

744
00:45:39,153 --> 00:45:40,233
it could be JSON.

745
00:45:40,243 --> 00:45:42,323
It could be whatever you want to be.

746
00:45:42,823 --> 00:45:46,293
Let me see why we're not
having a response here.

747
00:45:46,793 --> 00:45:48,643
Now this is the favicon.

748
00:45:49,143 --> 00:45:50,293
I think it should be there.

749
00:45:50,793 --> 00:45:52,683
Or it's taking some time to answer.

750
00:45:53,183 --> 00:45:58,413
Okay, the deployment is ready so
we can use also this one for this.

751
00:45:58,913 --> 00:46:00,443
Yeah, we got the response.

752
00:46:00,573 --> 00:46:04,113
No worries It needs some time,
especially if the web app is stopped.

753
00:46:04,383 --> 00:46:09,333
You need some time to Recover and
at the same time I was deploying

754
00:46:09,333 --> 00:46:12,813
another Resource intensive deployment.

755
00:46:12,813 --> 00:46:13,933
So it took some time.

756
00:46:13,933 --> 00:46:15,543
So here is the response.

757
00:46:15,663 --> 00:46:21,353
I did my best to format it, the, in
the better format I could, considering

758
00:46:21,353 --> 00:46:26,903
that I'm not a developer, but I'm
trying my best to be, or try to be one.

759
00:46:27,403 --> 00:46:32,113
Anyway, this is the response coming
back from our prompt flow, which is

760
00:46:32,163 --> 00:46:34,833
now an actual web app deployment.

761
00:46:35,333 --> 00:46:40,588
A little bit of a recap, since we have,
no, we don't have, I hope you like

762
00:46:40,588 --> 00:46:45,698
this presentation and this end to end
tutorial of how to create our prompt

763
00:46:45,698 --> 00:46:49,168
flow and deploy it as a web app endpoint.

764
00:46:49,948 --> 00:46:54,258
We integrate it into a web app,
a very simple Python flask web

765
00:46:54,368 --> 00:46:56,578
app, and here it is how it works.

766
00:46:57,338 --> 00:46:58,208
Thank you everyone.

767
00:46:58,978 --> 00:46:59,828
Have a great one.

768
00:47:00,258 --> 00:47:00,748
Bye bye.

