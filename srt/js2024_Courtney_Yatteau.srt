1
00:00:00,150 --> 00:00:01,570
Hello and warm welcome.

2
00:00:01,970 --> 00:00:05,760
I'm Courtney Otto and I'm excited
to talk to you today about one of

3
00:00:05,760 --> 00:00:07,990
my favorite topics, gamification.

4
00:00:08,789 --> 00:00:13,039
Now we're going to see how gamification
can transform your react applications

5
00:00:13,329 --> 00:00:16,379
into immersive and engaging experiences.

6
00:00:16,990 --> 00:00:21,420
Now, when we talk about gamification,
it's more than just points and badges.

7
00:00:21,610 --> 00:00:25,140
It's really about how we create
these applications to make users

8
00:00:25,500 --> 00:00:26,960
want to come back for more.

9
00:00:27,460 --> 00:00:29,960
Now think about the last app
that you couldn't stop using.

10
00:00:30,485 --> 00:00:35,315
It had probably gamification elements
that you kept, that kept you hooked.

11
00:00:35,695 --> 00:00:38,285
Apps like Starbucks, Duolingo, Headspace.

12
00:00:39,144 --> 00:00:43,905
These take what might otherwise be
routine or even difficult tasks,

13
00:00:43,994 --> 00:00:48,495
ordering coffee, learning a new
language, or managing anxiety, and

14
00:00:48,495 --> 00:00:53,635
really making them a bit more enjoyable
by adding in these gamified elements.

15
00:00:53,845 --> 00:00:58,345
So whether it's rewards for purchases,
progress tracking or daily challenges.

16
00:00:58,680 --> 00:01:02,250
These features really do tap
into our desire for achievement

17
00:01:02,360 --> 00:01:03,840
and keep us coming back.

18
00:01:04,680 --> 00:01:09,960
Now, React's component based architecture
makes it a natural fit for building

19
00:01:09,960 --> 00:01:12,170
these kinds of gamified experiences.

20
00:01:12,780 --> 00:01:18,650
It's flexible, it's efficient, and it
lets us create reusable, interactive

21
00:01:18,670 --> 00:01:21,350
components that elevate user engagement.

22
00:01:22,025 --> 00:01:24,515
Now throughout today's session,
we're going to explore how you can

23
00:01:24,515 --> 00:01:28,855
leverage React to build apps that
are not only functional, but are

24
00:01:28,855 --> 00:01:31,775
also really fun and truly engaging.

25
00:01:32,275 --> 00:01:34,935
And before we jump in, let me
introduce myself real quick.

26
00:01:35,495 --> 00:01:39,865
I'm Courtney Yato, and I'm currently
a developer advocate at Esri, a

27
00:01:39,885 --> 00:01:44,775
company that specializes in geographic
information systems, or GIS for short.

28
00:01:45,660 --> 00:01:48,820
Before joining Esri, I was a high
school math and computer science

29
00:01:48,820 --> 00:01:53,430
teacher, and I really got to see
firsthand how gamification can

30
00:01:53,440 --> 00:01:54,990
motivate students in the classroom.

31
00:01:55,740 --> 00:02:01,140
For my master's project, I focused on how
technology can enhance learning, and I

32
00:02:01,260 --> 00:02:05,730
explored how gamified digital experiences
can really increase engagement.

33
00:02:06,690 --> 00:02:10,780
As a developer advocate, I have been
applying some of those gamification

34
00:02:10,790 --> 00:02:12,690
principles to the world of development.

35
00:02:13,020 --> 00:02:15,650
Particularly in GIS technology.

36
00:02:16,470 --> 00:02:19,350
And one of my goals is to help
developers understand really how

37
00:02:19,360 --> 00:02:23,420
powerful gamification can be, not
just in education, but really in

38
00:02:23,590 --> 00:02:25,250
all different kinds of applications.

39
00:02:25,750 --> 00:02:28,800
So our agenda for today, throughout
the next bit, I'm going to

40
00:02:28,800 --> 00:02:32,800
take us through five different
gamification principles, specifically

41
00:02:32,830 --> 00:02:34,880
tailored for react applications.

42
00:02:35,530 --> 00:02:38,920
And for each principle, I'll
show a real world example of

43
00:02:38,920 --> 00:02:40,850
how this has been implemented.

44
00:02:40,850 --> 00:02:46,460
So Then to make things interactive,
I've prepared a mini workshop, like

45
00:02:46,490 --> 00:02:50,750
coding demo, where we're going to
build a simple gamified app together.

46
00:02:51,520 --> 00:02:54,110
And if you'd like to follow
along with that in a bit, you

47
00:02:54,110 --> 00:02:55,390
can find the starter code here.

48
00:02:55,890 --> 00:02:59,570
Now that we've set the stage for a
discussion, let's go ahead and jump into

49
00:02:59,570 --> 00:03:02,380
the first principle of gamification.

50
00:03:03,310 --> 00:03:07,950
Now this acronym that I came up
with, GAMES, The G in the game

51
00:03:07,950 --> 00:03:09,550
stands for Gamify Components.

52
00:03:10,050 --> 00:03:13,780
These are the core elements
that turn ordinary tasks into

53
00:03:13,890 --> 00:03:16,240
really engaging experiences.

54
00:03:16,840 --> 00:03:21,260
Gamify Components can be anything
from experience bars to badges,

55
00:03:21,270 --> 00:03:25,420
progress tracking, or even
rewards for completing tasks.

56
00:03:26,180 --> 00:03:30,540
These elements do create a sense
of achievement, motivating users

57
00:03:30,550 --> 00:03:32,170
to continue engaging with the app.

58
00:03:32,670 --> 00:03:38,140
Now let's look at how this concept
comes to life in an app like Codecademy.

59
00:03:38,640 --> 00:03:42,540
A Codecademy uses several
gamified elements to drive

60
00:03:42,540 --> 00:03:44,690
user engagement and motivation.

61
00:03:45,310 --> 00:03:50,960
XP points reward users for completing
lessons, providing instant feedback,

62
00:03:50,970 --> 00:03:52,790
and incentivizing progress.

63
00:03:53,290 --> 00:03:57,810
Badges mark milestones, visually
representing achievements, while

64
00:03:57,850 --> 00:04:01,310
progress bars track advancement
through different courses.

65
00:04:02,060 --> 00:04:07,600
Additionally, weekly target trackers
encourage consistency by setting

66
00:04:07,610 --> 00:04:12,880
measurable goals using visual
cues to help users stay focused.

67
00:04:13,300 --> 00:04:18,040
Now these elements are nicely
integrated to enhance the learning

68
00:04:18,040 --> 00:04:21,070
experience and maintain user motivation.

69
00:04:21,570 --> 00:04:25,410
All right, so next we're going
to move on to the letter A, and A

70
00:04:25,410 --> 00:04:27,310
stands for Advanced State Management.

71
00:04:27,820 --> 00:04:33,010
Now, as apps grow in their complexity,
keeping track of state across multiple

72
00:04:33,010 --> 00:04:34,880
components really can get a bit tricky.

73
00:04:35,350 --> 00:04:38,910
So this is where React's
Context API shines.

74
00:04:39,410 --> 00:04:44,070
It allows for us to manage state
globally and ensures consistency

75
00:04:44,100 --> 00:04:45,370
throughout the application.

76
00:04:45,370 --> 00:04:49,955
So So by using centralized state
management, we can handle things

77
00:04:49,955 --> 00:04:55,615
like user progress, settings, theme
changes, et cetera, in a scalable

78
00:04:55,625 --> 00:04:57,315
and really maintainable way.

79
00:04:57,985 --> 00:05:03,035
Now let's go ahead and see how an app like
Headspace uses advanced state management

80
00:05:03,245 --> 00:05:05,885
to create a seamless user experience.

81
00:05:06,025 --> 00:05:11,965
Headspace uses React's Context API to
centrally manage the theme UI components

82
00:05:11,965 --> 00:05:17,295
dynamically, The context provider
encapsulates styling, all the styling

83
00:05:17,295 --> 00:05:21,515
for the properties for the various UI
elements like the buttons, the cards,

84
00:05:21,745 --> 00:05:26,285
progress bars, which really enables
the consistency and the scalability

85
00:05:26,285 --> 00:05:28,485
of the styling across the application.

86
00:05:28,975 --> 00:05:33,735
Now, this approach allows for
theme variations and responsive

87
00:05:33,735 --> 00:05:38,765
design changes throughout the
app without repetitive code.

88
00:05:39,265 --> 00:05:41,745
All right, now let's move
on to the M and games.

89
00:05:42,365 --> 00:05:47,885
The M stands for memoization, and
the key to this really is the key

90
00:05:47,885 --> 00:05:49,775
to ensuring our apps run smoothly.

91
00:05:50,035 --> 00:05:54,165
So memoization helps us
prevent unnecessary re renders,

92
00:05:54,635 --> 00:05:58,525
improving performance, especially
in dynamic applications.

93
00:05:59,515 --> 00:06:03,155
Now, looking ahead, and this
is really where that modern

94
00:06:03,155 --> 00:06:04,785
optimization comes into play.

95
00:06:05,545 --> 00:06:09,245
The new React compiler, which is
currently in beta, will take this further

96
00:06:09,265 --> 00:06:11,385
by automatically optimizing our apps.

97
00:06:12,000 --> 00:06:15,030
without the need for manual memoization.

98
00:06:15,710 --> 00:06:20,750
So we'll analyze component trees and
apply performance improvements seamlessly.

99
00:06:21,250 --> 00:06:26,860
Now a good example of using memoization
is Grammarly, where it is strategically

100
00:06:26,860 --> 00:06:31,470
employed in the suggestions section
to enhance the efficiency of the

101
00:06:31,470 --> 00:06:33,740
real time analysis of the text.

102
00:06:34,240 --> 00:06:39,420
The component responsible for rendering
suggestions is wrapped with React

103
00:06:39,420 --> 00:06:44,470
Memo, which ensures that it only re
renders when they, when there really

104
00:06:44,470 --> 00:06:49,240
are necessary, when there are changes to
the prop, specifically the typed input.

105
00:06:49,740 --> 00:06:54,580
Now, by doing this, Grammarly maintains
high performance as it delivers instant

106
00:06:54,580 --> 00:06:59,330
feedback and suggestions, which really are
crucial for a seamless user experience.

107
00:06:59,830 --> 00:07:02,290
All right, onto the E in games.

108
00:07:02,670 --> 00:07:07,060
Now the E in games stands for efficient
rendering, which really is all about

109
00:07:07,060 --> 00:07:08,700
the right components at the right time.

110
00:07:09,260 --> 00:07:13,830
So with React Lazy and Suspense,
we can load components on demand,

111
00:07:14,650 --> 00:07:18,820
reducing the initial load time and
really improving the performance.

112
00:07:19,750 --> 00:07:25,430
Now efficient rendering techniques
can help us manage heavy assets or

113
00:07:25,520 --> 00:07:29,715
really complex components in a way
that doesn't block the user experience.

114
00:07:30,565 --> 00:07:35,145
So let's go ahead and see how an app
like Duolingo uses these techniques

115
00:07:35,155 --> 00:07:37,215
to deliver smooth animations.

116
00:07:37,715 --> 00:07:41,085
In Duolingo, efficient rendering
is achieved through react suspense

117
00:07:41,085 --> 00:07:44,805
component, which handles the
loading of character animations.

118
00:07:45,405 --> 00:07:48,815
So suspense ensures that animations
only render once when they are

119
00:07:48,815 --> 00:07:53,855
fully loaded, preventing for the
that incomplete or laggy visuals

120
00:07:53,855 --> 00:07:55,235
during different interactions.

121
00:07:55,295 --> 00:08:00,545
All right, let's move on
to the final letter S.

122
00:08:01,055 --> 00:08:04,505
S stands for social interaction,
which brings a new dimension

123
00:08:04,525 --> 00:08:05,785
of engagement to apps.

124
00:08:06,285 --> 00:08:10,845
Adding social features allows
users to do things like share

125
00:08:10,895 --> 00:08:15,425
achievements, compute with each other,
and feel this sense of community.

126
00:08:16,185 --> 00:08:19,755
So social interaction encourages
users to return not just for

127
00:08:19,755 --> 00:08:24,345
the individual rewards, but also
for the fun of the competition.

128
00:08:25,020 --> 00:08:29,520
So let's go ahead and see how Duolingo
does this exceptionally well with their

129
00:08:29,520 --> 00:08:32,150
leaderboard and social sharing features.

130
00:08:32,650 --> 00:08:36,740
For social interaction, Duolingo
enhances user engagement.

131
00:08:36,820 --> 00:08:42,140
Additionally, Duolingo integrates a
social aspect by allowing users to follow

132
00:08:42,140 --> 00:08:45,590
friends and see their language milestones.

133
00:08:46,090 --> 00:08:51,490
Alright, now before we go on to the
live demo, I want to go through one

134
00:08:51,530 --> 00:08:58,130
application that really encapsulates
the essence of my game's acronym through

135
00:08:58,130 --> 00:08:59,760
each one of the different elements.

136
00:09:00,240 --> 00:09:02,850
Starbucks, primarily built with React.

137
00:09:03,560 --> 00:09:06,760
It uses a progress bar to
visually represent customers

138
00:09:06,760 --> 00:09:08,430
earning stars from purchases.

139
00:09:09,140 --> 00:09:12,620
And React State Management It
dynamically updates this bar,

140
00:09:12,620 --> 00:09:14,270
reflecting real time progress.

141
00:09:14,580 --> 00:09:20,050
Now, challenges within the app
encourages users engagement by offering

142
00:09:20,060 --> 00:09:24,380
bonus stars for specific actions,
like visiting several days in a row.

143
00:09:25,300 --> 00:09:27,880
And these are managed through
React components, ensuring

144
00:09:27,880 --> 00:09:31,610
that progress and rewards are
accurately tracked and updated.

145
00:09:32,290 --> 00:09:35,070
Additionally, seasonal
games are also integrated.

146
00:09:35,810 --> 00:09:38,940
offering prizes from
bonus stars to vacations.

147
00:09:39,370 --> 00:09:44,280
And these utilize react for timely
updates and interactive elements

148
00:09:44,590 --> 00:09:46,150
during promotional periods.

149
00:09:46,650 --> 00:09:52,450
Now the next letter a is advanced state
control and Starbucks effectively utilizes

150
00:09:52,470 --> 00:09:59,220
reacts context API to manage the global
settings such as locale and currency.

151
00:10:00,140 --> 00:10:04,470
It's approach ensures that regardless of
where in the world the app is accessed,

152
00:10:04,850 --> 00:10:12,770
all of the current or the correct currency
and the language adhere to the preferences

153
00:10:13,210 --> 00:10:14,730
due to the location of the user.

154
00:10:15,600 --> 00:10:20,430
The context API, it allows Starbucks
to centralize state management for

155
00:10:20,430 --> 00:10:25,530
these settings, enabling a consistent
and flawless user experience.

156
00:10:26,030 --> 00:10:27,260
Alright, on to M.

157
00:10:27,945 --> 00:10:31,945
The memoization, Starbucks
does optimize its application

158
00:10:31,945 --> 00:10:36,865
performance by using memoization
through React Memo and Use Memo.

159
00:10:37,465 --> 00:10:42,805
These techniques are useful for caching
data that doesn't change very often, such

160
00:10:42,805 --> 00:10:45,635
as currency formats or menu item prices.

161
00:10:46,135 --> 00:10:51,065
And by preventing the re, by preventing
these like redundant renders,

162
00:10:51,095 --> 00:10:54,825
re renders, Starbucks enhances
the responsiveness of its app.

163
00:10:55,710 --> 00:10:59,390
And it ensures that users experience
a quick and smooth interactions,

164
00:10:59,930 --> 00:11:01,690
even during the high demand periods.

165
00:11:01,690 --> 00:11:05,199
All right, on to the E.

166
00:11:05,699 --> 00:11:09,349
Again, this is efficient rendering
and Starbucks faces the challenge

167
00:11:09,359 --> 00:11:13,839
of managing high volumes of user
interactions, especially during

168
00:11:14,059 --> 00:11:16,139
its fun promotional event times.

169
00:11:16,729 --> 00:11:21,429
the app likely employs React strategies
like lazy loading and suspense to

170
00:11:21,429 --> 00:11:23,669
handle these scenarios efficiently.

171
00:11:24,189 --> 00:11:29,109
using split coding techniques, Starbucks
can load only the necessary pieces of

172
00:11:29,109 --> 00:11:30,949
code depending on the user interactions.

173
00:11:31,449 --> 00:11:35,339
And finally, let's move on
to S, the social elements.

174
00:11:35,639 --> 00:11:38,449
Starbucks does encourage
participants to send gift cards

175
00:11:38,449 --> 00:11:39,679
to their friends through the app.

176
00:11:40,069 --> 00:11:43,359
Additionally, some games users
are encouraged to share their

177
00:11:43,359 --> 00:11:47,479
progress on social media during
those provisional game periods.

178
00:11:47,979 --> 00:11:51,929
Okay, now that we've discussed
the theory behind games, here's

179
00:11:51,929 --> 00:11:52,919
where we get to the fun part.

180
00:11:52,959 --> 00:11:54,950
we get to do some coding together.

181
00:11:55,450 --> 00:12:01,610
For this coding session, we're going to
build a very simple app that will evolve

182
00:12:01,610 --> 00:12:06,850
into something a bit more engaging,
with react and gamification techniques.

183
00:12:07,409 --> 00:12:11,969
So we're going to start small and we're
going to add one little feature for

184
00:12:11,969 --> 00:12:15,250
each of the letter in games, my acronym.

185
00:12:15,800 --> 00:12:20,260
And by the end, we'll have a fun
little gamified app with elements

186
00:12:20,260 --> 00:12:22,970
like experience, and social sharing.

187
00:12:23,470 --> 00:12:26,470
So to kick things off, we're
going to start with this basic

188
00:12:26,510 --> 00:12:29,240
map app that I built in React.

189
00:12:29,740 --> 00:12:34,680
I've set up a new project here using
Vite, and in this project I've cleaned

190
00:12:34,680 --> 00:12:38,560
up the default files a bit, so to
keep things simple, for example,

191
00:12:38,560 --> 00:12:44,800
I deleted the Vite SVG file, and I
emptied out the default styles in app.

192
00:12:44,810 --> 00:12:48,030
css, and I actually just got rid of index.

193
00:12:48,040 --> 00:12:48,170
css.

194
00:12:48,670 --> 00:12:51,480
Now here's what the
project looks like now.

195
00:12:51,500 --> 00:12:52,780
So I have a simple app.

196
00:12:52,840 --> 00:12:58,380
css where I've set the app to have
no predetermined margins or padding.

197
00:12:58,880 --> 00:13:00,960
And then I have a basic app.

198
00:13:00,970 --> 00:13:05,890
jsx where I've imported one
component, which is my map component.

199
00:13:06,750 --> 00:13:09,220
And then of course I
have my map component.

200
00:13:09,700 --> 00:13:14,610
Now inside of this map component,
It uses Esri Leaflet to display

201
00:13:14,630 --> 00:13:16,850
a simple map of Washington, D.

202
00:13:16,850 --> 00:13:17,130
C.

203
00:13:18,080 --> 00:13:21,690
Now, Esri Leaflet is, if you're
unfamiliar, it's a lightweight

204
00:13:21,690 --> 00:13:27,050
set of plugins that allows
you to easily integrate maps

205
00:13:27,430 --> 00:13:30,460
using ArcGIS basemap styles.

206
00:13:30,560 --> 00:13:35,010
it really opens up the space for
you to use different ArcGIS styles.

207
00:13:35,360 --> 00:13:37,890
It also actually allows you
to use many other different

208
00:13:37,950 --> 00:13:40,180
ArcGIS capabilities as well.

209
00:13:40,680 --> 00:13:46,560
Now in this map component, I first use the
use rough hook to store the map instance.

210
00:13:47,060 --> 00:13:51,130
And this ensures that the map is
initialized only once and doesn't

211
00:13:51,130 --> 00:13:55,390
get like rein initialized every
time that the component re renders.

212
00:13:55,890 --> 00:14:01,010
By checking if, the map ref is null,
we do ensure that the map is created

213
00:14:01,010 --> 00:14:06,040
only on the components first mount
next, inside the use effect hook.

214
00:14:06,755 --> 00:14:09,775
I initialize the map when
the component first renders.

215
00:14:10,305 --> 00:14:13,045
And the map, like I said, is
centered on Washington, D.

216
00:14:13,045 --> 00:14:13,405
C.

217
00:14:13,995 --> 00:14:18,635
with a set latitude and
longitude, as we can see here.

218
00:14:19,175 --> 00:14:22,765
Now, Leaflet does go
latitude, comma, longitude.

219
00:14:23,245 --> 00:14:26,485
Other mapping libraries do
longitude, comma, latitude.

220
00:14:27,005 --> 00:14:27,815
Just depends.

221
00:14:28,075 --> 00:14:32,165
Now, I will then add the
ArcGIS community base map here.

222
00:14:32,900 --> 00:14:36,580
To the map, and I, in order to do
that, I have to use the vector basemap

223
00:14:36,590 --> 00:14:39,189
layer method from Esri leaflet.

224
00:14:39,190 --> 00:14:45,330
And the API key required to access the
ArcGIS services is securely retrieved

225
00:14:45,340 --> 00:14:51,840
from the environment variable, Vite
ArcGIS API key, using the import.

226
00:14:51,850 --> 00:14:51,890
meta.

227
00:14:51,890 --> 00:14:53,180
env.

228
00:14:53,200 --> 00:14:55,870
So I have my API key
stored in my env file.

229
00:14:56,370 --> 00:15:01,480
And I pass this API key as a token
to authenticate the request when

230
00:15:01,500 --> 00:15:07,910
adding the base map to the map with
add to and then map ref current.

231
00:15:08,410 --> 00:15:13,810
And finally, I return a div with an
ID of map where the map is rendered.

232
00:15:14,560 --> 00:15:17,450
And the height of this
map, I've set it to 70%.

233
00:15:18,295 --> 00:15:21,975
Of the viewport height to ensure
that it takes up a good portion of

234
00:15:21,975 --> 00:15:25,665
the screen with leaving some room
for our gamified elements below.

235
00:15:26,165 --> 00:15:30,725
At this point, we have a fully
functioning basic map of DC.

236
00:15:31,375 --> 00:15:33,045
And let's go ahead and
run this and check it out.

237
00:15:33,545 --> 00:15:37,665
All right, so you'll see that the map
center, the map centered on Washington DC

238
00:15:37,665 --> 00:15:39,815
here is displayed in our map container.

239
00:15:40,385 --> 00:15:42,335
And yeah, now that we
have our map in place.

240
00:15:42,955 --> 00:15:48,745
We can start incorporating the gamified
elements to enhance our user experience.

241
00:15:49,245 --> 00:15:52,705
Okay, so we're moving on to, the
first letter in our acronym, which

242
00:15:52,705 --> 00:15:55,315
is G Games, our gamified components.

243
00:15:56,025 --> 00:15:59,025
in order to incorporate this,
I'm going to start small.

244
00:15:59,045 --> 00:16:02,365
We're just going to add a
progress bar to our app.

245
00:16:02,975 --> 00:16:08,895
this progress bar will track a user's XP
and give them a sense of, progression.

246
00:16:09,595 --> 00:16:11,225
The concept is pretty simple.

247
00:16:11,655 --> 00:16:16,655
it's really just when the user performs
some action, in this case we're just

248
00:16:16,675 --> 00:16:22,635
going to put in a button, that they'll
then gain some XP or experience points

249
00:16:22,645 --> 00:16:24,285
and the progress bar will fill up.

250
00:16:24,445 --> 00:16:29,005
And once it's filled up, it will
refresh itself, like leveling up.

251
00:16:30,005 --> 00:16:33,205
Alright, so in order to build this,
we're going to start with a very basic

252
00:16:33,275 --> 00:16:35,505
progress bar component in our app.

253
00:16:36,005 --> 00:16:39,795
And inside of this component, the
progress bar will take in one prop.

254
00:16:40,055 --> 00:16:43,695
And that will be the current
XP, or the user's score.

255
00:16:44,195 --> 00:16:47,505
Now, we can calculate the
percentage, filled by calculating

256
00:16:47,515 --> 00:16:52,605
the XP, out of the max XP, which
in this case is going to be 100.

257
00:16:53,385 --> 00:16:58,685
And we'll use that value to set the
width of the inner, what will be a div.

258
00:16:59,575 --> 00:17:01,825
and this will visually
represent the progress.

259
00:17:01,865 --> 00:17:04,865
So after every 100 XP,
We'll have it, reset.

260
00:17:05,365 --> 00:17:10,175
So next, we'll use a simple HTML
structure for our progress bar.

261
00:17:10,215 --> 00:17:14,305
And this'll contain, this'll be
two different divs that we'll use.

262
00:17:14,645 --> 00:17:18,885
One for the border, and one to
show progress with a green filling.

263
00:17:19,385 --> 00:17:24,765
And next in my app, JSX, I'm going
to import the progress bar component.

264
00:17:25,685 --> 00:17:29,065
and also to keep track of the user's
XP value, we'll need to use states.

265
00:17:29,850 --> 00:17:33,960
So I'll set the initial state to
zero, and then I'll add a simple

266
00:17:33,970 --> 00:17:35,950
click handler to update the XP.

267
00:17:36,900 --> 00:17:40,410
And when we click on the button,
we'll add 10 XP each time.

268
00:17:41,160 --> 00:17:45,830
Now, below the map, I need to make
sure I display this button and

269
00:17:45,840 --> 00:17:47,310
give it the click functionality.

270
00:17:47,720 --> 00:17:50,840
And I will also display
the current XP value and my

271
00:17:50,840 --> 00:17:52,990
progress bar with the XP prop.

272
00:17:53,490 --> 00:17:54,580
Now let's go ahead and test this out.

273
00:17:55,100 --> 00:17:59,650
When we click gain XP, the button,
we should see the XP increase.

274
00:18:00,220 --> 00:18:04,090
And the progress bar will fill
up accordingly, resetting after

275
00:18:04,090 --> 00:18:06,170
every 100 experience points.

276
00:18:06,670 --> 00:18:11,090
Now this is a really simple example
of a Gamify component, but even with

277
00:18:11,090 --> 00:18:16,210
this basic mechanic, users can feel
a greater sense of engagement through

278
00:18:16,210 --> 00:18:17,760
the progress that they're making.

279
00:18:18,680 --> 00:18:19,120
gaining.

280
00:18:19,540 --> 00:18:24,510
Now to add more value to this, especially
in a map app like this, I would say you

281
00:18:24,510 --> 00:18:29,050
could tie this kind of functionality
to locations that, say, maybe the user

282
00:18:29,080 --> 00:18:33,950
discovers on the map, rewarding them with
some XP for each place that they discover.

283
00:18:33,960 --> 00:18:37,830
So click on a place on the map,
and they gain some XP points.

284
00:18:38,570 --> 00:18:43,420
All right, now that we've added our first
gamified component, the progress bar.

285
00:18:43,475 --> 00:18:45,755
we're going to start thinking
about managing state in a

286
00:18:45,755 --> 00:18:47,305
bit of a more scalable way.

287
00:18:47,655 --> 00:18:51,675
So right now this progress bar is
handled locally using useState,

288
00:18:52,035 --> 00:18:53,985
which is fine for a simple app.

289
00:18:54,275 --> 00:18:59,055
However, as you scale your app and
add more features, say levels, badges,

290
00:18:59,265 --> 00:19:03,765
maybe multiple map styles, sharing
the data across multiple components

291
00:19:04,275 --> 00:19:05,515
will become a little bit tricky.

292
00:19:06,205 --> 00:19:09,345
So this is where advanced state
control is going to come into play.

293
00:19:09,845 --> 00:19:14,435
And we're gonna use React context, API,
and this will allow us to manage the

294
00:19:14,435 --> 00:19:19,055
state globally, making it accessible
across all the different components.

295
00:19:19,475 --> 00:19:21,275
So we're gonna refactor our code.

296
00:19:21,965 --> 00:19:25,905
We'll first start by creating
a new file called Game Context.

297
00:19:26,535 --> 00:19:30,975
And first we use the create
context to create the game context.

298
00:19:31,495 --> 00:19:34,825
And this will let any component
access the global state.

299
00:19:35,605 --> 00:19:36,115
Then we're gonna.

300
00:19:36,670 --> 00:19:40,650
define our initial state for
our application, which is the XP

301
00:19:40,650 --> 00:19:43,310
value set to zero in this case.

302
00:19:43,810 --> 00:19:46,590
Alright, now we're going to the
reducer function, and this is

303
00:19:46,590 --> 00:19:51,270
going to be handling, managing
the state for our experience.

304
00:19:51,770 --> 00:19:57,280
Now, inside of the reducer function,
we're going to have it listen

305
00:19:57,280 --> 00:19:59,420
for two main types of functions.

306
00:19:59,890 --> 00:20:04,150
First, this is going to be
when we increment our XP value.

307
00:20:04,985 --> 00:20:09,995
It's going to preserve the current
state using the spread operator, and

308
00:20:09,995 --> 00:20:14,635
then we're going to update the current
XP by adding the amount provided in the

309
00:20:14,645 --> 00:20:18,795
action payload to the existing XP value.

310
00:20:19,295 --> 00:20:24,435
The second action will be reset
XP, and this will really just

311
00:20:24,435 --> 00:20:28,915
reset the experience, or XP
value, back to the initial state.

312
00:20:29,820 --> 00:20:34,520
And then, finally, we'll have a default,
so any other actions, not recognized,

313
00:20:34,520 --> 00:20:36,600
we'll simply return the current state.

314
00:20:37,100 --> 00:20:39,710
Okay, almost done with our context.

315
00:20:39,720 --> 00:20:43,800
now that we do have the context and
reducer set up, the next step is to

316
00:20:43,800 --> 00:20:46,480
wrap the app in the game provider.

317
00:20:47,450 --> 00:20:51,190
And this is going to make the
global XP state, accessible

318
00:20:51,190 --> 00:20:52,930
to all components in our app.

319
00:20:52,930 --> 00:20:53,370
Okay.

320
00:20:53,590 --> 00:20:55,590
So we'll start by setting
up the GameProvider.

321
00:20:56,060 --> 00:21:00,290
And inside this provider, we
use the UseReducer hook, which

322
00:21:00,330 --> 00:21:01,600
takes two different things.

323
00:21:01,900 --> 00:21:06,850
The Reducer function we created
earlier, and the initial state.

324
00:21:07,350 --> 00:21:12,550
The Reducer, that will help us manage
state transitions based on actions,

325
00:21:12,590 --> 00:21:15,320
like adding XP or resetting the state.

326
00:21:15,820 --> 00:21:19,880
Alright, now next we are going
to wrap the GameContextProvider

327
00:21:19,920 --> 00:21:21,690
around the Children component.

328
00:21:21,825 --> 00:21:24,775
It's passing in state and
dispatch as the value.

329
00:21:25,685 --> 00:21:31,655
And this step is critical to allow
that, access to all of the children, all

330
00:21:31,655 --> 00:21:34,155
components to have access to the state.

331
00:21:34,655 --> 00:21:35,275
All right.

332
00:21:35,615 --> 00:21:42,145
Now in the original version of our app dot
JSX, we were managing the XP using the use

333
00:21:42,155 --> 00:21:48,135
state hook locally, and then we defined a
local XP state and a handle click function

334
00:21:48,565 --> 00:21:51,005
to increment the XP by 10 each time.

335
00:21:51,935 --> 00:21:54,995
And the updated XP was then
passed to the progress bar.

336
00:21:55,345 --> 00:21:59,825
But now we're switching to this
global state management, which

337
00:21:59,855 --> 00:22:01,725
is managed by the game context.

338
00:22:02,055 --> 00:22:05,485
first to do this, we're going to,
instead of useState, we're going

339
00:22:05,485 --> 00:22:09,185
to use useContext, and I'll also
need to import the game context.

340
00:22:10,185 --> 00:22:15,735
Now, we'll use the global state
objects containing the XP.

341
00:22:16,190 --> 00:22:17,150
And the dispatch.

342
00:22:17,180 --> 00:22:21,240
Fun dispatch function, to
trigger state updates through

343
00:22:21,240 --> 00:22:23,340
the context of game context.

344
00:22:23,840 --> 00:22:27,390
Alright, next we'll go ahead and
update the handle click function.

345
00:22:28,260 --> 00:22:34,130
So instead of directly updating the
state with set xp, we dispatch and

346
00:22:34,190 --> 00:22:40,080
action with the increment xp, that
type, and then a payload of 10.

347
00:22:40,680 --> 00:22:44,100
And this is handled by the
reducer endgame context.

348
00:22:44,535 --> 00:22:50,685
All right, finally, we're going to replace
the local XP reference with state dot XP.

349
00:22:51,185 --> 00:22:56,355
Okay, now that we've done all of this,
the final step is to make sure that the

350
00:22:56,375 --> 00:22:58,915
game provider wraps our app component.

351
00:22:59,405 --> 00:23:03,545
So this is important because the game
provider makes the global state available

352
00:23:03,545 --> 00:23:05,855
to all the components within the app.

353
00:23:06,665 --> 00:23:09,585
So we're going to do this by
going to the main entry point of

354
00:23:09,585 --> 00:23:11,225
our app, which is main dot JSX.

355
00:23:11,775 --> 00:23:14,715
I'm going to wrap the app
component in the game provider.

356
00:23:15,215 --> 00:23:21,255
All right, so in summary, now that we've
done all of this, it's going to allow us

357
00:23:21,285 --> 00:23:27,405
to seamlessly pass XP to any component
in our application that needs it.

358
00:23:27,905 --> 00:23:31,505
all right, so now that we've
got our foundation with gamified

359
00:23:31,555 --> 00:23:34,885
components and advanced state
control, we're going to move on to M.

360
00:23:35,855 --> 00:23:41,015
So the M, as we learned earlier,
is membozation, and this focuses

361
00:23:41,015 --> 00:23:42,375
on optimizing the performance.

362
00:23:42,875 --> 00:23:46,055
So I'm going to do this
in my progress bar.

363
00:23:46,055 --> 00:23:52,155
And again, this will prevent any
unnecessary re renders from happening.

364
00:23:52,565 --> 00:23:57,465
So in my progress bar component, I'm
going to bring in Memo, React Memo,

365
00:23:57,875 --> 00:24:00,545
and then wrap the component in Memo.

366
00:24:00,965 --> 00:24:04,585
So it will only re render
when the XP prop changes.

367
00:24:05,455 --> 00:24:07,425
This really is a simple
way to boost performance.

368
00:24:07,600 --> 00:24:07,700
components.

369
00:24:08,050 --> 00:24:12,780
And while it might really have a big
impact in a small app like this, it

370
00:24:12,780 --> 00:24:14,820
really would be essential in larger ones.

371
00:24:15,690 --> 00:24:19,840
For instance, if we add a bunch
more features like leaderboards,

372
00:24:20,160 --> 00:24:26,390
animations, multiplayer interactions,
memoization can be really valuable.

373
00:24:26,950 --> 00:24:30,830
And of course, as we learned earlier,
react recently introduced the react

374
00:24:30,840 --> 00:24:33,730
compiler, which will automatically
optimize these components.

375
00:24:34,375 --> 00:24:38,465
So with a little bit of configuration
there, all, we won't have to go in and

376
00:24:38,475 --> 00:24:41,195
manually use this react memo anymore.

377
00:24:41,695 --> 00:24:45,135
Now onto the E, which it
stands for efficient rendering.

378
00:24:46,005 --> 00:24:50,965
And this is where we look at loading
different components more efficiently,

379
00:24:51,395 --> 00:24:53,045
as the user interacts with the app.

380
00:24:53,055 --> 00:24:57,685
So again, we're going to do this,
with one key strategy, which is

381
00:24:57,695 --> 00:24:59,745
lazily loading different components.

382
00:25:00,570 --> 00:25:03,170
And this really just means that
we only load them when they're

383
00:25:03,170 --> 00:25:05,790
needed rather than all up front.

384
00:25:06,290 --> 00:25:10,120
and it does help with some code
splitting, improving load times and

385
00:25:10,120 --> 00:25:11,770
that kind of thing in larger apps.

386
00:25:12,020 --> 00:25:17,770
Now for our example, we're going to just
lazily load our progress bar, just to

387
00:25:17,780 --> 00:25:19,820
show kind of the functionality of this.

388
00:25:20,310 --> 00:25:25,780
So to do this, I'll use React Lazy to
dynamically import the progress bar.

389
00:25:26,695 --> 00:25:31,815
However, React won't know to actually, it
won't know what to display while loading.

390
00:25:32,095 --> 00:25:37,055
So we will need to import suspense and
wrap the progress bar in a suspense

391
00:25:37,055 --> 00:25:40,305
component as well and show a fallback.

392
00:25:40,555 --> 00:25:45,965
And this fallback will be whatever
shows while the progress bar is loading.

393
00:25:45,975 --> 00:25:49,575
So for instance, I'm going to go ahead
and say loading progress bar here.

394
00:25:50,075 --> 00:25:53,535
So when we run the app, you'll
see the loading progress bar.

395
00:25:54,455 --> 00:25:59,505
message briefly as React fetches
the component asynchronously.

396
00:26:00,245 --> 00:26:01,135
We can see it there.

397
00:26:01,705 --> 00:26:02,095
All right.

398
00:26:02,415 --> 00:26:04,445
Finally, we're on to S.

399
00:26:04,695 --> 00:26:09,115
So now that we've optimized our app's
performance, it's time to bring in

400
00:26:09,115 --> 00:26:10,675
a little bit of social interaction.

401
00:26:11,385 --> 00:26:15,705
Now this step adds some fun engagement
by allowing users to share their

402
00:26:15,705 --> 00:26:18,785
progress with friends on social media.

403
00:26:18,865 --> 00:26:22,895
So to achieve this, I'm going to
create a social share component.

404
00:26:23,395 --> 00:26:29,055
And this will let users share
their XP on X, or formerly Twitter.

405
00:26:29,555 --> 00:26:34,365
Okay, so the component accepts XP
as a prop, representing, again,

406
00:26:34,365 --> 00:26:36,195
the experience of the user.

407
00:26:36,695 --> 00:26:40,775
And this will be dynamically
inserted into the social media post.

408
00:26:41,165 --> 00:26:46,345
So inside the component, we will
define a shareOnX function, and that

409
00:26:46,345 --> 00:26:51,155
will generate a URL That will, be pre
filled with the message for X, and

410
00:26:51,165 --> 00:26:53,145
it will also open it in a new window.

411
00:26:53,645 --> 00:26:58,135
Alright, so next we're going to add a
Share on X button that when clicked,

412
00:26:58,135 --> 00:27:02,545
it's going to call our function prompting
the user to share their experience.

413
00:27:03,045 --> 00:27:08,245
finally, we are going to
export the component, and then

414
00:27:08,245 --> 00:27:09,495
we're going to integrate it.

415
00:27:09,505 --> 00:27:13,745
So we import the social
share component into our app.

416
00:27:13,755 --> 00:27:14,565
jsx.

417
00:27:15,425 --> 00:27:19,335
We're going to render it just below the
progress bar, and of course we're going

418
00:27:19,335 --> 00:27:22,185
to pass in the XP prop with that as well.

419
00:27:22,685 --> 00:27:23,105
Okay.

420
00:27:24,005 --> 00:27:26,555
Let's go ahead and open up
our app and test that out.

421
00:27:27,055 --> 00:27:34,205
Okay, clicking on the share button
here, we see that X comes up, and

422
00:27:34,205 --> 00:27:36,135
it's filled with my experience points.

423
00:27:36,635 --> 00:27:37,045
Awesome.

424
00:27:37,725 --> 00:27:41,885
Okay, so we've covered the games
framework, adding features like

425
00:27:41,905 --> 00:27:48,565
XP tracking, progress bars,
social sharing and optimizing,

426
00:27:48,565 --> 00:27:50,495
the performance, state management.

427
00:27:51,015 --> 00:27:55,305
And so all of these techniques are
really, again, essential as our app grows.

428
00:27:55,785 --> 00:27:58,815
to wrap things up, I've compiled
some resources for you guys.

429
00:27:59,490 --> 00:28:02,530
So we've got documentation
for the links for React, Ezri

430
00:28:02,530 --> 00:28:05,010
Leaflet, and the React Compiler.

431
00:28:05,580 --> 00:28:09,280
and I've also got some links here to
the code for the demo that we just

432
00:28:09,280 --> 00:28:11,800
did, the starter and final versions.

433
00:28:12,370 --> 00:28:15,940
So to access these links, you
can use the PDF version of these

434
00:28:15,940 --> 00:28:18,630
slides at this QR code here.

435
00:28:19,130 --> 00:28:21,760
And that's all I've
got for you guys today.

436
00:28:21,760 --> 00:28:23,590
So thank you guys for joining.

437
00:28:23,600 --> 00:28:27,320
I really hope that you feel inspired
to add some kind of gamification.

438
00:28:28,120 --> 00:28:29,780
into your applications.

439
00:28:30,250 --> 00:28:31,950
Thanks and happy coding.

