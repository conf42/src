1
00:00:00,210 --> 00:00:01,080
Hello, friends.

2
00:00:01,080 --> 00:00:05,070
Hope you are all doing great and
having a great time in this conference.

3
00:00:05,340 --> 00:00:06,000
My name is Jit.

4
00:00:06,660 --> 00:00:11,070
I'm working as a test architect with
about 15 years of experience spanning

5
00:00:11,070 --> 00:00:16,840
across various industry types, like right
from manufacturing and then banking,

6
00:00:16,840 --> 00:00:20,410
financing, retail, telecom, crm, whatnot.

7
00:00:20,910 --> 00:00:25,340
And in fact I got a, opportunity to
work with various clients across the

8
00:00:25,560 --> 00:00:29,730
globe, right from, my first project is
in Tokyo, Japan, and then I worked in

9
00:00:29,730 --> 00:00:34,350
Singapore for about four years, and then
India, then Europe, few countries in

10
00:00:34,350 --> 00:00:36,810
Europe, and then last 10 years in USA.

11
00:00:37,485 --> 00:00:41,805
Okay, before getting into the topic, I
would like to thank Con 42 for giving

12
00:00:41,805 --> 00:00:46,485
me this opportunity and helping me to
bring out my ideas in front of you.

13
00:00:47,295 --> 00:00:51,825
So today's my topic is building a
resilient test automation, a universal

14
00:00:51,825 --> 00:00:53,715
framework for service access.

15
00:00:54,045 --> 00:00:58,155
So it's a revolutionary approach to
tackle software testing challenges and

16
00:00:58,155 --> 00:01:01,335
enhance efficiency across the enterprise.

17
00:01:01,835 --> 00:01:05,855
Okay, so before getting into the topic,
I would like to show you what are the

18
00:01:05,855 --> 00:01:11,465
challenges currently the software testing
is facing and how I'm going to address it.

19
00:01:11,965 --> 00:01:15,415
Okay, so this is software
testing as a whole.

20
00:01:15,415 --> 00:01:19,515
It consists of 30 to
35% of the project cost.

21
00:01:19,725 --> 00:01:26,115
So any software or any app on your
phone, it undergo a rigorous testing.

22
00:01:26,385 --> 00:01:31,695
So to have a bug free product into
the market, there goes in lot of

23
00:01:31,695 --> 00:01:35,715
testing effort, which is almost
30 to 35% of the project cost.

24
00:01:36,449 --> 00:01:40,019
But still there are a lot of
challenges there and there is lot of

25
00:01:40,019 --> 00:01:41,999
improvements and transformation needed.

26
00:01:42,359 --> 00:01:48,119
And more importantly, even the
AI right now is not anywhere near

27
00:01:48,359 --> 00:01:50,069
to replace a software testing.

28
00:01:50,549 --> 00:01:55,139
Yes, it can replace the development
programming, but it's not anywhere

29
00:01:55,139 --> 00:01:56,849
near to replace the software testing.

30
00:01:57,179 --> 00:01:57,569
Okay.

31
00:01:57,809 --> 00:02:00,389
Now, let's see, what are
the major challenges?

32
00:02:00,389 --> 00:02:04,269
So one is a tool fragmentation
any organization will have

33
00:02:04,299 --> 00:02:08,139
thousands of tools in their stack,
hundreds of tools in their stack.

34
00:02:08,139 --> 00:02:13,160
And every tool, it, it has its own
advantages, disadvantages it needs a lot

35
00:02:13,160 --> 00:02:18,570
of effort and a lot of strategy to bring
out a proper tool to, help with the test

36
00:02:18,570 --> 00:02:21,270
automation and then maintenance overhead.

37
00:02:21,785 --> 00:02:27,875
So as we bring in so many tools in
the market variety, it needs regular

38
00:02:27,875 --> 00:02:32,135
maintenance, not just that software
testing or test automation is all

39
00:02:32,135 --> 00:02:37,835
about writing a piece of code to test
the another piece of code, right?

40
00:02:38,165 --> 00:02:40,655
So as the application grows.

41
00:02:41,010 --> 00:02:48,030
Even the testing code also will grow into
tons and tons of lines of code, which in

42
00:02:48,030 --> 00:02:52,070
reality becomes unmanageable code, right?

43
00:02:52,070 --> 00:02:53,180
Because the.

44
00:02:54,110 --> 00:02:57,770
Software testers are not professional
developers and professional

45
00:02:57,770 --> 00:02:59,630
developers will not have that testing.

46
00:02:59,630 --> 00:03:00,680
Real creativity.

47
00:03:00,740 --> 00:03:02,690
See, testing is a creativity job, right?

48
00:03:03,230 --> 00:03:08,290
So to bring the best things in
place and achieve a, applicable

49
00:03:08,290 --> 00:03:10,420
solution is like highly impossible.

50
00:03:10,870 --> 00:03:12,280
And that insufficient coverage.

51
00:03:12,310 --> 00:03:12,700
Yes.

52
00:03:12,700 --> 00:03:16,899
Most of the times, the software
automation test script would be

53
00:03:16,899 --> 00:03:21,609
under maintenance and it'll not be
available for us to achieve the.

54
00:03:21,994 --> 00:03:23,284
Optimum coverage.

55
00:03:23,464 --> 00:03:28,504
So every time it'll be like targeted
functionality, targeted screens,

56
00:03:28,504 --> 00:03:33,064
specific screens will be automated,
and then resource constraints.

57
00:03:33,124 --> 00:03:37,114
So looking at these levels of
complexity, handling hundreds of

58
00:03:37,114 --> 00:03:42,894
tools maintaining tons of lines
of code and last minute hiccups.

59
00:03:42,894 --> 00:03:45,624
So a resource should be highly skillful.

60
00:03:45,969 --> 00:03:50,259
Highly knackle and he has
to have a huge strategy.

61
00:03:51,249 --> 00:03:54,099
So generally, organizations
struggle with maintaining automation

62
00:03:54,099 --> 00:03:58,519
across diverse tools and mostly
achieve pass partial discovery.

63
00:03:58,849 --> 00:04:04,099
So as of today, test automation
ease a loss making business.

64
00:04:04,099 --> 00:04:04,189
Yes.

65
00:04:04,689 --> 00:04:06,639
So now what is my solution?

66
00:04:06,639 --> 00:04:09,669
What is my solution is
targeting to achieve?

67
00:04:10,419 --> 00:04:14,179
If you all heard about the buzzwords
in the market right now in the test

68
00:04:14,179 --> 00:04:19,429
automation market, script plus automation
is the mostly heard buzzword, right?

69
00:04:19,700 --> 00:04:24,049
But my solution, it's beyond script
plus it's instant automation.

70
00:04:24,440 --> 00:04:29,630
So even script plus automation also
requires to configure the objects,

71
00:04:29,630 --> 00:04:35,520
create the flows, maintain the tons
of flows in the application, right?

72
00:04:35,580 --> 00:04:39,690
So all these I achieve, using
a tool agnostic architecture.

73
00:04:39,960 --> 00:04:45,210
So in respect of the tool,
application or the domain, the

74
00:04:45,210 --> 00:04:47,310
architecture remains always same.

75
00:04:47,370 --> 00:04:52,629
And this architecture is flexible
enough to cater to various testing

76
00:04:52,629 --> 00:04:56,949
domains like functional testing,
database testing, API, testing, whatnot.

77
00:04:57,449 --> 00:05:00,029
And the soul and heart of my applica.

78
00:05:00,059 --> 00:05:02,549
My framework is virtual
application modeling.

79
00:05:02,639 --> 00:05:07,650
So in general, most of the automation
efforts goes in UI automation.

80
00:05:07,979 --> 00:05:11,340
So here we bring in virtual
application modeling that

81
00:05:11,340 --> 00:05:13,259
will help save tons of effort.

82
00:05:13,439 --> 00:05:16,939
So I'll show you how we achieve
it, and then unified approach.

83
00:05:17,239 --> 00:05:20,530
As I told you the core framework
remains same, and it is.

84
00:05:20,945 --> 00:05:22,295
Not going to change.

85
00:05:22,325 --> 00:05:27,815
And even the, the plug and play of the
peripheral tools around this architecture.

86
00:05:28,200 --> 00:05:32,400
So it's all unified, so it's like
a breeze for anybody to just jump

87
00:05:32,400 --> 00:05:34,140
in and achieve the automation.

88
00:05:34,770 --> 00:05:39,045
So to, to sum it up, it's a
UUF my, it's my framework.

89
00:05:39,105 --> 00:05:42,945
Universal automation framework transcends
traditional script plus solutions by

90
00:05:42,945 --> 00:05:47,565
delivering gen new instant automation
through groundbreaking innovation.

91
00:05:47,755 --> 00:05:51,325
So far you would not have heard
about in instant automation,

92
00:05:51,325 --> 00:05:53,395
and this is it for you.

93
00:05:53,895 --> 00:05:57,934
Okay, so let's look at
the know my architecture.

94
00:05:58,214 --> 00:06:02,684
As I told, my architecture will have
a tool agnostic OB object repository.

95
00:06:02,894 --> 00:06:06,424
So right now there are many open
source tools which will help you to

96
00:06:06,424 --> 00:06:08,914
create a standalone object repository.

97
00:06:09,214 --> 00:06:13,585
So using this object repository,
my framework will generate

98
00:06:13,585 --> 00:06:14,755
a virtual application.

99
00:06:15,055 --> 00:06:17,815
You might be a little wondering
what is this application, virtual

100
00:06:17,815 --> 00:06:19,165
application, what is its name?

101
00:06:19,225 --> 00:06:21,995
Generally manual testers
write their testing.

102
00:06:22,445 --> 00:06:25,805
Assuming there is some application
and there are some fields.

103
00:06:25,865 --> 00:06:28,265
All, it's all their imagination, right?

104
00:06:28,625 --> 00:06:33,260
And they write in a kind of whiteboard,
just write some text out there

105
00:06:33,260 --> 00:06:34,835
and, embed the test data there.

106
00:06:35,350 --> 00:06:40,390
So for anybody to use the test steps
or test data, it is highly impossible

107
00:06:40,450 --> 00:06:46,260
unless they manually copy the data
and use it in for the scripts.

108
00:06:46,350 --> 00:06:50,340
But here the virtual application, what
does the virtual application does is

109
00:06:50,670 --> 00:06:56,160
so going forward, the manual testers
write their test case, looking at

110
00:06:56,160 --> 00:06:58,050
the application next to their screen.

111
00:06:58,440 --> 00:07:05,250
And also they can use this virtual
application to enter the data validation

112
00:07:05,250 --> 00:07:08,400
points and then sequences, right?

113
00:07:08,670 --> 00:07:11,130
So this captures all of that.

114
00:07:11,670 --> 00:07:14,190
And we have a concept called routines.

115
00:07:14,250 --> 00:07:17,940
So when a manual tester starts
written manual test case, there will

116
00:07:17,940 --> 00:07:19,980
be a lot of repeated steps, right?

117
00:07:20,670 --> 00:07:23,430
So every time we did not do it manually.

118
00:07:23,430 --> 00:07:24,420
We have a routine.

119
00:07:24,480 --> 00:07:24,840
So just.

120
00:07:25,340 --> 00:07:28,770
Create a routine and pick that
pull that flow from a routine.

121
00:07:29,160 --> 00:07:33,270
So that means we are automating the
manual test generation process as well.

122
00:07:33,770 --> 00:07:36,860
So now let's say we have
developed some test cases.

123
00:07:36,860 --> 00:07:39,800
We have entered the test data
in the virtual application

124
00:07:39,800 --> 00:07:41,760
instead the plane text boxes.

125
00:07:42,270 --> 00:07:45,840
So now what our framework does, ease.

126
00:07:46,170 --> 00:07:52,530
So based on the data given in the virtual
application, it'll generate a keyword

127
00:07:52,530 --> 00:07:55,680
driven data sheet, so to its name.

128
00:07:55,680 --> 00:08:00,180
This keyword driven data sheet drives
the testing test automation tool.

129
00:08:00,770 --> 00:08:02,480
So we have a test automation tool.

130
00:08:02,600 --> 00:08:06,410
We have a generic framework, which
is very common component across

131
00:08:06,410 --> 00:08:10,190
all automation frameworks and which
hardly takes any time to develop.

132
00:08:10,520 --> 00:08:15,340
So this generic framework is
driven by the keyword data sheet.

133
00:08:15,890 --> 00:08:21,810
That means as I write the manual
test case, my data for automation

134
00:08:21,810 --> 00:08:23,370
and my framework are ready.

135
00:08:23,870 --> 00:08:29,510
All I just need to need is to trigger
the test and in fact, we have a

136
00:08:29,570 --> 00:08:35,250
generic reporting structure as well
where it saves all the data un until

137
00:08:35,250 --> 00:08:39,420
the leaf level and it's up to us to
plug in any third party reporting

138
00:08:39,420 --> 00:08:41,770
tool and get the level of details.

139
00:08:42,110 --> 00:08:45,610
We want, okay, so this is
all about my application.

140
00:08:45,610 --> 00:08:46,570
Now you understand, right?

141
00:08:46,570 --> 00:08:48,430
What does instant automation means?

142
00:08:48,650 --> 00:08:52,975
Going forward, I need not touch
my automation data or automation

143
00:08:52,975 --> 00:08:55,225
framework, automation tool, or anything.

144
00:08:55,555 --> 00:08:59,080
I just have to update my manual
test case and my automation ready.

145
00:08:59,485 --> 00:09:02,095
So forget about what kind
of tool you are using.

146
00:09:02,155 --> 00:09:04,555
You just pick any tool in the market.

147
00:09:04,885 --> 00:09:08,185
Every tool in the market is compatible
with keyboard driven framework.

148
00:09:08,800 --> 00:09:14,460
Yeah, that's overall my architecture
and how it is going to help so

149
00:09:15,095 --> 00:09:16,655
these are the efficiency gains.

150
00:09:16,705 --> 00:09:22,075
We see, we saw on an average of 78% of
maintenance reduction because in fact

151
00:09:22,075 --> 00:09:26,735
there is no maintenance at all because
we are not writing any line of code or

152
00:09:26,735 --> 00:09:31,005
to say, 10% of line of code compared
to traditional automation because we

153
00:09:31,005 --> 00:09:32,955
have to generate the generic framework.

154
00:09:33,465 --> 00:09:38,235
But still this maintenance, the 20 22%
of the maintenance is also contributed

155
00:09:38,235 --> 00:09:39,690
to the manual test case update.

156
00:09:40,160 --> 00:09:43,790
Which is already included in
the manual testing cost, but

157
00:09:43,790 --> 00:09:45,170
still we want to put it here.

158
00:09:45,650 --> 00:09:51,690
And then our development is 65% faster
and we increase the coverage 82%.

159
00:09:51,840 --> 00:09:56,825
So what this coverage means, like in
general when you have to execute test

160
00:09:56,935 --> 00:09:59,405
run a test for my production release.

161
00:09:59,755 --> 00:10:04,195
At least, 30 or 40% of my test
cases would be under maintenance.

162
00:10:04,405 --> 00:10:08,245
But here, since there is a least
maintenance effort, maximum test

163
00:10:08,245 --> 00:10:12,715
cases could be executed for my
releases and then cost savings.

164
00:10:12,715 --> 00:10:15,640
So we have taken a lower point of 40%.

165
00:10:16,330 --> 00:10:17,830
But in fact, it is more why?

166
00:10:17,830 --> 00:10:20,800
Because there is no
maintenance cost at all.

167
00:10:21,100 --> 00:10:23,800
So as you see, it's already reduced.

168
00:10:23,890 --> 00:10:29,140
So all that we need is to maintain the
framework and its robust robustness.

169
00:10:29,770 --> 00:10:35,110
So organizations implementing uf reports
significant implements across key metrics.

170
00:10:35,800 --> 00:10:39,310
So cost benefit equation as we
see in traditional approach.

171
00:10:39,650 --> 00:10:43,550
You have to maintain a big
suite of tools and the licensing

172
00:10:43,550 --> 00:10:45,590
costs across multiple platforms.

173
00:10:46,045 --> 00:10:51,655
And the major time ma major cost
expenditure is on the resources training.

174
00:10:52,045 --> 00:10:53,710
And then their management.

175
00:10:54,125 --> 00:10:58,175
And then significant ongoing maintenance
costs because we will be using all

176
00:10:58,175 --> 00:11:02,975
our energy resources, everything on
the maintenance and then T effort.

177
00:11:03,125 --> 00:11:03,395
Yes.

178
00:11:03,395 --> 00:11:07,145
Why we have to do the redundant effort
when the tool can take care of it.

179
00:11:07,265 --> 00:11:08,765
So now you have approach.

180
00:11:08,825 --> 00:11:12,365
So we substantially reduce
the tool dependencies and

181
00:11:12,365 --> 00:11:15,275
associate licensing cost because.

182
00:11:15,525 --> 00:11:18,555
We use tool for very less amount of time.

183
00:11:18,865 --> 00:11:23,225
Basically the number of licenses
would be reduced because we are

184
00:11:23,225 --> 00:11:24,845
reducing the development effort.

185
00:11:25,640 --> 00:11:30,570
And streamline skill requirements and
then centralized efficient centralized

186
00:11:30,600 --> 00:11:34,980
maintenance and maximize resource
sharing because our core framework

187
00:11:35,010 --> 00:11:37,860
is going to be standard, right?

188
00:11:38,050 --> 00:11:41,140
My resources can work any project across.

189
00:11:41,140 --> 00:11:44,105
All that they need to know is
little bit of functional, and

190
00:11:44,260 --> 00:11:47,825
any troubleshooting with the
automation scripts, they can do it.

191
00:11:48,125 --> 00:11:52,925
So not just that, it also enhances the
team collaboration, as we see, it's

192
00:11:52,925 --> 00:11:57,215
a crawl, cross-functional alignment,
the common language across all teams.

193
00:11:57,485 --> 00:12:01,205
It boosts productivity, resource sharing
as we discussed earlier, and then

194
00:12:01,205 --> 00:12:02,885
knowledge transfer is just a breeze.

195
00:12:03,385 --> 00:12:07,615
So enterprise integration benefits,
as we discussed, it's a unified

196
00:12:07,615 --> 00:12:13,075
platform for any tool, any application
including API database, whatnot.

197
00:12:13,645 --> 00:12:16,735
And then it's a, it
supports multiple stack.

198
00:12:16,795 --> 00:12:21,030
And then instead of having a lead
and then architect for every team,

199
00:12:21,155 --> 00:12:26,085
we will have a centralized architect
who overall maintains the robustness.

200
00:12:26,085 --> 00:12:28,635
And in fact, I have my own framework.

201
00:12:28,635 --> 00:12:29,805
I can hand it over to you.

202
00:12:30,600 --> 00:12:31,980
If you need, okay.

203
00:12:32,160 --> 00:12:34,080
And real world success scenarios.

204
00:12:34,080 --> 00:12:38,700
We implemented in a finance service form,
we reduced 90% of script maintenance.

205
00:12:38,850 --> 00:12:42,570
Yes, as there is no script at all,
so there is nothing to maintain.

206
00:12:43,290 --> 00:12:44,850
And then healthcare provider.

207
00:12:45,270 --> 00:12:49,170
We automated fi x more test
cases and saved millions to them.

208
00:12:49,230 --> 00:12:54,030
And then retail enterprise increased
coverage from 40 to 85% and the

209
00:12:54,030 --> 00:12:59,010
defects are down to 70% because
we started using automation in

210
00:12:59,010 --> 00:13:00,330
the unit testing phase itself.

211
00:13:01,060 --> 00:13:04,960
So this is the most interesting
part of which I want to stress

212
00:13:04,960 --> 00:13:06,100
out is the future already.

213
00:13:06,490 --> 00:13:07,150
Yes.

214
00:13:07,330 --> 00:13:11,710
As we discussed earlier, programming
AI can replace the programming,

215
00:13:11,710 --> 00:13:15,340
but not testing because testing
is still a creative job, right?

216
00:13:15,820 --> 00:13:21,160
But by standardizing the testing
process, we, and automate many of

217
00:13:21,160 --> 00:13:22,950
the the testing process activities.

218
00:13:23,450 --> 00:13:29,050
For example, creating tests automatically
based on usage patterns and migrating.

219
00:13:29,815 --> 00:13:33,955
The script from one tool to the, its
later version, or migrating the scripts

220
00:13:33,955 --> 00:13:37,425
from one tool to one technology stack
to a different technology stack.

221
00:13:37,785 --> 00:13:41,595
All these areas we can use AI
and then predictive analysis,

222
00:13:41,595 --> 00:13:44,865
like anticipating potential
failure points before they occur.

223
00:13:44,925 --> 00:13:49,275
So we can use ai to read,
analyze our reports.

224
00:13:49,545 --> 00:13:53,055
And then come up with a predictive
analysis and then IOT device

225
00:13:53,055 --> 00:13:56,565
integration in general iot
device is a huge, tedious task.

226
00:13:56,565 --> 00:14:01,075
Since we are significantly reducing the
amount of time invested in developing

227
00:14:01,075 --> 00:14:05,660
the test, we can use that time in
invest in developing the instructure,

228
00:14:06,160 --> 00:14:07,300
developing the infrastructure.

229
00:14:07,550 --> 00:14:12,770
That's how we can focus more time
on integrations and achieve iot

230
00:14:12,770 --> 00:14:15,170
device testing with multiple device.

231
00:14:16,060 --> 00:14:19,180
One of our project we
implemented mobile testing with

232
00:14:19,210 --> 00:14:21,370
50 different mobile questions.

233
00:14:21,870 --> 00:14:23,790
And then security integration testing.

234
00:14:23,790 --> 00:14:26,400
So this is not exactly
the security testing.

235
00:14:26,400 --> 00:14:30,190
This is all about the,
accessibility and workflow testing.

236
00:14:30,250 --> 00:14:34,040
So where we have a thousands of
resources lacks of thousands of

237
00:14:34,040 --> 00:14:36,400
profiles and lacks of scenarios, right?

238
00:14:36,650 --> 00:14:37,670
Yeah, take action.

239
00:14:37,670 --> 00:14:38,780
Implement UAF.

240
00:14:39,255 --> 00:14:43,485
If post this session, if anybody have
questions, you can reach out to me.

241
00:14:43,485 --> 00:14:47,585
I'm always happy to help and
happy to see you success.

242
00:14:47,945 --> 00:14:52,385
So basically, I can help you in assess
your current stage, define, implement

243
00:14:52,385 --> 00:14:54,545
strategy, train team, measure results.

244
00:14:54,855 --> 00:14:58,935
I think hope you got the idea,
but in still in any case, if you

245
00:14:58,935 --> 00:15:00,505
need any help reach out to me.

246
00:15:00,505 --> 00:15:01,195
I'm happy to help.

247
00:15:01,695 --> 00:15:02,775
That's all folks.

248
00:15:02,835 --> 00:15:06,885
Thank you very much for listening to
me patiently and I hope you're able

249
00:15:06,885 --> 00:15:11,775
to, get some information and you'll
be able to appreciate my efforts.

250
00:15:12,175 --> 00:15:13,045
Thank you once again.

251
00:15:13,105 --> 00:15:13,465
Bye.

