1
00:00:00,010 --> 00:00:05,390
Hello and welcome to one more session
at Confucius to cloud native 2025.

2
00:00:05,600 --> 00:00:08,970
I'm excited to welcome you again
for the second year in a row.

3
00:00:08,970 --> 00:00:13,120
And today I'm having a very special
session for all of you fellow cloud

4
00:00:13,120 --> 00:00:16,900
enthusiasts for the cloud integrators,
cloud developers, cloud engineers,

5
00:00:17,190 --> 00:00:21,220
and just for anyone who wants to
power their company with the power of

6
00:00:21,240 --> 00:00:24,419
communication, which can be provided
with the Amazon simple email service.

7
00:00:24,740 --> 00:00:28,550
It's a Netrunner's guide to AWSS
hacking communication barriers.

8
00:00:29,005 --> 00:00:33,475
And I'm excited to have you here,
but first of all, servus from Vienna!

9
00:00:33,845 --> 00:00:36,155
And, I would like to
quickly introduce myself.

10
00:00:36,225 --> 00:00:37,524
I'm, Dmitry Hladenko.

11
00:00:37,595 --> 00:00:43,224
I am a cloud engineer of AppIT and, how
my colleagues like to say, Mr. Amazon.

12
00:00:43,264 --> 00:00:47,545
I'm AWS community builder and
I'm user group leader in Vienna.

13
00:00:47,645 --> 00:00:50,835
I'm also speaker of community
days, local user groups.

14
00:00:51,240 --> 00:00:54,580
So AWS community is my favorite
part and this is why I'm doing

15
00:00:55,210 --> 00:00:58,870
this speech again for you I have
a master's in telecommunications.

16
00:00:58,870 --> 00:01:03,020
I have a bachelor in the business
management and I have tried lots of

17
00:01:03,020 --> 00:01:06,879
different things in IT and I'm so
happy that I have an opportunity to

18
00:01:06,880 --> 00:01:11,429
land here in cloud and Do all these
exciting things to power business logics

19
00:01:11,460 --> 00:01:15,780
to achieve success together to share
this knowledge and to build really

20
00:01:15,789 --> 00:01:20,690
massive Things with the social impact
and yeah, I started with the games.

21
00:01:20,730 --> 00:01:24,120
I tried the networks, back end
development, lots of interesting things,

22
00:01:24,410 --> 00:01:30,219
but with AWS, I'm since 2020 and, in
AppIT, I'm running and operating our

23
00:01:30,230 --> 00:01:34,330
AWS environment, I'm assisting with
the software development, using cloud

24
00:01:34,330 --> 00:01:37,900
technologies, I'm planning infrastructure,
I'm planning architectures, I'm performing

25
00:01:37,910 --> 00:01:42,205
the maintenance, and I am advocating the
cloud in the company, so, this is why

26
00:01:42,205 --> 00:01:46,075
it's so important for me because it's
really a thing that I love to do, and for

27
00:01:46,085 --> 00:01:47,875
now it's a part of my professional life.

28
00:01:47,875 --> 00:01:51,805
Currently, I am holding six Amazon
certificates, also the Terraform one

29
00:01:51,995 --> 00:01:56,304
and the other ones, and, hopefully
for the next Conf 42 I will be

30
00:01:56,324 --> 00:01:57,544
sitting in the golden jacket.

31
00:01:58,014 --> 00:02:01,374
And, on my private life, yes, I
really like theaters, but I'm a big

32
00:02:01,414 --> 00:02:03,464
motorsport fan and photography hobbyist.

33
00:02:03,959 --> 00:02:07,269
But also a big IT geek and
IT engineer in the heart.

34
00:02:07,619 --> 00:02:14,249
So quickly about UpIT We are one of the
most biggest and well known Austrian media

35
00:02:14,389 --> 00:02:19,049
companies because we are having a backbone
We are running all the media production

36
00:02:19,049 --> 00:02:23,349
for the biggest Austrian media not only
Austrian but also for the partners in

37
00:02:23,349 --> 00:02:27,949
Dach and Switzerland and also we are
providing IT services software development

38
00:02:28,289 --> 00:02:31,934
and Basically, we are doing everything
Everything to power our journalists and

39
00:02:31,934 --> 00:02:36,614
communication colleagues to keep going,
to deliver a great business value.

40
00:02:36,674 --> 00:02:39,264
And, we are doing lots of
different interesting things.

41
00:02:39,284 --> 00:02:42,884
We have a critical systems, we have
different engineering approaches.

42
00:02:42,884 --> 00:02:47,684
So, and this is a very non standard topic
and I'm very thankful for Apatek for

43
00:02:47,684 --> 00:02:51,264
all the support and opportunity also to
have a good reason to present it here.

44
00:02:52,094 --> 00:02:54,594
And, yeah, so let's, go
straight to the point.

45
00:02:54,874 --> 00:02:59,294
I would like to ask you, so how do
you think, Is the success achievable

46
00:02:59,374 --> 00:03:01,264
if we are not communicating?

47
00:03:01,354 --> 00:03:02,224
Definitely not.

48
00:03:02,594 --> 00:03:06,354
So in this presentation, I would
like to build around the philosophy

49
00:03:06,464 --> 00:03:10,104
about the idea that communication
that doesn't just send, it delivers.

50
00:03:10,124 --> 00:03:14,524
It delivers your meaning, your opinion,
your knowledge, your brand, your

51
00:03:14,534 --> 00:03:16,064
solution, your business offering.

52
00:03:16,084 --> 00:03:20,274
You can deliver the words to
someone you love, but how to do

53
00:03:20,274 --> 00:03:24,144
this from the cloud perspective and
what you must take into account if

54
00:03:24,144 --> 00:03:25,634
you are working with Amazon SaaS.

55
00:03:25,944 --> 00:03:29,844
I would like to touch the most
important things when you are starting

56
00:03:29,844 --> 00:03:33,964
to working with Amazon SaaS, which,
because this is a simple email service.

57
00:03:34,189 --> 00:03:38,419
But some of the things they can
be overlooked or just can be found

58
00:03:38,419 --> 00:03:40,559
out with the hours of working.

59
00:03:40,879 --> 00:03:44,949
And as I have mentioned on the previous
slide, currently I'm sending over 500,

60
00:03:45,029 --> 00:03:48,899
000 emails daily for the different
systems, for the different customers,

61
00:03:48,899 --> 00:03:53,399
for the different prosposals, marketing,
transaction, whoever like kind of emails.

62
00:03:53,744 --> 00:03:56,884
And I would like to sharp your
attention on the security triangle,

63
00:03:56,894 --> 00:03:58,604
which is important for configuration.

64
00:03:58,604 --> 00:04:02,304
We will have a look on the metrics
which are, possible to make the

65
00:04:02,494 --> 00:04:04,664
maximum from the AWS SES usage.

66
00:04:04,704 --> 00:04:08,644
And the most important, how you, as a
developer, as a cloud architect, can

67
00:04:08,644 --> 00:04:13,004
approach, the most efficient sending
that you can get out of Amazon SES.

68
00:04:13,504 --> 00:04:17,714
So let's just quickly have a look all
together on the email sending actually

69
00:04:17,984 --> 00:04:22,194
well It's email itself seems to be easy,
but it's not first of all Let's look

70
00:04:22,194 --> 00:04:26,054
for from the business perspective if you
have an efficient communication your step

71
00:04:26,054 --> 00:04:30,589
ahead of your competitors You are able
to Push your product more efficiently.

72
00:04:30,589 --> 00:04:32,239
You are able to stay in communication.

73
00:04:32,249 --> 00:04:33,379
You know what is happening.

74
00:04:33,629 --> 00:04:37,429
And actually that we are also doing
in upper, we are monitoring your

75
00:04:37,429 --> 00:04:39,599
company, whatever, what is related.

76
00:04:39,599 --> 00:04:41,289
We can push your things.

77
00:04:41,289 --> 00:04:44,519
And for us, so the
opportunity to deliver things.

78
00:04:44,539 --> 00:04:51,059
It's a core value of all of our business
structure from the beginning to the top.

79
00:04:51,389 --> 00:04:54,779
And, from the first picture, we
would like, like, it's a normal

80
00:04:54,779 --> 00:04:56,199
situation in the dark countries.

81
00:04:56,239 --> 00:04:59,839
Every time I receive a mail in Germany,
especially for expats like me, it's a

82
00:04:59,839 --> 00:05:01,399
huge stress to have this paper later.

83
00:05:01,589 --> 00:05:02,399
Is it efficient?

84
00:05:02,459 --> 00:05:03,199
Is it not?

85
00:05:03,509 --> 00:05:07,859
So we know we, I think not all
of us like the bureaucracy and

86
00:05:08,159 --> 00:05:09,929
here, since we are building money.

87
00:05:10,039 --> 00:05:11,849
It's important to have
an efficient business.

88
00:05:12,049 --> 00:05:15,689
And thankfully, Amazon says it's
the best solution that can empower

89
00:05:15,689 --> 00:05:20,289
you to do this and, have your,
your, your speech delivered.

90
00:05:20,819 --> 00:05:22,199
What, what is another important?

91
00:05:22,209 --> 00:05:25,629
Sadly, not all the people
in our world are fair.

92
00:05:25,809 --> 00:05:27,829
That's why we have a very famous spam can.

93
00:05:28,149 --> 00:05:32,069
And here I will pass you through the
essential things that you have to

94
00:05:32,129 --> 00:05:34,389
perform to have your message delivered.

95
00:05:34,449 --> 00:05:36,439
Otherwise, you will end
up in the spam folder.

96
00:05:36,824 --> 00:05:39,564
Personally, I don't want to
have you in this situation.

97
00:05:39,834 --> 00:05:44,164
And what is also important here, we
will, I will provide you example, how

98
00:05:44,184 --> 00:05:48,024
you can convert the statistics to the,
information, which is representative

99
00:05:48,214 --> 00:05:51,164
for your manager, from your product
owner, and for the people who are

100
00:05:51,164 --> 00:05:53,404
not even touching the cloud topics.

101
00:05:53,624 --> 00:05:56,834
And the most important here,
I like the word developers.

102
00:05:56,834 --> 00:05:58,494
They are all my favorite people.

103
00:05:58,984 --> 00:05:59,914
And here we will cover.

104
00:06:00,734 --> 00:06:04,124
How you, like a cloud architect,
you can make their life easier.

105
00:06:04,624 --> 00:06:08,624
So, let's quickly proceed to
the general overview of the SES.

106
00:06:08,624 --> 00:06:12,074
So, we are using it in the core
applications that we run in AppIT.

107
00:06:12,074 --> 00:06:15,374
We use it for AppOTS, our brand
new picture service, AppAPix.

108
00:06:15,814 --> 00:06:17,574
We use it in our analytics platform.

109
00:06:17,584 --> 00:06:20,754
We use it for the colleagues in
Germany, for the Press& Monitor

110
00:06:20,754 --> 00:06:22,094
and lots of other things.

111
00:06:22,284 --> 00:06:25,694
That's why we are having already,
like I would say, even four or

112
00:06:25,694 --> 00:06:27,524
five years of SES in production.

113
00:06:28,379 --> 00:06:33,399
So, and what I admire the SES a lot,
that it's a very reliable thing,

114
00:06:33,499 --> 00:06:35,589
if you know how to approach it.

115
00:06:35,679 --> 00:06:39,609
And, when it comes to the integration,
SES is very flexible, because you can

116
00:06:39,669 --> 00:06:44,359
approach it like a normal email sending
back end that you are just using SMTP

117
00:06:44,579 --> 00:06:49,049
either, what actually we did in upper,
for example, our media contact loss is

118
00:06:49,049 --> 00:06:51,649
fully built around on the single service.

119
00:06:51,649 --> 00:06:56,149
So the core of the whole business platform
is Amazon says, and everything, the rest

120
00:06:56,149 --> 00:07:01,009
is just the lyrics because to, to form
the final product and, What is important

121
00:07:01,059 --> 00:07:05,029
from the SAS, you are not just performing
the blind sending of the things you have.

122
00:07:05,399 --> 00:07:09,749
Events, you can form all the metrics out
of it, and you just need to come to it,

123
00:07:09,799 --> 00:07:13,949
take these metrics, and then you have a
full opportunity, whatever your business

124
00:07:13,949 --> 00:07:17,039
desires to, interpret this data, and yeah.

125
00:07:17,219 --> 00:07:21,469
So, and, regarding the robust integration,
what SAS is actually, it's a very good

126
00:07:21,469 --> 00:07:23,239
example if you are new to the cloud.

127
00:07:23,549 --> 00:07:27,309
And you would like to perform
event based systems, or you would

128
00:07:27,309 --> 00:07:31,379
like to try the message blocking,
or message streaming, message

129
00:07:31,379 --> 00:07:33,349
processing, or any kind of serverless.

130
00:07:33,389 --> 00:07:36,659
And SAS actually can be a good
start point for your pet project.

131
00:07:37,179 --> 00:07:40,909
And, yeah, what I really like that,
you can work out different examples,

132
00:07:40,949 --> 00:07:43,919
and it's a really well known case,
so you don't have to go to the

133
00:07:43,919 --> 00:07:45,809
databases, see what is happening.

134
00:07:46,239 --> 00:07:50,109
Or you just working with a measure
of things, which is on the probably

135
00:07:50,129 --> 00:07:51,659
basic level of understanding.

136
00:07:52,104 --> 00:07:56,774
And it's very good to, and but the
most of the changes that are coming

137
00:07:56,854 --> 00:08:00,544
with the Amazon SaaS is simple
ML service is just too simple.

138
00:08:00,894 --> 00:08:05,664
So here, you are having the full
responsibility as a cloud architect,

139
00:08:05,984 --> 00:08:10,559
as a cloud engineer to take your
responsibility and Take you use

140
00:08:10,579 --> 00:08:14,569
what is provided by the service as
I already mentioned in my previous

141
00:08:14,599 --> 00:08:16,959
presentations if you Familiar or not.

142
00:08:17,209 --> 00:08:22,999
I'm always considering AWS as a swiss
army knife and It gives you too many

143
00:08:23,009 --> 00:08:26,359
things like a lego blocks that you can
combine to achieve your business value

144
00:08:26,709 --> 00:08:29,009
And sas is providing the bare minimum.

145
00:08:29,039 --> 00:08:32,869
It sends you It does the
sending And it gives you an

146
00:08:32,869 --> 00:08:34,199
opportunity to interact with it.

147
00:08:34,289 --> 00:08:37,949
And later I will show you a
few examples for interaction.

148
00:08:38,529 --> 00:08:42,269
So, and, yeah, as I mentioned,
it's very, basically to start

149
00:08:42,269 --> 00:08:44,029
sending, it does not require much.

150
00:08:44,029 --> 00:08:50,609
You can be ready in the probably half
an hour, hour, and, you can, Just start

151
00:08:50,619 --> 00:08:54,549
sending but you need to get understanding
of the metrics You have to make sure

152
00:08:54,549 --> 00:08:58,849
you're you're compliant to perform the
sending and you are not having much

153
00:08:58,859 --> 00:09:02,519
out of the box recently Amazon They
provided virtual deliverability manager.

154
00:09:02,559 --> 00:09:06,779
They also introduced the tool to verify
configuration They also made says able

155
00:09:06,779 --> 00:09:11,339
to also receive messages, but here
this presentation is mostly focused

156
00:09:11,369 --> 00:09:16,529
from sending the information from you
So, and, yeah, as I mentioned before,

157
00:09:16,539 --> 00:09:20,489
SAS integrates with different systems,
with, we even integrated, solutions

158
00:09:20,539 --> 00:09:24,729
which are running on premises or third
party applications or custom solutions.

159
00:09:24,729 --> 00:09:29,309
So SAS is able to act on any
layer of your architecture.

160
00:09:29,639 --> 00:09:33,799
For us, rate limiting, which is
normal for APIs that Amazon provides,

161
00:09:33,799 --> 00:09:36,889
is not a stress anymore, and I
will share this, this as well.

162
00:09:37,649 --> 00:09:42,079
Very long search for the last time
frame and there are a few approaches

163
00:09:42,079 --> 00:09:46,169
that I'm happy to share with you And
we can see what are the status of

164
00:09:46,169 --> 00:09:49,749
our sendings we control the bounces
and for us the most important to have

165
00:09:49,749 --> 00:09:53,859
them as message delivered and says
provides you an opportunity to analyze

166
00:09:53,869 --> 00:09:58,229
the customer satisfaction and Since
we are able to monitor the activities.

167
00:09:58,229 --> 00:10:00,709
We are responding very
fast to delivery issues.

168
00:10:00,709 --> 00:10:04,479
We can manage the suppression
Applications are able even to control

169
00:10:04,479 --> 00:10:08,329
the status of the sending So what
is Provided by the simple service.

170
00:10:08,369 --> 00:10:09,539
It's not simple.

171
00:10:09,539 --> 00:10:13,409
It's great and it gives you
lots of opportunities so,

172
00:10:13,689 --> 00:10:15,079
let's start with the sense.

173
00:10:15,079 --> 00:10:20,059
So what what I would like to take
attention So you must get an understanding

174
00:10:20,069 --> 00:10:23,769
what you will be sending Yeah, and if
you are working with a business or you're

175
00:10:23,769 --> 00:10:27,849
integrating to the your application
it's important to consider either you

176
00:10:27,869 --> 00:10:31,589
have access to the email verification,
either you would verify the domain.

177
00:10:31,849 --> 00:10:34,819
My personal recommendation is
that you're verifying the domain.

178
00:10:34,849 --> 00:10:39,399
First of all, you have more opportunities
to ensure that you have a bit better

179
00:10:39,399 --> 00:10:43,539
deliverability, it's more professional,
and you can use different, basically all

180
00:10:43,539 --> 00:10:48,229
the subdomains, all the names, whatever
you like, and you're flexible so you

181
00:10:48,229 --> 00:10:49,699
don't have to come back to the console.

182
00:10:49,949 --> 00:10:51,659
So you have to think.

183
00:10:52,389 --> 00:10:53,739
that how much do you send?

184
00:10:53,789 --> 00:10:54,579
Where do you send?

185
00:10:54,829 --> 00:10:55,919
How are you sending?

186
00:10:55,919 --> 00:11:01,159
Because, it's very important to work with
the basic metrics that Amazon provides.

187
00:11:01,199 --> 00:11:02,739
Amazon gives you the sending limit.

188
00:11:02,789 --> 00:11:08,109
Amazon is providing you the statistics
for, your complaint rates, bounce rates,

189
00:11:08,149 --> 00:11:11,299
and it's very important to comply with it.

190
00:11:11,679 --> 00:11:14,919
And, Regarding the sandbox, if
you are starting with the SASS,

191
00:11:14,919 --> 00:11:16,269
you are having the sandbox.

192
00:11:16,499 --> 00:11:20,449
Our practice is that we are keeping
the test environments in the sandbox.

193
00:11:20,499 --> 00:11:22,399
Production, of course,
goes to the production.

194
00:11:22,729 --> 00:11:26,449
But, it's very important for
Amazon, when you're coming to the

195
00:11:26,459 --> 00:11:30,169
supper, to save your time, to save
the time of the fellow colleagues.

196
00:11:30,494 --> 00:11:33,304
Please come with a text
about your use case.

197
00:11:33,304 --> 00:11:34,844
Please express what are you going to do?

198
00:11:34,844 --> 00:11:37,174
What is the, why do you need the SAS?

199
00:11:37,174 --> 00:11:39,144
Please provide the example of the mail.

200
00:11:39,184 --> 00:11:41,264
Please provide some
information on your business.

201
00:11:41,524 --> 00:11:44,324
If you will provide all these
details, it's important.

202
00:11:44,634 --> 00:11:45,784
And another important.

203
00:11:46,284 --> 00:11:49,754
I think is that your email body is
containing the unsubscribed link.

204
00:11:50,094 --> 00:11:55,664
So you are following the fair usage of the
SES and then you are able to Get pretty

205
00:11:55,774 --> 00:12:00,704
stable and get a reliable sending out of
it So if you are communicating out of the

206
00:12:00,704 --> 00:12:05,794
sandbox, you must fully express What is
your case and you don't try to fool them

207
00:12:05,794 --> 00:12:08,484
because it hurts the account reputation.

208
00:12:08,494 --> 00:12:12,559
It hurts everything Please be
transparent Express the business value.

209
00:12:12,769 --> 00:12:16,969
How are you so all the information as
much as you can is very important And

210
00:12:16,979 --> 00:12:20,939
then you can get out of the sandbox
And then if you have a good statistics,

211
00:12:20,939 --> 00:12:24,709
you can have a higher sending rate
You have you can have higher sending

212
00:12:24,719 --> 00:12:29,649
limits and to be honest even for the
higher sending limits It requires some

213
00:12:29,649 --> 00:12:32,399
strengths with the support communication.

214
00:12:32,409 --> 00:12:37,069
For example, even One big customer of
us, I had to convince for a few times

215
00:12:37,069 --> 00:12:38,539
the support that they need the bump.

216
00:12:38,869 --> 00:12:41,339
So yeah, please take it seriously.

217
00:12:42,079 --> 00:12:44,329
And, yeah, actually why
I'm talking about it.

218
00:12:44,549 --> 00:12:48,499
This is a real life screenshot of
my Outlook spam folder that I took

219
00:12:48,499 --> 00:12:51,919
yesterday when I was preparing
the and finalizing the slides.

220
00:12:52,269 --> 00:12:56,459
So we can see that we have a
narrative which is a cool startup.

221
00:12:56,459 --> 00:12:58,799
They have an amazing solution
for the photo selection.

222
00:12:59,009 --> 00:13:01,289
Bono is a store where I buy some things.

223
00:13:01,574 --> 00:13:02,134
ErsteBank.

224
00:13:02,174 --> 00:13:03,994
Thank you very much for
keeping my money still.

225
00:13:04,434 --> 00:13:08,977
Yeah, and we have, Luminar Neo, the
fellow colleagues actually who have

226
00:13:08,977 --> 00:13:13,274
amazing also photo solution because
I like photography and it's very sad.

227
00:13:13,484 --> 00:13:17,824
All this information is staying in the
spam folder and if I would not check the

228
00:13:17,824 --> 00:13:19,754
spam I would forget about the narrative.

229
00:13:19,804 --> 00:13:23,284
I would forget about the Luminar Neo
because those people they are coming to

230
00:13:23,284 --> 00:13:24,974
you telling Hey, we have these features.

231
00:13:24,974 --> 00:13:26,394
We want to know the feedback.

232
00:13:26,434 --> 00:13:31,374
We want to know that our product is
developing But you cannot hear it, why?

233
00:13:32,254 --> 00:13:37,174
And, it's a crucial point about SASS
application, but I will tell you now

234
00:13:37,204 --> 00:13:42,464
that when you're coming, for the SASS,
and, you first of all must be, get

235
00:13:42,494 --> 00:13:45,824
ready everything, that what you're
sending, how you're sending, from what,

236
00:13:46,124 --> 00:13:50,544
where, and, My, I really would like
you to avoid the situations like here.

237
00:13:50,544 --> 00:13:52,414
This is why we have, we'll
have the next slides.

238
00:13:52,664 --> 00:13:58,424
So what is amazing about this is that
it's pretty flexible and you can generate

239
00:13:58,424 --> 00:14:03,064
the normal SMTP credentials that you can
use in Thunderbird and actually you can

240
00:14:03,074 --> 00:14:08,564
use Thunderbird for the testing of SMTP
credentials and I, before you put it to

241
00:14:08,564 --> 00:14:12,674
the actual application and or Things.

242
00:14:13,204 --> 00:14:17,214
There is a big manual on the Amazon
documentation that telling you actually

243
00:14:17,234 --> 00:14:20,984
how to create this SMTP credentials
You must put through to the console

244
00:14:21,244 --> 00:14:25,414
and we don't like ClickOps Actually,
my user group colleague Linda Mohammed,

245
00:14:25,534 --> 00:14:29,484
her main speech is that from the
ClickOps to the DevOps and I don't

246
00:14:29,484 --> 00:14:30,894
know all the fellow colleagues there.

247
00:14:30,954 --> 00:14:35,514
There are from based there, Automative,
CICD, ALS, SDK, whatever you like and

248
00:14:36,179 --> 00:14:37,649
I really would like to share one thing.

249
00:14:37,669 --> 00:14:41,559
If you scan this, QR code, you
will have, yeah, you will have a

250
00:14:41,559 --> 00:14:44,839
CloudFormation template that you can
easily convert to Terraform if you like.

251
00:14:44,899 --> 00:14:45,789
I know you can do it.

252
00:14:46,249 --> 00:14:49,969
And probably there is another talk
about the Terraform that provides you

253
00:14:49,989 --> 00:14:53,869
the CloudFormation template for the
infrastructure for SAS SMTP credentials.

254
00:14:53,879 --> 00:14:55,819
So you don't have to pass
it through the console.

255
00:14:56,009 --> 00:14:59,404
You can even It's, for example,
integrated with, secrets manager.

256
00:14:59,654 --> 00:15:03,594
You can perform the rotation and you can
allow your applications that are, you're

257
00:15:03,594 --> 00:15:06,184
running on AWS, to fetch this credential.

258
00:15:06,184 --> 00:15:10,604
So it's pretty secure, fully automated,
and you're like mitigating the part of.

259
00:15:11,104 --> 00:15:13,594
Yeah, that you're doing
a mistake in the console.

260
00:15:13,884 --> 00:15:19,174
And, actually what you must do, SMTP is
a very minor option, but what you have to

261
00:15:19,184 --> 00:15:24,604
do is to use AWS API because, SAS provides
you opportunity to read the metrics.

262
00:15:24,634 --> 00:15:27,064
If you're working with the
message IDs, you can get

263
00:15:27,084 --> 00:15:28,564
information about your sending.

264
00:15:28,884 --> 00:15:32,834
If you are, you can use all the
third party services provided

265
00:15:32,844 --> 00:15:34,324
by this inside of the SAS.

266
00:15:34,674 --> 00:15:40,034
And, so, yeah, and you can basically
perform the complete integration of

267
00:15:40,094 --> 00:15:44,654
Amazon Sass, like a complete back
end layer inside of your application.

268
00:15:44,894 --> 00:15:49,644
And also what is good to consider to
use the IAM user separation with the

269
00:15:49,644 --> 00:15:53,784
least privileges, as it has to be done,
but you are opening the full potential.

270
00:15:53,884 --> 00:15:59,264
If you are using Sass with the SMTP, you
are limiting yourself, but SMTP usage

271
00:15:59,294 --> 00:16:03,249
is So, an opportunity, if you need to
show the reliability manager, and if

272
00:16:03,249 --> 00:16:07,949
you have to copy the email that you
are sending, because in our case, what

273
00:16:08,229 --> 00:16:14,289
we are doing, we are using the shadow
copy in the CCC and, basically we are

274
00:16:14,289 --> 00:16:16,199
sending it back to this another address.

275
00:16:16,199 --> 00:16:20,739
And then we store the copy of the message
on the S3 and it allows us together with

276
00:16:20,739 --> 00:16:24,639
the logs that we are storing from the
SAS, to analyze any kind of situation.

277
00:16:24,639 --> 00:16:27,219
So, in any case, you must
consider both approaches.

278
00:16:27,484 --> 00:16:30,284
and but your plan is to use the API.

279
00:16:30,764 --> 00:16:32,374
So what is important?

280
00:16:32,414 --> 00:16:36,674
Now you have your domain, you have
your application, everything in

281
00:16:36,674 --> 00:16:38,244
the SAS starts with the validation.

282
00:16:38,244 --> 00:16:42,504
You cannot even start taking it coming
out from the sandbox because you

283
00:16:42,504 --> 00:16:48,464
need to like maintain your sending,
try out the sending to see how it

284
00:16:48,574 --> 00:16:51,544
behaves and You have only 72 hours.

285
00:16:51,644 --> 00:16:51,974
Why?

286
00:16:52,314 --> 00:16:56,874
Because when you create the identity,
you have 72 hours for validation.

287
00:16:56,904 --> 00:16:58,814
Then the DECIM keys will expire.

288
00:16:59,054 --> 00:17:01,154
So let's go through what
Amazon is giving to you.

289
00:17:01,164 --> 00:17:05,154
When you're creating the identity,
Amazon provides you for the mail with

290
00:17:05,154 --> 00:17:11,309
the DECIM keys which are validating that
This, domain is, really belongs to you.

291
00:17:11,639 --> 00:17:15,139
And, what is also important is to
use the custom mail from that you

292
00:17:15,139 --> 00:17:19,009
are separating, descending to the
special part of your domain, which

293
00:17:19,009 --> 00:17:23,139
is fully intended to be verified
for the usage with the Amazon SaaS.

294
00:17:23,604 --> 00:17:27,474
And, I, sorry, I jumped out, actually
regarding the DECIM, you have an

295
00:17:27,504 --> 00:17:32,104
opportunity to, yeah, to use the
EASYDECIM when Amazon generates the

296
00:17:32,104 --> 00:17:36,264
keys just for you, and you have an
opportunity to bring your own, but since

297
00:17:36,284 --> 00:17:40,474
we are working with hundreds of the
customers, and I'm basically, in some

298
00:17:40,484 --> 00:17:44,819
weeks I'm doing these verifications
daily, yeah, EASYDECIM Is all the way

299
00:17:44,819 --> 00:17:47,209
to go because Amazon manages the keys.

300
00:17:47,229 --> 00:17:48,319
You don't have to rotate it.

301
00:17:48,549 --> 00:17:53,979
We have a 248 bit key Which is three
parts of the key and they are rotated.

302
00:17:54,229 --> 00:17:56,709
So Just use the easy key.

303
00:17:57,099 --> 00:18:02,964
Coming back to the custom mail from so,
it's a very crucial point And, you must

304
00:18:02,964 --> 00:18:07,734
use it because, all of enterprises, they
have either Gmail, they use Microsoft

305
00:18:07,964 --> 00:18:13,934
365, and it's one of the important metrics
for verification, for the alignment

306
00:18:13,984 --> 00:18:18,034
with the SAS that you are saying, okay,
this is Amazon SAS, I know, I give

307
00:18:18,034 --> 00:18:19,944
it to my domain and it can sending.

308
00:18:20,354 --> 00:18:25,604
The emails out of it and which is what is
amazon is not Disclosing then when you're

309
00:18:25,644 --> 00:18:32,204
doing the just a normal verification by
email you You must just also perform this

310
00:18:32,214 --> 00:18:36,894
thing on your domain if it for example
email belongs to you and not for the

311
00:18:36,894 --> 00:18:42,854
gmail one Poor, I don't know outlook yahoo
hotmail gmt ukernet, whatever you use.

312
00:18:43,174 --> 00:18:48,849
Yeah, and this is crucial and, yeah,
so, also what is important is to

313
00:18:48,849 --> 00:18:53,899
provide the SPF, it performs the
alignment, for, for, for this, and

314
00:18:53,919 --> 00:18:57,769
you're also giving permission to
Amazon SaaS to perform the sending.

315
00:18:58,119 --> 00:19:02,499
And one of the practices for domain
validation that we have done is that, we

316
00:19:02,499 --> 00:19:08,259
are using some, like, subdomains because
it allows you to comply with, for example,

317
00:19:08,269 --> 00:19:10,379
some of the enterprise security policies.

318
00:19:10,779 --> 00:19:14,619
And, Have the SES configuration
separate and isolated just for the SES.

319
00:19:14,979 --> 00:19:18,719
And does not have any kind of
influence on the main domain, which

320
00:19:18,719 --> 00:19:22,819
is used for the normal sending,
for example, from the employees who

321
00:19:22,819 --> 00:19:24,619
have the outlook on this domain.

322
00:19:24,889 --> 00:19:29,829
Yeah, and one of the latest parameters,
which is the most interesting, is to

323
00:19:29,839 --> 00:19:37,719
use, DMARC, and regarding the DMARC, so,
extremely important to, have it, because,

324
00:19:37,759 --> 00:19:42,349
what DMARC is doing, so, for example, I'm
Mitra, and there is another guy who looks

325
00:19:42,349 --> 00:19:46,129
very familiar to me, and he claims to be
me, because, yeah, I think the ground is

326
00:19:46,129 --> 00:19:52,609
not that bad, and, Yeah, but for reality,
DMARC says, well, this guy, he has a,

327
00:19:52,629 --> 00:19:56,169
like, kind of signature that he is Dmitry,
this is another guy, he cannot be Dmitry.

328
00:19:56,839 --> 00:20:01,479
And DMARC, for example, every
email that are coming from me, it

329
00:20:01,479 --> 00:20:05,399
validates it that it really comes
out from me, and I give permission.

330
00:20:05,569 --> 00:20:09,199
And for example, DMARC can be
approached in a few different examples.

331
00:20:09,699 --> 00:20:15,479
That either you, put, any kind of, yeah,
you can apply DMARC to some percentage

332
00:20:15,479 --> 00:20:18,989
of the emails, which is a good practice,
when you are just starting with the SAS,

333
00:20:18,999 --> 00:20:23,179
when you are debugging it, when you are,
trying out how stable is your delivery

334
00:20:23,229 --> 00:20:29,289
rate, if you are satisfied or not, and,
you can, also, then make it more strict,

335
00:20:29,549 --> 00:20:33,379
but what is important for when you're
validating SAS on the subdomain that,

336
00:20:33,759 --> 00:20:39,039
you're using the keys as you see on this
slide, that, you are able to segregate,

337
00:20:39,079 --> 00:20:40,969
the configuration from the main domain.

338
00:20:41,149 --> 00:20:44,869
You can also define different parameters,
feedback, and if someone tries to

339
00:20:44,869 --> 00:20:47,199
spoof you get notified and z mark.

340
00:20:47,379 --> 00:20:51,689
is extremely important together with the
custom mail from for successful delivery.

341
00:20:52,229 --> 00:20:56,509
And okay, it's very nice we have
done it, but how can we ensure

342
00:20:56,509 --> 00:20:58,049
that it's correct correctly?

343
00:20:58,509 --> 00:21:01,588
And I would like to express my kudos
to the owners of themailtester.

344
00:21:01,588 --> 00:21:01,907
com.

345
00:21:01,907 --> 00:21:07,004
It's a truly amazing tool, one of the
best from which we all we have tried.

346
00:21:07,434 --> 00:21:12,094
So you are having your SAS in place,
domain validated, you made it in 72

347
00:21:12,094 --> 00:21:16,664
hours, you either have access to your
DNS, because you have to put the DNS

348
00:21:16,664 --> 00:21:20,404
records, either you can do it yourself
in your domain, or you can, if you use

349
00:21:20,404 --> 00:21:23,019
Route 53, it's even easier, you can do it.

350
00:21:23,329 --> 00:21:26,749
MailTester gives you email, you perform
the sending, and then you see if you

351
00:21:26,749 --> 00:21:30,399
have the headers aligned, if your
template is fine, because you can use

352
00:21:30,419 --> 00:21:35,259
also templates with the SASS, and just
fill in the data with the JSON inside of

353
00:21:35,259 --> 00:21:40,759
your application, and just debug all your
sending and expose the potential issues

354
00:21:40,779 --> 00:21:44,579
with the validation before you start the
real life backend production sending.

355
00:21:45,029 --> 00:21:49,769
So and since I'm more oriented on
developers today I would like one

356
00:21:49,769 --> 00:21:53,269
crucial point to tell you about
if it says out of the box It's

357
00:21:53,269 --> 00:21:54,759
not compatible with the Apple.

358
00:21:55,119 --> 00:21:57,099
Apple actually, they're
doing great things.

359
00:21:57,099 --> 00:22:01,259
I really like them, but There is an
amazing feature called Apple private

360
00:22:01,339 --> 00:22:06,899
relay when you can hide your email real
email from some shady applications, shady

361
00:22:06,899 --> 00:22:12,124
services and by default if you just Send
to their relay, you will have a bounce.

362
00:22:12,444 --> 00:22:14,704
And you don't want to have a
bounce because you might still

363
00:22:14,724 --> 00:22:16,074
communicate with your customer.

364
00:22:16,334 --> 00:22:18,084
And you will have your suppression list.

365
00:22:18,084 --> 00:22:21,744
Actually, this is a list that stores
all the, bounced or unreachable

366
00:22:21,744 --> 00:22:23,764
identities that, we are taking care.

367
00:22:23,764 --> 00:22:25,634
And I will tell you later how.

368
00:22:26,024 --> 00:22:29,814
And, so it basically means that
SAS is not delivering any messages.

369
00:22:30,164 --> 00:22:34,734
What is important is to go to the, after
you have set up your domain, custom mail

370
00:22:34,734 --> 00:22:38,534
from, you are going to Apple Developer
Console, if you, for your application you

371
00:22:38,534 --> 00:22:43,084
are giving a permission for private relay,
please refer to the Apple documentation

372
00:22:43,094 --> 00:22:44,714
because it's not Apple conference.

373
00:22:45,074 --> 00:22:46,804
And, you, you, Align it.

374
00:22:46,954 --> 00:22:50,434
In some cases, if you missed it,
you can write a lambda to clean up

375
00:22:50,434 --> 00:22:55,164
the suppression list, for example,
using Bota3 and to include to search

376
00:22:55,204 --> 00:22:56,754
any emails with a private relay.

377
00:22:56,784 --> 00:22:59,564
And because you cannot do it
quickly, go through the console.

378
00:23:00,014 --> 00:23:01,314
There is no path selection.

379
00:23:01,314 --> 00:23:02,864
That's why you have to
do lambda, but it's.

380
00:23:03,294 --> 00:23:08,424
Very important to tell to, to Apple, to
in your developer console that you are

381
00:23:08,424 --> 00:23:11,114
using SASS and validate those information.

382
00:23:11,114 --> 00:23:14,314
So the main custom will inform
and also provide the SPF.

383
00:23:15,304 --> 00:23:20,154
So going forward, yeah, when you're
working with the SASS, you might see when

384
00:23:20,154 --> 00:23:24,564
you're browsing in the console that you're
having some already prebuilt metrics.

385
00:23:24,574 --> 00:23:25,354
It's not enough.

386
00:23:25,789 --> 00:23:30,069
That's why, I, it's important to
work with the events and, make them,

387
00:23:30,169 --> 00:23:33,619
set up a login, form the CloudWatch
dashboards, form the metrics.

388
00:23:33,619 --> 00:23:37,589
But out of the box, SAS
uses, this kind of, metrics.

389
00:23:37,589 --> 00:23:40,639
So, for example, like a bounce
rate, complaint rate, delivery rate.

390
00:23:40,979 --> 00:23:44,129
delivery rate, I think
it's very easy to maintain.

391
00:23:44,139 --> 00:23:48,449
It, it's, mostly, mostly tricky
to handle with the bounce rate.

392
00:23:48,769 --> 00:23:51,949
But if you are working, for example,
you are sending out from the database.

393
00:23:52,439 --> 00:23:55,329
And, yeah, so some of the
emails can be already like

394
00:23:55,339 --> 00:23:56,749
outdated or something happens.

395
00:23:56,749 --> 00:23:59,859
You can refer to the logs, kick
it out from the suppression list.

396
00:23:59,869 --> 00:24:03,799
So, the main strategy from complaint
and bounce rate that you are analyzing

397
00:24:03,829 --> 00:24:08,499
your logs, you are alarming yourself
and, you have to maintain this level.

398
00:24:08,879 --> 00:24:12,779
Please be fair, because out of
the box, Adalas SES is sending

399
00:24:12,779 --> 00:24:14,099
from the shared IP pool.

400
00:24:14,429 --> 00:24:19,209
A shared IP pool is some pools that Amazon
has in Ireland, in the United States, in

401
00:24:19,210 --> 00:24:24,529
Frankfurt, in any kind of the regions that
are sharing your sending rate capacity.

402
00:24:24,679 --> 00:24:27,879
And also you are sharing the reputation
with the other users of the SES.

403
00:24:28,619 --> 00:24:33,879
Yes, you can have the dedicated
IP, but, but going forward, to the

404
00:24:33,880 --> 00:24:37,599
dedicated IPs, you actually, it's
an option for the big enterprises.

405
00:24:37,649 --> 00:24:40,969
And I would say that for your startup,
for your private usage, for your

406
00:24:40,969 --> 00:24:46,359
application, if you're in below the
100, 000 emails daily, then you're

407
00:24:46,369 --> 00:24:47,659
simply finding the shared pool.

408
00:24:48,079 --> 00:24:53,179
You can have some nasty things because,
for example, Google performs throttling

409
00:24:53,359 --> 00:24:57,819
of SES emails time to time, and we
noticed it, then we receive a copy to

410
00:24:57,859 --> 00:25:01,449
our upper server immediately, and to
the Gmail it arrives in 15 minutes.

411
00:25:01,729 --> 00:25:04,999
Yes, it's very nasty, but you cannot
predict it, and every time you're

412
00:25:05,009 --> 00:25:07,469
working for the different SES identities.

413
00:25:07,969 --> 00:25:11,899
yeah, but if you're an enterprise,
you can have a dedicated IP that you

414
00:25:11,899 --> 00:25:15,129
manage yourself or managed IP by Amazon.

415
00:25:15,399 --> 00:25:18,609
Price difference is
only 15 and 20 monthly.

416
00:25:18,869 --> 00:25:24,829
I would opt in for managed IP,
but you still have to maintain

417
00:25:25,089 --> 00:25:26,339
like consistent sending.

418
00:25:26,339 --> 00:25:29,069
So you're established organization,
you know, what are you doing?

419
00:25:29,389 --> 00:25:32,379
You, you have a complete
control over your reputation.

420
00:25:32,474 --> 00:25:36,704
But you must use third party tools to
control your presence in the backlist.

421
00:25:36,754 --> 00:25:40,424
Amazon provides QAP since I,
you know, that IPv4 pool is

422
00:25:40,424 --> 00:25:42,194
already exhausted ages ago.

423
00:25:42,734 --> 00:25:46,574
And, yeah, so you have to check yourself
because sometimes for some stupid

424
00:25:46,574 --> 00:25:49,784
reasons, you can get inside of the
blacklist and then you are, your setting

425
00:25:49,964 --> 00:25:53,664
is taken away from you because some
enterprise scanners, I don't, I don't

426
00:25:53,754 --> 00:25:56,864
like Icarus, Symantec, or yeah, like.

427
00:25:56,865 --> 00:26:02,034
Like, whatever else is on the market, they
are, taking into account those blacklists

428
00:26:02,114 --> 00:26:04,074
and, yeah, you have to control it.

429
00:26:04,074 --> 00:26:06,454
Amazon does not provide it,
but there are enough tools.

430
00:26:06,454 --> 00:26:07,674
You can even script it yourself.

431
00:26:07,884 --> 00:26:11,064
We have our own because we
have, it's already been a while.

432
00:26:11,264 --> 00:26:15,244
So, but when you're starting with a
dedicated AP, another important thing

433
00:26:15,254 --> 00:26:17,024
is that you are pre warming the AP.

434
00:26:17,034 --> 00:26:19,674
You are not jumping, I would say, like.

435
00:26:19,779 --> 00:26:23,639
like a lion on this IP sending
million emails to the whole world.

436
00:26:23,969 --> 00:26:26,769
I don't know, like, I love you
or whatever you like to say.

437
00:26:27,189 --> 00:26:27,959
you start slowly.

438
00:26:27,959 --> 00:26:31,759
You send 2000 emails
weekly, 5, 10, 15, 20.

439
00:26:31,779 --> 00:26:37,179
You can have, for example, what we did for
one of our customers, I did, we separated

440
00:26:37,179 --> 00:26:41,499
their sending on the different SaaS
accounts in the, and their organization.

441
00:26:41,549 --> 00:26:44,329
And for example, we use SharedPool,
SharedPool for the smaller

442
00:26:44,329 --> 00:26:47,599
branches in the, another countries
and for the Austrian branches.

443
00:26:47,859 --> 00:26:51,639
started in some hybrid mode, to
send some parts with a dedicated

444
00:26:52,269 --> 00:26:53,919
IP, some parts with another one.

445
00:26:54,809 --> 00:26:58,409
And yeah, so please have a look
on the slide, but you can start

446
00:26:58,419 --> 00:27:01,599
slowly, but it's a good option if
you are established enterprise.

447
00:27:02,429 --> 00:27:07,199
And so going to my favorite part, so
which is actually a core of this, why

448
00:27:07,199 --> 00:27:08,709
I wanted to make this presentation.

449
00:27:09,149 --> 00:27:12,859
please don't forget that Amazon
is a cloud platform and it's

450
00:27:13,059 --> 00:27:14,609
intended to be for professionals.

451
00:27:14,769 --> 00:27:18,789
If you need to easily send emails, you
can use the MailChimp, but MailChimp

452
00:27:19,019 --> 00:27:20,009
is not a professional solution.

453
00:27:20,309 --> 00:27:22,689
You cannot, it's not that
flexible with the Sass.

454
00:27:23,169 --> 00:27:28,059
And, if you are working with a AWS
SDK for Java, Go, Kotlin, I don't

455
00:27:28,059 --> 00:27:29,399
know, Python, whatever you like.

456
00:27:29,400 --> 00:27:32,549
And there are lots of languages.

457
00:27:33,179 --> 00:27:33,829
It doesn't matter.

458
00:27:34,219 --> 00:27:37,454
please don't go directly
to the SendMail API.

459
00:27:37,854 --> 00:27:39,994
You could ask me to demo, why?

460
00:27:40,204 --> 00:27:43,814
Because there is a function,
just draw it and it will send

461
00:27:43,854 --> 00:27:44,934
it and everything is good.

462
00:27:45,659 --> 00:27:49,559
No, it's not good because it's
a plain call without of any

463
00:27:50,029 --> 00:27:52,029
protection, without of anything.

464
00:27:52,829 --> 00:27:56,919
So, yes, you are doing the call and
if you are complying with your rate

465
00:27:56,919 --> 00:28:00,359
limit, if you are complying with
all your service limits, which is

466
00:28:00,399 --> 00:28:05,139
provided for your account, Yeah, so
you can send it, you will have luck,

467
00:28:05,289 --> 00:28:08,959
it will work, but after some time,
when you will grow, you will notice

468
00:28:08,959 --> 00:28:11,424
that I'm having some delivery issues.

469
00:28:11,464 --> 00:28:12,294
Emails are gone.

470
00:28:12,324 --> 00:28:13,214
Emails are missing.

471
00:28:13,214 --> 00:28:13,704
But why?

472
00:28:14,064 --> 00:28:15,924
Because you're hitting the API throttling.

473
00:28:16,324 --> 00:28:20,964
And core idea so for the next few
slides is that we are approaching

474
00:28:21,004 --> 00:28:25,544
the rate limit and rate limiting is
especially important because actually

475
00:28:25,594 --> 00:28:31,234
this is the amount of power that Amazon
gives you to SaaS because without the

476
00:28:31,234 --> 00:28:32,954
rate limit you cannot send anything.

477
00:28:33,804 --> 00:28:35,644
So just don't do it like this.

478
00:28:35,674 --> 00:28:36,724
I will tell you how to do it.

479
00:28:37,224 --> 00:28:42,444
Yeah, so, and just more, some more details
about the send limit, it's a bit confusing

480
00:28:42,444 --> 00:28:46,944
because I got different responses from my
account manager in Amazon, I got different

481
00:28:46,944 --> 00:28:53,724
responses from the AWS premium support,
I, we also recorded and observed different

482
00:28:53,734 --> 00:28:59,324
behavior and also clout, whatever you
use, I don't know, your AI preferences,

483
00:28:59,824 --> 00:29:03,364
they are, so the truth is that.

484
00:29:03,659 --> 00:29:09,679
You can send one email object, for
example, and your rate limit will be

485
00:29:09,679 --> 00:29:13,049
counted from the number of recipients
on the point of time one second.

486
00:29:13,329 --> 00:29:17,039
So, if your limit is 32, for example,
you can send in one second one

487
00:29:17,039 --> 00:29:20,619
email that contains 30 recipients
and second email that has 2.

488
00:29:20,729 --> 00:29:25,479
If you go over, there is a small burst
of send limit, but no one knows, even

489
00:29:25,479 --> 00:29:29,464
AWS documentation doesn't reflect how
big is it, you will hit the API limit.

490
00:29:29,894 --> 00:29:34,264
Yes, and, you must take in account
that this is a crucial value and

491
00:29:34,264 --> 00:29:37,364
it's your capacity that you can plan
in your application for descending.

492
00:29:37,944 --> 00:29:41,764
So, and if you look on the rate limiting,
I would see that two perspectives.

493
00:29:41,764 --> 00:29:45,264
We either perform the logical separation
from it, so we like, you know, let's

494
00:29:45,265 --> 00:29:49,099
say, some butter on their bread, or we
are approaching the capacities that,

495
00:29:49,099 --> 00:29:52,099
for example, when you are establishing
the relationship with your partner, you

496
00:29:52,099 --> 00:29:54,039
are coming and you are working for this.

497
00:29:54,529 --> 00:29:57,729
And, if you talk about the capacity
slicing, this is what I mentioned

498
00:29:57,729 --> 00:29:59,029
before about our customer.

499
00:29:59,029 --> 00:30:00,559
This is actually one of the approaches.

500
00:30:00,559 --> 00:30:03,669
We have a service that works
for the different regions and

501
00:30:03,679 --> 00:30:04,719
with different identities.

502
00:30:04,879 --> 00:30:09,379
And for example, we say for Austria,
Germany, we say, we send from

503
00:30:09,559 --> 00:30:10,999
this identity in this account.

504
00:30:11,065 --> 00:30:16,774
30 emails per second, for example, I don't
know, Ukraine, we are sending 15 from

505
00:30:16,774 --> 00:30:22,264
another account from United States one,
United Kingdom 10 or Switzerland also 20.

506
00:30:22,474 --> 00:30:26,534
So this is a logical separation
of the share pool, but because

507
00:30:26,534 --> 00:30:29,964
for the higher rate, you need to
use four or five dedicated IPs and

508
00:30:29,964 --> 00:30:34,064
it costs you money because it's
already, it could be 150, 200.

509
00:30:34,254 --> 00:30:37,354
And for redundancy, you'll always
have to do with at least two.

510
00:30:37,544 --> 00:30:38,874
Sorry, I forgot to mention it.

511
00:30:39,414 --> 00:30:43,974
And, Yeah, so and approaching yours
limit is about our work of the cloud

512
00:30:43,974 --> 00:30:48,924
architects with the cloud also together
with the fellow programmers and Yeah,

513
00:30:49,094 --> 00:30:53,444
we have tried different approaches Lots
lots of safe on the internet, but here I

514
00:30:53,444 --> 00:30:58,584
would like to combine two main pathways
So this case it's the most easy it some

515
00:30:58,684 --> 00:31:03,724
of them people call it leaky bucket
that you are Defining the capacity

516
00:31:03,864 --> 00:31:05,534
with who you are throwing the emails.

517
00:31:05,564 --> 00:31:07,834
The problem is that it's
not flexible approach.

518
00:31:07,854 --> 00:31:13,489
It's So it's basically shrinks you in
this limit and you cannot get more of

519
00:31:13,489 --> 00:31:16,629
the sense that you could potentially say
it on the send on the unit of the time.

520
00:31:17,579 --> 00:31:17,889
Yeah.

521
00:31:18,149 --> 00:31:22,109
And for example, how, what we
are doing, so when we know it's

522
00:31:22,119 --> 00:31:25,579
for the applications that we're
working with one single recipient.

523
00:31:26,109 --> 00:31:31,719
So for example, we have a rate
limit of 30 and the application

524
00:31:31,719 --> 00:31:33,559
is working in OpenShift.

525
00:31:34,059 --> 00:31:38,829
VCS, whatever you like, like, with the
two pods, two workers for the application,

526
00:31:39,059 --> 00:31:43,389
we are hard coding the limit 15 by 15.

527
00:31:44,109 --> 00:31:49,259
And, we are, packing, chucking, chunking
all the recipients inside of application

528
00:31:49,579 --> 00:31:54,389
that, for example, we have to send 20
emails, and we have the only 15 per pod.

529
00:31:54,749 --> 00:31:58,589
Bot creates a chunk of 10 and
and five, and using precision

530
00:31:58,589 --> 00:32:01,889
timers like resilience, four J
four Java, or leaky bucket for

531
00:32:01,889 --> 00:32:03,749
Python, you are doing the sensing.

532
00:32:04,139 --> 00:32:07,739
And the good point is that you are
basically decorating the standard

533
00:32:07,919 --> 00:32:10,409
assess, API calls and you are sensing.

534
00:32:10,589 --> 00:32:14,009
The problem is that, for example, in
auto scaling systems, this approach

535
00:32:14,009 --> 00:32:17,794
would require some expansion taking into
account to limit its additional work.

536
00:32:18,294 --> 00:32:22,974
And there is still a chance that you can
hit the throttling because you, and if

537
00:32:22,974 --> 00:32:27,114
something goes wrong, for example, if
some connection with AWS is broken, or

538
00:32:27,144 --> 00:32:32,144
if you are missing some, so something
happened, you are still losing your email.

539
00:32:32,334 --> 00:32:37,414
It's a good approach when you have
repeatable pattern of sending, and it's

540
00:32:37,414 --> 00:32:41,524
a very good approach when you are having
just one scenario and it's pretty stable.

541
00:32:41,624 --> 00:32:42,494
So you can do it.

542
00:32:42,724 --> 00:32:45,404
It's actually already must be a case.

543
00:32:45,519 --> 00:32:49,589
of the basic, it's already the basic usage
of the SES that you are saving yourself

544
00:32:49,599 --> 00:32:51,299
from the potential API throttling.

545
00:32:51,539 --> 00:32:53,039
So this is the scenario one.

546
00:32:53,279 --> 00:32:57,889
Then I started to look around for
some approaches, yeah, as I said,

547
00:32:57,989 --> 00:33:00,779
it's honor of our community members
who are working with the serverless.

548
00:33:01,324 --> 00:33:06,524
we are moving the sending logics to the
cloud and, from, it's also good from

549
00:33:06,524 --> 00:33:10,064
the perspective that, for example, for
us, you're having the unified sending

550
00:33:10,064 --> 00:33:13,864
platform and you don't have to re
implement the same things a few times in

551
00:33:13,874 --> 00:33:15,904
the code or maintain some custom library.

552
00:33:16,184 --> 00:33:20,394
You are, you are just abstracting
the sending to the cloud level,

553
00:33:20,414 --> 00:33:22,084
not from your application level.

554
00:33:22,674 --> 00:33:26,864
And here, so we already have the
SQS QE with the dead letter QE.

555
00:33:27,344 --> 00:33:29,994
Actual sending is
performed from the lambda.

556
00:33:30,264 --> 00:33:33,174
Here it's called heartbeat,
but it's not the heartbeat.

557
00:33:33,334 --> 00:33:35,964
It's actually just performs
the sending of the code.

558
00:33:36,354 --> 00:33:39,784
Yeah, and here you can see it's also
expands for the event processing.

559
00:33:40,189 --> 00:33:42,319
Speaks, you've mentioned it a bit later.

560
00:33:42,709 --> 00:33:44,199
So Yeah.

561
00:33:44,199 --> 00:33:47,609
And, the good approach is that you
already have a chance to do resending

562
00:33:47,609 --> 00:33:53,459
if something happens and you are PT
safe because, you can, ask Lida to come

563
00:33:53,519 --> 00:33:58,979
consume the messages in the rate which
will comply with your current rate.

564
00:33:58,979 --> 00:34:01,019
And Lambdas can also scale.

565
00:34:01,199 --> 00:34:03,659
So, and before it was not a thing.

566
00:34:03,959 --> 00:34:06,939
And, Yeah, with this approach you
already have some baseline reliability.

567
00:34:07,419 --> 00:34:11,439
The drawback is that you have
to re implement the actual SAS

568
00:34:11,440 --> 00:34:14,489
logics in your lambda, rather than
going directly with the library.

569
00:34:14,489 --> 00:34:17,749
But basically you are just migrating the
code from your application to the lambda.

570
00:34:18,239 --> 00:34:18,999
And, yeah.

571
00:34:19,039 --> 00:34:20,739
So it's one of the things.

572
00:34:20,979 --> 00:34:25,924
and uh, it was very nice and,
it was already working because

573
00:34:25,924 --> 00:34:29,464
it, improves, additionally the
reliability of the s setting.

574
00:34:29,494 --> 00:34:33,589
And then I started to think, okay, like,
we are sending with the Lambda, Lambda

575
00:34:33,764 --> 00:34:39,374
could run a few, a few different, I don't,
20 few, 100 of the Lambdas, for example,

576
00:34:39,374 --> 00:34:44,234
if we have a sending rate of 100, but we
have one Lambda working in one second.

577
00:34:44,504 --> 00:34:49,394
It's still like, Not utilizing the
full capacity of our sensing limit

578
00:34:49,814 --> 00:34:54,304
and what is also important is that
Yeah, there is still a chance to go

579
00:34:54,364 --> 00:34:57,954
over the limit if something goes wrong
because if you miss some fine tuning

580
00:34:58,244 --> 00:35:00,464
or you have some Unexpected behavior.

581
00:35:00,684 --> 00:35:05,194
So I started to think first of all, I
thought about the time thankfully the

582
00:35:05,234 --> 00:35:09,579
good fellow colleague from AWS, Dennis
Traug, actually he's On the left,

583
00:35:09,579 --> 00:35:11,419
on the picture, third from the left.

584
00:35:11,419 --> 00:35:13,579
And I'm also in this picture
in the white tee-shirt.

585
00:35:13,629 --> 00:35:17,449
so, he wrote a very nice article how
you can use the step functions, for

586
00:35:17,449 --> 00:35:19,489
precise triggering of the lum functions.

587
00:35:20,009 --> 00:35:21,119
It's a first point.

588
00:35:21,149 --> 00:35:23,139
Then, mark Richman and Guy Lovely.

589
00:35:23,139 --> 00:35:26,619
They expressed a few additional
approach if approaches for the sensing.

590
00:35:27,119 --> 00:35:32,209
So, and, then I hit a work from
Mikhail Har, who also pointed out

591
00:35:32,299 --> 00:35:36,679
it, it's a very creative approach for
usage of the features of AWS service.

592
00:35:37,164 --> 00:35:44,244
What he did, he did, use the AWS, Lambda
concurrency and, basically he's feeding

593
00:35:44,604 --> 00:35:52,184
the emails to the SQS feed and, Lambdas
are launching as much, for example, for

594
00:35:52,184 --> 00:35:57,214
the sending limit 50, he can approach 50
Lambdas, but there is another problem.

595
00:35:57,274 --> 00:36:01,694
It goes back to our, to the first
solution that I told you about, that you

596
00:36:01,694 --> 00:36:04,334
are, working only with one recipient.

597
00:36:04,559 --> 00:36:06,369
And, you have to ensure this.

598
00:36:06,369 --> 00:36:10,349
We have different cases and I
started to think, Okay, looking to

599
00:36:10,349 --> 00:36:14,149
the Demis, looking to the Mark, to
the Michael and Guy, what can I do?

600
00:36:14,964 --> 00:36:16,104
And let's have a look.

601
00:36:16,924 --> 00:36:21,374
So, I took all the best from those
approaches and, we are creating the,

602
00:36:21,374 --> 00:36:25,524
the orchestrated pipeline for the
sending with, AWS stem functions

603
00:36:25,524 --> 00:36:28,304
in the core, because this is the
pipeline that we are intended to

604
00:36:28,304 --> 00:36:32,504
run in one second, and, EventBridge
precisely triggers every second.

605
00:36:32,554 --> 00:36:34,024
That's why I called it a heartbeat.

606
00:36:34,374 --> 00:36:37,284
What is important that, our
users are sending, sending,

607
00:36:37,284 --> 00:36:38,914
sending, application collects it.

608
00:36:39,294 --> 00:36:41,064
So it goes to the email queue.

609
00:36:41,349 --> 00:36:43,729
We are not taking those
emails for sending directly.

610
00:36:44,299 --> 00:36:47,659
We are taking them, we are
reading the recipients, and we are

611
00:36:47,660 --> 00:36:52,409
dynamically, with the heartbeat, we
are changing the lambda concurrency.

612
00:36:52,669 --> 00:36:57,189
So we are delegating, as I mentioned
before, for example, 20 here, 5 here,

613
00:36:57,189 --> 00:36:59,694
5 here, then we are Baseline or limit.

614
00:36:59,914 --> 00:37:03,504
So I think you got the idea that
in the one point of second we have

615
00:37:03,504 --> 00:37:08,614
dynamic situation that it's adjusting
Based on the email flow that we have

616
00:37:08,884 --> 00:37:13,564
we are we cannot exceed the rate
limit We are fooling the capacity.

617
00:37:14,034 --> 00:37:18,544
We are mitigating the latency which comes
They, actually could be very noticeable,

618
00:37:18,824 --> 00:37:20,624
especially in the first and second case.

619
00:37:21,534 --> 00:37:25,604
And, yeah, so we are keeping the
rhythm like in the Brazilian dance or

620
00:37:25,604 --> 00:37:27,584
whatever you prefer, of the sending.

621
00:37:27,694 --> 00:37:31,394
And it's a dynamic based on the
service, what you're sending and you

622
00:37:31,394 --> 00:37:32,724
don't have to perform the chunking.

623
00:37:32,964 --> 00:37:36,444
You're basically sending the
thing for the, for the sending.

624
00:37:36,719 --> 00:37:38,259
And it takes care of you.

625
00:37:38,489 --> 00:37:39,509
It can be complex.

626
00:37:39,559 --> 00:37:43,179
It may require some additional
programming, additional setup.

627
00:37:43,369 --> 00:37:47,209
But this is the idea what we are
currently started recently to use.

628
00:37:47,269 --> 00:37:51,379
And we are excited that, for
example, before we were sending

629
00:37:51,429 --> 00:37:55,259
about 900 emails to the customers,
in case of some special case.

630
00:37:55,649 --> 00:37:57,469
it's our broadcast list.

631
00:37:58,094 --> 00:38:02,144
saying that, basically, yeah, some,
yeah, there is an info for you.

632
00:38:02,344 --> 00:38:03,934
And it was taking a few minutes.

633
00:38:04,354 --> 00:38:08,534
With this approach, we can, do it in a
few seconds because, we are just filling

634
00:38:08,544 --> 00:38:13,214
the full capacity with the copies of
the emails with lots of recipients.

635
00:38:13,534 --> 00:38:17,824
And going back to the solution from
the, Michael Haar, so please Google it.

636
00:38:18,164 --> 00:38:22,604
If you know that you are sending one
email, you can go with the rate limiting

637
00:38:22,784 --> 00:38:24,314
in your code, either with this solution.

638
00:38:25,114 --> 00:38:28,134
If you're having more advanced cases,
please build something like this.

639
00:38:28,134 --> 00:38:31,494
You will really like it because,
you don't have to stress, so you

640
00:38:31,494 --> 00:38:36,134
don't have to come to your manager
and say, We lost the emails.

641
00:38:36,824 --> 00:38:38,244
Sorry, sorry, sorry.

642
00:38:38,244 --> 00:38:43,284
And yeah, so, and, this is the way
you have a second chance to send it.

643
00:38:43,324 --> 00:38:46,784
You are utilizing the capacity,
you are minimizing all the risks

644
00:38:47,104 --> 00:38:51,664
that by default you're having from
the function of the SES, yeah,

645
00:38:51,754 --> 00:38:53,874
just to call this email sending.

646
00:38:53,874 --> 00:38:57,474
So, yeah, this is most important part.

647
00:38:58,004 --> 00:38:59,734
and to let's make some conclusion.

648
00:39:00,234 --> 00:39:02,074
So chunking and rate limiting.

649
00:39:02,584 --> 00:39:07,194
One user or one recipient, stable
sending, stable pattern, no

650
00:39:07,194 --> 00:39:08,374
need to do cloud architecting.

651
00:39:08,984 --> 00:39:15,454
SQS plus DLQ is also for this scenario,
but you must be more confident

652
00:39:15,484 --> 00:39:16,784
that you don't lose the email.

653
00:39:17,184 --> 00:39:22,274
Lambda concurrency, that you want to
maximize the output and limit the latency.

654
00:39:22,434 --> 00:39:26,954
and you're creating the heartbeat step
machine, because you need the dark horse.

655
00:39:26,984 --> 00:39:30,474
And it's actually what I mentioned
in the beginning that you are working

656
00:39:30,504 --> 00:39:32,064
with it like a service integration.

657
00:39:32,104 --> 00:39:36,434
And as I have underlined in my previous
presentations, you're always considering

658
00:39:36,444 --> 00:39:40,834
your AWS architectures especially
the serverless one like a waterfall.

659
00:39:41,164 --> 00:39:46,334
So it's a series of events, it's all
flowing and this is how are you doing

660
00:39:46,364 --> 00:39:50,304
it and basically yeah here you're
flowing the emails, you're processing

661
00:39:50,304 --> 00:39:53,934
it, you're using the capacity and
you're delivering a good business value.

662
00:39:53,964 --> 00:39:54,934
So everyone is happy.

663
00:39:55,434 --> 00:39:55,959
yeah.

664
00:39:55,959 --> 00:39:59,129
So, also another very important
thing I would give you.

665
00:39:59,309 --> 00:40:00,939
So we are approaching to the end, sadly.

666
00:40:01,249 --> 00:40:02,949
I hope you still enjoy it.

667
00:40:02,999 --> 00:40:05,889
so that says, as I
mentioned, it has the events.

668
00:40:05,939 --> 00:40:07,219
Events, they are crucial.

669
00:40:07,669 --> 00:40:11,039
And, it's so, what is the most
important thing you have to know

670
00:40:11,039 --> 00:40:12,399
about your email is the message ID.

671
00:40:13,229 --> 00:40:17,079
In the message ID, it's basically
a stamp, your unique identifier for

672
00:40:17,079 --> 00:40:22,039
your email, so, and, you can use it
to, like, to, for instance, like, an

673
00:40:22,079 --> 00:40:24,699
identity, like a passport, I don't
know, I don't have it to show you.

674
00:40:25,289 --> 00:40:26,029
Yeah, but you know it.

675
00:40:26,459 --> 00:40:29,649
So, that, you're working with this
specific email, because then you

676
00:40:29,649 --> 00:40:31,399
can retrieve the related events.

677
00:40:31,459 --> 00:40:35,569
And if you're activating the
events in your, configuration set.

678
00:40:35,579 --> 00:40:39,969
In the sets, you can control the delivery,
you can control bounces, complaints, you

679
00:40:39,969 --> 00:40:45,479
can control, you can control openings,
have a tracking pixels, control the

680
00:40:45,479 --> 00:40:48,149
links, control the timing statistics.

681
00:40:48,149 --> 00:40:51,949
So it's very crucial, actually,
information for you from technical

682
00:40:52,349 --> 00:40:56,289
department and also for the Have an
understanding of the roof management.

683
00:40:56,289 --> 00:41:01,129
That's why sass is way cooler than any
kind of mail server That just throws you

684
00:41:01,179 --> 00:41:07,229
the emails and yeah, so and you must work
with Evans and first thing that you do

685
00:41:07,239 --> 00:41:13,999
You're setting up the SNS SNS Yeah topic
you're giving the permissions and says

686
00:41:14,549 --> 00:41:18,489
Then throwing this to the lambda and just
please five lines of code I've asked a

687
00:41:18,549 --> 00:41:24,324
lot to do it if you don't know how it will
save your events to them CloudWatch and

688
00:41:24,324 --> 00:41:28,864
then you have an opportunity to create
alarms, use metric filters to, use the log

689
00:41:28,864 --> 00:41:32,444
insights and you have the overview that
actually is happening with your sending.

690
00:41:32,654 --> 00:41:37,604
What are we also doing is that
applications are, knowing in the database,

691
00:41:37,604 --> 00:41:41,204
those message ID and then they are
tracking the statuses of the emails.

692
00:41:41,474 --> 00:41:45,174
It's, we use this data to actually,
to reflect the function of the

693
00:41:45,224 --> 00:41:47,424
applications, one of our applications.

694
00:41:47,674 --> 00:41:49,834
So just a single fetch.

695
00:41:50,049 --> 00:41:54,529
of the JSON event also opens you lots of
opportunity from the basic logging, from

696
00:41:54,529 --> 00:41:59,379
the observability, from the other thing,
from the have a better understanding to

697
00:41:59,379 --> 00:42:03,689
for the business logics and probably also
to create the data sets and you can also

698
00:42:03,689 --> 00:42:08,329
with the data that you're Coming out from
the SAS, you can improve your user date.

699
00:42:09,189 --> 00:42:13,419
For example, create the reports for
customer success or customer care,

700
00:42:13,679 --> 00:42:16,599
and they can, they can communicate
with your customers and together

701
00:42:16,639 --> 00:42:21,259
with the proper configuration, for
example, sensing approaches, you will

702
00:42:21,269 --> 00:42:25,589
maximize the output from actually that
you're doing the sending, that you

703
00:42:25,589 --> 00:42:30,089
are sending the information, it gets
delivered and, it's what you must to do.

704
00:42:30,839 --> 00:42:35,029
So, and, yeah, I always say
that ALS is a Swiss Army knife.

705
00:42:35,029 --> 00:42:39,649
It gives you services, it gives you tools,
it gives you lots of things that, you

706
00:42:39,649 --> 00:42:41,949
should do actually and use, and, yeah.

707
00:42:42,039 --> 00:42:45,889
So you can construct whatever you need,
you just need to couple the services.

708
00:42:46,484 --> 00:42:50,384
And you have basically, if you know
the CloudWatch, if you know SNS, if

709
00:42:50,384 --> 00:42:54,524
you know SQS Dynamic db, and if you
know Lambda and you can program,

710
00:42:54,524 --> 00:42:59,204
for example, in Python, you can do
already like eight 80% of the business

711
00:42:59,204 --> 00:43:01,754
cases that require your AWS Logics.

712
00:43:01,754 --> 00:43:03,224
And this is the case with the assess.

713
00:43:03,404 --> 00:43:05,009
So some architectural inspir.

714
00:43:05,869 --> 00:43:09,529
So, this is an example when,
we are actually sending through

715
00:43:09,529 --> 00:43:11,259
the SAS, it records the events.

716
00:43:11,609 --> 00:43:16,149
What is, is actually very good is
that, yeah, we put those events to the

717
00:43:16,209 --> 00:43:20,559
CloudWatch, then we are building the
shared dashboard, which allows us to

718
00:43:20,559 --> 00:43:22,219
control the sendings for the identities.

719
00:43:22,734 --> 00:43:23,424
sending rate.

720
00:43:23,424 --> 00:43:25,824
Have a visit, visitation
of the failed recipients.

721
00:43:25,824 --> 00:43:29,724
So even the person who are not,
like familiar with a s you can

722
00:43:29,724 --> 00:43:31,224
say, Hey, please come here.

723
00:43:31,224 --> 00:43:33,324
I have prepared for you information.

724
00:43:33,534 --> 00:43:34,764
You are working with the event.

725
00:43:34,884 --> 00:43:38,364
It converts to the readable information
that the delivers the value.

726
00:43:38,724 --> 00:43:42,099
And also, for example, there
Lambda, what, what I do here is.

727
00:43:42,399 --> 00:43:43,989
Is a even breach trigger.

728
00:43:44,349 --> 00:43:48,839
And, once a week it's, it
was a big, solution for, for

729
00:43:48,869 --> 00:43:50,759
our non-technical colleagues.

730
00:43:50,879 --> 00:43:55,829
So it comes to the logging back bucket,
collects, for example, all the bounces

731
00:43:55,889 --> 00:44:00,269
or, for example, in the events you have
also of utilization, including technical

732
00:44:00,269 --> 00:44:04,649
information of the sense information
about male body but not the body itself.

733
00:44:05,064 --> 00:44:08,204
Yeah, it's sad, that's why
we, do the copies, as I said

734
00:44:08,204 --> 00:44:09,434
in the beginning, somewhere.

735
00:44:09,914 --> 00:44:14,394
And, yeah, so you're sending it, and,
we, for example, we have a report, for

736
00:44:14,394 --> 00:44:18,464
example, with the customers who are
having, failing deliveries, and since this

737
00:44:18,464 --> 00:44:23,314
company, the, the delivery of what people
purchase as a core, it's very important.

738
00:44:23,574 --> 00:44:25,084
And it's a quick solution.

739
00:44:25,214 --> 00:44:28,324
Then the clever solution was
that we started, we worked

740
00:44:28,324 --> 00:44:29,474
together with the developers.

741
00:44:30,249 --> 00:44:33,309
Actually, what we were doing, we
were processing with a special

742
00:44:33,309 --> 00:44:37,799
separate lambda, those kind of
events that are coming from the SES.

743
00:44:38,169 --> 00:44:41,879
And, for example, I'm sending
to email, I love darjohnny.

744
00:44:41,879 --> 00:44:41,959
gmail.

745
00:44:41,959 --> 00:44:42,229
com.

746
00:44:42,229 --> 00:44:42,789
So yeah.

747
00:44:43,519 --> 00:44:48,329
And, for example, I don't know, my
email is blocked, but I have this email

748
00:44:48,329 --> 00:44:53,569
in the used in the, my user profile
of this application provided by this

749
00:44:53,569 --> 00:44:55,815
company in their product and, SES.

750
00:44:55,815 --> 00:44:59,535
to the tells to the Lambda,
hey, so, we have this situation,

751
00:44:59,555 --> 00:45:00,625
Lambda makes a report.

752
00:45:00,815 --> 00:45:02,195
The DynamoDB.

753
00:45:02,195 --> 00:45:03,425
DynamoDB is amazing for these cases.

754
00:45:03,455 --> 00:45:04,705
You don't have to run Aurora.

755
00:45:04,915 --> 00:45:07,095
You just do the table, use the TTL.

756
00:45:07,395 --> 00:45:09,505
Use, the, close selection.

757
00:45:09,505 --> 00:45:10,815
You can have a global table.

758
00:45:10,955 --> 00:45:14,145
Even if you care about the latency,
but it's not the case here.

759
00:45:14,145 --> 00:45:18,345
Through the app sync, because you can
have GraphQL, you can have the, you don't

760
00:45:18,345 --> 00:45:20,195
have to build the whole API gateway.

761
00:45:20,195 --> 00:45:22,655
Here we used app sync
because it's just easier.

762
00:45:23,035 --> 00:45:26,925
And this is the crucial things
about AWS that you combine things.

763
00:45:27,415 --> 00:45:29,695
And yeah, so we go to
the application saying.

764
00:45:30,420 --> 00:45:34,360
Yeah, email is wrong because we know
the SMTP calls to which CloudWatch

765
00:45:34,370 --> 00:45:37,740
reacts and then by the metric filter
We trigger the lambda that does the

766
00:45:37,740 --> 00:45:40,000
process and then user gets a banner.

767
00:45:40,050 --> 00:45:41,960
Hey, please send to us your information.

768
00:45:41,970 --> 00:45:42,650
That's cool.

769
00:45:42,900 --> 00:45:45,710
But Yeah, and we make the
recording in the CloudWatch.

770
00:45:46,170 --> 00:45:51,670
We visualize it in the QuickSight
and QuickSight customer team comes

771
00:45:51,680 --> 00:45:55,340
here, sees what's the situation
they can respond to the cases which

772
00:45:55,340 --> 00:45:58,680
are not processed by the by the
customers themselves and it's amazing.

773
00:45:59,080 --> 00:46:02,590
So another thing what was here that Yeah.

774
00:46:02,920 --> 00:46:08,560
And, it was, for one of our things, it's
al also an example of, the Q is, usage.

775
00:46:08,560 --> 00:46:11,770
So when you are send sending the
email, you always have a recordings

776
00:46:12,040 --> 00:46:15,880
of different stages, send delivered
or bounced Complaint opened.

777
00:46:16,270 --> 00:46:19,410
And, we wanted to use this
information about the email.

778
00:46:19,410 --> 00:46:23,670
So what we did, we, we have a
lambda, we are reprocessing it to

779
00:46:23,670 --> 00:46:27,690
the format that we need and we sent
it to the qa and then for example.

780
00:46:28,375 --> 00:46:32,745
application comes, he knows that, for
example, it has, information with such

781
00:46:32,765 --> 00:46:39,385
message ID and it says, like, yeah, that
we have to do, so this message ID status

782
00:46:39,385 --> 00:46:43,565
is updated and this is how we reflect this
information inside of application or, for

783
00:46:43,565 --> 00:46:47,895
example, here, it's also another our case
that we are performing the sending, we

784
00:46:48,015 --> 00:46:52,845
have, for, for example, yeah, like object
of the sending, email that are Thank you.

785
00:46:52,940 --> 00:46:57,650
spread to the customers because in one
of our applications, you can send, for

786
00:46:57,650 --> 00:47:01,930
example, your press release or your
media information, using our databases

787
00:47:01,930 --> 00:47:04,890
to the partners, to the companies,
to the journalists in the media

788
00:47:04,940 --> 00:47:06,210
contact plus, there are lots of them.

789
00:47:06,400 --> 00:47:07,810
What it's very simplified.

790
00:47:08,060 --> 00:47:09,820
It's just for not to overload you.

791
00:47:10,210 --> 00:47:15,270
And, the SAS is already preparing the
information, which is used by application,

792
00:47:15,280 --> 00:47:17,260
which is runs in our case on the ECS.

793
00:47:17,700 --> 00:47:18,440
And, uh.

794
00:47:19,170 --> 00:47:19,500
yeah.

795
00:47:19,590 --> 00:47:23,190
So you don't even have to implement
this logics on the application level.

796
00:47:23,190 --> 00:47:27,570
You can already prepare the data,
both for the real humans and for your

797
00:47:27,570 --> 00:47:32,310
application and base based on the
statuses that you can fetch from the ces.

798
00:47:32,690 --> 00:47:36,740
you can, track your limits, build a
business, statistics presented for your

799
00:47:36,740 --> 00:47:39,350
customers, for your owners, and so, yeah.

800
00:47:39,590 --> 00:47:44,530
And the last point here is that even
with non-technical familiar people.

801
00:47:45,070 --> 00:47:48,360
One of the amazing services is
Amazon QuickSight, and in Amazon

802
00:47:48,420 --> 00:47:52,460
QuickSight, what you can do is, it's
the best point of contact with the

803
00:47:52,460 --> 00:47:53,980
cloud for the non technical people.

804
00:47:54,020 --> 00:47:57,220
You prepare the visualizations, you
can process your data also with the

805
00:47:57,220 --> 00:48:01,850
ETL processors, with the glue, or if
you use kinases, whatever you have.

806
00:48:02,190 --> 00:48:05,170
So you just create the dashboards,
and people are coming like,

807
00:48:05,170 --> 00:48:06,390
I don't know, in Microsoft.

808
00:48:06,695 --> 00:48:10,345
Excel, they are having filters,
statistics formation, especially

809
00:48:10,345 --> 00:48:11,645
together with Amazon Q.

810
00:48:11,865 --> 00:48:14,855
They can work with the data that
you're taking out of the SAS, and

811
00:48:14,875 --> 00:48:16,475
it's very crucial for the customer.

812
00:48:17,105 --> 00:48:20,665
Training time is minimized, but
QuickSight is one of the best, actually,

813
00:48:20,705 --> 00:48:22,205
things that Amazon is offering.

814
00:48:22,515 --> 00:48:26,415
And if you want to conjunction non
technical people with the work that

815
00:48:26,465 --> 00:48:31,325
you are doing, and one of the best ways
is to just Ship it to the quick site.

816
00:48:31,575 --> 00:48:32,885
You will really like it.

817
00:48:32,955 --> 00:48:36,315
So, sadly, we are approaching to the end.

818
00:48:36,325 --> 00:48:39,625
So, yeah, if you are working with the
SAS configuration, it is a success.

819
00:48:39,665 --> 00:48:40,975
Take care about the DMARC.

820
00:48:41,275 --> 00:48:43,355
Take care about the SPF alignment.

821
00:48:43,605 --> 00:48:47,355
Use the custom mail from, please
separate the SAS configuration from the

822
00:48:47,355 --> 00:48:49,725
configurations from your main domain.

823
00:48:49,985 --> 00:48:52,705
It's actually a requirement
of the big enterprises.

824
00:48:52,955 --> 00:48:57,125
So, the current spend of
knowledges are very aggressive.

825
00:48:57,175 --> 00:49:00,165
And you have to take
everything into account.

826
00:49:00,450 --> 00:49:05,090
To not to destroy the value of your
sending reputation is important Please

827
00:49:05,110 --> 00:49:09,540
you are using the shared IP pooling
then please be fair or don't break

828
00:49:09,550 --> 00:49:13,780
the reputation of the IPs For example,
some of the servers used in the DDoS is

829
00:49:13,780 --> 00:49:18,390
they are just VPCs by some providers,
but they're already blacklisted and if

830
00:49:19,005 --> 00:49:21,445
So, please, use fairly what you get.

831
00:49:21,745 --> 00:49:25,065
Sending rate is much more important
than you think and please approach

832
00:49:25,065 --> 00:49:27,995
it in some ways that like I described
and if you will know a better

833
00:49:27,995 --> 00:49:29,195
way, please let me know we can.

834
00:49:29,465 --> 00:49:34,585
I am always open for any discussions
and, yeah, like with any service, just

835
00:49:34,875 --> 00:49:39,135
Come, architect, be creative, use the
knife, combine the services, build

836
00:49:39,195 --> 00:49:42,815
event based systems, build serverless
systems, integrate it to your legacy

837
00:49:42,815 --> 00:49:47,495
applications, build the bridges, reuse
the API gateways, app sync, you have

838
00:49:47,495 --> 00:49:51,205
lots of opportunities to get maximum
fit and this is our work to do.

839
00:49:51,515 --> 00:49:53,585
So, going to the end.

840
00:49:54,105 --> 00:49:56,575
I would like to thank
you who is already here.

841
00:49:56,795 --> 00:49:57,765
So it's a pleasure.

842
00:49:57,765 --> 00:49:58,905
I want to thank everyone.

843
00:49:58,905 --> 00:50:02,235
So AppIT, Conf42 for
this amazing opportunity.

844
00:50:02,235 --> 00:50:06,845
I really hope it would be, it's useful for
you and it will give you some inspiration

845
00:50:07,115 --> 00:50:08,625
that you can do, that you can achieve.

846
00:50:08,675 --> 00:50:10,105
Please contact me on LinkedIn.

847
00:50:10,105 --> 00:50:11,045
Please write me emails.

848
00:50:11,085 --> 00:50:12,595
Please just write to me.

849
00:50:12,705 --> 00:50:13,625
I'm always happy.

850
00:50:13,925 --> 00:50:16,465
And we have a few opportunities
to meet in person.

851
00:50:16,465 --> 00:50:19,325
Please, first of all, join
me at AWS Community Day Italy

852
00:50:19,325 --> 00:50:21,145
on the 2nd of April in Milan.

853
00:50:21,145 --> 00:50:25,565
And please also Come to the AWS community,
Doug, that I'm organizing together with

854
00:50:25,635 --> 00:50:30,605
our Ford of Orion team, and we have 30
speakers, two keynote speakers, lots

855
00:50:30,605 --> 00:50:34,505
of amazing sponsors, and it's a good
opportunity to talk about the SaaS in

856
00:50:34,525 --> 00:50:36,615
person, but, in general, that's it.

857
00:50:36,675 --> 00:50:39,085
I'm wishing you all the best
in your cloud adventures.

858
00:50:39,435 --> 00:50:44,685
Please do the architecting, not, hesitate
to do the great things you can do it,

859
00:50:45,025 --> 00:50:48,765
and we will meet us either online,
either offsite, but in the clouds.

860
00:50:48,920 --> 00:50:51,300
Thank you very much and
we are going forward.

