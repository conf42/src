1
00:00:00,010 --> 00:00:00,720
Hello, everyone.

2
00:00:00,780 --> 00:00:04,969
Hi, I'm Rinku, a senior software
engineer with extensive experience in

3
00:00:04,970 --> 00:00:06,900
authentication and identity management.

4
00:00:07,830 --> 00:00:11,429
Over these years, I worked with
multiple organizations, helping them

5
00:00:11,450 --> 00:00:16,549
implement single sign on solutions
using OO2, SAML, and other protocols.

6
00:00:16,920 --> 00:00:21,590
Today, I'll walk you through designing
a seamless FSO system, the challenges we

7
00:00:21,590 --> 00:00:25,380
often face, and how to balance security,
performance, and user experience.

8
00:00:25,880 --> 00:00:28,340
Not too long ago, enterprise
authentication was simple.

9
00:00:28,900 --> 00:00:33,199
Each app had its own logging, but as
the business has scaled, users were

10
00:00:33,199 --> 00:00:37,900
drowning in passwords and IT teams
struggled with security gaps, complaints,

11
00:00:38,099 --> 00:00:39,680
risk, and access control issues.

12
00:00:40,499 --> 00:00:43,719
the SSO solves these challenges,
but, implementing it correctly is

13
00:00:43,759 --> 00:00:48,099
very critical as a bad SSO system
can become a security nightmare.

14
00:00:48,599 --> 00:00:53,764
Two dominant protocols for our SSO today
are, The first one is OAuth2, which is

15
00:00:53,764 --> 00:00:58,954
a token based framework widely used in
cloud and microservices architectures.

16
00:00:59,484 --> 00:01:04,024
And other one is the SAML, an older
XML based standard, which is used in

17
00:01:04,284 --> 00:01:06,174
enterprises with legacy applications.

18
00:01:06,674 --> 00:01:11,344
Oh, is primarily used for a
authorization and is common in

19
00:01:11,344 --> 00:01:13,234
mobile apps and web applications.

20
00:01:13,544 --> 00:01:17,894
you have probably used it when logging
into website like Google, Facebook,

21
00:01:17,894 --> 00:01:20,354
Orth instead of creating a new account.

22
00:01:20,789 --> 00:01:22,619
And here is how it works.

23
00:01:22,999 --> 00:01:26,199
The user tries to log in to an
app, known as the client app.

24
00:01:26,619 --> 00:01:30,129
The app then redirects the user to
an authorization server, such as

25
00:01:30,439 --> 00:01:32,239
Google or Facebook, to authenticate.

26
00:01:32,779 --> 00:01:36,759
The user enters their credentials,
and if successful, the authorization

27
00:01:36,759 --> 00:01:38,459
server grants the authorization code.

28
00:01:39,069 --> 00:01:42,509
And the app then exchanges
this code for an access token.

29
00:01:42,869 --> 00:01:46,759
This access token is used to
request protected resources from

30
00:01:46,759 --> 00:01:48,729
resource servers, such as APIs.

31
00:01:49,219 --> 00:01:52,209
And if the token is valid, the
resource server grants the access.

32
00:01:52,779 --> 00:01:54,409
So in OAuth 2.

33
00:01:54,449 --> 00:01:57,989
0, the user never shares their
password with the application.

34
00:01:58,329 --> 00:02:00,889
Instead, the access is granted
through a secure token.

35
00:02:01,389 --> 00:02:05,429
This makes OAuth ideal for scenarios
like logging in with Google or

36
00:02:05,639 --> 00:02:07,539
accessing third party APIs securely.

37
00:02:08,509 --> 00:02:12,859
Now let's talk about SAML, which stands
for Security Assertion Markup Language.

38
00:02:13,369 --> 00:02:18,499
Unlike OAuth, which is focused on API
access, SAML is mainly used for single

39
00:02:18,500 --> 00:02:20,129
sign on in enterprise environments.

40
00:02:20,149 --> 00:02:24,179
For example, imagine you work
for a company and need to log

41
00:02:24,179 --> 00:02:27,169
into multiple applications like
AWS, Microsoft, or Salesforce.

42
00:02:27,479 --> 00:02:32,615
AWS, Instead of entering your credentials
repeatedly, SAML allows you to log in

43
00:02:32,615 --> 00:02:34,559
once and access all these services.

44
00:02:35,129 --> 00:02:36,409
And here is how it works.

45
00:02:36,619 --> 00:02:39,899
The user tries to access the
application known as a service provider.

46
00:02:40,479 --> 00:02:45,059
Instead of asking for a password, the
service provider redirects the user to an

47
00:02:45,079 --> 00:02:47,499
identity provider such as Okta or Azure.

48
00:02:48,229 --> 00:02:52,466
The user enters their credentials
on the identity provider login page.

49
00:02:52,466 --> 00:02:57,614
If it's successful, the IDP generates
the SAML assertion, which is an XML

50
00:02:57,614 --> 00:03:02,069
based authentication token, and this
SAML assertion is sent back to the

51
00:03:02,289 --> 00:03:04,529
service provider, which verifies it.

52
00:03:04,809 --> 00:03:08,029
If everything checks out,
the user is logged in without

53
00:03:08,029 --> 00:03:09,323
entering their password again.

54
00:03:09,323 --> 00:03:13,916
in SAML SSO, the authentication
happens at the identity provider,

55
00:03:14,346 --> 00:03:17,996
and the service provider trusts
the SAML token to grant access.

56
00:03:18,306 --> 00:03:21,256
This method is widely used in
corporate environments where the

57
00:03:21,256 --> 00:03:25,066
employees need secure and seamless
access to multiple applications.

58
00:03:25,966 --> 00:03:29,146
A seamless SSO solution is
not about logging in once.

59
00:03:29,516 --> 00:03:32,196
It needs to be secure,
fast, and easy to use.

60
00:03:32,626 --> 00:03:36,076
So if any of these areas are
neglected, the adoption rates drop

61
00:03:36,096 --> 00:03:38,046
and the security risk increases.

62
00:03:38,661 --> 00:03:42,421
The security is the backbone of
any SSO system, so we must protect

63
00:03:42,421 --> 00:03:46,451
the identity providers and enforce
multi factor authentication where

64
00:03:46,451 --> 00:03:49,781
necessary, and ensure the tokens
are properly encrypted and expired.

65
00:03:50,406 --> 00:03:54,686
After a reasonable duration, the
token leaks or, repay attacks can

66
00:03:54,716 --> 00:03:58,516
compromise the entire system if not
managed properly, the performance

67
00:03:58,516 --> 00:04:02,616
is often overlooked in security
discussion, but it is just as critical.

68
00:04:03,116 --> 00:04:06,706
A slow authentication process
frustrate the users and increases

69
00:04:06,986 --> 00:04:11,601
abandonment rates by, caching tokens
and optimizing authentication for

70
00:04:11,601 --> 00:04:15,426
so we can reduce the logging delays
and keep the experience smooth.

71
00:04:15,926 --> 00:04:19,586
The user experience is what
makes or breaks SSO adoption.

72
00:04:19,976 --> 00:04:24,006
So if users encounter frequent
login prompts, inconsistent UI,

73
00:04:24,016 --> 00:04:28,386
or compatibility issues, they will
either bypass SSO or complain to IT.

74
00:04:29,356 --> 00:04:33,186
A great SSO experience
should feel invisible.

75
00:04:33,186 --> 00:04:36,906
The user must be able to log in once
and gain access to all necessary

76
00:04:37,196 --> 00:04:38,656
systems without any interruptions.

77
00:04:38,876 --> 00:04:43,276
While SSO enhances security by
reducing password fatigue and

78
00:04:43,296 --> 00:04:47,096
improving access management, it also
introduces new security challenges.

79
00:04:47,666 --> 00:04:53,026
Let's explore the key risk organizations
must address when implementing SSO.

80
00:04:53,406 --> 00:04:57,466
If the identity provider is compromised,
every connected application is at risk.

81
00:04:57,856 --> 00:05:02,176
Since SSO centralizes authentication,
An attacker who control, who gains

82
00:05:02,176 --> 00:05:07,416
control of the IDP essentially gets
unrestricted access to all linked devices.

83
00:05:07,756 --> 00:05:12,226
This is why securing the IDP with
strong access controls, MFA and

84
00:05:12,246 --> 00:05:13,776
continuous monitoring is critical.

85
00:05:13,776 --> 00:05:17,916
SSO relies on tokens instead of passwords.

86
00:05:18,186 --> 00:05:21,616
While this improves the security,
it also makes tokens a high

87
00:05:21,616 --> 00:05:23,326
value target for the attackers.

88
00:05:23,771 --> 00:05:27,601
If an access token is stolen,
it can be used to gain access

89
00:05:27,601 --> 00:05:28,911
to sensitive resources.

90
00:05:29,251 --> 00:05:32,921
Even worse, replay attacks allows
attackers to reuse the valid

91
00:05:33,281 --> 00:05:35,321
tokens to hijack user sessions.

92
00:05:36,306 --> 00:05:40,476
Another major risk is man in the middle
attacks, where an attacker intercepts

93
00:05:40,586 --> 00:05:42,856
token exchanges during authentication.

94
00:05:43,156 --> 00:05:47,656
If connections between the user, identity
provider, and service provider are

95
00:05:47,656 --> 00:05:53,086
not properly secured, an adversary can
steal or modify the authentication data.

96
00:05:53,586 --> 00:05:57,036
Now let's talk about best practices
for securing your SSO system.

97
00:05:57,036 --> 00:06:01,986
While SSO improves convenience, it also
becomes a prime target for attackers.

98
00:06:02,436 --> 00:06:05,296
To counter these threats,
organizations must follow

99
00:06:05,516 --> 00:06:07,056
strict security best practices.

100
00:06:07,726 --> 00:06:11,191
First, we always use
short lived access tokens.

101
00:06:11,191 --> 00:06:15,576
Tokens that last too long increases
the risk of being stolen and misused.

102
00:06:16,006 --> 00:06:20,096
Instead We should use, we should,
issue tokens with a short expiration

103
00:06:20,096 --> 00:06:23,456
time and use refresh tokens
to extend access when needed.

104
00:06:24,046 --> 00:06:27,996
This way, even if an attacker
gains access to a token, it becomes

105
00:06:27,996 --> 00:06:29,366
useless after a short period.

106
00:06:30,296 --> 00:06:35,796
Next is a multi factor authentication,
which is a user's credentials are stolen,

107
00:06:35,966 --> 00:06:40,686
MFA ensures that a second verification
step, such as a push notification, a

108
00:06:40,686 --> 00:06:44,656
one time password, or a biometric check
is required before access is granted.

109
00:06:45,176 --> 00:06:48,916
This dramatically reduces the
risk of unauthorized access, even

110
00:06:48,956 --> 00:06:50,696
if a password is compromised.

111
00:06:51,196 --> 00:06:53,786
Another security measure is token scoping.

112
00:06:54,126 --> 00:06:56,876
Not all tokens should have
full access to all resources.

113
00:06:57,156 --> 00:07:01,176
Instead, we should limit the permissions
of each token based on what the

114
00:07:01,176 --> 00:07:02,536
user or application actually needs.

115
00:07:02,536 --> 00:07:07,686
For example, a token issued to
read user data should not be able

116
00:07:07,686 --> 00:07:08,976
to modify the system settings.

117
00:07:09,516 --> 00:07:12,951
This principle, known as the principle
of least privilege, minimizes

118
00:07:12,951 --> 00:07:15,451
the damage in case of a breach.

119
00:07:16,301 --> 00:07:19,101
Finally, the security doesn't
stop at authentication.

120
00:07:19,531 --> 00:07:22,731
Organizations must log
and monitor authentication

121
00:07:22,731 --> 00:07:24,231
attempts for unusual behavior.

122
00:07:24,651 --> 00:07:29,491
If we notice repeated, failed login
attempts, access from unusual locations,

123
00:07:29,881 --> 00:07:34,571
or, tokens being used, abnormally,
we can take proactive measures such

124
00:07:34,571 --> 00:07:38,376
as blocking suspicious sessions or
requiring additional verification.

125
00:07:39,286 --> 00:07:43,346
By implementing these best practices,
we can significantly strengthen

126
00:07:43,606 --> 00:07:47,731
the security of SSO systems while
maintaining a smooth user experience.

127
00:07:47,731 --> 00:07:52,851
A poorly optimized SSO system
can cause slow login times and

128
00:07:52,891 --> 00:07:54,671
unnecessary delays in applications.

129
00:07:55,401 --> 00:08:00,081
Users expect a seamless experience and
any lag in the authentication can lead

130
00:08:00,141 --> 00:08:02,171
to frustration and decreased adoption.

131
00:08:02,671 --> 00:08:07,271
So let's discuss the three key strategies
to optimize performance in an SSO system.

132
00:08:07,991 --> 00:08:11,251
First, we can improve the speed
by caching authentication tokens.

133
00:08:11,691 --> 00:08:16,561
So instead of focusing, focusing users to
re authenticate every time they access a

134
00:08:16,561 --> 00:08:18,731
system, we store valid tokens temporarily.

135
00:08:19,221 --> 00:08:22,531
so this reduces the load on
backend identity providers and

136
00:08:22,851 --> 00:08:24,381
allows for faster authentication.

137
00:08:25,291 --> 00:08:28,831
Next, to handle high traffic and
prevent failures, we use load

138
00:08:28,841 --> 00:08:30,591
balancing for identity providers.

139
00:08:30,971 --> 00:08:34,301
This ensures that authentication
requests are distributed effectively,

140
00:08:34,861 --> 00:08:38,351
preventing bottlenecks and
improving system reliability.

141
00:08:38,831 --> 00:08:42,371
If one of the server experiences high
demand, another can take over seamlessly.

142
00:08:42,871 --> 00:08:47,161
Finally, asynchronous token validation
is a powerful way to enhance performance.

143
00:08:47,551 --> 00:08:51,581
Instead of making every authentication
request block the application, we

144
00:08:51,581 --> 00:08:52,491
validate tokens asynchronously.

145
00:08:52,991 --> 00:08:57,231
This significantly speeds up API
responses, ensuring that users can access

146
00:08:57,231 --> 00:08:59,351
their applications without any delay.

147
00:08:59,851 --> 00:09:03,981
By implementing these optimizations,
we can create a faster, more scalable,

148
00:09:04,021 --> 00:09:05,808
and user friendly SSO experience.

149
00:09:05,808 --> 00:09:11,211
A seamless SSO experience also means
reducing unnecessary logging prompts.

150
00:09:11,581 --> 00:09:15,641
The user should authenticate once
per session without repeated logins.

151
00:09:16,321 --> 00:09:20,351
The branded login pages can enhance
the trust and consistency by

152
00:09:20,351 --> 00:09:22,011
matching your application's design.

153
00:09:22,556 --> 00:09:25,046
Making the users feel they
are in the right place.

154
00:09:25,486 --> 00:09:29,676
Finally, the session persistence
ensures users stay logged in across

155
00:09:29,686 --> 00:09:33,926
services, avoiding disruptions
and improving workflow efficiency.

156
00:09:34,396 --> 00:09:38,476
By focusing on these UX elements, we
create a frictionless authentication

157
00:09:38,476 --> 00:09:42,116
experience that boosts the
user's satisfaction and adoption.

158
00:09:42,936 --> 00:09:47,206
Many enterprises still rely on legacy
applications that don't support modern

159
00:09:47,206 --> 00:09:49,756
authentication standards like OAuth 2.

160
00:09:50,036 --> 00:09:50,666
0 or SAML.

161
00:09:51,116 --> 00:09:55,707
So to bridge this gap, we use
SSO gateways, which act as a

162
00:09:55,707 --> 00:09:57,428
translator, converting the OAuth 2.

163
00:09:57,428 --> 00:10:00,346
0 or SAML request into
authentication methods that

164
00:10:00,436 --> 00:10:02,706
the legacy system understands.

165
00:10:03,106 --> 00:10:04,876
A complete migration can be disruptive.

166
00:10:05,216 --> 00:10:09,666
So instead of a big bang approach, we
should gradually phase in SSO while

167
00:10:09,726 --> 00:10:10,846
maintaining existing authentication.

168
00:10:11,346 --> 00:10:15,116
Finally, before a full rollout,
it's crucial to test backward

169
00:10:15,136 --> 00:10:19,616
compatibility to prevent system
failures and ensure a smooth transition.

170
00:10:20,156 --> 00:10:24,776
SSO is constantly evolving and the future
of authentication is shifting towards

171
00:10:25,096 --> 00:10:26,716
stronger security and user control.

172
00:10:27,376 --> 00:10:31,445
And one of the major trends is the
zero trust model, where no user or

173
00:10:31,445 --> 00:10:35,186
device is implicitly trusted and
the authentication is continuous

174
00:10:35,206 --> 00:10:36,746
rather than a one time check.

175
00:10:37,261 --> 00:10:41,201
Next, AI driven security is
enhancing authentication by detecting

176
00:10:41,511 --> 00:10:46,526
anomalies in real time, identifying
suspicious logging patterns, and

177
00:10:46,526 --> 00:10:48,878
preventing fraud before it happens.

178
00:10:48,878 --> 00:10:52,271
Finally, decentralized identity using
blockchain technology is emerging.

179
00:10:52,621 --> 00:10:56,341
This allows the users to control their
own credentials without relying on

180
00:10:56,341 --> 00:11:01,571
central authority, improving privacy,
and reducing identity theft risk.

181
00:11:02,041 --> 00:11:05,911
These advancements will shape the
next generation of SSO, making it more

182
00:11:05,911 --> 00:11:08,221
secure, intelligent, and user centric.

183
00:11:09,141 --> 00:11:10,431
Here are the key takeaways.

184
00:11:10,791 --> 00:11:12,716
SSO is more than just reducing logs.

185
00:11:13,226 --> 00:11:17,816
It's about enhancing security,
scalability, and user experience first,

186
00:11:17,866 --> 00:11:21,856
choosing the right authentication,
protocol exclusion, all 2.0 for.

187
00:11:22,356 --> 00:11:25,706
Finally, balance the security
performance and usability by

188
00:11:26,046 --> 00:11:28,376
securing every authentication flow.

189
00:11:28,956 --> 00:11:32,326
A well designed SSO system
strengthens security while providing

190
00:11:32,816 --> 00:11:34,166
a seamless user experience.

191
00:11:34,526 --> 00:11:35,806
Thank you so much for listening.

192
00:11:35,866 --> 00:11:39,196
And if you found this valuable,
let's connect on LinkedIn or

193
00:11:39,196 --> 00:11:40,636
follow me for more insights.

194
00:11:40,636 --> 00:11:42,406
And I would love to hear your thoughts.

