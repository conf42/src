1
00:00:00,150 --> 00:00:01,320
Hello everyone.

2
00:00:01,830 --> 00:00:02,850
Thanks for joining.

3
00:00:02,950 --> 00:00:07,790
this is Nikai with my, talk
for, go, con 42 conference.

4
00:00:08,310 --> 00:00:12,930
go on track and the title of my talk is
Practical Guide to Testing Go Services.

5
00:00:13,920 --> 00:00:15,629
I. Couple words about me.

6
00:00:15,629 --> 00:00:20,110
I'm senior software engineer, in
Zeland, working from Helsinki,

7
00:00:20,290 --> 00:00:21,910
working on PreOn project.

8
00:00:22,200 --> 00:00:27,090
I started my career with SEA and
did quite a lot of chow, and for

9
00:00:27,090 --> 00:00:28,965
the past six years, I'm doing.

10
00:00:29,615 --> 00:00:35,180
lots of, go engineering and also
writing lots of tests, using Go Eng.

11
00:00:35,750 --> 00:00:40,460
And also I'm offer of PG x Outbox
library, which is available on GitHub.

12
00:00:40,460 --> 00:00:45,240
It's about, transactional outbox
pattern using, PG x driver.

13
00:00:45,740 --> 00:00:50,920
So many of you are familiar with,
testing, pyramid concept, which suggest

14
00:00:50,920 --> 00:00:56,230
us, that, a unit test, chipped to run,
and then we should have more of them.

15
00:00:56,435 --> 00:01:01,635
I. and then integration tests that, that
take more time, more resources to run.

16
00:01:01,815 --> 00:01:03,735
So we should have less of them.

17
00:01:04,035 --> 00:01:08,235
But, there is, there is a new concept
called Testing trophy, which actually

18
00:01:08,235 --> 00:01:13,915
advocates for the idea that, integration
test, we should run more integration

19
00:01:13,915 --> 00:01:19,304
test even the, more than unit test,
because these days they got, extremely.

20
00:01:20,225 --> 00:01:25,325
Easy, to run and, execute
integration tests and unit tests.

21
00:01:25,325 --> 00:01:28,705
They actually tightly couple our, our.

22
00:01:29,080 --> 00:01:30,850
Code to the test.

23
00:01:31,130 --> 00:01:36,770
but in that sense, integration test might,
have more value because, we can have

24
00:01:36,800 --> 00:01:42,470
our integration to different external
systems like Postgres, Kafka, and so on.

25
00:01:42,830 --> 00:01:45,590
And, one more, idea about testing.

26
00:01:45,590 --> 00:01:48,110
Trophy concept is static tests.

27
00:01:48,110 --> 00:01:54,210
It's about, basically linters in
go that many issues, code issues.

28
00:01:54,820 --> 00:01:58,450
they can be caught, using
static analysis tools.

29
00:01:58,870 --> 00:02:02,845
yeah, this is, a new, relatively
new concept about, testing trophy.

30
00:02:03,095 --> 00:02:03,605
so yeah.

31
00:02:03,655 --> 00:02:04,675
about testing.

32
00:02:04,675 --> 00:02:09,715
I would like to introduce, several
principles, Which I'm advocating in

33
00:02:09,715 --> 00:02:16,015
this talk, it's about, testing layer
by layer in, in our GO services.

34
00:02:16,355 --> 00:02:19,615
what I mean layer by layer is,
basically repository layer,

35
00:02:19,890 --> 00:02:22,920
service layer and HTTP layer.

36
00:02:23,420 --> 00:02:28,680
I'm going to use table test everywhere
because they, they're always,

37
00:02:29,080 --> 00:02:31,540
useful because they're extensible.

38
00:02:32,050 --> 00:02:38,150
And, I'm advocating for, comprehen,
comprehensive comparison of, of

39
00:02:38,150 --> 00:02:40,970
actual data to expected data.

40
00:02:41,250 --> 00:02:46,215
basically if we have a str, we should,
com, compare all the fields, and

41
00:02:46,215 --> 00:02:51,255
I'm going to show libraries, which,
facilitate easy comparison of all

42
00:02:51,255 --> 00:02:53,875
the fields of the str, in the test.

43
00:02:54,265 --> 00:02:58,985
and one more principle is to use
randomized data, for the test,

44
00:02:58,985 --> 00:03:01,385
not just some hardcoded di dmi.

45
00:03:01,710 --> 00:03:06,510
use, so there is another library, and
I'm going to show which, facilitate,

46
00:03:06,610 --> 00:03:11,660
how we can use randomized data and,
improve our, quality of the test.

47
00:03:11,920 --> 00:03:12,400
yes.

48
00:03:12,400 --> 00:03:17,770
I would like to introduce, some demo
applications, some example service,

49
00:03:17,770 --> 00:03:19,420
which are going to test today.

50
00:03:19,790 --> 00:03:23,240
the service is about,
management of the card.

51
00:03:23,795 --> 00:03:25,145
Of, e-commerce.

52
00:03:25,235 --> 00:03:29,315
basically we are going to add some
unique items to the card because

53
00:03:29,315 --> 00:03:33,735
pre-owned items are unique, and then
we can remove, items from the card.

54
00:03:33,765 --> 00:03:38,245
And, we can get the card basically
by, by the user ID or owner id,

55
00:03:38,245 --> 00:03:40,505
which, I refer in this stock.

56
00:03:41,265 --> 00:03:45,585
I'm going to use Postgres as the
main database and pgx, driver,

57
00:03:45,635 --> 00:03:50,050
which is the most popular I'm going
to use Gene Framework for HCTP.

58
00:03:50,920 --> 00:03:55,850
And I'm going to use, hexagonal like
architecture, which in this case

59
00:03:55,850 --> 00:03:58,380
of this, very simple application.

60
00:03:58,720 --> 00:04:03,990
it's very similar to a layered
architecture with just, a repository

61
00:04:03,990 --> 00:04:07,090
service layer, and, and HTTP.

62
00:04:07,810 --> 00:04:13,160
So this is hexagonal applica
architecture, in the.

63
00:04:13,489 --> 00:04:18,619
In the, more center we have domain,
which is independent on the application.

64
00:04:18,619 --> 00:04:22,849
And application is basically
our, our, business logic.

65
00:04:22,889 --> 00:04:23,789
our service.

66
00:04:24,159 --> 00:04:29,879
and then, we have infrastructure and
infrastructure is some ports, which

67
00:04:29,879 --> 00:04:34,769
are interfaces and adapters, which
are implementation of interfaces,

68
00:04:34,799 --> 00:04:40,579
which connect our application business
logic, with database and HTTP.

69
00:04:40,829 --> 00:04:41,159
yeah.

70
00:04:41,189 --> 00:04:43,919
in, let's start, with Repository Aware.

71
00:04:43,919 --> 00:04:48,569
How can we test, repository aware, the
layer, which would talk to database?

72
00:04:48,939 --> 00:04:53,809
one of, the main idea here that we
should test against a real database,

73
00:04:54,139 --> 00:04:58,374
not a mock database, because
with these days we can run, a new

74
00:04:58,374 --> 00:05:00,054
database, exactly the same version.

75
00:05:00,314 --> 00:05:04,764
as production, in container
docker container, And then we

76
00:05:04,764 --> 00:05:08,809
can test our queries and our code
against that, this, exactly the

77
00:05:08,809 --> 00:05:10,489
same database in this production.

78
00:05:10,879 --> 00:05:15,099
And, and the idea is that actually
spin up, the containers from Go

79
00:05:15,099 --> 00:05:20,159
Code, this way we can, we can manage
lifecycle of the containers in the

80
00:05:20,159 --> 00:05:22,869
test, together with the test itself.

81
00:05:22,869 --> 00:05:25,129
So it's not completely independent.

82
00:05:25,559 --> 00:05:25,829
yeah.

83
00:05:26,009 --> 00:05:31,359
So for this, two, there are two
libraries, how we can start, a

84
00:05:31,359 --> 00:05:33,889
container f from the go, co go code.

85
00:05:34,229 --> 00:05:38,749
one of, the most popular is test
containers go, which I also use the most.

86
00:05:39,009 --> 00:05:43,749
it comes with several,
actually more than 30 modules.

87
00:05:44,229 --> 00:05:46,809
so which simplify configuration, for.

88
00:05:47,749 --> 00:05:49,639
for the person who writes the test.

89
00:05:50,049 --> 00:05:54,289
so I used it quite a lot for
Postgres and Local Stack.

90
00:05:54,649 --> 00:05:58,759
And Local Stack is, a ation
of, Amazon Web Services.

91
00:05:59,159 --> 00:06:04,339
it has, quite a lot of,
services, S-N-S-S-Q-S, S3.

92
00:06:04,579 --> 00:06:07,869
I found it, very useful, for my projects.

93
00:06:07,969 --> 00:06:14,069
But yeah, we are going, to see how one
can, use that, for Postgres actually.

94
00:06:14,559 --> 00:06:17,929
it requires just couple of
lines of code to run, Postgres

95
00:06:17,929 --> 00:06:20,459
container, from the Go Code itself.

96
00:06:20,869 --> 00:06:25,739
so in here you can see there is
a, basic way strategy is used,

97
00:06:26,189 --> 00:06:28,709
and the idea is that before you.

98
00:06:29,159 --> 00:06:34,149
before you start your test, you need
the container to be ready for the test.

99
00:06:34,749 --> 00:06:38,859
And, because we're using, res
model, it's already knows how to

100
00:06:38,859 --> 00:06:41,999
wait, for the Postgres container,
to be ready for our test.

101
00:06:42,509 --> 00:06:42,779
Yes.

102
00:06:42,779 --> 00:06:46,849
As just, an example, I show
that, one can provide, initial.

103
00:06:47,099 --> 00:06:51,549
scripts which initialize our
database, creates the tables.

104
00:06:51,949 --> 00:06:56,419
maybe insert some data
for the test and so on.

105
00:06:56,779 --> 00:07:00,644
And then, from the container,
one can get a connection string.

106
00:07:00,974 --> 00:07:02,174
I show example.

107
00:07:02,675 --> 00:07:03,364
In the code.

108
00:07:03,394 --> 00:07:09,155
There's deer here that, it uses a
randomized, port on the local machine.

109
00:07:09,525 --> 00:07:13,995
you can start different containers and
they don't collide, which is each other,

110
00:07:13,995 --> 00:07:16,515
and your test can run in parallel.

111
00:07:16,765 --> 00:07:21,945
one, one of, one of idea is
that, we should, to manage.

112
00:07:22,435 --> 00:07:27,655
the lifecycle of our containers, like
in which part of our goal code, we

113
00:07:27,655 --> 00:07:29,605
should actually start the container.

114
00:07:29,935 --> 00:07:34,855
And I'm advocating for using,
a shoot package of, testify

115
00:07:34,855 --> 00:07:37,015
Library, a testing framework.

116
00:07:37,395 --> 00:07:42,530
and it's, because it has, it has,
lifecycle hooks, which you can

117
00:07:42,530 --> 00:07:45,050
run before, before all the tests.

118
00:07:45,450 --> 00:07:48,030
in the suit and then,
shut down the container.

119
00:07:48,310 --> 00:07:53,680
it's, I found it, much more convenient
than using Test main, for example,

120
00:07:53,890 --> 00:07:59,270
or, using sync once, or using, or
starting the container per each

121
00:07:59,270 --> 00:08:03,600
test because then it, it might be
actually costly and cause some device.

122
00:08:03,860 --> 00:08:08,610
this is, And this is, the, the example
how we can introduce the testing suit,

123
00:08:08,980 --> 00:08:11,500
from the testify library to our code.

124
00:08:12,150 --> 00:08:17,330
We just need to use, we need to
embed, the seal struc into our

125
00:08:17,330 --> 00:08:20,030
struc and in, in the cart pursuit.

126
00:08:20,135 --> 00:08:22,485
I, at, I at test, container.

127
00:08:22,515 --> 00:08:27,465
so I can, in the ho in the lifecycle
hook, I can start the container.

128
00:08:27,790 --> 00:08:29,690
for the whole, for the whole suit.

129
00:08:29,690 --> 00:08:32,990
And then, shut down the container
after all tests are run.

130
00:08:33,370 --> 00:08:38,795
and the last line, they show how,
actually how to run the whole suits and

131
00:08:38,795 --> 00:08:43,630
they run the whole suits, which is going
to run all the tests in the same suit.

132
00:08:43,880 --> 00:08:46,100
it shows, how we can set up the suit.

133
00:08:46,635 --> 00:08:50,925
so there are special methods called
setup suit and tear down suits.

134
00:08:51,285 --> 00:08:54,375
And in here, I'm doing
some, initialization.

135
00:08:54,615 --> 00:09:00,755
I'm starting re container, I'm
initializing, PG x, connection pool.

136
00:09:01,085 --> 00:09:05,375
And then I'm initializing,
repository layer using the connection

137
00:09:05,375 --> 00:09:07,875
pool, and in tear down suit.

138
00:09:07,925 --> 00:09:11,285
I am just, stopping the container,
terminating the container.

139
00:09:11,795 --> 00:09:17,355
Actually, it's not needed because by
default, test container library starts a

140
00:09:17,355 --> 00:09:22,965
special container, second container, which
is called Rike, which is responsible,

141
00:09:23,335 --> 00:09:27,955
for killing all the containers if
they're not, terminated after the test.

142
00:09:28,655 --> 00:09:31,805
but yeah, so we are just helping
our right container here.

143
00:09:32,305 --> 00:09:36,600
And then, and this, snippet
shows how can we attach, our

144
00:09:36,630 --> 00:09:39,270
actual test to the test suit.

145
00:09:39,800 --> 00:09:44,300
I'm going to test, a method
which add items to the cart.

146
00:09:44,550 --> 00:09:48,680
before, before running, the
table tests, some configuration.

147
00:09:49,100 --> 00:09:50,030
Can be done.

148
00:09:50,520 --> 00:09:56,320
and then I need to use, this,
suran, instead of, instead of Teron.

149
00:09:56,880 --> 00:10:03,780
so yeah, basically, I run, I, I run the
method from, a ad item, method from repo.

150
00:10:04,210 --> 00:10:07,300
I provide some, parameters from the test.

151
00:10:07,670 --> 00:10:11,230
the, no, I can get the actual
cart and compare, the cart.

152
00:10:11,560 --> 00:10:13,780
To set the cart with the expected one.

153
00:10:14,300 --> 00:10:18,885
and for assertion, it's, very
handy to use, GO CMP library,

154
00:10:19,465 --> 00:10:21,115
which I'm going to explain.

155
00:10:21,615 --> 00:10:22,365
Right now.

156
00:10:22,605 --> 00:10:24,375
So go in pure library.

157
00:10:24,375 --> 00:10:28,765
It's it's actually about semantical
equality and it's much more

158
00:10:28,765 --> 00:10:33,095
power, powerful, than, reflect
package and deep eco method,

159
00:10:33,375 --> 00:10:35,650
which come out of the box in go.

160
00:10:36,050 --> 00:10:38,230
and then, basically the idea that.

161
00:10:38,480 --> 00:10:45,420
one can try to use that, default behavior
of go in PO library, but if it's not,

162
00:10:45,450 --> 00:10:51,380
if it's not working, then one can,
customize, the behavior using, options.

163
00:10:51,860 --> 00:10:56,310
so yeah, eventually, e eventually
you would get, basically all

164
00:10:56,310 --> 00:10:57,990
the fields of the structure.

165
00:10:57,990 --> 00:10:59,530
They can, they can be compared.

166
00:10:59,885 --> 00:11:00,925
to, to each other.

167
00:11:01,085 --> 00:11:04,915
the test itself, the comparison
itself are much more comprehensive.

168
00:11:05,275 --> 00:11:08,225
And by the way, this is not
official Google, product.

169
00:11:08,475 --> 00:11:15,220
so yeah, here I show how one can use GO
MP at the most bottom of the snippet.

170
00:11:15,250 --> 00:11:16,025
the D method.

171
00:11:16,850 --> 00:11:19,960
is the most, basically, default behavior.

172
00:11:20,270 --> 00:11:25,190
you can just, compare like
expected cart and actual cart.

173
00:11:25,820 --> 00:11:32,150
And if that, if it doesn't work, then
you can start customizing the behavior.

174
00:11:32,550 --> 00:11:37,410
you can customize, you can exclude
certain fields from the comparison.

175
00:11:37,410 --> 00:11:42,040
And here I am ex excluding
created at field, for example.

176
00:11:42,920 --> 00:11:49,550
you can also customize, you can, guide,
go CMP to actually, treat, empties and new

177
00:11:49,550 --> 00:11:54,740
slices equally to each other because by
default they're not considered the same.

178
00:11:55,050 --> 00:11:57,090
but you can customize that behavior.

179
00:11:57,450 --> 00:11:59,520
And also, like certain.

180
00:12:00,020 --> 00:12:04,100
Certain structures which have
unex exported fields by de

181
00:12:04,100 --> 00:12:06,360
default, they wouldn't be equal.

182
00:12:06,360 --> 00:12:11,460
So you can customize that behavior,
and I'm customizing the comparison how,

183
00:12:11,650 --> 00:12:13,990
the currency are actually compared.

184
00:12:14,570 --> 00:12:20,200
without, without customizing, a
behavior how currencies are compared,

185
00:12:20,200 --> 00:12:22,720
that I would basically get the error.

186
00:12:22,720 --> 00:12:24,745
But, But with, yes.

187
00:12:25,525 --> 00:12:29,945
so we are done with, we are done
with repository layer, layer.

188
00:12:30,215 --> 00:12:33,655
And let's think how we can,
test, the service there.

189
00:12:33,875 --> 00:12:39,125
there are couple of concepts here and,
one of the main I idea is that we have

190
00:12:39,125 --> 00:12:41,675
to use pure tests if it's possible.

191
00:12:42,045 --> 00:12:45,105
sometimes it's not possible
because service can have

192
00:12:45,105 --> 00:12:46,815
some external dependencies.

193
00:12:47,175 --> 00:12:50,095
It can depend on a repository, layer.

194
00:12:50,095 --> 00:12:56,275
It can depend on other ports, in, in the
technology of, of Hexagon architecture.

195
00:12:56,615 --> 00:13:02,845
so basically we should, we should mock
those dependencies and that would simplify

196
00:13:02,875 --> 00:13:05,275
our, testing of the business logic.

197
00:13:05,695 --> 00:13:07,795
it was significantly simplify.

198
00:13:08,035 --> 00:13:13,635
So in Go Work, there are a couple of
tools which, which, simplify, using of the

199
00:13:13,635 --> 00:13:17,225
mocks, first idea that we have to, use.

200
00:13:17,275 --> 00:13:21,355
we have to depend on the interface,
not on the specific structure.

201
00:13:21,685 --> 00:13:26,295
And then, if our service depends
on, interface of repository, then

202
00:13:26,295 --> 00:13:28,685
we can, use, Moog generators.

203
00:13:29,075 --> 00:13:32,335
And then use, generated
mocks of repository and other

204
00:13:32,335 --> 00:13:34,015
dependencies in our tests.

205
00:13:34,475 --> 00:13:39,845
historically, I have quite
experience about using, Goen

206
00:13:39,845 --> 00:13:41,975
mo, which is now de deprecated.

207
00:13:42,100 --> 00:13:47,110
and but Uber Mo is basically the same
thing, but they're not compatible.

208
00:13:47,610 --> 00:13:52,270
And, the most popular, the most
popular tool right now, is mockery

209
00:13:52,320 --> 00:13:55,540
to generate mos for forgo on tests.

210
00:13:55,790 --> 00:13:58,460
it generates mos from interfaces.

211
00:13:58,960 --> 00:14:04,505
And it follows con conventions, which
are defined in, testify mock package.

212
00:14:04,775 --> 00:14:11,405
So it provides much slim, simpler a API
comparing to Uber Mock or Golan Mock.

213
00:14:11,615 --> 00:14:14,315
And it's also the most
popular option right now.

214
00:14:14,705 --> 00:14:18,605
I'm going to show you example
how one can generate mocks.

215
00:14:18,875 --> 00:14:21,815
So our cart report is interface.

216
00:14:22,445 --> 00:14:26,955
we scope both method methods, which,
we, we implement somewhere else.

217
00:14:27,455 --> 00:14:29,225
And which we already tested.

218
00:14:29,535 --> 00:14:32,075
basically using, test, test containers go.

219
00:14:32,645 --> 00:14:38,905
So by using, go, goog generate, tech,
we can, we can specify and configure,

220
00:14:38,905 --> 00:14:44,525
what mock we want to create, how the
name, the mock structure, what would be

221
00:14:44,525 --> 00:14:49,915
the package, output package, what be,
would be the output file name, and so on.

222
00:14:49,915 --> 00:14:54,325
And then, one needs to
install, the mock generator.

223
00:14:54,695 --> 00:14:59,945
The local machine and then actually
around go generate commands, command, and

224
00:14:59,945 --> 00:15:02,725
then the mock, file would be generated.

225
00:15:03,235 --> 00:15:10,085
And then, this, mock, mock, a mock can
be used in the test, to mock, dependency,

226
00:15:10,145 --> 00:15:12,485
to mock a behavior of our dependency.

227
00:15:12,725 --> 00:15:19,325
Here I show how one can use, set up,
configure, mocks, to use, in table tests.

228
00:15:19,545 --> 00:15:25,015
basically, this new mock setup, function
has to be introduced, for each table test.

229
00:15:25,015 --> 00:15:30,645
And then, Basically it's a quite simple
a API, that, you can provide okay, what

230
00:15:30,645 --> 00:15:35,615
method is going, are you, what method
do you, expect to be code and what

231
00:15:35,615 --> 00:15:37,565
value you want to return, basically.

232
00:15:37,565 --> 00:15:41,705
And, there are certain things like
you can specify, mock anything.

233
00:15:41,705 --> 00:15:43,925
This is for the go and context.

234
00:15:44,435 --> 00:15:46,115
And then, yeah.

235
00:15:46,365 --> 00:15:51,005
and then, when you actually run the
tests, So you, you create, basically

236
00:15:51,005 --> 00:15:57,435
you create, the mo and then you use mo
set type function to configure the mo.

237
00:15:58,105 --> 00:16:01,135
then you, you pass,
the MOOC as dependency.

238
00:16:01,345 --> 00:16:05,025
Then you, create, a service
card service in my case.

239
00:16:05,025 --> 00:16:07,595
Then, then you would call certain methods.

240
00:16:07,845 --> 00:16:12,375
And the service, basically calling
some methods, making some assertions,

241
00:16:12,735 --> 00:16:17,795
and at the most end, it's, it's not
obligatory, but, it's handy to call,

242
00:16:17,795 --> 00:16:19,945
this assert expectation, function.

243
00:16:20,195 --> 00:16:20,495
yeah.

244
00:16:21,045 --> 00:16:23,085
so this is quite straightforward.

245
00:16:23,095 --> 00:16:27,265
just, remember, that, about, the
moss, that one, one should, pass

246
00:16:27,265 --> 00:16:31,215
dependencies, as interfaces,
and then moss can be generated.

247
00:16:31,635 --> 00:16:34,275
But this is one more topic about how we.

248
00:16:34,840 --> 00:16:38,060
how we, we provide the
data for the, for the test.

249
00:16:38,460 --> 00:16:41,070
of course we can use, hardcoded data.

250
00:16:41,450 --> 00:16:47,200
but there are, several options and I found
I. Myself personally, this go fake it.

251
00:16:47,250 --> 00:16:51,020
library, is the most, useful, for my case.

252
00:16:51,500 --> 00:16:56,410
I show in this, in this snippet
how we can, create, A fake

253
00:16:56,410 --> 00:16:58,490
card, with some faked value.

254
00:16:58,490 --> 00:17:03,600
So instead of hard coding, we can
use, go fake it, library, which has

255
00:17:04,110 --> 00:17:06,360
a thousands of different methods.

256
00:17:06,750 --> 00:17:09,870
It can provide you some
randomly generated UID.

257
00:17:10,495 --> 00:17:15,505
some price value, some currency,
and it has like dozens and dozens

258
00:17:15,505 --> 00:17:17,895
of methods and it's really useful.

259
00:17:18,015 --> 00:17:21,885
so first of all, you don't have to
hard co hard code the data yourself.

260
00:17:22,335 --> 00:17:28,605
And first, each time, the data you use,
in, in the co in the test it's different.

261
00:17:28,605 --> 00:17:33,305
So sometimes, you can, find some
bug, which is would be otherwise

262
00:17:33,365 --> 00:17:35,325
really difficult, to find.

263
00:17:35,325 --> 00:17:38,195
Because of this randomized
data I. All right.

264
00:17:38,195 --> 00:17:43,695
now, now we completed, how, the topic
of how we, we test, the service where,

265
00:17:43,695 --> 00:17:49,885
and now let's, proceed to Htt PO
air, how we can retest Htt PO Air.

266
00:17:50,095 --> 00:17:55,515
The first principle is, we have to
mock the service ware, which is used by

267
00:17:55,515 --> 00:18:02,085
CTP ware, so we can use, the same mock
generator, mockery and, our server.

268
00:18:02,085 --> 00:18:07,225
It means that our service has
also to be interface and, to be

269
00:18:07,225 --> 00:18:11,605
dependent, provided dependency
has to be provided as interface.

270
00:18:11,855 --> 00:18:16,285
and then, actually for the HT
TP aware, there are two, two

271
00:18:16,285 --> 00:18:18,125
cons, two things we can test.

272
00:18:18,125 --> 00:18:25,640
first thing we can test each, HTTP handler
in isolation, and then we can test, the

273
00:18:25,640 --> 00:18:28,430
whole router of the whole application.

274
00:18:29,020 --> 00:18:33,635
Sometimes people combine them
as, use, just, one type of test.

275
00:18:33,635 --> 00:18:36,395
But ideally they have to be separated.

276
00:18:36,755 --> 00:18:43,255
I explain in following sites why, and,
it's quite handy to use HTTP test,

277
00:18:43,255 --> 00:18:45,655
which is, comes, it's a standard fiber.

278
00:18:45,655 --> 00:18:48,285
It comes, with, go out of the box.

279
00:18:48,685 --> 00:18:50,795
and it's, very handy to, test that.

280
00:18:51,125 --> 00:18:56,345
but it can be a little bit where
both to use that fiber, especially

281
00:18:56,345 --> 00:19:00,465
if you want to assert like different,
more advanced things like you want

282
00:19:00,525 --> 00:19:05,170
to affect the body and maybe be
flexible how you do the assertion.

283
00:19:05,430 --> 00:19:05,670
no.

284
00:19:05,670 --> 00:19:11,450
So there are a couple of libraries, below
which provide like more fluent API, how

285
00:19:11,450 --> 00:19:17,000
you make, how you make the call and how
you as assert what you get, back from the

286
00:19:17,000 --> 00:19:19,825
call to, to HTTP handler or the router.

287
00:19:20,325 --> 00:19:23,920
Alright, here I show, okay,
this is our gene handler.

288
00:19:24,425 --> 00:19:26,795
I use, gene Framework for HCTP.

289
00:19:26,845 --> 00:19:28,905
it's one of the most, popular.

290
00:19:28,905 --> 00:19:35,555
And, we have this GET card, method,
which takes, gene context and gets,

291
00:19:35,865 --> 00:19:40,335
returns us the card and some JHTP status.

292
00:19:40,405 --> 00:19:44,420
okay, so now how can we
test, this, gene handler?

293
00:19:44,870 --> 00:19:46,610
So first of all, we need to.

294
00:19:46,860 --> 00:19:52,420
we need to create, the handler and we,
we configure the service as the mo.

295
00:19:52,900 --> 00:19:55,210
We inject that, service as the mo.

296
00:19:55,420 --> 00:19:57,010
We configure the Moog.

297
00:19:57,430 --> 00:20:00,890
And, here comes, like the
more interesting part.

298
00:20:01,080 --> 00:20:05,170
we need to create a recorder
from HT TP test, package.

299
00:20:05,620 --> 00:20:09,000
And then we would, use, that recorder.

300
00:20:09,870 --> 00:20:14,080
To make a call, to make a call to
our handler and then back from the

301
00:20:14,080 --> 00:20:19,040
recorder, we would be able to get the
data, because it would record like,

302
00:20:19,090 --> 00:20:24,090
what was our input per parameters and,
what was like the output basically.

303
00:20:24,440 --> 00:20:29,935
if we want to test the Gina, hand,
handler, without testing the whole router.

304
00:20:29,935 --> 00:20:34,475
Then there is, a specific method,
to create a gene, gene context.

305
00:20:34,555 --> 00:20:39,755
so we, we can provide the gene
context, basically, to, to our method.

306
00:20:39,995 --> 00:20:45,665
And we use record to create, the gene
context and we provide some, parameters.

307
00:20:46,145 --> 00:20:51,850
we make, We actually make, get, we make,
get requests, we prepare, get request, and

308
00:20:51,850 --> 00:20:54,580
we set that request into our gene context.

309
00:20:54,580 --> 00:20:58,230
And then finally, we make
a call to our handler.

310
00:20:58,570 --> 00:21:01,480
we constructed, And started gene context.

311
00:21:01,930 --> 00:21:05,770
And then, yeah, after we make a
call, from the recorder, we can

312
00:21:05,770 --> 00:21:08,470
get what was the HTTP status code.

313
00:21:08,900 --> 00:21:10,550
we can compare that.

314
00:21:10,580 --> 00:21:15,650
We can, serve that to the one,
to the expected one and also.

315
00:21:15,710 --> 00:21:22,180
It is possible to get the body, we
can get the body, body back as a bites

316
00:21:22,390 --> 00:21:27,360
by array, and then we can convert
that, we can convert that to our cart.

317
00:21:27,730 --> 00:21:32,520
and then we can, compare cart, assert,
the last line of this code snippet.

318
00:21:32,520 --> 00:21:36,440
And of course we are going to use,
peel library under the hood to compare.

319
00:21:36,765 --> 00:21:41,295
the cart, very flexibly and,
with minimum amount of code.

320
00:21:41,795 --> 00:21:45,955
Alright, now, I'm going, I would
like to talk, about, a bit about

321
00:21:46,375 --> 00:21:50,725
why should we actually separate
our router and handler test?

322
00:21:51,075 --> 00:21:54,215
because, the idea is to
focus on different things.

323
00:21:54,455 --> 00:21:59,385
When we test, a handler, we are going
to test, we are going to, test how the

324
00:21:59,385 --> 00:22:03,030
handler interacts with our, our service.

325
00:22:03,190 --> 00:22:08,560
the dependency we injected, how it
handles the errors, how it processes

326
00:22:08,560 --> 00:22:14,900
the input, what are the H cases,
HKH, case, status codes, and so on.

327
00:22:15,400 --> 00:22:20,020
So it has to be deep and comprehensive
test how our handler behaves.

328
00:22:20,350 --> 00:22:22,480
But for the router, it's a bit different.

329
00:22:22,490 --> 00:22:29,055
we have to focus on the router mechanics,
so about, that we actually set up,

330
00:22:29,085 --> 00:22:32,525
correctly the handlers, to each route.

331
00:22:33,365 --> 00:22:39,905
and if the route puff is correct and how
parameters are being extracted and if

332
00:22:39,905 --> 00:22:42,335
middleware is applied correctly or not.

333
00:22:42,855 --> 00:22:48,125
and then, on the router, it's, it's
enough, just to test a happy puff because

334
00:22:48,125 --> 00:22:50,405
we are focusing on the different things.

335
00:22:50,685 --> 00:22:52,215
on the route in mechanics.

336
00:22:52,535 --> 00:22:53,765
I'm going to show you.

337
00:22:54,265 --> 00:22:57,025
How we can do a simple
test, for the router.

338
00:22:57,455 --> 00:23:05,025
so in here we actually need, to, to test,
the ural, the puff, which is, going to be,

339
00:23:05,335 --> 00:23:08,005
code and what's we are going to expect.

340
00:23:08,425 --> 00:23:12,905
And, again, we need to configure
the mock, for the service and what's

341
00:23:12,905 --> 00:23:14,645
the status, we expect in back.

342
00:23:15,145 --> 00:23:20,415
And then, here, again, we have
to use H-H-T-T-P test, recorder.

343
00:23:20,755 --> 00:23:26,025
and then, we, we set, the router is
our gene, engine, basically, which we

344
00:23:26,340 --> 00:23:28,920
construct somewhere outside of here.

345
00:23:28,920 --> 00:23:32,355
And then we create a
request, HTTP request.

346
00:23:32,645 --> 00:23:38,395
yes, and then we, we can provide ht TP
request to the router and see what, yeah.

347
00:23:38,395 --> 00:23:42,865
So again, recorder would record,
what was the input, what was the

348
00:23:42,865 --> 00:23:45,625
output, and we can assess them.

349
00:23:45,835 --> 00:23:49,515
And here I'm just, I'm
certain, the status code, here.

350
00:23:49,905 --> 00:23:52,510
Because, because it's
about the happy puff.

351
00:23:52,820 --> 00:23:57,440
Bo comparing the body here, it can be
done, but it's not necessary because

352
00:23:57,440 --> 00:24:03,020
our handler test should focus more
on, on comparing, certaining the body.

353
00:24:03,360 --> 00:24:05,250
but here we are just doing the happy puff.

354
00:24:05,750 --> 00:24:06,230
All right.

355
00:24:06,230 --> 00:24:11,540
In the context, in the context of
tests, it makes sense to, to talk a bit

356
00:24:11,540 --> 00:24:14,370
about, the coverage and coverage report.

357
00:24:14,620 --> 00:24:19,940
the first snippet shows, that, we can,
generate a coverage report, locally.

358
00:24:20,270 --> 00:24:24,070
We can convert that to HTML
and we can, we can open that.

359
00:24:24,535 --> 00:24:28,975
In the browser, it can be combined
in a single command, and sometimes

360
00:24:28,975 --> 00:24:34,740
it can be, cu sometimes it can be
handy, and curious to see, what parts

361
00:24:34,740 --> 00:24:37,150
of, your code are not tested enough.

362
00:24:37,400 --> 00:24:40,700
But, there are, even
more automatic solutions.

363
00:24:40,800 --> 00:24:45,280
there are services, where you can
upload, your coverage, reports.

364
00:24:45,560 --> 00:24:50,990
if you maintain open source, project
on the GitHub, then it's also quite

365
00:24:50,990 --> 00:24:55,670
handy, like for example, I use
cover offs and, Where you, there you

366
00:24:55,670 --> 00:24:58,300
can upload, your coverage, report.

367
00:24:58,350 --> 00:25:04,935
and it also provides some UI and also,
it can track for you if your coverage

368
00:25:04,965 --> 00:25:07,485
increases, increased or decreased.

369
00:25:07,985 --> 00:25:12,540
Alright, so we are quite close to
the end of the talk and some more

370
00:25:12,540 --> 00:25:14,010
tools I would like to mention.

371
00:25:14,260 --> 00:25:18,740
which are interesting to explore,
maybe used in the, in your projects.

372
00:25:19,050 --> 00:25:24,220
so Park go, is the tool which
facilitate, facilitate, contract testing.

373
00:25:24,560 --> 00:25:29,710
if, so this talk was focusing on
testing, a single service, but, in

374
00:25:29,710 --> 00:25:32,980
multi-service environment, it makes sense.

375
00:25:33,230 --> 00:25:38,000
The test, just, more than one
service and then, this PGO tool

376
00:25:38,030 --> 00:25:40,870
can be, can be useful also.

377
00:25:40,870 --> 00:25:46,020
recently I started to use this, test
file inter, this is, link, actually

378
00:25:46,320 --> 00:25:51,690
tells you and, alerts you if you
are not, using the testify assert.

379
00:25:52,420 --> 00:25:57,830
and, require library, correctly, which
is, sometimes, can be, quite useful

380
00:25:57,830 --> 00:25:59,810
and, of course it's not so critical.

381
00:26:00,210 --> 00:26:02,180
but yeah, I. All right.

382
00:26:02,690 --> 00:26:07,950
And, yeah, also it makes sense to
think about, testing, the service

383
00:26:07,950 --> 00:26:13,260
when it's deployed to the test cluster
in here, I indicate that the smoke

384
00:26:13,320 --> 00:26:18,390
plus test, so like the smoke test
is like the most basic one, but.

385
00:26:18,755 --> 00:26:23,035
once you deploy, the service, the
test cluster, you can think of, some,

386
00:26:23,075 --> 00:26:27,965
integration test with other services
or maybe, end-to-end test, which

387
00:26:27,965 --> 00:26:31,185
involve involves multiple, services.

388
00:26:31,315 --> 00:26:33,445
but this is outside of this talk.

389
00:26:33,945 --> 00:26:34,435
Alright.

390
00:26:34,435 --> 00:26:34,580
All right.

391
00:26:34,580 --> 00:26:39,660
take, takes away here I summarize,
the libraries, which are useful.

392
00:26:39,945 --> 00:26:43,435
to use, which, when you do
test in the Go services.

393
00:26:43,685 --> 00:26:48,265
so for the different levels,
depending on what way you're testing,

394
00:26:48,895 --> 00:26:55,025
like I, I would, I would mention
specifically go CMP and go, go fake it.

395
00:26:55,255 --> 00:27:01,564
test containers, go, mocky, and of
course HT TP test for HT TP interactions.

396
00:27:02,064 --> 00:27:06,654
And thank you very much for,
for attention and happy testing.

