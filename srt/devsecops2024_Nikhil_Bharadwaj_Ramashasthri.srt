1
00:00:00,240 --> 00:00:02,450
Hey all, this is Nikhil Ramasastry.

2
00:00:02,950 --> 00:00:05,430
I work as a staff
software engineer at Turo.

3
00:00:06,210 --> 00:00:09,640
I'm going to present my learnings
of API first development.

4
00:00:10,140 --> 00:00:14,410
Embracing it has enhanced
scalability and integration for Turo.

5
00:00:14,910 --> 00:00:18,329
To go over the agenda items, I
will first introduce the concept

6
00:00:18,520 --> 00:00:23,455
and explain its core principles,
specification formats, tools used for

7
00:00:23,455 --> 00:00:25,765
design, documentation, and testing.

8
00:00:26,415 --> 00:00:32,795
Then, we'll present you with use cases,
later go over the benefits, challenges,

9
00:00:33,155 --> 00:00:36,294
mitigation strategies, and best practices.

10
00:00:37,245 --> 00:00:38,504
Eventually, we'll conclude.

11
00:00:39,004 --> 00:00:43,654
To start with the introduction, according
to 2023 survey conducted by Postman,

12
00:00:44,224 --> 00:00:48,719
67 percent of the developers expect
to spend more time on the software.

13
00:00:49,509 --> 00:00:53,169
on developing an API
or API work in general.

14
00:00:54,029 --> 00:00:59,909
At Turo, we often struggle with explicit
versus implicit scope of an API without

15
00:00:59,909 --> 00:01:04,809
understanding the third party clients or
front end developers or mobile developers.

16
00:01:05,729 --> 00:01:10,749
Over time, we have learned development
of an API with respect to stakeholders

17
00:01:11,099 --> 00:01:13,549
who are using it defines its scope.

18
00:01:14,299 --> 00:01:20,209
Hence, API first development
prioritizes designing APIs as a

19
00:01:20,209 --> 00:01:22,269
foundation of application development.

20
00:01:22,769 --> 00:01:23,339
At 2.

21
00:01:23,340 --> 00:01:28,869
0, the backend development team has
started involving stakeholders during

22
00:01:28,869 --> 00:01:31,249
the brainstorming sessions of API design.

23
00:01:31,799 --> 00:01:34,509
this help does close a lot of loose ends.

24
00:01:35,019 --> 00:01:35,609
Hence.

25
00:01:36,289 --> 00:01:40,869
We followed the pattern of
define API contract, implement

26
00:01:40,869 --> 00:01:42,369
it, and test and apply.

27
00:01:42,869 --> 00:01:47,299
In application development, there is
always a producer and consumer lifecycle.

28
00:01:47,799 --> 00:01:52,129
As a producer, we started
defining the API endpoints and

29
00:01:52,129 --> 00:01:53,969
its request or response structure.

30
00:01:54,299 --> 00:02:00,409
With stakeholders in some cases we have
mocked the data with loose coupling

31
00:02:00,959 --> 00:02:07,109
that enables scalability and flexibility
Three these principles has enabled

32
00:02:07,679 --> 00:02:15,369
consumer to not worry the underlying
complexity of an api in turn provided The

33
00:02:15,369 --> 00:02:17,079
abstraction and encapsulation as well.

34
00:02:17,579 --> 00:02:22,699
To give an overview on specification
formats, we have used OpenAPI 3.

35
00:02:22,699 --> 00:02:22,889
0.

36
00:02:23,469 --> 00:02:27,939
There are other formats like RESTful
API Modeling Language and Markdown based

37
00:02:27,939 --> 00:02:30,479
API Blueprints for different use cases.

38
00:02:30,919 --> 00:02:36,619
Among these, OpenAPI stands out
clearly as it supports JSON and YAML

39
00:02:37,099 --> 00:02:38,919
and generates codes extensively.

40
00:02:39,419 --> 00:02:42,919
As part of OpenAPI 1st development
to establish smooth collaboration,

41
00:02:43,099 --> 00:02:49,169
we used design tools like Stoplight,
Swagger, and Postman for testing

42
00:02:49,169 --> 00:02:50,999
and marking requests or responses.

43
00:02:51,739 --> 00:02:56,249
Swagger UI is very handy with
respect to documentation, where we

44
00:02:56,249 --> 00:03:00,739
have explicitly collaborated about
things like HTTP error codes and etc.

45
00:03:01,239 --> 00:03:05,509
API first development can be applied
in use cases like independent scaling

46
00:03:05,510 --> 00:03:10,289
microservices, content management
systems, mobile applications, and

47
00:03:10,289 --> 00:03:12,219
Internet of Things ecosystems.

48
00:03:12,719 --> 00:03:17,369
After practicing API first development
for a few projects, our developers are

49
00:03:17,369 --> 00:03:19,499
never going back to code first approach.

50
00:03:19,999 --> 00:03:24,599
As API first development
provides scalability, flexibility

51
00:03:24,619 --> 00:03:26,514
with better integration.

52
00:03:26,515 --> 00:03:33,344
It enhanced developer experience
by 29 percent and API adoption

53
00:03:33,414 --> 00:03:35,194
rate by 35 percent for our teams.

54
00:03:35,694 --> 00:03:39,324
The challenges to implement
API first development started

55
00:03:39,324 --> 00:03:40,174
with huge learning curve.

56
00:03:40,804 --> 00:03:45,784
With key challenges around versioning
and security concerns manage to handle

57
00:03:45,804 --> 00:03:51,454
these challenges with Few breakout
sessions from time to time and training

58
00:03:51,924 --> 00:03:55,309
around tools like swagger and open api 3.

59
00:03:55,309 --> 00:04:01,079
0 adoption Started to follow versioning
policies strictly and API gateways

60
00:04:01,119 --> 00:04:05,619
and doing regular audits have
helped us from security standpoint.

61
00:04:06,119 --> 00:04:11,409
Here are the few best practices for
implementation of API first development.

62
00:04:12,029 --> 00:04:16,019
Brainstorm design of an API with
intention to future proof it.

63
00:04:16,929 --> 00:04:20,009
Implement robust error
handling and validation.

64
00:04:20,839 --> 00:04:23,739
Update outdated documentation
from time to time.

65
00:04:24,499 --> 00:04:27,139
Involve stakeholders
early and gather feedback.

66
00:04:27,494 --> 00:04:32,324
That helps a lot and effectively
versioning the APIs for

67
00:04:32,324 --> 00:04:34,164
smooth transitions also helps.

68
00:04:34,664 --> 00:04:38,444
In conclusion, API first development
is revolutionizing the modern

69
00:04:38,444 --> 00:04:42,714
software architecture by emphasizing
scalability, flexibility, and

70
00:04:42,714 --> 00:04:44,574
superior integrations capabilities.

71
00:04:45,104 --> 00:04:51,124
By designing APIs as foundation
layer, organization organizations

72
00:04:51,164 --> 00:04:52,994
can foster parallel development.

73
00:04:53,664 --> 00:04:58,184
enhance collaboration between the
teams, ultimately accelerating the

74
00:04:58,194 --> 00:05:00,814
time to market for their products.

75
00:05:01,314 --> 00:05:06,904
Two row experience with technology
leaders such as Uber, GitHub and Stripe

76
00:05:06,984 --> 00:05:11,924
have demonstrated the significant
advantages of adopting an API for

77
00:05:11,924 --> 00:05:16,464
strategy from improved system modularity
to seamless third party integrations.

78
00:05:16,964 --> 00:05:18,074
Thank you for your time.

79
00:05:18,104 --> 00:05:18,804
Have a nice day.

80
00:05:19,514 --> 00:05:19,794
Bye.

