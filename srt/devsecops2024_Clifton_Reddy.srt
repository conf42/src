1
00:00:00,390 --> 00:00:02,260
Hello, my fellow tech enthusiasts.

2
00:00:03,050 --> 00:00:07,280
I am Clifton Reddy, and by profession,
I am a software development manager.

3
00:00:08,240 --> 00:00:13,040
Today, I'm going to talk about green
code, a possible process to reduce your

4
00:00:13,079 --> 00:00:15,950
carbon footprint in the dev and ops arena.

5
00:00:16,450 --> 00:00:21,019
So what is green code and how can
it be integrated into operations to

6
00:00:21,029 --> 00:00:22,959
reduce the overall carbon intensity?

7
00:00:23,459 --> 00:00:29,319
Just as code red signals a security
issue, should code green signify?

8
00:00:29,654 --> 00:00:33,904
The need to prioritize carbon emissions
and sustainable software practices.

9
00:00:34,404 --> 00:00:39,194
This picture shows the carbon intensity of
electricity consumption around the world.

10
00:00:39,694 --> 00:00:41,155
So what is carbon intensity?

11
00:00:42,064 --> 00:00:47,254
carbon intensity is a metric that measures
the amount of carbon dioxide and other

12
00:00:47,254 --> 00:00:49,714
greenhouse gases per unit of activity.

13
00:00:50,214 --> 00:00:54,535
The map is a carbon intensity map
of the power grids across the world.

14
00:00:55,334 --> 00:00:59,774
Obviously, the greener it is, the
greener the operational carbon created

15
00:00:59,834 --> 00:01:04,194
in the power generation spaces, and
the redder it is, the more of that

16
00:01:04,195 --> 00:01:06,174
energy is derived from fossil fuels.

17
00:01:06,674 --> 00:01:09,585
No data was found for
the gray color regions.

18
00:01:10,085 --> 00:01:14,845
Real time data of the carbon intensity
can be derived from electricity maps.

19
00:01:15,374 --> 00:01:17,945
And also from other
providers such as wartime.

20
00:01:18,445 --> 00:01:23,954
If you are the curious type, I would
strongly recommend working on a personal

21
00:01:24,035 --> 00:01:29,234
pet project to check and validate the
carbon emission across regions and times

22
00:01:29,714 --> 00:01:34,899
to verify the carbon intensity, especially
if you have access to multi cloud data.

23
00:01:35,339 --> 00:01:38,609
and run processes across the globe.

24
00:01:39,109 --> 00:01:41,749
So what are we trying to
accomplish in this presentation?

25
00:01:42,250 --> 00:01:47,070
As IT personnel, we are often oblivious
to our contribution to greenhouse

26
00:01:47,070 --> 00:01:52,390
gases via the programs we write and
processes and methodologies we follow.

27
00:01:52,890 --> 00:01:58,919
So it is my intent to try and highlight
some practices to reduce and minimize our

28
00:01:58,960 --> 00:02:03,479
carbon footprint via sustainable software
development and operational practices.

29
00:02:03,919 --> 00:02:07,960
Like any other architectural principles,
such as performance improvement,

30
00:02:08,840 --> 00:02:15,030
scalability, security, cost, availability,
et cetera, that are commonly known to us.

31
00:02:15,530 --> 00:02:19,229
We've seen other industries, such as
the airline, that disclose their carbon

32
00:02:19,229 --> 00:02:24,239
emissions, and many of them offer
carbon offset options, where you can

33
00:02:24,260 --> 00:02:28,760
contribute to environmental projects to
compensate for your flight's emissions.

34
00:02:29,280 --> 00:02:32,610
However, we have not seen
a similar initiative.

35
00:02:33,200 --> 00:02:37,210
and wider option in the software
development industry, especially by IT

36
00:02:37,500 --> 00:02:40,360
management and others in the IT workspace.

37
00:02:40,860 --> 00:02:45,700
In this presentation, we will delve
into some important concepts and ways

38
00:02:46,119 --> 00:02:50,249
to control, reduce carbon emissions
by bringing changes to our day to

39
00:02:50,250 --> 00:02:51,839
day software development habits.

40
00:02:52,339 --> 00:02:58,009
All of what we've talked about so far
makes sense, but the real big question is,

41
00:02:58,369 --> 00:03:04,589
how can you and I as software developers
DevOps personal solution architects, be

42
00:03:04,589 --> 00:03:07,349
responsible and curb carbon emissions.

43
00:03:08,319 --> 00:03:13,539
What tools, techniques, and methodologies
do we have at our disposal to reduce

44
00:03:13,539 --> 00:03:18,059
our carbon footprint and measure the
carbon intensity in the software?

45
00:03:18,959 --> 00:03:23,069
thankfully, several organizations have
built and are continually enhancing

46
00:03:23,099 --> 00:03:28,109
tools and frameworks to measure software
carbon emissions, the list of which are

47
00:03:28,139 --> 00:03:30,059
provided at the bottom of this slide.

48
00:03:30,559 --> 00:03:36,579
In this presentation, we will talk briefly
about Green Software Foundation or GSF.

49
00:03:36,659 --> 00:03:41,529
GSF is an organization that came up with
a way to measure carbon intensity in your

50
00:03:41,529 --> 00:03:48,229
software via Software Carbon Intensity,
SCI, which is a specification, which

51
00:03:48,229 --> 00:03:50,400
is also by the way, an ISO standard.

52
00:03:50,900 --> 00:03:53,690
You can find more information at sci.

53
00:03:53,730 --> 00:03:54,050
greensoftware.

54
00:03:54,550 --> 00:03:55,040
foundation.

55
00:03:55,540 --> 00:03:59,130
Software carbon intensity is
the amount of soft, of carbon

56
00:03:59,340 --> 00:04:01,000
emitted per functional unit.

57
00:04:01,839 --> 00:04:05,890
A functional unit is any work,
for example, a batch job, or it

58
00:04:05,890 --> 00:04:07,310
could also be invoking an API.

59
00:04:07,810 --> 00:04:09,469
So how is SCI calculated?

60
00:04:09,969 --> 00:04:13,829
it is calculated by taking into
consideration the carbon per functional

61
00:04:13,829 --> 00:04:19,669
unit, where E represents the energy
consumed by the software system, L is the

62
00:04:19,669 --> 00:04:22,319
location based marginal carbon intensity.

63
00:04:23,029 --> 00:04:26,239
M denotes the embodied emissions
of the hardware needed to

64
00:04:26,239 --> 00:04:27,659
operate the software system.

65
00:04:28,049 --> 00:04:31,869
And R stands for the functional
unit, such as calling an API.

66
00:04:32,369 --> 00:04:36,239
This comprehensive approach
underscores the importance of

67
00:04:36,239 --> 00:04:40,020
considering both the direct energy
usage and the indirect emissions.

68
00:04:40,345 --> 00:04:44,935
from hardware in assessing the overall
carbon intensity of software programs.

69
00:04:45,435 --> 00:04:48,415
Some of the steering members
of GSF include Microsoft,

70
00:04:48,615 --> 00:04:50,485
Accenture, Intel, and UBS.

71
00:04:50,985 --> 00:04:54,465
The slide on the right is
the carbon footprint based on

72
00:04:54,475 --> 00:04:56,265
regions and cloud providers.

73
00:04:56,914 --> 00:04:59,824
This information could be
used to calculate your SCI

74
00:04:59,824 --> 00:05:00,895
score, which is important.

75
00:05:01,395 --> 00:05:05,465
By the way, on a side note, at the
GSF USIN chapter, I am a member

76
00:05:05,465 --> 00:05:09,044
of the leadership group and the
organizer for that meetup group.

77
00:05:09,045 --> 00:05:14,495
It Is the fastest programming program
the best and the most energy efficient,

78
00:05:15,035 --> 00:05:19,165
or is it a misconception continuing from
some of the architectural principles

79
00:05:19,165 --> 00:05:23,125
I mentioned in my previous slide,
what I have here is a research paper

80
00:05:23,125 --> 00:05:27,985
that compares energy, time, and memory
consumption between various programming

81
00:05:27,985 --> 00:05:33,175
languages that we use to run the exact
same algorithm on the same hardware.

82
00:05:33,175 --> 00:05:35,416
Configure configuration, by the way.

83
00:05:35,960 --> 00:05:39,740
To measure the energy consumption,
they used Intel's RAPL tool, which

84
00:05:39,740 --> 00:05:41,770
is the Running Average Power Limit.

85
00:05:42,270 --> 00:05:46,610
And RAPL is capable of providing
accurate energy estimates at

86
00:05:46,630 --> 00:05:48,400
a very fine grained level.

87
00:05:48,900 --> 00:05:53,339
While there were several other algorithmic
benchmarks that were performed across

88
00:05:53,380 --> 00:05:57,270
various programming languages, for the
sake of this presentation, I narrowed

89
00:05:57,270 --> 00:05:59,200
it down just to two to prove the point.

90
00:05:59,700 --> 00:06:04,495
The benchmarks I chose here are The
regex redux and the binary trees

91
00:06:04,545 --> 00:06:10,125
algorithm, the figures below denote
the energy and memory consumed by each

92
00:06:10,175 --> 00:06:15,755
algorithm based on the different type
of language, out of which some are

93
00:06:15,755 --> 00:06:18,185
compiled, interpreted, and VM based.

94
00:06:19,185 --> 00:06:24,045
While C consumed the least energy in
the binary trees algorithm execution,

95
00:06:24,545 --> 00:06:28,615
TypeScript consumed the least energy when
the regex redux algorithm was executed.

96
00:06:29,115 --> 00:06:29,975
Where are we going with this?

97
00:06:30,475 --> 00:06:34,345
In the previous slide now, we discussed
performance programming languages.

98
00:06:34,845 --> 00:06:38,455
does improving performance
alone solve our issue?

99
00:06:39,435 --> 00:06:44,115
What if servers and their
resources complete tasks rapidly?

100
00:06:44,934 --> 00:06:47,844
Does that solve our CO2 emissions problem?

101
00:06:48,775 --> 00:06:53,415
Unfortunately, this would
lead to underutilized CPUs and

102
00:06:53,415 --> 00:06:54,755
resources causing idle states.

103
00:06:54,755 --> 00:07:00,404
The research article PowerNAP Eliminating
server idle power highlights that in

104
00:07:00,454 --> 00:07:08,004
typical deployments, server utilization
is below 30%, yet idle servers consume

105
00:07:08,404 --> 00:07:10,974
60 percent of their peak power drop.

106
00:07:11,474 --> 00:07:14,994
Should we then consider
containerizing applications

107
00:07:15,074 --> 00:07:16,014
to maximize their performance?

108
00:07:16,454 --> 00:07:17,234
Resource efficiency?

109
00:07:17,864 --> 00:07:19,174
that seems like a viable option.

110
00:07:19,774 --> 00:07:25,554
However, according to a, according
to CAST AI study, only provisioned

111
00:07:25,794 --> 00:07:31,034
CPUs and 20 percent of memory are
actually utilized in cloud computing.

112
00:07:31,954 --> 00:07:33,674
So it's back to the
drawing board then, huh?

113
00:07:34,174 --> 00:07:37,228
We might consider implementing
some techniques derived from the

114
00:07:37,228 --> 00:07:38,534
research in the previous slide.

115
00:07:39,204 --> 00:07:39,764
Let's take a look.

116
00:07:40,264 --> 00:07:42,314
Table 1 lists the various
benchmarks performed.

117
00:07:43,124 --> 00:07:47,484
The table beside it presents the data
and their rankings based on energy,

118
00:07:47,534 --> 00:07:51,154
time, and memory consumption, while
the table on the right offers a visual

119
00:07:51,334 --> 00:07:53,564
representation of different combinations.

120
00:07:54,064 --> 00:07:57,974
Based on the optimal sets for different
combinations of objectives shown on

121
00:07:57,974 --> 00:08:00,394
the right, we can select our languages.

122
00:08:00,894 --> 00:08:04,164
This approach may help utilize
resources to their fullest potential

123
00:08:04,364 --> 00:08:06,614
at certain times, but not consistently.

124
00:08:06,614 --> 00:08:12,974
Thus the question, is the fastest, the
most energy efficient, that still remains?

125
00:08:13,044 --> 00:08:15,154
And the answer is no.

126
00:08:15,654 --> 00:08:19,044
The fastest language is not
always the most energy efficient.

127
00:08:19,544 --> 00:08:24,014
Server utilization varies significantly
based on workload and the level of

128
00:08:24,044 --> 00:08:29,354
virtualization, typically ranging from
30, from 5 to 30 percent in enterprise

129
00:08:29,434 --> 00:08:34,664
environments, while cloud service
products often achieve higher utilization.

130
00:08:35,354 --> 00:08:39,404
You might wonder why we're delving into
these details in a DevOps presentation.

131
00:08:40,234 --> 00:08:43,304
Remember, our focus is on green code.

132
00:08:43,769 --> 00:08:47,839
within DevOps, aiming to identify
coding practices that will

133
00:08:47,849 --> 00:08:51,249
lead to more sustainable and
efficient software solutions.

134
00:08:52,129 --> 00:08:58,099
Understanding these utilization metrics
helps us see the impact of our code on

135
00:08:58,099 --> 00:09:02,909
resource usage and efficiency, guiding
us toward achieving green code outcomes.

136
00:09:03,409 --> 00:09:05,969
So what can you do to
minimize carbon footprint?

137
00:09:05,969 --> 00:09:10,889
To improve server utilization,
one strategy is resource density.

138
00:09:11,874 --> 00:09:17,194
which refers to the amount of computing
power and storage capacity packed into a

139
00:09:17,194 --> 00:09:19,644
given physical space within a data center.

140
00:09:20,144 --> 00:09:26,284
High resource density means more efficient
use of space, power, and cooling, leading

141
00:09:26,284 --> 00:09:31,234
to better performance and for the C
suite folks, lower operational costs.

142
00:09:31,734 --> 00:09:35,564
And some possible ways to alleviate
these problems are by going serverless.

143
00:09:36,064 --> 00:09:40,334
Serverless functions can contribute
to high resource density Efficient

144
00:09:40,514 --> 00:09:44,344
resource utilization through dynamic
scaling where serverless functions

145
00:09:44,414 --> 00:09:49,394
dynamically scale in response to
demand, ensuring that resources are

146
00:09:49,394 --> 00:09:53,874
utilized efficiently without needing
dedicated servers running at all times.

147
00:09:54,374 --> 00:09:57,524
Serverless functions execute
in response to specific events

148
00:09:57,824 --> 00:10:01,804
and terminate once the task is
completed, minimizing idle resource

149
00:10:01,804 --> 00:10:03,724
usage, thereby reducing idle time.

150
00:10:04,224 --> 00:10:09,234
Serverless functions often run in micro
VMs or containers or custom runtime

151
00:10:09,234 --> 00:10:13,664
environments, which are lightweight
and can be densely packed on physical

152
00:10:13,664 --> 00:10:16,654
servers, optimizing space and power usage.

153
00:10:17,154 --> 00:10:21,434
Cloud providers manage the underlying
infrastructure, ensuring optimal resource

154
00:10:21,474 --> 00:10:24,174
distribution and reducing wasted capacity.

155
00:10:24,674 --> 00:10:29,574
By maximizing resource density and
minimizing idle time, serverless functions

156
00:10:29,654 --> 00:10:34,694
help reduce the overall energy consumption
and carbon footprint of data centers,

157
00:10:35,174 --> 00:10:38,854
thereby making your infrastructure
more efficient and sustainable.

158
00:10:38,934 --> 00:10:45,254
While serverless functions scale actively
based on demand, thereby reducing idle

159
00:10:45,284 --> 00:10:49,984
time to an extent, it still suffers from
the concept of cold starts, where the

160
00:10:49,984 --> 00:10:52,264
environment needs to be initialized.

161
00:10:53,224 --> 00:10:58,584
Also, according to our research, many
Azure functions are infrequently invoked,

162
00:10:59,454 --> 00:11:03,844
yet they stay running constantly,
leading to high costs and inefficiency.

163
00:11:04,694 --> 00:11:09,024
Additionally, Serverless solutions
often suffer from vendor lock in

164
00:11:09,094 --> 00:11:13,054
and inadequate support for local
development and CI CD practices.

165
00:11:13,054 --> 00:11:15,224
WASM, WASI.

166
00:11:15,724 --> 00:11:20,624
Before that, Solomon Hikes, the founder
of Docker, once said, and I quote,

167
00:11:21,414 --> 00:11:27,304
if WASM and WASI existed in 2008, we
wouldn't have needed to create Docker.

168
00:11:27,804 --> 00:11:29,064
That's how important it is.

169
00:11:29,774 --> 00:11:33,134
Web assembly on the server
is the future of computing.

170
00:11:33,209 --> 00:11:38,539
A standardized system
interface was a missing link.

171
00:11:39,349 --> 00:11:41,209
Let's hope YAC is up to the task.

172
00:11:41,979 --> 00:11:42,429
End quote.

173
00:11:42,929 --> 00:11:47,399
WebAssembly, or WASM, is a portable binary
code format that allows developers to

174
00:11:47,399 --> 00:11:51,589
run code written in multiple languages
on the web at near native speed.

175
00:11:52,519 --> 00:11:56,429
It's designed to be efficient
and fast, making it ideal for

176
00:11:56,429 --> 00:11:58,239
performance intensive applications.

177
00:11:58,739 --> 00:12:01,969
Look at the start speed of a
Wasm application compared to

178
00:12:01,969 --> 00:12:03,859
an AWS serverless function.

179
00:12:04,359 --> 00:12:08,339
52 milliseconds versus 250 milliseconds.

180
00:12:09,219 --> 00:12:12,989
Now we've seen some great advantages
of serverless, but we also saw

181
00:12:13,239 --> 00:12:15,939
that serverless functions require
a cold start from time to time.

182
00:12:16,439 --> 00:12:18,999
This is where Wasm comes to the rescue.

183
00:12:19,499 --> 00:12:22,089
Wasm does not have a
concept of a cold start.

184
00:12:22,589 --> 00:12:23,989
WebAssembly system interface.

185
00:12:24,019 --> 00:12:26,919
WASI is a modular system
interface for WebAssembly.

186
00:12:27,419 --> 00:12:31,389
It provides a standardized set of
APIs that WebAssembly modules can

187
00:12:31,389 --> 00:12:36,579
use to access system resources like
the file system, network, and time.

188
00:12:37,279 --> 00:12:41,359
This means you can run WebAssembly
code outside of a browser on

189
00:12:41,439 --> 00:12:43,229
any platform that supports WASI.

190
00:12:44,109 --> 00:12:49,339
In a sense, WASM is about running
high performance code on the web, and

191
00:12:49,339 --> 00:12:53,839
WASI is about making the code portable
and able to interact with system

192
00:12:53,839 --> 00:12:55,759
resources across different environments.

193
00:12:56,259 --> 00:13:00,279
Wasm also provides a stringent
security environment by running

194
00:13:00,339 --> 00:13:02,359
code in a sandboxed environment.

195
00:13:02,859 --> 00:13:07,399
Wasm implementation can thrive on edge
devices such as smart thermostats,

196
00:13:08,259 --> 00:13:13,449
security cameras, wearable health
monitors, smartphones, and tablets that

197
00:13:13,449 --> 00:13:15,969
run apps and processes data locally.

198
00:13:16,469 --> 00:13:17,099
So what's next?

199
00:13:17,599 --> 00:13:22,139
Coming up now is GraalVM, which
has several similarities to Wasm,

200
00:13:22,449 --> 00:13:25,269
except that GraalVM uses JVM.

201
00:13:25,589 --> 00:13:28,519
Whereas WASM uses the WASM runtime.

202
00:13:28,519 --> 00:13:28,919
Grand

203
00:13:29,419 --> 00:13:34,579
VM is a high performance runtime
supporting multiple languages and

204
00:13:34,579 --> 00:13:40,259
execution modes designed to enhance
application performance through advanced

205
00:13:40,329 --> 00:13:46,169
optimization techniques by compiling Java
applications into native executables using

206
00:13:46,169 --> 00:13:48,619
the ahead of time compilation strategy.

207
00:13:49,549 --> 00:13:54,599
Grand VM ensures instant startup
and reduced compute resource usage.

208
00:13:55,099 --> 00:13:59,349
It minimizes CPU and memory consumption
leading to lower power consumption

209
00:13:59,469 --> 00:14:00,949
and reduced carbon emissions.

210
00:14:01,639 --> 00:14:06,379
Additionally, GraalVM's native
images eliminate the need for JIT,

211
00:14:06,649 --> 00:14:11,049
just in time compilation, allowing
applications to run efficiently from

212
00:14:11,049 --> 00:14:14,119
the start without the warm up overhead.

213
00:14:14,619 --> 00:14:19,059
Moving on, we have looked at some
possible application development

214
00:14:19,059 --> 00:14:20,349
and programming strategies.

215
00:14:20,349 --> 00:14:23,529
Here in this slide, we will
discuss some of the practices

216
00:14:23,529 --> 00:14:24,749
from an operations standpoint.

217
00:14:25,249 --> 00:14:29,439
DevOps can play a significant role in
reducing carbon emissions by promoting

218
00:14:29,659 --> 00:14:33,919
efficient and sustainable practices in
software development and operations.

219
00:14:34,629 --> 00:14:35,969
Here are some ways DevOps can help.

220
00:14:36,469 --> 00:14:41,459
While there are many strategies that are
helpful, constant monitoring of resources,

221
00:14:42,029 --> 00:14:47,509
tweaking the build and deploy via CI CD
pipelines to be scheduled at the time when

222
00:14:47,509 --> 00:14:51,239
the cloud providers consume energy from
greener sources would definitely help.

223
00:14:51,739 --> 00:14:55,619
Using tools to track and report carbon
emissions through automated solutions.

224
00:14:56,119 --> 00:14:59,889
efficient resource utilization
by automated scaling and load

225
00:14:59,899 --> 00:15:03,919
balancing, thereby preventing
over provisioning and waste.

226
00:15:04,819 --> 00:15:07,449
Also, cloud selection
plays an important role.

227
00:15:08,119 --> 00:15:12,319
Maybe consider shifting to a cloud
provider that uses renewable energy

228
00:15:12,449 --> 00:15:15,319
and have energy efficient data centers.

229
00:15:15,819 --> 00:15:19,629
By incorporating green software
practices, where we follow principles

230
00:15:19,629 --> 00:15:22,089
to minimize carbon emissions and energy.

231
00:15:22,854 --> 00:15:27,434
Use for example, as an example,
checking the SCI score during the

232
00:15:27,444 --> 00:15:31,394
build and deploy and suggesting
changes to better reduce the SCI score.

233
00:15:31,894 --> 00:15:35,754
It could also be collaboration
and innovation where collaborating

234
00:15:36,144 --> 00:15:40,414
with suppliers and customers on
joint initiatives and continuously

235
00:15:40,414 --> 00:15:44,214
seeking innovative ways to
improve energy efficiency and

236
00:15:44,224 --> 00:15:45,684
reduce environmental impact.

237
00:15:46,184 --> 00:15:50,904
By integrating these practices,
DevOps can help organizations reduce

238
00:15:51,669 --> 00:15:55,189
their carbon footprint and contribute
to a more sustainable future.

239
00:15:55,689 --> 00:16:01,399
In conclusion, I would like to say that
while not a single language or approach or

240
00:16:01,399 --> 00:16:07,449
operational style will render a complete
100 percent carbon free footprint, a

241
00:16:07,449 --> 00:16:12,574
combination of what we've discussed in
this presentation will surely reduce

242
00:16:12,574 --> 00:16:14,409
the carbon emission and our footprint.

243
00:16:14,909 --> 00:16:17,729
With that, I conclude
and thanks for your time.

