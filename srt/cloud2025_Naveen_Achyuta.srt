1
00:00:00,150 --> 00:00:00,919
Hello everyone.

2
00:00:01,300 --> 00:00:06,690
My name is Naveen and I work as a Senior
Network Reliability Engineer and today I'm

3
00:00:06,690 --> 00:00:12,730
going to talk about how we can optimize
Kubernetes networking with Selium and BGP.

4
00:00:13,230 --> 00:00:15,819
This is the agenda of
my presentation today.

5
00:00:16,030 --> 00:00:18,460
We're going to start with
an introduction to Selium.

6
00:00:18,520 --> 00:00:22,950
We're going to talk about BGP and how
you can integrate BGP with Selium.

7
00:00:23,430 --> 00:00:26,539
We're going to go through two use
cases and we're going to end the

8
00:00:26,539 --> 00:00:28,930
presentation with some key takeaways.

9
00:00:29,430 --> 00:00:31,640
Let's start with what is Seleum.

10
00:00:32,140 --> 00:00:37,890
Seleum is an open source system and
it uses eBPF based networking security

11
00:00:37,890 --> 00:00:42,659
and observative layer for different
cloud environments like Kubernetes

12
00:00:42,730 --> 00:00:44,700
and also major cloud providers.

13
00:00:45,080 --> 00:00:48,420
So if you see on your right,
there's a Kubernetes node and Seleum

14
00:00:48,420 --> 00:00:55,100
agent will be deployed In it, it
uses Daemonset to deploy, Seleum.

15
00:00:55,120 --> 00:00:58,410
So it's deployed across all
the nodes of your cluster.

16
00:00:58,910 --> 00:01:01,220
what are the benefits of using Seleum?

17
00:01:01,579 --> 00:01:03,589
the first one is performance.

18
00:01:04,029 --> 00:01:06,549
Now, you can use eBPF as I mentioned.

19
00:01:06,889 --> 00:01:13,304
It's basically a small programs that
you can embed into your linux kernel

20
00:01:13,354 --> 00:01:17,734
and you manipulate to increase your
performance and do Other things that

21
00:01:17,734 --> 00:01:23,024
can benefit your service So let's say
if you can apply network policies and

22
00:01:23,024 --> 00:01:26,874
so you don't have to rely on ip tables
and which will significantly improve

23
00:01:26,894 --> 00:01:32,439
the performance of your service And
the second one is network security.

24
00:01:32,869 --> 00:01:37,259
Now you can have more control,
granular control for your application.

25
00:01:37,729 --> 00:01:40,820
you can provide network
policies as I mentioned before.

26
00:01:41,100 --> 00:01:44,919
And, You can say which services
can talk to each other.

27
00:01:45,369 --> 00:01:49,969
So for example, service A can talk
to service B, but service A cannot

28
00:01:49,979 --> 00:01:55,099
talk to service C. So it leverages
the concept of zero trust and gives

29
00:01:55,099 --> 00:01:58,009
you the exact access that you need.

30
00:01:58,829 --> 00:02:00,759
The third one is scalability.

31
00:02:00,839 --> 00:02:06,059
Now, with Celium, and we're going to
talk more about this in the next few

32
00:02:06,059 --> 00:02:11,649
slides also, you can leverage PGP to
scale your services across multiple

33
00:02:11,649 --> 00:02:16,349
clusters and multiple clouds or regions.

34
00:02:16,849 --> 00:02:19,129
And the last one is observability.

35
00:02:19,599 --> 00:02:27,609
Euclidean uses Hubble to capture metrics
from your services, your cluster, so

36
00:02:27,609 --> 00:02:32,469
that you can use it when there is any
connectivity issue and, or any other issue

37
00:02:32,479 --> 00:02:37,959
you have, you can go to this metrics and
figure out the root cause of your, issues.

38
00:02:38,459 --> 00:02:40,539
So let's talk about BGP now.

39
00:02:41,039 --> 00:02:43,079
What is BGP?

40
00:02:43,079 --> 00:02:45,069
BGP is a Border Gateway Protocol.

41
00:02:45,409 --> 00:02:49,289
It is a routing protocol which
can be used to exchange routing

42
00:02:49,299 --> 00:02:51,219
information between networks.

43
00:02:51,719 --> 00:02:55,339
different companies, if they want to
talk to each other, they can have BGP

44
00:02:55,349 --> 00:03:01,369
session between each other to exchange
routes or within a large, company,

45
00:03:01,369 --> 00:03:06,769
you can have multiple networks and
they can talk to each other using BGP.

46
00:03:06,829 --> 00:03:10,379
So if you look at the diagram here,
you have router one and router two.

47
00:03:11,049 --> 00:03:15,329
Each network is uniquely
defined using a number.

48
00:03:15,694 --> 00:03:18,054
Which is called autonomous system number.

49
00:03:18,384 --> 00:03:23,404
So in this case if you see say 65,
001 and 65, 002 Let's say there

50
00:03:23,414 --> 00:03:27,454
are two different networks now to
exchange routes to communicate with

51
00:03:27,454 --> 00:03:31,344
each other They need to create a bgp
session and exchange those routes.

52
00:03:31,644 --> 00:03:37,354
Let me give you an example so that it
makes more sense to you now Let's say

53
00:03:37,354 --> 00:03:43,334
you are part of an ISP and, you're home
and you have an ISP that you're connected

54
00:03:43,344 --> 00:03:45,644
to and you want to access Google.

55
00:03:45,884 --> 00:03:46,374
com.

56
00:03:46,944 --> 00:03:51,664
Now, how will your ISP
know how to reach Google.

57
00:03:51,954 --> 00:03:52,394
com?

58
00:03:53,034 --> 00:03:59,114
your ISP needs to have, a session, a
BGP session with your, with Google.

59
00:03:59,500 --> 00:04:06,089
So that the Google subnets can be
advertised to the ISP and now you

60
00:04:06,089 --> 00:04:11,299
as a user of that ISP can go to
Google server, get your website.

61
00:04:11,759 --> 00:04:15,799
And that's how the whole internet is
connected to each other using BGP.

62
00:04:16,299 --> 00:04:19,449
in this case, how do
we use BGP with Celium?

63
00:04:20,064 --> 00:04:23,874
let me show you the diagram first, and
then we can talk about the benefits.

64
00:04:24,374 --> 00:04:28,064
If you see on your left, you
have Kubernetes node, which is

65
00:04:28,064 --> 00:04:35,374
running Seleum, and it will have
a Seleum agent running GoBGP.

66
00:04:36,174 --> 00:04:42,674
GoBGP is an open source system
that is written in Go, and it

67
00:04:42,734 --> 00:04:46,794
leverages that to create a BGP
session with a network device.

68
00:04:47,294 --> 00:04:50,474
And if you see on your right, you
have the network device is talking

69
00:04:50,474 --> 00:04:56,734
to the CEM, CELIUM agent, which is
running GoBGP and running a BGP server.

70
00:04:57,234 --> 00:05:01,144
And your subnets from, let's say,
pods can be advertised to your

71
00:05:01,324 --> 00:05:03,144
network devices through CELIUM.

72
00:05:03,644 --> 00:05:04,734
what are the benefits?

73
00:05:05,204 --> 00:05:07,894
Like, why are we doing BGP
integration with Zillium?

74
00:05:08,284 --> 00:05:10,464
it will enhance your redundancy.

75
00:05:10,884 --> 00:05:14,354
Now, you will have network
availability and fault tolerance.

76
00:05:14,864 --> 00:05:19,404
If you, have a service across
clusters, it's advertising the same IP.

77
00:05:19,684 --> 00:05:23,559
If one cluster goes down, you
can Failover to the other one.

78
00:05:23,569 --> 00:05:27,909
We're going to talk a lot about this
during the when I talk about the use

79
00:05:27,909 --> 00:05:34,929
cases The second one is direct service
exposure now your external services

80
00:05:35,289 --> 00:05:40,229
They know about the subnets you have
in your Kubernetes cluster and can talk

81
00:05:40,229 --> 00:05:45,589
to it directly without having multiple
components in between, let's say, for

82
00:05:45,589 --> 00:05:52,179
example, NAT, which you can increase
the latency of your communication.

83
00:05:53,099 --> 00:05:54,889
Third one is reduce latency.

84
00:05:54,890 --> 00:06:02,709
Your BGP helps you with something called
regional affinity and If you have your

85
00:06:02,709 --> 00:06:09,699
service running in, let's say, US and
Asia and you have a user in Asia, your

86
00:06:10,339 --> 00:06:15,069
request goes to the nearest cluster
and uses the shortest path leveraged

87
00:06:15,699 --> 00:06:18,489
by BGP to go to the nearest cluster.

88
00:06:18,490 --> 00:06:22,309
So now you have reduced latency.

89
00:06:22,309 --> 00:06:24,289
The last one is scalability.

90
00:06:25,019 --> 00:06:29,409
You can, BGP can handle
millions of routes.

91
00:06:29,819 --> 00:06:33,789
So if you have, even though if
you have large scale deployments

92
00:06:33,789 --> 00:06:39,109
with thousands of subnets being
advertised, BGP can easily handle it.

93
00:06:39,469 --> 00:06:44,529
So this is a perfect, protocol
to leverage, to advertise

94
00:06:44,899 --> 00:06:47,249
routes from Kubernetes clusters.

95
00:06:47,749 --> 00:06:52,009
Now let's go through some use
cases of using BGP with Xelian.

96
00:06:52,010 --> 00:06:56,449
The first one is direct port
to external communication.

97
00:06:56,839 --> 00:07:02,079
On top you see a traditional SNAT
approach where you have pods on your

98
00:07:02,079 --> 00:07:10,649
left and they are converted, translated
into the node IP and then it's

99
00:07:10,649 --> 00:07:13,359
advertised to the external services.

100
00:07:13,369 --> 00:07:15,549
In this case, it's legacy payment system.

101
00:07:16,049 --> 00:07:23,049
And, in the bottom you have Celium and
BGP approach where we are advertising all

102
00:07:23,049 --> 00:07:27,289
the pod IPs directly to external services.

103
00:07:27,289 --> 00:07:30,609
So the legacy payment system
knows about all the subnets and

104
00:07:30,609 --> 00:07:32,469
can communicate directly with it.

105
00:07:33,219 --> 00:07:33,979
the boards.

106
00:07:34,869 --> 00:07:40,599
Help you to communicate then why we
should be prefer CLM with BGP approach

107
00:07:41,099 --> 00:07:46,019
the benefit is now you can preserve
the original pod IPs throughout the

108
00:07:46,019 --> 00:07:52,349
communication Which will simplify network
troubleshooting significantly If you have

109
00:07:52,389 --> 00:07:58,409
connectivity issue For a service within
the cluster with an external, let's say,

110
00:07:58,409 --> 00:08:03,179
legacy payment system, you know exactly
which subnet you have to troubleshoot

111
00:08:03,179 --> 00:08:05,009
or which part IP to troubleshoot.

112
00:08:05,429 --> 00:08:11,249
Instead of figuring out which service
behind the NAD is having an issue

113
00:08:11,309 --> 00:08:16,004
going through it and will take so
much time to troubleshoot, you will

114
00:08:16,004 --> 00:08:21,129
have better security auditing and
you know the exact parcel that is

115
00:08:21,129 --> 00:08:22,869
communicating with the external service.

116
00:08:23,739 --> 00:08:27,069
So you can order each
service individually.

117
00:08:27,479 --> 00:08:31,109
And now you can also have
security, security troubleshooting.

118
00:08:31,209 --> 00:08:37,239
If a security policy was misconfigured,
you exactly know which pod IP is

119
00:08:37,239 --> 00:08:40,729
having connectivity issue, and
you apply, you fix the policy so

120
00:08:40,729 --> 00:08:42,459
that everything is back to normal.

121
00:08:43,299 --> 00:08:46,719
And the last one is an obvious
one, which is reduce latency.

122
00:08:47,539 --> 00:08:54,344
Now, if you remember, The top approach
has NAT implemented in between.

123
00:08:54,654 --> 00:08:58,604
in case of BGP with Celium, you
don't have any NAT overhead, which

124
00:08:58,604 --> 00:09:02,664
will significantly reduce your
latency and improve your performance.

125
00:09:03,164 --> 00:09:06,764
The second case is multi
cluster load balancing.

126
00:09:07,104 --> 00:09:10,954
I know there's a lot of things going on
here, but I'll try to explain it to you.

127
00:09:11,909 --> 00:09:15,759
If you see, we have a U.
S. cluster, a Kubernetes U.

128
00:09:15,759 --> 00:09:19,899
S. cluster, you have Kubernetes APAC
cluster, and you have EU cluster.

129
00:09:20,399 --> 00:09:24,779
Let's say you have your streaming service
deployed in each of these clusters.

130
00:09:25,049 --> 00:09:30,509
They're going to be
advertising 10, 100, 1 to 10.

131
00:09:30,509 --> 00:09:33,189
This IP is being advertised
from each of these clusters.

132
00:09:33,689 --> 00:09:40,439
And we're going to be using BGP to
advertise these routes to the network.

133
00:09:41,279 --> 00:09:46,449
Let's say you have a U. S. client
and it's requesting, let's say in

134
00:09:46,449 --> 00:09:53,899
this case it's Netflix, and you want
to play A movie, it will create a,

135
00:09:54,499 --> 00:09:56,459
the client will create a request.

136
00:09:56,949 --> 00:09:59,449
It will go to, it will try
to find the shortest path.

137
00:10:00,259 --> 00:10:02,329
And in this case, it's US cluster.

138
00:10:02,849 --> 00:10:04,919
So that will be your primary path.

139
00:10:05,799 --> 00:10:06,989
But what if that fails?

140
00:10:07,479 --> 00:10:08,649
So you need a backup.

141
00:10:08,689 --> 00:10:11,559
So in this case, if you see
here, this is the backup path.

142
00:10:12,539 --> 00:10:18,489
Going to the eu cluster So each cluster
will have its own primary and backup

143
00:10:18,489 --> 00:10:24,639
path And if let's say us cluster goes
down us client can go to eu Yes, the

144
00:10:24,659 --> 00:10:29,659
rare the latency will increase but
the service is still running which

145
00:10:29,659 --> 00:10:37,069
is super critical and you still The
client can still watch the movie What

146
00:10:37,569 --> 00:10:40,759
are the benefits of using BGP here?

147
00:10:40,759 --> 00:10:43,369
now you have native load
balancing without external LPs.

148
00:10:43,939 --> 00:10:48,569
You don't need to have another load
balancer to distribute the traffic.

149
00:10:48,599 --> 00:10:52,279
The network itself can take
care of load balancing for you.

150
00:10:52,929 --> 00:10:56,079
The second one is automatic
failover between clusters.

151
00:10:56,289 --> 00:11:02,379
As I mentioned now if us goes down your
request can go to any other cluster

152
00:11:03,169 --> 00:11:05,519
Reduce latency due to regional affinity.

153
00:11:05,569 --> 00:11:09,549
We talked about this before so we're
going to talk about it again If you have

154
00:11:09,549 --> 00:11:14,819
a us client talking to us cluster If you
send a request, it will always try to

155
00:11:14,819 --> 00:11:20,559
find the shortest path go to us cluster
And, you will have reduced latency.

156
00:11:20,589 --> 00:11:24,329
If that goes down for some
reason, then we will go to AU.

157
00:11:24,829 --> 00:11:27,599
Part optimization based on BGP metrics.

158
00:11:27,679 --> 00:11:35,359
BGP has a lot of ways to manipulate, your
path to your, service in the cluster.

159
00:11:35,949 --> 00:11:40,379
And, for example, if you have let's say
routes coming from, if you look at the

160
00:11:40,379 --> 00:11:47,039
example from here, if you have, let's say
two backups, you have the primary as US

161
00:11:47,039 --> 00:11:53,159
cluster, EU, and APAC of backups, what if
I want to prefer the pack of EU because

162
00:11:53,159 --> 00:11:58,709
it's the newest one, and then apac, so
I can have some metrics manipulated.

163
00:11:59,199 --> 00:12:02,959
So that the backup is EU
and then it could be APAC.

164
00:12:03,459 --> 00:12:09,979
this use case, one of the concerns is
you can have imbalance of load balancing.

165
00:12:10,479 --> 00:12:14,409
What if you have, let's say
your clusters are spread across

166
00:12:14,439 --> 00:12:18,579
regions and one of the clusters.

167
00:12:19,124 --> 00:12:24,874
It's getting more traffic now because of
that, you're going to have more traffic

168
00:12:24,904 --> 00:12:31,164
going to that one specific cluster
instead of distributing across clusters.

169
00:12:31,784 --> 00:12:36,854
So you have to be very careful with
it and test it holistically to ensure

170
00:12:37,294 --> 00:12:39,234
that you don't face this issue.

171
00:12:39,734 --> 00:12:43,264
So let's end the presentation
with some key takeaways.

172
00:12:44,009 --> 00:12:48,829
The first one is plan your IP
addressing as early as possible.

173
00:12:49,649 --> 00:12:54,759
If you, throughout this presentation,
you must have realized that, we have,

174
00:12:54,769 --> 00:12:56,769
we want some subnets to be advertised.

175
00:12:57,129 --> 00:13:00,539
but we don't want some of them,
advertised to the network.

176
00:13:00,869 --> 00:13:06,429
you, this can become complex when you
have very large, Kubernetes clusters.

177
00:13:06,734 --> 00:13:08,264
Spread across regions.

178
00:13:08,744 --> 00:13:14,264
So you have to plan everything properly
to ensure, that you don't, complicate

179
00:13:14,264 --> 00:13:17,204
this too much and create issues.

180
00:13:18,014 --> 00:13:21,644
The second one is start
simple and then expand.

181
00:13:22,214 --> 00:13:24,284
Start with a single cluster.

182
00:13:24,344 --> 00:13:25,814
Have a service running.

183
00:13:26,084 --> 00:13:30,104
Advertise that to your network
and see if it's able to, you know.

184
00:13:30,604 --> 00:13:35,694
if your external clients are able to talk
to your service directly and try to have

185
00:13:35,884 --> 00:13:40,344
deployed across nodes and then, shut down
one of the nodes and see what happens.

186
00:13:40,404 --> 00:13:41,744
Is it able to fail over?

187
00:13:42,224 --> 00:13:47,334
Have stress test after doing all those
tests and ensuring that you are able

188
00:13:47,334 --> 00:13:51,824
to do it in production, then start
thinking about how you can have multi

189
00:13:51,824 --> 00:13:57,084
cluster topologies or multi region
topologies and leverage BGP for that.

190
00:13:57,584 --> 00:14:02,624
And the last one is obviously security
no matter what you're doing in technology

191
00:14:02,644 --> 00:14:09,004
security is super critical in this case
you can have Security for bgp sessions.

192
00:14:09,044 --> 00:14:13,714
You can have something as simple as a
password to ensure those bgp sessions

193
00:14:13,724 --> 00:14:21,149
are secure And always use raw filters To
avoid advertising unnecessary networks.

194
00:14:21,469 --> 00:14:25,559
If you have a network within your cluster
that you don't want to advertise, and

195
00:14:25,559 --> 00:14:30,709
let's say someone leaked it by mistake,
then you need to have some filters in

196
00:14:30,709 --> 00:14:35,349
your network, ensuring that you just
drop it, and not create an outage.

197
00:14:35,809 --> 00:14:40,349
it's super critical to, go through
these key takeaways, and ensure that,

198
00:14:40,479 --> 00:14:43,079
it doesn't become complicated, and, all.

199
00:14:44,019 --> 00:14:49,749
It doesn't create an outage for you So
with that Thank you so much for listening

200
00:14:49,749 --> 00:14:55,099
to my presentation I hope this was
useful if you have any questions You can

201
00:14:55,099 --> 00:14:59,459
reach out to me on linkedin and i'll be
more than happy to help you Thank you

