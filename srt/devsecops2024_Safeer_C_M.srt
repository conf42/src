1
00:00:00,210 --> 00:00:00,480
Hello, everyone.

2
00:00:00,910 --> 00:00:04,330
thank you for joining me
at DevSecOps 2024 by CON42.

3
00:00:04,830 --> 00:00:11,279
In this talk, we will be discussing about
Software Bill of Materials, aka SBOMs.

4
00:00:11,280 --> 00:00:14,270
But before we dive into the topic, let
us get the introductions out of the way.

5
00:00:14,770 --> 00:00:15,559
My name is Safeer.

6
00:00:15,560 --> 00:00:19,680
I have been in the SRE
and DevOps 19 years.

7
00:00:19,910 --> 00:00:23,680
I'm an author, speaker, and an ambassador
for the Companies Delivery Foundation.

8
00:00:23,770 --> 00:00:25,949
All right.

9
00:00:26,449 --> 00:00:29,879
So let us set the stage by recapping
our understanding of DevSecOps.

10
00:00:30,379 --> 00:00:34,789
The DevSecOps framework improves SDLC by
detecting vulnerabilities throughout the

11
00:00:34,789 --> 00:00:36,779
software development and delivery process.

12
00:00:37,279 --> 00:00:41,299
It merges the security into DevOps
practices and shifts the security left.

13
00:00:42,139 --> 00:00:43,979
So what are the benefits of DevSecOps?

14
00:00:43,980 --> 00:00:47,269
You can catch the software vulnerabilities
early, ensure that you have regulatory

15
00:00:47,269 --> 00:00:48,365
compliances, and improve performance.

16
00:00:48,365 --> 00:00:50,284
So what are the benefits of DevSecOps?

17
00:00:51,254 --> 00:00:54,404
build a security aware
engineering culture, and

18
00:00:54,404 --> 00:00:55,764
develop new features securely.

19
00:00:56,264 --> 00:01:00,684
When we are talking about security
in SDLC, a key concept we should

20
00:01:00,684 --> 00:01:02,274
learn about is software supply chain.

21
00:01:02,275 --> 00:01:08,300
Now the term supply chain refers
to people and process for making

22
00:01:08,300 --> 00:01:11,734
and distributing a product,
typically applied to manufacturing.

23
00:01:12,234 --> 00:01:16,524
In the context of software supply
chain, It includes people, processes,

24
00:01:16,564 --> 00:01:20,634
and software components that touch
your software development lifecycle,

25
00:01:20,794 --> 00:01:24,204
starting from the source code, all the
way up to your software deployment.

26
00:01:24,704 --> 00:01:26,944
Now, what makes software
supply chain special?

27
00:01:27,444 --> 00:01:29,934
Almost no modern software products
are built from the ground.

28
00:01:30,434 --> 00:01:32,704
They are always built on
top of existing software,

29
00:01:33,424 --> 00:01:36,884
predominantly open source software.

30
00:01:36,964 --> 00:01:40,119
Now, it is this that Dependence
on open source software that

31
00:01:40,119 --> 00:01:42,059
makes it both powerful and work.

32
00:01:42,559 --> 00:01:46,759
software supply chain is a complex
mix of technology, people, process.

33
00:01:47,579 --> 00:01:49,819
And that introduces a large
number of touch points.

34
00:01:50,319 --> 00:01:54,579
And for threat actors, these touch
points become the attack surfaces to

35
00:01:54,639 --> 00:01:56,579
infiltrate the software supply chain.

36
00:01:57,079 --> 00:02:00,599
Now, a crucial issue with supply
chain is that, this chain of open

37
00:02:00,599 --> 00:02:04,449
source dependencies are outside
the control of the software

38
00:02:04,449 --> 00:02:07,709
developers and the organizations
that build the final product.

39
00:02:08,209 --> 00:02:11,599
Now, this limits their ability
to improve the security of these

40
00:02:11,599 --> 00:02:15,359
dependencies and the infrastructure
that holds these dependencies up to us.

41
00:02:15,859 --> 00:02:20,854
The reason why, supply chain security is
very critical is that Compromising, even

42
00:02:20,854 --> 00:02:25,684
a small component in this ecosystem can
have a wider and catastrophic impact.

43
00:02:26,184 --> 00:02:30,574
To drive this point home, let us look at
a few attacks on software supply chain.

44
00:02:31,074 --> 00:02:34,329
So there are some, surface, so these
are some software supply chain attacks.

45
00:02:34,729 --> 00:02:38,779
there are actually a lot more,
I just checked a few of them to

46
00:02:38,779 --> 00:02:40,114
show you the variety of attacks.

47
00:02:40,614 --> 00:02:42,774
So first one is even stream.

48
00:02:43,354 --> 00:02:47,314
In 2018, so an attacker published
a new NPM package called

49
00:02:47,744 --> 00:02:49,864
FlatMapStream with no malicious code.

50
00:02:50,364 --> 00:02:54,194
A month later, it was added as a
dependency of the EventStream package.

51
00:02:55,164 --> 00:02:59,234
And another month later, a malicious
version of the FlatMapStream, which

52
00:02:59,234 --> 00:03:02,184
was a dependency, was published.

53
00:03:02,184 --> 00:03:07,044
And the issue was detected only
after 8 million downloads of the

54
00:03:07,044 --> 00:03:12,284
affected software happened, and it
infected a large number of systems.

55
00:03:13,664 --> 00:03:17,004
in 2020, SolarWinds attacked.

56
00:03:17,064 --> 00:03:20,884
what happened was, attackers
injected a backdoor into the

57
00:03:20,884 --> 00:03:22,204
software update of SolarWinds.

58
00:03:22,205 --> 00:03:28,344
Now, SolarWinds is a networking
software, that is used by, big companies,

59
00:03:28,434 --> 00:03:29,604
as well as government agencies.

60
00:03:30,104 --> 00:03:33,604
Now this backdoor allowed attackers
remote access to thousands of systems

61
00:03:33,604 --> 00:03:38,554
across the world from every client who
would have used the SolarWinds software.

62
00:03:39,054 --> 00:03:42,014
So the affected organizations
included Intel, Microsoft,

63
00:03:42,024 --> 00:03:44,464
Cisco, and even a number of U.

64
00:03:44,464 --> 00:03:44,604
S.

65
00:03:44,604 --> 00:03:45,484
government agencies.

66
00:03:45,984 --> 00:03:47,434
The third one is Kaseya.

67
00:03:47,934 --> 00:03:51,394
So attackers compromised this
platform, infecting with ransomware,

68
00:03:51,734 --> 00:03:54,554
which then deployed together
with an update of the software.

69
00:03:55,054 --> 00:03:59,924
Now this ransomware spread to thousands
of customer environments, and, attackers

70
00:04:00,554 --> 00:04:05,644
were able to extort more than 70
million from the effect customers code.

71
00:04:05,644 --> 00:04:05,974
Code.

72
00:04:06,814 --> 00:04:10,954
So an attacker infected the code
bash up letter, which is, part of

73
00:04:10,954 --> 00:04:12,214
a code coverage testing tool that.

74
00:04:12,894 --> 00:04:14,454
automatically sends customer reports.

75
00:04:15,314 --> 00:04:19,434
By injecting malicious code into
this grid, the attacker was able

76
00:04:19,434 --> 00:04:23,944
to eavesdrop on the quad core
servers and steal customer data.

77
00:04:24,444 --> 00:04:26,924
And the most recent one
is exit utils backdoor.

78
00:04:27,424 --> 00:04:32,274
So malicious backdoor in the exit
linux utility was created, which is

79
00:04:32,304 --> 00:04:36,824
giving backdoor access to And that
backward actually, gave remote,

80
00:04:36,904 --> 00:04:41,234
execution privileges over some versions
of OpenACCESS on the target systems.

81
00:04:41,734 --> 00:04:45,074
Now, these are like, again, very
few number of attacks that I have

82
00:04:45,074 --> 00:04:48,574
quoted here, but this should give
you, an idea about the variety

83
00:04:48,574 --> 00:04:50,814
and the impact of such attacks.

84
00:04:51,314 --> 00:04:55,584
So, test points are, these are the test
points where the attackers can exploit

85
00:04:56,164 --> 00:04:57,834
vulnerable parts of the supply chains.

86
00:04:58,494 --> 00:05:02,504
And as you can see, from the
list of the left side, it covers

87
00:05:02,504 --> 00:05:03,654
the entirety of your SDLC.

88
00:05:04,154 --> 00:05:06,184
Now on the right side, what you're
seeing the attack vectors and you

89
00:05:06,184 --> 00:05:09,434
know how an attacker can exploit
some of the vulnerabilities.

90
00:05:10,154 --> 00:05:13,014
for example, third party
components, so malicious actors can.

91
00:05:14,004 --> 00:05:16,794
Target third party components like
libraries or frameworks and search for

92
00:05:16,794 --> 00:05:19,494
opportunities to insert malware into them.

93
00:05:19,994 --> 00:05:21,174
Compromise development tools.

94
00:05:21,674 --> 00:05:24,814
Again, tools like compilers, build
systems or other development tools.

95
00:05:25,654 --> 00:05:27,386
Again, try to, inject malware.

96
00:05:27,386 --> 00:05:28,468
Developer accounts.

97
00:05:28,468 --> 00:05:30,632
This is quite common.

98
00:05:30,632 --> 00:05:36,042
Many users can try to exploit
vulnerabilities within developer accounts.

99
00:05:36,672 --> 00:05:40,562
Could be in, hosted core platforms
like GitHub or GitLab Compromise

100
00:05:40,562 --> 00:05:41,582
Software, updating processor.

101
00:05:42,422 --> 00:05:46,192
Now, again, actors frequent target,
this kind of in, software updating

102
00:05:46,192 --> 00:05:50,212
processors to, compromise and insert
malware and into software updates.

103
00:05:51,112 --> 00:05:57,102
Social engineering, again, attackers
can try to, contact employees and, make

104
00:05:57,102 --> 00:06:01,262
them in order to, Give up their security
credentials using social engineering.

105
00:06:01,762 --> 00:06:04,822
So how do we prevent and
mitigate this kind of attacks?

106
00:06:05,322 --> 00:06:06,122
four phases of it.

107
00:06:06,172 --> 00:06:08,242
One is protecting the source
code integrity, because that's

108
00:06:08,242 --> 00:06:09,462
where everything starts.

109
00:06:09,862 --> 00:06:11,642
code signing can protect
source code integrity.

110
00:06:11,822 --> 00:06:14,932
there are a number of standards
for signing and attestation

111
00:06:14,932 --> 00:06:15,902
of code and artifacts.

112
00:06:16,103 --> 00:06:21,172
Now, mitigating dependencies, requires
that you know about the dependencies

113
00:06:21,272 --> 00:06:24,182
of your software and continuously
monitor for the vulnerabilities.

114
00:06:24,682 --> 00:06:29,272
And for, your build and deployment
infrastructure, again, improve the

115
00:06:29,272 --> 00:06:35,592
security in terms of, whether it's exposed
to the internet or is there any opening

116
00:06:35,592 --> 00:06:37,252
points which, attackers can exploit.

117
00:06:37,872 --> 00:06:40,052
Things like that, securing the
entire infrastructure is important.

118
00:06:40,512 --> 00:06:44,332
It should always be a high
priority for DevSecOps and DevOps.

119
00:06:44,832 --> 00:06:51,122
So far from whatever we discussed so
far, one key takeaway is that a number

120
00:06:51,132 --> 00:06:55,522
of DevOps and DevSecOps responsibilities
revolve around the software supply chain.

121
00:06:55,522 --> 00:06:58,882
And protecting the supply chain will be
a major part of DevSecOps responsibility.

122
00:06:59,382 --> 00:07:03,542
And one of the most important steps
in protecting supply chain is to

123
00:07:03,572 --> 00:07:05,647
understand What is in your software?

124
00:07:05,647 --> 00:07:07,467
Because if you don't know
what is in your software, you

125
00:07:07,487 --> 00:07:08,847
cannot protect your software.

126
00:07:09,347 --> 00:07:11,757
So figuring out what are the
dependencies that goes into

127
00:07:11,757 --> 00:07:12,997
your software is very important.

128
00:07:13,217 --> 00:07:16,347
And this is where software bill
of material comes into play.

129
00:07:16,847 --> 00:07:18,807
So bill of materials is a common thing.

130
00:07:19,017 --> 00:07:23,017
it's mostly used, it's used in many
industries, even in constructions,

131
00:07:23,517 --> 00:07:25,097
manufacturing, and a lot more.

132
00:07:25,097 --> 00:07:26,037
Okay.

133
00:07:26,362 --> 00:07:29,122
So Bill of Materials is an
extensive list of raw materials,

134
00:07:29,122 --> 00:07:32,772
components, and even instructions
required to construct, manufacture,

135
00:07:32,773 --> 00:07:34,672
or repair a protected service.

136
00:07:35,502 --> 00:07:39,122
So there are manufacturing BOMs,
engineering Bill of Materials, etc.

137
00:07:39,622 --> 00:07:43,782
But in the context of software, an
SBOM, or a Software Bill of Material,

138
00:07:43,782 --> 00:07:47,812
includes all software components that are
used to make a final software product.

139
00:07:48,058 --> 00:07:53,617
The SBAR will introduce, details of the
software version, patches, dependencies,

140
00:07:53,687 --> 00:07:55,657
vulnerabilities, licenses, etc.

141
00:07:56,157 --> 00:07:59,357
Some of the key, benefits of
software build of materials,

142
00:07:59,407 --> 00:08:00,897
one is component transparency.

143
00:08:01,447 --> 00:08:04,637
once you have an SBAR software, it
offers complete transparency into the

144
00:08:04,637 --> 00:08:06,237
components used in that application.

145
00:08:07,207 --> 00:08:10,927
which helps identify potential security
vulnerabilities or licensing issues

146
00:08:11,007 --> 00:08:12,477
related to third party dependencies.

147
00:08:12,977 --> 00:08:13,797
Vulnerability management.

148
00:08:14,507 --> 00:08:17,907
once we know all the components and their
versions, and, organizers can quickly

149
00:08:17,907 --> 00:08:22,077
identify if any part of the software
is affected by non vulnerabilities and

150
00:08:22,147 --> 00:08:24,057
take appropriate remediation measures.

151
00:08:25,037 --> 00:08:26,577
Think of the log for Shell vulnerability.

152
00:08:27,077 --> 00:08:30,997
Any organization that had SBOM at that
point in time would have been able to

153
00:08:30,997 --> 00:08:34,677
quickly protect them because they would
know which all components in their

154
00:08:34,677 --> 00:08:39,220
software infrastructure would be impacted
by the law of forced vulnerability.

155
00:08:39,220 --> 00:08:41,322
Compliance and risk assessment.

156
00:08:41,322 --> 00:08:44,442
S1 means in, complying with
industrial regulations and standards

157
00:08:44,442 --> 00:08:47,772
that mandate transparency and
disclosure of third party companies.

158
00:08:48,272 --> 00:08:51,504
It also helps in evaluating potential
security and legal risks associated

159
00:08:51,504 --> 00:08:55,662
with the And again, general supply
chain security, it enables organizations

160
00:08:55,662 --> 00:08:58,342
to better understand and manage
their software supply chain, reduce

161
00:08:58,372 --> 00:09:02,132
the risk of, supply chain attacks
and ensuring that components and,

162
00:09:02,132 --> 00:09:04,282
are sourced from, trusted sources.

163
00:09:04,782 --> 00:09:07,842
Again, You don't just manufacture
one software, you will have a number

164
00:09:07,842 --> 00:09:09,112
of software that are deployed.

165
00:09:09,592 --> 00:09:12,702
Some might be open source tools,
some might be infrastructure tools.

166
00:09:12,762 --> 00:09:16,952
Any company would have a number
of softwares and managing all

167
00:09:16,952 --> 00:09:19,342
of them And processing them.

168
00:09:19,422 --> 00:09:22,162
Obviously, you cannot process
them in a using humans.

169
00:09:22,222 --> 00:09:25,122
So which means It requires
automations, right?

170
00:09:25,332 --> 00:09:31,162
So it is imperative that you should have
standards for SBOPs And as you can see it

171
00:09:31,272 --> 00:09:35,172
helps you with interoperability automation
and adopt industry based practices.

172
00:09:35,582 --> 00:09:38,652
let us look at some of
the standards in S4.

173
00:09:39,152 --> 00:09:42,042
So the current industry standards
are Cyclone DX and SPDX.

174
00:09:42,102 --> 00:09:45,072
we will look into them in a bit
more detail in the next slides.

175
00:09:45,572 --> 00:09:48,877
so in addition to the this to
explore, standards, there are also

176
00:09:48,877 --> 00:09:52,767
a few other standards that help in
naming and describing softwares.

177
00:09:53,647 --> 00:09:55,047
So they are, software IDs.

178
00:09:55,097 --> 00:09:58,912
it defines a structural metadata format
for describing a software product.

179
00:09:58,912 --> 00:10:01,287
Common Platform Enumeration or CPE.

180
00:10:01,287 --> 00:10:04,677
There's a standardized method for,
for describing and identifying.

181
00:10:05,147 --> 00:10:08,797
Class of applications, operating systems,
and even hardware devices present

182
00:10:08,797 --> 00:10:10,587
in an interface's computing assets.

183
00:10:11,087 --> 00:10:14,957
Package your, PURL is, it's a URL
string used to identify and locate

184
00:10:14,957 --> 00:10:21,147
a software package in a, universal,
way across programming languages,

185
00:10:21,147 --> 00:10:25,017
package managers, packaging
conventions towards a p and database.

186
00:10:25,017 --> 00:10:28,937
So, let's say know you have a machine,
water softwares are installed on it,

187
00:10:29,037 --> 00:10:32,427
whether they are, RPMs, DN packages.

188
00:10:33,197 --> 00:10:36,717
For java packages, and anything
of the sort, everything can be,

189
00:10:36,817 --> 00:10:38,357
represented using a package URL.

190
00:10:38,857 --> 00:10:42,867
So let us, come to one of the,
SBOM standards, that's SPDX.

191
00:10:42,867 --> 00:10:46,427
So SPDX is essentially a
software package data exchange.

192
00:10:46,887 --> 00:10:49,764
And it was, Linux software,
Linux foundation that, developed

193
00:10:49,774 --> 00:10:52,164
this in the early 2010s.

194
00:10:52,664 --> 00:10:56,024
So it's focused mostly on
compliance and licensing.

195
00:10:56,744 --> 00:10:58,059
And it's, the latest version is, 3.

196
00:10:58,059 --> 00:10:58,084
0.

197
00:10:58,084 --> 00:10:59,054
1.

198
00:10:59,554 --> 00:11:01,884
one thing about SPDX that
is very comprehensive.

199
00:11:01,924 --> 00:11:06,414
It not only lists packages, or
its licenses, it also, lists files

200
00:11:06,444 --> 00:11:08,514
used and code snippets sometimes.

201
00:11:09,014 --> 00:11:13,214
So this actually helps in, getting a
well rounded view of what our components

202
00:11:13,304 --> 00:11:14,894
are there in your software ecosystem.

203
00:11:15,394 --> 00:11:18,064
And it has been around for
a long time, from 2010.

204
00:11:18,254 --> 00:11:21,764
And it's already used by many industries
and products, including automotive

205
00:11:21,764 --> 00:11:23,671
and the healthcare industries.

206
00:11:23,671 --> 00:11:28,014
Cyclone DX came from OWASP.

207
00:11:28,994 --> 00:11:32,144
Anyone who is into security would
know about the OWASP Foundation.

208
00:11:32,794 --> 00:11:35,584
And actually their core focus is
on vulnerability and security.

209
00:11:36,084 --> 00:11:40,194
And it is used quite widely in
a lot of software organizations.

210
00:11:40,694 --> 00:11:43,004
And the latest version is 1.

211
00:11:43,004 --> 00:11:43,144
6.

212
00:11:43,644 --> 00:11:47,821
So SBOM classification, so SBOM can
be generated at various stages of

213
00:11:47,821 --> 00:11:49,524
your software development lifecycle.

214
00:11:50,164 --> 00:11:52,744
And it has different
classifications and purposes.

215
00:11:53,244 --> 00:11:54,084
CISA, the U.

216
00:11:54,084 --> 00:11:54,244
S.

217
00:11:54,244 --> 00:11:58,324
Cyber Security Agency, classifies the
SBOMs into six categories, as you can see.

218
00:11:59,214 --> 00:12:02,144
there's design, source, build,
analyze, deployed, and runtime.

219
00:12:02,644 --> 00:12:05,944
And, you can see the, description
here, it's quite self explanatory.

220
00:12:06,444 --> 00:12:10,074
. So again, the software bill of
material can be generated all these

221
00:12:10,074 --> 00:12:14,834
stages depending on it, whether we are
building a software or you just bought

222
00:12:14,834 --> 00:12:16,734
a software and, things like that.

223
00:12:17,694 --> 00:12:20,904
But there are also other types
of classifications for bombs like

224
00:12:20,964 --> 00:12:24,934
SaaS, bill of materials, machine
learning of materials, hardware,

225
00:12:24,934 --> 00:12:26,044
build of materials, et cetera.

226
00:12:26,584 --> 00:12:30,694
let's go into a short demo of generating
an S om in Cyclone DS format, and

227
00:12:30,694 --> 00:12:32,494
then look into the data in sbo.

228
00:12:32,569 --> 00:12:34,319
All right.

229
00:12:34,869 --> 00:12:38,299
so there are a number of tools
which you can use for generating

230
00:12:38,299 --> 00:12:39,619
software bill of materials.

231
00:12:40,119 --> 00:12:43,679
We are, using a utility called
SIFT, which is from the company

232
00:12:43,689 --> 00:12:45,159
Anchor, which is a security company.

233
00:12:45,659 --> 00:12:50,299
And what we're going to, so there are,
again, S1 can be generated from any

234
00:12:50,299 --> 00:12:55,579
sort of packages, software, even, just
a directory within your patch system.

235
00:12:55,579 --> 00:12:59,769
In this particular case, we are going
to Directly fetch the alpine docker

236
00:12:59,769 --> 00:13:03,459
image and scan it and generate a
software build of material out of it.

237
00:13:04,279 --> 00:13:05,389
There is no additional software installed.

238
00:13:05,569 --> 00:13:07,739
This is the plain vanilla alpine image.

239
00:13:08,239 --> 00:13:12,809
And again, if you see the CLI options, we
are giving it, the cyclone DX JSON format

240
00:13:13,309 --> 00:13:14,011
and save it into a file called alpine.

241
00:13:14,011 --> 00:13:14,099
cyclone.

242
00:13:14,099 --> 00:13:15,529
json.

243
00:13:16,029 --> 00:13:19,219
As you can see, it fetches the
image, doing some cataloging

244
00:13:19,219 --> 00:13:20,459
of all the softwares.

245
00:13:20,959 --> 00:13:23,609
Looking at, file metadata,
file digest, et cetera.

246
00:13:24,109 --> 00:13:24,979
It looks like it is finished.

247
00:13:24,989 --> 00:13:27,369
So let us, start examining the json file.

248
00:13:28,339 --> 00:13:30,419
We'll start with the top
elements that, this file has.

249
00:13:30,919 --> 00:13:33,449
All right, you can see schema,
bomb format, components,

250
00:13:33,449 --> 00:13:36,849
dependencies, metadata, serial
numbers, spec version, version.

251
00:13:37,289 --> 00:13:40,369
So if you go to the, actual,
cycle only specification, that I

252
00:13:40,379 --> 00:13:41,839
had given in the previous slide.

253
00:13:42,444 --> 00:13:45,424
There's a lot more, elements
within the Cyclone DX format,

254
00:13:46,204 --> 00:13:48,134
but, a lot of them are optional.

255
00:13:48,684 --> 00:13:52,884
if I remember right, there are
only serial number and spec

256
00:13:52,884 --> 00:13:55,484
version which are compulsory,
and everything else is optional.

257
00:13:55,714 --> 00:14:00,978
So this gives a lot of freedom for, people
to generate S forms as, as they require.

258
00:14:01,558 --> 00:14:04,878
But, again, if you want to know
more details about what each of

259
00:14:04,878 --> 00:14:07,198
these components mean, you can
actually visit the specification.

260
00:14:07,698 --> 00:14:09,268
Now, let us look at some
of the basic information.

261
00:14:09,778 --> 00:14:13,478
schema again, points to
the actual schema website.

262
00:14:13,998 --> 00:14:15,948
The BOM format, obviously, is cyclone dx.

263
00:14:16,598 --> 00:14:17,468
And the spec version is 1.

264
00:14:17,468 --> 00:14:18,258
6.

265
00:14:18,908 --> 00:14:21,158
Now, the other things are
serial number and version.

266
00:14:21,278 --> 00:14:26,038
So, the standard, SBOM standard mandates
that there should be a serial number.

267
00:14:26,703 --> 00:14:32,873
Which can uniquely identify a particular
sbomb file and whenever So let's say, you

268
00:14:32,973 --> 00:14:37,053
are right now, we have targeted alpine
docker image right now Let's say after

269
00:14:37,053 --> 00:14:41,083
where the docker alpine docker image
changed And you have the again generation

270
00:14:41,093 --> 00:14:45,813
sbomb then it should have a different
version It could be you know, it will

271
00:14:45,813 --> 00:14:50,863
start from version one and version two
and progress like that So you are most

272
00:14:50,863 --> 00:14:54,123
important things to remember you have a
cl number and a version Now there is a

273
00:14:54,123 --> 00:14:57,483
metadata dictionary within the Cyclone DX.

274
00:14:57,483 --> 00:15:03,123
If you see here, it, talks about the
software itself and how it was generated.

275
00:15:03,733 --> 00:15:07,103
So the timestamp is the time at
which the S Bomb was generated.

276
00:15:07,973 --> 00:15:09,473
And the tools used for generating it.

277
00:15:09,703 --> 00:15:11,483
Again, I don't know who's the authors.

278
00:15:11,523 --> 00:15:12,143
It's from Anchor.

279
00:15:12,513 --> 00:15:15,663
The utility name is SIFT
and uses the version 1.

280
00:15:15,713 --> 00:15:16,663
170.

281
00:15:17,163 --> 00:15:18,183
And there's a component here.

282
00:15:18,223 --> 00:15:21,963
So this component actually
displays, what is the software

283
00:15:21,963 --> 00:15:23,483
for which this S BOM is generated.

284
00:15:24,233 --> 00:15:27,683
And this obviously is Alpine
and it's a type container.

285
00:15:28,513 --> 00:15:30,903
And what you see here,
BOM reference as a string.

286
00:15:31,833 --> 00:15:39,163
So in the, in, Cyclone DX, format, a
BOM reference is like a unique key or a

287
00:15:39,163 --> 00:15:43,253
primary key for any software component
within that particular document.

288
00:15:43,253 --> 00:15:43,273
Okay.

289
00:15:43,963 --> 00:15:48,103
Now, you could use this reference ID
to refer to this particular component

290
00:15:48,123 --> 00:15:49,813
in any other part of the same document.

291
00:15:50,203 --> 00:15:52,013
That is the whole idea of BOM references.

292
00:15:52,873 --> 00:15:56,683
You will see more BOM references
in the upcoming portions.

293
00:15:57,183 --> 00:15:58,033
let us look at components.

294
00:15:58,043 --> 00:16:00,853
Components are nothing but these
are the actual software components

295
00:16:01,533 --> 00:16:06,623
that the SBOM utility detected
and added into the SBOM file.

296
00:16:07,123 --> 00:16:09,883
So what you can see, sir, now, it
actually generated 15 components.

297
00:16:09,883 --> 00:16:12,973
remember that is a very lightweight
image and it has a very limited

298
00:16:12,973 --> 00:16:16,048
number of software changes, and
that is you are only seeing 15.

299
00:16:16,068 --> 00:16:21,088
If it was a, large, Docker, image
with the bunch of files for, code,

300
00:16:21,628 --> 00:16:22,678
this would've be totally different.

301
00:16:23,178 --> 00:16:25,718
So let us, we know that there
are only 15 components, so

302
00:16:25,718 --> 00:16:27,053
let us, look at what are the.

303
00:16:27,553 --> 00:16:29,513
Components that, this file has.

304
00:16:30,013 --> 00:16:33,383
So as you can see, there
are again 15 packages.

305
00:16:34,013 --> 00:16:38,613
And what I have listed is the package
name and the type of the package.

306
00:16:39,483 --> 00:16:44,725
So for S BOM, most of the packages are
considered as libraries or dependencies.

307
00:16:44,725 --> 00:16:47,844
and it also detected Alpine
as an operating system.

308
00:16:47,844 --> 00:16:51,936
So these are the 15
components within this S BOM.

309
00:16:52,436 --> 00:16:56,296
Now we'll take a look at one of
the packages called s SR client.

310
00:16:56,796 --> 00:17:01,251
So for this package, so there's a lot of
information for per package in an S one.

311
00:17:01,851 --> 00:17:04,611
So properties is one,
element, which is quite long.

312
00:17:04,611 --> 00:17:05,931
We will see that in the next session.

313
00:17:05,981 --> 00:17:10,181
before that I want to show the
rest of the components here.

314
00:17:10,241 --> 00:17:13,451
So if you see here, again, there's a bone
reference, which is the unique key for

315
00:17:13,451 --> 00:17:16,002
this particular package called SSL client.

316
00:17:16,781 --> 00:17:17,701
Within this document.

317
00:17:17,721 --> 00:17:20,991
So that is what bomb reference is and
you can see that it has a particular

318
00:17:20,991 --> 00:17:25,431
format The type is library obviously
and the publisher is the author of the

319
00:17:25,431 --> 00:17:31,421
software and the name version description
everything is Gathered here and one of the

320
00:17:31,461 --> 00:17:36,881
important thing is it also lists licenses
and it is a gpl2 version one thing you

321
00:17:36,881 --> 00:17:43,291
have to Know about this structure is that
it says licenses not license The reason

322
00:17:43,291 --> 00:17:47,191
is for open source software, it might
be built from a bunch of other softwares

323
00:17:47,271 --> 00:17:49,191
and they might have varying, licenses.

324
00:17:49,551 --> 00:17:53,931
And that is why the provision is there
for adding a bunch of additional licenses

325
00:17:54,181 --> 00:17:55,421
that might be applicable to the software.

326
00:17:55,921 --> 00:18:00,521
And if you remember, we had discussed,
known SBOM standards, CPE, BURL,

327
00:18:00,571 --> 00:18:02,931
et cetera, SWDID, all of them.

328
00:18:03,426 --> 00:18:07,836
this system actually uses CPNP URL for,
referencing to some of these components.

329
00:18:08,336 --> 00:18:11,996
External references, whenever a tool
can find some information about where

330
00:18:11,996 --> 00:18:16,096
this software came from or, where the
documentation site is or whatnot, it

331
00:18:16,106 --> 00:18:17,176
will be added as an external reference.

332
00:18:17,676 --> 00:18:22,226
Let's look at the properties, property
of the, this, particular package.

333
00:18:22,726 --> 00:18:24,786
So there's a long list of, items.

334
00:18:25,166 --> 00:18:26,146
we will look at a few.

335
00:18:26,616 --> 00:18:27,406
So again.

336
00:18:27,906 --> 00:18:29,836
How did, how was this package discovered?

337
00:18:29,856 --> 00:18:33,066
APK DB cataloger is a
component of the SIFTS utility.

338
00:18:33,516 --> 00:18:36,016
Nesmo utility will have a
bunch of catalogers, for

339
00:18:36,016 --> 00:18:37,156
different type of softwares.

340
00:18:37,156 --> 00:18:39,466
And this actually found
out that, it's an APK.

341
00:18:39,966 --> 00:18:41,486
And the package type is APK.

342
00:18:41,986 --> 00:18:46,326
And, some of the other important
things are, the size of the package,

343
00:18:46,796 --> 00:18:50,186
some of the dependency lists,
and what it provides, et cetera.

344
00:18:50,186 --> 00:18:52,016
And the version, things like that.

345
00:18:52,516 --> 00:18:54,956
Moving on, I talked about
multiple licenses, right?

346
00:18:54,956 --> 00:18:57,956
And, there is, the package that
we saw had only one license.

347
00:18:58,456 --> 00:18:59,816
Let us see another package.

348
00:19:00,286 --> 00:19:00,896
This is special.

349
00:19:01,396 --> 00:19:05,616
And I took it from, another S bomb
that I, generated earlier for Kubuntu

350
00:19:05,616 --> 00:19:07,766
image, the basic Kubuntu image.

351
00:19:08,486 --> 00:19:12,346
And the license we are looking
for is for the package bash.

352
00:19:12,846 --> 00:19:19,542
You see here, bash has a whole
bunch of licenses attached to it.

353
00:19:19,542 --> 00:19:24,706
PSD, GFDL, GPL, Latex2V, MIT Lite.

354
00:19:25,466 --> 00:19:25,866
All of them.

355
00:19:25,866 --> 00:19:28,686
So that's why I was talking that is,
why, when you are looking at license

356
00:19:28,686 --> 00:19:32,956
compliances, not just security, SVM
also helps you with license compliances

357
00:19:32,996 --> 00:19:36,816
to see whether, you have possible
legal issues in terms of license

358
00:19:36,816 --> 00:19:38,076
violations or anything like that.

359
00:19:38,916 --> 00:19:41,316
So that is why this licensing
part is very important.

360
00:19:41,816 --> 00:19:45,716
Again, let us, so we looked at
components as a top level element

361
00:19:45,716 --> 00:19:48,616
now, and there is another top level
element, which is dependencies.

362
00:19:49,116 --> 00:19:51,896
Dependencies as the name suggests
is the dependency between the

363
00:19:51,896 --> 00:19:53,076
components that we saw already.

364
00:19:53,576 --> 00:19:56,206
Now there are 10 entries
for dependencies here.

365
00:19:56,706 --> 00:20:01,746
And what we are going to do is pick
just one package for the time being

366
00:20:01,796 --> 00:20:03,606
and see what are its dependencies.

367
00:20:04,106 --> 00:20:05,996
You see here again, there's a reference.

368
00:20:05,996 --> 00:20:12,806
So basically we picked the dependencies
of the SSL client package and what you can

369
00:20:12,806 --> 00:20:14,786
see is it depends on three other packages.

370
00:20:15,216 --> 00:20:19,086
And if you see here, all of them are
bone references, which means you can

371
00:20:19,086 --> 00:20:21,366
find these packages within this SBO file.

372
00:20:21,866 --> 00:20:26,446
Now, since you know what packages
are in your SBO and what is avers,

373
00:20:27,166 --> 00:20:30,856
it's always possible to look up into
external vulnerability database and

374
00:20:30,856 --> 00:20:34,151
figure out whether this package has
well , and that is one of the, of

375
00:20:34,186 --> 00:20:38,466
having an . And to do that, we are
using under CLA from the ancor com.

376
00:20:38,616 --> 00:20:43,856
it's another CLI to which you can feed
this, S BOM file and Accur will go online,

377
00:20:43,856 --> 00:20:48,586
sorry, GRIBE will go online, talk to a
few vulnerability databases and figure

378
00:20:48,586 --> 00:20:54,566
out is there any, vulnerability in this
S BOM, packages listed in this S BOM.

379
00:20:54,566 --> 00:20:55,376
So let us do that.

380
00:20:55,876 --> 00:20:56,246
All right.

381
00:20:56,296 --> 00:20:58,286
Created a report called alchemy.

382
00:20:58,316 --> 00:20:58,696
gribe.

383
00:20:58,696 --> 00:20:58,706
json.

384
00:20:58,706 --> 00:21:01,536
So all the autoresponse it gave is here.

385
00:21:02,036 --> 00:21:05,306
And what we're going to do is, I know
that, it has formed a few matches,

386
00:21:05,316 --> 00:21:08,916
so I'm just picking one of the
matches and some of the information

387
00:21:08,916 --> 00:21:10,586
about that vulnerability here.

388
00:21:11,086 --> 00:21:11,956
Give me a second.

389
00:21:12,456 --> 00:21:13,296
Sorry for that.

390
00:21:13,296 --> 00:21:16,357
it looks like there is a slight problem.

391
00:21:16,357 --> 00:21:17,888
Give me a second.

392
00:21:17,888 --> 00:21:18,653
All right.

393
00:21:18,653 --> 00:21:22,097
it looks it didn't work out as I expected.

394
00:21:22,097 --> 00:21:24,010
Let me just try to

395
00:21:24,510 --> 00:21:25,710
troubleshoot the slide.

396
00:21:26,210 --> 00:21:26,610
All right.

397
00:21:26,830 --> 00:21:27,150
My bad.

398
00:21:27,150 --> 00:21:32,330
I think there was some system was hanging
for a bit, but you can see the result now.

399
00:21:33,260 --> 00:21:35,480
all the vulnerability we picked
is for the package libcrypto3.

400
00:21:35,980 --> 00:21:37,795
the vulnerable version is.

401
00:21:38,605 --> 00:21:38,895
3.

402
00:21:38,965 --> 00:21:39,155
3.

403
00:21:39,185 --> 00:21:45,005
2 R0 and the vulnerability
is CVE 2024 9143.

404
00:21:45,625 --> 00:21:48,475
It has a medium vulnerability category.

405
00:21:48,475 --> 00:21:51,715
And this version is basically
showing that, This is the fixed

406
00:21:51,725 --> 00:21:54,825
version of this particular package
without this vulnerability.

407
00:21:55,175 --> 00:21:56,995
as you can see, this is
only limited information.

408
00:21:57,055 --> 00:22:00,035
If you look at this file, actually,
if you generate this file, you will

409
00:22:00,075 --> 00:22:02,735
see there's detailed information about
what is vulnerability, what are the

410
00:22:02,735 --> 00:22:04,365
artifacts impacted, et cetera, et cetera.

411
00:22:04,865 --> 00:22:08,445
I just, some information
to show you what it can do.

412
00:22:08,445 --> 00:22:08,845
All right.

413
00:22:08,875 --> 00:22:10,775
And again, you could use any tools.

414
00:22:10,985 --> 00:22:11,985
You will get, similar results.

415
00:22:12,485 --> 00:22:16,825
And this helps you in finding out
what packages in your system has what

416
00:22:16,835 --> 00:22:18,555
vulnerabilities and mitigate them

417
00:22:19,055 --> 00:22:22,175
Now just to show you about the
dependency, we'll do one more thing.

418
00:22:22,185 --> 00:22:27,375
I am Picking up all the dependencies from
this sbomb and plotting it as a graph

419
00:22:27,875 --> 00:22:28,335
All right

420
00:22:28,835 --> 00:22:32,130
As you can see There's a lot of
dependencies, as you can see.

421
00:22:32,130 --> 00:22:36,065
If you see, PK2 has a bunch of
dependencies, Alpine based layout

422
00:22:36,095 --> 00:22:40,235
has two dependencies, SSL client
has three dependencies, like that.

423
00:22:40,275 --> 00:22:44,235
And the dependencies might be depending
on some other different software.

424
00:22:44,605 --> 00:22:46,945
So there is going to be a
multilevel dependency here.

425
00:22:47,915 --> 00:22:52,545
And just to show you that, let me
actually pick a package called Alpine

426
00:22:52,545 --> 00:22:56,125
based layout from this SBOM and
show its dependencies as a graph.

427
00:22:56,625 --> 00:22:56,845
All right.

428
00:22:57,345 --> 00:22:58,065
So as you can see,

429
00:22:58,605 --> 00:23:00,665
Alpine base layout is the package.

430
00:23:01,545 --> 00:23:02,975
And it has two dependencies.

431
00:23:03,015 --> 00:23:05,005
One is alpine based layout data.

432
00:23:05,055 --> 00:23:08,115
sorry that it's not showing the
entire package name here, but

433
00:23:08,115 --> 00:23:09,055
that is one of the dependencies.

434
00:23:09,055 --> 00:23:13,135
And the second dependency is bcbox
bin assets, which in turn is a

435
00:23:13,135 --> 00:23:16,865
bcbox dependency, which in turn
depends on the muscle library.

436
00:23:17,665 --> 00:23:20,395
As you can see, this is just to show
you that, when you have a package,

437
00:23:20,915 --> 00:23:22,185
the dependency is multi legged.

438
00:23:22,985 --> 00:23:27,620
And with this dependency information, You
can actually put the entire dependency

439
00:23:27,680 --> 00:23:33,080
and figure out if your software
has some upstream dependency or, in

440
00:23:33,080 --> 00:23:37,100
some, by, at the level dependency,
which could have vulnerability

441
00:23:37,100 --> 00:23:38,680
or other legal issues, right?

442
00:23:38,710 --> 00:23:40,870
So that is the power of having an SBOM.

443
00:23:41,370 --> 00:23:44,029
Now with this, let me wind up this
demo and get back to the presentation.

444
00:23:44,029 --> 00:23:44,986
All right.

445
00:23:44,986 --> 00:23:49,290
So with this knowledge
of SBOMs, what should the

446
00:23:49,790 --> 00:23:51,890
DevSecOps do to adopt them?

447
00:23:52,390 --> 00:23:54,970
See, SBAP is a new topic
for most of the engineering.

448
00:23:55,630 --> 00:23:58,360
understand them first and then
assess and document the use

449
00:23:58,360 --> 00:23:59,500
cases within the organization.

450
00:24:00,360 --> 00:24:03,040
And if necessary, evangelize this
to the rest of the organization.

451
00:24:03,540 --> 00:24:06,820
And to do that, evaluate the tools,
for, creating and managing SBAPs.

452
00:24:06,820 --> 00:24:10,020
There are a lot of open source
as well as vendor tools.

453
00:24:10,270 --> 00:24:11,405
Many of them are SaaS products.

454
00:24:11,906 --> 00:24:15,266
so once you pick the tools, integrate
them into your, software development

455
00:24:15,266 --> 00:24:17,144
lifecycle and automate SBOM generation.

456
00:24:17,144 --> 00:24:22,283
You should have tools that will help
you, save the SBOM data and analyze them.

457
00:24:23,103 --> 00:24:27,153
And also remember that this is not a
one time task and should be part of

458
00:24:27,153 --> 00:24:29,363
your SDLC and the continuous process.

459
00:24:29,863 --> 00:24:34,013
So to analyze the data, make reports and
share it with the right stakeholders,

460
00:24:34,013 --> 00:24:37,913
might be your engineering counterparts,
leadership, or security team.

461
00:24:38,413 --> 00:24:41,523
And also set alerts and reports
on vulnerabilities, license

462
00:24:41,533 --> 00:24:45,733
components, et cetera, so that
your security posture improves.

463
00:24:46,233 --> 00:24:48,513
With that, we are coming to
the end of this presentation.

464
00:24:49,013 --> 00:24:54,973
If you would like to know more about
SBOM, these resources will help you.

465
00:24:55,723 --> 00:25:00,563
So the OWASP authority to get
SBOMs is extensive and it will

466
00:25:00,593 --> 00:25:02,093
give you a good idea of what to do.

467
00:25:03,043 --> 00:25:06,593
Cyclone DX format as well as the
general information about Sbomb,

468
00:25:06,683 --> 00:25:08,423
how to go about that option, etc.

469
00:25:09,293 --> 00:25:14,473
And if you want to know about Sbomb
tools, Cyclone DX tool center is

470
00:25:14,493 --> 00:25:15,853
actually a good starting point.

471
00:25:16,053 --> 00:25:18,943
Of course, it is, it doesn't cover
all the tools that is out there, but

472
00:25:19,553 --> 00:25:20,793
it gives you a good starting point.

473
00:25:21,293 --> 00:25:25,713
I hope you were able to get some value
out of this and thanks for listening.

