1
00:00:00,180 --> 00:00:00,919
Hello everyone.

2
00:00:00,980 --> 00:00:02,040
Thank you for joining.

3
00:00:02,430 --> 00:00:05,860
Today we're going to talk about
Codeia Cloud Infrastructure as

4
00:00:05,880 --> 00:00:07,770
Code best practices with Terraform.

5
00:00:08,690 --> 00:00:10,209
My name is Madhu Kumayaluri.

6
00:00:10,209 --> 00:00:14,329
In this presentation, we will discuss
how Terraform as an Infrastructure

7
00:00:14,329 --> 00:00:18,039
as Code tool helps manage your
cloud resources effectively.

8
00:00:18,840 --> 00:00:22,885
We will cover some best practices
for creating scalable, secure and

9
00:00:22,885 --> 00:00:24,425
maintainable cloud infrastructure.

10
00:00:24,925 --> 00:00:27,905
That's my company I use for consulting
projects with various customers,

11
00:00:27,915 --> 00:00:29,185
Fortune Technologies Limited.

12
00:00:29,185 --> 00:00:32,275
A little bit more about me.

13
00:00:32,435 --> 00:00:37,774
I'm a principal cloud architect and
DevSecOps consultant, helping many

14
00:00:37,774 --> 00:00:42,785
customers to migrate to cloud and help
them with DevOps processes, helping

15
00:00:43,065 --> 00:00:46,615
with architecture designs, end to
end automation, security, et cetera.

16
00:00:47,115 --> 00:00:52,445
I'm also an AWS hero and lead many
global dev communities like AWS User

17
00:00:52,445 --> 00:00:57,415
Group, HashiCorp, DevSecCon, Snyk,
and DevOps Institute PeopleSet as a

18
00:00:57,425 --> 00:00:59,234
chapter leader and brand ambassador.

19
00:01:00,184 --> 00:01:03,065
If you want to learn more about
me, please scan the QR code

20
00:01:03,084 --> 00:01:04,404
and connect me on LinkedIn.

21
00:01:04,904 --> 00:01:08,574
Infrastructure as a Code is a
powerful way to manage cloud

22
00:01:08,574 --> 00:01:12,434
resources by writing code rather than
manually configuring each resource.

23
00:01:12,994 --> 00:01:15,894
like going to the console, click,
and just creating the resources.

24
00:01:16,254 --> 00:01:17,164
And that's not a good way.

25
00:01:17,704 --> 00:01:23,054
IAC provides consistency, allows you to
version control your changes, and makes it

26
00:01:23,064 --> 00:01:25,484
much easier to scale your infrastructure.

27
00:01:26,074 --> 00:01:29,444
So today we'll focus on how
using infrastructure as a code,

28
00:01:29,444 --> 00:01:32,974
specifically with Terraform, can
enhance your cloud deployments.

29
00:01:33,474 --> 00:01:35,354
So let's begin by defining ISE.

30
00:01:35,354 --> 00:01:37,694
So infrastructure as a code
means describing your cloud

31
00:01:37,694 --> 00:01:41,034
infrastructure using code, like
we learned in the previous slide.

32
00:01:41,544 --> 00:01:46,804
This approach enables consistency in
configurations, allowing us to track your

33
00:01:46,814 --> 00:01:49,214
changes, makes deployments repeatable.

34
00:01:49,784 --> 00:01:55,054
By coding infrastructure, we
can avoid errors, reduce manual

35
00:01:55,054 --> 00:01:57,934
configuration, and deploy much faster.

36
00:01:58,434 --> 00:01:59,495
So why Terraform?

37
00:01:59,495 --> 00:01:59,654
Why Terraform?

38
00:02:00,014 --> 00:02:04,445
So first, Terraform is Provider
Diagnostic, meaning it can work across

39
00:02:04,465 --> 00:02:11,774
multiple cloud platforms like AWS,
Azure, GCP, multiple hyperscalers.

40
00:02:11,775 --> 00:02:15,865
It doesn't mean that you use the
same code in every hyperscaler.

41
00:02:15,905 --> 00:02:19,205
It means that you have to create
separate modules for each of them.

42
00:02:19,595 --> 00:02:24,665
But it's possible to create
for, yeah, various hyperscalers.

43
00:02:25,165 --> 00:02:31,055
It uses a declarative language called
HCL, HashiCorp Configuration Language.

44
00:02:31,295 --> 00:02:35,664
So where you define the desired end
state rather than the exact steps.

45
00:02:36,355 --> 00:02:42,125
Terraform also has a strong community and
ecosystem with reusable modules, making it

46
00:02:42,125 --> 00:02:43,875
more ideal for infrastructure as a code.

47
00:02:44,375 --> 00:02:48,865
So in this session, I'll try to cover
some best practices for Terraform,

48
00:02:49,275 --> 00:02:54,610
including organizing code, modules for
reusability, how you manage your state

49
00:02:54,610 --> 00:03:00,000
files, handling environments, implementing
security, testing and automating

50
00:03:00,070 --> 00:03:02,470
deployments, on a very high level.

51
00:03:02,500 --> 00:03:07,440
So these practices are essential
for creating efficient and scalable

52
00:03:07,589 --> 00:03:09,070
and, secure your environment.

53
00:03:09,570 --> 00:03:13,570
So organizing code structure to
keep telephone code organized,

54
00:03:13,770 --> 00:03:17,610
it's important to structure it
by a service or a component.

55
00:03:18,045 --> 00:03:21,915
like you see on the right hand side of
the picture, so such as like network

56
00:03:21,915 --> 00:03:25,025
layer, database layer, application layers.

57
00:03:25,545 --> 00:03:28,745
So use a consistent file naming
convention as well, like main.

58
00:03:28,745 --> 00:03:31,795
tf for main configurations, variable.

59
00:03:31,795 --> 00:03:34,285
tf for input variables, and output.

60
00:03:34,315 --> 00:03:35,245
tf for outputs.

61
00:03:36,025 --> 00:03:40,175
A clean structure makes it
easier for the teams to find and

62
00:03:40,175 --> 00:03:42,305
manage specific configurations.

63
00:03:42,805 --> 00:03:44,125
Modules for reusability.

64
00:03:44,125 --> 00:03:48,395
So modules are key to write
the reusable code in Terraform.

65
00:03:48,985 --> 00:03:53,985
By using modules, you can create reusable
standalone pieces of code for common

66
00:03:53,985 --> 00:03:59,405
infrastructure patterns like landing zone,
SHL, like VPC, virtual private cloud.

67
00:04:00,155 --> 00:04:03,175
It's best to design
modules with clear inputs.

68
00:04:03,920 --> 00:04:09,780
and outputs and to keep them focused on a
single purpose for better maintainability.

69
00:04:10,280 --> 00:04:16,100
State management, terraform, state
files track, every single thing you

70
00:04:16,100 --> 00:04:21,040
create on your cloud and tracks the
current state of your infrastructure.

71
00:04:21,730 --> 00:04:27,690
To avoid conflicts and enable team
collaboration, store files remotely, such

72
00:04:27,690 --> 00:04:36,230
as in an Amazon S3 bucket and use database
like DynamoDB for state locking, securing

73
00:04:36,240 --> 00:04:41,040
and versioning your state file is very
critical to prevent sensitive data leaks.

74
00:04:41,540 --> 00:04:45,060
Environment segmentation, when working
with multiple environments like

75
00:04:45,090 --> 00:04:48,940
downstaging production, it's important
to isolate each environment using

76
00:04:48,970 --> 00:04:50,930
telephone workspaces or directories.

77
00:04:51,500 --> 00:04:54,440
It's more of common sense, The
isolation like you see on the right

78
00:04:54,440 --> 00:04:58,500
hand side of the picture it's it makes
more sense for you to isolate your

79
00:04:58,500 --> 00:05:01,660
dev environment because Where you
play around it's more like a sandbox.

80
00:05:01,660 --> 00:05:04,930
You don't want to do Yeah, you can
do anything you want and production

81
00:05:04,930 --> 00:05:08,290
is more like, you don't want to touch
It's live it impacts the customer

82
00:05:08,290 --> 00:05:11,070
it impacts It causes a huge impact.

83
00:05:11,250 --> 00:05:17,150
So It makes sense to isolate this to
ensure that changes from one environment

84
00:05:17,160 --> 00:05:22,120
won't impact others and makes deployments
more predictable and manageable.

85
00:05:22,620 --> 00:05:27,160
Some of the security practices, security
is very ground zero in cloud and

86
00:05:27,190 --> 00:05:28,810
crucially infrastructure as a cloud.

87
00:05:29,310 --> 00:05:31,340
Avoid hard coding secrets.

88
00:05:31,885 --> 00:05:36,005
Instead, use secret management
tools like AWS Secrets Manager,

89
00:05:36,255 --> 00:05:38,205
Parameter Store, or HashiCorp World.

90
00:05:39,115 --> 00:05:43,455
Grant the least privilege access
necessary to developers, and enable

91
00:05:43,485 --> 00:05:45,325
auditing to track those changes.

92
00:05:45,825 --> 00:05:48,685
this approach basically safeguards
sensitive data, and keeps your

93
00:05:48,685 --> 00:05:49,975
infrastructure more secure.

94
00:05:50,765 --> 00:05:53,495
The most common security pathway,
like I've seen, is more like,

95
00:05:53,515 --> 00:05:57,135
this, Yeah, secrets, API keys.

96
00:05:57,145 --> 00:06:00,245
So they're basically hard coded in some
of the things, which is not a good habit.

97
00:06:00,545 --> 00:06:03,675
So I would definitely recommend
putting them in a parameter

98
00:06:03,675 --> 00:06:05,645
store or a Haskell world.

99
00:06:06,145 --> 00:06:07,445
Automation and testing.

100
00:06:07,455 --> 00:06:10,895
So automation is essential for
consistent infrastructure deployment.

101
00:06:11,365 --> 00:06:16,175
By integrating Terraform into your
CI CD pipelines, either you use a

102
00:06:16,235 --> 00:06:22,115
GitLab or Jenkins or Code pipeline
on AWS, you can automate testing and

103
00:06:22,115 --> 00:06:26,275
validation and deployment of your
infrastructure in your pipelines Use

104
00:06:26,275 --> 00:06:32,325
tools like TerraTest or Check how For
testing to ensure configurations are

105
00:06:32,335 --> 00:06:35,205
secure and correct Managing drift.

106
00:06:35,875 --> 00:06:40,475
like I mentioned, in the past, the most
common thing I've noticed is the manual

107
00:06:40,475 --> 00:06:42,565
changes that are made outside Terraform.

108
00:06:43,025 --> 00:06:46,595
some developers go on a, console,
just click, change some things

109
00:06:46,595 --> 00:06:47,745
because to fix something.

110
00:06:47,755 --> 00:06:52,335
to develop some things that's, in the
long run creates a drift and, and it's

111
00:06:52,335 --> 00:06:54,515
painful to track those changes as well.

112
00:06:54,815 --> 00:06:59,715
So regularly run Terraform plan to
detect these changes and consider

113
00:06:59,745 --> 00:07:03,565
adding those in an automated drift
checks in your DevOps pipeline.

114
00:07:04,215 --> 00:07:08,145
Detecting this drift early in the stages
helps you to keep your infrastructure

115
00:07:08,145 --> 00:07:10,825
more consistent and avoid nasty surprises.

116
00:07:11,325 --> 00:07:15,505
Let's look at an example workflow
deploying a landing zone example,

117
00:07:15,505 --> 00:07:23,125
AWS VPC with multiple subnets by
following best practices, like reusing

118
00:07:23,125 --> 00:07:28,625
modules for VPC, storing state file
remotely, using CI CD automation, you

119
00:07:28,665 --> 00:07:33,165
can create a scalable and maintainable
and consistent cloud environment.

120
00:07:33,465 --> 00:07:37,665
So this is very useful when you also have
multiple account, multiple environment.

121
00:07:38,055 --> 00:07:42,905
So this code basically is just one click
on, but you change your input parameters

122
00:07:43,095 --> 00:07:44,785
to create multiple environments.

123
00:07:45,145 --> 00:07:46,135
So it's very useful.

124
00:07:46,635 --> 00:07:46,955
Sorry.

125
00:07:47,455 --> 00:07:50,455
Common challenges, the most
common challenges in the

126
00:07:50,505 --> 00:07:53,605
infrastructures I've noticed
personally are like state conflicts.

127
00:07:54,130 --> 00:07:59,380
Sometimes the street file might corrupt
or sometimes, they go and mess around

128
00:07:59,380 --> 00:08:04,710
with the console and it creates a drift
and yeah, changes like that also sends to

129
00:08:04,710 --> 00:08:08,110
data, which they keep some passports in
your telephone call, which is not good.

130
00:08:08,945 --> 00:08:13,375
So solutions include using Terraform
workspaces like we discussed earlier

131
00:08:13,375 --> 00:08:14,985
and isolate your environments.

132
00:08:15,485 --> 00:08:17,885
manage your state file
securely on outside.

133
00:08:17,945 --> 00:08:20,195
S3 bucket and all secure there.

134
00:08:20,735 --> 00:08:23,425
Integrating your CI, CD
pipeline for automated testing.

135
00:08:23,655 --> 00:08:25,175
we discussed about that.

136
00:08:26,165 --> 00:08:30,355
So by addressing these challenges,
you can also deploy infrastructure

137
00:08:30,355 --> 00:08:31,975
more securely and reliably.

138
00:08:32,475 --> 00:08:36,145
Additional tools I would suggest
to improve your Terraform workflow.

139
00:08:36,965 --> 00:08:42,025
Telephone cloud or enterprise
provide better collaborative

140
00:08:42,025 --> 00:08:43,755
features and policy management.

141
00:08:44,155 --> 00:08:50,215
It's a paid version, but it's definitely
worth it for large enterprises especially.

142
00:08:50,865 --> 00:08:52,855
Or you can use Teragrunt.

143
00:08:53,355 --> 00:08:59,105
Which can simplify your workflows
for larger teams Finally explore some

144
00:08:59,105 --> 00:09:03,835
community resources such as terraform
registry or github Repositories or ready

145
00:09:03,835 --> 00:09:08,185
made modules and examples, but don't just
blindly copy them and just directly use in

146
00:09:08,185 --> 00:09:13,045
your production Just make sure do a sense
check Avoid all the sensitive information

147
00:09:13,045 --> 00:09:18,025
is not there, whatever customize it for
your requirements Just to summarize,

148
00:09:18,075 --> 00:09:22,435
remember the key best practices for
Terraform, structured code consistently,

149
00:09:22,445 --> 00:09:24,815
use modules, prioritize security.

150
00:09:24,845 --> 00:09:28,135
Security, security is ground zero,
so definitely prioritize security.

151
00:09:28,665 --> 00:09:30,385
Automate with CI, CD pipelines.

152
00:09:31,135 --> 00:09:33,295
So follow these best practices.

153
00:09:33,745 --> 00:09:37,365
it will help you to create scalable,
secure, and more maintainable

154
00:09:37,365 --> 00:09:38,515
infrastructure with Terraform.

155
00:09:39,015 --> 00:09:44,415
So if you're interested in HashiCorp
tools or in the process of taking any

156
00:09:44,415 --> 00:09:48,755
HashiCorp exams, feel free to join my
HashiCorp user group to learn more about

157
00:09:49,135 --> 00:09:54,535
HashiCorp tools and win free HashiCorp
Terraform world console exam vouchers

158
00:09:55,215 --> 00:09:57,155
by attending one of our meetup events.

159
00:09:57,655 --> 00:10:01,795
With that I would say thank you for
attending Let's open the floor for

160
00:10:01,795 --> 00:10:03,485
any questions or specific challenges.

161
00:10:03,485 --> 00:10:07,855
You might face And thanks mark
and his brother for bringing

162
00:10:07,855 --> 00:10:13,255
communities together like this 42
team you guys are doing a great job.

163
00:10:13,755 --> 00:10:14,935
Thanks for giving me the opportunity

