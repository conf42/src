1
00:00:00,360 --> 00:00:03,330
Hello everyone, I'm really
excited to be here with you today.

2
00:00:03,400 --> 00:00:07,360
The topic that we're going to discuss
today is about the next generation

3
00:00:07,399 --> 00:00:08,749
of web bundling with RSPack.

4
00:00:09,249 --> 00:00:12,930
My name is Konstantinos or Kostas
and I'm actually a software engineer

5
00:00:12,930 --> 00:00:18,109
at BIT, where BIT is basically the
simplest way for you to join the

6
00:00:18,109 --> 00:00:20,000
journey to component driven development.

7
00:00:20,619 --> 00:00:25,000
We provide a collection of tools to
build and reuse components really fast.

8
00:00:25,500 --> 00:00:27,180
These are some of my social handles.

9
00:00:27,210 --> 00:00:32,500
You can find them on Twitter or X on
GitHub and also on Bitcloud, where

10
00:00:32,509 --> 00:00:36,330
I will be able to share some of the
resources of this talk with you later on.

11
00:00:36,830 --> 00:00:42,899
But before we jump on to the RS
pack, let's discuss what is a bundle.

12
00:00:43,399 --> 00:00:46,238
A JavaScript bundle is
a very simple thing.

13
00:00:46,238 --> 00:00:50,750
It's a collection of multiple
scripts combined into a single file.

14
00:00:51,620 --> 00:00:56,820
During Sentinel Bundler, what it had to
do was actually a plus equal operation,

15
00:00:56,910 --> 00:00:59,780
like a concatenation for a long time.

16
00:00:59,860 --> 00:01:03,620
And this was a actually what
Everyone was needed then.

17
00:01:04,120 --> 00:01:06,399
I don't know how many of you
are familiar with Browserify.

18
00:01:06,400 --> 00:01:13,489
Browserify is a tool that was released
in 2013 and solved the problem of Node.

19
00:01:13,519 --> 00:01:17,880
js developers who wanted to reuse
their code into the browser.

20
00:01:18,800 --> 00:01:23,190
What it was doing, it was actually
making the common JS module system

21
00:01:23,210 --> 00:01:28,140
work for the browser by crawling
the dependency tree, reading files,

22
00:01:28,190 --> 00:01:29,610
and building a single bundle file.

23
00:01:30,110 --> 00:01:35,540
It also made node built ins and
conventions like, for example,

24
00:01:35,660 --> 00:01:38,300
process, buffer, crypto, etc.

25
00:01:38,309 --> 00:01:42,580
work in the browser by implementing
polyfills and symbols for them.

26
00:01:43,329 --> 00:01:46,179
This was a ridiculous amount
of work that had to go into

27
00:01:46,180 --> 00:01:48,050
building all this infrastructure.

28
00:01:48,050 --> 00:01:53,595
And basically what it was doing was
Webpack was trying to understand

29
00:01:53,945 --> 00:01:57,665
which kind of environment this
module was actually running into.

30
00:01:58,015 --> 00:02:00,255
And depending on this
environment, if it was a Node.

31
00:02:00,255 --> 00:02:04,315
js environment or a browser
environment, would expose this module.

32
00:02:04,815 --> 00:02:10,735
After some time, in 2015, Webpack
was actually, was introduced.

33
00:02:11,155 --> 00:02:14,965
And Webpack's goal was to
create a dependency graph for

34
00:02:14,965 --> 00:02:17,964
all the assets of the website.

35
00:02:18,725 --> 00:02:22,835
It is not just JavaScript
Browserify, but it also includes

36
00:02:22,925 --> 00:02:26,885
CSS images, SBGs, even HTML.

37
00:02:27,385 --> 00:02:33,775
And what this enable enabled us to do
was actually break some node conventions

38
00:02:33,835 --> 00:02:38,605
and introduce code like this where
we were actually able to require CS

39
00:02:38,605 --> 00:02:42,140
files or SVG files into the JavaScript.

40
00:02:42,640 --> 00:02:46,490
And the reason Webpack did that
was for a few different reasons.

41
00:02:47,220 --> 00:02:50,810
Now, website assets can be
expressed as a dependency graph.

42
00:02:51,530 --> 00:02:55,500
And it becomes easy to define
components as a collection of

43
00:02:55,500 --> 00:02:58,730
HTML, CSS, JavaScript images, etc.

44
00:02:59,710 --> 00:03:04,160
As standalone modules that can be
easily reused or even published to npm.

45
00:03:04,660 --> 00:03:09,050
Hot module replacement, which is very
important for the development purposes,

46
00:03:09,590 --> 00:03:13,960
is easy and natural because we are based
on a JavaScript module system for assets.

47
00:03:14,580 --> 00:03:19,660
And even, for example, for stylesheets
can automatically be updated by injecting

48
00:03:19,680 --> 00:03:22,160
and replacing into the DOM via script.

49
00:03:22,660 --> 00:03:28,130
Finally, it is providing a lot of
configurability through loaders

50
00:03:28,130 --> 00:03:31,869
and plugins, meaning we can get the
benefits of an integrated module

51
00:03:31,880 --> 00:03:37,020
system without having to ship gigantic
JavaScript bundle to your users.

52
00:03:37,520 --> 00:03:40,270
And here you can actually
see the adoption of Webpack.

53
00:03:40,820 --> 00:03:43,290
The adoption has been amazing.

54
00:03:43,340 --> 00:03:46,930
most of the web projects
are using web app today.

55
00:03:47,260 --> 00:03:53,229
And you can see that lately has
actually reached 120 million

56
00:03:53,299 --> 00:03:55,350
downloads per month, the last.

57
00:03:55,850 --> 00:04:01,200
Even when I search just for
Webpack on NPM, you can see

58
00:04:01,200 --> 00:04:05,259
that it returns 6, 000 packages.

59
00:04:05,410 --> 00:04:09,300
So you can understand how big
this adoption has been and how

60
00:04:09,300 --> 00:04:13,820
many tools and modules have
been built related to Webpack.

61
00:04:14,320 --> 00:04:18,024
But this actually started
getting a bit out of hand.

62
00:04:18,475 --> 00:04:23,095
more difficult for us because
with web app, we started having

63
00:04:23,505 --> 00:04:28,845
different performance issues like
bundle sizes, really slow hot module

64
00:04:28,845 --> 00:04:33,985
replacement, with some tools like
react and production build times.

65
00:04:34,035 --> 00:04:34,825
And this.

66
00:04:35,325 --> 00:04:39,745
Resulted to a great amount of different
articles of how we can actually

67
00:04:39,775 --> 00:04:45,125
optimize and make the webpack bundling
and development server faster.

68
00:04:45,625 --> 00:04:49,235
This is when RxPack basically came in.

69
00:04:49,735 --> 00:04:54,685
RxPack was initially created to solve the
performance problems encountered by Dice.

70
00:04:55,280 --> 00:04:59,300
Bytance is a very big company,
you can, you might have heard

71
00:04:59,350 --> 00:05:04,230
them before, for TikTok or CapCut,
they're actually building quite

72
00:05:04,230 --> 00:05:06,420
many different tools and products.

73
00:05:06,910 --> 00:05:11,280
And it's basically a tech
company that maintains many large

74
00:05:11,280 --> 00:05:15,250
monolithic application projects
with complex bundling requirements.

75
00:05:15,750 --> 00:05:21,990
The production build times have grown
a lot in Bidens, 10 times to even half

76
00:05:22,080 --> 00:05:26,850
hour in some cases, and cold start
times could exceed several minutes.

77
00:05:27,350 --> 00:05:30,310
This is how RSPack is actually pronounced.

78
00:05:30,810 --> 00:05:34,250
RSPack comes with a
great amount of benefits.

79
00:05:34,460 --> 00:05:39,300
It provides high performance for
bundling, a really fast startup time

80
00:05:39,320 --> 00:05:43,570
for your development server, light
and fast hot module replacement,

81
00:05:44,140 --> 00:05:46,430
for your development purposes.

82
00:05:46,950 --> 00:05:52,620
It comes with Webpack compatibility,
offering backwards compatibility with the

83
00:05:52,620 --> 00:05:55,630
configuration that we provided in Webpack.

84
00:05:56,130 --> 00:06:00,880
And it's also framework agnostic, which
means you can actually use it with

85
00:06:00,950 --> 00:06:05,750
tools like React, Vue, JS, Svelte, etc.

86
00:06:06,250 --> 00:06:10,540
And speaking of performance, as you
can see here, it is really fast.

87
00:06:11,040 --> 00:06:14,620
It's basically compared with a
combination of Webpack and Babel.

88
00:06:15,110 --> 00:06:20,510
It is way, way much faster and
also compared to more up to

89
00:06:20,520 --> 00:06:23,320
date bundling tooling like Vite.

90
00:06:23,820 --> 00:06:26,480
The community is really
excited about RSPack.

91
00:06:26,710 --> 00:06:31,296
You can see that even Repack, a tool
about bundling React Native code

92
00:06:31,296 --> 00:06:36,560
using Webpack, has actually tried
migrating to RSPack and found out

93
00:06:37,130 --> 00:06:41,285
five times faster build times and HMR.

94
00:06:41,785 --> 00:06:46,135
The reason RSPack is so fast
it is because it is based on

95
00:06:46,135 --> 00:06:47,895
Rust and is written in Rust.

96
00:06:48,085 --> 00:06:53,165
Rust language efficiency is designed to
prioritize performance topping benchmarks

97
00:06:53,615 --> 00:06:55,375
for speed and memory management.

98
00:06:55,975 --> 00:07:00,560
it is highly parallelized
architecture, where JavaScript is

99
00:07:00,560 --> 00:07:02,270
a weak support for multi threading.

100
00:07:02,790 --> 00:07:08,740
RSPack's native code takes full
advantage of the modern multicore CPUs.

101
00:07:09,540 --> 00:07:16,080
And this is how RSPack actually
generates binary native code.

102
00:07:16,420 --> 00:07:19,280
So the native code that runs
in your operating system.

103
00:07:20,060 --> 00:07:24,950
And the way that SPAC actually does
that is through a tool that is called

104
00:07:25,190 --> 00:07:31,190
Nappy Rs, which is a framework for
building pre-compiled no JS ADONs in RAs.

105
00:07:32,180 --> 00:07:38,380
And what it does, it actually generates
the native code that you run in your

106
00:07:38,500 --> 00:07:44,300
system, in your operating system, and
an OJS library that you can use in

107
00:07:44,310 --> 00:07:51,040
your application, like an SDK, that can
communicate with the Rust implementation

108
00:07:51,250 --> 00:07:53,180
that has been exposed in this native code.

109
00:07:53,680 --> 00:07:59,050
It comes with a great amount of
features, like built in CSS support,

110
00:07:59,470 --> 00:08:04,615
even for CSS modules, This is currently
experimental, but you can still use it

111
00:08:04,615 --> 00:08:09,905
and it's very good support for built in
support for asset management, like for

112
00:08:09,905 --> 00:08:16,955
example, PNG files, SVG files, JPEG,
even JSON files, also web workers.

113
00:08:17,455 --> 00:08:24,095
And it also provides different
loaders for TypeScript and JSX for

114
00:08:24,095 --> 00:08:31,495
CSS, as I mentioned before, a lot
of plugins for HTML or CSS Extract

115
00:08:31,495 --> 00:08:37,425
plugin, for example, the hot module
replacement is really easy to implement.

116
00:08:37,985 --> 00:08:42,495
Now, for example, with react or
any other tools, it also provides

117
00:08:42,565 --> 00:08:46,615
a lot of optimizations that you
don't need to configure, like

118
00:08:46,655 --> 00:08:51,125
code splitting and reshaping as it
are, they are offered by default.

119
00:08:51,675 --> 00:08:56,015
And of course, module federation
version two, which is actually a great

120
00:08:56,115 --> 00:08:59,675
amount of work, for this ecosystem.

121
00:09:00,175 --> 00:09:04,345
But you might be wondering, that's
all great, but how can I actually

122
00:09:04,435 --> 00:09:06,435
migrate from Webpack to RSPack?

123
00:09:07,325 --> 00:09:10,855
We can start with some of the
dependencies, so you can actually

124
00:09:10,925 --> 00:09:16,285
add RSPack core and RSPack CLI
to your development dependencies,

125
00:09:16,725 --> 00:09:21,105
and then you can actually remove
Webpack CLI, and Webpack dev server.

126
00:09:21,605 --> 00:09:26,980
Then, in your packagation, in
your npm scripts, You can replace

127
00:09:27,050 --> 00:09:33,640
Webpack CLI from using to RSPack
and this is like very simple.

128
00:09:34,060 --> 00:09:39,060
You just change the command that you
run, but you can actually use it with

129
00:09:39,060 --> 00:09:42,550
the same API and configuration options.

130
00:09:43,465 --> 00:09:47,745
And finally, what you need to do
is rename your webpack config.

131
00:09:47,745 --> 00:09:50,805
js file to rspack config.

132
00:09:50,915 --> 00:09:51,675
js.

133
00:09:52,165 --> 00:09:54,465
And I think that's all.

134
00:09:55,325 --> 00:09:57,515
We are, this is the
presentation for today.

135
00:09:57,975 --> 00:10:00,755
That's actually a joke, a
really bad joke, sorry for that.

136
00:10:01,165 --> 00:10:05,545
But still, you can
actually, this is enough.

137
00:10:05,915 --> 00:10:11,635
For you to start using, RSVAP and this
is the magic of it because it is very

138
00:10:11,635 --> 00:10:16,785
simple to, to do it and you can start
getting the performance benefits out of it

139
00:10:16,835 --> 00:10:22,875
very, simply with this kind of migration,
depending on your configuration,

140
00:10:22,905 --> 00:10:27,795
you might need to make some more
adjustments and we're going to see now

141
00:10:27,855 --> 00:10:31,925
what are these kinds of configurations
that, we will need to adjust.

142
00:10:32,425 --> 00:10:37,245
First of all, loaders, RSpack loader,
runner is fully compatible with

143
00:10:37,245 --> 00:10:38,795
Webpack's loader functionality.

144
00:10:39,235 --> 00:10:43,865
It is supporting the vast majority of
Webpack loaders, and, you can use your

145
00:10:43,875 --> 00:10:46,315
existing loaders without any changes.

146
00:10:47,285 --> 00:10:52,235
But in order to get the benefits of RSpack
and the REST implementation it comes with,

147
00:10:52,275 --> 00:10:54,205
you will need, for example, to change.

148
00:10:54,700 --> 00:10:58,420
The bubble loader to
built in SD SWC loader.

149
00:10:58,570 --> 00:11:06,240
This is a loader that is, written in
rust, by our team and, is providing

150
00:11:06,270 --> 00:11:08,130
much, much better performance.

151
00:11:09,080 --> 00:11:13,040
And the way that you can do that, for
example, is you might have such a web

152
00:11:13,130 --> 00:11:19,920
configuration with, A TSX and a JSX loader
using bubble and some presets depending.

153
00:11:20,335 --> 00:11:27,465
on your files and then what you need to
do is basically migrate that to using

154
00:11:27,485 --> 00:11:33,655
the built in SWC loader that provides
support for both TypeScript and JSX.

155
00:11:34,625 --> 00:11:39,715
and using built in SWC loader offers
better performance, as I said, compared

156
00:11:39,715 --> 00:11:45,885
to the Babel loader and the external
SWC loader, as it avoids frequent

157
00:11:45,885 --> 00:11:48,475
communication between JavaScript and Rust.

158
00:11:48,975 --> 00:11:54,675
You will also need to change some of these
loaders like the file loader to the asset

159
00:11:54,765 --> 00:12:01,165
resource, the URL loader to asset inline,
and the row loader to asset source.

160
00:12:02,155 --> 00:12:07,955
Asset resource converts an asset to a
separate file and exports the URL address.

161
00:12:08,455 --> 00:12:14,685
The AssetInline converts an asset
to a data URI using Base64 encoding.

162
00:12:15,395 --> 00:12:21,195
At the moment, no other codings
are supported, but later on

163
00:12:21,205 --> 00:12:22,495
we might have more of them.

164
00:12:23,145 --> 00:12:28,265
And AssetSource converts and exports
the asset file as a raw string.

165
00:12:28,765 --> 00:12:31,445
When we actually say about
plugins, we mean built in plugins

166
00:12:32,025 --> 00:12:33,505
and also community plugins.

167
00:12:34,215 --> 00:12:39,165
RSPack has implemented most of the
Webpack's built in plugins with the same

168
00:12:39,165 --> 00:12:45,515
name and configuration parameters allowing
for easy replacement, and also supports

169
00:12:45,525 --> 00:12:49,765
most of the Webpack community plugins
and also offer alternative solutions

170
00:12:49,775 --> 00:12:52,045
for some currently unsupported ones.

171
00:12:52,545 --> 00:12:56,995
So for example, in Webpack configuration,
if you're using defined plugin,

172
00:12:57,075 --> 00:13:04,395
you can actually Migrate to RSPack
1 by changing the import and also

173
00:13:04,435 --> 00:13:06,955
changing the reference to RSPack 1.

174
00:13:07,815 --> 00:13:08,505
And this is very simple.

175
00:13:09,005 --> 00:13:15,365
Similarly, you might be using, your
HTML, the HTML Webpack plugin, which

176
00:13:15,365 --> 00:13:20,475
is a way for you to integrate HTML
into your Webpack configuration.

177
00:13:21,095 --> 00:13:26,685
This plugin is supported in RSPack as
well, but if you want to get the benefits

178
00:13:26,715 --> 00:13:32,715
of the Rust based implementation of the
same plugin, you can actually reference

179
00:13:32,755 --> 00:13:35,275
to the RSPack implementation of it.

180
00:13:35,995 --> 00:13:40,325
this is implemented in Rust, and its
build performance is significantly

181
00:13:40,335 --> 00:13:42,750
better than HTML Webpack plugin.

182
00:13:43,220 --> 00:13:48,720
There's some differences between
those two plugins, just to be

183
00:13:48,720 --> 00:13:54,170
aware, but for the majority of
the purposes will fit your needs.

184
00:13:54,670 --> 00:13:59,570
RxSpack team has done a great job
in documenting all these, available

185
00:13:59,720 --> 00:14:05,650
plugins that you can use with RxSpack
and you can find them in this page

186
00:14:05,660 --> 00:14:07,380
over here in the documentation.

187
00:14:07,880 --> 00:14:13,440
But like any migration, there
are some caveats and these are

188
00:14:13,440 --> 00:14:17,225
related mostly to SCSS modules.

189
00:14:17,725 --> 00:14:20,495
I don't know if you're familiar
with this error, with this warning.

190
00:14:20,565 --> 00:14:23,945
this is basically happening
when, the default export is not

191
00:14:23,945 --> 00:14:25,755
available when you import a module.

192
00:14:26,315 --> 00:14:30,404
This is usually happening,
in a React project.

193
00:14:30,434 --> 00:14:36,015
For example, when you import the
styles from your CSS module like this,

194
00:14:36,455 --> 00:14:41,985
and then you're able to provide the
class names, to your JSX elements.

195
00:14:42,540 --> 00:14:43,350
Like this.

196
00:14:43,990 --> 00:14:47,670
so by default, this is going to be the
error that you're going to be facing.

197
00:14:47,670 --> 00:14:48,750
This is the warning.

198
00:14:48,780 --> 00:14:54,449
this warning is there because the
compilation will still be successful.

199
00:14:54,889 --> 00:14:59,020
But when you run the application in
your browser, you will actually see the

200
00:14:59,060 --> 00:15:01,259
application without any styles applied.

201
00:15:02,079 --> 00:15:07,400
And what you would need to do in order to
change that is actually change your source

202
00:15:07,410 --> 00:15:11,170
code from importing the default export.

203
00:15:11,670 --> 00:15:14,360
To, to import everything
as an alias of styles.

204
00:15:14,860 --> 00:15:20,310
But as I'm not a fan of basically,
changing your source code because

205
00:15:20,310 --> 00:15:25,159
you're basically migrating to a new
tool from Webpack to RSPack, I would

206
00:15:25,159 --> 00:15:28,659
prefer to do that with the tool itself.

207
00:15:29,330 --> 00:15:34,320
The way that you can do that is by
enabling the built in support of

208
00:15:34,320 --> 00:15:37,204
CSS, which is still experimental in
RSPack, but it's still experimental.

209
00:15:37,855 --> 00:15:41,885
And this is actually how you can
actually, you can enable and try

210
00:15:41,885 --> 00:15:45,795
out some experimental features in
RSPack with experiments object.

211
00:15:46,545 --> 00:15:51,235
Once enabled, RSPack will enable
native support and CSS related

212
00:15:51,324 --> 00:15:54,265
parsers and generator options.

213
00:15:54,765 --> 00:15:59,775
Then you will be able to define this
kind of configuration for generator and

214
00:15:59,795 --> 00:16:07,105
parser by disabling the named exports
when you parse the CSS related files.

215
00:16:07,575 --> 00:16:12,895
And also by disabling the ES modules
For this reason, then you will be able

216
00:16:12,895 --> 00:16:19,855
to define your loaders for SCSS files
by using the SaaS loader, which is not

217
00:16:20,065 --> 00:16:22,695
built in, supported, in our respect.

218
00:16:23,235 --> 00:16:25,790
so you will still need to
define this kind of loader.

219
00:16:26,505 --> 00:16:32,505
And you need to define the type CSS
auto, which helps RSPAC understand

220
00:16:32,505 --> 00:16:39,465
that these, these files can actually
be either CSS or CSS modules, and it

221
00:16:39,465 --> 00:16:44,604
can, actually decide which of them,
should, how it should handle its case.

222
00:16:45,544 --> 00:16:46,354
then you can.

223
00:16:47,319 --> 00:16:53,849
Change your CSS, loader to just type
CSS and, RSpec will take care of loading

224
00:16:53,859 --> 00:16:58,739
your CSS files in the, in your code base.

225
00:16:59,649 --> 00:17:03,199
And since you're actually now
have the built in support, you

226
00:17:03,199 --> 00:17:08,129
can actually entirely remove
the CSS loader for that purpose.

227
00:17:08,629 --> 00:17:12,219
This behavior I would like to
see be supported by default.

228
00:17:12,219 --> 00:17:15,649
And this is something that I have
raised with our respect team before.

229
00:17:16,069 --> 00:17:22,489
And I would be very happy for you if
you're able to support this kind of

230
00:17:22,989 --> 00:17:28,684
approach, because it could be really
important for us To be able to use,

231
00:17:28,934 --> 00:17:34,774
SSS modules without the need to do all
this extra configuration in RSPack.

232
00:17:35,744 --> 00:17:39,544
And, with Bit we basically
have helped a lot of customers

233
00:17:39,574 --> 00:17:41,144
migrate to RSPack already.

234
00:17:41,144 --> 00:17:47,284
We have seen at least three times faster
build times, if not five, in some cases.

235
00:17:47,674 --> 00:17:51,264
And basically the way that
we've done that is with, a tool

236
00:17:51,264 --> 00:17:52,204
that is called Configimitator.

237
00:17:52,274 --> 00:17:52,764
Configimitator.

238
00:17:53,599 --> 00:17:57,329
which helps you migrate to
RSPAC much, much easier.

239
00:17:58,129 --> 00:18:01,779
You can imagine that usually this
is a configuration that you would

240
00:18:01,779 --> 00:18:03,919
need with RSPAC, for example.

241
00:18:04,209 --> 00:18:09,619
But what if, instead of all this
configuration, you were able to write

242
00:18:09,619 --> 00:18:17,009
something simpler, just like this, which
is by importing the RSPAC config imitator.

243
00:18:17,819 --> 00:18:22,519
Then you can actually initialize this
new data and can start creating your

244
00:18:22,519 --> 00:18:28,039
own configuration with a much more
descriptive language, like setting

245
00:18:28,069 --> 00:18:32,989
the mode to development, adding the
CSS, the TypeScript support, and even

246
00:18:33,039 --> 00:18:39,899
React support, if needed, by providing
this extra parameter, adding the CSS

247
00:18:39,929 --> 00:18:44,079
modules without the need to know the
internals of how our Spark works.

248
00:18:44,334 --> 00:18:50,794
is actually working under the hood and,
also providing SCSS support, without

249
00:18:51,404 --> 00:18:56,054
the need to configure the generators,
the parser or everything like that.

250
00:18:56,574 --> 00:18:59,394
And what is the benefit of this tool?

251
00:18:59,504 --> 00:19:04,434
It can even use Your own configuration,
the configuration that you have, you

252
00:19:04,464 --> 00:19:10,824
already, provided, your own custom
configuration and updated based on

253
00:19:10,834 --> 00:19:14,704
your needs, for example, by adding the
TypeScript support, with React or not,

254
00:19:14,884 --> 00:19:17,304
or CSS modules and everything like that.

255
00:19:17,804 --> 00:19:21,844
And, you can actually find
this config mutator, this tool,

256
00:19:22,004 --> 00:19:24,334
it is documented on Bitcloud.

257
00:19:24,644 --> 00:19:29,054
This is a link where you can actually
find out and learn more about how you

258
00:19:29,054 --> 00:19:33,834
can actually start using this tool, how
you can, start migrating using this tool.

259
00:19:34,334 --> 00:19:37,344
And this is basically the way
that we have helped a lot of

260
00:19:37,344 --> 00:19:40,014
customers migrate to RSPack already.

261
00:19:40,514 --> 00:19:46,714
Finally, RSpack is the building
block for a great amount of web

262
00:19:46,724 --> 00:19:49,304
infrastructure that RSpack team provides.

263
00:19:49,884 --> 00:19:55,474
On top of RSpack, we have rsbuild,
rspress, rsdoctor, and rslib.

264
00:19:56,039 --> 00:19:58,829
Which are few different
tools for different purposes.

265
00:19:58,879 --> 00:20:03,829
RS Build is a tool that provides an out
of the box setup for development purposes.

266
00:20:04,459 --> 00:20:07,249
RPR is a static site generation tool.

267
00:20:07,439 --> 00:20:13,229
RS Doctor is basically a great
tool for analyzing and visualizing

268
00:20:13,289 --> 00:20:15,269
the build process and artifacts.

269
00:20:15,749 --> 00:20:17,789
And R Lib is a build tool.

270
00:20:18,189 --> 00:20:20,369
Mostly targeting to lib authors.

271
00:20:20,869 --> 00:20:23,689
And with that, I think
that's all for today, folks.

272
00:20:23,829 --> 00:20:25,359
Thank you for joining me today.

273
00:20:25,409 --> 00:20:26,599
I really appreciate it.

274
00:20:26,669 --> 00:20:29,299
And I hope you learned
something new today.

275
00:20:30,169 --> 00:20:30,919
Thank you very much.

276
00:20:31,429 --> 00:20:31,969
Bye.

