1
00:00:00,500 --> 00:00:01,250
Hi everyone.

2
00:00:01,310 --> 00:00:05,870
I'm Prashan Koju, a network engineer
with our of experience in designing,

3
00:00:06,650 --> 00:00:09,860
deploying, and securing large
scale network infrastructures.

4
00:00:10,250 --> 00:00:14,240
I've worked on everything from
Enterprise Land one setups to data

5
00:00:14,240 --> 00:00:16,880
center networking, wireless optimization.

6
00:00:17,314 --> 00:00:22,774
As d integration, network automation and
zero zero trust, security architectures.

7
00:00:23,104 --> 00:00:26,884
So my main focus is on building
reliable, scalable, and security

8
00:00:26,884 --> 00:00:31,344
systems for telecom, industrial
control and education networks.

9
00:00:31,674 --> 00:00:36,565
So today I'm thrilled to be here at Comm
42 and a huge thanks to Mark and his

10
00:00:36,565 --> 00:00:41,215
team for this opportunity to connect
with such an amazing global community.

11
00:00:41,470 --> 00:00:45,689
Okay, today we are diving into
why rust programming language is

12
00:00:45,689 --> 00:00:47,849
transforming network infrastructure.

13
00:00:48,209 --> 00:00:52,709
We'll explore how Rust delivers
unmatched speed, safety, and

14
00:00:52,709 --> 00:00:54,599
reliability for critical systems.

15
00:00:54,699 --> 00:00:55,529
Let's get started.

16
00:00:56,029 --> 00:00:57,814
So here's our roadmap for today.

17
00:00:57,964 --> 00:01:01,895
We'll see like in Introduction to
Rust for networks, like why Rust is a

18
00:01:01,895 --> 00:01:03,635
game changer for network engineering.

19
00:01:04,354 --> 00:01:08,044
And then we'll go through some rust
based network architectures, how

20
00:01:08,044 --> 00:01:12,365
it's built, layered, and tested
with all the durable components.

21
00:01:12,815 --> 00:01:15,755
And then we'll go through
at the SST n integration and

22
00:01:15,755 --> 00:01:18,634
optimization techniques using rust.

23
00:01:19,234 --> 00:01:23,570
And then we will see how AI
driven monitoring and tools are.

24
00:01:23,945 --> 00:01:26,164
Aligned and synchronized using rust.

25
00:01:26,675 --> 00:01:30,304
And then we'll go through some zero
trust security implementations.

26
00:01:30,664 --> 00:01:34,475
And last, we'll go through some
case studies and a few takeaways

27
00:01:34,925 --> 00:01:36,835
and key things regarding rust.

28
00:01:37,335 --> 00:01:39,554
So why rust for network infrastructure?

29
00:01:39,764 --> 00:01:43,575
Rust is revolution revolutionizing
how we build networks.

30
00:01:44,064 --> 00:01:49,095
The thing is his why, number one is
memory, safety and and also the fast

31
00:01:49,095 --> 00:01:54,555
performance and then coming to the
cones, concurrency, safety, and also the

32
00:01:54,555 --> 00:01:59,555
compiled time, which guarantees rust is
the best in the current networking world.

33
00:02:00,065 --> 00:02:01,985
So coming to the memory safety.

34
00:02:02,390 --> 00:02:04,640
Rust ownership model and borrow checker.

35
00:02:04,640 --> 00:02:10,430
Eliminate bugs like dangling pointers,
use after free errors and data races.

36
00:02:10,850 --> 00:02:16,100
This ensures predictable behavior,
even under intense multi-threaded

37
00:02:16,100 --> 00:02:19,154
workloads and also rust zero cost.

38
00:02:19,334 --> 00:02:24,795
Abstractions delivers CC plus
level speed ideal for latency, and

39
00:02:24,795 --> 00:02:29,714
still tasks like packet processing
where every microsecond counts.

40
00:02:30,255 --> 00:02:34,455
And then coming to the concurrency
safety rust do handle tens of thousands

41
00:02:34,455 --> 00:02:39,265
of simultaneous connections without
risking undefined behavior which

42
00:02:39,265 --> 00:02:44,305
is like perfect for load balancers,
proxies, and SDN controllers.

43
00:02:44,805 --> 00:02:48,825
And then we'll see the compiled
time, how rust is different from

44
00:02:48,855 --> 00:02:50,385
other programming languages.

45
00:02:50,775 --> 00:02:54,675
So it's a strong static
type ecosystem that catches.

46
00:02:55,035 --> 00:02:58,845
Protocol and configuration
arrest before the hit production.

47
00:02:59,145 --> 00:03:04,185
Reducing the runtime failures,
so Russ Ecosystem with tools like

48
00:03:04,515 --> 00:03:09,795
Tokyo Hyper Tonic and makes it
practical to build high throughput.

49
00:03:10,275 --> 00:03:15,555
Basically, production grade network
services and also adoption of using rust

50
00:03:15,555 --> 00:03:20,355
has been searched in the last three, four
years in telecom, in data center sectors,

51
00:03:20,595 --> 00:03:22,940
and also some industrial control over.

52
00:03:23,739 --> 00:03:28,640
The past few years, which is, and rust
is also good for maturing support for

53
00:03:28,640 --> 00:03:31,700
SGN Telemetry and Zero Trust frameworks.

54
00:03:32,219 --> 00:03:34,589
Some might ask why not stick with CC plus?

55
00:03:34,949 --> 00:03:40,289
Rust matches the same speed, but
it adds more safety built features.

56
00:03:40,349 --> 00:03:44,159
And also it's critical in infrastructure
where downtime isn't an option.

57
00:03:44,659 --> 00:03:48,979
So what is the Russ Base Network
architecture and you know how it works.

58
00:03:49,079 --> 00:03:53,249
Russ, let us build in modular
type safe network architectures

59
00:03:53,579 --> 00:03:55,529
that are robust and scalable.

60
00:03:56,249 --> 00:03:58,469
Let's say like type safe configurations.

61
00:03:58,679 --> 00:04:03,329
We use compiled time validated
templates to prevent misconfigurations

62
00:04:03,599 --> 00:04:05,039
before they even reach the network.

63
00:04:05,539 --> 00:04:07,429
So in layer two or layer three switching.

64
00:04:08,149 --> 00:04:10,459
We use a deterministic approach.

65
00:04:10,819 --> 00:04:16,189
And then the resource allocation ensures
low latency performance under heavy loads.

66
00:04:16,699 --> 00:04:22,629
And then we coming to the wireless
optimization, rust powers, mu algorithms

67
00:04:22,629 --> 00:04:26,349
for realtime channel allocation, and
also it maximizes the throughput.

68
00:04:27,109 --> 00:04:31,490
And the last, but not least, it's
the latest as the Cisco cloud-based

69
00:04:31,490 --> 00:04:34,310
platforms like Cisco Meraki, our.

70
00:04:35,100 --> 00:04:38,260
Cisco, FMC you can use in
monitoring tools as well.

71
00:04:38,560 --> 00:04:43,659
So US asing capabilities via Tokyo
deliver real time visibility and gives a

72
00:04:43,659 --> 00:04:45,940
better control across the infrastructure.

73
00:04:46,810 --> 00:04:49,500
And some might ask, what
is the measurable impact?

74
00:04:49,570 --> 00:04:54,280
We have recently deployed in a large
scale modernization project for NYC

75
00:04:54,280 --> 00:04:58,000
public schools, where we have seen
rust based provisioning scripts for

76
00:04:58,210 --> 00:05:00,460
40% faster than the traditional setups.

77
00:05:01,225 --> 00:05:05,605
And it made a significant
boost in deploying efficiency.

78
00:05:06,105 --> 00:05:09,285
Coming to the next one, which is the
SDN Integration and Hybrid Cloud,

79
00:05:09,285 --> 00:05:11,295
like how rust is aligned with this.

80
00:05:11,685 --> 00:05:16,335
So rust science in software defined
networking and hybrid cloud environments.

81
00:05:16,935 --> 00:05:19,575
So the dynamic provisioning, Russ Tokyo.

82
00:05:20,049 --> 00:05:24,219
As sync runtime enables non-blocking
and eliminates any bottlenecks during

83
00:05:24,219 --> 00:05:29,349
the resource allocation and reclamation
and coming to the traffic optimization

84
00:05:29,454 --> 00:05:33,744
it is the best for precise timing
controls, ensuring the QS policies,

85
00:05:33,744 --> 00:05:38,214
like the quality of service, prioritize
latencies sensitive applications like

86
00:05:38,214 --> 00:05:43,924
video streaming are critical networks
like Scda or BMS or Delta V Networks.

87
00:05:44,424 --> 00:05:48,684
And also the seamless security,
which is the top tire in Russ.

88
00:05:49,074 --> 00:05:54,294
It's basically, zero cost abstractions,
power VLANs, and 8 0 2 0.1 x

89
00:05:54,294 --> 00:05:58,254
authentication, balancing robust
production and high performance.

90
00:05:58,644 --> 00:06:04,154
The 8 0 1 x authentication we can
definitely use in Cisco ice, or

91
00:06:04,184 --> 00:06:06,404
we can align with Cisco as well.

92
00:06:06,404 --> 00:06:07,754
So rust script.

93
00:06:08,099 --> 00:06:11,249
Do support with Cisco ICE
and also Cisco umbrella.

94
00:06:11,859 --> 00:06:15,429
So by integrating everything with
the SDN controllers, like owners, our

95
00:06:15,489 --> 00:06:20,319
OpenDaylight trust do enable automated
provisioning, intelligent traffic

96
00:06:20,319 --> 00:06:22,929
engineering, and rapid reconfiguration.

97
00:06:23,429 --> 00:06:26,249
And then the coming to the next
step, which is the AI driven

98
00:06:26,249 --> 00:06:28,139
and monitoring and analytics.

99
00:06:28,439 --> 00:06:30,869
So we'll go through like how rust.

100
00:06:31,424 --> 00:06:33,644
Works in AI monitoring and tools.

101
00:06:33,914 --> 00:06:37,484
So rust machine learning
ecosystems, power powers, real time

102
00:06:37,484 --> 00:06:39,194
analytics with minimal latency.

103
00:06:39,694 --> 00:06:43,324
And the anomaly detection is very
fast and accurate within the systems.

104
00:06:43,324 --> 00:06:46,054
That catches the issues
before they escalate.

105
00:06:46,234 --> 00:06:50,564
So rather than rather than, an
issue triggering after a day or,

106
00:06:50,614 --> 00:06:54,894
a certain amount of time, RAs well
simply, it triggers the alert.

107
00:06:55,209 --> 00:06:57,429
And then you know, you will
get instant alert and then you

108
00:06:57,429 --> 00:06:58,569
know you can be on top of it.

109
00:06:59,139 --> 00:07:02,889
And then also the automated audits,
rust compares live configurations

110
00:07:02,889 --> 00:07:08,169
against baselines streaming telemetry
via SNMV three and NetFlow, and

111
00:07:08,169 --> 00:07:09,969
also the predictor analysis.

112
00:07:10,179 --> 00:07:14,889
Forecasting minimizes false positives
and supports smarter city planning,

113
00:07:15,369 --> 00:07:17,529
and also smarter capacity planning.

114
00:07:17,829 --> 00:07:18,579
So rust ability.

115
00:07:19,569 --> 00:07:23,379
To process high volume data streams
in real time, turns insights into

116
00:07:23,379 --> 00:07:28,369
immediate action, which is a great
beneficiary to all the networking people.

117
00:07:28,869 --> 00:07:31,419
So the next one is the zero
trust security, like how

118
00:07:31,419 --> 00:07:33,849
RAs is changing changing it.

119
00:07:34,119 --> 00:07:37,419
So as everybody knows that
how, what is zero trust?

120
00:07:37,419 --> 00:07:42,069
Zero trust is basically never trust,
always verify, so rust makes it

121
00:07:42,069 --> 00:07:44,079
practical, we use the microsegmentation.

122
00:07:44,079 --> 00:07:47,319
We are a flight and trust sec
backed by rust type system, which

123
00:07:47,319 --> 00:07:49,149
ensures configuration integrity.

124
00:07:49,509 --> 00:07:54,169
And then we do use the identity based
access, which is the A oh 2.1 X and

125
00:07:54,169 --> 00:07:58,789
certificate authentication, coded in
memory safe rust, and eliminate common

126
00:07:58,789 --> 00:08:03,529
attack vectors, where this is one of the
key sections, like identity based access.

127
00:08:03,889 --> 00:08:05,479
We can definitely use a Cisco.

128
00:08:06,259 --> 00:08:11,169
Identity services engine, or we can
use Cisco umbrella where the external

129
00:08:11,169 --> 00:08:16,069
networks or the external vendor is
trying to get into your network.

130
00:08:16,159 --> 00:08:18,019
That's where Cisco umbrella
comes into picture.

131
00:08:18,349 --> 00:08:22,759
And the Cisco is where, it's the
endpoint security for your organization.

132
00:08:23,029 --> 00:08:27,199
Like it can be your phone, it
can be your laptop, it can be any

133
00:08:27,439 --> 00:08:29,539
Linux workstation or any operating.

134
00:08:29,959 --> 00:08:31,849
Device within your organization.

135
00:08:32,209 --> 00:08:33,979
And the next thing is the encryption.

136
00:08:34,249 --> 00:08:38,399
So the, we use the TLS and IP
six tunnels which uses formally

137
00:08:38,399 --> 00:08:42,179
verified rust cryptography
libraries for proven security.

138
00:08:42,679 --> 00:08:47,279
And on top of that, we have the continuous
monitoring capacity where lightweight

139
00:08:47,279 --> 00:08:51,929
threading enables constant trust
evaluation without the performance hits.

140
00:08:52,349 --> 00:08:56,729
So tools like Zscaler, integrate
seamlessly with rust based components.

141
00:08:57,074 --> 00:08:59,954
Ensuring robust and high speed security.

142
00:09:00,454 --> 00:09:03,904
So now we'll go through some
case studies the case studies

143
00:09:03,904 --> 00:09:05,554
from the educational system.

144
00:09:05,554 --> 00:09:08,914
So we have deployed recently in a
couple of borough in New York City

145
00:09:09,414 --> 00:09:14,974
around 75 locations where we have
successfully post to 50,000 endpoints.

146
00:09:15,024 --> 00:09:18,069
This is a one to one initiative
program for classroom connectivity.

147
00:09:18,984 --> 00:09:22,464
And we have segmented all the
VLANs, for admin, student, iot and

148
00:09:22,464 --> 00:09:23,994
all the other critical devices.

149
00:09:24,384 --> 00:09:28,194
And these were isolated through
security policies by using Russ.

150
00:09:28,374 --> 00:09:31,044
And the results we see
are like 99% of time.

151
00:09:31,464 --> 00:09:35,364
And we have seen a 47% reduction
in security instance, the

152
00:09:35,364 --> 00:09:37,134
provisioning, which is a key factor.

153
00:09:37,474 --> 00:09:40,804
78% provisioning time,
which is like really good.

154
00:09:41,194 --> 00:09:44,134
And then, even the bandwidth
utilization, we have improved a

155
00:09:44,134 --> 00:09:45,179
lot, which is like much better.

156
00:09:45,920 --> 00:09:48,170
Than our previous legacy infrastructure.

157
00:09:48,530 --> 00:09:54,879
So Russ delivered the reliability and
efficiency at its scale as we expected.

158
00:09:55,379 --> 00:09:58,639
And then the next one is, in a
different industrial facility.

159
00:09:58,639 --> 00:10:04,074
This is a biotech firm, where we have
built cyber resilient networks are

160
00:10:04,074 --> 00:10:06,385
the enterprise cyber resiliency, ECR.

161
00:10:06,865 --> 00:10:09,209
So we have used the
VRS based segmentation.

162
00:10:10,014 --> 00:10:15,414
And redundant pathways determining
the performance and also the backups.

163
00:10:15,844 --> 00:10:19,469
For this, we have seen the results
are are similar as expected.

164
00:10:19,680 --> 00:10:25,089
We have zero successful cyber intrusions,
and then we have the 99% up time.

165
00:10:25,089 --> 00:10:28,329
And the maximum latency we have
seen is somewhere from 12 to 15

166
00:10:28,329 --> 00:10:31,590
seconds for critical controls
which is like really good.

167
00:10:32,160 --> 00:10:36,030
So here in this case, rust
did ensure mission critical

168
00:10:36,030 --> 00:10:37,860
reliability and security as well.

169
00:10:38,580 --> 00:10:42,070
And then you might be some might be
asking, what are the implementation

170
00:10:42,070 --> 00:10:45,910
challenges, that we have seen
without hurdles, like basically

171
00:10:45,940 --> 00:10:48,820
adopting rust isn't without hurdles.

172
00:10:49,330 --> 00:10:54,070
So the legacy integration, older systems
often lack modern APIs as everybody knows.

173
00:10:54,550 --> 00:10:55,210
So Russ.

174
00:10:55,585 --> 00:11:00,385
Capabilities, safely wrap, legacy
code, extending its lifespan and

175
00:11:00,385 --> 00:11:01,885
also the resource constraints.

176
00:11:01,915 --> 00:11:05,365
Incremental rollouts prioritize
high impact security components for.

177
00:11:05,865 --> 00:11:08,495
So you need to make sure, you
have to determine the approach.

178
00:11:08,495 --> 00:11:11,800
When you modernize your network
infrastructure, you have to make sure

179
00:11:11,885 --> 00:11:16,355
you have a clear picture of all the
end of life devices, try to evaluate

180
00:11:16,355 --> 00:11:18,245
and then, slowly deploy using rust.

181
00:11:18,455 --> 00:11:19,925
You can definitely see the results.

182
00:11:20,315 --> 00:11:23,805
And also the evolving threats in
the current infrastructure trend.

183
00:11:23,805 --> 00:11:29,145
The modular architectures allow targeted
batches and updates without down downtime.

184
00:11:29,805 --> 00:11:34,485
So rust flexibility definitely helps
you over time and also overcome

185
00:11:34,485 --> 00:11:35,925
these challenges effectively.

186
00:11:36,425 --> 00:11:38,615
And here we see the performance metrics.

187
00:11:38,615 --> 00:11:43,085
We can see the rust based implementations,
have been outperformed by traditional

188
00:11:43,235 --> 00:11:47,395
architectures, here you can see
a lower resource usage, reduced

189
00:11:47,395 --> 00:11:49,165
memory, and CP load, CPO load.

190
00:11:49,465 --> 00:11:54,235
Here we can see a faster
processing, a decreased requesting

191
00:11:54,235 --> 00:11:55,825
latency and higher throughput.

192
00:11:56,065 --> 00:11:57,865
And also you can see the cost savings.

193
00:11:58,105 --> 00:12:02,095
A leaner foot footprint
supports a seamless scalability.

194
00:12:02,425 --> 00:12:06,115
These gains obviously translate
into a tangible operational

195
00:12:06,125 --> 00:12:10,215
and financial benefits for your
organization down the line as well.

196
00:12:10,290 --> 00:12:10,320
Okay.

197
00:12:10,820 --> 00:12:13,350
And then here, what are the key takeaways?

198
00:12:13,450 --> 00:12:16,500
And the important things about
what we have learned in rust

199
00:12:16,540 --> 00:12:20,410
programming infrastructure is rust
is definitely a game changer for

200
00:12:20,410 --> 00:12:24,570
network infrastructure because of its
safety and performance, because the

201
00:12:24,600 --> 00:12:29,200
unmatched memory and concurrency safety
with C level speed that's that sound

202
00:12:29,260 --> 00:12:31,840
undoubtedly better and good results.

203
00:12:32,155 --> 00:12:36,175
And also the types of configurations,
which can prevent arrests before

204
00:12:36,175 --> 00:12:40,315
deployment rather than during the
deployment and causing a huge outage.

205
00:12:40,555 --> 00:12:45,315
Ru can definitely evaluate everything,
in a sandbox environment and do give

206
00:12:45,315 --> 00:12:47,785
you an upper hand in the visibility.

207
00:12:48,745 --> 00:12:52,695
And also coming to the zero trust we
have seen, it's practical high speed

208
00:12:52,695 --> 00:12:57,895
security and it's proven and also coming
to the air driven operations, it's

209
00:12:57,895 --> 00:12:59,330
proactive monitoring and analytics.

210
00:13:00,005 --> 00:13:02,195
Have given you an upper
hand on this as well.

211
00:13:02,555 --> 00:13:07,235
So the next steps obviously will
be, how you access have you access

212
00:13:07,235 --> 00:13:11,235
your current infrastructure, and
also identify the critical and high

213
00:13:11,235 --> 00:13:16,155
impact components for rust adoption
plan in a phase migration strategy

214
00:13:16,425 --> 00:13:21,195
rather than jumping jumping in the in,
in the fly and, causing any issues.

215
00:13:21,285 --> 00:13:24,935
And also start with monitoring for
immediate visibility gains like, try

216
00:13:24,935 --> 00:13:29,444
to have monitoring tools, let's say
for any bugs or, any power alerts

217
00:13:29,444 --> 00:13:33,814
or, any high throughput or, any
CRCR bandwidth errors within the

218
00:13:33,814 --> 00:13:36,604
uplinks or, within your optimization.

219
00:13:37,104 --> 00:13:41,364
To wrap up, you know what I can sell,
what I can say is Russ do empower

220
00:13:41,364 --> 00:13:45,514
us to build network infrastructures
that are fast and, that are fast and

221
00:13:45,514 --> 00:13:49,264
securable and also maintainable from
education to industrial systems.

222
00:13:49,504 --> 00:13:51,094
We have seen measurable results.

223
00:13:51,144 --> 00:13:54,604
Like higher up time, faster
provisioning and stronger security.

224
00:13:55,114 --> 00:13:59,284
So I would like to connect further
to discuss more on Rust Power Network

225
00:13:59,284 --> 00:14:03,884
networking share my insights and also
tackle any real world challenges.

226
00:14:04,214 --> 00:14:06,554
So thank you for your time and attention.

