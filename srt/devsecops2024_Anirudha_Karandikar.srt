1
00:00:00,190 --> 00:00:00,930
Hello everyone.

2
00:00:01,599 --> 00:00:05,500
A warm welcome at CON42
DevSecOps 2024 conference.

3
00:00:06,000 --> 00:00:08,130
APIs are like teenagers.

4
00:00:08,890 --> 00:00:11,619
They need constant supervision
or they will break the rules

5
00:00:11,620 --> 00:00:13,060
in ways you never imagined.

6
00:00:14,030 --> 00:00:16,629
That makes API security
sound more like parenting.

7
00:00:17,260 --> 00:00:20,719
It's challenging, it's hard,
and there are no guarantees.

8
00:00:21,219 --> 00:00:24,379
Welcome again to the talk on
API security in DevSecOps.

9
00:00:25,379 --> 00:00:26,799
A brief background about myself.

10
00:00:27,059 --> 00:00:30,529
I am Anirudh Karandikar, Principal
Software Engineer at Fortune 500 company.

11
00:00:31,029 --> 00:00:34,829
I am a full stack engineer with a niche
skill set in API management and have

12
00:00:35,009 --> 00:00:36,889
around 18 years of industry experience.

13
00:00:37,709 --> 00:00:42,329
As part of my work profile, I deal
with all phases of APIs, right

14
00:00:42,329 --> 00:00:44,099
from inception to governance.

15
00:00:44,949 --> 00:00:50,089
All the views and opinions expressed here
are based solely on my observation and

16
00:00:50,309 --> 00:00:54,919
in general industry research, and as such
have no binding on any of my employers.

17
00:00:55,634 --> 00:00:58,954
Having said that, let's
jump right into the agenda.

18
00:00:59,454 --> 00:01:02,894
So first and foremost, we'll see why
do we even need API security or why

19
00:01:02,894 --> 00:01:04,684
do we even care for API security.

20
00:01:05,564 --> 00:01:09,274
Then we'll take a look off about
what do we mean by security mindset.

21
00:01:10,064 --> 00:01:12,844
Then we'll gloss over some of
the security best practices in

22
00:01:12,844 --> 00:01:16,487
API design, development, testing,
release, operations, and monitoring.

23
00:01:16,487 --> 00:01:20,844
Basically, we'll walk through the
SDLC lifecycle of API management.

24
00:01:21,344 --> 00:01:22,884
So why API security?

25
00:01:23,284 --> 00:01:24,834
Let's take a look at a few of the stats.

26
00:01:25,334 --> 00:01:26,354
Rapid API growth.

27
00:01:26,444 --> 00:01:30,754
By 2025, over 80 percent of all
web traffic is expected to pass

28
00:01:30,754 --> 00:01:34,274
through APIs, making them a
vulnerable target for attackers.

29
00:01:34,774 --> 00:01:39,084
About 91 percent of organizations
have experienced some sort of an

30
00:01:39,124 --> 00:01:41,374
API security incident in last year.

31
00:01:41,869 --> 00:01:45,349
Underscoring the critical need
for proactive security measures.

32
00:01:45,849 --> 00:01:47,019
Cost of security flaws.

33
00:01:47,799 --> 00:01:52,279
It costs astonishingly 30 times more
to fix a security vulnerability in

34
00:01:52,279 --> 00:01:54,289
production than during design phase.

35
00:01:54,644 --> 00:01:57,804
Highlighting the importance
of early security integration.

36
00:01:58,304 --> 00:02:01,674
The underlying messages catch
them early, catch them often.

37
00:02:02,174 --> 00:02:03,854
Human errors in API security.

38
00:02:03,864 --> 00:02:05,414
This is a very important stat.

39
00:02:05,784 --> 00:02:09,314
Nearly 80 percent of API
vulnerabilities are caused either by

40
00:02:09,314 --> 00:02:11,644
misconfigurations or by coding mistakes.

41
00:02:12,144 --> 00:02:15,814
Proactive security majors are
needed in API development lifecycle.

42
00:02:15,854 --> 00:02:19,004
And we will take a look at a few
of these majors later in the talk.

43
00:02:19,504 --> 00:02:20,644
Rising API threats.

44
00:02:21,054 --> 00:02:23,874
APIs are becoming the most
targeted attack vector, exceeding

45
00:02:23,884 --> 00:02:25,684
web applications in frequency.

46
00:02:26,484 --> 00:02:32,054
Web applications held this crown for a
long time, but today APIs are numero uno.

47
00:02:32,554 --> 00:02:33,784
Security testing gaps.

48
00:02:34,054 --> 00:02:39,292
Despite the high risk, only 40 percent
of organizations test their APIs for

49
00:02:39,292 --> 00:02:40,276
vulnerabilities during development.

50
00:02:40,276 --> 00:02:42,898
Many systems remain exposed
to attacks post deployment.

51
00:02:42,898 --> 00:02:47,024
This underscores the need of
having security testing as part

52
00:02:47,074 --> 00:02:48,654
of the overall testing strategy.

53
00:02:49,154 --> 00:02:52,324
So now let's take a look at what
do we mean by security mindset.

54
00:02:52,324 --> 00:02:56,894
But before that, let's see
what DevSecOps advocates.

55
00:02:57,474 --> 00:03:02,004
So traditionally development, security
and operations have been its own silos.

56
00:03:02,694 --> 00:03:07,894
DevSecOps advocates a cultural
shift in which there is a need

57
00:03:07,894 --> 00:03:12,174
to break these silos and draw
synergies and collaboration between

58
00:03:12,174 --> 00:03:13,984
development, security and operations.

59
00:03:14,484 --> 00:03:18,339
Now, once you have this practice
established, What security mindset

60
00:03:18,339 --> 00:03:22,289
or security first principle means
it is it emphasizes embedding

61
00:03:22,289 --> 00:03:26,409
security at every stage of software
development lifecycle, ensuring that

62
00:03:26,409 --> 00:03:28,109
security is a shared responsibility.

63
00:03:28,909 --> 00:03:33,029
So the underlying fundamental tenet
is security cannot be an afterthought.

64
00:03:33,499 --> 00:03:36,959
It needs to be ingrained right from
its inception during planning and

65
00:03:36,959 --> 00:03:40,799
design and then carried through all
the subsequent stages be development,

66
00:03:40,809 --> 00:03:45,144
testing operations and monitoring with
the objective to proactively identify

67
00:03:45,174 --> 00:03:49,114
and mitigate the vulnerabilities
early in development, because as

68
00:03:49,114 --> 00:03:54,044
we saw earlier, the cost of fixing
security in production is very high.

69
00:03:54,544 --> 00:03:57,534
So let's take a look at a few of
the API design best practices.

70
00:03:57,614 --> 00:04:01,365
This is not an exhaustive list, but it
highlights some of the key security areas.

71
00:04:01,365 --> 00:04:04,674
So first and foremost is
authentication and authorization.

72
00:04:05,284 --> 00:04:10,359
Now it's a big topic in itself, but at
a very basic level, All the APIs need

73
00:04:10,359 --> 00:04:16,379
to solve for a need to validate their
API consumers and identify who they

74
00:04:16,429 --> 00:04:21,339
are and whether they have the right
privileges to access this particular

75
00:04:21,339 --> 00:04:23,569
endpoint and the data exposed by the API.

76
00:04:24,069 --> 00:04:28,234
Now, there is an OAuth specification that
explains quite in detail how to do this.

77
00:04:28,764 --> 00:04:31,764
As to how an authentication and
authorization should be implemented.

78
00:04:32,034 --> 00:04:35,694
And then there are identity providers
like Okta or Azure that have already

79
00:04:35,694 --> 00:04:38,554
implemented parts of this specification.

80
00:04:38,804 --> 00:04:44,094
So enterprises today can leverage any of
these IDPs to realize their authentication

81
00:04:44,094 --> 00:04:46,054
and authorization requirements.

82
00:04:46,554 --> 00:04:51,754
Data encryption, in the Veeam, in the
same Veeam of Authn and Authz, the next

83
00:04:51,754 --> 00:04:57,184
important step is to classify your APIs
based on the data that they are exposing.

84
00:04:57,824 --> 00:05:01,794
Now it could be restricted,
confidential, public, or internal API.

85
00:05:02,294 --> 00:05:06,864
Depending on that, the data
encryption needs need to be designed.

86
00:05:07,774 --> 00:05:11,054
Most of the enterprises today
are doing decent when it

87
00:05:11,054 --> 00:05:12,474
comes to encryption at rest.

88
00:05:12,984 --> 00:05:15,784
However, it's equally important to
encrypt the data during transit.

89
00:05:16,444 --> 00:05:21,004
If I were to take a case of rest APIs,
then H three t ps with DLS 1.2 is a given.

90
00:05:21,614 --> 00:05:24,614
But I would advocate even one step
further, and I would say that it

91
00:05:24,614 --> 00:05:26,324
needs to be explicitly encrypted.

92
00:05:26,964 --> 00:05:28,924
If you could use hybrid
encryption and good.

93
00:05:28,924 --> 00:05:33,404
If not, you can use a single
encryption, algorithm like a ES.

94
00:05:33,904 --> 00:05:38,634
What, is, an important nuance is
due to performance reason you may

95
00:05:38,634 --> 00:05:42,374
or may not be able to encrypt the
whole payload, in case of latter.

96
00:05:42,944 --> 00:05:47,304
It is imperative that you at least
encrypt the sensitive attributes, in

97
00:05:47,304 --> 00:05:48,524
the request and response payloads.

98
00:05:49,024 --> 00:05:50,074
Limit sensitive data.

99
00:05:50,534 --> 00:05:52,984
The underlying principle is,
reduce the attack surface.

100
00:05:53,534 --> 00:05:57,054
So design APS to return only
necessary data to users, minimizing

101
00:05:57,054 --> 00:05:58,614
exposure of sensitive information.

102
00:05:59,114 --> 00:06:00,174
Configuration management.

103
00:06:00,514 --> 00:06:04,724
We saw a stat earlier that about
80 percent of the incidents

104
00:06:04,724 --> 00:06:06,034
are caused by human errors.

105
00:06:06,035 --> 00:06:09,934
And configuration management is
one of the key reasons out of it.

106
00:06:10,524 --> 00:06:14,349
So during design, it is,
Very imperative to design.

107
00:06:14,909 --> 00:06:17,859
How are we going to
manage our configurations?

108
00:06:18,159 --> 00:06:21,479
And it's not only related to your APIs,
but configuration related to all the

109
00:06:21,479 --> 00:06:23,399
components that APIs interact with.

110
00:06:23,749 --> 00:06:26,269
Those could be your API
servers, databases, caches.

111
00:06:26,799 --> 00:06:31,459
Another good strategy to think about at
design time is how are you planning to

112
00:06:31,459 --> 00:06:34,949
propagate these configurations across
environments and up to production.

113
00:06:35,449 --> 00:06:36,189
Logging and observability.

114
00:06:36,689 --> 00:06:40,469
They say you can only protect or
secure what you can see and measure.

115
00:06:40,929 --> 00:06:45,449
So that makes logging and observability
a critical component of design.

116
00:06:46,339 --> 00:06:50,179
You absolutely need to have logging
frameworks and observability in place

117
00:06:50,479 --> 00:06:54,249
so as to monitor API usage, detect
anomalies, and enable forensics.

118
00:06:54,739 --> 00:06:55,949
However, it's a double edged sword.

119
00:06:56,759 --> 00:06:58,759
When it comes to logging, you
have to be careful that you

120
00:06:58,759 --> 00:07:00,149
are not logging sensitive data.

121
00:07:00,729 --> 00:07:04,489
If there is absolute need to log
sensitive data, then at the very

122
00:07:04,489 --> 00:07:09,429
least, that data needs to be masked and
then it needs to be stored securely.

123
00:07:10,089 --> 00:07:14,899
so that only the people who need to
have access to that data have access

124
00:07:15,219 --> 00:07:16,759
to that particular piece of data.

125
00:07:17,259 --> 00:07:17,839
Error handling.

126
00:07:18,549 --> 00:07:20,259
This is more for your presentation there.

127
00:07:20,589 --> 00:07:24,189
So use generic error messages to
avoid revealing implementation details

128
00:07:24,189 --> 00:07:26,249
while locking specifics securely.

129
00:07:27,219 --> 00:07:30,719
many attacks have been happened
because the error messages were too

130
00:07:30,719 --> 00:07:35,469
descriptive and hackers could find a
way to bypass those particular errors.

131
00:07:35,559 --> 00:07:38,449
So you have to be very careful,
especially if these error

132
00:07:38,449 --> 00:07:39,989
messages are getting exposed.

133
00:07:40,489 --> 00:07:41,129
Access control.

134
00:07:42,039 --> 00:07:46,209
Clearly define what are your
public APIs and internal APIs.

135
00:07:46,594 --> 00:07:49,274
Have this classification done
at the design time based on

136
00:07:49,384 --> 00:07:50,904
the very purpose of that API.

137
00:07:51,654 --> 00:07:55,669
Again, many attacks have been happened
because The APIs that were supposed to be

138
00:07:55,699 --> 00:08:01,819
internal were exposed on the internet and
by the very nature of it, they had less

139
00:08:01,849 --> 00:08:06,109
security guardrails around it and that was
exploited to gain access to the system.

140
00:08:06,609 --> 00:08:07,819
Rate limiting and throttling.

141
00:08:08,159 --> 00:08:12,369
This is a industry practice and
there are products that will help you

142
00:08:12,409 --> 00:08:14,019
achieve rate limiting and throttling.

143
00:08:14,829 --> 00:08:17,669
So implement rate limiting and
throttling to control request

144
00:08:17,669 --> 00:08:19,059
frequency and prevent abuse.

145
00:08:19,399 --> 00:08:22,539
This is basically to avoid the
risk of DDoS and DDoS attacks.

146
00:08:23,039 --> 00:08:25,009
Input validation and data sanitization.

147
00:08:25,579 --> 00:08:28,089
Yeah, this is again a well
established industry practice.

148
00:08:28,579 --> 00:08:31,869
Validate and sanitize all incoming
data to prevent injection attacks

149
00:08:31,889 --> 00:08:34,139
like SQL injection, XXS, and so on.

150
00:08:34,639 --> 00:08:36,129
Token expiry and refresh policies.

151
00:08:36,159 --> 00:08:37,639
This is a key call out.

152
00:08:38,089 --> 00:08:41,599
Set expiration times for tokens
and establish secure token

153
00:08:41,689 --> 00:08:43,539
refresh mechanism to limit misuse.

154
00:08:44,249 --> 00:08:48,509
Many attacks have happened
due to the long lived tokens.

155
00:08:48,809 --> 00:08:52,599
Tokens usually have access to
parts of the system and as long

156
00:08:52,609 --> 00:08:56,259
as they are not expired, they
have the risk of being exploited.

157
00:08:56,759 --> 00:08:57,659
API versioning.

158
00:08:58,379 --> 00:09:03,279
It is a good practice to have your
APIs versioned and to maintain

159
00:09:03,279 --> 00:09:06,299
a list of which consumers are
accessing which version of APIs.

160
00:09:06,859 --> 00:09:10,189
This is especially important if
you are releasing security fixes

161
00:09:10,259 --> 00:09:12,089
as part of your versioned APIs.

162
00:09:12,269 --> 00:09:17,329
And it is also a good practice to have
your API consumers move to your latest

163
00:09:17,459 --> 00:09:20,379
APIs and then deprecate the outdated APIs.

164
00:09:20,884 --> 00:09:26,364
Again, a lot of attacks have been happened
because the outdated APIs were running

165
00:09:26,364 --> 00:09:30,094
into production and those APIs were used
as a backdoor entry into the system.

166
00:09:30,594 --> 00:09:31,954
Secure API documentation.

167
00:09:32,784 --> 00:09:36,534
Restrict access to API documentation,
especially for private APIs.

168
00:09:36,964 --> 00:09:38,724
Limiting it to authenticated users.

169
00:09:39,349 --> 00:09:44,829
Again, it has been a finding that many
attacks have been happened due to the API

170
00:09:44,869 --> 00:09:46,989
documentation being exposed on the net.

171
00:09:47,509 --> 00:09:52,809
And that same documentation was used
to design well crafted attacks to

172
00:09:52,809 --> 00:09:54,369
bypass the security of those APIs.

173
00:09:54,869 --> 00:09:55,979
Minimum privilege principle.

174
00:09:56,299 --> 00:09:59,559
I think this is a general good
practice, not only for APIs.

175
00:10:00,329 --> 00:10:03,569
Design APIs to grant only the
necessary permissions based on

176
00:10:03,569 --> 00:10:06,449
user roles or scopes or privileges.

177
00:10:06,949 --> 00:10:09,969
And lastly, request and response
payload site restriction.

178
00:10:10,519 --> 00:10:14,459
This is again, one of a good strategy
to prevent resource exertion attacks.

179
00:10:14,819 --> 00:10:18,399
The modulus operandi of these kind
of attacks is, you would have a valid

180
00:10:18,399 --> 00:10:21,949
request with valid request headers,
but they would stub garbage data inside

181
00:10:21,949 --> 00:10:25,599
your request or response payloads
so as to overwhelm your system.

182
00:10:26,009 --> 00:10:29,886
So one of the ways to prevent these
or to put such kind of requests in

183
00:10:29,886 --> 00:10:33,929
check is to have a check on the request
and response size payloads and then

184
00:10:33,959 --> 00:10:37,389
reject all the payloads which are not
adhering to that particular restriction.

185
00:10:37,889 --> 00:10:42,169
So after design is done, let's take
a look at a few of the best security

186
00:10:42,169 --> 00:10:43,969
practices in API development.

187
00:10:44,829 --> 00:10:46,139
First is software version.

188
00:10:46,639 --> 00:10:49,519
Regularly update software
libraries and frameworks to

189
00:10:49,559 --> 00:10:51,369
eliminate known vulnerabilities.

190
00:10:52,309 --> 00:10:56,839
It is a good practice to have a
certain amount of bandwidth reserved.

191
00:10:57,039 --> 00:11:02,169
if you're falling agile, reserve a
certain bandwidth of your effort for

192
00:11:02,189 --> 00:11:04,299
software upgrades or technical upgrades.

193
00:11:04,619 --> 00:11:09,109
This helps you get out of tech debt
and it also limits your attack surface.

194
00:11:10,029 --> 00:11:12,199
In the same vein is dependency management.

195
00:11:12,509 --> 00:11:16,929
Software today's rely on a lot of third
party libraries or third party softwares,

196
00:11:17,869 --> 00:11:22,349
and your code specifically may not have
any vulnerability, but the dependency

197
00:11:22,349 --> 00:11:24,619
that you are using might have that.

198
00:11:25,129 --> 00:11:28,589
A good example would be a
logging library like Log4j.

199
00:11:29,469 --> 00:11:31,659
There are tools in the market
like Renovate that help

200
00:11:31,659 --> 00:11:32,959
automate dependency updates.

201
00:11:33,364 --> 00:11:36,514
ensuring that your
software is always secure.

202
00:11:37,014 --> 00:11:38,044
Secrets management.

203
00:11:38,914 --> 00:11:43,614
Use tools like HashiCorp Vault or
AWS Secret Manager or others that

204
00:11:43,614 --> 00:11:47,284
are designed specifically to store
secrets or sensitive information.

205
00:11:48,164 --> 00:11:51,504
There are also tools available
such as ggShield that detect and

206
00:11:51,504 --> 00:11:55,264
prevent accidental commits of
sensitive information in source code.

207
00:11:55,804 --> 00:11:59,944
This ties back to that stat
earlier which we looked about human

208
00:11:59,944 --> 00:12:03,954
mistakes like accidentally leaking
secrets into your Git repositories.

209
00:12:04,344 --> 00:12:08,494
Tools like ggshield help arrest
these security reviews and scans.

210
00:12:09,284 --> 00:12:12,624
Most enterprises today employ
some form of CICD pipeline.

211
00:12:13,594 --> 00:12:17,104
So it is a good practice to integrate
your static and dynamic analysis

212
00:12:17,104 --> 00:12:18,884
tools into your CICD pipelines.

213
00:12:19,214 --> 00:12:22,204
to continuously access
for vulnerabilities.

214
00:12:22,704 --> 00:12:25,154
Another key call out is your peer reviews.

215
00:12:25,564 --> 00:12:28,534
So peer review should not only
focus on your functional reviews,

216
00:12:28,534 --> 00:12:33,154
but they should also take a look
on the security of that code.

217
00:12:33,454 --> 00:12:39,064
is the code following some of the
best practices and, is the exposure,

218
00:12:39,244 --> 00:12:41,975
limited, Is it classified correctly,
like we saw earlier, whether this

219
00:12:41,975 --> 00:12:45,695
is an internal API or external API
or the data classification thereof.

220
00:12:46,585 --> 00:12:51,585
It would be even nice if there is some
sort of a checklist, which is custom

221
00:12:51,585 --> 00:12:55,995
or tailor made, depending upon the
code you have, infrastructure as code.

222
00:12:56,970 --> 00:13:01,870
This is a good SRE practice, which
also helps drive security in terms

223
00:13:01,930 --> 00:13:07,260
of consistency and having the version
control and security checks in place.

224
00:13:07,780 --> 00:13:09,130
So what do I mean by that?

225
00:13:10,040 --> 00:13:11,150
So let's take an example.

226
00:13:11,570 --> 00:13:14,850
For example, I have to set up an
AWS resource like say S3 bucket,

227
00:13:15,460 --> 00:13:16,750
and I'm doing it manually.

228
00:13:17,710 --> 00:13:21,550
if I have to do this across, let's say,
10 environments and also on production,

229
00:13:22,000 --> 00:13:26,100
there is a chance that while setting
this up manually, I might miss a certain

230
00:13:26,110 --> 00:13:29,980
access control policy or a security
check in one of the environments.

231
00:13:30,480 --> 00:13:35,390
Doing it as infrastructure as code,
allows for those version controls and

232
00:13:35,390 --> 00:13:40,480
checks to be in place every single
time, knowing that each environment,

233
00:13:40,700 --> 00:13:43,740
in each environment, it would be
set up in exactly the same way.

234
00:13:44,240 --> 00:13:45,810
Automated code quality checks.

235
00:13:46,780 --> 00:13:50,820
There are tools like Sonar Cube, to
evaluate your code quality alongside your

236
00:13:50,820 --> 00:13:54,390
security, ensuring code is maintainable
and adheres to best practices,

237
00:13:55,000 --> 00:13:57,060
which indirectly improves security.

238
00:13:57,860 --> 00:14:02,400
you can even shift left, like there
are tools that can integrate with your

239
00:14:02,440 --> 00:14:07,120
IDs, like Sonar Lint or check marks
that provide instant feedback to the

240
00:14:07,120 --> 00:14:08,590
developers while they are coding.

241
00:14:09,160 --> 00:14:13,435
And they highlight the best
security, Practices as well as if

242
00:14:13,745 --> 00:14:15,525
their code has any vulnerabilities.

243
00:14:16,025 --> 00:14:16,734
Moving ahead.

244
00:14:17,234 --> 00:14:20,224
Let's take a look at security
practices in API testing.

245
00:14:20,644 --> 00:14:22,964
The first is static
application security testing.

246
00:14:23,614 --> 00:14:26,684
Analyze source code early in
the development cycle to catch

247
00:14:26,704 --> 00:14:28,114
vulnerabilities before deployment.

248
00:14:28,144 --> 00:14:32,794
Yes, we saw like typically enterprises
today employ some sort of CSAD,

249
00:14:32,824 --> 00:14:34,384
so it's a good place to integrate.

250
00:14:35,244 --> 00:14:39,674
SAST testing, dynamic application
security testing, or DAST.

251
00:14:40,254 --> 00:14:42,584
Test running applications to
identify security weakness

252
00:14:42,584 --> 00:14:43,574
through simulated attacks.

253
00:14:44,414 --> 00:14:48,474
So the well formed simulation attacks
are formed and those are tested against

254
00:14:48,534 --> 00:14:54,454
running applications to discover runtime
security discrepancies or anomalies.

255
00:14:54,954 --> 00:14:55,684
Container scanning.

256
00:14:56,064 --> 00:15:00,174
Most of the APIs today employ
use containers and some sort of

257
00:15:00,194 --> 00:15:01,324
container orchestration tool.

258
00:15:01,514 --> 00:15:03,774
The most popular ones are
Docker and Kubernetes.

259
00:15:04,384 --> 00:15:08,984
However, the base images that are
used for building these containers

260
00:15:09,054 --> 00:15:10,364
might have vulnerabilities.

261
00:15:10,744 --> 00:15:14,074
So it's absolutely imperative
to scan container images for

262
00:15:14,334 --> 00:15:17,874
vulnerabilities to ensure secure
deployments performance testing.

263
00:15:18,354 --> 00:15:19,754
This is a good strategy.

264
00:15:20,194 --> 00:15:23,814
always have both tests set up,
in one of your environments

265
00:15:23,814 --> 00:15:25,204
to evaluate API performance.

266
00:15:25,559 --> 00:15:29,789
Under various conditions adjusting
parameters like rate limiting to prevent

267
00:15:29,789 --> 00:15:37,089
abuse So they not only help uncover the
benchmarks, but they also help Discover

268
00:15:37,129 --> 00:15:41,159
any security anomalies, especially when
under load like what happens if your

269
00:15:41,179 --> 00:15:45,999
timeout Increases what happens if your
backend systems are not responding?

270
00:15:46,354 --> 00:15:51,264
In time, does it accidentally
expose any security vulnerabilities?

271
00:15:51,264 --> 00:15:54,104
So these are very good tests to have.

272
00:15:54,604 --> 00:15:56,164
And lastly, security testing.

273
00:15:56,724 --> 00:15:59,824
Conduct negative tests, negative
access testing and penetration

274
00:15:59,824 --> 00:16:02,474
testing to discover and remediate
security gaps effectively.

275
00:16:02,974 --> 00:16:06,824
A major chunk of your testing strategy
should focus on security testing,

276
00:16:06,834 --> 00:16:08,464
not only your functional testing.

277
00:16:08,984 --> 00:16:13,014
And this is like explicitly conducting
negative testing to break your systems.

278
00:16:13,494 --> 00:16:16,834
Because as we saw, the cost of fixing
this in production is very high.

279
00:16:17,334 --> 00:16:20,504
Moving ahead, let's take a few,
take a look at a few of the security

280
00:16:20,504 --> 00:16:22,354
best practices in API release.

281
00:16:23,214 --> 00:16:25,414
so the first and foremost
is canary deployment.

282
00:16:26,114 --> 00:16:30,354
again, this is a good SRE practice
and also it helps security as well.

283
00:16:31,064 --> 00:16:33,234
So what do we mean by canary deployment?

284
00:16:33,834 --> 00:16:38,289
This is a practice in which we gradually
release updates To a subset of users

285
00:16:38,349 --> 00:16:42,989
allow allowing for monitoring and
rollback if issues arise So imagine if

286
00:16:42,989 --> 00:16:48,789
your latest deployment has some security
issues then as part of canary you will

287
00:16:48,879 --> 00:16:53,969
only release this to a subset of users
thereby reducing the attack surface And

288
00:16:53,969 --> 00:16:55,789
once you identify it's easy to roll back.

289
00:16:56,159 --> 00:17:00,799
So the basic fundamental principle behind
this is limiting your attack surface.

290
00:17:01,299 --> 00:17:05,429
The next is automated sanity testing,
integrate security test cases in

291
00:17:05,449 --> 00:17:09,789
CICD pipelines to ensure every
deployment meets security standards.

292
00:17:10,579 --> 00:17:14,169
the keywords here are automated,
so that it becomes part of

293
00:17:14,329 --> 00:17:15,689
each and every deployment.

294
00:17:16,019 --> 00:17:19,419
You run those negative access
testing and penetration testing,

295
00:17:19,789 --> 00:17:24,129
and you test those against some of
your key flows to make sure that

296
00:17:24,359 --> 00:17:25,499
deployment meets security standards.

297
00:17:25,729 --> 00:17:29,979
Your standards, security, your
standards, security standards.

298
00:17:30,479 --> 00:17:34,979
Moving ahead, let's take a look at some
of the operational security practices.

299
00:17:35,539 --> 00:17:40,639
Now, most of these, are curated for
if your APIs are exposed in public.

300
00:17:40,939 --> 00:17:43,389
But nevertheless, it's good
practice to have these components

301
00:17:43,389 --> 00:17:45,709
as part of your API infrastructure.

302
00:17:46,529 --> 00:17:49,059
So the first one is Web
Application Firewall or WAF.

303
00:17:49,509 --> 00:17:52,119
There are many COTS
products available for WAF.

304
00:17:52,619 --> 00:17:56,029
So use WAFs to shield APIs
from common threats such as SQL

305
00:17:56,049 --> 00:17:57,719
injection and cross site scripting.

306
00:17:58,219 --> 00:17:59,429
Next is bot detection.

307
00:17:59,889 --> 00:18:03,969
There are tools like sequence that
identify and block malicious bot traffic

308
00:18:04,279 --> 00:18:09,739
protecting api resources These are usually
policy based and configuration based

309
00:18:09,739 --> 00:18:14,139
so you can determine how your normal
user traffic looks like you can also

310
00:18:14,529 --> 00:18:18,449
Distinguish between good bots meaning the
bots that you specifically have returned

311
00:18:18,859 --> 00:18:20,999
versus the general api crawlers api

312
00:18:21,499 --> 00:18:27,179
gateway api gateways Can do four
or five important functions.

313
00:18:27,189 --> 00:18:28,469
So let's take a look at that.

314
00:18:28,949 --> 00:18:30,699
This is your first line of defense.

315
00:18:31,084 --> 00:18:33,674
where in you can implement
your access restrictions.

316
00:18:33,974 --> 00:18:37,484
So you need to have your auth and analogy
policies configured in API Gateway.

317
00:18:37,954 --> 00:18:39,064
Next is translation.

318
00:18:39,554 --> 00:18:44,904
they can do your request translation,
wherein they can enhance your request

319
00:18:44,904 --> 00:18:49,214
headers based on, some of the origin,
It is coming from and other different

320
00:18:49,434 --> 00:18:55,024
parameters third is routing They
help isolate your front end from your

321
00:18:55,024 --> 00:18:58,934
different backends like they can do the
necessary routing based on the endpoint

322
00:18:58,934 --> 00:19:03,974
and other Configurations fourthly they
can do rate limiting and throttling.

323
00:19:03,984 --> 00:19:08,144
So this would be the best place
to configure your rate limiting

324
00:19:08,154 --> 00:19:11,784
and throttling policies to
prevent DOS and DDoS attacks.

325
00:19:12,424 --> 00:19:15,524
And fifth is security
compliance, schema compliance.

326
00:19:15,524 --> 00:19:15,844
Sorry.

327
00:19:15,894 --> 00:19:19,354
What do I mean by schema
compliance is earlier we saw

328
00:19:20,104 --> 00:19:21,324
resource exhaustion attacks.

329
00:19:21,324 --> 00:19:25,399
And one way to address that was your
request and response size restriction.

330
00:19:25,919 --> 00:19:28,589
Schema compliance is another
strategy to address that.

331
00:19:29,269 --> 00:19:32,599
And what do I mean by that is
every request is check whether

332
00:19:32,599 --> 00:19:33,879
it is adhering to a schema.

333
00:19:34,829 --> 00:19:37,379
Like you can define how your
API request should look like.

334
00:19:37,389 --> 00:19:40,979
And if those requests are not adhering
to those schemas, then those requests

335
00:19:41,019 --> 00:19:46,979
are rejected right there at the API
gateway layer, protecting your back end

336
00:19:47,149 --> 00:19:49,839
API resources from getting overwhelmed.

337
00:19:50,339 --> 00:19:51,219
SIEM solution.

338
00:19:51,669 --> 00:19:54,829
SIEM stands for security information
and event management systems.

339
00:19:55,209 --> 00:19:57,609
And these are the systems that
are designed to gain real time

340
00:19:57,609 --> 00:19:58,959
insights into security events.

341
00:19:59,329 --> 00:20:04,129
If I were to give some of the examples,
it would be Splunk, IBM QRadar or

342
00:20:04,169 --> 00:20:08,339
Microsoft Sentinel for Office 365
and other Microsoft offerings.

343
00:20:08,839 --> 00:20:15,144
The key fundamental principle of this
is in today's day and age APIs are a

344
00:20:15,144 --> 00:20:17,154
lot of complex, like it's not simple.

345
00:20:17,364 --> 00:20:21,504
If you were to, if you were to look at the
APIs, it looks more like a mesh structure.

346
00:20:22,194 --> 00:20:28,614
and in, in such a complicated mesh
of webs, mesh of APIs, it's not

347
00:20:28,614 --> 00:20:32,824
easy, to troubleshoot if you are only
focusing on one single component.

348
00:20:33,304 --> 00:20:35,249
So what same stands are?

349
00:20:35,924 --> 00:20:40,744
The underlying principle is it can take
a look at different systems and try

350
00:20:40,744 --> 00:20:42,364
to establish correlation between them.

351
00:20:42,854 --> 00:20:45,494
So it can take a look at logs
between different system.

352
00:20:45,514 --> 00:20:48,634
It can take a look at
the log forensic results.

353
00:20:48,654 --> 00:20:53,764
It can take a look at your real time
threads, your user monitoring dashboards,

354
00:20:53,774 --> 00:20:57,584
your reporting dashboards, device
monitoring dashboards, and other stuff.

355
00:20:58,034 --> 00:21:03,264
So the idea is one system in isolation
may or may not able to determine

356
00:21:03,334 --> 00:21:04,794
all the security vulnerabilities.

357
00:21:05,314 --> 00:21:10,184
However, if you take a look at all the
different components and try to correlate

358
00:21:10,204 --> 00:21:15,894
them, you can uncover a lot of security
anomalies, and thereby proactively.

359
00:21:16,394 --> 00:21:18,184
proactively address those anomalies.

360
00:21:18,684 --> 00:21:21,724
Moving on, API monitoring
security practices.

361
00:21:22,254 --> 00:21:24,634
First and foremost, you
need to monitor metrics.

362
00:21:24,864 --> 00:21:27,534
At the very least, you need
to have your red metrics.

363
00:21:27,884 --> 00:21:30,874
So your red stands for
rate, error, duration.

364
00:21:31,284 --> 00:21:35,594
These metrics, help to track API
performance and availability continuously.

365
00:21:36,464 --> 00:21:39,014
Next, security control testing.

366
00:21:39,894 --> 00:21:43,344
Regularly validate security headers
and access controls to ensure

367
00:21:43,384 --> 00:21:45,114
compliance with security policies.

368
00:21:45,709 --> 00:21:49,789
The best way to do this would be
your API gateway, because that's

369
00:21:49,789 --> 00:21:51,079
your first line of defense.

370
00:21:51,579 --> 00:21:52,719
Third sample tracing.

371
00:21:53,449 --> 00:21:56,809
there are tools like Yeager and
AppDynamics that h that imp, that

372
00:21:56,809 --> 00:21:59,879
help track, your API requests.

373
00:22:00,459 --> 00:22:03,229
and these are configuration
based, like you typically have

374
00:22:03,229 --> 00:22:04,459
something called a sampling rate.

375
00:22:04,459 --> 00:22:04,939
Let's say you.

376
00:22:05,295 --> 00:22:09,924
1, 000 requests per hour, then a
sampling rate of 1 percent means

377
00:22:09,924 --> 00:22:12,014
you can sample 10 API requests.

378
00:22:12,554 --> 00:22:17,104
and what do these sampling help is you
can basically trace these APIs, from

379
00:22:17,154 --> 00:22:21,224
point to point communication and see what
payload is being passed across these APIs.

380
00:22:21,644 --> 00:22:25,354
It's like taking an x ray of the
system so that you know how your

381
00:22:25,354 --> 00:22:26,829
system is working under the hood.

382
00:22:27,329 --> 00:22:30,379
And the third is access to
tools and this goes back to

383
00:22:30,379 --> 00:22:32,349
the DevSecOps, cultural shift.

384
00:22:32,719 --> 00:22:36,689
So earlier, as I said, there were
silos like development and operations

385
00:22:36,709 --> 00:22:39,249
and only the operations team used
to have access to monitoring.

386
00:22:39,929 --> 00:22:46,229
but it's, It would be a great shift to
have that monitoring dashboards access

387
00:22:46,229 --> 00:22:49,749
to all the non operations people,
because that way you can facilitate

388
00:22:49,749 --> 00:22:54,339
proactive security management and
uncover security anomalies faster.

389
00:22:54,889 --> 00:22:59,519
so far we have seen why we need API
security, what do we mean by security

390
00:22:59,519 --> 00:23:01,179
mindset and walk through some of the.

391
00:23:01,679 --> 00:23:04,849
best practices across
all the SDLC life cycles.

392
00:23:05,719 --> 00:23:09,909
Now it's time to bring all of
this together and conclude.

393
00:23:10,409 --> 00:23:14,929
So in today's digital landscape,
securing APIs is not just an option.

394
00:23:15,119 --> 00:23:15,979
It's a necessity.

395
00:23:16,819 --> 00:23:21,059
The security first principle in
DevSecOps emphasizes the importance

396
00:23:21,059 --> 00:23:25,129
of integrating security at every stage
of software development life cycle.

397
00:23:25,629 --> 00:23:29,359
By embedding security practices
in design, development, testing,

398
00:23:29,379 --> 00:23:30,409
release, and operations.

399
00:23:30,969 --> 00:23:35,499
Organizations can proactively
identify and mitigate vulnerabilities

400
00:23:35,949 --> 00:23:37,189
before they reach production.

401
00:23:37,689 --> 00:23:41,429
This approach not only enhances the
security posture of applications,

402
00:23:42,039 --> 00:23:47,529
but also fosters a culture of shared
responsibility among development,

403
00:23:47,619 --> 00:23:49,279
security, and operation teams.

404
00:23:49,779 --> 00:23:54,839
The TLDR version of this is security
is a shared continuous responsibility.

405
00:23:55,684 --> 00:23:59,774
And the essence of the hour is to
shift security left so that we build

406
00:23:59,874 --> 00:24:02,144
trust and resilience from ground up.

407
00:24:02,644 --> 00:24:04,554
Thank you all if you
have made it thus far.

408
00:24:05,384 --> 00:24:08,514
I hope you learned a thing or
two from this talk which you can

409
00:24:08,604 --> 00:24:10,284
employ in your day to day work.

410
00:24:11,204 --> 00:24:12,774
Enjoy the rest of the conference.

