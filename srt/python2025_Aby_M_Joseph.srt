1
00:00:00,150 --> 00:00:00,800
Hi there, everyone.

2
00:00:00,840 --> 00:00:04,729
Good morning, good afternoon and good
evening to everyone joining us from around

3
00:00:04,740 --> 00:00:07,700
the world for con 40 to 25 python track.

4
00:00:08,629 --> 00:00:13,980
We are super excited to have a talk on
building GraphQL microservices using fast

5
00:00:14,140 --> 00:00:19,199
APA for the next few minutes, we'll be
discussing on these two technologies that

6
00:00:19,210 --> 00:00:24,729
have gained significant traction in the
past few years, GraphQL and fast APA.

7
00:00:25,370 --> 00:00:28,339
So these technologies simplify
the process of building

8
00:00:29,030 --> 00:00:31,149
smarter and more efficient APS.

9
00:00:32,150 --> 00:00:36,529
So we'll explain what GraphQL
is, why it's becoming so popular

10
00:00:36,580 --> 00:00:38,134
and how can you start using it.

11
00:00:38,785 --> 00:00:44,205
So GraphQL is an API specification
created by Facebook designed to make

12
00:00:44,265 --> 00:00:46,665
APIs smarter and more efficient.

13
00:00:47,534 --> 00:00:50,925
FastAPI, on the other hand,
is a high performance web

14
00:00:50,955 --> 00:00:51,895
framework for building APIs.

15
00:00:52,395 --> 00:00:57,484
So it's known for its speed, simplicity,
and powerful asynchronous capabilities.

16
00:00:57,984 --> 00:01:01,874
So let's explore how this, powerful
pair works together to deliver

17
00:01:01,954 --> 00:01:05,144
fast and flexible, APS solutions.

18
00:01:06,004 --> 00:01:09,574
And, before we start a little
about us, maybe I'm Joseph.

19
00:01:09,989 --> 00:01:11,319
And I have jealous with me.

20
00:01:11,369 --> 00:01:16,909
we are both product engineers at U
S T where we are building Strollby,

21
00:01:16,949 --> 00:01:21,479
a travel platform that helps people
explore and plan their journeys.

22
00:01:22,019 --> 00:01:25,549
We have been working with GraphQL
microservices in Python for some time,

23
00:01:26,389 --> 00:01:30,259
and we are also part of Tramantrum
Python community based out of Kerala.

24
00:01:31,129 --> 00:01:32,909
and that's a little about us.

25
00:01:33,359 --> 00:01:35,409
Let's jump right into GraphQL.

26
00:01:36,119 --> 00:01:37,279
So what is GraphQL?

27
00:01:38,099 --> 00:01:40,429
GraphQL is a coding language for APIs.

28
00:01:40,819 --> 00:01:44,349
and the runtime that execute those
queries using your existing data.

29
00:01:44,849 --> 00:01:49,399
Have you ever needed data from an API,
but ended up with too much or too little?

30
00:01:49,899 --> 00:01:51,239
It's really frustrating, right?

31
00:01:51,919 --> 00:01:54,859
That's exactly the problem GraphQL solves.

32
00:01:55,069 --> 00:02:01,449
With GraphQL, you ask for exactly what you
need, no extra data, no missing pieces.

33
00:02:02,379 --> 00:02:05,999
Think it like making a custom
query for your API, just like

34
00:02:06,009 --> 00:02:07,779
how you query your database.

35
00:02:08,524 --> 00:02:12,824
The server processes your request
and sends back only the data you

36
00:02:12,824 --> 00:02:15,884
specified, nothing more, nothing less.

37
00:02:16,534 --> 00:02:21,074
This means faster response, fewer
API calls, and better performance.

38
00:02:21,744 --> 00:02:23,194
That's the power of GraphQL.

39
00:02:23,864 --> 00:02:27,344
Let's dive deeper and see how it
works in real world applications.

40
00:02:27,844 --> 00:02:31,394
Let's begin by understanding how
traditional REST APIs and why

41
00:02:31,554 --> 00:02:35,304
they sometimes struggle to meet
the needs of modern applications.

42
00:02:35,964 --> 00:02:39,754
REST APIs are built around
the idea of fixed endpoints

43
00:02:39,764 --> 00:02:41,204
for specific pieces of data.

44
00:02:42,044 --> 00:02:45,984
For example, if you want to fetch
users information, you could send

45
00:02:46,144 --> 00:02:47,434
a request to slash users endpoint.

46
00:02:47,954 --> 00:02:51,554
each resource is tied
to its own unique URL.

47
00:02:52,039 --> 00:02:55,139
And when you send a request,
the server responds with all the

48
00:02:55,139 --> 00:02:57,449
data related to that resource.

49
00:02:57,949 --> 00:03:03,309
While this approach works well in many
cases, it often has two main problems,

50
00:03:03,379 --> 00:03:05,369
underfetching and overfetching.

51
00:03:05,869 --> 00:03:09,319
Underfetching happens when a
client needs multiple pieces of

52
00:03:09,319 --> 00:03:11,949
data, only one, get one at a time.

53
00:03:12,479 --> 00:03:16,899
For example, if you need both user
details and their associate post.

54
00:03:17,844 --> 00:03:23,144
You could have made two separate
requests, one to slash request slash

55
00:03:23,604 --> 00:03:25,734
users and another to slash post.

56
00:03:26,354 --> 00:03:29,874
This leads to extra network
call and slower performance.

57
00:03:30,374 --> 00:03:32,474
Overfetching is the opposite problem.

58
00:03:32,594 --> 00:03:37,334
Let's say only you need only
your user's name, but slash users

59
00:03:37,334 --> 00:03:41,744
endpoints inspect entire user
object, including their address,

60
00:03:41,784 --> 00:03:44,604
email and other data you don't need.

61
00:03:45,164 --> 00:03:49,654
This waste bandwidth slows down
your application and may cause

62
00:03:49,764 --> 00:03:53,634
inefficiency, especially for
mobile devices on limited network.

63
00:03:54,344 --> 00:03:57,704
Since different clients like mobile
application, web applications, and

64
00:03:57,704 --> 00:04:02,504
dashboards often have different design
requirements, but REST APIs serve the

65
00:04:02,504 --> 00:04:05,334
same fixed response to all clients.

66
00:04:05,514 --> 00:04:09,314
For example, imagine a mobile
application that requires only the

67
00:04:09,314 --> 00:04:11,854
user's first name for a simple display.

68
00:04:12,044 --> 00:04:15,904
While the web application might
require both name and the address.

69
00:04:16,504 --> 00:04:21,254
For a detailed profile, since REST
API returns a fixed data set, both

70
00:04:21,264 --> 00:04:25,424
the clients should receive the same
response, even though one of them

71
00:04:26,174 --> 00:04:27,984
needs only a small part of the data.

72
00:04:28,414 --> 00:04:30,074
Here, it's the mobile application.

73
00:04:30,574 --> 00:04:34,114
Another major challenge is
maintaining and scaling APIs.

74
00:04:34,664 --> 00:04:37,186
When new features are added, all
the clients might still rely on the

75
00:04:37,186 --> 00:04:43,834
previous version of the API to avoid
breaking existing applications.

76
00:04:44,264 --> 00:04:48,972
Developers often create multiple versions
of the API with these challenges.

77
00:04:48,972 --> 00:04:53,544
Rust API has become harder
to manage and inefficient,

78
00:04:53,814 --> 00:04:56,094
especially as applications grow.

79
00:04:56,804 --> 00:04:58,394
This is where GraphQL comes in.

80
00:04:58,894 --> 00:05:01,714
So let's see how GraphQL.

81
00:05:02,214 --> 00:05:06,314
This diagram shows how GraphQL
act as a bridge between the front

82
00:05:06,444 --> 00:05:10,734
end and the back end, making data
fetching efficient and flexible.

83
00:05:11,234 --> 00:05:15,444
On the left side, we have the front
end, this could be a web application,

84
00:05:15,824 --> 00:05:20,104
mobile application, or any sort
of client requesting the data.

85
00:05:20,724 --> 00:05:26,504
Instead of making multiple API calls like
the rest, here the client sends a single

86
00:05:26,504 --> 00:05:32,054
request to the GraphQL endpoint, that is a
single GraphQL endpoint at slash GraphQL.

87
00:05:32,554 --> 00:05:36,874
The front end defines exactly what the
data it requires in a structured query.

88
00:05:37,374 --> 00:05:40,724
Before processing a request,
the GraphQL checks the schema.

89
00:05:41,224 --> 00:05:45,814
Schema is a blueprint that defines the
available data types and relationships.

90
00:05:46,359 --> 00:05:50,469
This schema act as a contract between
the front end and the back end,

91
00:05:50,939 --> 00:05:52,379
ensuring the requests are valid.

92
00:05:52,879 --> 00:05:56,989
On the right side, we have the backend
services, which might contain multiple

93
00:05:56,989 --> 00:05:59,839
APIs, databases, and multiple services.

94
00:06:00,709 --> 00:06:03,929
Unlike traditional APIs,
GraphQL does not store data.

95
00:06:04,430 --> 00:06:09,529
It's act as a multiple layer that
fetches the information from multiple

96
00:06:09,539 --> 00:06:11,849
sources like databases and APIs.

97
00:06:12,194 --> 00:06:16,724
For example, a query requesting
user information, order history

98
00:06:16,724 --> 00:06:21,424
and recent transactions can have
different sort of data requirements.

99
00:06:21,924 --> 00:06:26,444
Fetch, data, it fetches the
data from the user database.

100
00:06:27,064 --> 00:06:28,964
It, receives the order information.

101
00:06:29,209 --> 00:06:35,159
in a different services or a different
A. P. I. And also it gets a transaction

102
00:06:35,159 --> 00:06:37,009
info from a third party vendor.

103
00:06:37,729 --> 00:06:41,359
All this happens in a single
request, reducing the network calls

104
00:06:41,649 --> 00:06:43,689
and improving the performance.

105
00:06:44,619 --> 00:06:48,719
Once GraphQL gathers the requested
data, it contains everything

106
00:06:48,749 --> 00:06:52,719
into a structured JSON response
and sends back to the front end.

107
00:06:53,339 --> 00:07:00,379
The client receives only the data what it
asked for, making data fetching faster.

108
00:07:00,879 --> 00:07:02,499
optimized and more efficient.

109
00:07:03,049 --> 00:07:05,479
This is why GraphQL is a game changer.

110
00:07:05,879 --> 00:07:11,709
It's having a single entry point,
flexible coding and optimized responses.

111
00:07:12,209 --> 00:07:17,169
So let's talk about the three main
operations supported in GraphQL, GraphQL

112
00:07:17,429 --> 00:07:19,889
queries, mutations, and subscriptions.

113
00:07:20,199 --> 00:07:24,519
So these operations define how a
client interacts with the GraphQL API.

114
00:07:25,019 --> 00:07:26,559
So let's talk about, queries.

115
00:07:26,569 --> 00:07:29,579
So queries are how we retrieve
data from a GraphQL API.

116
00:07:30,489 --> 00:07:35,319
Think of them like making a request to
the database, but instead of getting all,

117
00:07:35,769 --> 00:07:42,249
responses, all, object, we can choose
exactly what we need to in this example,

118
00:07:42,359 --> 00:07:47,359
we are asking for a specific user with
ID one instead of fitting the ender data.

119
00:07:47,919 --> 00:07:50,759
And like the rest, we are only
requesting the two fields,

120
00:07:50,779 --> 00:07:52,029
first name and the last name.

121
00:07:52,759 --> 00:07:54,219
no extra data is being sent.

122
00:07:54,249 --> 00:07:59,749
Only the response of first name and,
last name will be fed back to the

123
00:07:59,879 --> 00:08:02,029
front end from, the GraphQL server.

124
00:08:02,529 --> 00:08:04,359
So next we have, mutations.

125
00:08:04,920 --> 00:08:08,290
mutations are how we modify the
data, whether it's creating,

126
00:08:08,540 --> 00:08:10,390
updating or deleting records.

127
00:08:10,820 --> 00:08:11,580
here is an example.

128
00:08:11,829 --> 00:08:17,689
We are creating a mutation named
create post so we can, once the

129
00:08:18,259 --> 00:08:23,529
post is created, the server returns
its value as the confirmation.

130
00:08:23,549 --> 00:08:26,669
If you want, we can also fetch
other additional fields like the

131
00:08:26,679 --> 00:08:28,379
title of the post or content.

132
00:08:28,879 --> 00:08:34,280
So the best part, unlike we might require
separate raw call for updated values

133
00:08:34,310 --> 00:08:39,350
in REST, GraphQL returns the newly
created or modified values immediately

134
00:08:39,740 --> 00:08:41,640
in the request, in the same response.

135
00:08:41,640 --> 00:08:46,850
Thank you So the last one is
subscriptions, so it allows real time

136
00:08:46,850 --> 00:08:52,359
communication between the clients and
the server instead of requesting data

137
00:08:52,359 --> 00:08:57,080
manually, the client can subscribe
to events and get automatic updates

138
00:08:57,290 --> 00:08:58,910
whenever new data is available.

139
00:08:59,569 --> 00:09:01,070
For example, here.

140
00:09:01,570 --> 00:09:06,230
The subscription on create listens
for new data being created.

141
00:09:06,550 --> 00:09:11,270
Whenever a new post is created, the
server automatically sends to the

142
00:09:11,270 --> 00:09:16,759
update, to the client, where, if it's
subscribed to this topic or this, end

143
00:09:16,759 --> 00:09:19,459
point on create, which is a subscription.

144
00:09:20,119 --> 00:09:23,659
So this is great for, real time
applications, like notifications.

145
00:09:23,715 --> 00:09:26,174
or dashboards.

146
00:09:26,254 --> 00:09:29,844
So unlike queries and mutations,
which follow a request response

147
00:09:29,844 --> 00:09:35,414
model, subscriptions create a open
connection between client and server

148
00:09:35,414 --> 00:09:37,814
making real time updates possible.

149
00:09:38,314 --> 00:09:44,924
So just to recap, queries lets us to
fetch data efficiently, mutations lets

150
00:09:44,924 --> 00:09:51,079
us modify data and get the immediate
response while subscriptions lets us

151
00:09:51,229 --> 00:09:55,129
listen for real time updates without
constantly polling the server.

152
00:09:55,599 --> 00:09:58,919
So this is what makes GraphQL so powerful.

153
00:09:59,739 --> 00:10:03,969
It gives the front end the full
control over the data and making

154
00:10:03,969 --> 00:10:06,489
it efficient and flexible.

155
00:10:06,989 --> 00:10:09,349
Next is GraphQL Schema.

156
00:10:09,529 --> 00:10:12,669
So think of GraphQL Schema
as the blueprint of your API.

157
00:10:13,409 --> 00:10:16,579
It defines the types, fields,
and relationships that are

158
00:10:16,579 --> 00:10:17,759
available to the client.

159
00:10:18,584 --> 00:10:22,634
The schema uses schema definition
language SDL to describe the data.

160
00:10:23,554 --> 00:10:26,174
Let's start with a simple
example, a user type.

161
00:10:26,664 --> 00:10:31,354
In GraphQL, we use the type keyword
to define the data structure.

162
00:10:31,944 --> 00:10:34,674
Here is how we define a
user type in our schema.

163
00:10:35,474 --> 00:10:39,994
ID, which is a unique identifier for
the user and followed by exclamation,

164
00:10:40,004 --> 00:10:47,024
which shows the field is record ID
and both name, email are both record

165
00:10:47,154 --> 00:10:49,164
and having string, data state.

166
00:10:50,024 --> 00:10:56,169
So now, whenever we refer to a user in our
GraphQL API, We know exactly what data it

167
00:10:56,179 --> 00:10:58,149
contains based out of this schema type.

168
00:10:58,649 --> 00:11:04,719
So next, if you want to create a query
to allow us to fetch a user information,

169
00:11:05,439 --> 00:11:07,299
here it's get field, get user query.

170
00:11:08,059 --> 00:11:09,719
It takes ideas and argument.

171
00:11:09,769 --> 00:11:13,999
it returns the user object matching
that I. D. So clients can request

172
00:11:14,159 --> 00:11:16,279
specific fields from the user object.

173
00:11:17,159 --> 00:11:19,949
And, next we have a mutation.

174
00:11:20,529 --> 00:11:26,029
So if you want to update the user's name,
so we can use update user name mutation,

175
00:11:26,039 --> 00:11:27,849
which takes idea and the new name.

176
00:11:28,779 --> 00:11:31,369
And it returns, the updated name.

177
00:11:31,869 --> 00:11:36,449
So next, we can see the difference
between GraphQL and REST API.

178
00:11:37,439 --> 00:11:43,419
So with the separate endpoint for,
getting user info in REST, rather than a

179
00:11:43,419 --> 00:11:48,210
single endpoint GraphQL, and we can use
separate query for getting, each fields.

180
00:11:48,980 --> 00:11:54,680
Of based out of the schema in GraphQL
and we got the entire payload in the REST

181
00:11:54,680 --> 00:12:00,239
response while the requested fields are
only fetched from DB or the other source

182
00:12:00,240 --> 00:12:03,009
of data in the response of GraphQL.

183
00:12:03,509 --> 00:12:08,119
One of the simplest ways to understand
GraphQL versus Rust is comparing it

184
00:12:08,499 --> 00:12:10,539
to ordering a burger at a restaurant.

185
00:12:11,039 --> 00:12:14,229
So imagine we are walking into
a restaurant with a fixed menu.

186
00:12:14,779 --> 00:12:19,519
The menu offers predefined burger
options with fixed ingredients and you

187
00:12:19,559 --> 00:12:26,079
must order the ender burger even if you
want only a certain set of toppings.

188
00:12:26,679 --> 00:12:30,579
So you can take the ender classic burger
with lettuce, tomatoes and cheese.

189
00:12:30,719 --> 00:12:31,799
No customization allowed.

190
00:12:32,299 --> 00:12:33,624
This is how the Rust works.

191
00:12:34,124 --> 00:12:35,094
APS work.

192
00:12:35,834 --> 00:12:40,484
And there are other set of restaurants
where we can customize our burger.

193
00:12:41,184 --> 00:12:43,884
we can specify what exactly we need.

194
00:12:44,174 --> 00:12:49,034
we can set the burger toppings,
and this is how the GraphQL works.

195
00:12:49,594 --> 00:12:53,432
So in this analogy, the waiter
represents the GraphQL schema.

196
00:12:53,432 --> 00:12:57,684
The waiter provides the list of
available toppings, just like

197
00:12:57,994 --> 00:13:02,224
GraphQL defining, types with
available fields for the client.

198
00:13:02,804 --> 00:13:06,394
Instead of browsing the fixed
menu, we can directly tell the

199
00:13:06,644 --> 00:13:09,084
better what exactly we want.

200
00:13:09,984 --> 00:13:15,144
So similarly, GraphQL schema
of data available and client

201
00:13:15,144 --> 00:13:16,974
chooses which fields to request.

202
00:13:17,734 --> 00:13:22,804
So with GraphQL, we get only what we
ask for, making it more efficient.

203
00:13:23,254 --> 00:13:29,014
And here the chef act as the GraphQL,
resolvers at the server site, which

204
00:13:29,014 --> 00:13:32,154
only prepares what the client requested.

205
00:13:32,904 --> 00:13:37,304
So they will not add any extra
arguments or any extra, resolvers

206
00:13:37,304 --> 00:13:39,764
will be acted, for unnecessary data.

207
00:13:40,184 --> 00:13:41,924
And, we don't need multiple orders.

208
00:13:41,924 --> 00:13:43,814
Everything will be handled
in a single request.

209
00:13:44,729 --> 00:13:50,639
So that's how GraphQL versus Rust
is explained in LM and Tense.

210
00:13:51,139 --> 00:13:53,749
Moving on to GraphQL Python Ecosystem.

211
00:13:54,389 --> 00:13:58,409
There are multiple libraries available
for GraphQL support within Python.

212
00:13:59,169 --> 00:14:03,549
When working with GraphQL, there are two
main approaches for building your API.

213
00:14:03,549 --> 00:14:05,919
Code first and schema first.

214
00:14:06,149 --> 00:14:10,509
Each approach has its own set of
libraries that help developers to

215
00:14:10,509 --> 00:14:12,799
implement GraphQL APIs efficiently.

216
00:14:12,799 --> 00:14:14,812
Code first approach allows
developers to define their

217
00:14:14,812 --> 00:14:16,070
GraphQL schema using Python code.

218
00:14:16,070 --> 00:14:19,090
Instead of writing the STL, code first
approach allows developers to define

219
00:14:19,090 --> 00:14:20,599
their GraphQL schema using Python code.

220
00:14:21,109 --> 00:14:25,239
you can define types and
resolvers directly in Python

221
00:14:25,269 --> 00:14:27,639
using class and functions.

222
00:14:28,339 --> 00:14:31,079
So this approach is great for
developers who prefer working

223
00:14:31,079 --> 00:14:36,359
within the Python ecosystem without
writing any extra schema files.

224
00:14:37,044 --> 00:14:42,504
So graphene and strawberry are examples
of code first and, in the schema fetch

225
00:14:42,514 --> 00:14:47,934
approach, GraphQL schema is written
separately using STL and the schema act as

226
00:14:47,934 --> 00:14:52,414
a blueprint and resolvers are implemented
in Python to handle this logic.

227
00:14:52,639 --> 00:14:57,439
This approach is beneficial for teams
that want clear separation between the

228
00:14:57,439 --> 00:15:00,109
schema and the business backend logic.

229
00:15:00,989 --> 00:15:07,579
So now, moving on to Jayalashmi, for
adding the essence of FastAPI to GraphQL.

230
00:15:08,079 --> 00:15:11,499
So moving to the next
topic, that is FastAPI.

231
00:15:11,999 --> 00:15:15,959
Let me ask you something, what if
we could build APIs that are not

232
00:15:15,959 --> 00:15:20,149
just super fast, but also super easy
to develop, maintain, and scale?

233
00:15:20,699 --> 00:15:22,429
that's where FastAPI comes into play.

234
00:15:22,929 --> 00:15:26,669
FastAPI is the high performance
Python framework that's built for

235
00:15:26,719 --> 00:15:29,349
real world demanding applications.

236
00:15:29,929 --> 00:15:34,279
So at its core, it runs on Starlet,
a lightweight but powerful ASCII

237
00:15:34,279 --> 00:15:37,379
framework that it gives all
the speed and reliability that

238
00:15:37,379 --> 00:15:38,289
you want to start developing.

239
00:15:39,189 --> 00:15:40,449
But here's the fun part.

240
00:15:40,669 --> 00:15:45,159
FastAPI takes Python type hints and turns
them into something way more powerful.

241
00:15:45,719 --> 00:15:48,679
It's not just about a clean
code, but a smarter code.

242
00:15:49,604 --> 00:15:52,894
So with the type hints and Python link
working in the background, you get

243
00:15:53,064 --> 00:15:56,894
automatic validation, error handling,
and even interactive documentation.

244
00:15:56,904 --> 00:16:00,064
Basically, everything a developer dreams
of happening as you write your code.

245
00:16:00,634 --> 00:16:02,374
So why I'm so excited about this?

246
00:16:02,374 --> 00:16:05,414
Because FastAPI doesn't just
stop at building great APIs.

247
00:16:06,234 --> 00:16:09,954
When you pair it with GraphQL, it
becomes the ultimate tool for building

248
00:16:09,954 --> 00:16:11,634
modern, scalable microservices.

249
00:16:12,544 --> 00:16:13,534
So let's get into it.

250
00:16:14,034 --> 00:16:19,144
So moving on to the next slide, we
have The key components are the core

251
00:16:19,174 --> 00:16:22,704
components of FastAPI, which makes
it a high performance framework.

252
00:16:23,694 --> 00:16:27,054
So we could find that at its core,
we have the Starlet, which serves

253
00:16:27,054 --> 00:16:31,174
as the foundational ASCII framework
responsible for handling, routing,

254
00:16:31,584 --> 00:16:33,284
middleware, and concurrency.

255
00:16:33,294 --> 00:16:36,584
So it ensures that FastAPI
operates efficiently and reliably.

256
00:16:37,494 --> 00:16:41,484
Next, we have the Python link on the other
side, which is one of the most critical

257
00:16:41,494 --> 00:16:46,149
components that it handles the data
validation, serialization, and parsing.

258
00:16:46,649 --> 00:16:51,119
By leveraging the Python's type hint,
Python ensures that incoming data is

259
00:16:51,119 --> 00:16:55,969
validated automatically, reducing the
risk of errors and enhancing code quality.

260
00:16:56,749 --> 00:17:01,999
So it also integrates with the uvconn,
we know, like it's a fast ASCII server

261
00:17:02,009 --> 00:17:05,269
which ensures that optimal performance
in handling concurrent requests.

262
00:17:05,784 --> 00:17:10,434
Also been powered by the uv loop
and uvcon accelerates asynchronous

263
00:17:10,454 --> 00:17:15,054
operations, resulting in faster
response times and improved scalability.

264
00:17:15,844 --> 00:17:20,584
So finally, these components are all
powered by the compiled Python, the

265
00:17:20,644 --> 00:17:24,424
SciDun, and it forms the backbone
of fastAPI's execution environment.

266
00:17:24,894 --> 00:17:30,204
this comes the core components and these
all components work together to de To get

267
00:17:30,204 --> 00:17:34,964
FastAPI robust, scalable, and efficient
framework for building modern APIs.

268
00:17:35,464 --> 00:17:39,294
So now moving to the next topic
that is features of FastAPI.

269
00:17:40,134 --> 00:17:42,704
So the first one is the speed
and developers friendly.

270
00:17:43,574 --> 00:17:46,634
And as we said in the beginning,
FastAPI is one of the fastest.

271
00:17:47,384 --> 00:17:50,464
Frameworks Anavicon.

272
00:17:50,994 --> 00:17:55,254
And with Python type hints and Pythontic,
it significantly boosts developer

273
00:17:55,254 --> 00:17:57,324
predictivity, making coding smoother.

274
00:17:58,024 --> 00:18:02,234
And next one is based on
OpenAPI and JSON Schema.

275
00:18:02,284 --> 00:18:05,774
FastAPI automatically generates
OpenAPI specifications and JSON

276
00:18:05,774 --> 00:18:07,764
Schema documentation for APIs.

277
00:18:08,124 --> 00:18:11,694
providing industry standard way to
describe and interact with your endpoints.

278
00:18:12,474 --> 00:18:15,724
Next comes, the documentation,
automatic documentation, and it

279
00:18:15,734 --> 00:18:20,124
generates interactive, API documentation
using Swagger, UI, and etc.

280
00:18:20,204 --> 00:18:22,924
So it makes it easier for
developers to explore and test

281
00:18:22,924 --> 00:18:24,594
the API directly from the browser.

282
00:18:25,284 --> 00:18:27,244
So next one is the asynchronous support.

283
00:18:27,704 --> 00:18:31,724
FastAPI is designed to fully
support asynchronous programming,

284
00:18:31,894 --> 00:18:36,224
like allowing your application to
handle concurrent tasks efficiently

285
00:18:36,244 --> 00:18:38,554
and improving scalability.

286
00:18:39,094 --> 00:18:40,894
So next one is data validation.

287
00:18:41,819 --> 00:18:46,609
So Pythonic ensures that all the
data, like whether it's incoming

288
00:18:46,649 --> 00:18:51,049
or outgoing, it's automatically
validated, preventing many common

289
00:18:51,049 --> 00:18:52,959
errors before they could even happen.

290
00:18:53,929 --> 00:18:57,549
And FastAPI also excels in path
operations, like allowing you

291
00:18:57,549 --> 00:19:01,589
to define your API endpoints
with clear, concise syntax.

292
00:19:02,139 --> 00:19:04,849
When it comes to security
features, we have, it, it.

293
00:19:04,864 --> 00:19:08,794
It provides built in supports like JWT
and other authentication protocols,

294
00:19:08,794 --> 00:19:11,174
making it simple to implement secure APIs.

295
00:19:12,124 --> 00:19:15,844
And dependency engine is another
key feature, allowing you to manage

296
00:19:15,864 --> 00:19:19,954
and ensure dependencies with ease,
promoting clean and integrable code.

297
00:19:20,574 --> 00:19:25,354
And the last one, middleware
feature, like it, help us to

298
00:19:26,074 --> 00:19:30,154
add our custom functionality to
your applications, like logging,

299
00:19:30,394 --> 00:19:33,014
authentication, or session management.

300
00:19:33,014 --> 00:19:33,384
That's it.

301
00:19:33,844 --> 00:19:35,624
without cluttering the core logic.

302
00:19:36,234 --> 00:19:41,214
So all these features collectively make
this fast API comprehensive framework for

303
00:19:41,224 --> 00:19:44,574
building fast, secure, and scalable APIs.

304
00:19:45,074 --> 00:19:46,734
So let's move to the next slide.

305
00:19:47,234 --> 00:19:51,764
So now we can visualize the flow of
how fast API integrates with GraphQL

306
00:19:51,804 --> 00:19:53,244
and the surrounding components.

307
00:19:54,164 --> 00:19:57,744
So at the center, we have the fast
API GraphQL server, which acts as

308
00:19:57,744 --> 00:19:59,194
the backbone for your application.

309
00:20:00,069 --> 00:20:04,679
So it handles all the GraphQL
queries, process them and return

310
00:20:04,679 --> 00:20:05,989
the corresponding responses.

311
00:20:06,729 --> 00:20:09,979
So the GraphQL list is on the
top of FastAPI, where the client

312
00:20:09,979 --> 00:20:12,609
sends the queries and mutations
to interact with the API.

313
00:20:13,359 --> 00:20:18,369
The FastAPI process these requests and
through the GraphQL server resolves

314
00:20:18,369 --> 00:20:21,949
the queries by fetching the data
from your underlying data sources.

315
00:20:22,879 --> 00:20:27,554
So the client side Whether it's a web
application or a mobile app, the client

316
00:20:27,554 --> 00:20:32,904
sends GraphQL queries or mutations,
usually over HTTP or web sockets to

317
00:20:32,904 --> 00:20:34,334
interact with the FastAPI server.

318
00:20:34,834 --> 00:20:40,984
And as Aby has already said that in the
previous slide, this is exactly where

319
00:20:41,014 --> 00:20:45,414
GraphQL shines, that providing clients
with a flexible and efficient way.

320
00:20:46,209 --> 00:20:48,439
to request exactly the data they need.

321
00:20:49,379 --> 00:20:53,199
So at the bottom flow, we have the
database and FastAPI interacts with

322
00:20:53,209 --> 00:20:56,929
the database to create modified
data based on the GraphQL queries.

323
00:20:57,609 --> 00:21:01,969
And we know, as I have already told,
FastAPI is seamless asynchronous support.

324
00:21:02,189 --> 00:21:05,009
And this ensures that these
databases interact happening

325
00:21:05,019 --> 00:21:08,069
quickly and efficiently, making it
scalable for modern applications.

326
00:21:08,569 --> 00:21:13,849
So this flow illustrates how
FastAPI and GraphQL come together

327
00:21:13,849 --> 00:21:19,684
to create Powerful, flexible, and
scalable microservice architecture.

328
00:21:20,184 --> 00:21:23,704
So now let's see an example
of GraphQL with FastAPI.

329
00:21:24,204 --> 00:21:28,354
So at the top, we can see the
importing dependencies, and we

330
00:21:28,354 --> 00:21:32,324
are using here Graphin, which is
a library used for creating the

331
00:21:32,444 --> 00:21:34,214
GraphQL schema and defining types.

332
00:21:34,874 --> 00:21:40,784
And uvicorn lightning fast as a
server to run the FastAPI application.

333
00:21:40,784 --> 00:21:42,654
Also the FastAPI, the
framework we are using here.

334
00:21:42,654 --> 00:21:43,089
Thanks so much.

335
00:21:43,419 --> 00:21:46,539
And the Starlet Graphene 3, it's a
package providing the integration

336
00:21:46,539 --> 00:21:48,079
between GraphQL and FastAPI.

337
00:21:48,959 --> 00:21:52,709
And PostType class using Graphene.

338
00:21:52,739 --> 00:21:53,469
ObjectType.

339
00:21:53,639 --> 00:21:58,629
And this represents the structure of the
data we are exposing through GraphQL.

340
00:21:59,359 --> 00:22:03,419
So here we have seen, the ID
field, which is, of ID type,

341
00:22:03,449 --> 00:22:04,599
which is unique to each post.

342
00:22:04,629 --> 00:22:07,429
And the title and the summary
fields are also using GraphQL.

343
00:22:08,159 --> 00:22:11,089
Here, and they are using string
types, both marked as required.

344
00:22:11,779 --> 00:22:13,499
So here's the beauty of GraphQL.

345
00:22:14,189 --> 00:22:18,009
You can precisely define what
your API will return, making it

346
00:22:18,239 --> 00:22:20,229
both predictable and flexible.

347
00:22:20,729 --> 00:22:23,739
So next step, we are adding a query.

348
00:22:23,779 --> 00:22:26,449
We create a query class,
which is essentially the entry

349
00:22:26,449 --> 00:22:28,409
point for our GraphQL API.

350
00:22:29,049 --> 00:22:34,539
So we define a field called post, which
allows clients to fetch data about a

351
00:22:34,539 --> 00:22:39,129
specific And the result function, that
is, resultPost handles how the data is

352
00:22:39,149 --> 00:22:40,969
retrieved when a client makes a query.

353
00:22:41,379 --> 00:22:44,289
In this example, we return a
hardcoded post type object, but

354
00:22:44,309 --> 00:22:48,339
in real world scenarios, this is
where you would interact with your

355
00:22:48,369 --> 00:22:51,129
database or surveys to fetch the data.

356
00:22:51,829 --> 00:22:54,169
towards the end, we are
integrating with the FastAPI.

357
00:22:54,769 --> 00:22:58,509
We build the GraphQL
schema using graphene.

358
00:22:58,509 --> 00:23:00,729
schema and pass the query as it is.

359
00:23:01,544 --> 00:23:05,104
The root query, and then using
the GraphQL app from start of the

360
00:23:05,104 --> 00:23:10,554
graphing GraphQL endpoint that is
slash GraphQL into our FastAPI.

361
00:23:11,174 --> 00:23:14,804
And this is how FastAPI and
GraphQL are seamlessly connected.

362
00:23:15,424 --> 00:23:19,684
On running the application, let's
see what will be the output.

363
00:23:20,194 --> 00:23:25,634
you can see we are using the post
service, you can see on the top left

364
00:23:25,634 --> 00:23:29,004
side, and also the endpoint slash GraphQL.

365
00:23:29,419 --> 00:23:33,359
GraphQL, and that's the query we
are using that is posed in that we

366
00:23:33,359 --> 00:23:36,179
are asking for ID title and summary.

367
00:23:36,179 --> 00:23:40,769
And on the other side, we couldn't find
the response, which is a structured and

368
00:23:40,789 --> 00:23:42,789
predictable response we are getting.

369
00:23:43,629 --> 00:23:49,039
So this is a simple, very simple
example of GraphQL with fast API.

370
00:23:49,539 --> 00:23:52,089
So next we could move to the next slide.

371
00:23:52,589 --> 00:23:56,609
So now let's talk about GraphQL
Federation, a powerful approach

372
00:23:56,609 --> 00:23:58,319
for scaling GraphQL APIs.

373
00:23:58,319 --> 00:23:58,339
Thanks.

374
00:23:58,839 --> 00:24:03,379
at its core, GraphQL Federation allows
you to combine multiple GraphQL APIs,

375
00:24:03,399 --> 00:24:08,839
like each representing a distinct
service, into a single unified graph.

376
00:24:09,579 --> 00:24:13,069
This means that no matter how many
services you have, your clients

377
00:24:13,069 --> 00:24:15,749
can interact with all of them
through a single entry point.

378
00:24:16,719 --> 00:24:20,819
what's so exciting about is that instead
of managing complex client side logic for

379
00:24:20,819 --> 00:24:26,049
combining data from different services,
the federated graph handles it for you.

380
00:24:26,689 --> 00:24:30,389
The router efficiently directs
requests to the appropriate services,

381
00:24:30,799 --> 00:24:36,169
fetches the required data, and
assembles it to give the response.

382
00:24:36,819 --> 00:24:39,659
So now, taking a look at the
diagram, you will see how various

383
00:24:39,679 --> 00:24:43,269
web and mobile applications
interact with a single router.

384
00:24:43,979 --> 00:24:47,299
Behind the scenes, this router
communicates with individual services

385
00:24:47,309 --> 00:24:52,399
like here was service A, B, C, let it be
user, post or anything like that, ensuring

386
00:24:52,399 --> 00:24:54,619
that everything works as a quasi system.

387
00:24:55,369 --> 00:24:59,779
So with GraphQL federation, scaling
your microservice architecture

388
00:24:59,829 --> 00:25:03,139
becomes not just easier, but smarter.

389
00:25:03,579 --> 00:25:05,799
So let's see an example in the next slide.

390
00:25:06,299 --> 00:25:09,149
So now let's see an example
for GraphQL federation.

391
00:25:09,994 --> 00:25:12,974
We could see a schema here and
three services, post service,

392
00:25:12,974 --> 00:25:14,594
review service, and user service.

393
00:25:15,174 --> 00:25:20,604
At a schema of type post, we have title,
which belongs to the post service, reviews

394
00:25:20,634 --> 00:25:25,054
belong to another service called review
service, and author, which belongs to

395
00:25:25,054 --> 00:25:26,484
another service called user service.

396
00:25:26,494 --> 00:25:29,644
So this is exactly how the
GraphQL Federation works.

397
00:25:30,104 --> 00:25:30,624
That is.

398
00:25:31,069 --> 00:25:35,419
We don't need to duplicate data or write
extra logic to stitch them together.

399
00:25:36,029 --> 00:25:39,499
Each service defines only what
it owns and the federation layer

400
00:25:39,739 --> 00:25:41,329
automatically resolves everything.

401
00:25:42,209 --> 00:25:49,139
let's see, the output, or just we can see
the user's query and it can fetch the data

402
00:25:49,229 --> 00:25:51,499
if, even if it belongs to another service.

403
00:25:52,019 --> 00:25:55,719
this is how the GraphQL federation
works and there's a lot more to learn

404
00:25:55,739 --> 00:25:58,779
in this, it's just a simple explanation.

405
00:25:59,279 --> 00:26:01,529
So thus, we come to the end of our slides.

406
00:26:02,079 --> 00:26:06,779
to wrap up things, today we explore
GraphQL, its flexibility, efficiency,

407
00:26:06,799 --> 00:26:09,529
and how it changes the way we build APIs.

408
00:26:10,249 --> 00:26:14,719
We did so how FastAPI with its speed
and developer friendly features make

409
00:26:14,739 --> 00:26:16,759
integrating GraphQL even more powerful.

410
00:26:17,679 --> 00:26:23,009
And finally, we dive into GraphQL
Federation, where multiple microservices

411
00:26:23,549 --> 00:26:26,189
comes together to form a unified API.

412
00:26:26,689 --> 00:26:30,069
So with all these tools, we are
not just building APIs, we are

413
00:26:30,569 --> 00:26:34,869
architecting the scalable, efficient,
and future ready microservices.

414
00:26:35,369 --> 00:26:37,729
So thank you all for
your time and attention.

415
00:26:37,849 --> 00:26:42,109
Keep exploring, stay curious,
and keep building amazing things.

416
00:26:42,929 --> 00:26:45,899
Stay updated and let's
continue learning together.

417
00:26:46,339 --> 00:26:46,739
Thank you.

