1
00:00:00,360 --> 00:00:04,950
Hey everyone, and welcome
to Con 42 Golang 2025.

2
00:00:05,850 --> 00:00:11,310
I'm Banini, and today I want to take
you on a journey through one of the

3
00:00:11,310 --> 00:00:16,860
most promising areas in cloud security
called confidential computing.

4
00:00:17,790 --> 00:00:22,170
We'll see how it's not just a buzzword,
but a practical production ready

5
00:00:22,170 --> 00:00:24,210
approach to running secure workloads.

6
00:00:24,974 --> 00:00:31,064
And how Go happens to be an incredible
tool for building in this space.

7
00:00:31,564 --> 00:00:36,065
Just to set the context, I am
currently a senior software engineer

8
00:00:36,245 --> 00:00:41,425
at Walmart Global Tech, where I work on
scaling secure distributed platforms.

9
00:00:41,925 --> 00:00:47,144
Most of my work sits at the intersection
of cloud native infrastructure.

10
00:00:47,550 --> 00:00:49,650
Security and performance.

11
00:00:50,310 --> 00:00:56,400
I work with tools like Go Kubernetes
and various encryption frameworks on a

12
00:00:56,550 --> 00:01:03,269
daily basis, and that's why confidential
computing caught my attention because, it

13
00:01:03,269 --> 00:01:09,560
allows us to design systems where trust
is built in and not just assumed and

14
00:01:09,920 --> 00:01:12,890
go is a surprisingly good fit for that.

15
00:01:13,390 --> 00:01:18,260
So let's begin by talking
about why, this even matters.

16
00:01:18,760 --> 00:01:24,990
So over the past decade, our systems have
exploded in complexity, microservices,

17
00:01:25,019 --> 00:01:28,019
APIs, cloud Edge, et cetera, right?

18
00:01:28,529 --> 00:01:33,880
That came into, popularity and
there has been a wide usage of

19
00:01:33,880 --> 00:01:36,580
those in the enterprise industry.

20
00:01:37,080 --> 00:01:43,630
But, with that growth, our attack
surface has also, grown, massively.

21
00:01:44,130 --> 00:01:51,839
So today the average enterprise sees a 2.5
x annual increase in attack entry points.

22
00:01:52,770 --> 00:01:53,879
And here's the kicker.

23
00:01:54,480 --> 00:01:59,339
Nearly 80% of data breaches
involve privileged access misuse.

24
00:02:00,149 --> 00:02:04,700
This means, attackers aren't always
breaking in from the outside.

25
00:02:04,910 --> 00:02:07,460
They're just misusing
what's already trusted.

26
00:02:07,959 --> 00:02:12,004
So with that in mind, traditional
perimeter security like firewalls,

27
00:02:12,579 --> 00:02:17,359
VPNs, IM, which is, which are widely
used, today in all the enterprises.

28
00:02:18,224 --> 00:02:21,044
enterprise orgs, it's no longer enough.

29
00:02:21,974 --> 00:02:26,924
What we need is a way to protect data even
when the infrastructure is compromised.

30
00:02:27,734 --> 00:02:31,634
That's exactly where confidential
computing enters a picture.

31
00:02:32,134 --> 00:02:40,414
So foundations of these at the core
of confidential computing are trusted

32
00:02:40,444 --> 00:02:43,084
execution environments are simply.

33
00:02:43,584 --> 00:02:49,674
Dees, think of them as a lockbox
inside your CPUA place where

34
00:02:49,674 --> 00:02:55,494
sensitive code and data can execute
isolated from the rest of the system.

35
00:02:55,994 --> 00:02:58,814
Three things make Dees powerful.

36
00:02:59,314 --> 00:03:02,524
They are isolation,
attestation, and encryption.

37
00:03:03,024 --> 00:03:03,684
Sorry about that.

38
00:03:04,404 --> 00:03:07,284
Let's talk about, each of them isolation.

39
00:03:08,034 --> 00:03:12,354
Even if someone has, due taxes,
they can't peek into the enclave

40
00:03:12,854 --> 00:03:17,984
and coming to the attestation, you
can prove that only trusted verified

41
00:03:17,984 --> 00:03:19,604
code is running inside the enclave.

42
00:03:20,104 --> 00:03:27,094
And lastly, encryption data remains
protected at all stages, addressed

43
00:03:27,214 --> 00:03:29,344
in memory and during execution.

44
00:03:30,154 --> 00:03:31,079
So with all these.

45
00:03:31,774 --> 00:03:35,274
It's zero trust implemented
at the hardware level.

46
00:03:35,774 --> 00:03:39,114
Now here's the interesting,
interesting twist.

47
00:03:39,564 --> 00:03:41,844
Why should we use go in this space?

48
00:03:42,694 --> 00:03:48,604
There are many languages, available
Java, scaler or any other languages

49
00:03:48,604 --> 00:03:52,594
like Python, low level languages
like c. C plus rust, et cetera.

50
00:03:53,464 --> 00:03:58,114
So Dees are typically
associated with C or rust.

51
00:03:58,574 --> 00:04:00,664
that is, low level system languages.

52
00:04:01,444 --> 00:04:05,494
But go is quietly carving an issue.

53
00:04:05,944 --> 00:04:10,684
Y first go has a tiny runtime footprint.

54
00:04:11,464 --> 00:04:16,414
This makes it ideal for running
inside resource constraint

55
00:04:16,654 --> 00:04:19,504
environments like Cleves Second.

56
00:04:20,029 --> 00:04:24,769
Goals type, safety and simple
syntax reduce the chances of memory,

57
00:04:24,769 --> 00:04:26,869
corruption, or security bugs.

58
00:04:27,679 --> 00:04:30,194
These are huge ones when
working in trusted environments.

59
00:04:30,694 --> 00:04:34,564
And goes concurrency
model with go routines.

60
00:04:34,984 --> 00:04:40,024
Let us write parallel workloads that are
still lightweight enough to run securely.

61
00:04:40,954 --> 00:04:45,844
So with all these, the balance go
strikes between developer simplicity

62
00:04:45,904 --> 00:04:50,494
and system level efficiency makes
it a great fit for the domain.

63
00:04:50,994 --> 00:04:54,864
So now coming to the performance
breakthroughs, right?

64
00:04:54,954 --> 00:05:01,254
One of the common criticisms of Dees
used to be performance, and rightly

65
00:05:01,304 --> 00:05:06,075
early implementations were slow back
in 2018, as you see in the graph,

66
00:05:06,494 --> 00:05:11,354
running code inside an ink leaf could
add up to 35% performance overhead.

67
00:05:12,075 --> 00:05:15,375
That's a lot, but just five years later.

68
00:05:15,989 --> 00:05:19,529
We are down to around 4%
overhead on modern hardware.

69
00:05:20,489 --> 00:05:22,529
That's a game changer, right?

70
00:05:23,009 --> 00:05:27,340
Combined with course efficient memory
handling and over, low overhead.

71
00:05:28,030 --> 00:05:32,599
It, finally makes sense, to
that the confidential computing,

72
00:05:33,289 --> 00:05:37,699
is practical for production
workloads, not just any prototypes.

73
00:05:38,199 --> 00:05:39,519
Coding inside ENC Cleaves.

74
00:05:39,729 --> 00:05:41,679
So let's talk implementation.

75
00:05:42,669 --> 00:05:49,479
How does this actually work in practice
when you're writing Go code for Es, right?

76
00:05:49,869 --> 00:05:52,389
The basic flow usually looks like this.

77
00:05:52,959 --> 00:06:00,254
You initialize the enclave, which sets
up a isolated memory space and generates

78
00:06:00,434 --> 00:06:03,254
secure keys, and then comes attestation.

79
00:06:03,754 --> 00:06:08,974
You prove cryptographically that the
code inside is what it's supposed to be.

80
00:06:09,474 --> 00:06:14,784
And once verified, you run your sensitive
logic, maybe decrypting your data,

81
00:06:14,844 --> 00:06:17,184
processing it or applying analytics.

82
00:06:17,994 --> 00:06:23,124
And finally you seal the results, meaning,
they're encrypted before leaving the ncl.

83
00:06:23,624 --> 00:06:27,644
So ghost structure
actually helps a lot here.

84
00:06:28,484 --> 00:06:29,894
It's easy to build.

85
00:06:30,299 --> 00:06:36,229
Clean state machines, modularize logic,
and right secure test around these stages.

86
00:06:36,729 --> 00:06:40,439
So enclaves and microservice architecture.

87
00:06:41,369 --> 00:06:45,914
Now, not everything needs to
be run in an enclave, right?

88
00:06:45,989 --> 00:06:46,829
And that's the key.

89
00:06:47,309 --> 00:06:49,649
So let's take for example.

90
00:06:50,159 --> 00:06:54,189
In a microservice architecture,
there might be many services, And

91
00:06:54,549 --> 00:07:00,309
some might be, very sensitive data,
which needs to be part of the Cleve.

92
00:07:00,759 --> 00:07:02,169
And some should be fine.

93
00:07:02,269 --> 00:07:06,249
even if it is, running outside and
even if it is compromised, there is

94
00:07:06,249 --> 00:07:09,099
nothing much that we would lose, right?

95
00:07:09,549 --> 00:07:14,319
So keeping that in mind, in a
microservice architecture, we

96
00:07:14,319 --> 00:07:15,674
take our targeted approach.

97
00:07:16,614 --> 00:07:20,694
For secure data ingestion,
we encrypt data at entry.

98
00:07:21,324 --> 00:07:25,494
And for sensitive logic, like working
with PII, personal information,

99
00:07:25,914 --> 00:07:28,224
we run it inside the enclave.

100
00:07:28,644 --> 00:07:33,374
And supporting services can
handle buying, blind processing

101
00:07:33,434 --> 00:07:35,054
on enc, encrypted payloads.

102
00:07:36,044 --> 00:07:40,874
And finally, the authorized
delivery phase, decrypts results

103
00:07:40,934 --> 00:07:42,614
only for verified consumers.

104
00:07:43,114 --> 00:07:47,644
This modular security lets you
protect only what's critical,

105
00:07:48,374 --> 00:07:52,004
minimizing the performance hit
while maximizing data protection.

106
00:07:52,504 --> 00:07:53,164
Perfect.

107
00:07:53,314 --> 00:07:58,024
So one question I've heard a
lot, I've seen a lot in different

108
00:07:58,294 --> 00:08:02,394
discussion channels around this
topic is, can we actually integrate

109
00:08:02,394 --> 00:08:04,554
this into DevOps pipelines?

110
00:08:04,854 --> 00:08:10,434
And the answer is yes, and the
tooling is maturing really fast.

111
00:08:10,934 --> 00:08:16,774
You can enforce attestation checks
before workloads are deployed, and

112
00:08:17,164 --> 00:08:24,904
Kubernetes operators can now orchestrate
NLA workloads using extended CRDs and

113
00:08:24,964 --> 00:08:29,874
tools like HashiCorp Vault support,
enclave packed secret distribution.

114
00:08:30,374 --> 00:08:36,134
And with hardware support, secure
boot tpms and remote attestation,

115
00:08:36,764 --> 00:08:40,064
it's becoming feasible to run
trusted workloads at scale.

116
00:08:41,024 --> 00:08:46,804
So with all these, it opens up
confidential computing to cloud native

117
00:08:46,804 --> 00:08:48,484
workflows, and that's a major win.

118
00:08:49,114 --> 00:08:52,164
And, not just tightly
controlled environments.

119
00:08:52,704 --> 00:08:57,744
So that gives us, the advantage
over the cloud native workflows in

120
00:08:58,224 --> 00:09:00,984
setting up seamless integrations.

121
00:09:01,484 --> 00:09:06,134
And then let's look at a real
world scenario now, right?

122
00:09:06,234 --> 00:09:08,249
like analytics on encrypted data.

123
00:09:09,234 --> 00:09:13,504
So the flow would look like,
we ingest encrypted data, say

124
00:09:13,504 --> 00:09:15,694
from users or edge devices.

125
00:09:16,444 --> 00:09:21,634
The data flows into a TEE based
analytics engine, and inside the

126
00:09:21,634 --> 00:09:25,594
enclave data is decrypted analyzed
and the results are sealed.

127
00:09:25,594 --> 00:09:30,204
Again, only end points with
proper identity and attestation

128
00:09:30,444 --> 00:09:32,124
can read the final output.

129
00:09:32,624 --> 00:09:33,434
What does this do?

130
00:09:33,934 --> 00:09:39,654
So with this proper flow that
we discussed here, it creates a

131
00:09:39,714 --> 00:09:42,084
zero trust analytics pipeline.

132
00:09:42,984 --> 00:09:49,704
Perfect for industries like healthcare,
finance, or multi-tenant SaaS where data

133
00:09:50,034 --> 00:09:52,314
separation and privacy are critical.

134
00:09:52,814 --> 00:09:58,894
Alright, now, engineering challenges,
of course, this, isn't a silver bullet.

135
00:09:59,404 --> 00:10:06,124
There are challenges and those
would be side, channel attacks.

136
00:10:06,874 --> 00:10:08,854
So these are still a risk.

137
00:10:09,214 --> 00:10:13,174
They require careful engineering
and mitigation at both

138
00:10:13,174 --> 00:10:14,944
hardware and software layers.

139
00:10:15,444 --> 00:10:21,464
Then comes the remote attestation
where it becomes complex across large

140
00:10:21,464 --> 00:10:24,314
clusters or hybrid environments.

141
00:10:25,184 --> 00:10:31,214
And then key distribution is especially
hard when dealing with isolated nodes.

142
00:10:32,159 --> 00:10:36,539
And secure channels must be
established without exposing secrets

143
00:10:37,499 --> 00:10:42,779
and designing minimal APIs between
enclave and non enclave code is

144
00:10:42,779 --> 00:10:45,989
critical to reduce data leakage risks.

145
00:10:46,489 --> 00:10:51,799
So these, all, these are Aren
easy problems, but the open source

146
00:10:51,804 --> 00:10:57,849
community is making real progress
and projects like, NA and grammar.

147
00:10:58,349 --> 00:11:02,459
And secure key orchestration layers
are paving the way for all this.

148
00:11:02,959 --> 00:11:07,029
All right, so with all that,
the next question, next question

149
00:11:07,029 --> 00:11:08,469
comes where are we headed?

150
00:11:08,969 --> 00:11:13,260
So the future is shaping up
to be even more powerful.

151
00:11:14,219 --> 00:11:21,290
So we are seeing multi-party computation
that will let us analyze joint data sets.

152
00:11:21,890 --> 00:11:23,900
Without ever exposing raw data.

153
00:11:24,859 --> 00:11:31,129
And then we have confidential containers,
which will allow us to deploy secure

154
00:11:31,129 --> 00:11:38,380
workloads with minimal friction, and then
specialized chips and TEE acceleration

155
00:11:38,530 --> 00:11:41,439
will bring near native performance.

156
00:11:41,939 --> 00:11:48,780
And all in all, zero knowledge proofs will
let us verify correctness of computations.

157
00:11:49,439 --> 00:11:58,039
Without revealing any inputs, and with all
these go as a language is evolving right

158
00:11:58,069 --> 00:12:04,219
along with it, it has the simplicity,
speed, and structure to be at the heart

159
00:12:04,249 --> 00:12:06,094
of trusted systems in this new era.

160
00:12:06,594 --> 00:12:06,984
Great.

161
00:12:07,254 --> 00:12:09,114
And with that, thank you.

162
00:12:09,774 --> 00:12:14,514
I hope this session gave you a clear
view into why confidential computing

163
00:12:14,514 --> 00:12:20,454
matters and how go can be a key
enabler of building secure systems

164
00:12:20,694 --> 00:12:23,004
that are cloud native and future ready.

165
00:12:23,964 --> 00:12:28,164
If you are curious, experimenting,
or building something in the space.

166
00:12:28,764 --> 00:12:32,844
I would love to hear from you,
and you can find me on LinkedIn

167
00:12:33,054 --> 00:12:37,574
at linkedin.com/in/banini.

168
00:12:38,414 --> 00:12:42,494
Or you can scan the QR code,
present here and you'll land

169
00:12:42,494 --> 00:12:44,714
directly into my LinkedIn profile.

170
00:12:45,214 --> 00:12:49,619
Thanks for listening and enjoy
the rest of, con 42 Golan, 2025.

