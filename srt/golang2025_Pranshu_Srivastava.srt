1
00:00:00,500 --> 00:00:01,220
Hi folks.

2
00:00:01,220 --> 00:00:02,030
I'm Chu.

3
00:00:02,240 --> 00:00:06,710
welcome to my talk on the Power of
Cilium with EVPF and let's jump right in.

4
00:00:07,209 --> 00:00:10,300
So first, let's talk about what is EVPF?

5
00:00:10,300 --> 00:00:15,160
in layman terms, EVPF is basically
a tool that you can use to

6
00:00:15,220 --> 00:00:18,310
attach functions to system calls.

7
00:00:18,490 --> 00:00:19,540
So basically.

8
00:00:20,320 --> 00:00:24,370
Like we have the send and receive
system calls that are used to send

9
00:00:24,370 --> 00:00:26,379
and receive, data from the machine.

10
00:00:26,540 --> 00:00:30,560
so if you attach functions to
that, then in that case, if any

11
00:00:30,560 --> 00:00:35,470
application calls those functions,
or those system calls, your function

12
00:00:35,470 --> 00:00:37,600
will automatically get executed.

13
00:00:38,170 --> 00:00:41,595
And you can do all sorts of things
there, like when you can access

14
00:00:41,595 --> 00:00:43,125
the data that is being sent.

15
00:00:43,425 --> 00:00:47,675
To the system calls or you can access
the data structures in the system calls,

16
00:00:47,675 --> 00:00:52,985
or you can perform any specific function
that you wanted to when the system

17
00:00:52,985 --> 00:01:01,635
calls are hit and EBPF is actually an
extension or an upgrade on top of BPF.

18
00:01:02,475 --> 00:01:08,965
That was a tool that worked in a very
similar way, but, the only difference.

19
00:01:09,490 --> 00:01:14,869
Was that it was only attachable
to user space, functions.

20
00:01:15,050 --> 00:01:22,820
And it could only be used to filter
packets and not perform the advanced

21
00:01:22,940 --> 00:01:25,940
functions that we can using EVPF.

22
00:01:26,440 --> 00:01:33,050
and the biggest, benefit of
using EVPF is its, performance.

23
00:01:33,199 --> 00:01:35,479
So basically you can attach.

24
00:01:36,065 --> 00:01:40,475
All the probes that you want with
minimum performance overhead, because

25
00:01:40,535 --> 00:01:46,835
these EPF probes are really lightweight
and they attach very efficiently

26
00:01:46,835 --> 00:01:53,825
to the system calls, and they
definitely don't hinder your, the a,

27
00:01:53,915 --> 00:01:55,684
the performance of your application.

28
00:01:56,294 --> 00:02:00,554
so if high performance is one
of the priorities for their

29
00:02:00,554 --> 00:02:05,694
application, you, EBPF is definitely
an option that you can look for.

30
00:02:06,194 --> 00:02:07,860
and in terms of what is cilium?

31
00:02:07,865 --> 00:02:14,685
Cilium is basically used to write the
user space code for getting all the

32
00:02:14,685 --> 00:02:20,505
data and everything that we have done
in EBVF happens in the kernel space.

33
00:02:20,925 --> 00:02:26,115
So to get that data in the user space,
you need to write user space code.

34
00:02:26,825 --> 00:02:32,584
So for that we use cilium, and cilium
is not the only option out there.

35
00:02:33,214 --> 00:02:37,894
we have a lot of options in c
plus Python and also in Rust.

36
00:02:38,504 --> 00:02:45,104
the reason that we went with Cilium
was that first of all, our rest of

37
00:02:45,104 --> 00:02:50,384
the application was written in Go and,
Go is definitely one of the better

38
00:02:50,384 --> 00:02:53,234
languages for observability applications.

39
00:02:53,804 --> 00:03:02,485
So we, wanted to stick with Go and
also, cilium and Go in general has a

40
00:03:02,485 --> 00:03:06,475
really active and helpful community
that you can leverage if you run

41
00:03:06,475 --> 00:03:08,305
into any sort of problems with it.

42
00:03:08,305 --> 00:03:13,935
And that is what we definitely did
and we got a lot of help from that.

43
00:03:14,435 --> 00:03:20,975
apart from that, cilium is a really active
project and it has active maintainers that

44
00:03:20,975 --> 00:03:27,015
are always, ready to help or take a look
at any of the issues that you are having.

45
00:03:27,015 --> 00:03:31,515
So basically, your development
becomes much faster.

46
00:03:32,385 --> 00:03:33,075
While using it.

47
00:03:33,075 --> 00:03:34,785
And that is what we experienced.

48
00:03:35,055 --> 00:03:40,395
But also there are other options
in rust, c plus and Python.

49
00:03:40,965 --> 00:03:45,745
I, and like one of the reasons that we
did not go for them is, first because

50
00:03:45,745 --> 00:03:50,475
rust is, definitely more, memory safe
compared to the other languages, but

51
00:03:50,715 --> 00:03:52,785
it has a steep learning curve and.

52
00:03:53,760 --> 00:03:56,670
There is not a lot of
support for a T eight.

53
00:03:56,710 --> 00:04:02,570
we were not sure if that would be
the ideal way forward if we couldn't

54
00:04:02,570 --> 00:04:07,800
get, a lot of support because
E-E-E-B-P-F itself is a really recent

55
00:04:07,800 --> 00:04:13,880
technology, so that too has, really,
limited support and docs, so we.

56
00:04:14,840 --> 00:04:21,550
Wanted to go for something with a bit
more support and, c plus, was getting

57
00:04:21,550 --> 00:04:26,620
like really low le level for us, and
that is what we did not want to do.

58
00:04:26,620 --> 00:04:28,570
So we ended up sticking with cilium.

59
00:04:29,350 --> 00:04:33,580
But if you have other requirements
or you do not agree with these

60
00:04:33,580 --> 00:04:38,470
reasons, there are these bunch
of options that you can go for.

61
00:04:38,530 --> 00:04:48,935
So for Rust, you have ia. And since, it is
in rust, it obviously offers better memory

62
00:04:48,935 --> 00:04:53,735
safety compared to the other alternatives
that we have in go and c plus.

63
00:04:54,365 --> 00:05:00,985
But obviously, as I mentioned, it has
a more steeper learning curve and, the

64
00:05:00,985 --> 00:05:03,985
support is also not as much as cilium.

65
00:05:04,810 --> 00:05:09,310
And for Python, you have B, C, CB.

66
00:05:09,355 --> 00:05:14,280
C. C provides you all the libraries
that you need for, writing your user

67
00:05:14,280 --> 00:05:17,560
space code, for getting the data.

68
00:05:17,590 --> 00:05:24,554
And you also have the BPF that you
can, in c plus and also PCC and Lake

69
00:05:24,635 --> 00:05:26,900
VPF are actually two of the more.

70
00:05:27,619 --> 00:05:32,509
Popular, most popular, languages
used for not languages.

71
00:05:32,569 --> 00:05:37,189
Their frameworks used for, writing
kernel space coding, A BPF.

72
00:05:37,340 --> 00:05:42,499
But one major difference between
them is that late BPF runs on the

73
00:05:42,499 --> 00:05:45,699
idea of compile once, use everywhere.

74
00:05:45,699 --> 00:05:47,181
So basically if you have.

75
00:05:47,681 --> 00:05:49,091
Written your source files.

76
00:05:49,270 --> 00:05:53,140
You just need to compile it once,
and then you can run that EPF

77
00:05:53,140 --> 00:05:57,191
program anywhere as long as you
have the object files with you.

78
00:05:57,851 --> 00:06:02,441
But that is not the case with
BC, C because you will need to

79
00:06:02,441 --> 00:06:06,316
compile it every time that you
need to run your EVPF application.

80
00:06:06,656 --> 00:06:13,526
The problem becomes that you will need
to include your source file in the main,

81
00:06:14,176 --> 00:06:18,346
repository of your project, which could
be a deal breaker for a lot of people.

82
00:06:18,346 --> 00:06:23,806
And that is also one of the
reasons that we went for lib BPF.

83
00:06:24,806 --> 00:06:31,105
so we could just compile it once
on our end and we could just

84
00:06:31,525 --> 00:06:33,925
use the object files in the.

85
00:06:34,425 --> 00:06:38,595
in our main repo and that
would get the job done for us.

86
00:06:39,165 --> 00:06:43,875
So it basically depends on
your needs and what you prefer.

87
00:06:44,375 --> 00:06:48,345
So I just, wanted to talk about user
space and the kernel space a bit more.

88
00:06:48,345 --> 00:06:54,555
So the user space is basically where
your application runs and where all

89
00:06:54,555 --> 00:06:57,145
the user side, Handling happens.

90
00:06:57,145 --> 00:06:57,625
So

91
00:06:58,125 --> 00:07:02,085
basically everything that you
can run and interact with is

92
00:07:02,085 --> 00:07:03,705
running in the user space.

93
00:07:03,915 --> 00:07:08,715
And it obviously has very limited
access to system resources as

94
00:07:08,715 --> 00:07:13,000
it is on a very high level as
compared to the kernel space, but

95
00:07:13,000 --> 00:07:16,510
it is where your users interact.

96
00:07:17,010 --> 00:07:17,820
With their application.

97
00:07:17,870 --> 00:07:19,820
so that's why it is important.

98
00:07:20,300 --> 00:07:25,631
And the kernel space is really
more low level compared to the user

99
00:07:25,631 --> 00:07:30,710
space, and it has direct access
to obviously all your hardware.

100
00:07:30,740 --> 00:07:36,860
And it is, it typically has
really high performance and it.

101
00:07:37,775 --> 00:07:41,396
Perform all the low level,
operations for your application.

102
00:07:42,186 --> 00:07:49,776
so here we are using EVPF as a bridge
so that, we can get the data from the

103
00:07:49,776 --> 00:07:55,086
kernel space and then use it in the user
space so that we can take advantage of

104
00:07:55,086 --> 00:08:01,896
both the kernel space and the user space
in our case, and we are able to show.

105
00:08:02,396 --> 00:08:08,356
The user, the most low level data
that is possible to be shown.

106
00:08:08,856 --> 00:08:15,966
so here is the, c an example
of C code that we had used.

107
00:08:15,966 --> 00:08:20,506
So basically after you have,
Retain your kernel space code.

108
00:08:20,716 --> 00:08:22,156
You just need to compile it.

109
00:08:22,156 --> 00:08:25,696
And that would generate
objects for you in cilium.

110
00:08:26,356 --> 00:08:33,256
And then you basically need to attach
the probes to all the calls that you had.

111
00:08:33,266 --> 00:08:36,116
let me first explain this using a diagram.

112
00:08:36,236 --> 00:08:39,026
This is by Pixie and this
explains it really well.

113
00:08:39,836 --> 00:08:44,356
So suppose you have an
application that is making.

114
00:08:44,856 --> 00:08:46,956
Encrypted calls to a website, right?

115
00:08:47,556 --> 00:08:54,796
So in that case, it'll first call the open
SSL, library to encrypt its data and then

116
00:08:54,856 --> 00:09:00,401
it'll call the send and receive system
calls to send and, receive that data.

117
00:09:00,901 --> 00:09:06,691
So in this case, if you wanted to access
the data before it gets encrypted,

118
00:09:06,991 --> 00:09:12,921
and if you attached a probe to the
send system call, that would not work

119
00:09:13,641 --> 00:09:20,971
because in the data is actually getting
encrypted in the TLS, library and not

120
00:09:20,971 --> 00:09:23,061
the send and receive system calls.

121
00:09:23,841 --> 00:09:29,361
Basically after the application
calls the DLS library, it encrypts

122
00:09:29,691 --> 00:09:34,791
the data using the SSL read and the
SSL right functions that it has.

123
00:09:34,851 --> 00:09:38,031
And then after the data is
encrypted, it is sent to the

124
00:09:38,031 --> 00:09:39,921
send and receive system calls.

125
00:09:40,821 --> 00:09:42,866
So if you try to access.

126
00:09:43,611 --> 00:09:47,151
The data here, all you are
going to get is gibberish.

127
00:09:47,151 --> 00:09:52,011
So for that, you would need to attach
probes to the SSL Read and the SSL

128
00:09:52,311 --> 00:09:55,851
right functions because that is
where the encryption is happening.

129
00:09:56,391 --> 00:10:02,001
So you can access the data before
that encryption happens, and you can

130
00:10:02,001 --> 00:10:03,351
do all sorts of things with that.

131
00:10:04,041 --> 00:10:08,031
So here that is what we are doing.

132
00:10:08,091 --> 00:10:11,391
So we open.

133
00:10:11,891 --> 00:10:16,681
Per prefer to check for all
the events on those functions.

134
00:10:16,951 --> 00:10:19,021
That is the SL lead and
the SL right functions.

135
00:10:19,051 --> 00:10:24,431
And then we, attach probes
to those functions like.

136
00:10:25,121 --> 00:10:31,241
Here, and here we are using a U probe
because, this TLS library is in the

137
00:10:31,241 --> 00:10:33,311
user space and not in the kernel space.

138
00:10:33,311 --> 00:10:38,981
So in this case, we are attaching a U
probe and if we were to attach, probes

139
00:10:39,131 --> 00:10:44,321
on send, receive, or any of the system
calls, we would be using K probes.

140
00:10:45,251 --> 00:10:49,481
So in this case, we attach a
probe each at the ending and

141
00:10:49,481 --> 00:10:50,651
the starting of the function.

142
00:10:51,101 --> 00:10:56,951
So here we have a probe at the starting
of the SSL right Function and one at

143
00:10:56,951 --> 00:10:58,781
the ending of the SSL right function.

144
00:10:59,201 --> 00:11:06,701
And similarly, we attach probes with
the SSL Read entry and the exit, and we

145
00:11:07,201 --> 00:11:10,291
keep polling for any data that we get.

146
00:11:10,291 --> 00:11:13,261
And then we can do all sorts
of things with that data.

147
00:11:13,321 --> 00:11:18,751
So to demonstrate this,
I also have a demo.

148
00:11:18,901 --> 00:11:22,301
This is, pixie demo that I'll
be using for, showing this.

149
00:11:22,301 --> 00:11:26,531
So what we have here is
essentially what we talked about.

150
00:11:26,531 --> 00:11:33,461
We have a client and a server application
that are basically establishing a TLS

151
00:11:33,461 --> 00:11:38,591
connection with each other, and then they
are sending encrypted data to each other.

152
00:11:38,681 --> 00:11:43,121
And we are going to try to get
that data using our EBPF program.

153
00:11:43,621 --> 00:11:48,351
So l let me just show you how
the application works first.

154
00:11:48,851 --> 00:11:53,611
lemme start the server here
and start the client here.

155
00:11:54,111 --> 00:12:00,007
So I have logged the PID, first
of all to Use it in our tracer.

156
00:12:00,067 --> 00:12:02,557
And this is basically what is happening.

157
00:12:02,797 --> 00:12:08,047
It is the server is sending it
some secrets and the client is

158
00:12:08,857 --> 00:12:12,487
sending the server some secrets
and they have established an

159
00:12:12,487 --> 00:12:14,197
SSL connection with each other.

160
00:12:14,697 --> 00:12:19,107
so let's look at the A BBF
code that we have for this.

161
00:12:19,107 --> 00:12:22,077
So if we go to the tracer.

162
00:12:22,577 --> 00:12:28,787
Here we have linked it to
the open SSL library that we

163
00:12:28,787 --> 00:12:30,107
have in our machine That is.

164
00:12:30,607 --> 00:12:33,487
So here we have attached
it to our library.

165
00:12:33,987 --> 00:12:39,587
That is the lab SSL library
for Linux, and we have attached

166
00:12:39,917 --> 00:12:42,047
the probes on the SSL, right?

167
00:12:42,047 --> 00:12:43,517
And the SSL rate functions.

168
00:12:44,027 --> 00:12:46,717
And we have essentially
attached two probes.

169
00:12:46,717 --> 00:12:51,697
One at the entry of that lab,
of that function, and one at

170
00:12:51,697 --> 00:12:53,047
the exit of that function.

171
00:12:53,547 --> 00:13:00,267
and here at the end, we are just
going to be polling these functions

172
00:13:00,267 --> 00:13:03,027
for any kind of data that we get.

173
00:13:03,867 --> 00:13:09,657
So as you can see in this infinite
while loop, we just keep polling for

174
00:13:09,657 --> 00:13:15,537
the data as long as we, as long as
the EPPF probes are attached to it.

175
00:13:16,347 --> 00:13:19,437
And in terms of functions we have.

176
00:13:19,937 --> 00:13:22,067
The functions right here.

177
00:13:22,567 --> 00:13:30,927
If you see, so here we have the actual
functions that are using the processing.

178
00:13:30,927 --> 00:13:37,437
So first let's take a look at the
SSL Read and the SSL right function.

179
00:13:38,217 --> 00:13:44,437
So here it is, getting the data,
using this specific, register called.

180
00:13:44,937 --> 00:13:45,157
Two.

181
00:13:45,662 --> 00:13:51,062
And we are, and we have basically
created a hash map that, that would

182
00:13:51,062 --> 00:13:54,692
map the data to a specific TGID.

183
00:13:55,202 --> 00:13:59,582
And that is how we are going to
be storing it and processing it.

184
00:14:00,332 --> 00:14:05,482
And at the end here, he
just submit this event.

185
00:14:06,082 --> 00:14:09,532
So that it could be logged by our tracer.

186
00:14:10,252 --> 00:14:16,642
So here, as you can see, we have functions
for both SSL Read and SSL, right?

187
00:14:16,672 --> 00:14:19,462
And for the entry as well as the exit.

188
00:14:20,032 --> 00:14:25,762
And we obviously get the data,
here at the entry of each function.

189
00:14:26,262 --> 00:14:29,952
so let me just run this and
let's see how this works.

190
00:14:30,942 --> 00:14:35,942
let me just start this and
where we start, client.

191
00:14:36,782 --> 00:14:43,047
So this is our PID and we
run the tracer on this PID.

192
00:14:43,547 --> 00:14:48,347
So as you can see, it has attached
the probes to a cell SL right?

193
00:14:48,377 --> 00:14:53,867
And now we have access to all
the data that is being sent

194
00:14:53,867 --> 00:14:56,437
over this, TLS connection.

195
00:14:56,437 --> 00:14:59,797
So we have the client secret
as well as the server secret.

196
00:14:59,797 --> 00:15:06,057
And you can verify by looking at, these
secrets that are being locked here.

197
00:15:06,117 --> 00:15:08,067
And we have all of that here.

198
00:15:08,952 --> 00:15:13,992
So this is how basically you can use
EBPF in your observability application.

199
00:15:13,992 --> 00:15:16,352
this is one of its application.

200
00:15:17,042 --> 00:15:21,092
You can use it to attach
it to a lot more K probes.

201
00:15:21,212 --> 00:15:22,652
and go ahead.

202
00:15:22,862 --> 00:15:25,682
Go ahead and try and play with it and see.

203
00:15:26,182 --> 00:15:27,142
What you get.

204
00:15:27,472 --> 00:15:29,872
and this has been it for my talk.

205
00:15:29,872 --> 00:15:33,712
If you have any questions, you
can hit me up on link and I look

206
00:15:33,712 --> 00:15:34,762
forward to hearing from you.

207
00:15:35,152 --> 00:15:35,422
Thank you.

