1
00:00:00,250 --> 00:00:01,540
Hello, good evening.

2
00:00:01,540 --> 00:00:02,769
My name is malicious.

3
00:00:02,769 --> 00:00:04,480
I'm a snow workplace engineer.

4
00:00:04,990 --> 00:00:09,430
Today I'll be speaking on
Atory is not a Super Blood

5
00:00:09,820 --> 00:00:11,740
lessons learned from the field.

6
00:00:11,990 --> 00:00:18,560
Before I proceed, I would like to
talk about the need of open telemetry.

7
00:00:19,340 --> 00:00:25,940
Open Telemetry is needed in observe
library because it's used in

8
00:00:26,480 --> 00:00:34,289
collecting telemetry data, which are
used in finding out the behavior.

9
00:00:34,679 --> 00:00:39,269
Of your system or your servers,
especially in distributed systems.

10
00:00:39,719 --> 00:00:44,069
The telemetry data are very important
because it gives you an overview

11
00:00:44,819 --> 00:00:50,819
of what your system performance is
like, and as well give you that,

12
00:00:51,500 --> 00:00:56,120
give you that opportunity to take
proactive actions to make sure that

13
00:00:56,120 --> 00:00:58,190
your systems are running as expected.

14
00:00:58,759 --> 00:01:03,349
Now we'll be speaking on the vision,
why Open Telemetry was created.

15
00:01:03,769 --> 00:01:08,449
Now, the first vision, why this was
created was for Unified, unified Standard.

16
00:01:09,050 --> 00:01:14,210
And what this means is that there have
been a lot of promises you know about.

17
00:01:15,050 --> 00:01:20,000
Getting single standard for tracing
logs and metrics across distributed

18
00:01:20,089 --> 00:01:25,429
architecture systems environment,
depending on where your system is sitting

19
00:01:25,429 --> 00:01:29,890
on, whether it is sitting on the cloud, or
whether it's sitting on, on, on premises,

20
00:01:29,890 --> 00:01:32,140
or whether it is outside of the cloud.

21
00:01:32,140 --> 00:01:40,040
So the telemetry has been very important,
in these environments to gather this data.

22
00:01:40,445 --> 00:01:44,975
Which gives us an insight of what
is going on within our environment.

23
00:01:45,335 --> 00:01:50,304
And the reason for this was to make sure
that there is a unified, monitoring across

24
00:01:50,334 --> 00:01:56,754
our environment and the second vision has
caught to come with the vendor freedom.

25
00:01:56,964 --> 00:02:00,924
So there have been a lot of,
promises around lowering the risk.

26
00:02:01,270 --> 00:02:06,460
On what we can do and how we standardize
the data we collect from this environment.

27
00:02:06,579 --> 00:02:10,059
And this has to come with, with
the promises we get from different

28
00:02:10,059 --> 00:02:13,459
vendors telling us, oh, how we
can use this telling, how we can

29
00:02:13,459 --> 00:02:19,009
use this tooling systems or these
platforms to achieve this or that.

30
00:02:19,069 --> 00:02:21,649
But at the end of the
day, it boils down to.

31
00:02:21,909 --> 00:02:25,899
What we have in place, what we
have in our team, how are we going

32
00:02:25,899 --> 00:02:29,329
through those processes to make
sure that, we carry out all ities.

33
00:02:29,359 --> 00:02:34,760
We need to keep our systems efficient
and performance a hundred percent

34
00:02:34,760 --> 00:02:37,429
wrong without any resource constraint.

35
00:02:38,369 --> 00:02:43,109
Now, on the other hand, we have been
also been promised that the growing

36
00:02:43,169 --> 00:02:47,169
adoption, now there have been a lot
of adoptions with, clouds adopting

37
00:02:47,169 --> 00:02:51,629
to different tools and system just
as we, we can see let's say, clouds

38
00:02:51,760 --> 00:02:53,560
offerings like Microsoft Azure.

39
00:02:54,060 --> 00:02:56,880
And AWS Google Cloud compute.

40
00:02:57,060 --> 00:03:00,420
So there have been a lot of,
promises around these areas as well.

41
00:03:00,750 --> 00:03:06,500
And if you notice there is, there
are some sort of, platforms that are

42
00:03:06,500 --> 00:03:10,460
standard that for established is,
for instance, we have the data dog.

43
00:03:10,820 --> 00:03:14,850
We have, we have og,
we have logic Monitor.

44
00:03:15,270 --> 00:03:19,945
Logic Monitor is not really a big
sheet for collecting data, but we

45
00:03:19,945 --> 00:03:23,575
can use these collectors to, try,
collect data and to understand what

46
00:03:23,575 --> 00:03:24,955
is going on within the environment.

47
00:03:25,225 --> 00:03:30,250
And also there been a lot of open
source projects around pun, which is,

48
00:03:30,250 --> 00:03:31,915
which seems to be, and therefore it.

49
00:03:32,395 --> 00:03:36,414
Very important that, a lot of
organizations adopt to this growing

50
00:03:37,084 --> 00:03:41,814
tool, systems and also platform rather
than going to platform it's best to

51
00:03:41,814 --> 00:03:46,464
these tool systems of as they would give
us what we need to make sure that our

52
00:03:46,464 --> 00:03:48,864
environment are running as we expect

53
00:03:49,364 --> 00:03:49,935
now.

54
00:03:50,435 --> 00:03:53,695
In the reality in the real
sense of the whole thing.

55
00:03:53,785 --> 00:03:57,505
So we are talking about the common
pain points and we, which we have

56
00:03:57,505 --> 00:04:02,605
encountered, in our various field
or experiences bu a DevOps engineer,

57
00:04:03,175 --> 00:04:10,045
platform engineer, software engineer,
or a our, or if you are an SR engineer,

58
00:04:10,045 --> 00:04:11,925
depending on what your position is.

59
00:04:12,345 --> 00:04:12,555
So there.

60
00:04:12,855 --> 00:04:16,695
Challenges we, we encounter
across these disciplines.

61
00:04:16,935 --> 00:04:19,095
And the first thing I would
like to speak about would be

62
00:04:19,095 --> 00:04:20,385
the documentation challenges.

63
00:04:20,655 --> 00:04:26,065
So there have been a lot of documentation,
errors, efficiency, making use of obsolete

64
00:04:26,125 --> 00:04:34,255
documentations that needs to be upgraded,
using vendors or using tooling letters of

65
00:04:34,255 --> 00:04:38,815
this, which could, help us to propel our.

66
00:04:39,680 --> 00:04:44,290
Our collection of data using our
collectors and this documentation

67
00:04:44,290 --> 00:04:50,159
challenges has brought a lot of
gaps and redundancies, within teams,

68
00:04:50,159 --> 00:04:54,349
within organizations and within
businesses, because no one is taking,

69
00:04:54,680 --> 00:04:55,760
no one is checking all of this.

70
00:04:56,010 --> 00:04:59,809
Formal things because people don't
really take them seriously and

71
00:04:59,809 --> 00:05:01,579
this has created a lot of issues.

72
00:05:01,579 --> 00:05:04,789
So therefore, it is very important to
make sure that your documentation is.

73
00:05:05,629 --> 00:05:11,959
It's compliant and it's treated
as a regular activity rather than

74
00:05:11,959 --> 00:05:14,569
something that someone needs to
pick up maybe once in a time.

75
00:05:14,569 --> 00:05:18,229
So it's very important that everyone
ensures that the documentation is,

76
00:05:18,569 --> 00:05:23,699
is updated and things are occurring
along to make, to avoid any issues

77
00:05:23,909 --> 00:05:26,354
that could impact your environment.

78
00:05:26,854 --> 00:05:31,984
Another issue we also
face is the plate burden.

79
00:05:32,224 --> 00:05:36,094
Now this has to do with the sort
of, this has to do with the type

80
00:05:36,124 --> 00:05:42,304
of software development kits and
software development kit we use across.

81
00:05:42,649 --> 00:05:47,839
To, write our code, be it Java, be
it Python, depending on what your

82
00:05:48,179 --> 00:05:51,839
organization uses to progress on
the language your team are using.

83
00:05:51,839 --> 00:05:55,649
So it is very important that we
measure that the software development

84
00:05:55,649 --> 00:05:58,439
kits or tools or IDs we use.

85
00:05:58,644 --> 00:06:03,699
Integrate with the platform we use, and
we also, we need to ensure that we are not

86
00:06:03,699 --> 00:06:09,594
using outdated libraries or we are using
always, or we are not using outdated,

87
00:06:09,884 --> 00:06:14,744
codes that could cause an issue in
environment or even break our environment.

88
00:06:14,744 --> 00:06:17,624
So this are very important that we
make sure that all these are being

89
00:06:17,624 --> 00:06:23,144
checked and we need to also ensure that.

90
00:06:23,644 --> 00:06:27,994
Every developer within the team,
every DevOps engineering the

91
00:06:27,994 --> 00:06:34,134
team are using the standard code
methodology to avoid problems.

92
00:06:34,704 --> 00:06:38,214
Now, lastly, we are going to
speak about version conflicts.

93
00:06:38,934 --> 00:06:41,274
Now, when it comes to the version
conflicts, so there have been a

94
00:06:41,274 --> 00:06:46,254
lot of incomp, which creates a
constant friction amongst teams,

95
00:06:46,584 --> 00:06:49,694
amongst engineers, organizations.

96
00:06:50,194 --> 00:06:54,154
Causes a whole lot of issues,
especially when trying to ingest

97
00:06:54,154 --> 00:06:55,954
data or when trying to collect.

98
00:06:56,199 --> 00:07:00,699
Data or when trying to trace
or get logs to check what

99
00:07:00,699 --> 00:07:02,229
the system's going all about.

100
00:07:02,229 --> 00:07:06,369
So this, it just causes a whole lot of
issue because we found out that there

101
00:07:06,369 --> 00:07:11,569
have been a lot of issues whereby,
the fashion conflicts or due to in

102
00:07:11,569 --> 00:07:16,489
capabilities, or it could be that it
does, it could be that the versions are

103
00:07:16,489 --> 00:07:18,989
not, are not compatible with our system.

104
00:07:18,989 --> 00:07:22,919
So it is very important that we make sure
that all of these are being checked and

105
00:07:22,919 --> 00:07:28,809
we make sure that the tooling systems
we are using the fashions we use to

106
00:07:28,809 --> 00:07:32,979
collect our data within our environment
are compatible with our systems.

107
00:07:33,480 --> 00:07:37,950
Now moving forward, we'll be speaking
about the scaling headaches, the

108
00:07:37,950 --> 00:07:40,049
collectors and infrastructure challenges.

109
00:07:40,590 --> 00:07:42,390
Now the first thing I'm
going to speak about is two.

110
00:07:42,890 --> 00:07:43,280
Next.

111
00:07:43,580 --> 00:07:47,690
Now the open telemetry of basis
performance issues as environment

112
00:07:47,690 --> 00:07:51,350
grows, processing pipeline can't
keep up with the data volume.

113
00:07:51,530 --> 00:07:57,020
And now this is evident in the
situation where you have, a, where

114
00:07:57,020 --> 00:08:01,089
you have an environment that is
loaded with a whole lot of, data.

115
00:08:01,719 --> 00:08:05,139
There a whole lot of storage
and nobody's checking them.

116
00:08:05,139 --> 00:08:08,589
There is no collectors
monitoring this environment.

117
00:08:08,589 --> 00:08:10,149
There is no collector
monitoring all the storages.

118
00:08:10,149 --> 00:08:12,579
Nobody knows when the
storage gets filled up.

119
00:08:13,029 --> 00:08:15,039
So it costs a whole lot of problem.

120
00:08:15,799 --> 00:08:19,979
For, so in a lot of environment, I
can't speak really about what happened.

121
00:08:19,979 --> 00:08:20,519
So we.

122
00:08:21,019 --> 00:08:27,539
So we we had a support server environment
that we used of, for our support server

123
00:08:27,539 --> 00:08:30,189
and then also for our data warehousing.

124
00:08:30,459 --> 00:08:36,279
So we noticed that they cluster storage
within this environment was filled up.

125
00:08:36,999 --> 00:08:42,519
And because there was no collector
monitoring the environment, the.

126
00:08:43,284 --> 00:08:45,444
Story the storage got filled up.

127
00:08:45,854 --> 00:08:47,834
The disk for the server
also get filled up.

128
00:08:47,834 --> 00:08:50,774
And this led to scratching
of that environment.

129
00:08:50,864 --> 00:08:55,354
And this cost a whole lot of
huge, amount of money for both our

130
00:08:55,354 --> 00:08:57,034
business and for our organization.

131
00:08:57,034 --> 00:09:00,824
So it's easier for, to make sure that
they are collectors, deployed across

132
00:09:00,824 --> 00:09:05,849
this environment, taking real time
performance and also taking taking

133
00:09:05,849 --> 00:09:11,219
real time performance so that, juniors
ses, looking after this environment

134
00:09:11,279 --> 00:09:16,969
will be proactively, aware of what
is going on so that in case of any

135
00:09:17,029 --> 00:09:22,239
issues, there will be there will be
scaling up of add, also adding off

136
00:09:22,269 --> 00:09:24,279
of more storage within environment.

137
00:09:24,279 --> 00:09:25,999
Keep the environment, up and going.

138
00:09:26,804 --> 00:09:31,364
Now another one I would like us to
speak about is the resource hunger.

139
00:09:31,664 --> 00:09:38,064
So it's very important to make
sure we are not, using possible,

140
00:09:38,464 --> 00:09:40,924
servers to deploy our collectors.

141
00:09:41,254 --> 00:09:45,724
Because what happens, what I have
noticed is that possible servers

142
00:09:45,784 --> 00:09:48,124
are not really mostly four.

143
00:09:48,764 --> 00:09:54,054
Demanding environments that need, that
consume a whole lot of data because

144
00:09:54,114 --> 00:10:02,804
possible CPUs processors, it a whole
lot of memory and ram and this leads

145
00:10:02,894 --> 00:10:04,784
this cause a whole lot of issue.

146
00:10:05,084 --> 00:10:07,604
So it is very important to
make sure that you're using.

147
00:10:08,289 --> 00:10:13,899
Good specs for your environment,
possible CCPs that are mainly meant for

148
00:10:13,899 --> 00:10:15,729
development and testing environment.

149
00:10:15,729 --> 00:10:19,779
So it's important that the
businesses, organizations understand

150
00:10:19,779 --> 00:10:21,639
that they need something higher.

151
00:10:21,669 --> 00:10:24,849
Maybe for instance, enterprise,
or something that will give their,

152
00:10:24,849 --> 00:10:27,129
like at least a CP or even more.

153
00:10:27,179 --> 00:10:31,139
Depending on what the business
requires, but is impossible.

154
00:10:31,289 --> 00:10:35,609
CPU servers are not recommended,
especially for collectors that

155
00:10:35,759 --> 00:10:39,879
monitors, huge environment
that, takes your time data.

156
00:10:39,879 --> 00:10:42,759
So it's important that you,
that organizations scale up

157
00:10:43,069 --> 00:10:45,734
and and also there's good
monitoring with this environment.

158
00:10:46,234 --> 00:10:50,284
Another one I'll be speaking about
would be the debt reliability risk.

159
00:10:50,794 --> 00:10:55,214
Now, with that careful architecture
and that gets dropped or delayed, and

160
00:10:55,214 --> 00:10:58,394
single points of failure emerge in
critical telemetry parts, and what this

161
00:10:58,394 --> 00:11:05,264
means is that we must ensure that while
designing this environment, we may

162
00:11:05,774 --> 00:11:07,724
must make sure that there are no gaps.

163
00:11:08,224 --> 00:11:12,814
To where we can lose data and we
must make sure that the tooling we

164
00:11:12,814 --> 00:11:17,824
are using for this environment are
compatible and appropriate so that we

165
00:11:17,824 --> 00:11:21,554
will be able to, get the monitoring,
know what is happening in our

166
00:11:21,554 --> 00:11:25,754
environment, understand the performance,
and also scale up where needed.

167
00:11:26,264 --> 00:11:29,344
And this would, help
in keeping environment.

168
00:11:29,884 --> 00:11:34,834
Up and running and have, and put us in
a better position that will not cost us

169
00:11:34,834 --> 00:11:40,884
any issue in the future or cost us money
or, or put us or in the bigger area.

170
00:11:40,884 --> 00:11:44,934
So it's important that while we are
designing our infrastructure, all we are

171
00:11:44,934 --> 00:11:50,664
designing our environment, so we make sure
that all these gaps are being covered to

172
00:11:50,664 --> 00:11:53,814
avoid any unforeseen circumstance Now.

173
00:11:54,444 --> 00:11:57,654
I'll be speaking on the gaps
between promise and practice.

174
00:11:58,404 --> 00:12:03,494
Now, there have been a whole
lot of, promise and practices,

175
00:12:03,554 --> 00:12:08,799
but the question is, are these
promises fulfilling what we want?

176
00:12:09,729 --> 00:12:11,589
Are we practicing what we preach?

177
00:12:12,279 --> 00:12:14,889
Now I'm going to start with the
stage and visualization gaps.

178
00:12:15,159 --> 00:12:19,989
Now, open telemetry defines data
price, but not end user analytics.

179
00:12:20,904 --> 00:12:26,424
There is gaps between what Open Telemetry
gives us and what we can get out of it.

180
00:12:26,784 --> 00:12:31,564
Now, it is true that Open
Telemetry helps us to, get your

181
00:12:31,564 --> 00:12:34,534
time data in observability.

182
00:12:35,464 --> 00:12:39,599
That gives us a better, underst
a better overview of what is

183
00:12:39,599 --> 00:12:40,559
going on with environment.

184
00:12:40,919 --> 00:12:46,799
But what we lack is how does
this, help a single user.

185
00:12:47,299 --> 00:12:49,339
Are there any dashboards that we can use?

186
00:12:49,839 --> 00:12:54,939
Now, this is where we are lacking
this area because we need to make

187
00:12:54,939 --> 00:12:59,009
sure that, there are dashboards like,
for end users, which they can use to

188
00:12:59,009 --> 00:13:03,920
also understand what is going on with,
within, their personal work, so it's

189
00:13:03,920 --> 00:13:08,540
very important that all of this are
being put in check and done properly.

190
00:13:08,840 --> 00:13:09,050
Now.

191
00:13:09,050 --> 00:13:13,340
Secondly, we need to be speaking
about the library politic Paris.

192
00:13:13,730 --> 00:13:15,740
Now we are talking about language.

193
00:13:16,265 --> 00:13:19,535
Software development case integration
quality, which diverse widely.

194
00:13:19,714 --> 00:13:25,045
And now this has to do with, the type of
languages we are using to ingest our data,

195
00:13:25,075 --> 00:13:27,129
collecting our data, whether Java scripts.

196
00:13:27,219 --> 00:13:32,404
So it's very important we make sure
we are using the best programming

197
00:13:32,604 --> 00:13:36,709
languages that suit to our needs
and business services as well.

198
00:13:37,209 --> 00:13:39,429
Lastly, team education challenges.

199
00:13:39,929 --> 00:13:43,169
Onboarding engineers require
significant investment, and this is

200
00:13:43,169 --> 00:13:47,939
very important because it is easier
to on onboard engineers to start

201
00:13:47,999 --> 00:13:51,400
working on these tooling systems.

202
00:13:51,650 --> 00:13:57,349
Data collecting logs, ingesting them on
trying to triage what is going on in Sava.

203
00:13:57,739 --> 00:14:02,510
But it's very important while we onboard
engineers, we provide them with the

204
00:14:02,510 --> 00:14:06,079
necessary training that would give them.

205
00:14:06,739 --> 00:14:13,969
That knowledge that would help them excel,
in this position as a, as either as an SRE

206
00:14:13,999 --> 00:14:16,489
engineer or as a monitoring specialist.

207
00:14:16,549 --> 00:14:21,709
Because these are very important that
engineers do not only onboard, but

208
00:14:21,889 --> 00:14:27,369
only understand the reason why they
are trying, specific environment, what

209
00:14:27,369 --> 00:14:30,309
those data are used for how they can.

210
00:14:30,664 --> 00:14:35,914
Put this as a report and then explain
to a wider range what is going on

211
00:14:36,244 --> 00:14:41,734
and how they are working proactively
to make sure that what the data is

212
00:14:41,734 --> 00:14:44,614
giving them are being used as expected.

213
00:14:45,574 --> 00:14:48,154
So it is therefore important to make sure.

214
00:14:48,394 --> 00:14:52,924
So therefore, it is important to
invest in training engineers to

215
00:14:52,924 --> 00:14:57,154
make sure they are well equipped and
also ready to carry on with this.

216
00:14:57,274 --> 00:14:57,905
This task

217
00:14:58,405 --> 00:15:03,865
here, we'll be speaking about, the case
study behind implementation pitfall.

218
00:15:04,365 --> 00:15:09,995
First of all, we will be, first of all, we
will talk about the collective failures.

219
00:15:10,775 --> 00:15:12,575
Then we talk about the version drift.

220
00:15:12,695 --> 00:15:17,375
And last we talk about the monitoring
blank spot, the collective failures.

221
00:15:17,875 --> 00:15:22,675
Leading software as a service providers
face a whole lot of collective crashes,

222
00:15:22,825 --> 00:15:26,275
under peak loads, monitoring gaps
and occurring critical operations.

223
00:15:26,275 --> 00:15:35,400
And this, it's evident with some software
providers where, they provide a whole

224
00:15:35,430 --> 00:15:41,190
lots of, softwares that they know are not
really, compatible with the environment.

225
00:15:41,730 --> 00:15:45,630
Or they know that what you are
using within your environment could,

226
00:15:46,090 --> 00:15:48,790
proactively impact the software.

227
00:15:49,570 --> 00:15:52,480
So it is, therefore, it's important
to measure that you're using the

228
00:15:52,480 --> 00:15:57,190
best, softwares that would work as
we expect, that would take the datas

229
00:15:57,190 --> 00:16:02,270
in real time and we can analyze to,
make informed decisions because.

230
00:16:02,530 --> 00:16:07,349
It is important that, when collector
fails, it could lead us to bigger issues

231
00:16:07,380 --> 00:16:13,960
such as bringing the server down, such as
affecting other, services that are, very

232
00:16:13,960 --> 00:16:15,790
important or critical to your business.

233
00:16:15,790 --> 00:16:22,020
So it's very, it's it's imperative
that we make sure we are investing

234
00:16:22,260 --> 00:16:25,890
in the right softwares to collect
monitoring within our environment.

235
00:16:26,390 --> 00:16:29,180
On the second one, we'll be
spin about the fashion drift.

236
00:16:30,170 --> 00:16:38,530
Now we, it is true that weeks can
be spent, on triaging, on issues,

237
00:16:38,530 --> 00:16:42,730
maybe library updates didn't match,
company could base or whatever.

238
00:16:43,120 --> 00:16:50,740
So this is where we need to ensure
that there is no, comp there, there

239
00:16:50,744 --> 00:16:57,115
is no compatibility issues within our
environment, depending the type of version

240
00:16:57,115 --> 00:17:00,514
we are using for, getting our logs.

241
00:17:00,514 --> 00:17:04,685
So we need to make sure that the
version which we are using matches

242
00:17:04,714 --> 00:17:09,665
with vendors requirement or with
the tooling system requirement.

243
00:17:09,665 --> 00:17:11,075
So it is very important that.

244
00:17:11,554 --> 00:17:17,865
We are not using something that is not,
meant for the software, because what

245
00:17:17,865 --> 00:17:24,375
this can do is it might work at the first
instance, but it won't be able to give you

246
00:17:24,495 --> 00:17:30,195
that right result that would help you to
succeed in charging the required locks.

247
00:17:30,220 --> 00:17:35,120
You need to proactively,
make your environment better.

248
00:17:35,620 --> 00:17:37,750
Now, lastly.

249
00:17:38,140 --> 00:17:44,350
The mentoring blind spots, a lot
of team, go there, they just set up

250
00:17:44,350 --> 00:17:48,670
the monitoring and then they go to
bed, or they just feel like, oh, we

251
00:17:48,670 --> 00:17:50,470
have done this, or it is mentoring.

252
00:17:50,800 --> 00:17:56,050
And what happens is that most of all
these, engineers or companies is they

253
00:17:56,685 --> 00:18:03,250
follow the absolute way of monitoring
servers environment without putting

254
00:18:03,250 --> 00:18:08,350
that, unnecessary actions, which has
to do with testing it, testing the

255
00:18:08,350 --> 00:18:14,130
monitoring if it is working, checking
the dashboards, triaging, taking

256
00:18:14,130 --> 00:18:16,620
logs in real time to understand.

257
00:18:17,040 --> 00:18:18,300
What is going on?

258
00:18:18,750 --> 00:18:23,890
Just to make sure that everything
works as expected before saying yes,

259
00:18:23,890 --> 00:18:25,960
we have put on this monitor in this.

260
00:18:25,960 --> 00:18:31,190
I think it is very important to carry
a sort of testing before, closing off

261
00:18:31,220 --> 00:18:32,990
and say, yeah, we are done with this.

262
00:18:32,990 --> 00:18:37,100
Because what happens most of the time
is, they dis engineers to go and, set up

263
00:18:37,100 --> 00:18:42,555
the monitoring and then they just leave
it and they don't even try checking.

264
00:18:43,460 --> 00:18:48,390
To, should I check in, the methods that
are using, if the schemas are updated,

265
00:18:48,660 --> 00:18:53,520
if they need to bring new version, new
code version, or if they need to bring

266
00:18:53,520 --> 00:18:57,960
something that would help, make sure that
their monitoring is working as expected.

267
00:18:57,960 --> 00:19:01,050
So it's very important to make
sure that there is a sort of

268
00:19:01,050 --> 00:19:05,990
testing and confirmation before,
handing off to other task.

269
00:19:06,490 --> 00:19:11,130
So the lessons I have learned
and what I'm, what really works

270
00:19:11,130 --> 00:19:15,240
from my own understanding, I
think I would say start small.

271
00:19:16,200 --> 00:19:20,450
So why I would say start more is that,
it is very important that you, that

272
00:19:20,450 --> 00:19:27,730
gets critical systems and limit the
initial scope before widely two is.

273
00:19:28,230 --> 00:19:33,810
Custom documentation, investing
in internal training, tailoring,

274
00:19:33,840 --> 00:19:38,790
tailored to your specific tech stack
depending on the tools you're using to

275
00:19:38,790 --> 00:19:40,560
collect your data is very important.

276
00:19:40,620 --> 00:19:45,390
Making sure you understand that tooling,
making sure that everybody's involved,

277
00:19:45,600 --> 00:19:50,935
making sure that, the knowledge
base is all, is 24 hours updated.

278
00:19:51,570 --> 00:19:56,090
With the latest information, with the
latest steps, latest processes, making

279
00:19:56,090 --> 00:20:01,520
sure that everybody is part of this as
a culture and not just as a team, but

280
00:20:01,640 --> 00:20:06,060
it needs to be something that needs
to be passed on from, from first line

281
00:20:06,060 --> 00:20:07,920
to the deadline to the highest person.

282
00:20:08,130 --> 00:20:10,110
So it is important to ensure that.

283
00:20:10,610 --> 00:20:14,660
Putting an internal documentation, not
just only for a technical team, but

284
00:20:14,660 --> 00:20:19,520
for the whole range so that anyone that
is documentation would understand what

285
00:20:19,520 --> 00:20:21,500
is being done and what is being said.

286
00:20:22,130 --> 00:20:27,410
Now, another thing I would like to speak
about is the interactive expansion.

287
00:20:27,910 --> 00:20:32,260
I understand that sometimes, engineers
might want to add a whole lot of.

288
00:20:32,605 --> 00:20:37,825
Servers just to maybe speed their
work or, make sure that the monitoring

289
00:20:37,885 --> 00:20:40,525
is going as they have expected.

290
00:20:40,705 --> 00:20:46,485
I think it's very important that,
systems are not gradually added, as the

291
00:20:46,485 --> 00:20:52,155
team grows and as everyone gets think
there with what he or she needs to do.

292
00:20:52,545 --> 00:20:56,415
And also it is very
important to, add assistant.

293
00:20:56,910 --> 00:21:01,620
Only based on the power of
your resource environment.

294
00:21:02,120 --> 00:21:04,690
And lastly is the regular review.

295
00:21:05,190 --> 00:21:09,300
This is where discipline
monitoring of schema resources

296
00:21:09,330 --> 00:21:11,010
and integration points comes in.

297
00:21:11,580 --> 00:21:14,870
So it is very important that, we
regularly review our monitoring.

298
00:21:15,120 --> 00:21:16,530
We set out time.

299
00:21:16,530 --> 00:21:22,260
It could be allocated to different
engineers at a specific time just to

300
00:21:22,350 --> 00:21:27,165
know what is being monitored, to make
sure that they, the data, the performance

301
00:21:27,255 --> 00:21:32,675
threshold, all of this are being,
cutting as the team has or as expected.

302
00:21:32,915 --> 00:21:37,220
So it is very important that these regular
checks are being carried at rather.

303
00:21:37,960 --> 00:21:42,340
Once in a while, maybe it could be
done, maybe every once in a week, maybe

304
00:21:42,395 --> 00:21:47,465
every one time, maybe once in, in a
week, or twice in a week, depending

305
00:21:47,855 --> 00:21:49,805
on the availability of the engineer.

306
00:21:49,805 --> 00:21:54,575
So it is very important that this is
being carried out and everyone is carried

307
00:21:54,575 --> 00:21:56,555
along while this is being done as well.

308
00:21:57,055 --> 00:22:02,875
Now, this is realistic, the realistic
expectation and practical recommendation.

309
00:22:03,375 --> 00:22:04,905
Toolkit and not platform.

310
00:22:05,685 --> 00:22:09,325
I think it is very important to,
we understand that open Telemetry

311
00:22:09,385 --> 00:22:14,205
provides powerful companies, not
a finish observability solution.

312
00:22:14,265 --> 00:22:20,295
So it is important that we focus
and invest more on the tool.

313
00:22:21,105 --> 00:22:22,995
Rather than on the platform.

314
00:22:22,995 --> 00:22:26,875
So what I mean by rather than the
platform is, you get told, oh,

315
00:22:26,875 --> 00:22:28,825
we need to buy Microsoft Azure.

316
00:22:29,365 --> 00:22:33,515
You need to buy, AWS subscription,
depending on the needs.

317
00:22:34,355 --> 00:22:37,415
Oh, we have different types of
monitoring tools that can help you

318
00:22:37,415 --> 00:22:40,415
to, scale your business and get
what you want or get your data.

319
00:22:40,775 --> 00:22:46,175
I think it's not, I don't think that is
the best way to go about it because it,

320
00:22:46,235 --> 00:22:50,715
at the end of the day, you end up spending
more money on different resources.

321
00:22:50,895 --> 00:22:58,355
So I think it's best you go for one tool,
that will be, that is solely built for.

322
00:22:58,605 --> 00:23:05,565
Collecting, tracing and gathering
of metrics of your telemetry data,

323
00:23:05,745 --> 00:23:10,245
maybe such as data drug or what,
know this is just an instance, right?

324
00:23:10,635 --> 00:23:11,475
So I think it's better.

325
00:23:11,475 --> 00:23:12,615
You think it's better?

326
00:23:12,645 --> 00:23:18,735
Organizations and teams go for a specific
tools rather than going for a platform.

327
00:23:19,235 --> 00:23:22,175
Secondly, ongoing investment Now.

328
00:23:22,675 --> 00:23:23,605
Sources.

329
00:23:23,635 --> 00:23:28,425
I would like to read what this initial
this this headline speaks here.

330
00:23:28,695 --> 00:23:32,355
It says that sources require engineering
resource, resources, organizational

331
00:23:32,355 --> 00:23:34,275
alignment, and understanding system risk.

332
00:23:34,665 --> 00:23:41,585
And how I would explain this is
sources require resources means

333
00:23:41,585 --> 00:23:44,285
that everyone needs to be trained.

334
00:23:44,690 --> 00:23:45,770
Engineers needs to be trained.

335
00:23:45,770 --> 00:23:49,550
They need to have the right resource,
they need to have the right knowledge.

336
00:23:49,550 --> 00:23:50,810
There is no knowledge gap.

337
00:23:51,080 --> 00:23:55,305
And also that they also, and this
has to align with the organization

338
00:23:55,305 --> 00:23:58,915
as well, what the organization wants
to get at from, these engineers, what

339
00:23:58,915 --> 00:24:07,315
the expectations are, and at the same
time, authorizing the critical systems.

340
00:24:07,815 --> 00:24:13,555
So this knowledge base, the tooling
system needs to be needs to be pro, needs

341
00:24:13,555 --> 00:24:19,405
to be prioritized within the critical
systems to avoid any non, any risk that

342
00:24:19,405 --> 00:24:24,925
could cost, could party the business
or the services and why organizations

343
00:24:24,930 --> 00:24:27,310
are also investing on the engineer.

344
00:24:27,415 --> 00:24:31,495
So it is important to measure that they're
also investing on the infrastructure.

345
00:24:31,825 --> 00:24:35,305
They're always, a, an
infrastructure review.

346
00:24:35,635 --> 00:24:38,995
And also there is always an upgrade.

347
00:24:39,185 --> 00:24:42,385
Following up with vendors, making
sure that, the service systems

348
00:24:42,385 --> 00:24:43,795
are run on the latest fashion.

349
00:24:44,125 --> 00:24:45,475
I think it's important.

350
00:24:45,935 --> 00:24:50,225
To put an investment into this
because this was the goal, would

351
00:24:50,225 --> 00:24:54,805
lead to a, fruitful success both
for the business, both for the ENG

352
00:24:55,135 --> 00:24:59,335
engineers, and the systems will be
happy if you know the site, the right

353
00:24:59,455 --> 00:25:01,515
resources are being provided now.

354
00:25:01,515 --> 00:25:04,335
The last will be the
build complete solutions.

355
00:25:04,835 --> 00:25:07,895
Now, in as much as.

356
00:25:08,645 --> 00:25:13,565
There are a whole lot of benefits
we can get out of in open Telemetry.

357
00:25:13,985 --> 00:25:20,585
I think at the same time, it's
important to build robust Latin and

358
00:25:20,585 --> 00:25:24,275
virtualization layers around open
telemetry because Open Telemetry is just

359
00:25:24,275 --> 00:25:28,545
us as a foundation, but if we have you a
robust, alert and virtualization layers

360
00:25:29,115 --> 00:25:32,245
and other toolings that could help.

361
00:25:32,620 --> 00:25:38,980
In making the work easier, I think it's
very important that these are being

362
00:25:39,010 --> 00:25:45,070
considered because this would help us to
actually get direct result, which we need.

363
00:25:45,310 --> 00:25:50,930
So I would say that, businesses
users, engineers, we need to, put

364
00:25:50,930 --> 00:25:55,970
their, put all attention to this
rather than just using one tool

365
00:25:55,970 --> 00:25:57,380
system that does everything I think.

366
00:25:58,085 --> 00:26:02,795
I think it, it's, I think it would make
sense if they can spread their hands to

367
00:26:02,795 --> 00:26:08,745
get other, tooling systems to add to what
they have as a full, complete solution.

368
00:26:09,245 --> 00:26:10,415
Conclusively.

369
00:26:10,835 --> 00:26:15,425
I would say that Open telemetry
unlocks control of observability

370
00:26:15,425 --> 00:26:16,955
with that elementary complexity.

371
00:26:17,015 --> 00:26:19,925
And this is where the flex,
the flexibility comes in.

372
00:26:20,345 --> 00:26:21,335
And also it.

373
00:26:21,835 --> 00:26:30,115
Also, teams must treat observability
as ongoing work and not onetime setup

374
00:26:30,505 --> 00:26:34,825
because there needs to be a continu,
a continuous engineering across teams,

375
00:26:34,855 --> 00:26:40,395
across business, across board, across,
across, the managers the stakeholders,

376
00:26:40,395 --> 00:26:45,165
all of them needs to be involved because
they need to be told or be aware of

377
00:26:45,165 --> 00:26:46,755
what is going on in the environment.

378
00:26:47,295 --> 00:26:51,285
So I think open telemetry of,
offers us a good values and all

379
00:26:51,285 --> 00:26:53,235
of this needs to be put in place.

380
00:26:53,925 --> 00:26:56,955
And lastly, the pragmatic benefits.

381
00:26:57,765 --> 00:27:01,855
And this is where, iT approach,
which is Partal approach of national,

382
00:27:01,855 --> 00:27:05,855
realizing real world values beyond,
the hypes, making sure that you know

383
00:27:05,915 --> 00:27:09,305
everything they need is being done.

384
00:27:09,305 --> 00:27:13,885
So I think it's very important
that we make sure that there are

385
00:27:13,885 --> 00:27:18,895
accurate technical documentations,
engineers are being trained, and

386
00:27:18,955 --> 00:27:24,875
there is a good investment on the
tunnel system which we use to.

387
00:27:25,235 --> 00:27:30,765
Try to collect our data and
also, proactively put our

388
00:27:30,765 --> 00:27:32,805
environment in a good state.

389
00:27:33,165 --> 00:27:41,125
So I would say that open telemetry, is
a great asset to use is a it brings a

390
00:27:41,125 --> 00:27:45,625
whole lot of benefits and also whole
lots of true values to businesses.

391
00:27:45,955 --> 00:27:51,195
So businesses needs not only
need to, invest on platform, but

392
00:27:51,695 --> 00:27:56,165
excessively on the 30 systems
that works best for the services.

393
00:27:56,855 --> 00:27:57,395
Thank you.

394
00:27:58,145 --> 00:28:00,845
It was nice speaking with, it
was nice speaking to you all.

395
00:28:00,845 --> 00:28:00,905
Bye.

