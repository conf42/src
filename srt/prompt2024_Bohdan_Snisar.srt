1
00:00:00,240 --> 00:00:03,890
Today I'm going to talk about
generative AI in development

2
00:00:03,910 --> 00:00:06,380
processes and dev tools for this.

3
00:00:07,229 --> 00:00:11,989
My name is Bogdan Snisar, 14 years
of software engineering experience,

4
00:00:12,279 --> 00:00:17,169
had different roles, software lead,
engineer, CTO, remarkable companies.

5
00:00:17,169 --> 00:00:20,749
It's a Revolut, Wix,
currently partner at Overview.

6
00:00:21,079 --> 00:00:25,199
It's consulting for LLM and
machine learning research.

7
00:00:25,829 --> 00:00:30,109
And development of products, co
founder and CTO for RedRay Space.

8
00:00:30,599 --> 00:00:34,579
Fashion search and discovery
platform for finding clothes.

9
00:00:35,259 --> 00:00:38,249
Here is my links, feel free to follow.

10
00:00:38,749 --> 00:00:40,849
Okay, let's start.

11
00:00:40,929 --> 00:00:47,709
Before diving into the details, I want to
just highlight what actually, highlight

12
00:00:47,729 --> 00:00:52,189
and group projects into several areas.

13
00:00:52,689 --> 00:00:57,189
it's a taxonomy of usage of
AI for system operation and

14
00:00:57,739 --> 00:01:00,019
software development lifecycle.

15
00:01:00,889 --> 00:01:04,329
there is a four groups that
I find out reasonable here.

16
00:01:04,799 --> 00:01:08,109
Conventional systems
with conventional SDLC.

17
00:01:08,589 --> 00:01:11,389
This is where most current software lives.

18
00:01:11,619 --> 00:01:15,850
Standard systems, like traditional
inventory management systems

19
00:01:15,850 --> 00:01:19,958
using standard development
processes without any AI.

20
00:01:20,458 --> 00:01:21,668
Some legacy.

21
00:01:22,188 --> 00:01:25,738
Conventional systems
with AI augmented as DLC.

22
00:01:26,278 --> 00:01:31,198
Emerging area where tools like
GitHub Copilot or something

23
00:01:31,218 --> 00:01:34,198
similar, used by developers.

24
00:01:34,698 --> 00:01:38,368
Could be just any project and
this is the area where I want to

25
00:01:38,368 --> 00:01:41,228
concentrate further during this talk.

26
00:01:41,858 --> 00:01:46,308
another area, it's actually some
products where people developed products.

27
00:01:47,003 --> 00:01:52,343
Exactly, AI systems itself, yeah,
augmented systems with conventional

28
00:01:52,343 --> 00:01:59,263
SDLC kind of idea of having, ML
based product in production, but

29
00:01:59,283 --> 00:02:04,293
using the same as DLC as usually, and
just the combination of everything.

30
00:02:04,323 --> 00:02:11,903
When we develop in AI product and
using AI tools for SDLC, as we see

31
00:02:11,963 --> 00:02:17,658
as DLC, it's a part It's common for
everything and where AI development's

32
00:02:17,668 --> 00:02:19,168
really interesting for me.

33
00:02:19,528 --> 00:02:24,968
And I want to share my experience
from what I used and what looks

34
00:02:24,968 --> 00:02:26,818
reasonable at this current moment.

35
00:02:27,518 --> 00:02:29,508
What's SDLC itself?

36
00:02:29,988 --> 00:02:33,458
It's a process that contains
from different phases.

37
00:02:33,818 --> 00:02:34,998
It's not only coding.

38
00:02:35,498 --> 00:02:38,678
It starts from requirement analysis.

39
00:02:39,308 --> 00:02:41,648
Just, we need to plan what we do.

40
00:02:42,178 --> 00:02:47,858
going to implement, then development
process, then testing, integration

41
00:02:47,878 --> 00:02:52,698
testing of it, deployment into the
production, and maintenance of it.

42
00:02:53,278 --> 00:02:56,098
This is the SDLC overall.

43
00:02:56,598 --> 00:03:00,738
interesting to see what actual
researchers are trying to solve.

44
00:03:00,958 --> 00:03:04,518
Where are the current
trends and what's happening?

45
00:03:04,538 --> 00:03:08,538
There is an interesting paper that
Summarize, it's pretty, pretty fresh,

46
00:03:08,908 --> 00:03:14,098
that summarize the whole number of
white papers and researchers that

47
00:03:14,138 --> 00:03:16,458
happening across the whole internet.

48
00:03:16,988 --> 00:03:20,788
They find out that majority
of things concentrated on

49
00:03:20,788 --> 00:03:22,608
software development itself.

50
00:03:23,288 --> 00:03:28,178
Different angles of it, I will
cover a couple of them, but there

51
00:03:28,178 --> 00:03:32,378
is a developments in software
maintenance requirements,

52
00:03:32,398 --> 00:03:34,088
engineering, software design.

53
00:03:34,893 --> 00:03:39,253
Software management looks
like in the SDLC process.

54
00:03:39,263 --> 00:03:41,553
There is a two emerging parts.

55
00:03:41,583 --> 00:03:43,933
It's a coding and maintenance.

56
00:03:44,533 --> 00:03:48,623
However, in the proportion, I believe
maintenance, it's a bigger because

57
00:03:48,653 --> 00:03:54,403
we have a lot of already written
software that requires maintenance.

58
00:03:54,903 --> 00:03:59,923
And it's interesting that problems
mostly concentrated on generation.

59
00:04:00,688 --> 00:04:05,268
Not problems, but tasks that develop,
tasks that researchers try to achieve.

60
00:04:05,268 --> 00:04:09,398
It's a generation of code, generation
of different things, recommendation

61
00:04:09,418 --> 00:04:10,968
and some classification things.

62
00:04:11,468 --> 00:04:18,048
Let's think about what EDL product or
what's actually some people envision

63
00:04:18,048 --> 00:04:19,838
as a dream about software development.

64
00:04:20,188 --> 00:04:22,508
It's a fully automated SDLC.

65
00:04:23,078 --> 00:04:26,458
That's a set of AI agents
that's responsible for.

66
00:04:26,908 --> 00:04:32,298
operating independently and
make the SDLC autonomous.

67
00:04:32,618 --> 00:04:37,248
Starting from role assignments,
requirements engineering,

68
00:04:37,748 --> 00:04:42,698
development, testing, deployments,
and all another things.

69
00:04:43,378 --> 00:04:50,438
Currently looks like we can use
LLMs during SDLC as a helpful tools.

70
00:04:51,048 --> 00:04:55,928
To reduce human errors on, or
make our work easier in some way.

71
00:04:56,428 --> 00:05:00,928
moreover, there is some, of
course, rumors about autonomous

72
00:05:00,938 --> 00:05:04,188
software engineer as a service.

73
00:05:04,508 --> 00:05:10,538
For example, Divine or
open sourced SWE agent.

74
00:05:11,088 --> 00:05:16,498
This is a set of AI agents that
can reflect software engineer.

75
00:05:16,828 --> 00:05:20,568
Or they try to do that and according
to the test, it's not works so well.

76
00:05:20,898 --> 00:05:24,568
in reality, this agent is
just a dream right now.

77
00:05:24,598 --> 00:05:29,038
However, we see that this
chance will continue.

78
00:05:29,488 --> 00:05:32,198
And who knows what happens in 2030s.

79
00:05:32,698 --> 00:05:37,278
instead of trying to replicate the whole
software engineer as an agent, there's a

80
00:05:37,278 --> 00:05:42,918
reasonable to have it splitted on several
functions and maybe to automate or create

81
00:05:42,978 --> 00:05:45,818
helpful tools for part of the SDLC.

82
00:05:46,318 --> 00:05:48,968
First thing that comes
to me, it's a planning.

83
00:05:49,478 --> 00:05:54,408
There is a requirements engineering
phase where we need to gather

84
00:05:54,418 --> 00:05:56,358
requirements and understand.

85
00:05:56,788 --> 00:05:58,258
There's an interesting quote.

86
00:05:58,528 --> 00:06:03,328
If my job was coding solutions to
problems with rigorously defined

87
00:06:03,358 --> 00:06:06,618
requirements, it would be concerning.

88
00:06:07,598 --> 00:06:11,558
It's about that people are pretty
bad in expressing what they

89
00:06:11,558 --> 00:06:14,628
want and like developers say.

90
00:06:15,128 --> 00:06:16,308
I think opposite.

91
00:06:16,808 --> 00:06:21,838
LLMs are really good in understanding
of some unstructured requirements

92
00:06:22,198 --> 00:06:23,978
into some structured way.

93
00:06:24,518 --> 00:06:27,318
this is really good thing
for requirements engineering.

94
00:06:27,928 --> 00:06:34,828
It can be used to interpret unstructured
requirements into the text specifications

95
00:06:34,868 --> 00:06:37,078
or even user stories in reality.

96
00:06:37,698 --> 00:06:41,868
LLMs can help requirement
engineering to highlight unknowns.

97
00:06:41,868 --> 00:06:43,358
It's actually an important thing.

98
00:06:43,858 --> 00:06:47,658
It can navigate to some gaps
into the requirements that

99
00:06:47,688 --> 00:06:49,008
actually are not so visible.

100
00:06:49,508 --> 00:06:54,238
Or it's hard to understand that these
gaps exist just because LLMs has some

101
00:06:54,478 --> 00:06:59,988
generic knowledge and it could be used
to fulfill those gaps or identify them

102
00:07:00,048 --> 00:07:06,908
and use this as a knowledge for follow up
questions during the requirement phase.

103
00:07:07,278 --> 00:07:11,148
And another interesting point is to
classify functional and non functional

104
00:07:11,148 --> 00:07:14,858
requirements from different sources.

105
00:07:15,168 --> 00:07:16,978
From, for example, user reviews.

106
00:07:17,403 --> 00:07:18,243
On the platforms.

107
00:07:18,263 --> 00:07:22,673
It's actually interesting thing
that LLMs can be used to identify

108
00:07:22,803 --> 00:07:25,903
requirements based on the user feedback.

109
00:07:26,743 --> 00:07:33,403
And just create already fully refined or
halfly refined tickets that already ready

110
00:07:33,403 --> 00:07:36,153
for grooming phase or planning phase.

111
00:07:36,703 --> 00:07:40,763
Or at least to create them
into the developers pipeline.

112
00:07:41,143 --> 00:07:43,953
So requirements engineering,
it's an interesting thing.

113
00:07:44,453 --> 00:07:48,053
Another, of course, part is
the development, how LLMs

114
00:07:48,063 --> 00:07:49,413
used in software development.

115
00:07:50,043 --> 00:07:54,393
There is a lot of directions where
research happening right now.

116
00:07:54,413 --> 00:07:59,653
It's a code completion, summarization,
search, content, code understanding,

117
00:07:59,703 --> 00:08:05,843
actually pretty important program
synthesis, API recommendations, API

118
00:08:06,343 --> 00:08:11,273
kind of generation, also interesting
and I guess here it's emerging.

119
00:08:12,023 --> 00:08:15,373
problem exists, method
name generation, et cetera.

120
00:08:15,903 --> 00:08:16,683
That's nice.

121
00:08:16,793 --> 00:08:20,413
Moreover, there's only two hard things in
computer science, according to the quote,

122
00:08:20,963 --> 00:08:23,513
caching validation and naming things.

123
00:08:23,973 --> 00:08:27,813
And naming things already not a
big problem, according to the LLMs.

124
00:08:28,813 --> 00:08:32,173
What tools I'm personally
find out interesting?

125
00:08:32,183 --> 00:08:33,443
It's a replit, for example.

126
00:08:33,943 --> 00:08:38,493
in reality, it's reflect of AI
agents that It tries to build

127
00:08:38,493 --> 00:08:40,093
some ready to use solution.

128
00:08:40,703 --> 00:08:43,263
it works only for Python and JavaScript.

129
00:08:43,403 --> 00:08:47,443
Majority of LLMs are well
trained on these things.

130
00:08:47,663 --> 00:08:52,573
And it's really bad actually for some rare
languages or complex languages like Rust.

131
00:08:53,253 --> 00:08:54,823
What is this tool good for?

132
00:08:54,833 --> 00:09:00,373
It's for prototyping for something
to show as an idea, as a concept.

133
00:09:00,863 --> 00:09:02,193
It has a lot of nice features.

134
00:09:02,603 --> 00:09:07,093
Standard use cases like authorization,
authentication, access to the database.

135
00:09:07,493 --> 00:09:10,643
And it's time saving for fast prototyping.

136
00:09:11,223 --> 00:09:13,413
And it's pretty crappy
for specific use cases.

137
00:09:13,423 --> 00:09:17,113
When you try to do something non
specific, it's a bit problematic.

138
00:09:18,073 --> 00:09:18,583
Cursor.

139
00:09:18,613 --> 00:09:22,323
It's actually not a platform, it's a tool.

140
00:09:22,393 --> 00:09:29,003
It's a kind of a VS Code fork that
had a lot of recent developments.

141
00:09:29,458 --> 00:09:34,918
With code completion, assistance for
code, we can refine and ask it to do

142
00:09:34,918 --> 00:09:39,948
something, to modify code at different
angles, and it's pretty nice, actually.

143
00:09:40,688 --> 00:09:45,888
However, it's not so good in working
with big projects, so my current

144
00:09:45,888 --> 00:09:50,638
activity, when I copy paste something
to the cursor, work with it, and then

145
00:09:50,678 --> 00:09:54,278
copy paste back to the IDE or VS Code.

146
00:09:54,683 --> 00:09:58,803
The reason, because I can do the same with
chat gpt, but with chat gpt I need to all

147
00:09:58,843 --> 00:10:00,703
every time write some specific prompts.

148
00:10:00,953 --> 00:10:04,993
Here it's a tool that likes
design to work with code.

149
00:10:05,893 --> 00:10:08,143
So in some way useful.

150
00:10:08,643 --> 00:10:13,483
that's mostly my main usages of
LLMs in software development.

151
00:10:13,493 --> 00:10:16,503
There is a GitHub co pilot, but
I cover it in the next phase.

152
00:10:17,443 --> 00:10:18,533
What about maintenance?

153
00:10:18,563 --> 00:10:21,293
There is actually a
really good fit for LLMs.

154
00:10:21,793 --> 00:10:26,613
Program Repair, Detection, Review,
Debugging, Bug Reproduction,

155
00:10:26,613 --> 00:10:27,863
it's an interesting direction.

156
00:10:28,193 --> 00:10:30,473
Hope there will be some
interesting products there.

157
00:10:31,243 --> 00:10:36,813
Logging, another interesting idea
that we can automatically augment

158
00:10:36,813 --> 00:10:39,823
software code with logging.

159
00:10:39,823 --> 00:10:43,563
Because usually software
developers put logging randomly,

160
00:10:43,713 --> 00:10:47,343
without any kind of a system.

161
00:10:48,088 --> 00:10:52,238
Either it's some problematic place or
there was a bug or something like this

162
00:10:53,118 --> 00:10:57,748
If the LLM can make it automatically
and put it with the understanding of the

163
00:10:57,758 --> 00:11:04,448
context, it's really nice time saving
for maintenance especially BugJar, also

164
00:11:04,448 --> 00:11:09,758
a nice thing Actually good fit for LLMs
another interesting thing for maintenance.

165
00:11:09,788 --> 00:11:18,163
It's a search how to find Something across
the whole part of the project, it's gives

166
00:11:18,163 --> 00:11:25,483
ability right now to merge and join a
lot of piece of information together and

167
00:11:25,503 --> 00:11:32,113
make it as a useful information to make,
to help, to actually, to solve something.

168
00:11:32,693 --> 00:11:37,263
It could be specs, Jira code, test cases,
bug reports, documentation, et cetera.

169
00:11:37,663 --> 00:11:40,593
Just something can give you
the answers based on it.

170
00:11:40,998 --> 00:11:43,498
There is a couple of products
that working with this.

171
00:11:43,568 --> 00:11:48,878
I actually work on the GitHub Copilot
workspace, but there is Atlassian

172
00:11:48,928 --> 00:11:55,698
Aroma, not used, but it's interesting
to see, Naboo AI, and GitHub Copilot.

173
00:11:56,553 --> 00:12:01,963
In some way it's interesting, right
now it's mostly good for finding,

174
00:12:02,353 --> 00:12:08,413
however, GitHub Copilot tries even
to give you ability to add something.

175
00:12:08,723 --> 00:12:12,933
For example, U Express, you have
a specification, then you want to

176
00:12:13,013 --> 00:12:16,883
add some specific details, and this
thing can generate code based on it.

177
00:12:17,423 --> 00:12:20,203
This part works, let's
say, extremely well.

178
00:12:20,843 --> 00:12:24,363
Okay with small classes
for specific cases.

179
00:12:24,423 --> 00:12:25,613
It's a bit problematic.

180
00:12:25,993 --> 00:12:30,703
It's problematic Yes, because it can
lose the context or don't understand

181
00:12:30,703 --> 00:12:37,303
the whole context of the problem clearly
But the ability to merge information

182
00:12:37,363 --> 00:12:41,873
really nice Another thing of maintenance,
it's working with pull requests.

183
00:12:42,373 --> 00:12:47,828
Actually, this is a nice thing It's
a GitHub marketplace, CodeRabbit,

184
00:12:48,328 --> 00:12:53,798
AI, it's nice, actually, it helps
to analyze code and makes pull

185
00:12:53,798 --> 00:12:56,248
requests review really good.

186
00:12:56,288 --> 00:13:00,186
Because sometimes it can find
what I missed, sometimes I find

187
00:13:00,186 --> 00:13:04,698
what this tool missed, and this
is a good combo in reality.

188
00:13:05,298 --> 00:13:09,688
Just because it's just a
real feeling of Copilot.

189
00:13:10,188 --> 00:13:13,258
Another part of maintenance,
it's working with issues.

190
00:13:13,258 --> 00:13:17,478
There is a, just example,
GitHub Marketplace 2, dosu bot.

191
00:13:18,198 --> 00:13:24,788
It can work with issue requests
and it tries to resolve this issue

192
00:13:24,938 --> 00:13:26,538
as answering to the question.

193
00:13:27,398 --> 00:13:32,658
sometimes it makes a good job, in getting
answers, especially with analyzing the

194
00:13:32,708 --> 00:13:35,448
code base and resolving some issues.

195
00:13:36,233 --> 00:13:43,683
issues without human interaction Pretty
nice actually the idea good Another real

196
00:13:43,683 --> 00:13:46,263
direction where it works for maintenance.

197
00:13:46,283 --> 00:13:51,413
It's a documentation Usually
developers dislike write documentation

198
00:13:51,423 --> 00:13:56,223
because they becomes outdated
pretty easily However, with LLAMPs,

199
00:13:56,273 --> 00:13:58,313
I guess it's a good direction.

200
00:13:58,403 --> 00:14:04,643
I just don't use any tools except chat
gpt, but it's nice thing, especially

201
00:14:04,653 --> 00:14:10,363
for code comments and reflecting
readme and documentation with code.

202
00:14:10,363 --> 00:14:14,623
So we just changing the code and
documentation reflects it without

203
00:14:14,643 --> 00:14:19,263
our interaction, interactions, maybe
just only with some supervisory.

204
00:14:19,763 --> 00:14:21,043
However, no tools here.

205
00:14:21,583 --> 00:14:23,113
Another really nice thing, it's tests.

206
00:14:23,233 --> 00:14:28,713
That's a really important part of SDLC,
and here the LLMs are really powerful.

207
00:14:28,983 --> 00:14:30,773
And see a really big value of them.

208
00:14:31,353 --> 00:14:36,753
it's a test generation, verification,
test automation, a lot of things actually.

209
00:14:37,533 --> 00:14:38,773
why it's so good?

210
00:14:38,783 --> 00:14:44,213
Because, edge cases, That's what
I think, and edge cases that LLM

211
00:14:44,213 --> 00:14:46,273
can generate is quite bigger.

212
00:14:47,263 --> 00:14:52,763
So it's really nice that it can generate
more edge cases than I usually do.

213
00:14:53,563 --> 00:14:58,013
And that's really helpful in
this case, because it also helps

214
00:14:58,253 --> 00:15:00,943
navigate some gaps in understanding.

215
00:15:01,443 --> 00:15:03,113
Proven clear value.

216
00:15:03,973 --> 00:15:07,733
Works not only for unit tests,
but works for Selenium tests.

217
00:15:07,773 --> 00:15:11,973
It can be used, especially right
now, as I can understand, a visual

218
00:15:12,013 --> 00:15:18,363
part, so it can be used for writing
some Selenium specifications that

219
00:15:18,383 --> 00:15:23,063
gives you ability to test application
end to end and to reflect it.

220
00:15:23,503 --> 00:15:28,833
Someone can be called that's TDD not
so aligned with his developments,

221
00:15:29,293 --> 00:15:36,343
but I would say even It's current
capabilities, this LLM tools can at

222
00:15:36,413 --> 00:15:42,703
least cover and increase test coverage
for code that make it more maintainable.

223
00:15:43,243 --> 00:15:47,983
It can detect changes and
improve overall code quality.

224
00:15:48,483 --> 00:15:54,333
Another good example, it's a paper
by Meta about automated unit test

225
00:15:54,333 --> 00:15:56,843
improvement using large language model.

226
00:15:57,568 --> 00:16:02,548
They create the pipeline that's
responsible to improve test coverage.

227
00:16:03,478 --> 00:16:11,188
Just as we discussed previous slide, the
idea is that it generate test case test

228
00:16:11,188 --> 00:16:17,158
cases, not the unit test, but actually try
to understand what to test to fulfill the

229
00:16:17,158 --> 00:16:19,978
ideas or like specifications for tests.

230
00:16:20,488 --> 00:16:22,978
Then it's doing some prep testing of it.

231
00:16:23,428 --> 00:16:25,618
Then generate tests.

232
00:16:26,198 --> 00:16:30,048
Runs builds, and when this build
passes, means this is already

233
00:16:30,448 --> 00:16:33,228
successful number of tests.

234
00:16:33,398 --> 00:16:36,498
Then post processing is
improving of code coverage.

235
00:16:37,218 --> 00:16:41,288
And here we are, we have a ready
to create the pull request.

236
00:16:42,188 --> 00:16:47,658
Really nice paper that says that
Meta itself internally tries to

237
00:16:48,088 --> 00:16:50,318
use it, uses for different cases.

238
00:16:50,818 --> 00:16:52,648
what we can summarize here.

239
00:16:53,148 --> 00:16:58,048
It's interesting that for
code writing, it's not so bad.

240
00:16:58,048 --> 00:17:02,918
It really helps for boilerplate
and repetitive code tasks.

241
00:17:03,748 --> 00:17:07,948
it's good for changes to
end user code, actually.

242
00:17:08,848 --> 00:17:11,448
When it's not about complex things.

243
00:17:11,498 --> 00:17:16,478
When it's just for some small part of
it, for some class, it can be useful.

244
00:17:17,408 --> 00:17:22,118
It's really nice for test and especially
for test data generation, because

245
00:17:22,128 --> 00:17:26,068
sometimes it's really hard to generate
some test data or come up with it.

246
00:17:26,068 --> 00:17:27,528
You need to think about it.

247
00:17:28,148 --> 00:17:30,168
here is really proven value.

248
00:17:30,878 --> 00:17:35,228
It's nice for assistance
in unfamiliar tasks.

249
00:17:35,408 --> 00:17:38,798
It's another interesting
part when LLMs can be used.

250
00:17:39,798 --> 00:17:44,378
For example, this CSS for HTML generated.

251
00:17:45,218 --> 00:17:49,698
Even though that you don't know CSS,
like CSS for back end developers.

252
00:17:50,308 --> 00:17:51,108
that's nice.

253
00:17:51,258 --> 00:17:53,478
I tried even with ChatGPT.

254
00:17:53,508 --> 00:17:55,828
It works really, it works.

255
00:17:56,168 --> 00:18:01,128
After some number of iterations, I
can manage to write some specific

256
00:18:01,168 --> 00:18:03,318
cases that I am not familiar with.

257
00:18:03,818 --> 00:18:07,658
And it's really good for
integrated search over a data lake.

258
00:18:07,718 --> 00:18:12,248
It's a really emerging thing, especially
for big projects, because In big

259
00:18:12,268 --> 00:18:17,168
projects, the issue of complexity
between different parts is really big.

260
00:18:17,668 --> 00:18:21,268
It's not good for changing a complex code.

261
00:18:22,188 --> 00:18:22,528
Yeah.

262
00:18:22,938 --> 00:18:25,448
And it's not good for refactoring.

263
00:18:25,558 --> 00:18:31,178
Because refactoring requires changing
with understanding of the big context.

264
00:18:31,848 --> 00:18:36,298
for maintainability of complex
legacy code, it's not so workable.

265
00:18:36,798 --> 00:18:42,368
And of course it's not good for
generating a complex code or like code

266
00:18:42,368 --> 00:18:47,898
for multiple cases or even multiple
classes when they're involved in this.

267
00:18:48,398 --> 00:18:53,918
In a nutshell, it works great right now
for unit tests, for testing, let's say.

268
00:18:54,488 --> 00:18:57,838
It works great for some prototyping.

269
00:18:58,628 --> 00:19:02,798
And it's not so good for maintenance
of the legacy or big projects.

270
00:19:03,298 --> 00:19:10,858
Yes, we heard about recent talks that,
for example, Amazon just save a lot of

271
00:19:10,938 --> 00:19:15,458
hours for migrating from one version
Java to another, but in reality, I

272
00:19:15,508 --> 00:19:19,778
think it's just minor code changes
because migrating from one version

273
00:19:19,778 --> 00:19:21,898
Java to another, not so complex.

274
00:19:22,748 --> 00:19:28,608
Just the language really famous
for their backward compatibility.

275
00:19:29,508 --> 00:19:33,398
So this is a kind of a summary
that I see reasonable right now.

276
00:19:33,898 --> 00:19:34,628
What else?

277
00:19:34,638 --> 00:19:38,388
What interesting side
effects this thing creates?

278
00:19:38,888 --> 00:19:44,468
One side effect I see
it's code churn by years.

279
00:19:44,908 --> 00:19:49,548
There is a article that, yeah, this
article will use some extrapolation,

280
00:19:49,568 --> 00:19:54,403
but in reality it says that code
churn increases after the LLM cycle.

281
00:19:54,903 --> 00:19:59,803
boom started, there is a couple
of comments and, the idea is that,

282
00:20:00,453 --> 00:20:07,343
practical consequence of LLMs, that, it
works well for experienced developers,

283
00:20:07,933 --> 00:20:15,023
but for newcomers, it becomes a bit
problematic because, LLMs generate

284
00:20:15,023 --> 00:20:20,203
some code, but you need to understand,
is it okay or not, how to modify it.

285
00:20:20,993 --> 00:20:24,243
And it requires experience
to work with it.

286
00:20:24,243 --> 00:20:33,563
And usually it generates something that's
not really nice, or it's nice, but partly.

287
00:20:33,563 --> 00:20:39,383
and it means if we really follow
the LLMs without any supervisory,

288
00:20:39,788 --> 00:20:43,978
It creates a legacy code
quicker than people usually do.

289
00:20:44,478 --> 00:20:48,798
this legacy code will be problematic
for next maintainability,

290
00:20:48,798 --> 00:20:50,088
the maintenance of it.

291
00:20:50,628 --> 00:20:52,568
Debugging and fixing this code.

292
00:20:52,578 --> 00:20:57,658
it means LLAMP is good for
generating code, but this code has

293
00:20:57,658 --> 00:21:00,898
a higher effort on maintainability.

294
00:21:01,458 --> 00:21:04,463
And this is a problem that
actually could be solved.

295
00:21:04,963 --> 00:21:10,823
And where I guess some researchers
will try to solve because new code

296
00:21:10,823 --> 00:21:15,603
generation, it's nice, but maintainability
of it, it's another important part

297
00:21:15,613 --> 00:21:21,183
because, it's a really big part of
overall lifecycle of the project.

298
00:21:21,713 --> 00:21:24,923
This is an interesting outcome
that I see even with my code.

299
00:21:24,983 --> 00:21:28,033
that's, here is the emerging thing.

300
00:21:28,863 --> 00:21:36,053
However, it's all my story right now about
the usage of LLMs and things for DevTools.

301
00:21:36,643 --> 00:21:42,153
So thank you for your time and I
hope it was interesting to listen.

