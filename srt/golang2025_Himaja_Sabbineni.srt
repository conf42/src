1
00:00:00,000 --> 00:00:03,750
We are diving into something that's
shaping the way modern systems are

2
00:00:03,750 --> 00:00:07,230
built, microservices and API design.

3
00:00:07,860 --> 00:00:10,200
These aren't just technical decisions.

4
00:00:10,500 --> 00:00:15,900
They're how high performing teams move
fast, stay flexible, and build systems

5
00:00:15,900 --> 00:00:17,460
that scale without slowing down.

6
00:00:18,060 --> 00:00:18,990
Let's get into it.

7
00:00:19,440 --> 00:00:23,940
So imagine being able to ship new
features weekly without downtime.

8
00:00:24,540 --> 00:00:28,800
Imagine your team deploying changes
independently without MER complex.

9
00:00:29,415 --> 00:00:33,345
And imagine an architecture that
adapts to traffic spikes instead

10
00:00:33,345 --> 00:00:34,635
of crashing under pressure.

11
00:00:35,325 --> 00:00:40,155
That's what microservices and
smart API design unlock systems

12
00:00:40,155 --> 00:00:43,455
that move at the speed of your
business, not the other way around.

13
00:00:43,955 --> 00:00:48,725
S users expect fast, seamless, and
reliable experiences every time.

14
00:00:49,295 --> 00:00:53,615
If your system is slow or fragile,
they'll move on in seconds.

15
00:00:54,335 --> 00:00:58,895
Microservices break down big,
bloated code bases into smaller agile

16
00:00:58,895 --> 00:01:01,085
units that evolve independently.

17
00:01:01,835 --> 00:01:05,975
APIs connects those units into something
greater than the sum of the parts.

18
00:01:06,680 --> 00:01:07,220
Together.

19
00:01:07,220 --> 00:01:11,150
They give you a foundation that's
not just scalable, but adaptable,

20
00:01:11,690 --> 00:01:14,030
silent, and ready for what's next.

21
00:01:14,600 --> 00:01:19,090
So now let's understand
microservice architecture.

22
00:01:19,420 --> 00:01:20,770
So let's start with the basics.

23
00:01:20,770 --> 00:01:23,770
Like why are microservices
such a game changer?

24
00:01:24,550 --> 00:01:29,020
Independent services, microservices,
break down your application into

25
00:01:29,020 --> 00:01:33,880
small, independent units, each focused
on doing one thing really well.

26
00:01:34,615 --> 00:01:35,425
And at a time.

27
00:01:35,815 --> 00:01:40,135
These services are autonomous, and
because of that, they're easier

28
00:01:40,135 --> 00:01:42,655
to build, test, deploy, and scale.

29
00:01:43,405 --> 00:01:47,035
What's powerful here is how this
changes the way teams operate.

30
00:01:47,635 --> 00:01:51,835
Instead of coordinating across a
massive code base, each team owns

31
00:01:51,835 --> 00:01:54,445
their own service from start to finish.

32
00:01:54,955 --> 00:01:59,785
That means faster edition, making
quicker releases and fewer bottlenecks.

33
00:02:00,445 --> 00:02:01,975
Technology diversity.

34
00:02:02,365 --> 00:02:05,725
So now imagine you are building
a real time recommendation

35
00:02:05,725 --> 00:02:07,465
engine for an e-commerce site.

36
00:02:08,035 --> 00:02:13,285
You might need lightning fast response
times, so you maybe you build that

37
00:02:13,285 --> 00:02:16,255
service and rest or go for performance.

38
00:02:16,555 --> 00:02:21,745
On the other hand, your audit history
service where speed isn't as critical

39
00:02:21,835 --> 00:02:26,755
could be built in no JS or Python, where
development is faster and more flexible.

40
00:02:27,745 --> 00:02:28,675
Team autonomy.

41
00:02:29,290 --> 00:02:34,120
Each service can use the tools that are
best suited for its specific purpose.

42
00:02:34,630 --> 00:02:38,590
And the beauty of it is these
choices don't interfere with

43
00:02:38,590 --> 00:02:39,910
other parts of your system.

44
00:02:40,630 --> 00:02:42,760
You also get pin points, scalability.

45
00:02:43,210 --> 00:02:46,325
If one service is under pressure,
you don't need to scale your entire

46
00:02:46,660 --> 00:02:49,150
system, just scale that one service.

47
00:02:49,540 --> 00:02:53,380
It's precise, efficient,
and cost effective, and

48
00:02:53,380 --> 00:02:54,760
deployment becomes a breeze.

49
00:02:55,315 --> 00:02:59,695
You're no longer tied to a Big Bang
release where everything ships at once.

50
00:03:00,175 --> 00:03:05,545
Services go live when they're ready, which
means less risk and faster attrition.

51
00:03:06,295 --> 00:03:08,335
Microservices shift our mindset.

52
00:03:08,905 --> 00:03:12,895
We stop thinking in terms of projects
and start thinking in terms of products.

53
00:03:13,435 --> 00:03:18,325
Teams don't just deliver code, they
own outcomes, and that's a huge step

54
00:03:18,325 --> 00:03:20,245
forward in building better software.

55
00:03:20,335 --> 00:03:26,435
Okay, now let's understand what domain
driven des design means and build

56
00:03:26,435 --> 00:03:28,985
what the business peaks already.

57
00:03:28,985 --> 00:03:31,505
So we have decided to build microservices.

58
00:03:31,565 --> 00:03:35,225
The next big question is how
do we decide where one service

59
00:03:35,225 --> 00:03:37,355
ends and another service begins?

60
00:03:37,805 --> 00:03:41,495
So this is where domain
driven design comes in.

61
00:03:41,645 --> 00:03:44,615
It's like giving your architecture
a map of the business.

62
00:03:44,875 --> 00:03:47,215
start by identifying bonded context.

63
00:03:47,545 --> 00:03:53,545
These are self-contained zones of logic
where everything makes sense in that word.

64
00:03:53,855 --> 00:03:58,075
for example, what the word order
means in a sales context might be

65
00:03:58,075 --> 00:04:01,555
very different from what it means
in a shipping context, right?

66
00:04:01,885 --> 00:04:06,700
each bonnet context gets its
own vocabulary and rules Try

67
00:04:06,700 --> 00:04:08,950
to establish a unique language.

68
00:04:09,449 --> 00:04:10,890
that means everyone.

69
00:04:11,204 --> 00:04:16,124
Developers, product managers,
stakeholders, uses the same terminology.

70
00:04:16,574 --> 00:04:20,534
So instead of one person saying
basket and another saying, checkout

71
00:04:20,534 --> 00:04:25,814
payload, everyone just says, cut that
alignment avoids misunderstandings

72
00:04:25,874 --> 00:04:27,374
and speeds up collaboration.

73
00:04:28,274 --> 00:04:30,824
And the next step is to
model domain entities.

74
00:04:31,439 --> 00:04:36,329
This approach also keeps your services
from overlapping or becoming plurry.

75
00:04:36,929 --> 00:04:40,199
You won't end up with two services
doing this kind of same thing,

76
00:04:40,199 --> 00:04:41,969
but with slightly different names.

77
00:04:42,659 --> 00:04:45,809
And the next step is to
define service boundaries.

78
00:04:46,109 --> 00:04:47,759
So why does this matter?

79
00:04:47,809 --> 00:04:50,449
you are no longer building
from where requirements, right?

80
00:04:50,809 --> 00:04:54,049
You're directly coding the
business logic into your services.

81
00:04:54,409 --> 00:04:58,309
It's cleaner, more accurate,
and when business needs change,

82
00:04:58,309 --> 00:05:00,049
your systems adapt faster.

83
00:05:00,549 --> 00:05:02,950
Moving on to the
implementation strategies.

84
00:05:03,429 --> 00:05:06,849
So let's talk about turning
your microservices design

85
00:05:06,849 --> 00:05:08,650
into something real and fast.

86
00:05:09,249 --> 00:05:10,419
Independent deployment.

87
00:05:10,869 --> 00:05:13,210
So the key here is independent delivery.

88
00:05:13,809 --> 00:05:17,020
Each service should have
its own CI CID pipeline.

89
00:05:17,530 --> 00:05:21,729
That means when one team finishes a
feature, they don't have to wait for

90
00:05:22,270 --> 00:05:24,699
another team or coordinate a big release.

91
00:05:24,909 --> 00:05:29,109
They can test it, ship it, and
monitor it all on their own timeline.

92
00:05:29,609 --> 00:05:31,919
And the next one is data isolation.

93
00:05:32,399 --> 00:05:37,199
A key microservices principle is that
each service should own its own database

94
00:05:37,229 --> 00:05:40,379
or data store with separate data stores.

95
00:05:40,379 --> 00:05:44,459
Services stay independent, making
it easier to evolve and deploy

96
00:05:44,459 --> 00:05:45,629
them without breaking others.

97
00:05:46,129 --> 00:05:49,519
And communication patterns we
have to choose wisely here.

98
00:05:50,069 --> 00:05:54,299
use rest or GRPC when the response
is immediate and necessary.

99
00:05:54,449 --> 00:05:59,559
But for everything else, lean on
to graph well, Kafka Rabbit mq.

100
00:06:00,189 --> 00:06:04,329
This allows your services to talk without
being tightly bound to each other.

101
00:06:04,329 --> 00:06:08,619
If one is slower down, the rest of
your system doesn't have to wait.

102
00:06:09,324 --> 00:06:12,294
On the deployment side,
embrace containerization.

103
00:06:12,354 --> 00:06:14,754
So Docker makes your service portable.

104
00:06:15,504 --> 00:06:18,864
Kubernetes, add orchestration,
scaling, and self-healing.

105
00:06:19,464 --> 00:06:21,504
It's like giving your
architecture superpowers.

106
00:06:22,104 --> 00:06:23,124
And here's a big one.

107
00:06:23,574 --> 00:06:27,924
Instrument, everything
locks, metrics, traces.

108
00:06:28,194 --> 00:06:33,264
You want to know what exactly going
on in your services at all times.

109
00:06:33,714 --> 00:06:38,304
Observability isn't optional when you have
got dozens or hundreds of moving parts.

110
00:06:38,804 --> 00:06:42,074
Next, let's look at the
resilience patterns.

111
00:06:42,104 --> 00:06:43,454
Designing for chaos.

112
00:06:43,514 --> 00:06:46,664
I would call it as, let's
get real for a second.

113
00:06:46,754 --> 00:06:47,834
Things will go wrong.

114
00:06:48,044 --> 00:06:49,214
Services will fail.

115
00:06:49,454 --> 00:06:50,504
Network will time out.

116
00:06:51,044 --> 00:06:53,354
Dependencies will become unreliable.

117
00:06:53,924 --> 00:06:55,874
The question isn't if
something will break.

118
00:06:56,234 --> 00:06:58,604
It's how your system
responds when it does.

119
00:06:59,234 --> 00:07:01,484
That's where resilience patterns comes in.

120
00:07:01,799 --> 00:07:03,809
So these are your safety nets.

121
00:07:04,259 --> 00:07:07,049
Let's look at what circuit
breaker pattern is.

122
00:07:07,229 --> 00:07:09,179
It's like the fuse box in your house.

123
00:07:09,659 --> 00:07:13,439
When a service starts failing
repeatedly, the circuit breaker trips and

124
00:07:13,439 --> 00:07:15,509
temporarily stops making calls straight.

125
00:07:16,349 --> 00:07:21,119
Instead of hammering a broken service
and causing a bigger failure, the system

126
00:07:21,119 --> 00:07:26,054
backs off and checks in periodically
to see if the service is healthy again.

127
00:07:26,564 --> 00:07:28,919
This is how you avoid cascading outages.

128
00:07:29,699 --> 00:07:31,769
And the next one is bulkhead pattern.

129
00:07:32,249 --> 00:07:34,649
So this is named after ship design.

130
00:07:35,129 --> 00:07:39,179
Ships have compartments to contain
flooding if one area is breached, right?

131
00:07:39,509 --> 00:07:41,519
So the same idea A applies here.

132
00:07:41,909 --> 00:07:45,239
If one part of your system is
under stress, you isolate its

133
00:07:45,239 --> 00:07:47,609
resources, CPU, memory and threats.

134
00:07:47,969 --> 00:07:50,399
So it can't bring down
everything else with it.

135
00:07:51,239 --> 00:07:53,159
And the next one is retry pattern.

136
00:07:53,939 --> 00:07:56,009
And sometimes failures are just bad luck.

137
00:07:56,049 --> 00:07:57,459
a blip in the network.

138
00:07:57,519 --> 00:08:02,379
a temporary database hiccup in these
cases automatically retrying the

139
00:08:02,379 --> 00:08:06,129
request with some delay, can resolve
the issue without any user impact.

140
00:08:06,849 --> 00:08:08,949
And the last one would
be fallback pattern.

141
00:08:09,549 --> 00:08:13,539
So these are degraded, but functional
responses that kick in when the

142
00:08:13,539 --> 00:08:15,189
real service isn't available.

143
00:08:15,969 --> 00:08:19,449
Maybe it's K data or a
simplified calculation.

144
00:08:19,479 --> 00:08:23,519
Or even a friendly message saying,
Hey, we are having some issues.

145
00:08:23,519 --> 00:08:24,389
We'll be right back.

146
00:08:25,259 --> 00:08:30,029
Fallback keeps the user experience
smooth even during failures now.

147
00:08:30,654 --> 00:08:34,014
Now let's try to see the a
PS styles for the real world.

148
00:08:34,494 --> 00:08:38,484
So let's zoom in on how these
services actually talk to each

149
00:08:38,484 --> 00:08:39,894
other and to the outside world.

150
00:08:40,464 --> 00:08:41,574
So let's look at rest.

151
00:08:42,174 --> 00:08:45,174
Of course it's been around for
a while and for good reason.

152
00:08:45,684 --> 00:08:50,064
REST is simple, widely understood and
works great for credit operations.

153
00:08:50,424 --> 00:08:55,424
It leverages standard HGDP works,
get post, put, delete, and it's

154
00:08:55,424 --> 00:08:58,964
super compatible with browsers,
mobile apps, zoom, name it.

155
00:08:59,534 --> 00:09:03,254
But rest isn't always the best
fit, especially when clients need

156
00:09:03,254 --> 00:09:07,179
precision in what they ask for,
and that's where GraphQL shines.

157
00:09:07,949 --> 00:09:12,689
So with GraphQL, the client defines
exactly what data it wants and

158
00:09:12,749 --> 00:09:15,839
gets just that no more, no less.

159
00:09:16,349 --> 00:09:19,349
It solves the over fetching
and under fetching problem,

160
00:09:19,799 --> 00:09:24,449
especially in complex UIs or mobile
apps where bandwidth matters.

161
00:09:24,959 --> 00:09:30,479
On the other hand, GRPC uses HTTP
two and protocol purpose to enabling

162
00:09:30,749 --> 00:09:33,239
lightning fast communication
between internal service.

163
00:09:33,739 --> 00:09:38,479
It supports bidirectional streaming and
for strict contracts, making it perfect

164
00:09:38,479 --> 00:09:43,339
for service to service communication
in large scale high throughput systems.

165
00:09:43,879 --> 00:09:46,069
So how do you choose between these things?

166
00:09:46,560 --> 00:09:50,750
you can use rest when you need
simplicity, broad compatibility

167
00:09:50,810 --> 00:09:52,430
and stateless communication.

168
00:09:53,100 --> 00:09:57,570
and you can use GraphQL when your
clients need flexibility and you

169
00:09:57,570 --> 00:09:59,040
want to avoid loaded payrolls.

170
00:10:00,030 --> 00:10:04,320
And we can use GRPC when unit
need, draw speed, low latency and

171
00:10:04,320 --> 00:10:08,190
strict type enforcement, especially
for internal microservices.

172
00:10:08,970 --> 00:10:10,050
And here's the twist.

173
00:10:10,440 --> 00:10:11,610
You don't have to pick one.

174
00:10:11,910 --> 00:10:13,080
Many modern systems.

175
00:10:13,080 --> 00:10:19,770
Mix and match rest for public APIs,
graph for frontend agility and GRPC

176
00:10:19,770 --> 00:10:22,190
behind the scenes for speed Now.

177
00:10:22,295 --> 00:10:25,445
let's, look at the API
versioning strategies, meaning

178
00:10:25,445 --> 00:10:27,695
like no broken clients.

179
00:10:28,185 --> 00:10:30,030
so you have built a beautiful API.

180
00:10:30,300 --> 00:10:33,885
It's like clients are using
it, business is blooming.

181
00:10:34,635 --> 00:10:35,745
Now comes the hard part.

182
00:10:36,165 --> 00:10:38,865
How do you change it
without breaking everything?

183
00:10:39,765 --> 00:10:41,685
That's where a PA versioning comes in.

184
00:10:41,805 --> 00:10:44,925
It's not just about like supporting
the old while rolling out the

185
00:10:44,925 --> 00:10:49,155
new, it's about doing it with
clarity, stability, and trust.

186
00:10:49,890 --> 00:10:51,870
Let's walk through the major approaches.

187
00:10:52,200 --> 00:10:54,350
First up, URA path versioning.

188
00:10:54,920 --> 00:10:56,420
This one's simple and visible.

189
00:10:56,720 --> 00:11:01,640
You version right in the URL like
slash a p slash we even slash products.

190
00:11:02,210 --> 00:11:06,140
It's easy to understand and out,
but the downside is clutter.

191
00:11:06,500 --> 00:11:09,290
You'll end up with multiple
endpoints for the same resource.

192
00:11:10,010 --> 00:11:12,080
Then there's query parameter versioning.

193
00:11:12,230 --> 00:11:15,890
You keep the base URA
clean and pass the version.

194
00:11:16,260 --> 00:11:18,810
products version is equals to two.

195
00:11:19,320 --> 00:11:24,340
So this means, this, of course this
approach is like neat and flexible and

196
00:11:24,340 --> 00:11:29,290
it works well when you want to switch
versions without, like rewriting paths,

197
00:11:29,380 --> 00:11:31,270
like what we have seen previously.

198
00:11:31,840 --> 00:11:33,460
You are a path versioning.

199
00:11:34,060 --> 00:11:35,950
And the next one is header versioning.

200
00:11:36,430 --> 00:11:41,290
So you keep your URA completely
version agnostic and specify

201
00:11:41,290 --> 00:11:42,970
the version in a h TT P header.

202
00:11:43,610 --> 00:11:46,520
accept version or V one, V two, et cetera.

203
00:11:47,000 --> 00:11:51,170
It's super clean for developers, but
it does add a little complexity to

204
00:11:51,170 --> 00:11:55,370
testing and debugging since versioning
is now hidden in the headers.

205
00:11:56,150 --> 00:12:00,470
And finally, the most elegant
but complex content, complex

206
00:12:00,470 --> 00:12:02,030
One is the content negotiation.

207
00:12:02,780 --> 00:12:06,980
So here your client, ask for a
specific version using the accept

208
00:12:06,980 --> 00:12:08,450
header with the custom media type.

209
00:12:09,410 --> 00:12:10,280
This one's in.

210
00:12:10,670 --> 00:12:11,900
Incredibly powerful.

211
00:12:12,860 --> 00:12:17,270
And aligns well with HTT P
standards, but it also requires

212
00:12:17,270 --> 00:12:19,220
more sophisticated client handling.

213
00:12:19,880 --> 00:12:21,230
So which one's best?

214
00:12:21,590 --> 00:12:23,480
That depends on your use case.

215
00:12:23,930 --> 00:12:25,610
The visibility and ease of use.

216
00:12:25,610 --> 00:12:29,900
Meta most go with URA or query
para if your consumers are

217
00:12:29,990 --> 00:12:31,460
more advanced or internal.

218
00:12:32,180 --> 00:12:35,630
And content negotiation offer
cleaner, long-term scalability.

219
00:12:36,410 --> 00:12:37,490
But here is a golden rule.

220
00:12:38,075 --> 00:12:42,365
Version, early version often, and never
rate your clients without warning.

221
00:12:43,085 --> 00:12:46,715
Versioning isn't a workaround,
it's a commitment to backwards

222
00:12:46,715 --> 00:12:49,235
compatibility and smooth evolution.

223
00:12:49,735 --> 00:12:55,705
Moving on to the next slide, so here
comes the documentation part for the APIs.

224
00:12:56,065 --> 00:12:57,205
So let's be honest.

225
00:12:57,205 --> 00:13:00,885
no one allows writing documentation,
but when you do it right.

226
00:13:01,320 --> 00:13:02,700
It becomes your secret weapon.

227
00:13:03,180 --> 00:13:04,590
So start with the foundation.

228
00:13:04,750 --> 00:13:07,480
pick open API or swagger.

229
00:13:07,660 --> 00:13:12,670
These are mission readable specs that
define your API contract and they unlock

230
00:13:12,670 --> 00:13:16,930
a whole ecosystem of auto-generated
documentation, testing tools, mock

231
00:13:16,930 --> 00:13:19,150
server, and even a stick case.

232
00:13:19,660 --> 00:13:23,200
It's like writing your API once
and getting five things for free.

233
00:13:24,070 --> 00:13:26,090
Next, don't just describe parameters.

234
00:13:26,540 --> 00:13:27,860
Show real examples.

235
00:13:28,280 --> 00:13:31,700
Give developer sample request and
responses in multiple language

236
00:13:32,450 --> 00:13:35,600
bonus points for including
edge cases and common mistakes.

237
00:13:36,080 --> 00:13:40,375
The faster someone can copy, paste and
see success, the better their experiences.

238
00:13:40,875 --> 00:13:42,865
Error documentation is also huge.

239
00:13:43,470 --> 00:13:45,690
Don't make people guess
why something failed.

240
00:13:45,750 --> 00:13:47,550
Explain each other clearly.

241
00:13:47,550 --> 00:13:51,090
Include the status quo, a
meaningful message, and this is

242
00:13:51,090 --> 00:13:53,520
key what they can do to fix it.

243
00:13:54,120 --> 00:13:55,740
And don't forget, change laws.

244
00:13:56,010 --> 00:13:58,590
Versioning isn't enough if
no one knows what changed.

245
00:13:58,740 --> 00:14:03,690
Keep a clear chronological list
of updates, deprecation, and new

246
00:14:03,690 --> 00:14:07,490
features, and let's share your system.

247
00:14:07,525 --> 00:14:09,395
Let's discuss about API security.

248
00:14:09,895 --> 00:14:14,155
So your API is the front door
of your system, and if it's not

249
00:14:14,155 --> 00:14:17,665
logged down properly, you're
basically inviting bad actors in.

250
00:14:18,145 --> 00:14:19,704
So let's start with basics.

251
00:14:19,734 --> 00:14:20,874
Transport security.

252
00:14:21,655 --> 00:14:25,015
Every API call should be
encrypted, no exceptions.

253
00:14:25,254 --> 00:14:29,185
That means H-T-T-P-S
with TLS 1.2 or higher.

254
00:14:30,025 --> 00:14:32,727
Plus things like HSTS and.

255
00:14:33,009 --> 00:14:34,719
Secure cookie attributes.

256
00:14:35,319 --> 00:14:38,349
It's a bare minimum for predicting
data in motion and guarding

257
00:14:38,349 --> 00:14:40,029
against man in the middle attacks.

258
00:14:40,719 --> 00:14:44,349
Next we move into the authentication
and authorization part.

259
00:14:44,739 --> 00:14:48,429
So in this context, don't try
to reinvent the wheel here.

260
00:14:48,879 --> 00:14:52,329
Use proven standards like O2 oh and open.

261
00:14:52,329 --> 00:14:54,939
Id connect for secure
delegate delegated access.

262
00:14:55,439 --> 00:15:01,079
Once a user or system is authenticated,
use JSON web tokens or JWT to

263
00:15:01,079 --> 00:15:03,239
pass identity claims securely.

264
00:15:03,809 --> 00:15:08,069
Just make sure to validate those tokens
with signatures and expiration checks.

265
00:15:08,549 --> 00:15:11,129
And let's not forget rule
based access control.

266
00:15:11,739 --> 00:15:14,919
not every user should be able
to access every endpoint, right?

267
00:15:15,309 --> 00:15:21,284
Define rules, assign permissions, and
enforce those tools by the API gateway.

268
00:15:22,174 --> 00:15:23,884
that's where security scales.

269
00:15:24,274 --> 00:15:30,064
Another must have is input, validation,
validate all incoming data at the edge

270
00:15:30,154 --> 00:15:32,944
types, formats, blends and ranges.

271
00:15:33,484 --> 00:15:37,294
Sanitization prevents injection
attacks and malformed payloads, and

272
00:15:37,294 --> 00:15:39,094
all kinds of unwanted surprises.

273
00:15:39,574 --> 00:15:43,324
And this isn't just for user
input, it applies to service calls.

274
00:15:43,324 --> 00:15:46,704
Also finally implement rate
limiting and throttling.

275
00:15:47,515 --> 00:15:51,835
You don't want a misbehaving client or
worse, a partner hammering your APIs

276
00:15:51,835 --> 00:15:53,995
until your infrastructure crashes, right?

277
00:15:54,615 --> 00:15:57,225
I have seen a lot of examples
like that previously.

278
00:15:57,735 --> 00:16:02,715
So try to set some sort of like
thresholds based on user rules, ips,

279
00:16:02,715 --> 00:16:07,810
or authentication scopes, and always
return those friendly rate limit headers

280
00:16:07,995 --> 00:16:09,765
so clients know when to back off.

281
00:16:10,265 --> 00:16:11,255
And next slide.

282
00:16:11,885 --> 00:16:13,385
Tuning for performance.

283
00:16:14,025 --> 00:16:14,475
alright.

284
00:16:14,895 --> 00:16:20,895
And now we have got our microservices
built, our API secured, and now let's

285
00:16:20,895 --> 00:16:25,545
try to make them fast, because let's
face it, performance isn't just a

286
00:16:25,545 --> 00:16:27,344
technical metric anymore, right?

287
00:16:27,675 --> 00:16:30,645
It's a user experience
metric and users don't wait.

288
00:16:31,215 --> 00:16:37,045
So one of the, strategy that we can use to
improve performance is caching, of course.

289
00:16:37,104 --> 00:16:38,640
So we use HTDP.

290
00:16:39,139 --> 00:16:43,159
caching headers like EAG and Cache
control to prevent unnecessary

291
00:16:43,159 --> 00:16:45,289
request for even more speed.

292
00:16:45,349 --> 00:16:48,229
Offload frequently requested
data to something like red.

293
00:16:49,189 --> 00:16:53,179
Caching isn't just about speed, it's
about offloading pressure from your

294
00:16:53,179 --> 00:16:56,299
core services, ation and filtering.

295
00:16:56,659 --> 00:16:59,239
So never return thousands
of reports at once.

296
00:16:59,339 --> 00:17:00,329
no one wants that.

297
00:17:00,689 --> 00:17:02,339
And your API can't handle it.

298
00:17:02,429 --> 00:17:07,139
So instead, use cursor based ation
per performance and stability.

299
00:17:07,694 --> 00:17:10,815
So let's use this filter
down to what they just need.

300
00:17:11,355 --> 00:17:13,424
It's faster for them and cheaper for you.

301
00:17:14,325 --> 00:17:17,445
and also always zz your responses.

302
00:17:17,745 --> 00:17:21,345
It's a tiny change that can
save huge bandwidth and speed up

303
00:17:21,345 --> 00:17:23,115
mobile experiences dramatically.

304
00:17:23,615 --> 00:17:24,545
Connection, pooling.

305
00:17:24,545 --> 00:17:29,284
So every time you open a new database
or HT DP connection, there's overhead,

306
00:17:29,284 --> 00:17:34,715
right posts let you reuse connections,
cutting latency, and improving throughput.

307
00:17:35,435 --> 00:17:38,134
Your services stay fast, even under note.

308
00:17:38,975 --> 00:17:41,465
And the last one is
asynchronous processing.

309
00:17:42,034 --> 00:17:45,695
So not everything needs to happen
in request response cycle, right?

310
00:17:46,414 --> 00:17:50,014
Push long running or resource
heavy task into background jobs.

311
00:17:50,344 --> 00:17:51,334
Use cues.

312
00:17:51,424 --> 00:17:55,834
Let your API written quickly and
handle heavy lifting behind the scenes.

313
00:17:56,334 --> 00:17:58,224
So what are we getting from it?

314
00:17:58,304 --> 00:18:02,534
how can we like make use of
microservices and what are the next step?

315
00:18:02,784 --> 00:18:04,344
so we have covered a lot, right?

316
00:18:04,344 --> 00:18:07,584
And let's try to bring it all
together with some key takeaways

317
00:18:07,584 --> 00:18:09,324
and roadmap for what to do next.

318
00:18:10,194 --> 00:18:13,824
First, microservices
are your agility engine.

319
00:18:13,824 --> 00:18:18,984
So instead of one big team stepping
in, one team, stepping onto each other

320
00:18:18,984 --> 00:18:23,394
toes, you have got small focus teams
shipping independently and confidently.

321
00:18:24,144 --> 00:18:26,394
So now what can you do with all this?

322
00:18:26,444 --> 00:18:27,524
You can start small.

323
00:18:27,704 --> 00:18:30,914
Pick one service that's a good
candidate to be carved out.

324
00:18:31,484 --> 00:18:34,274
Design it intentionally around
the business domain and build

325
00:18:34,274 --> 00:18:35,474
it with autonomy in mind.

326
00:18:36,074 --> 00:18:38,684
And then standardize your APIs.

327
00:18:38,734 --> 00:18:42,454
define your naming, versioning
and error handling strategy.

328
00:18:42,814 --> 00:18:46,474
It's one of those things that's easy to
overlook, but critical when you start to

329
00:18:46,474 --> 00:18:49,654
scale and automate everything you can.

330
00:18:50,044 --> 00:18:51,184
Testing, deployment.

331
00:18:51,184 --> 00:18:53,734
Monitoring automation
isn't just about spirit.

332
00:18:53,734 --> 00:18:58,564
It's about consistency and peace of
mind, of course, and then prioritize

333
00:18:58,564 --> 00:19:00,904
security and observability from day one.

334
00:19:01,004 --> 00:19:03,224
you don't want to boil those on later.

335
00:19:03,254 --> 00:19:07,334
You want them to beg to your
architecture and finally stay.

336
00:19:07,834 --> 00:19:09,604
You don't need to have it all figured out.

337
00:19:09,694 --> 00:19:11,134
Just take the next step.

338
00:19:11,554 --> 00:19:13,924
Every cycle gets you
closer to your system.

339
00:19:13,924 --> 00:19:16,474
That's not just working,
but working with you.

340
00:19:17,254 --> 00:19:20,494
Because at the end of the day,
this isn't just a tech strategy.

341
00:19:20,974 --> 00:19:22,264
It's a mindset shift.

342
00:19:23,134 --> 00:19:26,494
One that empowers your teams
to build faster and smarter.

343
00:19:26,994 --> 00:19:28,104
Thanks for being here.

344
00:19:28,314 --> 00:19:30,114
Let's go build what's next.

