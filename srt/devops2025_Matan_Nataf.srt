1
00:00:00,200 --> 00:00:01,720
Hey folks, this is Matan.

2
00:00:01,810 --> 00:00:05,280
I'm the co founder and CEO
of Rapido Technologies.

3
00:00:05,670 --> 00:00:10,639
today I want to talk to you a little
bit about relational databases in the

4
00:00:10,640 --> 00:00:17,019
cloud, the challenges that are coming
with the new era of microservices

5
00:00:17,019 --> 00:00:23,090
and multi tenant architectures, and
why essentially in the cloud world,

6
00:00:23,500 --> 00:00:26,720
managing relational database is Broken.

7
00:00:27,170 --> 00:00:31,280
I'm grateful to be a
gold sponsor of con 42.

8
00:00:31,650 --> 00:00:35,490
we're excited to be here and to, be
part of your community, at least for

9
00:00:35,490 --> 00:00:42,390
the upcoming year, and learn more
from your insights, about the devil S.

10
00:00:42,390 --> 00:00:42,580
R.

11
00:00:42,580 --> 00:00:43,100
E.

12
00:00:43,370 --> 00:00:48,330
Cloud engineering aspect of databases,
and hopefully to bring value to you.

13
00:00:48,490 --> 00:00:53,190
multiple folks from this community
using the tools of Rapido.

14
00:00:53,810 --> 00:00:56,120
So let's dive in.

15
00:00:56,580 --> 00:01:00,110
managing relational databases
in the cloud is broken.

16
00:01:00,130 --> 00:01:01,420
And why do we say that?

17
00:01:01,930 --> 00:01:07,960
the cloud is introduced, companies
with new challenges related to

18
00:01:08,380 --> 00:01:11,600
managing a auto scalable applications.

19
00:01:11,980 --> 00:01:15,150
Kubernetes, auto scaling groups.

20
00:01:15,510 --> 00:01:16,610
have all introduced.

21
00:01:17,185 --> 00:01:23,385
dramatic flexibility, but severe
challenges in any shared everything

22
00:01:23,435 --> 00:01:25,645
architecture like relational databases.

23
00:01:25,645 --> 00:01:29,565
So in the end of your day, in the end
of the day, your application is able

24
00:01:29,565 --> 00:01:33,055
to scale automatically by 1000 X.

25
00:01:33,105 --> 00:01:38,915
But your database is a one monolithic
piece, that is very, very hard to manage.

26
00:01:38,915 --> 00:01:41,615
So essentially, your.

27
00:01:42,195 --> 00:01:46,465
Databases and your applications
in the cloud has evolved

28
00:01:46,465 --> 00:01:48,005
and changed dramatically.

29
00:01:48,505 --> 00:01:55,105
But the tools that are allowing the
DBMS itself has not changed at all.

30
00:01:55,475 --> 00:02:00,745
and this is why we believe that the entire
way companies are managing relational

31
00:02:00,775 --> 00:02:05,625
databases in the cloud today is broken and
introducing a lot of challenges related to

32
00:02:05,945 --> 00:02:10,630
observability, SLA, Resiliency and costs.

33
00:02:10,780 --> 00:02:17,310
the trend and I'm going to skip like
the previous slide, but the trend was

34
00:02:17,330 --> 00:02:22,590
that in the past, companies managed
a small fleet of databases, right?

35
00:02:22,590 --> 00:02:27,200
So on Prem, when you have few
monolithic applications, it is.

36
00:02:27,550 --> 00:02:31,070
Relatively easy to manage
to manage your database.

37
00:02:31,070 --> 00:02:37,220
You have a full blown DBA team, that know
exactly what they do on the databases.

38
00:02:37,530 --> 00:02:42,680
the changes in the scale are not severe,
so it's not thousands of percents.

39
00:02:42,700 --> 00:02:45,300
It's, 10, 12, 15%.

40
00:02:45,300 --> 00:02:51,120
So sizing for the peak is not
hard, and it's not expensive.

41
00:02:51,510 --> 00:02:52,260
and,

42
00:02:52,320 --> 00:02:57,380
Due to these factors, managing
performance and, tackling issues,

43
00:02:57,740 --> 00:03:00,290
was not hard as it is today, right?

44
00:03:00,600 --> 00:03:07,460
uh, Meantime to detect meantime to
resolve databases issues was not high

45
00:03:07,510 --> 00:03:12,160
back in the days when you had a full
blown DBA team when you had monitoring

46
00:03:12,160 --> 00:03:18,820
systems that monitoring 5 to 10 databases
with a The disadvantages, of course, of

47
00:03:18,830 --> 00:03:24,050
living in a monolithic world in terms
of time to market for new applications

48
00:03:24,580 --> 00:03:30,140
in terms of flexibility, launching
new services, living in that world for

49
00:03:30,150 --> 00:03:36,270
databases side of things was not too
bad besides the Oracle or my or or SQL

50
00:03:36,270 --> 00:03:38,900
Server license that you had to pay.

51
00:03:39,400 --> 00:03:44,460
In today's world, with microservices,
micro applications, in many cases,

52
00:03:44,480 --> 00:03:51,210
thousands of micro applications, managing
tenants, became, became, managing tenants

53
00:03:51,230 --> 00:03:57,750
became, great opportunity to accelerate
time to market for new applications, new

54
00:03:57,750 --> 00:04:00,440
features, substantial flexibility, right?

55
00:04:00,450 --> 00:04:03,530
Like building and deploying
new features became.

56
00:04:04,135 --> 00:04:09,315
so fast that we deploy new features to
our SAS applications in many cases, you

57
00:04:09,315 --> 00:04:17,565
know, every day and, we all rely on open
source databases like MySQL, Postgres,

58
00:04:17,835 --> 00:04:24,635
and it became actually a great, A great
world for managing applications, but

59
00:04:24,715 --> 00:04:30,665
alongside the improvements and the value
that we gained in the auto scalable

60
00:04:31,375 --> 00:04:38,165
world in the cloud native world, a lot of
changes came to teams managing RDS, In the

61
00:04:38,165 --> 00:04:43,485
cloud, so or relational databases in the
cloud, reducing when you manage a fleet

62
00:04:43,495 --> 00:04:49,285
of databases, it is very hard to reduce
downtime and improve performance, right?

63
00:04:49,285 --> 00:04:54,025
So tracking 5000 databases and
understanding where exactly.

64
00:04:54,190 --> 00:04:56,160
your CPU is close to the edge.

65
00:04:56,260 --> 00:04:57,250
It's not easy, right?

66
00:04:57,500 --> 00:05:00,830
Gaining visibility across all
databases in a single dashboard.

67
00:05:00,920 --> 00:05:05,420
This is something that many companies
are seeking to gain, but using the

68
00:05:05,440 --> 00:05:10,650
current tools like RDS Performance
Insights or, or Datadog is not easy.

69
00:05:10,750 --> 00:05:14,360
It's not easy to see that level of
visibility across a fleet of databases.

70
00:05:14,820 --> 00:05:18,560
Finding and addressing relational,
finding and addressing slow queries.

71
00:05:18,865 --> 00:05:20,225
across your entire fleet.

72
00:05:20,505 --> 00:05:21,525
So this is hard.

73
00:05:21,695 --> 00:05:26,475
And due to that, we see mounting costs
and many companies are just pouring more

74
00:05:26,475 --> 00:05:33,335
and more money on databases in order, in
order to reduce SLA and resiliency issues.

75
00:05:33,335 --> 00:05:38,465
And this really makes companies
becoming, so if you think about

76
00:05:38,465 --> 00:05:43,205
a tool, a native tool in AWS
RDS performance insights, right?

77
00:05:43,475 --> 00:05:46,930
It gives you visibility
only to one DB instance.

78
00:05:47,150 --> 00:05:51,060
And when you look on one DB instance,
when managing a fleet of 5000

79
00:05:51,070 --> 00:05:55,770
databases, you are by definition
reactive and not proactive, right?

80
00:05:56,030 --> 00:06:00,150
And one of the things we always want to do
when we manage such an important assets,

81
00:06:00,160 --> 00:06:04,370
like such an important asset, like our
databases is to be able to be proactive.

82
00:06:04,530 --> 00:06:09,610
So even when you can find the root cause,
when you have a fleet of databases,

83
00:06:09,910 --> 00:06:11,560
What can you do about it, right?

84
00:06:11,890 --> 00:06:18,521
Sometimes you have legacy code,
you have a a, a low, you have a, a,

85
00:06:18,550 --> 00:06:20,230
you have big r and d organization.

86
00:06:20,480 --> 00:06:25,720
what can you do as an operational
team when you see A CPU or IO

87
00:06:25,720 --> 00:06:27,340
spikes or a problematic query?

88
00:06:27,340 --> 00:06:31,330
In the end of the day, the only
thing you can do is to ship that

89
00:06:31,360 --> 00:06:35,715
to a, To your dev team, right?

90
00:06:35,925 --> 00:06:40,794
So what we believe the ideal
tool, will have, right?

91
00:06:40,795 --> 00:06:43,435
Like, what are the
properties of the ideal tool?

92
00:06:43,444 --> 00:06:52,164
So the three pillars, of modern, Database
a management tool will be observability.

93
00:06:52,344 --> 00:06:56,124
So improving observability across
thousands of instances, improving

94
00:06:56,164 --> 00:07:02,614
resiliency with no code changes
and maintaining a sane coast.

95
00:07:02,844 --> 00:07:03,794
On your database, right?

96
00:07:03,794 --> 00:07:09,234
So, so if you will look on every
AWS or Google cloud bill, RDS

97
00:07:09,234 --> 00:07:12,524
and cloud SQL typically be the
second or the third line item.

98
00:07:12,524 --> 00:07:18,804
So observability, resiliency and cost
are the three legs of this tool when

99
00:07:18,834 --> 00:07:24,924
managing a relational databases in the
cloud and, and missing any of them,

100
00:07:25,184 --> 00:07:27,674
will not get you the results you need.

101
00:07:27,744 --> 00:07:31,204
Now let's, let's dive a bit further into.

102
00:07:31,464 --> 00:07:32,664
into observability, right?

103
00:07:33,074 --> 00:07:36,384
So what is exactly, what is it
exactly that we miss today in

104
00:07:36,384 --> 00:07:38,164
today's world in the existing tools?

105
00:07:38,324 --> 00:07:43,214
So, so first, it's no longer
effective to have a look at each

106
00:07:43,214 --> 00:07:44,634
database individually, right?

107
00:07:44,634 --> 00:07:48,314
We need, we need a solution
that looks across all of our

108
00:07:48,314 --> 00:07:50,614
databases and, and pools.

109
00:07:50,924 --> 00:07:54,984
Pulls all the metric data into a
single consolidated view, right?

110
00:07:55,144 --> 00:07:59,324
So, essentially, you need to see what are
my slowest queries across my entire fleet.

111
00:07:59,704 --> 00:08:05,264
What, which DBs are, we want to see
the top CPU or the highest CPU load

112
00:08:05,294 --> 00:08:07,364
right now across my entire fleet.

113
00:08:07,374 --> 00:08:10,874
We want to see the highest memory IO
consumption across my entire fleet.

114
00:08:11,124 --> 00:08:15,034
we want to set alerts and get notified,
if certain thresholds are hit.

115
00:08:15,284 --> 00:08:16,254
we want to see.

116
00:08:16,769 --> 00:08:19,329
whether we are running out of
database connections, right?

117
00:08:19,329 --> 00:08:21,049
So db connections are limited.

118
00:08:21,299 --> 00:08:26,969
And 500 or 5000 databases, being
able to track where do I have

119
00:08:26,969 --> 00:08:29,549
shortage on connections is very hard.

120
00:08:29,549 --> 00:08:31,249
So this is another
thing we want to manage.

121
00:08:31,469 --> 00:08:36,429
we want to get visibility into table
locks and deadlocks across 5000 of

122
00:08:36,449 --> 00:08:38,279
database, 5000 databases, right?

123
00:08:38,589 --> 00:08:41,549
so, so these, these capabilities these.

124
00:08:41,754 --> 00:08:47,504
Are something you must have when
managing a, a SAS application when

125
00:08:47,514 --> 00:08:49,734
managing databases for SAS application.

126
00:08:49,994 --> 00:08:51,754
the second pillar will be resiliency.

127
00:08:51,754 --> 00:08:52,764
So, so.

128
00:08:53,444 --> 00:09:00,184
The tool that you use must be able
to put guardrails, in place to

129
00:09:00,184 --> 00:09:04,464
protect the databases from those
type of issues cause outage, right?

130
00:09:04,474 --> 00:09:09,664
Like, when your CPU spikes, right, to
100%, you've got to be able to protect

131
00:09:09,664 --> 00:09:11,294
your database from these spikes.

132
00:09:11,504 --> 00:09:15,194
when bad queries are hitting your
database, you've got to be able to respond

133
00:09:15,204 --> 00:09:18,264
fast and, and, and rewrite those queries.

134
00:09:18,434 --> 00:09:23,014
In transit, when bad code is sending
too many queries or too many requests,

135
00:09:23,014 --> 00:09:26,294
the same query over and over to your
database, you've got to be able to to

136
00:09:26,294 --> 00:09:31,874
throttle that or to or to catch that
when you access idle connections.

137
00:09:32,094 --> 00:09:35,584
you get, you get, you get ran out of
connections, you get run over, you

138
00:09:35,584 --> 00:09:37,834
get ran out of availability, right?

139
00:09:37,834 --> 00:09:39,974
So you've got to be able to
protect your database from.

140
00:09:40,199 --> 00:09:45,619
From shortage of connections,
these capabilities must be a,

141
00:09:45,699 --> 00:09:50,479
a, an integral part of of your,
your database fleet, right?

142
00:09:50,489 --> 00:09:51,909
Of managing your databases in the cloud.

143
00:09:51,959 --> 00:09:56,339
Now, on top of that, you
got to be able to not pour.

144
00:09:56,924 --> 00:09:59,914
Tons of money on your
database to do that, right?

145
00:09:59,915 --> 00:10:05,334
So you got to be able to make
sure that your CPU and IO costs

146
00:10:05,364 --> 00:10:06,974
are not going through the roof.

147
00:10:07,004 --> 00:10:13,124
You got to be, you got to have a
capacity, a capacity planned that

148
00:10:13,284 --> 00:10:16,104
will not be based on your CPU spikes.

149
00:10:16,104 --> 00:10:19,164
You got to be able to protect
your database from CPU spikes

150
00:10:19,444 --> 00:10:21,204
that will kill your application.

151
00:10:21,204 --> 00:10:22,484
So, so again.

152
00:10:22,879 --> 00:10:27,089
Resiliency, observability, and
maintaining low costs or same cost in

153
00:10:27,089 --> 00:10:31,289
the database are what you must have
when managing fleet of databases.

154
00:10:31,549 --> 00:10:34,619
So this is guys when I
introduce Rapido to you.

155
00:10:34,629 --> 00:10:39,244
So Rapido is a Platform
that allows company.

156
00:10:39,344 --> 00:10:40,954
It is fully deployed in your VPC.

157
00:10:40,954 --> 00:10:45,974
It allows companies with large
fleet of databases to manage a

158
00:10:46,474 --> 00:10:48,084
managed visibility observability.

159
00:10:48,084 --> 00:10:52,264
So, as you can see, rapid or scout, our
observability platform will connect to

160
00:10:52,274 --> 00:10:56,504
all your Postgres and MySQL databases
and start aggregating data about their

161
00:10:56,504 --> 00:11:00,785
processes about, Infrastructure metrics
like CPU IO memory and consolidate

162
00:11:00,785 --> 00:11:03,115
them in one one pane of glass.

163
00:11:03,625 --> 00:11:08,155
On top of that, we have cortex, which
is our automation layer that allows

164
00:11:08,155 --> 00:11:14,205
companies to offload repetitive queries
from their database via a proxy and

165
00:11:14,205 --> 00:11:16,525
also via the connections that we manage.

166
00:11:16,525 --> 00:11:19,435
So you could you could
deploy caching throttling.

167
00:11:19,665 --> 00:11:23,965
Our query, rewrite a lot of capabilities
in one tool in one platform.

168
00:11:23,975 --> 00:11:29,515
So, so let's now let's now move
to a live demo of Rapido and

169
00:11:29,515 --> 00:11:31,255
see the platform in action.

170
00:11:31,325 --> 00:11:33,935
So guys, this is, this
is the Rapido console.

171
00:11:34,145 --> 00:11:38,265
and as you can see, our master dashboard
will gain, will get you visibility

172
00:11:38,265 --> 00:11:43,265
to the most pressing issue issues
across your entire fleet of databases.

173
00:11:43,555 --> 00:11:47,865
let me move to 48 hours so
we could have more data.

174
00:11:47,865 --> 00:11:48,005
Okay.

175
00:11:48,160 --> 00:11:53,960
and and as you can see, these are the most
pressing issues across my entire database

176
00:11:53,960 --> 00:11:56,280
fleet in the last 48 hours, right?

177
00:11:56,520 --> 00:12:02,200
So we can see the top or the or the
slow or the average query runtime

178
00:12:02,260 --> 00:12:03,600
across my entire fleet, right?

179
00:12:03,600 --> 00:12:06,150
So the average query
runtime is 12 seconds.

180
00:12:06,150 --> 00:12:08,470
But when I drill down,
I can see that I have.

181
00:12:08,690 --> 00:12:14,990
some queries with average runtime of 120
seconds or two minutes, and I have some

182
00:12:14,990 --> 00:12:18,690
queries with sub second or second runtime.

183
00:12:18,950 --> 00:12:22,400
and again, every line item
that you see here is a query

184
00:12:22,420 --> 00:12:26,010
on a database on a DB instance.

185
00:12:26,220 --> 00:12:29,210
On top of that, you will be able
to see the top CPU consumers

186
00:12:29,220 --> 00:12:30,350
across your entire fleet.

187
00:12:30,600 --> 00:12:33,580
You will be able to see a
shortage on connections.

188
00:12:34,130 --> 00:12:37,390
You will be able to see locks and
deadlocks across your entire fleet.

189
00:12:37,745 --> 00:12:38,905
across your entire fleet.

190
00:12:39,065 --> 00:12:44,085
in every column that you see, I just drill
down to my deadlocks, or to my locks view.

191
00:12:44,315 --> 00:12:46,985
and if a group by we love the
group by capability, right?

192
00:12:47,175 --> 00:12:50,855
So if a group by you can easily
see that my postgres database is

193
00:12:50,855 --> 00:12:55,665
by far the most suffering entity
from looks across my entire fleet.

194
00:12:55,665 --> 00:12:59,865
So using rapid, you can actually gain
visibility to postgres and my sequel

195
00:12:59,865 --> 00:13:02,295
instances in one pane of glass, right?

196
00:13:02,465 --> 00:13:04,965
So, My, my postgres database is the first.

197
00:13:04,985 --> 00:13:07,435
All the others are, are my SQL database.

198
00:13:07,485 --> 00:13:10,995
Now I can extend that and I
can see whether I'm facing a

199
00:13:11,015 --> 00:13:13,215
transaction look or metadata look.

200
00:13:13,385 --> 00:13:16,385
I can, I can aggregate
by, the current statement.

201
00:13:16,585 --> 00:13:18,365
So I can see that there are 2 statements.

202
00:13:18,365 --> 00:13:21,505
There is 1 update and 1 select
on my postgres database that

203
00:13:21,565 --> 00:13:22,945
is generating a lot of looks.

204
00:13:23,165 --> 00:13:24,165
at this point I can.

205
00:13:24,435 --> 00:13:28,665
Use Rapido or a engineering
tools to fix that.

206
00:13:28,735 --> 00:13:30,165
That's looking right now.

207
00:13:30,435 --> 00:13:31,695
As you can see here.

208
00:13:31,855 --> 00:13:37,375
we have, we had, we had, we had
a, a CPU reduction on multiple

209
00:13:37,375 --> 00:13:42,925
databases, but we have one database
here that is running on 99 to 100.

210
00:13:43,150 --> 00:13:45,380
CPU utilization most of the time.

211
00:13:45,440 --> 00:13:50,570
Right now, at this point, guys, I can
move to the real time view of Rapido.

212
00:13:50,600 --> 00:13:54,780
And as I mentioned here, you can actually
see a flat list of all your Postgres and

213
00:13:54,780 --> 00:13:57,560
MySQL databases in in one pane of glass.

214
00:13:57,560 --> 00:14:00,630
I can group by again and see
that they have one Postgres

215
00:14:00,630 --> 00:14:02,960
instance and 11 MySQL instances.

216
00:14:03,580 --> 00:14:05,780
And we can see that my demo database here.

217
00:14:05,780 --> 00:14:08,190
It's a MySQL 8 database.

218
00:14:08,440 --> 00:14:08,630
D.

219
00:14:08,630 --> 00:14:08,960
B.

220
00:14:09,000 --> 00:14:11,260
It's gravity on machine extra large.

221
00:14:11,630 --> 00:14:11,960
I'm sorry.

222
00:14:11,970 --> 00:14:16,790
Large with 100 percent CPU and shortage
of database connections, right?

223
00:14:16,790 --> 00:14:18,500
So I have 100.

224
00:14:18,540 --> 00:14:18,910
I'm sorry.

225
00:14:19,090 --> 00:14:24,090
250 connections out of 250
utilized and I have a query of

226
00:14:24,220 --> 00:14:25,450
five minutes on that database.

227
00:14:25,470 --> 00:14:28,850
Now, clicking on that will allow
me to drill down and to see

228
00:14:28,850 --> 00:14:30,280
what is happening in real time.

229
00:14:30,515 --> 00:14:32,065
on that particular database, right?

230
00:14:32,065 --> 00:14:35,535
So you can see that we have a very
repetitive query here, but the great

231
00:14:35,555 --> 00:14:39,655
part is that you can actually see how
the issue started like to compound.

232
00:14:39,885 --> 00:14:46,745
So looking 15 minutes ago and grouping
by again, we love the group by capability

233
00:14:46,745 --> 00:14:51,665
here in Rapido grouping by showing me
that the SQL calc found rows function

234
00:14:51,665 --> 00:14:56,405
from the parents table ran four times in
parallel moving a bit forward in time.

235
00:14:56,620 --> 00:15:02,460
We can see that it spiked to 112, and
a bit further, we are looking at 230.

236
00:15:02,460 --> 00:15:06,250
And if I go back to the live view,
You can actually see that currently

237
00:15:06,250 --> 00:15:12,850
we have 237 queries running right
now with that specific syntax.

238
00:15:13,120 --> 00:15:16,540
Now, using Rapido, I can
actually do stuff, right?

239
00:15:16,540 --> 00:15:19,860
Not only gaining visibility, but
also pull the trigger and kill the

240
00:15:19,860 --> 00:15:21,790
query that is generating the spike.

241
00:15:21,790 --> 00:15:25,940
I know that killing a query is something
that you We'll probably think twice

242
00:15:25,980 --> 00:15:27,830
before you pull the trigger on.

243
00:15:28,030 --> 00:15:32,400
but when you have the ability to do
that, using Rapido will actually, be a

244
00:15:32,400 --> 00:15:35,860
life saver because you could actually
remediate the issue on this boat.

245
00:15:36,140 --> 00:15:40,120
Now, as you can see, I'm killing
the query, but, my application

246
00:15:40,490 --> 00:15:42,160
throw it back again to the database.

247
00:15:42,170 --> 00:15:47,800
So So this is not a very useful solution
to kill the query right there on the spot.

248
00:15:47,900 --> 00:15:52,300
At this point, guys, I want to move
to the automation field of Rapido.

249
00:15:52,350 --> 00:15:56,160
Let me, let me quickly
refresh my page here.

250
00:15:56,160 --> 00:16:00,100
I'm going to, I'm going to go ahead and
log in again to my, to my application.

251
00:16:00,600 --> 00:16:01,620
Let's give it a sec.

252
00:16:02,120 --> 00:16:04,410
Yeah, I guess I loaded
my database too much.

253
00:16:04,910 --> 00:16:08,850
There you are, going down to the
automation field, will show me

254
00:16:09,020 --> 00:16:12,850
the vast amount of rules that
you can deploy using rapid.

255
00:16:12,870 --> 00:16:15,690
So I can go ahead and cache query.

256
00:16:15,900 --> 00:16:19,370
So using rapid, or you could
essentially deploy caching,

257
00:16:19,580 --> 00:16:21,090
using table based invalidation.

258
00:16:21,090 --> 00:16:21,320
So.

259
00:16:21,705 --> 00:16:23,835
I did not copy the query.

260
00:16:23,835 --> 00:16:25,985
Let me go go back to rapid.

261
00:16:25,985 --> 00:16:27,475
Oh, and copy the query again.

262
00:16:27,845 --> 00:16:31,945
so, by the way, as you can see
here, it's dropped and I lost

263
00:16:31,955 --> 00:16:32,975
connection to the database.

264
00:16:32,985 --> 00:16:37,285
So this is why I'm not having data
here, but as you can see, it started

265
00:16:37,285 --> 00:16:41,305
like compounding again, and now the
query amount is growing rapidly.

266
00:16:41,470 --> 00:16:41,660
Right.

267
00:16:41,890 --> 00:16:44,620
So, so at this point, I
just copied the query name.

268
00:16:44,900 --> 00:16:49,010
I'm going back to my caching
rules, and I can go ahead and,

269
00:16:49,590 --> 00:16:50,840
deploy a cash rule, right?

270
00:16:51,100 --> 00:16:54,740
A cash rule can, can be can be
based on a query or a table.

271
00:16:54,740 --> 00:16:56,790
I can catch an entire table or a query.

272
00:16:57,030 --> 00:16:57,780
in this case, I would.

273
00:16:57,870 --> 00:16:59,580
Probably wanna cache these query.

274
00:16:59,850 --> 00:17:02,915
I'm, I'm gonna choose a query
and, and, and look at this.

275
00:17:03,015 --> 00:17:08,030
without us, we are, we are currently
the, only solution, or we enable

276
00:17:08,030 --> 00:17:11,360
you to do something that you are
unable to do without rapido is,

277
00:17:11,360 --> 00:17:13,520
is, is DevOps or, or SRE teams.

278
00:17:13,750 --> 00:17:16,720
and it's to deploy a caching
rule on your own with no.

279
00:17:17,330 --> 00:17:18,550
Business consequences, right?

280
00:17:18,550 --> 00:17:21,860
Because if you use table based
invalidation, we will actually make

281
00:17:21,860 --> 00:17:28,160
sure that the cache data will always
be coherent with your database itself.

282
00:17:28,160 --> 00:17:28,400
Right?

283
00:17:28,620 --> 00:17:32,770
So if I'm going to go ahead and save
that now, I have a query cache that

284
00:17:32,830 --> 00:17:35,020
will essentially offload that query.

285
00:17:35,080 --> 00:17:38,790
Now, that probably won't be the
great solution or the best solution

286
00:17:38,800 --> 00:17:44,340
for this use case because this query
is, he's using current date, and it

287
00:17:44,340 --> 00:17:46,290
essentially changes every nanosecond.

288
00:17:46,290 --> 00:17:46,540
Right?

289
00:17:46,650 --> 00:17:50,540
So, so at this point, I'm moving
to scout rules in scout rules.

290
00:17:50,580 --> 00:17:54,480
I've already prepared a rule
that throttle this query to two.

291
00:17:54,520 --> 00:18:00,200
So it will allow this a sequel called
found rose, To run only two times in

292
00:18:00,200 --> 00:18:02,370
parallel and and look at this, right?

293
00:18:02,400 --> 00:18:05,670
I'm I'm using here a wild
card on the limit, right?

294
00:18:05,670 --> 00:18:07,060
So so it's it's a flat line.

295
00:18:07,100 --> 00:18:10,500
Think about it as a flat line
using the wild card here that

296
00:18:10,510 --> 00:18:14,130
essentially limits that query to
run only two times in parallel.

297
00:18:14,360 --> 00:18:16,140
Now I'm going back to my my sequel.

298
00:18:16,140 --> 00:18:19,110
It remembers the configuration I had.

299
00:18:19,300 --> 00:18:21,300
And as you can see, the
problem compounds again.

300
00:18:21,545 --> 00:18:25,005
But at this point, guys, I'm going to
go ahead and pull the trigger, killing

301
00:18:25,015 --> 00:18:29,915
that process, and within within a few
seconds, you will see that it's gone.

302
00:18:30,265 --> 00:18:34,535
And excuse me, and it's not
going to spike again, right?

303
00:18:34,725 --> 00:18:39,555
So essentially, maintaining a
throttling rule will allow me and

304
00:18:39,555 --> 00:18:40,875
you can already see it's starting.

305
00:18:41,325 --> 00:18:42,225
starting right.

306
00:18:42,295 --> 00:18:47,175
So now I have only two instances of
the simple calc found roles, right?

307
00:18:47,295 --> 00:18:52,485
So my application keeps throwing the
query to the database, but now Rapido will

308
00:18:52,485 --> 00:18:55,685
allow only two execution in power, right?

309
00:18:55,685 --> 00:19:01,495
So you can see it right there going
back from 75 to 46 to 2, right?

310
00:19:01,715 --> 00:19:04,395
So, yes, this is what Rapido is all about.

311
00:19:04,915 --> 00:19:05,495
I hope.

312
00:19:05,735 --> 00:19:07,425
This session was interesting.

313
00:19:07,425 --> 00:19:11,785
I would love to dive further and
show you scout rules and alert rules.

314
00:19:11,785 --> 00:19:17,925
So, so using Rapido, you can essentially
maintain a low footprint of connections.

315
00:19:17,955 --> 00:19:22,265
You can maintain a policies that
will make your database more secure.

316
00:19:22,895 --> 00:19:24,865
Sane, and, and not spiky.

317
00:19:25,025 --> 00:19:30,885
going back to the presentation, feel free
to drop me an email at, mat at rapido io.

318
00:19:31,185 --> 00:19:34,945
I would love to, extend the
conversation and discussion on

319
00:19:34,945 --> 00:19:36,445
relational databases in the cloud.

320
00:19:36,445 --> 00:19:40,465
So even if it's not related to
Rapido, I'm down with any discussion

321
00:19:40,465 --> 00:19:44,335
about databases and I really hope
to meet you guys face to face soon.

322
00:19:44,605 --> 00:19:46,825
So have a great day and take care.

323
00:19:46,975 --> 00:19:47,365
Bye-bye.

