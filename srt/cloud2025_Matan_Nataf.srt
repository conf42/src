1
00:00:00,000 --> 00:00:00,629
Hey guys.

2
00:00:00,629 --> 00:00:01,920
It's nice to see you all again.

3
00:00:02,009 --> 00:00:04,920
My name is Matan Taf,
co-founder CTO of Rapido.

4
00:00:05,460 --> 00:00:09,700
we started Rapido about, three years ago
when we saw companies struggling with

5
00:00:09,700 --> 00:00:12,640
managing fleets of databases on the cloud.

6
00:00:12,939 --> 00:00:16,810
Today we will dive into why
there are so many fleets.

7
00:00:17,169 --> 00:00:18,880
We're not gonna talk about Kubernetes.

8
00:00:18,970 --> 00:00:23,500
We're gonna talk about cloud
in cloud native architectures.

9
00:00:24,000 --> 00:00:28,290
We're gonna talk about the stepson
of every CloudOps organization, the

10
00:00:28,290 --> 00:00:34,110
databases, and why today's way of
managing databases in the cloud.

11
00:00:34,349 --> 00:00:37,530
In micro services cloud
native environment is broken.

12
00:00:38,070 --> 00:00:40,650
So let's dive a little
bit into the problem.

13
00:00:40,650 --> 00:00:43,620
So cloud native and multi-tenant
apps change the way people

14
00:00:43,620 --> 00:00:45,900
are consuming databases Is.

15
00:00:46,599 --> 00:00:48,280
As opposed to what they used to do.

16
00:00:48,700 --> 00:00:54,250
one of the biggest concerns when managing
a multi-tenant app is the noisy neighbor,

17
00:00:54,320 --> 00:00:59,720
issue that could essentially make one
service interfere with another service.

18
00:00:59,790 --> 00:01:04,170
this is why auto scaling and scale
out capabilities are very valuable

19
00:01:04,170 --> 00:01:05,610
in cloud native environments.

20
00:01:05,880 --> 00:01:06,300
And.

21
00:01:07,230 --> 00:01:10,590
The only piece that doesn't
autoscale within the entire

22
00:01:10,590 --> 00:01:12,660
stack is gonna be our databases.

23
00:01:13,080 --> 00:01:17,370
managed services like RDS also
helps organization to shift the.

24
00:01:17,870 --> 00:01:21,020
More responsibilities to developers.

25
00:01:21,020 --> 00:01:24,500
So they write the queries, they use oms.

26
00:01:24,810 --> 00:01:29,790
in many cases the specific dev team
is in charge of managing a specific

27
00:01:29,790 --> 00:01:31,830
database and so on and so forth.

28
00:01:32,190 --> 00:01:34,770
on the other side of the scale,
we still see operational teams,

29
00:01:35,060 --> 00:01:41,490
needing to, take care of databases
and make sure that their uptime.

30
00:01:41,675 --> 00:01:45,125
Cost and performance are
actually going to rock.

31
00:01:45,465 --> 00:01:51,615
and generally creating this situation
where on one hand we have the SRE

32
00:01:51,615 --> 00:01:56,565
team, the CloudOps teams that are
living in a world of minutes, right?

33
00:01:56,565 --> 00:02:01,600
So they need to respond now, they need
to do it, efficiently, and it has to.

34
00:02:01,685 --> 00:02:02,225
Work.

35
00:02:02,354 --> 00:02:03,404
It has to be determined.

36
00:02:03,704 --> 00:02:07,735
So we see that CloudOps teams are
essentially in charge on infrastructure

37
00:02:07,735 --> 00:02:11,515
costs, on, on database SLA, on the
uptime of the database, as I said

38
00:02:11,515 --> 00:02:13,615
before, and on performance, right?

39
00:02:13,615 --> 00:02:15,325
Like when queries are running slow.

40
00:02:15,685 --> 00:02:18,565
The customer facing team will
typically reach out to the cloud

41
00:02:18,565 --> 00:02:19,975
of Gu CloudOps guys, right?

42
00:02:20,284 --> 00:02:24,214
on the other side of the scale, as I
said, we see, developers or dev teams

43
00:02:24,214 --> 00:02:27,904
that are in charge of other things, right?

44
00:02:27,904 --> 00:02:30,844
They need to deliver new
features, they need to work fast.

45
00:02:31,204 --> 00:02:34,285
Um, they need to make sure that
the code, that their code is

46
00:02:34,285 --> 00:02:35,964
running efficiently and so on.

47
00:02:36,355 --> 00:02:37,855
and they have.

48
00:02:38,499 --> 00:02:41,290
Almost 100% of the impact on the database.

49
00:02:41,619 --> 00:02:45,609
So on the one hand, we see these guys that
are living in timeframe of days, right?

50
00:02:45,609 --> 00:02:49,619
Like they always need to wait
to another dev cycles and they

51
00:02:49,619 --> 00:02:50,850
have all the impact, right?

52
00:02:50,850 --> 00:02:52,079
They generate the query.

53
00:02:52,510 --> 00:02:54,369
That will hit your database
in the end of the day.

54
00:02:54,849 --> 00:02:58,569
And on the other side, we have these
guys that typically have to take the

55
00:02:58,569 --> 00:03:03,190
consequences of what these guys are doing,
of what the dev is doing, essentially.

56
00:03:03,579 --> 00:03:05,320
this is a situation which is not healthy.

57
00:03:05,440 --> 00:03:09,695
It makes SRE and CloudOps teams
like not to meet their KPI,

58
00:03:10,114 --> 00:03:11,854
and face a lot of trouble.

59
00:03:12,029 --> 00:03:14,009
Managing databases, right?

60
00:03:14,009 --> 00:03:18,404
so the type of issues that we see that
sre, and cloud ops teams are facing

61
00:03:18,404 --> 00:03:19,904
today, start with visibility, right?

62
00:03:19,954 --> 00:03:23,974
if I am living in a multi-tenant, I manage
a fleet of databases, the first problem

63
00:03:23,974 --> 00:03:28,534
is how do I see what is the most pressing
issues across my fleet of databases?

64
00:03:28,564 --> 00:03:30,694
How do I know where is the slowest query?

65
00:03:30,904 --> 00:03:34,024
How do I know where was
like the latest CPU spike?

66
00:03:34,024 --> 00:03:34,714
Or where do I have.

67
00:03:35,334 --> 00:03:39,415
CPU spikes that are getting close
to the edge and jeopardizing by SLA.

68
00:03:39,774 --> 00:03:44,484
So all these activities when managing
a fleet of databases, are very hard

69
00:03:44,484 --> 00:03:47,334
and by definition, put cloud ops teams.

70
00:03:48,075 --> 00:03:53,295
Being responsive or being reactive
instead of being proactive and

71
00:03:53,415 --> 00:03:56,715
respond and preventive and respond
to issues before they actually

72
00:03:56,715 --> 00:03:58,529
rise and take the database down.

73
00:03:58,799 --> 00:04:03,539
So we see that when managing a fleet
of databases, there are completely

74
00:04:03,539 --> 00:04:07,959
different set of challenges that
CloudOps teams has to manage, especially

75
00:04:07,959 --> 00:04:12,639
when they don't have the DBA skill
sitting within their teams typically.

76
00:04:12,879 --> 00:04:14,829
And even if they do, it's not easy.

77
00:04:15,409 --> 00:04:19,939
This is why we built a
platform addressing this.

78
00:04:20,679 --> 00:04:25,629
Operational problem that CloudOps
teams have when managing a fleet of

79
00:04:25,629 --> 00:04:29,799
databases, which always impact the
business in various ways, it's gonna

80
00:04:29,799 --> 00:04:33,429
impact your business, in performance
of your application on SLA of your

81
00:04:33,429 --> 00:04:35,309
application, on your AWS bill.

82
00:04:35,519 --> 00:04:40,499
So all these KPIs are actually
something that RAPIDO can solve

83
00:04:40,559 --> 00:04:44,609
for you, and we address directly
that operational challenge.

84
00:04:45,109 --> 00:04:49,419
In a nutshell, you would like your,
ideal tool, to be able to gain

85
00:04:49,419 --> 00:04:51,609
observability across multiple instances.

86
00:04:51,609 --> 00:04:54,159
There are some tools that
do that in the world, right?

87
00:04:54,159 --> 00:04:58,324
They, you have Datadog, DBM, you have,
SolarWinds, you have, I know that New

88
00:04:58,324 --> 00:05:01,824
Relic released recently a new tool
for managing a fleet of databases.

89
00:05:02,184 --> 00:05:05,004
All these tools are in
charge of one thing.

90
00:05:05,004 --> 00:05:07,919
They do only one thing, and that gives
you, it's to give you observability.

91
00:05:08,419 --> 00:05:11,479
The other things that you would
like, the platform that manages your

92
00:05:11,479 --> 00:05:14,629
databases to have is automation.

93
00:05:14,659 --> 00:05:20,179
You want the ability to cache queries to
protect your database from CPU spikes to,

94
00:05:20,529 --> 00:05:25,564
accelerate slow queries to, optimize the
underlying infrastructure cost, right?

95
00:05:25,664 --> 00:05:29,974
so above and beyond anything,
improve resiliency and improve.

96
00:05:30,695 --> 00:05:33,304
The underlying costs, The automation.

97
00:05:33,694 --> 00:05:36,844
So Rapido is the only tool
in the world that does that.

98
00:05:37,084 --> 00:05:42,004
And today, I'm gonna show you a live
demo of how it actually works in action.

99
00:05:42,304 --> 00:05:46,084
What you can see here is a CPU graph
of one of our biggest customers.

100
00:05:46,394 --> 00:05:50,644
they had, couple of hundreds
of RDS instances in that

101
00:05:50,644 --> 00:05:52,544
size, various sizes, but.

102
00:05:52,839 --> 00:05:57,129
By and large eight Excel, which they
grew all the way up to that, right?

103
00:05:57,129 --> 00:05:58,629
So they started like one Excel.

104
00:05:58,869 --> 00:06:01,719
They had C-P-U-C-P-U Spike, CPU.

105
00:06:01,719 --> 00:06:02,769
Spike is emergency.

106
00:06:03,219 --> 00:06:06,499
They go ahead, they increase the
infrastructure, the underlying database.

107
00:06:06,919 --> 00:06:08,989
They hit the roof again,
they increase it again.

108
00:06:09,349 --> 00:06:11,239
And always in twofold, right?

109
00:06:11,239 --> 00:06:15,924
Like when you work with RDS, you gotta
increase your infrastructure by, by 100%.

110
00:06:15,924 --> 00:06:17,684
Like any scale up, here.

111
00:06:18,215 --> 00:06:19,924
What happened when they
started to use Rapido?

112
00:06:19,924 --> 00:06:24,965
So with that emergency, they inserted
RAPIDO to their R five eight XL instance.

113
00:06:24,965 --> 00:06:28,945
It was exactly three or four
months ago, last December.

114
00:06:29,224 --> 00:06:33,094
and as you can see, only by
inserting Rapido with couple of

115
00:06:33,094 --> 00:06:40,225
rules, the CPU baseline dropped
from 60 to 100% to 20 to 30%.

116
00:06:40,275 --> 00:06:42,045
so they really.

117
00:06:42,315 --> 00:06:46,965
Moved away from the danger zone,
from the area where something can

118
00:06:47,055 --> 00:06:48,375
get wrong with the replication.

119
00:06:48,725 --> 00:06:52,505
at this point you can see that they
decided to shrink 30 DB instance.

120
00:06:52,505 --> 00:06:59,415
And as you can see, the baseline went a
bit up, from 20 to 30 to flat 30 maybe.

121
00:06:59,745 --> 00:07:01,875
they started like to shrink it again.

122
00:07:02,125 --> 00:07:05,655
and then you can easily see
that, the baseline grew.

123
00:07:05,835 --> 00:07:12,345
But even when they were 75% smaller,
I. Then day one or when, day one, when

124
00:07:12,615 --> 00:07:16,535
Rapido got in, you can see, you can still
see that they didn't even reach the 50%,

125
00:07:16,835 --> 00:07:20,795
they didn't shrink it one notch further
because it was not that significant.

126
00:07:20,845 --> 00:07:24,135
like once you, you reduce
75%, you are very happy.

127
00:07:24,385 --> 00:07:27,475
and they saved like in total
more than half a million dollars

128
00:07:27,475 --> 00:07:30,235
per month on compute of RDS.

129
00:07:31,005 --> 00:07:32,775
How exactly that magic happened.

130
00:07:32,895 --> 00:07:34,335
Let's move and see Rapido in action.

131
00:07:34,755 --> 00:07:37,335
Okay guys, so this is the Rapido
console, as you can see it.

132
00:07:37,335 --> 00:07:39,015
Here we have the master dashboard.

133
00:07:39,285 --> 00:07:43,605
As I told you, Rapido master dashboard
will always be focused on showing

134
00:07:43,605 --> 00:07:46,995
you the most pressing issues across
your entire fleet of databases.

135
00:07:47,295 --> 00:07:51,045
So I will see the average query
time across all my databases.

136
00:07:51,045 --> 00:07:54,525
I can always drill down
sort by average duration.

137
00:07:55,025 --> 00:07:59,310
I can see that every line item here
is essentially, the average query

138
00:07:59,310 --> 00:08:04,440
runtime on each database or on
each schema, if you're using my SQL

139
00:08:04,440 --> 00:08:06,715
terminology on, a DB instance, right?

140
00:08:07,035 --> 00:08:12,434
so you can easily see that my demo DB
is by far the most, low or the slowest.

141
00:08:12,869 --> 00:08:14,309
Database in my fleet.

142
00:08:14,720 --> 00:08:17,419
I can drill down and
see a specific queries.

143
00:08:17,480 --> 00:08:21,020
So if I'm gonna sort that by max
duration or, you know what, by

144
00:08:21,230 --> 00:08:26,030
count you can actually see what
is the query that is generating

145
00:08:26,030 --> 00:08:28,070
most of the stress on my database.

146
00:08:28,120 --> 00:08:32,850
So you can see that my demo DB on database
classic models, I'm sorry, on database.

147
00:08:33,350 --> 00:08:34,610
It's already again by Max.

148
00:08:35,020 --> 00:08:39,730
you can see that my demo DB on
database demo actually has a query

149
00:08:39,730 --> 00:08:42,520
that is running for 333 seconds.

150
00:08:42,730 --> 00:08:47,215
Sometimes you cran on one second so we
can actually see that there is like a.

151
00:08:47,710 --> 00:08:49,030
Parallelism issue.

152
00:08:49,300 --> 00:08:52,960
You can see that the query is
select sql calc found Rose.

153
00:08:52,960 --> 00:08:56,740
So this is like a calculation
query, that is taking time, right?

154
00:08:56,740 --> 00:08:59,380
So again, I'm looking
from the bird eye view.

155
00:08:59,470 --> 00:09:03,160
I dive in and see the specific
query on the specific instance

156
00:09:03,160 --> 00:09:06,400
on the specific database that
actually generated all the stress.

157
00:09:06,700 --> 00:09:09,400
You can do the same trick
with locks and blocks, right?

158
00:09:09,450 --> 00:09:12,450
any lock that took place on
my database, you can see here

159
00:09:12,450 --> 00:09:13,800
flat list of all the locks.

160
00:09:14,045 --> 00:09:18,425
When I group by, you can see that
this Postgres database is the one

161
00:09:18,425 --> 00:09:20,285
with the highest amount of locks.

162
00:09:20,605 --> 00:09:26,425
when I go again in group by a locking
thread, you could actually see which

163
00:09:26,515 --> 00:09:30,235
query is generating most of the locks,
and you can see that's a specific

164
00:09:30,235 --> 00:09:33,985
update that is generating most of the
locks across all my database fleet.

165
00:09:33,985 --> 00:09:35,035
So again.

166
00:09:35,120 --> 00:09:39,290
The whole notion is go from the bird eye
view, dive in and see what is the root

167
00:09:39,290 --> 00:09:41,150
cause or what is the most pressing issues.

168
00:09:41,420 --> 00:09:43,790
This morning on my database,
everything you see here is in

169
00:09:43,790 --> 00:09:45,585
context is in context of 12 hours.

170
00:09:45,585 --> 00:09:47,835
I can go and look on 48
or three or whatever.

171
00:09:48,405 --> 00:09:51,820
and as you can see, there is like a
stubborn server here, like out of my.

172
00:09:52,210 --> 00:09:53,170
Entire fleet.

173
00:09:53,320 --> 00:09:55,090
There is one database story.

174
00:09:55,090 --> 00:09:56,290
Let's go back here.

175
00:09:56,530 --> 00:09:59,140
There is one database
here, it's called Demo db.

176
00:09:59,140 --> 00:10:02,050
You can see that it's constantly,
not constantly, but at least for the

177
00:10:02,050 --> 00:10:06,520
last few hours, it ran on 99% CPU.

178
00:10:06,610 --> 00:10:09,010
So we have a CPU spike on that database.

179
00:10:09,370 --> 00:10:14,260
and at this point we wanna
go from a historical view.

180
00:10:14,325 --> 00:10:16,245
To a real time view.

181
00:10:16,575 --> 00:10:19,395
So here I can just navigate
to my instances view.

182
00:10:19,605 --> 00:10:21,075
I can sort by CPU.

183
00:10:21,645 --> 00:10:26,655
And as you can see, dev DB here
is still on 100% CPU utilization.

184
00:10:26,955 --> 00:10:27,255
By the way.

185
00:10:27,255 --> 00:10:30,495
The great thing here, you can
manage Postgres MySQL instances

186
00:10:30,495 --> 00:10:32,355
in the very same pane of glass.

187
00:10:32,655 --> 00:10:35,235
you can see that we have queries
running here two minutes, right?

188
00:10:35,235 --> 00:10:39,555
So it's not only high CPU, but
there are actually performance

189
00:10:39,555 --> 00:10:41,445
issues on that specific box.

190
00:10:41,705 --> 00:10:42,425
I can click.

191
00:10:43,215 --> 00:10:46,965
Drill down and see what is
happening on that specific

192
00:10:46,965 --> 00:10:48,645
database in real time, guys, right?

193
00:10:48,835 --> 00:10:50,815
so this is like refreshing
every three seconds.

194
00:10:50,815 --> 00:10:54,615
Obviously it's modifiable, but currently
it's, refreshed every three seconds.

195
00:10:54,825 --> 00:10:59,055
If I stop grouping by, you actually see
a flat list of all the queries running

196
00:10:59,055 --> 00:11:00,855
on that box right now in real time.

197
00:11:00,855 --> 00:11:02,385
We see like queries of two minutes.

198
00:11:02,655 --> 00:11:04,365
We see query of 1 56.

199
00:11:04,585 --> 00:11:05,845
so we see some issues here.

200
00:11:05,965 --> 00:11:09,215
If I group by again, you can
easily see that it's one query.

201
00:11:09,540 --> 00:11:13,440
That is generating most of the stress
or two queries that are generating

202
00:11:13,440 --> 00:11:14,850
most of the stress on my database.

203
00:11:15,210 --> 00:11:17,670
And, I wanna do something about it, right?

204
00:11:17,720 --> 00:11:22,620
so if I look on that select star, I
can actually see that it's running, but

205
00:11:22,620 --> 00:11:24,870
it's not like the slowest thing, right?

206
00:11:24,870 --> 00:11:25,980
It's not very slow.

207
00:11:26,340 --> 00:11:30,000
On the other hand, the cow
crows are actually what is.

208
00:11:30,680 --> 00:11:34,910
My database, as you can see here, like
at the top, you can, one of the great

209
00:11:34,910 --> 00:11:40,505
things, about Rapid and typically, when
you, explore, performance issues, you

210
00:11:40,505 --> 00:11:43,855
really are, you are really interested, to
see what happened, One hour ago, right?

211
00:11:43,855 --> 00:11:44,755
Or two hours ago.

212
00:11:44,805 --> 00:11:49,005
so using that tool, I can easily go
and navigate back in time and see

213
00:11:49,005 --> 00:11:51,415
what happened one hour, two hours ago.

214
00:11:51,685 --> 00:11:53,545
And I can always go back to life, right?

215
00:11:53,785 --> 00:11:57,895
So if I go back to life, I can
literally select the problem.

216
00:11:57,895 --> 00:12:01,165
You can see with your bare eye
how the problem start, how the

217
00:12:01,165 --> 00:12:02,545
problems started to compound here.

218
00:12:02,935 --> 00:12:08,145
And I can go and look second by
second and keep the, The group by.

219
00:12:08,955 --> 00:12:11,565
And as you can see here, we
had four executions of that.

220
00:12:11,565 --> 00:12:13,185
We in one execution of the select.

221
00:12:13,915 --> 00:12:16,675
if I go five minutes
ahead, we 19 executions.

222
00:12:17,035 --> 00:12:17,066
I go.

223
00:12:17,560 --> 00:12:18,400
Few minutes ahead.

224
00:12:18,830 --> 00:12:23,990
you can see that we have 50, 50 or
47 executions, and then I had 50

225
00:12:23,990 --> 00:12:25,250
executions and so on and so forth.

226
00:12:25,250 --> 00:12:30,200
So you can easily see how the problem
started, like to compound on my database

227
00:12:30,260 --> 00:12:33,920
and build, a real issue here right now.

228
00:12:34,190 --> 00:12:40,540
One of the things that I can do is go
back to real time, pull the trigger.

229
00:12:41,040 --> 00:12:45,150
Kill the query that is generating
the stress on my database from the

230
00:12:45,150 --> 00:12:48,930
very same spot that I had the idea
that something is wrong, right?

231
00:12:49,170 --> 00:12:52,920
So you can easily see how it's
gradually going back to 50 14,

232
00:12:53,300 --> 00:12:54,440
but it'll spike back again.

233
00:12:54,440 --> 00:12:57,350
I know my app, this application
is throwing that query on

234
00:12:57,350 --> 00:12:58,580
my database over and over.

235
00:12:58,830 --> 00:13:02,910
so you can see it's growing back to
16 and 19 and so on and so forth.

236
00:13:03,240 --> 00:13:04,410
So what I wanna do.

237
00:13:04,670 --> 00:13:06,620
Now is to be preventive.

238
00:13:06,710 --> 00:13:11,190
I wanna make sure that issue
is not going to interfere.

239
00:13:11,490 --> 00:13:13,230
I still, and I still see the select star.

240
00:13:13,230 --> 00:13:17,130
I don't like that select star, but we have
like more urgent issues to take care of.

241
00:13:17,130 --> 00:13:19,590
And that's the select SQL Cal found Rose.

242
00:13:19,830 --> 00:13:25,530
So what I'm gonna do now, I can
copy that query text and I can

243
00:13:25,530 --> 00:13:26,910
go to the world of automation.

244
00:13:27,120 --> 00:13:27,930
And guys, this is where.

245
00:13:28,430 --> 00:13:29,870
Any other product in the world, right?

246
00:13:30,110 --> 00:13:32,360
So we show you what's
happening on your database.

247
00:13:32,360 --> 00:13:34,370
We know that you are operational team.

248
00:13:34,370 --> 00:13:38,390
You don't have time to, f around,
yeah, sorry about my French, but

249
00:13:38,630 --> 00:13:40,600
you don't have time to, to f around.

250
00:13:40,600 --> 00:13:43,660
And then what you really have
to do is to solve the issue.

251
00:13:43,690 --> 00:13:46,060
You have to address the
issue right away, right?

252
00:13:46,420 --> 00:13:49,420
So this is where you can see like
the cortex rules and the ability

253
00:13:49,460 --> 00:13:50,780
to deploy preventive rules.

254
00:13:51,020 --> 00:13:54,170
What I wanna do is to limit that query.

255
00:13:54,670 --> 00:13:55,210
Right there.

256
00:13:55,260 --> 00:13:59,180
So this is the name of the
rule, and I can now look on

257
00:13:59,240 --> 00:14:00,950
multiple ways, multiple triggers.

258
00:14:00,950 --> 00:14:04,060
So we have a rule engine here,
rule-based engine that can

259
00:14:04,060 --> 00:14:05,020
do all kind of things, right?

260
00:14:05,020 --> 00:14:08,560
I can look on a query pattern
and I can say whenever someone

261
00:14:08,560 --> 00:14:10,480
is doing a. That query.

262
00:14:10,750 --> 00:14:13,450
Or as a matter of fact, I
don't care about the limit.

263
00:14:13,450 --> 00:14:14,860
I use a wild card here.

264
00:14:15,270 --> 00:14:16,710
I don't care about the table.

265
00:14:16,740 --> 00:14:20,850
So whenever someone is doing
select SQL caulk found row, I

266
00:14:20,850 --> 00:14:22,890
wanna trigger an action, right?

267
00:14:23,160 --> 00:14:28,065
So I'm gonna call the rule limit
SQL caulk found row right now.

268
00:14:28,815 --> 00:14:31,695
I can do it on a specific time of the day.

269
00:14:31,815 --> 00:14:33,555
I can do it 24 7.

270
00:14:33,555 --> 00:14:34,635
Let's keep it 24 7.

271
00:14:34,685 --> 00:14:39,920
and what do I wanna do when that,
sorry, I. Oh, I lost my text.

272
00:14:39,970 --> 00:14:41,170
let me grab that again.

273
00:14:41,620 --> 00:14:42,610
It's still running.

274
00:14:43,300 --> 00:14:43,900
Sure enough.

275
00:14:44,650 --> 00:14:45,650
I'm gonna grab that.

276
00:14:46,130 --> 00:14:49,000
Gonna go back, build a
new rule query pattern.

277
00:14:49,500 --> 00:14:51,685
gonna use wild card on
the limit and on the.

278
00:14:52,185 --> 00:14:52,815
You know what?

279
00:14:53,115 --> 00:14:54,225
Let's forget about the limit.

280
00:14:54,285 --> 00:14:58,125
Like anything, anyone that does
electrical cal, I don't care

281
00:14:58,125 --> 00:14:59,565
if it does limit or not, right?

282
00:14:59,895 --> 00:15:05,235
so I wanna go whenever it's like
that, I wanna go and block it, right?

283
00:15:05,235 --> 00:15:08,145
So when I do block,
this query will not run.

284
00:15:08,415 --> 00:15:11,625
I can block it only on
certain times of the day.

285
00:15:11,925 --> 00:15:14,715
Block it between 7:00 AM and.

286
00:15:15,630 --> 00:15:19,380
6:00 PM or 4:00 PM I can do
it only on weekdays, right?

287
00:15:19,380 --> 00:15:23,250
So if it's like some kind of
a mambo jumbo, oap, analytics

288
00:15:23,250 --> 00:15:24,600
query, I can allow it.

289
00:15:24,690 --> 00:15:26,950
Do it on weekends, during do
it in the middle of the night.

290
00:15:26,950 --> 00:15:28,390
Don't interfere with my business.

291
00:15:28,390 --> 00:15:29,890
This is an o TP database, right?

292
00:15:30,125 --> 00:15:35,620
eh, I can be a bit more, Gentle and I
can say rate limit or throttle, right?

293
00:15:35,670 --> 00:15:37,890
so in that case, let's choose throttle.

294
00:15:38,280 --> 00:15:40,650
eh, let's give this real name limit,

295
00:15:41,150 --> 00:15:41,600
Dave.

296
00:15:42,020 --> 00:15:43,940
Limit steep cock farm grows.

297
00:15:44,030 --> 00:15:45,140
I'm gonna save that guy.

298
00:15:45,640 --> 00:15:47,350
Now it's active between.

299
00:15:48,205 --> 00:15:49,495
We're not in the right time.

300
00:15:49,495 --> 00:15:52,885
So let's enable a rule that I prepared
before and let's disable this guy.

301
00:15:53,365 --> 00:15:56,035
And now guys, I'm gonna go
back to my database, right?

302
00:15:56,035 --> 00:15:58,375
So demo DB still a hundred percent CPU.

303
00:15:58,615 --> 00:15:59,455
I'm gonna drill down.

304
00:15:59,815 --> 00:16:01,225
I'm gonna select that query.

305
00:16:01,725 --> 00:16:06,050
I'm gonna move that message, kill that
query, and let's see what happens.

306
00:16:06,050 --> 00:16:06,350
Now.

307
00:16:06,410 --> 00:16:12,040
Now what I expect to see is that
my database will go back to a low.

308
00:16:12,760 --> 00:16:13,780
Execution amount.

309
00:16:14,410 --> 00:16:18,610
And as you can see, sure enough, it's
running two times in parallel, right?

310
00:16:19,180 --> 00:16:21,880
We have various rules that
you can deploy with Rapido.

311
00:16:21,940 --> 00:16:23,080
Some of it I showed you here.

312
00:16:23,080 --> 00:16:29,210
Some of them are related to controlling
database connections, limiting users.

313
00:16:29,260 --> 00:16:30,430
Limiting tenants.

314
00:16:30,670 --> 00:16:35,590
So you have all kind of activities that
you can do with rapido to mitigate stress.

315
00:16:35,830 --> 00:16:40,880
I can for instance, take that nasty query,
I told you that I don't like that query.

316
00:16:41,240 --> 00:16:44,030
So I can take that query
and say, you know what?

317
00:16:44,240 --> 00:16:46,540
If that's what you
execute, let's cache it.

318
00:16:46,610 --> 00:16:50,810
So using rapido, you can
say Cache that query, right?

319
00:16:51,290 --> 00:16:52,370
I didn't select text.

320
00:16:53,120 --> 00:16:53,600
with me.

321
00:16:54,100 --> 00:16:56,400
Let me copy the text here.

322
00:16:56,900 --> 00:16:58,069
I go to automation.

323
00:16:58,279 --> 00:16:59,799
I go to add a new rule.

324
00:17:00,299 --> 00:17:02,654
Query, query whenever
that query takes place.

325
00:17:03,014 --> 00:17:04,424
use the table based invalidation.

326
00:17:04,424 --> 00:17:08,834
Table based invalidation means
that whenever someone is going to

327
00:17:08,834 --> 00:17:13,874
update the versions table, I will
go and invalidate my cache and make

328
00:17:13,874 --> 00:17:18,374
sure that the data in the cache is
coherent with what's really going on.

329
00:17:18,474 --> 00:17:19,639
So guys, this is.

330
00:17:20,139 --> 00:17:21,759
In a natural, what Rado is all about.

331
00:17:22,059 --> 00:17:25,539
I encourage you to hit me
and ask questions over email,

332
00:17:25,539 --> 00:17:27,769
over Slack, over, LinkedIn.

333
00:17:27,829 --> 00:17:29,209
I'm available in all medias.

334
00:17:29,629 --> 00:17:34,099
I look forward to get your
questions, sending you warm

335
00:17:34,099 --> 00:17:35,809
wishes from New York City.

336
00:17:36,169 --> 00:17:36,619
Take care.

337
00:17:36,619 --> 00:17:36,979
Bye-bye.

