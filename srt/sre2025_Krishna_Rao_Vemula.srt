1
00:00:00,500 --> 00:00:01,190
Hello.

2
00:00:01,690 --> 00:00:05,879
So we are going to talk about
innovative tools to supercharge

3
00:00:05,879 --> 00:00:07,559
your Spring boot applications.

4
00:00:08,059 --> 00:00:13,254
So here so the Spring boot, it is a, the
revolutionary Java application development

5
00:00:13,765 --> 00:00:18,854
because nowadays most of the enterprise
developers are going to use this spring

6
00:00:18,854 --> 00:00:25,754
boot applications because this is the, and
the more most vis framework and so here we

7
00:00:25,754 --> 00:00:30,944
are going to examine tools that how to set
up the project and how to eliminate the

8
00:00:31,064 --> 00:00:37,054
boil bread code and improve the monitoring
and solving the development challenges.

9
00:00:37,504 --> 00:00:39,864
And we'll go by one each tools, whatever.

10
00:00:39,909 --> 00:00:41,049
We use that.

11
00:00:41,549 --> 00:00:43,729
So first of all, here the spring install.

12
00:00:44,509 --> 00:00:46,849
So how are you going
to start your project?

13
00:00:47,389 --> 00:00:54,290
So the easy way is like you have a Spring
dot Ivo install website that like you can

14
00:00:54,290 --> 00:00:57,085
start you can create a. Your new project.

15
00:00:57,684 --> 00:01:01,045
So there you can get all the dependencies
which are needed, like all the

16
00:01:01,045 --> 00:01:05,625
starters, like a Tomcat starters or
spin data, GPS starters, and you'll

17
00:01:05,625 --> 00:01:07,095
be whatever the starters you need.

18
00:01:07,095 --> 00:01:09,165
So you'll get all the starters from there.

19
00:01:09,585 --> 00:01:14,740
And, you can pick the packages however you
want dot jar and however you want there

20
00:01:15,020 --> 00:01:17,660
in the spring dot I, so you can see that.

21
00:01:18,380 --> 00:01:21,830
And after that you can download the
project and wherever you want to

22
00:01:21,830 --> 00:01:24,320
use that, any id you can use that.

23
00:01:24,820 --> 00:01:27,800
So this is how these
springboard start our projects.

24
00:01:27,850 --> 00:01:29,330
And mainly the dev tools.

25
00:01:29,830 --> 00:01:36,859
So how the the dev tools will help on
our development cycles because here

26
00:01:36,919 --> 00:01:41,659
the dev tool, dev tools mainly, so what
will happens, it'll monitor your class

27
00:01:41,659 --> 00:01:43,669
path whenever you made any changes.

28
00:01:43,699 --> 00:01:48,824
So automatically it'll repress your class
files and it'll be reflecting with your

29
00:01:48,824 --> 00:01:50,635
latest code whenever you start the server.

30
00:01:51,134 --> 00:01:53,804
And the reloading so
what's happening here?

31
00:01:53,865 --> 00:01:58,335
So whenever you make changes on the front
end, so the browser, which automatically

32
00:01:58,335 --> 00:02:03,175
will be uploaded with the latest changes,
and it'll reflect into the backend and

33
00:02:03,425 --> 00:02:05,745
the property defaults here at say here.

34
00:02:05,915 --> 00:02:10,125
We can say we have the many properties
like application de and application like

35
00:02:10,125 --> 00:02:14,345
SIT and you have application data, pro
different properties is there, and so we

36
00:02:14,345 --> 00:02:16,295
can use the properties wherever you want.

37
00:02:16,295 --> 00:02:20,115
Get it based on the, at the rate value
properties which is there in the which

38
00:02:20,115 --> 00:02:21,525
is there in the fingerprint work.

39
00:02:22,025 --> 00:02:27,145
And next we are going to do that
how the Spring Boot interacting

40
00:02:27,145 --> 00:02:28,525
with the docker containers.

41
00:02:29,025 --> 00:02:32,795
So basically here we have how the
self contain applications will

42
00:02:32,795 --> 00:02:36,305
work and simplified the Docker
file and can consistency across

43
00:02:36,305 --> 00:02:40,235
environments and spring boot profiles,
we're going to code that in this.

44
00:02:41,015 --> 00:02:43,345
So basically the self
content applications.

45
00:02:43,345 --> 00:02:44,845
So what happens means.

46
00:02:45,345 --> 00:02:49,875
So when you create these general
applications so it'll include the Unbred

47
00:02:49,875 --> 00:02:51,945
server and Tomcat, like kind of the jets.

48
00:02:52,485 --> 00:02:56,945
So all the necessary like a jar or
wire file will be will be replaced.

49
00:02:57,075 --> 00:02:58,845
Will be going to add into that.

50
00:02:59,105 --> 00:03:05,485
And the simpler docker files here from,
so what happens here when they open JDK?

51
00:03:05,785 --> 00:03:09,865
If you have the open JDK there, we
are going to replace our jar into the

52
00:03:09,865 --> 00:03:14,185
path and we can tell two documents.

53
00:03:14,245 --> 00:03:18,605
So where we are keeping our jar
file in the specific locations.

54
00:03:18,905 --> 00:03:22,625
So the docker will be going to
take that the wall and we will be

55
00:03:22,625 --> 00:03:26,160
going to start your applications
based on your configurations.

56
00:03:26,660 --> 00:03:32,239
And the con and consistency across
environments like so here, the dockets

57
00:03:32,519 --> 00:03:36,800
it'll help you to run on your local
environment can be run CADC with

58
00:03:36,800 --> 00:03:40,920
the CAD CD pipelines and testing
environments and products and servers.

59
00:03:41,200 --> 00:03:45,760
It'll run on the different in months where
like wherever you or you install that.

60
00:03:46,260 --> 00:03:48,960
And finally the springboard
profiles and dockets.

61
00:03:49,590 --> 00:03:52,230
So basically this profiles,
so you are going to use that.

62
00:03:52,730 --> 00:03:55,850
So whenever you want, so
let's say you have a different

63
00:03:55,850 --> 00:03:58,889
environments SAT environment and
dev environment and productions.

64
00:03:59,009 --> 00:04:01,920
So you have a different the
properties based on the ment.

65
00:04:01,950 --> 00:04:06,699
So if you are using the profiles, so
based on the profile the profile name,

66
00:04:06,699 --> 00:04:12,309
it's Dev, SATR, the products in the
prop, the propel name, it'll take the

67
00:04:12,309 --> 00:04:16,974
respective property and will be it'll
be placed into the the in the, into the

68
00:04:16,974 --> 00:04:21,454
respective docker image and docker the
respective job file, wherever you need it.

69
00:04:21,954 --> 00:04:23,604
So the next is.

70
00:04:24,104 --> 00:04:29,644
How the spring boot aware of your
intelligent, like kind of the ads here.

71
00:04:29,644 --> 00:04:31,924
I'm going to tell about
how the intelligent.

72
00:04:32,424 --> 00:04:37,085
So basically here so the in inte
will help you to the like kind of

73
00:04:37,085 --> 00:04:39,034
the automatic suggestions, the code.

74
00:04:39,135 --> 00:04:42,175
So whenever you write the codes,
so it'll help you the some

75
00:04:42,175 --> 00:04:44,384
code snip at and for debugging.

76
00:04:44,384 --> 00:04:46,155
So the spring boot applications.

77
00:04:46,184 --> 00:04:48,704
So it's usually you can
debug the applications.

78
00:04:48,759 --> 00:04:52,089
And if you want to run
the any, your test cases.

79
00:04:52,189 --> 00:04:56,779
So the, so it's like you can do that
like method level or, like kind of

80
00:04:56,779 --> 00:04:58,889
the class level wherever you want.

81
00:04:58,889 --> 00:05:02,099
You can in the, in this, in the
intelligence, you can do that.

82
00:05:02,599 --> 00:05:06,869
And basically here, in
this, in the inte id.

83
00:05:07,199 --> 00:05:12,779
So this is a user friendly id and
whenever you trying to write the code

84
00:05:12,929 --> 00:05:15,099
and it'll help you that where you are.

85
00:05:15,809 --> 00:05:19,379
Where you are calling that method
and where you are going to call that

86
00:05:19,379 --> 00:05:20,909
means, so it'll help you on that.

87
00:05:21,599 --> 00:05:22,889
This is the spring.

88
00:05:22,889 --> 00:05:26,219
Like Springboard is helping
for the intelligent id.

89
00:05:26,719 --> 00:05:31,179
And when it comes to the eliminate
boiler plate code, so basically here

90
00:05:31,249 --> 00:05:33,019
the boiler plate code is nothing bad.

91
00:05:33,109 --> 00:05:35,534
So let's say like you are
writing some poster classes.

92
00:05:36,239 --> 00:05:40,549
So in the project classes you are, so
you have to write many set and get it and

93
00:05:40,549 --> 00:05:44,809
like kind of the two stringing methods
and the yes score and equals method.

94
00:05:45,439 --> 00:05:50,209
So this like the spring boot will help
you to reduce all the barrel plate code.

95
00:05:50,614 --> 00:05:53,794
So with the help up there is a
feature there is a there is annotation

96
00:05:53,794 --> 00:05:58,494
called and get its, and no augments
are like now nowadays we have the

97
00:05:58,494 --> 00:06:00,724
data data, which is one annotations.

98
00:06:00,784 --> 00:06:04,604
We, it'll help you to it, it
reduce the, your boiler bread code.

99
00:06:04,904 --> 00:06:09,384
This bottle pit code, mainly in the
runtime you won't get many pin pits.

100
00:06:09,444 --> 00:06:14,354
So when only the developer perspective,
you'll get the less code, I mean I can say

101
00:06:14,354 --> 00:06:19,514
you can, the code will be reduced and the
button on the developers will be reduced.

102
00:06:19,574 --> 00:06:22,834
So that is the main object on the
eliminating the boil pit code.

103
00:06:23,334 --> 00:06:28,984
And how the Spring Boot interacting
with the, integrating with the

104
00:06:29,014 --> 00:06:30,634
microservices architectures.

105
00:06:31,134 --> 00:06:36,374
So basically here, the spring boot mainly
you know how it'll start the Spring boot?

106
00:06:36,434 --> 00:06:41,024
Basically like there is a one
spring boot main applications.

107
00:06:41,544 --> 00:06:44,124
Which will help you to
start your applications.

108
00:06:44,334 --> 00:06:47,094
So what will be there in the
spring boot main applications?

109
00:06:47,124 --> 00:06:50,754
So there is a the static main
method will be there, which is,

110
00:06:50,864 --> 00:06:55,264
which is going to load all the
classes under the the same package,

111
00:06:55,864 --> 00:06:57,894
what you define in the main class.

112
00:06:58,344 --> 00:07:00,834
So how it'll be going to start that.

113
00:07:00,834 --> 00:07:04,765
So there is a there is annotation call
at the Red Spring boot applications.

114
00:07:05,470 --> 00:07:11,090
So that will help you to load all your
classes, which you are created, which

115
00:07:11,090 --> 00:07:13,070
you are developed under the same package.

116
00:07:13,340 --> 00:07:17,195
So it'll be loaded run times
whenever you start your servers.

117
00:07:17,485 --> 00:07:22,725
So mainly here, how the so my spin boot
applications are going to interact in

118
00:07:22,725 --> 00:07:24,495
integrating with them microservice.

119
00:07:25,035 --> 00:07:29,205
So basically here when you write
away any service restful services.

120
00:07:29,415 --> 00:07:31,335
Or anything like a web services, anything.

121
00:07:31,835 --> 00:07:36,035
So when you develop one respirable
services, that is, you are going to

122
00:07:36,095 --> 00:07:39,165
create the, at the rate rest control
alert, which is which is nothing but

123
00:07:39,165 --> 00:07:41,805
your, the respirable services after that.

124
00:07:41,904 --> 00:07:45,715
When you write the microservices is
it is the part of when you develop

125
00:07:45,715 --> 00:07:49,675
the spring boot applications, which
is having the dashboard service and

126
00:07:49,725 --> 00:07:52,515
at the same times you, if you want
to interact with the other services,

127
00:07:52,515 --> 00:07:53,835
you can do with rest templates.

128
00:07:54,335 --> 00:08:00,675
So here, these Spring Boot is interact
integrating with the microservices because

129
00:08:00,675 --> 00:08:04,865
due to the spring boot features mainly
at their spring boot boot application

130
00:08:04,865 --> 00:08:11,355
and starters and how the, your spring
Boot will help you to the microservices

131
00:08:11,355 --> 00:08:13,695
because microservices nothing.

132
00:08:13,695 --> 00:08:18,125
But it's the when you're writing the
applications it's many d let's say like

133
00:08:18,125 --> 00:08:21,305
I have the one applications, I have
the like different models are there.

134
00:08:21,305 --> 00:08:25,925
So now I want to write each model
one application, one microservices.

135
00:08:26,015 --> 00:08:31,450
Then, so what happens means each model
will be going to run in once one service.

136
00:08:31,475 --> 00:08:36,215
That means like you're going to write
one like I can say one service per that.

137
00:08:36,545 --> 00:08:39,935
And so that will be, that
each model will be running on

138
00:08:39,935 --> 00:08:42,215
one database and one servers.

139
00:08:42,215 --> 00:08:45,425
So the, so what happens means when
you integrating all the services,

140
00:08:45,935 --> 00:08:49,525
so it'll be, the performance will be
increased compared to the compared

141
00:08:49,525 --> 00:08:51,355
to the like monolithic applications.

142
00:08:51,635 --> 00:08:54,505
Because let's say I
have one microservices.

143
00:08:54,565 --> 00:08:55,715
I have two microservices.

144
00:08:55,715 --> 00:09:00,610
One is employee microservices, and another
one is develop department microservices.

145
00:09:01,090 --> 00:09:05,165
So when I interacting with
my applications, even my

146
00:09:05,255 --> 00:09:08,165
department applications, my
department microservice is down.

147
00:09:08,850 --> 00:09:13,840
Even also I can interact with the, my
employee microservices because that is

148
00:09:13,840 --> 00:09:20,030
the advantage there, here because both are
running on their like individual servers.

149
00:09:20,530 --> 00:09:22,270
That is the service independence here.

150
00:09:22,330 --> 00:09:26,590
And Interservice Communications,
suppose if you want to interact with

151
00:09:26,590 --> 00:09:28,240
the one service to another services.

152
00:09:28,270 --> 00:09:32,480
So here so the Spring Boot will help you.

153
00:09:33,005 --> 00:09:36,845
On the how to interact with,
so basically in the testable

154
00:09:36,845 --> 00:09:38,655
services you have desk template.

155
00:09:38,655 --> 00:09:40,335
There is a template called REST templates.

156
00:09:40,335 --> 00:09:45,235
So it'll help you how to in how
to interact with other services.

157
00:09:45,260 --> 00:09:47,120
So there you have different methods.

158
00:09:47,120 --> 00:09:50,305
Like I know you can invoke
the get method or put methods.

159
00:09:50,455 --> 00:09:52,015
You have different HTP methods.

160
00:09:52,645 --> 00:09:55,845
So with those methods like you
can invoke the other service

161
00:09:55,845 --> 00:09:58,965
and here you can interact with
the one service to the service.

162
00:09:59,465 --> 00:10:01,285
And so service discovery.

163
00:10:01,785 --> 00:10:06,045
So I was telling about let's say
I have more than five services.

164
00:10:06,075 --> 00:10:08,050
How are you going to
interact with each other?

165
00:10:08,550 --> 00:10:12,360
So first of all, you need to register
with the one like one registry.

166
00:10:12,570 --> 00:10:17,530
Then, so you, then you like, you can be
in integrating with the other services.

167
00:10:17,580 --> 00:10:20,100
The Ika, it's I can say
one is Ika registry there.

168
00:10:20,400 --> 00:10:23,580
So this will help you to interact
with the one service to another

169
00:10:23,580 --> 00:10:27,030
service based on the, so in the
I Registry, you are going to.

170
00:10:27,300 --> 00:10:29,250
Provide the, what are the s are there?

171
00:10:29,300 --> 00:10:32,480
Like you, you are going to provide
the, all the service s you are

172
00:10:32,480 --> 00:10:33,740
going to interact with each other.

173
00:10:34,130 --> 00:10:38,145
So the registry will help you to
what is the next service you want

174
00:10:38,145 --> 00:10:41,805
to interact based on the, your key,
whatever you're going to provide

175
00:10:41,815 --> 00:10:43,255
from one service to another service.

176
00:10:43,755 --> 00:10:44,985
And Gateway is there.

177
00:10:45,225 --> 00:10:47,205
So Gateway is here.

178
00:10:47,705 --> 00:10:51,355
This is the centralized entry
point for the interacting with

179
00:10:51,355 --> 00:10:52,620
one service, another service.

180
00:10:53,000 --> 00:10:56,990
So it'll it'll help you on the load
balancing for each all these services

181
00:10:57,530 --> 00:11:02,930
and so it provides security and
security and mainly like when, whenever

182
00:11:02,930 --> 00:11:04,730
you're going to create a API gateway.

183
00:11:05,030 --> 00:11:09,470
So what happens means when the request
comes for the a p gateway, so it'll

184
00:11:09,470 --> 00:11:14,370
look, it'll it'll provide the the
request the service, which is coming to

185
00:11:14,370 --> 00:11:16,410
the, which service you have to invoke.

186
00:11:16,410 --> 00:11:20,890
It'll probably the respective so the
a p gateway will help you on that.

187
00:11:21,390 --> 00:11:23,910
So now automated database migrations.

188
00:11:24,410 --> 00:11:27,060
So here, Western control for databases.

189
00:11:27,120 --> 00:11:30,540
And here we can do like a track
and manage scheme changes as

190
00:11:30,540 --> 00:11:32,520
code alongside your application.

191
00:11:32,940 --> 00:11:36,700
And suppose if you've made any
change in the database so it'll help

192
00:11:36,700 --> 00:11:39,760
you to the validate your database
query or whatever it may be.

193
00:11:40,495 --> 00:11:42,085
And repeatable migrations.

194
00:11:42,085 --> 00:11:45,385
So suppose so if you're
writing many database scripts,

195
00:11:45,415 --> 00:11:46,825
so it'll help you on that.

196
00:11:47,425 --> 00:11:52,415
And and the speak, but mainly it's
automatically detecting and applying

197
00:11:52,415 --> 00:11:57,725
the migrations while starting, while
starting the servers because this elements

198
00:11:57,775 --> 00:12:01,525
the traditional disconnect between
the application code and the schema

199
00:12:01,525 --> 00:12:03,915
changes whenever you deploy the service.

200
00:12:04,415 --> 00:12:07,985
So the next one is the real
services for the testing.

201
00:12:08,885 --> 00:12:12,665
So whenever you try to test the
spring boot applications, you don't

202
00:12:12,665 --> 00:12:14,645
need to worry about the your mocks.

203
00:12:14,705 --> 00:12:17,765
So it'll be going to run
with the the own services.

204
00:12:17,825 --> 00:12:22,615
So there is a there is an called, there
is Spring Boot Test, so it'll help you

205
00:12:22,615 --> 00:12:29,045
on that and, so whenever you run that
any test case, so you can do that first

206
00:12:29,045 --> 00:12:34,015
screen instance for the every test run
and and even you can you can run the

207
00:12:34,115 --> 00:12:38,475
like you you can test the, your database
queries and you can test the database

208
00:12:38,525 --> 00:12:42,545
repositories whenever you were trying
to, integrated with the database, with

209
00:12:42,545 --> 00:12:44,695
the the repositories and services.

210
00:12:45,195 --> 00:12:48,375
So the last one is circuit
breaking and fault tolerance.

211
00:12:48,875 --> 00:12:51,635
So the circuit breaking will help you to.

212
00:12:52,135 --> 00:12:56,925
Whenever any failures happen, your
service, so it'll catch the circuit

213
00:12:56,925 --> 00:13:02,155
breaker for your failure, and it'll help
you to the provide the the problems.

214
00:13:02,155 --> 00:13:03,050
When the circuit opens.

215
00:13:03,550 --> 00:13:05,650
So it's keep on it to
look for the failures.

216
00:13:05,655 --> 00:13:09,155
If the failures exceed the maximums
maximum of times, what happens

217
00:13:09,155 --> 00:13:11,070
means it'll it'll report to you.

218
00:13:11,280 --> 00:13:14,640
So immediately it'll stop the
sequential requests which is

219
00:13:14,640 --> 00:13:15,840
coming up for the circuit breaker.

220
00:13:16,340 --> 00:13:20,780
So that is the main advantage in the
circuit breaker here, and rate limited

221
00:13:21,650 --> 00:13:26,160
the product services from the being harmed
by the constrain the rate of the request.

222
00:13:26,190 --> 00:13:29,970
This ensures system stability
during topics, spikes, and the

223
00:13:30,090 --> 00:13:32,520
province research adjust in.

224
00:13:33,020 --> 00:13:33,320
So here.

225
00:13:33,820 --> 00:13:37,640
It'll be producting the services
whenever you trying to when,

226
00:13:38,240 --> 00:13:41,450
whenever you got the fault tolerance,
when you turn your services.

227
00:13:41,660 --> 00:13:44,770
And it'll show the, what is
the topic is coming to the,

228
00:13:44,770 --> 00:13:46,780
your request and your services.

229
00:13:47,340 --> 00:13:52,190
And where the like the maximum the topic
is coming and based on that, so you can

230
00:13:52,190 --> 00:13:54,285
go and you can analyze the your issues.

231
00:13:54,285 --> 00:13:57,465
Suppose, suppose if,
have any issues on that.

232
00:13:57,965 --> 00:13:58,535
Thank you.

233
00:13:58,565 --> 00:13:58,955
Thank you much.

234
00:13:59,455 --> 00:14:00,195
That's it.

