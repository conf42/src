1
00:00:00,050 --> 00:00:00,590
Hello everyone.

2
00:00:00,650 --> 00:00:02,150
and thank you for joining today.

3
00:00:02,630 --> 00:00:07,029
I'm excited to, introduce kConnect,
which is like a powerful Kubernetes

4
00:00:07,400 --> 00:00:09,579
connect manager tool, for the CLI.

5
00:00:09,619 --> 00:00:13,229
And that simplifies, cluster
authentication and access, managing

6
00:00:13,229 --> 00:00:14,759
across multiple environments.

7
00:00:15,189 --> 00:00:18,419
So as you all know, Kubernetes
is a powerful orchestration tool.

8
00:00:18,774 --> 00:00:23,534
But accessing like clusters securely
across multiple, Cloud providers, right?

9
00:00:23,534 --> 00:00:28,844
Especially like EKS, would be like, I
think, it would be, it would take like

10
00:00:28,844 --> 00:00:32,214
a lot of time, like connecting to each
cluster because you have to switch

11
00:00:32,214 --> 00:00:36,604
context and also you have to, get your
context, the config file and upload,

12
00:00:36,664 --> 00:00:38,614
and connect to the cluster accordingly.

13
00:00:39,044 --> 00:00:43,374
So KConnect, which is like an open
source, is like, designed to, remove

14
00:00:43,384 --> 00:00:48,374
those barriers, making Cluster discovery
and authentication like, seamless.

15
00:00:48,824 --> 00:00:52,254
And throughout the session, I will
walk you through KConnect core

16
00:00:52,264 --> 00:00:56,484
functionalities supported like a
programs authentication method and

17
00:00:56,754 --> 00:00:58,964
how it can streamline Kubernetes.

18
00:00:59,254 --> 00:01:03,394
Operators, like for the DevOps teams
or the SRE teams or the platform teams.

19
00:01:03,824 --> 00:01:07,824
So by the end of the presentation, you
will have a clear understanding of,

20
00:01:07,914 --> 00:01:12,464
how can it enhance like productivity
and also securely, connecting to the

21
00:01:12,474 --> 00:01:14,054
multi cloud Kubernetes environments.

22
00:01:14,559 --> 00:01:15,589
So let's dive in.

23
00:01:15,609 --> 00:01:16,959
So let me get started.

24
00:01:17,059 --> 00:01:20,919
so let me go back and
go to the next slide.

25
00:01:21,419 --> 00:01:21,679
Okay.

26
00:01:21,719 --> 00:01:23,929
So I think, just to get introduced, right?

27
00:01:23,929 --> 00:01:27,349
I think, managing Kubernetes clusters
across multiple, platforms can be

28
00:01:27,349 --> 00:01:30,629
challenging, especially, when dealing
with, different authentication

29
00:01:30,629 --> 00:01:32,819
mechanisms and configurations.

30
00:01:32,869 --> 00:01:35,019
So KConnect is is to build.

31
00:01:35,524 --> 00:01:40,834
To solve the problem by providing the
unified CLI tool that enables, users to

32
00:01:40,834 --> 00:01:47,094
discover and securely access Kubernetes
clusters with ease, instead of manually

33
00:01:47,104 --> 00:01:49,084
like setting up the authentication.

34
00:01:49,489 --> 00:01:54,139
And the kubectl config files for
each platform or each cloud provider.

35
00:01:54,439 --> 00:01:59,330
KConnect, automates this process, saving
the time and also reducing the complexity.

36
00:01:59,720 --> 00:02:05,380
So the key advantage of KConnect is, the
ability to automate the, the clusters.

37
00:02:05,710 --> 00:02:09,785
it uses like a access based authentication
method like whether you are working

38
00:02:09,785 --> 00:02:16,885
with AWS or, EKS, Azure, or AKS or the
Rancher, which is the RKS platform,

39
00:02:17,295 --> 00:02:22,595
KConnect simplifies, the process by
dynamically generating, kube config

40
00:02:23,035 --> 00:02:24,869
files, ensuring seamless connectivity.

41
00:02:25,250 --> 00:02:29,470
So this is particularly useful for, for
all the DevOps platform and the cloud

42
00:02:29,470 --> 00:02:35,070
engineers managing multiple environments
as it enhances efficiency, and securely

43
00:02:35,070 --> 00:02:36,970
across different, cloud providers.

44
00:02:37,480 --> 00:02:42,160
So the KConnect, just to give like
a glimpse, like the idea behind, the

45
00:02:42,160 --> 00:02:47,730
KConnect, I think, we have like almost
approximately 1000 clusters in our

46
00:02:47,730 --> 00:02:53,910
environments with RKS and connecting
to the clusters for the SRE teams, all

47
00:02:53,970 --> 00:02:57,090
the cloud engineer, all the platform
engineers, all the DevOps engineers.

48
00:02:57,555 --> 00:03:02,045
It's becoming so hard because they have
to switch the context, the coop files, and

49
00:03:02,045 --> 00:03:03,975
they have to get for each cloud provider.

50
00:03:04,345 --> 00:03:08,125
And I think this is KConnect is like
an open source tool where you can

51
00:03:08,125 --> 00:03:12,945
actually try to try out yourself and
which is like a powerful CLI and also

52
00:03:12,945 --> 00:03:14,914
open source, which anybody can use.

53
00:03:15,165 --> 00:03:17,605
If you have a right, set
up in your environments.

54
00:03:18,205 --> 00:03:20,994
So doing deep diving into the
authentication methods, right?

55
00:03:21,045 --> 00:03:25,405
one, one of the KConnect are cost and
this ability to integrate with multiple,

56
00:03:25,455 --> 00:03:31,635
Kubernetes platforms, it supports like
a EKS and also it supports like AKS, RKS

57
00:03:31,675 --> 00:03:37,175
and Rancher, and which are like some of
the most widely used managed Kubernetes

58
00:03:37,195 --> 00:03:39,185
services in the enterprise environment.

59
00:03:39,795 --> 00:03:42,835
And also there are like a lot of
authentication methods, right?

60
00:03:42,905 --> 00:03:48,585
securing is like a fundamental con concern
when accessing Kubernetes clusters, right?

61
00:03:48,585 --> 00:03:52,565
And also KConnect offers
multiple authentication methods.

62
00:03:52,930 --> 00:03:57,630
To align with your organization's,
security policies So these methods

63
00:03:57,630 --> 00:04:02,240
include like you have you can go
with the SAML Azure Active Directory

64
00:04:02,290 --> 00:04:07,830
AWS IAM and also rancher token based
authentication ensuring That users

65
00:04:07,830 --> 00:04:13,320
can securely access their kubernetes
environments without manually configuring,

66
00:04:13,480 --> 00:04:15,580
the complex authentication workflows.

67
00:04:15,870 --> 00:04:21,090
For example, KKNET integrates with SAML
based, identity providers, through, SAML

68
00:04:21,100 --> 00:04:27,340
to AWS, allowing enterprise, to leverage
SSO mechanism for the enhanced security.

69
00:04:27,770 --> 00:04:32,440
It also supports like AD, authentication,
which follows like a Microsoft

70
00:04:32,470 --> 00:04:38,480
authentication library, like for the go
to enable like seamless login to multiple

71
00:04:38,480 --> 00:04:43,549
environments or multiple clusters,
similarly, like for AWS IAM, KConnect

72
00:04:43,550 --> 00:04:46,270
uses the users like AWS credentials.

73
00:04:46,925 --> 00:04:51,185
To authenticate against EKS
cluster, or you can also follow the

74
00:04:51,185 --> 00:04:52,495
role based authentication model.

75
00:04:52,995 --> 00:04:58,115
So that the authentication options make
like a kKinetic flexible and also a

76
00:04:58,115 --> 00:05:02,505
powerful tool for enterprise handling
multi cloud, Kubernetes clusters.

77
00:05:03,190 --> 00:05:07,490
And let's go to the next
slide on the key features.

78
00:05:07,840 --> 00:05:11,340
So there are like a lot of key
features with the KConnect, right?

79
00:05:11,380 --> 00:05:16,980
And KConnect is designed like with
the key features that makes Kubernetes

80
00:05:17,010 --> 00:05:18,940
access efficient and secure.

81
00:05:19,440 --> 00:05:23,800
So the first major feature is,
multi method authentication, which

82
00:05:23,800 --> 00:05:29,339
allows, users to authenticate using
SAML, like I said, like AWS IAM.

83
00:05:29,340 --> 00:05:33,640
Azure AD or Rancher token based, on
the organization security policies.

84
00:05:33,940 --> 00:05:38,180
So this ensures like no matter which
platform or the identity provider you

85
00:05:38,180 --> 00:05:40,390
use, KConnect can integrate seamlessly.

86
00:05:40,890 --> 00:05:46,470
So another crucial feature is
automated cluster discovery.

87
00:05:47,140 --> 00:05:51,750
Which helps users, find available clusters
across the different environments.

88
00:05:51,760 --> 00:05:54,860
instead of manually searching
for the clusters and configuring

89
00:05:54,860 --> 00:05:59,420
the, kube config files, KConnect,
automatically, discovers them, based

90
00:05:59,420 --> 00:06:00,890
upon your authentication credentials.

91
00:06:00,930 --> 00:06:05,210
Additionally, it also supports, kube
config generation, making it easy for,

92
00:06:05,260 --> 00:06:08,150
to establish the, to secure connections.

93
00:06:08,540 --> 00:06:14,150
To Kubernetes clusters in just a
few steps and this is what, for us,

94
00:06:14,150 --> 00:06:19,110
we use K connect for every cluster
authentication, not just from CLI, not

95
00:06:19,130 --> 00:06:22,850
just for the troubleshooting purposes
or not just for authenticating and

96
00:06:22,900 --> 00:06:26,290
checking the cluster health or checking
the deployments, replicas or pods.

97
00:06:26,730 --> 00:06:32,280
We also use KConnect extensively to
authenticate, from like various platforms

98
00:06:32,300 --> 00:06:35,300
like, Jenkins or SonarQube or whatever.

99
00:06:35,680 --> 00:06:43,620
So by doing this, I think we can
actually, connect to the clusters, as

100
00:06:43,620 --> 00:06:45,550
a role based authentication, which is.

101
00:06:45,550 --> 00:06:48,260
So this is a secure way, for
authenticating the clusters.

102
00:06:48,520 --> 00:06:51,970
Most of the times, we use
K Connect for also for the

103
00:06:51,970 --> 00:06:53,360
application deployments, let's say.

104
00:06:53,815 --> 00:06:57,485
You have a cluster and you have, you
want to deploy like, 100 applications

105
00:06:57,835 --> 00:07:05,185
and, we have defined, KPIs where we
actually call that KPI and it deploys

106
00:07:05,255 --> 00:07:09,245
our application or the deployment
based upon our requirements.

107
00:07:09,305 --> 00:07:12,815
But I think behind the scene,
it also uses the KConnect, for

108
00:07:12,835 --> 00:07:14,725
switching the context because.

109
00:07:15,135 --> 00:07:18,875
We have thousand clusters and we
have both on prem and also cloud.

110
00:07:18,925 --> 00:07:23,455
So which is, which makes, our
life, easier when using kConnect.

111
00:07:23,985 --> 00:07:28,525
And also, finally, kConnect, connection
history, like which, when you connect

112
00:07:28,555 --> 00:07:32,985
to a cluster, regardless of EKS,
AKS and RKS, you can actually, the

113
00:07:32,985 --> 00:07:35,165
kube config file saves the history.

114
00:07:35,795 --> 00:07:41,465
that makes you unique whenever, because
each cluster, you can create like a, alias

115
00:07:41,695 --> 00:07:43,885
where you can connect to the cluster.

116
00:07:43,895 --> 00:07:47,215
You don't have to, remember
the whole cluster name.

117
00:07:47,535 --> 00:07:49,045
Let's say, I'll take an example.

118
00:07:49,045 --> 00:07:52,865
say you have a cluster name called
application cluster, and you can,

119
00:07:52,925 --> 00:07:56,265
when, whenever you're trying to
create the cluster, you can name

120
00:07:56,265 --> 00:07:57,965
that alias as application cluster.

121
00:07:58,315 --> 00:08:01,925
And when you connect, to the cluster,
you can actually, tell K connect,

122
00:08:02,175 --> 00:08:06,015
connect to, K connect to, the,
application cluster, it connects itself.

123
00:08:06,015 --> 00:08:09,945
So I'm going to deep dive into a little
bit when I do the actual demo, I think

124
00:08:09,955 --> 00:08:13,285
I have something that I have, to show,
like how to the, how to connect to the

125
00:08:13,295 --> 00:08:15,305
cluster and the history and everything.

126
00:08:15,735 --> 00:08:19,425
And, to go back, I think also what
are the, what are like some of

127
00:08:19,425 --> 00:08:20,855
the advanced capabilities, right?

128
00:08:20,865 --> 00:08:26,645
So beyond like it's core features,
KConnect offers advanced capabilities,

129
00:08:26,715 --> 00:08:30,595
that improves, usability and
also like enterprise adoption.

130
00:08:30,965 --> 00:08:33,785
One such feature that I can think
of is the history management,

131
00:08:33,805 --> 00:08:34,715
like I was just saying.

132
00:08:35,105 --> 00:08:39,045
Which allows users to regenerate
the config files and, the kube

133
00:08:39,045 --> 00:08:44,545
config files for, from previously
connected clusters using an ID

134
00:08:44,545 --> 00:08:46,275
or alias, like I was just saying.

135
00:08:46,575 --> 00:08:50,205
This means that if you frequently switch
between the cluster, you don't have to

136
00:08:50,205 --> 00:08:54,445
go through the full authentication method
and discover the process every time.

137
00:08:54,805 --> 00:08:58,695
You can just, can, you can connect to the
cluster based upon the alias, like with

138
00:08:58,695 --> 00:09:01,105
a simple command kconnect, to your alias.

139
00:09:01,640 --> 00:09:06,200
And also, additionally, KConnect,
supports, a company or, organization

140
00:09:06,210 --> 00:09:10,240
wide configuration defaults, enabling,
each organization to establish,

141
00:09:10,290 --> 00:09:13,490
the standardization authentication
setting for all the users.

142
00:09:13,880 --> 00:09:17,820
This is particularly, helpful, for
teams, managing Kubernetes at scale,

143
00:09:17,840 --> 00:09:22,260
for any organization who have,
clusters, beyond, 200 clusters.

144
00:09:23,050 --> 00:09:27,100
And another powerful capability
is, a cross platform support.

145
00:09:27,430 --> 00:09:31,350
Ensuring that KConnect runs seamlessly
on various operating systems.

146
00:09:31,380 --> 00:09:36,090
Whether you are on Linux, Mac OS, or
Windows, you can, you can rely on the

147
00:09:36,090 --> 00:09:38,520
KConnect for consistent Kubernetes access.

148
00:09:39,130 --> 00:09:42,310
And, also to get started, yeah.

149
00:09:42,310 --> 00:09:45,150
To get started, I think, we have,
I can walk through the KConnect.

150
00:09:45,150 --> 00:09:47,900
it is a stride for it to be honest,
First, like we need to install the

151
00:09:47,900 --> 00:09:49,630
KConnect via the Packet Manager.

152
00:09:50,050 --> 00:09:55,460
Or, we can download directly from
the project's GitHub and also you can

153
00:09:55,680 --> 00:10:00,050
install the process, which is like very
well documented, once it's installed,

154
00:10:00,080 --> 00:10:03,360
you can configure KConnect with your
preferred authentication method.

155
00:10:03,740 --> 00:10:06,970
After that, I think, KConnect
automatically discards the available

156
00:10:07,150 --> 00:10:08,490
clusters in your environments.

157
00:10:09,045 --> 00:10:13,225
And finally, connecting the cluster
is like a simple as running a single

158
00:10:13,275 --> 00:10:17,725
command, which generates the required
kube config, file and set up your

159
00:10:17,725 --> 00:10:23,695
environments for immediate use and coming,
I think we have a extensive documentation

160
00:10:24,105 --> 00:10:28,885
and, to get started, like we have a
comprehensive documentation, which is

161
00:10:28,885 --> 00:10:30,775
like a, essential for any CLI tool.

162
00:10:31,115 --> 00:10:32,735
And, Kaganet provides.

163
00:10:33,150 --> 00:10:37,100
The detailed guides are also
tutorials and references at fidelity.

164
00:10:37,450 --> 00:10:37,740
github.

165
00:10:37,970 --> 00:10:39,940
io slash kconnect.

166
00:10:40,500 --> 00:10:43,990
And users can find everything
from installation steps and also,

167
00:10:44,360 --> 00:10:46,950
advanced configuration options
and troubleshooting guides.

168
00:10:47,450 --> 00:10:52,840
And additionally, kconnect maintains
like a folder called docs directory and

169
00:10:52,840 --> 00:10:54,810
which is in every project repository.

170
00:10:55,175 --> 00:10:58,655
Containing like a in depth technical
details for, for the contributors

171
00:10:58,655 --> 00:11:02,855
and all the users who want to use or
understand the internal workings, working

172
00:11:02,865 --> 00:11:07,465
mechanism of the tool and the project
structure is all the same, like you

173
00:11:07,465 --> 00:11:12,715
have a, like a regular, any command line
project, you have a, structure ensure

174
00:11:12,755 --> 00:11:14,465
that maintainability and scalability.

175
00:11:14,735 --> 00:11:20,455
The core, functions like resides in the,
command cmd slash k connect directory,

176
00:11:20,785 --> 00:11:25,445
which is like a reusable models and
housed in package directory pkg.

177
00:11:26,055 --> 00:11:28,005
and, what next, contributing.

178
00:11:28,505 --> 00:11:33,105
Yeah, so you can, so like I was
mentioning, KConnect is like an open

179
00:11:33,105 --> 00:11:37,125
source, tool and you can contribute
to the tool and it is an open source.

180
00:11:37,125 --> 00:11:41,955
You can, you can check the, the
recommended guide guidelines,

181
00:11:41,985 --> 00:11:42,775
in the contributions.

182
00:11:42,775 --> 00:11:43,975
md file.

183
00:11:44,260 --> 00:11:47,520
Which outlines like, the standards,
the coding standards, the testing

184
00:11:47,590 --> 00:11:49,530
requirements, and also the best practices.

185
00:11:49,880 --> 00:11:53,600
And, and lastly, I think, anybody
can contribute and you can, the

186
00:11:53,600 --> 00:11:55,240
steps is you can fork the repository.

187
00:11:55,500 --> 00:11:57,710
You can, introduce or develop the changes.

188
00:11:57,710 --> 00:12:01,400
You can submit the PR and
it's like same review process

189
00:12:01,400 --> 00:12:02,840
for any open source project.

190
00:12:03,350 --> 00:12:06,880
And also there are like a couple of,
acknowledgments that I want to call out

191
00:12:06,880 --> 00:12:12,220
too is We use, SAML to AWS project, which
is our identity provider functionality,

192
00:12:12,470 --> 00:12:16,800
which, KKNET relies heavily on, on that
project, which was developed by Version.

193
00:12:17,270 --> 00:12:20,970
This integrates, enables, secure,
SAML based authentication for

194
00:12:21,200 --> 00:12:22,720
accessing, Kubernetes cluster.

195
00:12:23,160 --> 00:12:27,270
And also you can also use Microsoft,
authentication library, which also

196
00:12:27,270 --> 00:12:32,750
is like KKNET, draws, like used,
heavily with the library, called Go.

197
00:12:33,100 --> 00:12:36,160
So the project, directly uses
a lot of packages located in

198
00:12:36,180 --> 00:12:39,590
PKG slash Azure and WS Trust.

199
00:12:40,230 --> 00:12:42,540
And, we have used Rancher as well.

200
00:12:42,850 --> 00:12:48,000
And, I think, every project that we have
used, we have put out clear guidelines

201
00:12:48,030 --> 00:12:52,270
are also like, like everything is in
the readme file or like what, open

202
00:12:52,270 --> 00:12:55,400
source projects that we have used
when we are developing the KConnect.

203
00:12:56,125 --> 00:12:59,845
And also, I think, which is, which
we all know, I think this is an

204
00:12:59,855 --> 00:13:04,935
open source project and KConnect is,
actually owned by FedLady and we are

205
00:13:04,945 --> 00:13:07,285
open to a lot of contributions as well.

206
00:13:08,015 --> 00:13:11,115
And I think with that said, I
would like to wrap up our session,

207
00:13:11,145 --> 00:13:15,165
but also I want to, I wanted
to, show a quick, demo as well.

208
00:13:15,185 --> 00:13:16,165
give me one second.

209
00:13:16,165 --> 00:13:19,115
Let me bring on my command prompt.

210
00:13:19,115 --> 00:13:21,240
Okay.

211
00:13:21,740 --> 00:13:22,090
Okay.

212
00:13:22,150 --> 00:13:27,060
So yeah, if you see here,
let me run the command.

213
00:13:27,860 --> 00:13:29,310
Yeah, let me clear the screen.

214
00:13:29,810 --> 00:13:30,120
Okay.

215
00:13:30,160 --> 00:13:34,470
So the first step is we have to impose a
shade, config, which is like an optional.

216
00:13:34,850 --> 00:13:38,200
the first command is like kconfigure,
where you have, you have a

217
00:13:38,200 --> 00:13:39,680
directory and, you have a config.

218
00:13:39,710 --> 00:13:40,280
yaml.

219
00:13:40,550 --> 00:13:43,120
You're basically going to,
apply that configuration.

220
00:13:43,860 --> 00:13:46,710
So after that, what you're going
to do is let me apply that.

221
00:13:47,530 --> 00:13:48,010
Yeah.

222
00:13:48,050 --> 00:13:53,760
After that, we, if you look at here, we
use kKinect, we want to, we want for the

223
00:13:53,760 --> 00:13:59,290
demo, I think, we can connect to the EKS
and similarly we can connect to RKS and

224
00:13:59,290 --> 00:14:02,560
also to AKS, which is a similar process.

225
00:14:02,840 --> 00:14:05,720
But I think the authentication
methods may change, but it is

226
00:14:05,750 --> 00:14:09,370
like a very similar process than
other, cloud service providers.

227
00:14:10,160 --> 00:14:14,110
So all we have to do is we use, like
I can use EKS and the protocol as

228
00:14:14,260 --> 00:14:19,700
SAML and basically it's going to
give options, whether which identity

229
00:14:19,700 --> 00:14:25,009
provider that we want to use, whether
we want to use Akamai or Azure AD, ADFS.

230
00:14:25,300 --> 00:14:30,850
Or Google, apps or ping, and I'm
using Google apps and, and I paste

231
00:14:30,850 --> 00:14:36,360
the IDP for the point for that
provider and, okay, that's it.

232
00:14:36,360 --> 00:14:39,710
I think it's going to
sign in and I'm going to.

233
00:14:40,135 --> 00:14:46,125
Click yes, and yeah, if you see here, it
is showing like two different accounts,

234
00:14:46,195 --> 00:14:50,685
with the administrator access and
basically, I can, I want to connect to

235
00:14:50,695 --> 00:14:52,955
different clusters or different accounts.

236
00:14:52,965 --> 00:14:54,545
So let me connect to one cluster.

237
00:14:55,045 --> 00:14:55,365
Okay.

238
00:14:55,405 --> 00:14:59,125
So when I connected to the cluster,
it's actually authenticated.

239
00:14:59,185 --> 00:15:04,405
It is asking to, set alias or not.

240
00:15:04,585 --> 00:15:07,985
And, I'm going to set alias to yes.

241
00:15:08,005 --> 00:15:08,315
Yeah.

242
00:15:08,345 --> 00:15:13,835
I'm going to set as dev and I'm going
to connect to the cluster dev cluster.

243
00:15:14,335 --> 00:15:16,095
Okay, that's it.

244
00:15:16,255 --> 00:15:21,745
It is connected to the cluster
and now, let me run some parts.

245
00:15:21,745 --> 00:15:23,375
I have some parts running here.

246
00:15:23,875 --> 00:15:24,525
Okay.

247
00:15:24,655 --> 00:15:24,965
Okay.

248
00:15:24,965 --> 00:15:25,745
I get parts.

249
00:15:25,765 --> 00:15:26,155
Okay.

250
00:15:26,155 --> 00:15:26,665
It is.

251
00:15:26,675 --> 00:15:26,945
Yeah.

252
00:15:26,995 --> 00:15:28,295
It's been a while.

253
00:15:28,905 --> 00:15:30,295
It's 27 hours.

254
00:15:30,705 --> 00:15:31,045
Okay.

255
00:15:31,545 --> 00:15:32,635
And, okay.

256
00:15:32,695 --> 00:15:37,335
And also we can, like I was, mentioning
in the, demo, we can actually see

257
00:15:37,335 --> 00:15:41,855
the connection, I think K connect LF
queues, all the commands and also the

258
00:15:41,855 --> 00:15:48,765
history that whatever connected, we can
get to, and you can connect to chest.

259
00:15:48,765 --> 00:15:50,795
if I was mentioning, we
can connect to a cluster.

260
00:15:51,170 --> 00:15:53,370
We don't have to enter
the full cluster name.

261
00:15:53,680 --> 00:15:59,420
We can just, send the alias and we can run
that command and it's going to, reconnect,

262
00:15:59,570 --> 00:16:04,750
using alias and it's going to ask for the
password, your password and that's it.

263
00:16:04,840 --> 00:16:05,200
Boom.

264
00:16:05,810 --> 00:16:10,220
It has actually connected
to the, let me click yes.

265
00:16:10,540 --> 00:16:10,800
Yep.

266
00:16:11,050 --> 00:16:13,000
It's connected to the cluster now.

267
00:16:13,500 --> 00:16:13,980
All right.

268
00:16:14,130 --> 00:16:17,640
I think, that's all that I have for today.

269
00:16:18,055 --> 00:16:21,765
And this wrap up, the session,
and also thank you for your time.

270
00:16:22,205 --> 00:16:24,765
And if you have any questions or
want to get involved, feel free

271
00:16:24,765 --> 00:16:27,945
to reach, reach out on GitHub
or check out the documentation.

272
00:16:28,245 --> 00:16:32,375
Let's, continue simplifying
Kubernetes access and also

273
00:16:32,445 --> 00:16:34,495
securing a connection together.

274
00:16:34,915 --> 00:16:35,905
And that's it.

275
00:16:35,985 --> 00:16:38,985
And thank you for everyone
for attending the session.

