1
00:00:00,049 --> 00:00:03,789
I'm here to present in the
platform engineering for FinTech.

2
00:00:04,449 --> 00:00:10,119
We want to specifically discuss about
database architecture in FinTech and

3
00:00:11,020 --> 00:00:16,540
how this distributed database starting
works, replication and scaling, and

4
00:00:16,540 --> 00:00:18,669
how it helps the FinTech industry.

5
00:00:19,165 --> 00:00:24,625
As we all know, modern FinTech platforms
track air platform engineering solutions

6
00:00:24,685 --> 00:00:31,195
that can process massive transaction
volumes during peak events in milliseconds

7
00:00:31,644 --> 00:00:33,835
while maintaining the accuracy.

8
00:00:34,015 --> 00:00:40,915
Also, the availability, so as financial
services scale globally across different

9
00:00:40,955 --> 00:00:45,764
regions and environments which have
different regulatory requirements.

10
00:00:46,214 --> 00:00:50,355
Platform teams must architect
distributed database system that

11
00:00:50,355 --> 00:00:54,854
supports retail, blanking trading,
digital balance, and payment

12
00:00:54,854 --> 00:00:57,104
processing at unprecedented volumes.

13
00:00:57,675 --> 00:01:02,290
So the agenda of this PPT
is split into the six parts.

14
00:01:02,600 --> 00:01:06,975
First we will discuss about the platform
engineering foundation how it evolved

15
00:01:06,975 --> 00:01:09,200
around in the financial infrastructure.

16
00:01:10,030 --> 00:01:12,730
How the requirements
are captured and scaled.

17
00:01:12,960 --> 00:01:16,840
And what is the role of a
database architecture here.

18
00:01:17,440 --> 00:01:21,600
Then we will look at deeply
into the database strategies.

19
00:01:21,950 --> 00:01:24,260
We will start with the
database strategy strategies.

20
00:01:24,360 --> 00:01:28,470
We have a different starting strategies
like horizontal partnering, partitioning.

21
00:01:29,220 --> 00:01:33,240
Geographic or regulatory spreading
on operational management, right?

22
00:01:33,240 --> 00:01:36,930
So there are replication models,
which can be synchronous or hybrid.

23
00:01:37,440 --> 00:01:41,680
Whichever suits for the financial
tech industries and consistency

24
00:01:41,680 --> 00:01:45,700
model, consistency models, strong
consistency, eventual consistency

25
00:01:45,700 --> 00:01:48,490
and cashflow, consistency for
different financial context.

26
00:01:49,270 --> 00:01:54,190
So then the architectural patterns, how
these database, and driven architectures

27
00:01:54,190 --> 00:01:59,045
are used, like even driven architecture,
microservices, cqrs, and even sourcing.

28
00:01:59,795 --> 00:02:04,925
Then we look at some case studies and
feature directions where this platform

29
00:02:05,015 --> 00:02:10,164
at FinTech goes with respect to database
and especially distributed database.

30
00:02:10,354 --> 00:02:11,945
So let's dive in.

31
00:02:12,445 --> 00:02:16,114
As the evolution of financial
infrastructure, we know the financial

32
00:02:16,114 --> 00:02:20,724
industry has undergo a significant
transformation over the years on how

33
00:02:20,724 --> 00:02:23,964
it approaches the data management
and system architecture, right?

34
00:02:23,964 --> 00:02:26,754
So example, traditional banking
system built on monolithic

35
00:02:26,754 --> 00:02:30,684
architectures at first have given a
way to, given way to a distributor

36
00:02:30,684 --> 00:02:32,694
systems and cloud native platforms.

37
00:02:32,954 --> 00:02:37,244
Recently, platform engineering has
emerged a critical discipline and focused

38
00:02:37,244 --> 00:02:39,194
on creative self-service capabilities.

39
00:02:39,989 --> 00:02:44,730
Modern FinTech platforms face multifaceted
challenges recurring Highlander

40
00:02:44,730 --> 00:02:48,749
scalability while maintaining the asset
properties, which is critical for five.

41
00:02:48,809 --> 00:02:49,769
FinTech industries.

42
00:02:50,439 --> 00:02:54,129
High frequency trade trading
system must process market data and

43
00:02:54,369 --> 00:02:56,259
execute trades within microseconds.

44
00:02:56,264 --> 00:03:01,329
Digital banking platforms need to handle
millions of simultaneous user at a time.

45
00:03:01,914 --> 00:03:06,084
Payment processes must validate and settle
transaction across multiple currencies

46
00:03:06,084 --> 00:03:10,554
and different countries, and which have
a different regulatory jurisdiction

47
00:03:10,614 --> 00:03:12,654
while maintaining the perfect accuracy.

48
00:03:13,154 --> 00:03:17,394
So this is our revolution of the
financial industry over the years

49
00:03:17,394 --> 00:03:20,944
and the need now we will understand
the scale requirements, right?

50
00:03:20,944 --> 00:03:24,904
So accuracy and audit, auditability,
financial transaction, demand up,

51
00:03:25,324 --> 00:03:27,664
accuracy, auditability, and permanence.

52
00:03:28,174 --> 00:03:31,744
Zero margin for error is
acceptable in calculation and

53
00:03:31,744 --> 00:03:35,434
comprehensive logging is mandated
by regulatory and run requirements.

54
00:03:36,094 --> 00:03:40,474
Extreme usage spikes, financial platforms
must adaptably handle extreme usage

55
00:03:40,474 --> 00:03:45,154
spikes triggered by market events,
product launches, or seasonal activities

56
00:03:45,154 --> 00:03:48,054
like tax season or height trading day.

57
00:03:48,114 --> 00:03:51,934
And due to global events the
architecture must ensure.

58
00:03:52,789 --> 00:03:56,689
Consistent performance through
robust auto-scaling capabilities.

59
00:03:57,499 --> 00:04:01,249
And there is geographical distribution
comes into play as well because

60
00:04:01,249 --> 00:04:04,879
we have to comply with the data
resiliency loss across diverse

61
00:04:05,209 --> 00:04:06,889
jurisdiction of different countries.

62
00:04:07,189 --> 00:04:10,579
Coupled with the need for
low latencies global access

63
00:04:10,879 --> 00:04:15,529
mandates, multi-regional database
deployments for financial services.

64
00:04:16,029 --> 00:04:20,679
With this in mind, the database
from monolithic evolved into

65
00:04:20,889 --> 00:04:25,239
database distributed database in
the FinTech industries, and it is

66
00:04:25,239 --> 00:04:28,924
critical role, it is playing critical
role in serving the consumers.

67
00:04:29,674 --> 00:04:33,044
As well as keeping the
regulatory requirements, right?

68
00:04:33,044 --> 00:04:36,564
So we will look at the different
strategies involved in this.

69
00:04:36,594 --> 00:04:38,424
First, the shredding strategies.

70
00:04:38,844 --> 00:04:43,014
So under the shredding strategies, the
horizontal partnering in partitioning

71
00:04:43,044 --> 00:04:44,874
in financial context, right?

72
00:04:44,874 --> 00:04:49,194
By distributing data across multiple
database instances, sh shredding enables

73
00:04:49,194 --> 00:04:53,854
linear scalability while maintaining
the low latency QE performance.

74
00:04:54,199 --> 00:04:57,739
The primary challenges lies in
maintaining the transactional

75
00:04:57,799 --> 00:05:00,829
integrity across shared boundaries.

76
00:05:01,159 --> 00:05:06,649
So user based sharding is one of the
most common in financial platform

77
00:05:07,049 --> 00:05:13,009
because this partitioning based on user
data or echo number can be executed

78
00:05:13,009 --> 00:05:14,899
or operate within the single shot.

79
00:05:15,199 --> 00:05:19,519
And all the information can be in single
shot of a particular user, however.

80
00:05:19,954 --> 00:05:24,094
Operations spanning multiple user
accounts like payment from one account

81
00:05:24,124 --> 00:05:28,914
to another which involves different
charge repair, sophisticated distributed

82
00:05:28,914 --> 00:05:33,234
transaction management to maintain
performance as well as consistency.

83
00:05:34,104 --> 00:05:37,164
So there is also a geographic
and regulatory sharding.

84
00:05:37,519 --> 00:05:39,049
First thing may be a regulation.

85
00:05:39,049 --> 00:05:40,819
Regional compliance system care, right?

86
00:05:40,879 --> 00:05:45,289
Geographic writing enables that
strategy enables that regulatory

87
00:05:45,289 --> 00:05:48,059
requirements, which aligns the
database distribution with the

88
00:05:48,269 --> 00:05:49,594
regulatory requirements, ensuring.

89
00:05:50,384 --> 00:05:54,905
Customer data remains within specific
geographic boundaries, right?

90
00:05:54,905 --> 00:05:59,644
So then it can, it also enables
the cross power transaction if you

91
00:05:59,644 --> 00:06:04,624
have a geographic trading sharding
payments between regions involved.

92
00:06:04,624 --> 00:06:09,064
Data showed in different geographical
chart require complex routing logic

93
00:06:09,094 --> 00:06:10,954
and transaction coordination protocols.

94
00:06:11,704 --> 00:06:16,524
Time based Charlie historical transaction
data is critical in FinTech for the

95
00:06:16,524 --> 00:06:18,444
statements, tax purposes, and others.

96
00:06:18,969 --> 00:06:22,659
That can be partitioned by data
ranges, enabling efficient archival

97
00:06:22,659 --> 00:06:26,559
and compliance reporting while keeping
recent data in high performance charts.

98
00:06:27,280 --> 00:06:31,270
Effective chart management requires
automated tools and processes that

99
00:06:31,270 --> 00:06:35,770
handle operational complexity,
including monitoring systems that

100
00:06:35,770 --> 00:06:39,089
track shared health performance
metrics and capacity utilization.

101
00:06:39,509 --> 00:06:44,429
Short rebalancing represent on of the
most complex operational challenges

102
00:06:44,519 --> 00:06:46,379
as user bases grow unevenly.

103
00:06:46,904 --> 00:06:52,174
Our transaction pay 10 changes due to
various recent, so the next one is the

104
00:06:52,174 --> 00:06:54,454
replication models for high availability.

105
00:06:54,844 --> 00:07:00,064
So our, the replication models
can be a synchronous or hybrid.

106
00:07:00,154 --> 00:07:02,254
We will look at the
synchronous replication first.

107
00:07:02,254 --> 00:07:04,924
Synchronous replication
for financial accuracy.

108
00:07:05,464 --> 00:07:10,174
Synchronous replication provides the
strongest to consistency guarantees,

109
00:07:10,504 --> 00:07:12,724
ensuring all replicas contained.

110
00:07:13,174 --> 00:07:16,324
Identical data at any point in time.

111
00:07:16,504 --> 00:07:20,914
This is essential for critical financial
operation where inconsistencies

112
00:07:20,914 --> 00:07:24,484
could result in financial
losses or regulatory violation.

113
00:07:24,964 --> 00:07:25,324
Right?

114
00:07:25,354 --> 00:07:28,984
Operation must be confirmed by all
replicas before the transaction

115
00:07:28,984 --> 00:07:30,304
is even considered complete.

116
00:07:30,784 --> 00:07:34,054
Ensure any replica can
immediately take over without

117
00:07:34,054 --> 00:07:35,914
data loss during primary failure.

118
00:07:36,754 --> 00:07:41,144
Introduces additional latency and
complexity due to this, especially when it

119
00:07:41,144 --> 00:07:43,364
is across different geographical location.

120
00:07:43,814 --> 00:07:47,114
Also, multi-master synchronous
replication presence, additional

121
00:07:47,114 --> 00:07:48,974
complicate comp complexities.

122
00:07:49,379 --> 00:07:51,639
In while doing the conflict resolution.

123
00:07:52,139 --> 00:07:57,029
So then there is an asynchronous
enables financial asynchronous

124
00:07:57,029 --> 00:08:02,009
PLA replication enables financial
platforms to achieve global scale while

125
00:08:02,009 --> 00:08:03,599
maintaining acceptable performance.

126
00:08:03,599 --> 00:08:06,479
Operations are committed to
the primary database and then

127
00:08:06,479 --> 00:08:08,729
propagate to replica synchronously.

128
00:08:08,994 --> 00:08:12,359
It reduces the right latency
significantly and enable geographic

129
00:08:12,359 --> 00:08:14,659
distribution of real operations easily.

130
00:08:15,204 --> 00:08:17,244
Introduce possibility of temporary data.

131
00:08:17,244 --> 00:08:21,474
Inconsistencies between replicas requires
careful monitoring of replication,

132
00:08:21,474 --> 00:08:25,284
lag needs, sophisticated conflict
direction and resolution mechanism.

133
00:08:25,434 --> 00:08:28,854
If you are using a synchronous
replication, which is the downside,

134
00:08:29,364 --> 00:08:33,364
hybrid replication strategies modern
financial platform often implement

135
00:08:33,364 --> 00:08:37,444
these kind of hybrid aches combining
synchronous and synchronous replication

136
00:08:37,444 --> 00:08:39,004
based on data classification.

137
00:08:39,694 --> 00:08:41,819
So this gives more
beneficial of both worlds.

138
00:08:42,319 --> 00:08:45,079
Critical financial data uses synchronous
replication within a region and

139
00:08:45,079 --> 00:08:46,879
thus a synchronous across region.

140
00:08:47,270 --> 00:08:49,790
Less critical data may use
a synchronous replication.

141
00:08:49,790 --> 00:08:53,570
Exclusively sophisticated data
classification and routing

142
00:08:53,570 --> 00:08:56,960
system application must stand
in different consistency models

143
00:08:56,960 --> 00:08:58,580
for different data types.

144
00:08:59,080 --> 00:09:02,320
So then there is the consistency
models in financial system,

145
00:09:03,040 --> 00:09:04,365
there is strong consistency.

146
00:09:05,110 --> 00:09:08,680
Essential for code ranking system,
trading system, and payment processing

147
00:09:08,680 --> 00:09:10,090
where accuracy is paramount.

148
00:09:10,450 --> 00:09:15,040
All nodes see the same data at the same
time, require sophisticated coordination

149
00:09:15,040 --> 00:09:20,830
protocol, prioritize consistency over
stability, ual consistency, better

150
00:09:20,830 --> 00:09:24,190
performance for analytics, reporting
and customer facing application.

151
00:09:24,190 --> 00:09:27,960
Tolerate temporary inconsistencies
require conflict resolution.

152
00:09:27,960 --> 00:09:30,930
Mechanism needs monitoring
for replication lag.

153
00:09:31,590 --> 00:09:32,880
Casual consistency.

154
00:09:32,880 --> 00:09:35,310
So it's a middle ground for
complex financial workflows,

155
00:09:35,640 --> 00:09:37,470
ensures casually related operation.

156
00:09:37,470 --> 00:09:42,690
Maintain order, allows unrelated
operation to can be reorder, requires

157
00:09:42,690 --> 00:09:45,420
timestamp and dependency tracking.

158
00:09:45,920 --> 00:09:50,315
So moving onto the next topic,
which is architectural pattern

159
00:09:50,490 --> 00:09:52,470
for financial scalability.

160
00:09:52,860 --> 00:09:56,820
First architectural pattern we can
take as event driven architecture.

161
00:09:57,360 --> 00:10:01,200
It is essential for building a scalable
financial platform that handle complex

162
00:10:01,200 --> 00:10:05,160
multi-step processes while maintaining
loose coupling between services.

163
00:10:05,430 --> 00:10:08,940
Even sourcing provides complete audit
trials for regulatory complaints.

164
00:10:09,600 --> 00:10:13,230
S careful attention to event
ordering and delivery guarantees.

165
00:10:13,680 --> 00:10:16,680
Even streaming platform like
Kafka have become central to

166
00:10:16,680 --> 00:10:17,910
many financial architecture.

167
00:10:18,270 --> 00:10:22,680
For this reason, microservices
architecture is paramount for any arc,

168
00:10:23,130 --> 00:10:25,455
but it is more paramount to financial.

169
00:10:26,165 --> 00:10:27,335
FinTech org as well.

170
00:10:27,635 --> 00:10:33,125
It enables financial problems to organize
complex business logic into manageable

171
00:10:33,185 --> 00:10:35,135
independently deployable services.

172
00:10:35,495 --> 00:10:39,815
Domain driven design helps identify
appropriate service boundaries

173
00:10:40,175 --> 00:10:43,715
require sophisticated transaction
management across service boundaries.

174
00:10:44,045 --> 00:10:48,905
Service MIS technologies provide essential
capabilities for security and monitoring.

175
00:10:49,405 --> 00:10:53,630
Then we have secures command
query responsibility, segregation.

176
00:10:54,190 --> 00:10:57,850
Which separates command processing
from query processing, optimizing

177
00:10:57,850 --> 00:11:00,430
each for specific requirements, right?

178
00:11:00,430 --> 00:11:00,880
Operation.

179
00:11:00,880 --> 00:11:04,570
Focus on maintaining consistency and
business role while read operation.

180
00:11:04,570 --> 00:11:09,730
Optimize for performance and user
experience enables specialist three

181
00:11:09,730 --> 00:11:11,350
models for different use cases.

182
00:11:11,830 --> 00:11:13,305
Then there is e sourcing benefit.

183
00:11:14,005 --> 00:11:18,130
It compliments the CQRS by
providing reliable mechanism for

184
00:11:18,130 --> 00:11:21,940
propagating state changes even
generated by command processing.

185
00:11:22,240 --> 00:11:25,810
Update read models are
synchronously, provides natural

186
00:11:25,810 --> 00:11:27,280
audit trails for compliance.

187
00:11:27,400 --> 00:11:31,690
Enables creation of new read models
from historical even streams, requires

188
00:11:31,750 --> 00:11:35,350
sophisticated, even processing
pipelines to implement this.

189
00:11:35,850 --> 00:11:39,790
Then there is an important topic in
the FinTech industry which is always

190
00:11:39,790 --> 00:11:41,435
a talk as security and compliance.

191
00:11:42,035 --> 00:11:45,540
Which is critical for the FinTech
industry while maintaining the

192
00:11:45,545 --> 00:11:47,195
customer data and information.

193
00:11:47,495 --> 00:11:49,565
So there is an encryption
and data production.

194
00:11:49,935 --> 00:11:54,135
Financial data occurs production
both at risk as well as in transit.

195
00:11:54,495 --> 00:11:58,815
Transparent data encryption are for
stored data, secure communication

196
00:11:58,815 --> 00:12:02,650
between our system components, hardware
security models for key management.

197
00:12:03,285 --> 00:12:05,745
Access control, fine grain mechanism.

198
00:12:05,745 --> 00:12:09,705
Ensure data is only accessible to
authorized user, road based and attribute

199
00:12:09,705 --> 00:12:14,865
based access control MFA, multifactor
authentication for sensitive systems, road

200
00:12:14,865 --> 00:12:19,455
level and carbon level security policy
also being implemented in various places.

201
00:12:19,905 --> 00:12:21,105
Regulatory complaints.

202
00:12:21,285 --> 00:12:24,495
Financial platforms must
comply with numerous frameworks

203
00:12:24,735 --> 00:12:26,090
and data Ency requirement.

204
00:12:26,685 --> 00:12:31,845
Private privacy regulations like G
gt, GTPR, detailed audit, logging,

205
00:12:31,845 --> 00:12:35,085
logging and reporting capabilities
for tax purposes and others.

206
00:12:35,585 --> 00:12:38,795
So we will look at the case
studies, real world implementation,

207
00:12:39,065 --> 00:12:40,505
high frequency trading platform.

208
00:12:40,505 --> 00:12:43,745
Major investment bank, implemented
distributed architecture, acquiring

209
00:12:43,745 --> 00:12:47,705
microsecond latencies, and perfect
consistency, geographic distribution

210
00:12:47,705 --> 00:12:51,215
with co-located databases,
instances hybrid approach, which we

211
00:12:51,215 --> 00:12:52,715
discussed in the previous slides.

212
00:12:53,100 --> 00:12:56,340
Combining synchronous application
within region and as synchronous

213
00:12:56,340 --> 00:13:00,000
across different region, sub
millisecond and performance monitoring.

214
00:13:00,000 --> 00:13:03,960
With automated resource allocation,
digital banking platform leading

215
00:13:03,960 --> 00:13:05,250
digital banking platform.

216
00:13:05,250 --> 00:13:08,430
Built globally distributed
architecture, supporting millions of

217
00:13:08,430 --> 00:13:12,300
customer sh trying strategy based on
geography, location and account type.

218
00:13:12,630 --> 00:13:16,080
Human driven architecture with
comprehensive human sourcing, eventual

219
00:13:16,080 --> 00:13:20,010
consistency for user experience and strong
consistency for financial operations.

220
00:13:20,380 --> 00:13:25,270
Money transfer stuff, payment processing
network, global processor handling peak

221
00:13:25,270 --> 00:13:30,040
volumes with sub-second authorization
times combination of graphicy and

222
00:13:30,040 --> 00:13:34,510
merchant based Strat, which is user based
Strat real time fraud reduction with

223
00:13:34,510 --> 00:13:39,640
machine learning, disaster recovery,
redirecting reprocessing within seconds.

224
00:13:40,140 --> 00:13:42,605
So where the future hits too, right?

225
00:13:42,605 --> 00:13:46,140
With all this infu in
financial platform engineering.

226
00:13:46,645 --> 00:13:48,625
Cloud native database technologies, right?

227
00:13:48,775 --> 00:13:52,735
Evolution towards technology, designed
for distributed container environment,

228
00:13:53,065 --> 00:13:56,725
serverless database, eliminating
operational overhead, multi-cloud

229
00:13:56,725 --> 00:14:00,745
strategies, balancing performance,
cost and compliance, integrated

230
00:14:01,135 --> 00:14:03,685
security and compliance capabilities.

231
00:14:04,075 --> 00:14:08,510
Also as talk of the towns NA
and ML integration as well,

232
00:14:08,510 --> 00:14:09,965
and quantum security, right?

233
00:14:10,345 --> 00:14:13,450
Transformative capabilities being
integrated directly into database system.

234
00:14:14,065 --> 00:14:18,565
Automated performance tuning and
anomaly reduction by a real time

235
00:14:18,565 --> 00:14:20,275
fraud reduction and risk assessment.

236
00:14:20,635 --> 00:14:25,015
Quantum resistant cryptographic
algorithms is being researched and

237
00:14:25,015 --> 00:14:28,915
then hybrid security approaches
during transition period.

238
00:14:29,415 --> 00:14:31,485
So that's all for the presentation today.

239
00:14:31,755 --> 00:14:32,265
Thank you.

240
00:14:32,265 --> 00:14:33,645
Thanks for listening to this.

