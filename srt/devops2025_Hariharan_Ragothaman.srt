1
00:00:00,500 --> 00:00:03,309
Welcome everyone to my talk on
securely unifying deployments in an

2
00:00:03,449 --> 00:00:05,189
organization for increased governance.

3
00:00:05,479 --> 00:00:09,270
I'm Hariharan and today we'll explore
how secure deployment practices can

4
00:00:09,300 --> 00:00:11,170
enhance governance within organizations.

5
00:00:11,580 --> 00:00:12,260
Let's get started.

6
00:00:12,760 --> 00:00:14,249
A quick introduction about myself.

7
00:00:14,299 --> 00:00:17,550
I'm currently a software engineer at
AMD and have previously worked at Athena

8
00:00:17,550 --> 00:00:19,840
Health, Bain Capital and Bose Corporation.

9
00:00:20,210 --> 00:00:24,640
My interests span DevSecOps, Distributed
Systems, Applied AI and Embedded Systems.

10
00:00:24,750 --> 00:00:27,649
Feel free to connect with me on LinkedIn
or check out my GitHub repository

11
00:00:27,650 --> 00:00:28,920
for more insights into my work.

12
00:00:29,420 --> 00:00:31,520
So here's an agenda for today.

13
00:00:32,000 --> 00:00:35,559
We'll start with the organizational
journey and then discuss

14
00:00:35,559 --> 00:00:36,870
the importance of security.

15
00:00:37,380 --> 00:00:42,270
Next, we'll deep dive into the unified
deployment model we implemented

16
00:00:42,930 --> 00:00:46,360
based on case studies, governance
practices and wrap up with the

17
00:00:46,360 --> 00:00:47,880
future directions and key takeaways.

18
00:00:48,590 --> 00:00:49,530
So let's get, let's begin.

19
00:00:50,030 --> 00:00:50,870
Organizational journey.

20
00:00:51,280 --> 00:00:55,300
The deployment landscape before unifying
deployments or before the unification

21
00:00:55,370 --> 00:01:00,330
was fragmented and passed several
challenges, including inconsistent,

22
00:01:00,380 --> 00:01:01,830
processes and vulnerabilities.

23
00:01:02,220 --> 00:01:06,000
This drove us to embrace a DevSecOps
approach to unify deployments

24
00:01:06,050 --> 00:01:09,180
and address these challenges
proactively and comprehensively.

25
00:01:09,680 --> 00:01:13,140
So if you look at this slide, with
multiple teams working on deployments,

26
00:01:13,180 --> 00:01:16,580
each team had their own strategy
to deploy artifacts or containers.

27
00:01:16,590 --> 00:01:20,530
Some of them decided to deploy
VKS, some of them deployed ECS, and

28
00:01:20,530 --> 00:01:23,480
some of some teams had their own
homegrown deployment strategies.

29
00:01:23,860 --> 00:01:31,570
So as we had some metrics And some,
monitoring tools to track the number of

30
00:01:31,570 --> 00:01:33,790
deployments and the type of deployments.

31
00:01:33,850 --> 00:01:39,300
We realized that we did not have a
unified way to act, to govern all

32
00:01:39,300 --> 00:01:43,890
these deployments or set rules or
strategies or address vulnerabilities.

33
00:01:44,450 --> 00:01:47,450
And so on, which drove us
to the DevSecOps journey.

34
00:01:47,950 --> 00:01:51,390
So our DevSecOps journey focused
on shifting security to the left by

35
00:01:51,390 --> 00:01:53,440
integrating it into CI CD pipelines.

36
00:01:53,840 --> 00:01:57,680
Collaboration between developers,
security and automation teams was

37
00:01:57,680 --> 00:02:01,450
essential to achieve security across
the software supply chain, commonly

38
00:02:01,880 --> 00:02:06,460
referred to as SSC, especially with
increasing reliance and an increasing

39
00:02:06,470 --> 00:02:07,600
reliance on open source software.

40
00:02:07,980 --> 00:02:12,490
So there was a rapid increase in the
usage of open source software as And

41
00:02:12,500 --> 00:02:16,470
the number of packages and versions
in open source software released per

42
00:02:16,470 --> 00:02:17,750
year was also rapidly increasing.

43
00:02:18,250 --> 00:02:22,410
So let's try to really understand
why is security supremely important?

44
00:02:22,500 --> 00:02:27,700
What is the need to, what is the need
for security in deployment pipelines?

45
00:02:27,700 --> 00:02:31,440
And how is all this helping
in governance, right?

46
00:02:31,880 --> 00:02:35,829
So, first security is crucial because
modern applications heavily depend on

47
00:02:35,829 --> 00:02:39,319
open source software and third party
components at every stage of the SDLC.

48
00:02:39,719 --> 00:02:43,379
So, if you take a look at the next
slide, at every stage of the SDLC, third

49
00:02:43,379 --> 00:02:46,129
party components play a pivotal role.

50
00:02:46,519 --> 00:02:49,229
This dependency exposes to
vulnerabilities and addressing these

51
00:02:49,239 --> 00:02:50,909
proactively is a non negotiable.

52
00:02:51,209 --> 00:02:53,899
So, that's a growing
attack surface, right?

53
00:02:54,259 --> 00:02:59,389
So, what, I mean, when you look at the
attack vector in the deployment pipelines,

54
00:02:59,529 --> 00:03:03,099
they can be supply chain attacks,
they can be secret management attacks.

55
00:03:03,429 --> 00:03:06,919
There can be misconfigurations,
such as giving excessive permissions

56
00:03:06,919 --> 00:03:08,209
or using unverified images.

57
00:03:08,869 --> 00:03:13,619
For example, if you take a real
world incident like log4j, that had,

58
00:03:13,689 --> 00:03:15,399
that had tremendous impact, right?

59
00:03:15,849 --> 00:03:23,160
So the idea is to follow some key security
practices, by ensuring that, we, care

60
00:03:23,160 --> 00:03:25,430
about security at each stage of the SDLC.

61
00:03:25,770 --> 00:03:29,200
For example, we can have immutable
infrastructure and container scanning.

62
00:03:29,630 --> 00:03:32,980
We can have, we can have RBAC,
role based access rules set.

63
00:03:33,380 --> 00:03:35,210
we can have digital signing of artifacts.

64
00:03:35,530 --> 00:03:37,650
we can have automated
compliance checks, right?

65
00:03:37,650 --> 00:03:43,200
So, and shifting, security to the
left, we can involve SAS and DAS scans

66
00:03:43,200 --> 00:03:44,760
at very early stages of the pipeline.

67
00:03:45,325 --> 00:03:49,825
And finally, we should also like
inculcate a DevOps culture, DevSecOps

68
00:03:49,855 --> 00:03:51,325
culture across the entire organization.

69
00:03:51,825 --> 00:03:55,995
So the software development lifecycle
begins when anything enters the

70
00:03:55,995 --> 00:03:58,255
ecosystem and ends in production.

71
00:03:58,735 --> 00:04:02,705
Threats like CVEs, malicious
packages, and supply chain attacks.

72
00:04:03,090 --> 00:04:06,370
underline the need for robust
reduction and remediation strategies.

73
00:04:06,770 --> 00:04:10,820
But when you zoom out and look at
it at a very high level, right?

74
00:04:11,240 --> 00:04:15,340
All these threads that come into
the ASDLC, they can be classified

75
00:04:15,340 --> 00:04:18,750
as source threads or dependency
threads or build threads.

76
00:04:19,250 --> 00:04:20,840
Sorry, source threads.

77
00:04:21,735 --> 00:04:26,125
Some examples of source threads are
submitting an unauthorized change,

78
00:04:26,405 --> 00:04:30,565
compromise, or the entire source
repository is compromised, or you're

79
00:04:30,585 --> 00:04:34,095
building from, or you forked a repo and
you're building from a modified source.

80
00:04:34,755 --> 00:04:38,915
Dependency threads are essentially
like using compromised dependency.

81
00:04:39,415 --> 00:04:42,565
our build threads can be compromised
build processes, compromised

82
00:04:42,565 --> 00:04:48,545
packages, compromised, or someone
had, you know, inadvertently uploaded

83
00:04:48,545 --> 00:04:49,475
a modified package and so on.

84
00:04:49,975 --> 00:04:50,045
Right.

85
00:04:50,305 --> 00:04:54,195
But the current approach in
towards security as a whole is

86
00:04:54,205 --> 00:04:55,665
to detect it and remediate it.

87
00:04:55,725 --> 00:05:01,115
But, but the idea that should
trickle down is to prevent it, right.

88
00:05:01,155 --> 00:05:03,025
So that it doesn't even
happen in the first place.

89
00:05:03,525 --> 00:05:09,135
So that, so let's try, let's dive a bit
deeper in understanding, securities.

90
00:05:09,155 --> 00:05:14,195
Vulnerabilities, CVEs, and then how we
could potentially address them, right?

91
00:05:14,485 --> 00:05:18,725
So the rate of public CVEs is rapidly
increasing every day creating a constant

92
00:05:18,725 --> 00:05:22,785
pressure on dev and security teams So
this data is like publicly available

93
00:05:23,435 --> 00:05:29,400
and the The irony is that many of the
critical CVEs that are reported Not all

94
00:05:29,400 --> 00:05:31,510
of them are fully exploitable, right?

95
00:05:31,530 --> 00:05:36,170
So only fully exploitable,
fully exploitable CVE is really

96
00:05:36,170 --> 00:05:39,840
dangerous, but then majority of the
CVEs are not exploitable at all.

97
00:05:39,860 --> 00:05:42,820
Like for example, if you look at
the screenshot here you can, you

98
00:05:42,820 --> 00:05:45,130
can notice the message saying
that the vulnerability has been

99
00:05:45,130 --> 00:05:47,129
modified since it was last analyzed.

100
00:05:47,129 --> 00:05:49,280
It's awaiting reanalysis which
may result in further changes.

101
00:05:49,780 --> 00:05:50,060
Right.

102
00:05:50,140 --> 00:05:55,440
So given in the last few years, given the
rise of ML models and generative AI, even

103
00:05:55,440 --> 00:05:57,550
machine learning models can be weaponized.

104
00:05:57,890 --> 00:06:01,070
Public repositories for models
have become targets where

105
00:06:01,070 --> 00:06:04,670
attackers embed malicious code that
executes when the model is loaded.

106
00:06:05,260 --> 00:06:10,175
This shows the sophistication of modern
threads and the importance of How we

107
00:06:10,175 --> 00:06:13,585
should care about security at every stage
of the software development life cycle.

108
00:06:14,205 --> 00:06:17,175
So for example, this example is like
if you take a look at this model called

109
00:06:17,205 --> 00:06:21,285
totally harmless model, completely named,
for the irony, It looks like it looks

110
00:06:21,285 --> 00:06:24,125
like a very legible model, but then
when the model loads in the machine, The

111
00:06:24,125 --> 00:06:26,155
malicious code actually executes, right?

112
00:06:26,165 --> 00:06:28,805
And the malicious code is actually
hidden in the binary data.

113
00:06:29,305 --> 00:06:33,425
So there is also generative AI tools
are now introducing vulnerabilities as

114
00:06:33,425 --> 00:06:35,665
well, such when they hallucinate, right?

115
00:06:35,705 --> 00:06:39,905
So where a developer inadvertently
installs malicious packages.

116
00:06:40,375 --> 00:06:43,980
for example, if you take a look at this
flow, the attacker essentially asks that

117
00:06:43,980 --> 00:06:48,960
GBT or any, any, or an equal engineer tool
a question, and then when it hallucinates,

118
00:06:48,960 --> 00:06:52,020
it responds with an non-existent
package, and then the attacker decides

119
00:06:52,020 --> 00:06:55,860
to publish that package into a, into
the respective container registry,

120
00:06:56,310 --> 00:06:57,540
you know, with malicious code in it.

121
00:06:58,230 --> 00:07:01,260
At a later point of time, a developer
asks the same question and then the,

122
00:07:01,560 --> 00:07:05,680
and then the generative, A model replies
with, the same malicious package name.

123
00:07:06,075 --> 00:07:08,315
And then the developer goes and
grabs it from the container registry.

124
00:07:08,625 --> 00:07:13,065
So this flow, of injecting malicious
packages and then affecting

125
00:07:13,065 --> 00:07:16,475
developers, this highlights the
urgent need for secure coding

126
00:07:16,515 --> 00:07:18,345
practices and dependency management.

127
00:07:18,845 --> 00:07:22,085
And also, right, so the next question,
the next natural question that comes

128
00:07:22,085 --> 00:07:27,005
to our mind is, do generative AI
tools, can they write secure code?

129
00:07:27,005 --> 00:07:31,685
Can they ensure that the code
written, or, is devoid of, you know,

130
00:07:31,785 --> 00:07:33,085
vulnerabilities themselves, right?

131
00:07:33,585 --> 00:07:37,005
On the, on the left, if you ask, chat, GPD
or any other generative a tool, write an

132
00:07:37,005 --> 00:07:40,485
endpoint that turns a file, the generated
code is vulnerable to path revers.

133
00:07:40,485 --> 00:07:44,845
And even if you explicitly make it to
write a secure endpoint, it still doesn't

134
00:07:44,845 --> 00:07:46,375
help because it's still vulnerable, right?

135
00:07:46,375 --> 00:07:52,040
So we should really be careful when trying
to, use the generative AA tools as well.

136
00:07:52,605 --> 00:07:55,495
and look at it from, look at,
look and analyze these scenarios

137
00:07:55,495 --> 00:07:56,825
from the security posture.

138
00:07:57,325 --> 00:08:03,095
So, taking a look at the various software
supply chain security types, supply

139
00:08:03,185 --> 00:08:07,395
chain vulnerabilities include known
CVEs, zero day attacks, even human

140
00:08:07,395 --> 00:08:08,925
errors leading to malicious injections.

141
00:08:09,595 --> 00:08:12,815
Understanding and mitigating these risks
is vital for building security systems.

142
00:08:13,360 --> 00:08:16,970
we'll talk more about this in the upcoming
slides, but, how did all this happen?

143
00:08:16,970 --> 00:08:17,190
Right.

144
00:08:17,200 --> 00:08:19,960
So this is, I mean, by the, by this,
by this point of time, it must have

145
00:08:19,960 --> 00:08:24,450
been pretty evident that the code, a
particular developer rights, contains

146
00:08:24,480 --> 00:08:27,930
probably code artifact and, you know,
some packaging materials and, you

147
00:08:27,930 --> 00:08:29,530
know, some security aspects as well.

148
00:08:29,840 --> 00:08:32,490
But the other stuff that, or
the dependencies that were

149
00:08:32,530 --> 00:08:33,439
pulled in during the build.

150
00:08:33,570 --> 00:08:35,570
Definitely can have a
lot of vulnerabilities.

151
00:08:36,070 --> 00:08:37,040
Moving on to the next slide.

152
00:08:37,670 --> 00:08:40,520
So what can we do better?

153
00:08:40,700 --> 00:08:41,090
Right?

154
00:08:41,090 --> 00:08:44,800
So to combat these issues, I sort
of like, put in a seven step process

155
00:08:44,800 --> 00:08:46,710
here where we educate ourselves.

156
00:08:46,750 --> 00:08:49,750
We don't, we don't rely
solely on public reports.

157
00:08:50,090 --> 00:08:53,470
We manage our dependencies and
permissions, keep up, continuously

158
00:08:53,470 --> 00:08:54,290
maintain our code base.

159
00:08:54,920 --> 00:08:58,290
Regularly scan our libraries and
packages and optimize our CI and CE

160
00:08:58,290 --> 00:09:01,710
deployment, continuous integration,
continuous deployment pipelines to

161
00:09:02,210 --> 00:09:05,690
regular scanning and optimize, but all
these seven steps are equally critical

162
00:09:05,690 --> 00:09:10,760
and these help in com and these seven
steps are, I would say the first step in

163
00:09:10,760 --> 00:09:15,470
the right direction because they help in
combating common vulnerabilities, right?

164
00:09:15,480 --> 00:09:18,330
So if you take a look at common
vulnerabilities, they are cross

165
00:09:18,330 --> 00:09:20,570
site scripting, SQL injection, Yeah.

166
00:09:20,810 --> 00:09:21,590
CSRF.

167
00:09:21,690 --> 00:09:25,530
so organization organizations must
prioritize awareness and adopt

168
00:09:25,530 --> 00:09:30,260
guidelines such as these, such as, such
as provided by organizations from by o

169
00:09:30,260 --> 00:09:32,840
OSP to medicate, medicate those risks.

170
00:09:33,340 --> 00:09:37,830
But this also sets, the path,
or like rewrites how developers

171
00:09:37,890 --> 00:09:38,726
operate on a day to day basis.

172
00:09:39,226 --> 00:09:44,606
so I mean, this whole, this diagram, under
underlines the importance of declaring

173
00:09:44,816 --> 00:09:49,856
dependencies as we write code or as we
build code or as we run code, right?

174
00:09:50,166 --> 00:09:53,196
so if you see the first and third
column are just highlighting the fact

175
00:09:53,196 --> 00:09:56,626
that we have to declare dependencies
before writing and before writing

176
00:09:56,626 --> 00:09:57,696
code and before building code.

177
00:09:58,046 --> 00:10:00,966
And then only code is run and, you
know, it's actually like deployed.

178
00:10:01,466 --> 00:10:04,366
So, diving a bit deeper into
software chain, software supply chain

179
00:10:04,366 --> 00:10:07,716
threat types, CVEs are generally
reported on vulnerabilities.

180
00:10:08,026 --> 00:10:10,296
they can be intentional,
intentional vulnerabilities or

181
00:10:10,296 --> 00:10:11,236
unintentional vulnerabilities.

182
00:10:11,276 --> 00:10:13,346
Intentional, unintentional
vulnerabilities are security bugs.

183
00:10:13,671 --> 00:10:15,601
Intentional vulnerabilities
are a backdoor into the system.

184
00:10:16,181 --> 00:10:21,351
But on the other hand,
malicious payload CV, right?

185
00:10:21,361 --> 00:10:24,781
So this distinction is critical as
you know, we'll talk more about it

186
00:10:24,781 --> 00:10:26,181
in the upcoming upcoming slides.

187
00:10:26,681 --> 00:10:30,051
So how can, how can we
shift left with developers?

188
00:10:30,051 --> 00:10:32,611
So this screenshot, so in one
of the previous organizations I

189
00:10:32,611 --> 00:10:35,941
had worked, we extensively used
artifactory and its ecosystem.

190
00:10:36,321 --> 00:10:39,401
So we, artifactory comes
with a tool called x ray.

191
00:10:39,561 --> 00:10:43,671
So X Ray had its own, plug in
that can be installed in IDEs.

192
00:10:43,951 --> 00:10:46,971
So I'd actually installed the
X Ray plug in in my, in my

193
00:10:46,971 --> 00:10:50,051
PyCharm IDE or my CLion IDE.

194
00:10:50,051 --> 00:10:54,871
And as I was, as I write code, the
X Ray plug in, act, looks out for

195
00:10:54,941 --> 00:10:58,441
vulnerabilities, in my code and then,
you know, reports it into my, reports

196
00:10:58,441 --> 00:11:02,751
it in my developer console that I can
actually like fix and before actually

197
00:11:02,751 --> 00:11:04,561
checking my code into the code repository.

198
00:11:05,061 --> 00:11:09,951
Yeah, another big component, in
ensuring go, you know, ensuring that,

199
00:11:09,971 --> 00:11:13,621
we care about security governance
and during unified deployments is

200
00:11:13,651 --> 00:11:15,001
the software bill of materials.

201
00:11:15,671 --> 00:11:18,031
So what is software bill
of materials, right?

202
00:11:18,071 --> 00:11:19,896
So let's try to understand what that is.

203
00:11:19,896 --> 00:11:23,356
Software Bill of Materials is like a list
of ingredients that makes up what's inside

204
00:11:23,356 --> 00:11:28,366
of the software and different people
look at the software, software bill of

205
00:11:28,396 --> 00:11:30,666
materials with a different lens, right?

206
00:11:30,676 --> 00:11:33,966
So, but before that, it's sort
of, it's a list of ingredients

207
00:11:33,966 --> 00:11:35,436
that make up what the software is.

208
00:11:35,526 --> 00:11:37,196
It includes libraries, modules.

209
00:11:37,936 --> 00:11:41,926
it can be open source or proprietary,
free or paid, and it can be, it can be,

210
00:11:41,986 --> 00:11:45,036
it can also contain data that's widely
available or access restricted, right?

211
00:11:45,566 --> 00:11:49,466
So it, it'll also, also contain,
characteristics like, settings, versions,

212
00:11:49,466 --> 00:11:50,666
environment variables, and so on.

213
00:11:51,266 --> 00:11:55,006
So as I mentioned, different
cons, there are multiple consumers

214
00:11:55,006 --> 00:11:56,766
of software SBOMs, right?

215
00:11:57,026 --> 00:12:02,306
So for those who produce software,
SBOMs are used to assist in the building

216
00:12:02,306 --> 00:12:03,306
and maintenance of their software.

217
00:12:03,306 --> 00:12:03,446
Okay.

218
00:12:03,736 --> 00:12:03,886
Right.

219
00:12:03,886 --> 00:12:07,956
Including upstream components for
those who purchase software, right?

220
00:12:08,396 --> 00:12:13,366
SBOMs are used to inform, pre
purchase assurance or like can help

221
00:12:13,366 --> 00:12:15,806
in negotiating discounts and so on.

222
00:12:15,806 --> 00:12:19,486
For those who operate software, it can
inform them about their vulnerability

223
00:12:19,486 --> 00:12:24,656
management and asset management,
managing, license and, compliance and to

224
00:12:24,696 --> 00:12:28,016
quickly identify software or component
dependencies and supply chain risks.

225
00:12:28,516 --> 00:12:30,961
The overall benefits of SBOM is.

226
00:12:31,461 --> 00:12:36,091
It helps in identifying, mitigating known,
and avoiding known vulnerabilities, right?

227
00:12:36,161 --> 00:12:38,151
And quantifying and managing licenses.

228
00:12:38,471 --> 00:12:42,041
It also helps in enabling
quantification of those risks

229
00:12:42,111 --> 00:12:43,681
inherent in a software package.

230
00:12:44,241 --> 00:12:48,471
It, in the long run, it can also
contribute to lower operating costs.

231
00:12:48,761 --> 00:12:52,106
because it improved efficiencies and
reduced unplanned and unscheduled work.

232
00:12:52,781 --> 00:12:56,021
overall, it provides a compressive,
comprehensive information about

233
00:12:56,031 --> 00:12:59,191
the overall software package and
environment and what setting, you

234
00:12:59,201 --> 00:13:00,491
know, it's actually being used at.

235
00:13:01,311 --> 00:13:05,471
But we'll talk about how SBOM play a
critical role in the unified deployment

236
00:13:05,471 --> 00:13:08,381
pipeline as well, or like how they fit
into the unified deployment pipeline.

237
00:13:08,401 --> 00:13:09,830
When we look at a.

238
00:13:10,781 --> 00:13:11,611
Detail diagram.

239
00:13:12,111 --> 00:13:12,361
Yeah.

240
00:13:12,371 --> 00:13:13,871
So this was the diagram
I was talking about.

241
00:13:14,261 --> 00:13:17,511
so this is, this is one of the
architectures we had implemented in

242
00:13:17,511 --> 00:13:18,791
one of the previous places I'd worked.

243
00:13:19,271 --> 00:13:19,851
So.

244
00:13:20,351 --> 00:13:24,911
So what we decided that since multiple
teams had different deployment strategies,

245
00:13:24,911 --> 00:13:28,111
like I had previously mentioned, when we
started talking about Unified Deployment

246
00:13:28,121 --> 00:13:34,491
Models, there was a movement to move, to
ensure that all teams deployed to, EKS or

247
00:13:34,501 --> 00:13:36,241
like Kubernetes style deployments, right?

248
00:13:36,561 --> 00:13:41,331
So we created this flow where a
developer checks in A piece of code.

249
00:13:41,511 --> 00:13:43,791
And of course, while he checks in
a piece of code, he'll be having

250
00:13:43,791 --> 00:13:47,891
an IDE that is fully furnished
with, x-ray plugin that can detect

251
00:13:47,891 --> 00:13:49,331
vulnerabilities in a very early stage.

252
00:13:49,601 --> 00:13:54,641
And, it, the code is actually checked
into the application code repository and

253
00:13:54,641 --> 00:13:58,151
one, once code is actually checked into
the application code repository, we have

254
00:13:58,151 --> 00:14:01,491
the, CI tool Jenkins, that constantly.

255
00:14:02,096 --> 00:14:05,681
You know, that's a web book listener
to the GitHub, GitHub rep, to the

256
00:14:05,726 --> 00:14:10,166
application code repository can be GitHub
or Bitbucket it, and then it starts,

257
00:14:10,266 --> 00:14:12,216
running the ca build for that branch.

258
00:14:12,726 --> 00:14:16,626
Once the ca build completes, it deploys
an artifact into the contain registry.

259
00:14:16,626 --> 00:14:20,756
Here we use artifacty and there,
depending on the environment, we would

260
00:14:20,756 --> 00:14:22,766
like to deploy that artifact too.

261
00:14:23,136 --> 00:14:27,786
it runs X, it runs X ray scans
based on rules that we have

262
00:14:27,786 --> 00:14:28,956
set for that environment.

263
00:14:29,456 --> 00:14:33,986
Once the scans, finish an S bomb is
generated, which contains all the

264
00:14:33,996 --> 00:14:37,676
details that I previously mentioned
that informs the developer and also the

265
00:14:37,676 --> 00:14:42,113
team as to, whether, that particular
artifact is deployable or not, or

266
00:14:42,173 --> 00:14:43,993
what we could do with that artifact.

267
00:14:44,343 --> 00:14:47,783
Assuming everything is great with
that artifact, the, there is a

268
00:14:47,783 --> 00:14:49,383
deployment orchestrator as well.

269
00:14:49,523 --> 00:14:53,503
The deployment orchestrator,
is you can, visualize it as the

270
00:14:54,073 --> 00:14:55,803
choreographer of all deployments, right?

271
00:14:56,023 --> 00:14:58,393
So the deployment orchestrator
has a webhook listener as well.

272
00:14:58,393 --> 00:15:03,763
And once the S forms generated, it decides
to kickstart the act of deployment.

273
00:15:04,288 --> 00:15:06,928
The deployment orchestrator
then decides to go and talk to a

274
00:15:06,948 --> 00:15:08,848
compliance, compliance advisor service.

275
00:15:09,178 --> 00:15:13,988
The compliance advisor service
over here is, is an open policy

276
00:15:13,988 --> 00:15:18,338
agent that has a set of rules for
any kind of deployment, right?

277
00:15:18,538 --> 00:15:22,438
So these rules are done in a, in a
different language called Lego and,

278
00:15:22,978 --> 00:15:26,528
and every, any deployment across the
org has to adhere to these rules.

279
00:15:26,833 --> 00:15:30,413
So the, the deployment orchestrator,
who's our choreographer of deployments,

280
00:15:30,813 --> 00:15:34,383
goes and asks the compliance advisor,
Hey, can I actually go deploy, deploy

281
00:15:34,383 --> 00:15:38,123
this artifact to this environment, or is
it, is it, is it following all the rules?

282
00:15:38,563 --> 00:15:42,183
And once it gets a response to, you
know, assuming we get, assuming we

283
00:15:42,183 --> 00:15:46,668
get a response saying like you can
deploy, it's, it begins to start.

284
00:15:47,608 --> 00:15:50,608
you know, checking in the HEM
release manifest or the Kubernetes,

285
00:15:50,648 --> 00:15:53,008
appropriate Kubernetes manifest
to the GitOps repository.

286
00:15:53,748 --> 00:15:57,628
And once that manifest, you know,
actually gets checked in, we have,

287
00:15:57,988 --> 00:16:01,638
we typically use Argo CD or Flux
CD to, to manage our deployments.

288
00:16:01,938 --> 00:16:04,878
And then the Argo CD or Flux CD
constantly listens to the GitOps

289
00:16:05,288 --> 00:16:07,168
repository every 30 seconds or 60 seconds.

290
00:16:07,168 --> 00:16:11,448
It then decides to apply that, you
know, manifest onto the cluster

291
00:16:11,768 --> 00:16:14,858
by which resources actually
get deployed into AWS, Azure.

292
00:16:15,473 --> 00:16:17,953
or any other environment
that 13 cares about.

293
00:16:18,763 --> 00:16:23,083
So this is the, this is the, this is
a very zoomed out high level flow, but

294
00:16:23,113 --> 00:16:28,483
as we actually dive deep into every
component of interest in this diagram,

295
00:16:28,983 --> 00:16:37,108
there are multiple layers of policies that
map to security, governance, you know,

296
00:16:37,108 --> 00:16:38,898
unification of, deployment and so on.

297
00:16:38,908 --> 00:16:42,208
For example, if you take, if you
zoom a bit into the artifactory,

298
00:16:42,598 --> 00:16:47,908
the, the folder structure, is, neatly
manipulated based on the environment,

299
00:16:47,968 --> 00:16:49,478
the artifact should be deployed to.

300
00:16:49,698 --> 00:16:53,758
Each folder structure, each folder,
is, you know, tightly, set, tightly

301
00:16:53,758 --> 00:16:55,568
follows RBAC policies that have been set.

302
00:16:55,973 --> 00:17:00,823
And accessing artifactory itself, is,
highly restrictive, and is, you know, is

303
00:17:00,823 --> 00:17:04,993
managed by IAM policies and credentials
that are only, that are also, that

304
00:17:05,003 --> 00:17:06,373
have restrictive access and so on.

305
00:17:06,703 --> 00:17:09,823
So, the point I'm trying to drive home
is that, this is a very zoomed out

306
00:17:09,853 --> 00:17:14,303
view and then, It, there are multiple
layers to this diagram as we like.

307
00:17:14,303 --> 00:17:15,923
Dive deep, dive, deep dive.

308
00:17:16,423 --> 00:17:17,443
Moving on to the next slide.

309
00:17:17,513 --> 00:17:21,583
let's talk a bit about governance
and how this, how the governance

310
00:17:21,583 --> 00:17:25,933
fits into how, how the governance
fits into this entire puzzle.

311
00:17:26,203 --> 00:17:29,443
Or rather, if you, if you visualize
this as like Lego pieces, how all

312
00:17:29,443 --> 00:17:31,713
the Lego pieces fit together, right?

313
00:17:32,553 --> 00:17:37,433
So, so, I mean, yeah, so governance,
is not just a buzzword, right?

314
00:17:37,443 --> 00:17:42,693
So governance, helps, it's about ensuring
that every deployment aligns with security

315
00:17:42,693 --> 00:17:44,283
standards and has clear ownership.

316
00:17:44,713 --> 00:17:47,233
This minimizes risks and
streamlines operations.

317
00:17:47,733 --> 00:17:52,573
On one side, unified deployments help
ensure governance by incorporating

318
00:17:52,643 --> 00:17:56,073
auditability, compliance, and
accountability into the pipelines,

319
00:17:56,303 --> 00:17:57,523
as we saw in the previous diagram.

320
00:17:57,983 --> 00:18:01,373
The unified deployment framework
allows us to detect issues early

321
00:18:01,373 --> 00:18:02,863
and enforce standards effectively.

322
00:18:03,573 --> 00:18:06,753
Governance is about minimizing risks
and streamlining the operations.

323
00:18:07,483 --> 00:18:09,983
Governance plays a pivotal role.

324
00:18:10,483 --> 00:18:13,013
Unified Deployments align
with organizational and

325
00:18:13,013 --> 00:18:13,983
regulatory requirements.

326
00:18:14,483 --> 00:18:20,503
Let's talk about the some key components
of governance and also talk about some

327
00:18:20,513 --> 00:18:24,723
real world examples of what how they are
actually like implemented or enforced.

328
00:18:25,073 --> 00:18:27,678
So when we talk about governance,
we have to talk about auditability.

329
00:18:27,938 --> 00:18:31,198
You want to talk about complaints
with standards, clear ownership and

330
00:18:31,198 --> 00:18:35,338
accountability, centralized logging
and metrics, policy informants,

331
00:18:35,388 --> 00:18:37,268
enforcements, and, continuous monitoring.

332
00:18:37,848 --> 00:18:42,468
So when we talk about auditability,
auditability is about the ability to

333
00:18:42,748 --> 00:18:47,538
track who performed specific actions,
what changes were made, who made those

334
00:18:47,538 --> 00:18:49,918
changes and when, when they occurred.

335
00:18:50,378 --> 00:18:53,008
The importance of
auditability, auditability is.

336
00:18:53,408 --> 00:18:58,118
It provides transparency in the deployment
process, aids in troubleshooting issues

337
00:18:58,138 --> 00:19:00,058
by tracing the errors to specific changes.

338
00:19:00,478 --> 00:19:03,488
And it's, essential for,
regulatory and internal audits.

339
00:19:03,978 --> 00:19:07,318
So recollecting from memory,
talking about a regular example.

340
00:19:07,993 --> 00:19:10,603
Deployment logs are stored
in an, in an deployment.

341
00:19:10,603 --> 00:19:13,333
Logs are stored in an
immutable data source.

342
00:19:13,603 --> 00:19:17,233
Like for example, if you take like
Amazon S3 with versioning and link

343
00:19:17,233 --> 00:19:19,133
to specific and GitHub, right?

344
00:19:19,133 --> 00:19:20,273
So these are auditable.

345
00:19:20,773 --> 00:19:23,773
Now let's talk about like
compliance and standards, right?

346
00:19:23,778 --> 00:19:23,788
So.

347
00:19:24,288 --> 00:19:27,678
The reason why compliance and standards
matter is that regulatory frameworks

348
00:19:27,688 --> 00:19:33,708
like GDPR, HIPAA, mandate adherence to
specific security and privacy standards.

349
00:19:34,028 --> 00:19:36,858
Non compliance to these standards
can actually result in hefty

350
00:19:36,858 --> 00:19:39,818
fines, reputational damage,
and even legal repercussions.

351
00:19:40,428 --> 00:19:45,298
So, it's very essential that we
encrypt sensitive data, ensure that

352
00:19:45,328 --> 00:19:49,668
there are retention policies for
logs and, You know, other artifacts,

353
00:19:49,728 --> 00:19:52,888
that follow on all artifacts
aligned with the duty requirements.

354
00:19:53,388 --> 00:19:56,338
And we, I mean, there are tools
available to ensure this happens.

355
00:19:56,368 --> 00:20:01,198
Like, for example, if you take, HashiCorp
Sentinel or AWS config rules, they can

356
00:20:01,198 --> 00:20:02,898
automate complaints validation, right?

357
00:20:03,158 --> 00:20:06,878
a real world example would be, Kubernetes,
Kubernetes, admission controllers

358
00:20:06,908 --> 00:20:11,088
enforce SOC2 policies, ensuring
containers are scanned and certified

359
00:20:11,088 --> 00:20:12,428
before actual deployment takes place.

360
00:20:12,928 --> 00:20:15,368
Moving on, let's talk, clear
ownership and accountability.

361
00:20:15,378 --> 00:20:18,248
I mean, this is very evident
from the name itself.

362
00:20:18,248 --> 00:20:23,303
It assigns very clear rules, to
ensure unauthorized, changes, do not

363
00:20:23,303 --> 00:20:27,253
happen and you know, and so overall
accountability is ensured, right?

364
00:20:27,303 --> 00:20:30,713
We do that through setting our back
row role based access control rules.

365
00:20:31,048 --> 00:20:35,438
Defining ownerships using IAM policies
or Kubernetes namespaces, right?

366
00:20:35,798 --> 00:20:39,748
So for example, one of the ways it is,
one of the main, one of the ways it

367
00:20:39,748 --> 00:20:43,408
is enforced is developers have access
only to staging environments when

368
00:20:43,408 --> 00:20:47,328
operations teams, operation teams handle
production and production deployments.

369
00:20:47,878 --> 00:20:49,208
And then we have three more, right?

370
00:20:49,458 --> 00:20:52,458
Policy informa policy
enforcements, centralized logging,

371
00:20:52,458 --> 00:20:53,318
and continuous monitoring.

372
00:20:53,878 --> 00:20:57,728
Policy enforcements, as you as shown
in, like, one of the previous diagrams,

373
00:20:57,728 --> 00:21:00,308
like, we had a separate tool called
Compliance Advisor Service, right?

374
00:21:00,658 --> 00:21:04,648
So, policy informants are typically
done through open policy agents.

375
00:21:04,938 --> 00:21:07,938
They enforce policies across
Kubernetes clusters, or,

376
00:21:07,938 --> 00:21:09,768
like, CICD pipelines and APIs.

377
00:21:10,188 --> 00:21:14,008
We can also have, AWS config, which
continuously assesses configurations

378
00:21:14,018 --> 00:21:15,898
against given set of complaints rules.

379
00:21:16,318 --> 00:21:19,248
and as previously mentioned, we can also
have, Kubernetes admission controllers

380
00:21:19,248 --> 00:21:20,538
that validate deployments during runtime.

381
00:21:21,038 --> 00:21:26,308
With regard to centralized logging, some,
teams have their own, single source of

382
00:21:26,338 --> 00:21:28,068
truth to aggregate logs and metrics.

383
00:21:28,413 --> 00:21:32,623
But the commonly most used tools
are Datadog, AWS CloudWatch, or,

384
00:21:32,673 --> 00:21:34,203
you know, a typical ELK stack.

385
00:21:34,703 --> 00:21:37,653
Centralized logging, like, for example,
if you take a Kubernetes setup,

386
00:21:37,803 --> 00:21:43,288
logs from the Kubernetes pipelines
are aggregated using the ELK stack.

387
00:21:43,458 --> 00:21:47,408
Providing a single pane of glass
for analysis or dashboarding or, you

388
00:21:47,408 --> 00:21:48,628
know, generating metrics and so on.

389
00:21:49,568 --> 00:21:53,498
But doing all, I mean, I also put
it, put the final one at the top

390
00:21:53,498 --> 00:21:55,538
layer, which is the continuous
monitoring and feedback loops.

391
00:21:55,538 --> 00:21:58,348
And if you look at the diagram,
right, it's like a top down approach.

392
00:21:58,658 --> 00:22:02,278
Top one is probably one of the most
important ones, which is Governance

393
00:22:02,278 --> 00:22:03,898
should not be like a one time activity.

394
00:22:03,988 --> 00:22:06,508
it needs to, it should, it
should be an ongoing process.

395
00:22:06,728 --> 00:22:10,908
So we need to, we need to have feedback
loops where we regularly review governance

396
00:22:10,908 --> 00:22:13,958
policies and adapt them based on
changing requirements and environments.

397
00:22:14,338 --> 00:22:17,698
We have to incorporate feedback
from security teams, developers, and

398
00:22:17,698 --> 00:22:19,398
auditors to refine the overall process.

399
00:22:19,888 --> 00:22:23,178
with regard to continuous monitoring,
we can use tools like Prometheus,

400
00:22:23,208 --> 00:22:25,983
which monitors resource utilization,
while Datadog, alerts, and others.

401
00:22:26,333 --> 00:22:29,533
On unusual deployment patterns
moving on to the next.

402
00:22:29,553 --> 00:22:32,623
So I hope that, you know, painted a
picture on what we mean by governance

403
00:22:32,623 --> 00:22:36,943
and how it really fits into the piece
of unified by unified deployment

404
00:22:36,953 --> 00:22:39,953
pipelines and the whole security angle.

405
00:22:40,453 --> 00:22:43,863
So what is our way forward or like, what's
the future direction that we want to

406
00:22:43,873 --> 00:22:48,573
take regarding this is, looking ahead,
we can enhance, DevSecOps pipelines by

407
00:22:48,573 --> 00:22:53,243
integrating threat modeling, container
security, continuous, feedback loops.

408
00:22:53,513 --> 00:22:57,043
These make security an intrinsic
part of the, intrinsic part of every

409
00:22:57,043 --> 00:22:59,143
stage of the SDLC processes, right?

410
00:22:59,143 --> 00:23:02,363
So we can plan and code, build and
test, release and deploy, operate and

411
00:23:02,373 --> 00:23:03,483
monitor, and feedback and improve.

412
00:23:03,483 --> 00:23:06,053
At every stage, we care about
security, governance, and

413
00:23:06,053 --> 00:23:07,133
unifying all the deployments.

414
00:23:07,418 --> 00:23:10,648
So that we have a single source of
truth and we can generate metrics

415
00:23:10,648 --> 00:23:15,278
and have an established feedback
loops so that we iteratively improve

416
00:23:15,378 --> 00:23:17,258
our overall deployment pipelines.

417
00:23:17,758 --> 00:23:21,628
Overall key takeaway, is, security
is everyone's responsibility.

418
00:23:22,008 --> 00:23:24,718
automation integration are
key to embedding security

419
00:23:24,728 --> 00:23:26,358
in the CI and CD pipelines.

420
00:23:26,898 --> 00:23:30,558
We have to design for failure or like
consider, and adopt, you know, strategies

421
00:23:30,558 --> 00:23:32,438
like multi AZ or multi region strategies.

422
00:23:32,688 --> 00:23:36,808
We have, we need to have well architected
reviews and also even like some sort of,

423
00:23:37,298 --> 00:23:41,538
put some sort of kiosk into the mix and
continuously improving our practices and

424
00:23:41,538 --> 00:23:44,088
ensure robust and reliable deployments.

425
00:23:44,588 --> 00:23:47,558
I did, I added a few references
that helped me, that helped me, I

426
00:23:47,558 --> 00:23:50,758
encourage you to explore resources
like, the OWASP, Kubernetes logs,

427
00:23:51,028 --> 00:23:55,058
and also JFrog conferences for deeper
insights, in securing deployments

428
00:23:55,058 --> 00:23:56,668
and improving overall governance.

429
00:23:57,068 --> 00:23:58,848
thank you for, thank you so
much for attending my talk.

430
00:23:59,748 --> 00:24:00,038
Thank you.

