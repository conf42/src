1
00:00:00,100 --> 00:00:00,730
Hi, everyone.

2
00:00:00,740 --> 00:00:01,540
Daniel Moya here.

3
00:00:01,900 --> 00:00:04,010
In this session, we will
talk about Dimensigon.

4
00:00:04,260 --> 00:00:09,059
It's a decentralized automation tool
that enables RESTful API in all your

5
00:00:09,059 --> 00:00:15,019
servers, and it has a command line
interface that is so cool because it

6
00:00:15,040 --> 00:00:21,540
has a tab and you can autocomplete,
you can quickly Distributed commands,

7
00:00:21,540 --> 00:00:27,325
pull software from anywhere to any
other place and create orchestrations

8
00:00:27,445 --> 00:00:30,175
so fast with just few commands.

9
00:00:30,525 --> 00:00:34,445
Dimensicon is our company name, but
it's also the name of this technology.

10
00:00:34,825 --> 00:00:40,605
We also call it DM and this serves very
much when you have two or more, subnets.

11
00:00:40,760 --> 00:00:46,960
Or data centers that are connected through
very specific points, and you want to

12
00:00:46,960 --> 00:00:50,200
manage them as a unique group of servers.

13
00:00:50,590 --> 00:00:52,200
We call that a dimension.

14
00:00:52,570 --> 00:00:57,680
Yes, this we can easily,
do inter server operations.

15
00:00:57,680 --> 00:01:02,780
So we can do operation one in server
one over here, another one over here.

16
00:01:03,160 --> 00:01:07,690
Or also coordinate when some event
is triggering an, an automation that

17
00:01:07,690 --> 00:01:12,225
it helps to execute something on
the other side of, of the network.

18
00:01:12,725 --> 00:01:16,625
Also, we can execute a ADOC
or standalone automations.

19
00:01:16,625 --> 00:01:20,515
And also we can distribute, do
distribute commands that we will

20
00:01:20,545 --> 00:01:22,125
see this functionality further.

21
00:01:22,625 --> 00:01:26,885
About the architecture, we have one
repository in GitHub that it contains

22
00:01:27,015 --> 00:01:28,735
all these three components at the moment.

23
00:01:29,165 --> 00:01:33,105
dmCore is a Python flask,
it enables the RESTful API.

24
00:01:33,625 --> 00:01:39,835
The elevator, it upgrades when there is,
detect, there is, another new version.

25
00:01:40,165 --> 00:01:45,525
Inside the network, then it spreads
the new version to the others.

26
00:01:45,965 --> 00:01:51,355
If of course you configure as such,
DL is a common line interface that

27
00:01:51,355 --> 00:01:57,285
translates all your commands into
restful API to interact with the DM core.

28
00:01:57,975 --> 00:02:03,525
And we have a plan for, adding the web
manager, graphical user interface to build

29
00:02:03,525 --> 00:02:09,165
a metadata that it's in the data in the
distributed database that we implement.

30
00:02:09,665 --> 00:02:13,295
In Docker, we can create the
subnets with this command here.

31
00:02:13,645 --> 00:02:17,715
And after that, we create
our bridge container that is

32
00:02:17,715 --> 00:02:19,725
connected to both subnets.

33
00:02:20,285 --> 00:02:25,425
And later, we can create also our
containers from each subnet that

34
00:02:25,505 --> 00:02:30,905
represents a datacenter or a separated
network that you have in your company.

35
00:02:31,405 --> 00:02:35,175
Coming to SSH, we can
just execute all this.

36
00:02:35,750 --> 00:02:41,020
You will create quickly the five
containers we can connect to our

37
00:02:41,020 --> 00:02:42,600
first to create the dimension.

38
00:02:43,100 --> 00:02:45,730
Let me show you in the
presentation in the dimension.

39
00:02:46,230 --> 00:02:48,930
In Dimensiigon, we create
with Dimensiigon new.

40
00:02:49,710 --> 00:02:53,570
This is like a cluster, as we
say, it is a group of servers.

41
00:02:54,020 --> 00:02:59,140
Usually, our recommendation is
to create one per life cycle.

42
00:02:59,380 --> 00:03:05,330
The production, pre production or
development is the best way you can

43
00:03:05,330 --> 00:03:07,950
do for organization and for security.

44
00:03:08,450 --> 00:03:15,855
Coming back, we can Sect DM zero VASH
minus L to load the environment in here.

45
00:03:16,355 --> 00:03:22,195
It will ask for the root password, but
it's not root from operative system

46
00:03:22,195 --> 00:03:24,995
is root inside the command line.

47
00:03:25,330 --> 00:03:29,240
And you will see that just we
put something for the test.

48
00:03:29,480 --> 00:03:31,230
It will provide us a join token.

49
00:03:32,020 --> 00:03:33,860
This we can use in any other machine.

50
00:03:34,240 --> 00:03:37,340
For example, here we
can go to the other one.

51
00:03:38,100 --> 00:03:47,710
And nsx it dm1 bash l In here
we can do Dimensigon, join.

52
00:03:48,680 --> 00:03:52,510
We have to see from the
first, this first subnet.

53
00:03:53,290 --> 00:03:56,030
We copy paste and the token.

54
00:03:56,915 --> 00:03:59,855
In here, of course,
it's not yet listening.

55
00:03:59,855 --> 00:04:04,785
So we have to do no hub,
Dimensiigon in background.

56
00:04:05,725 --> 00:04:06,385
There you go.

57
00:04:06,645 --> 00:04:10,355
Then we can just join the
Dimensiigon, the Dimension.

58
00:04:10,735 --> 00:04:13,725
Once we join, I will repeat this
operation to the other servers.

59
00:04:13,765 --> 00:04:15,845
When I am done, we will continue.

60
00:04:16,345 --> 00:04:21,495
As you will receive this message of join
the dimension, the other joins you can

61
00:04:21,495 --> 00:04:23,375
execute, of course, from the other nodes.

62
00:04:23,375 --> 00:04:27,145
But in this case, as we have
one node as a bridge, I will

63
00:04:27,145 --> 00:04:29,245
execute them all from the DM0.

64
00:04:29,745 --> 00:04:35,035
For this training, we recommend
using Docker and we can simulate two.

65
00:04:35,265 --> 00:04:40,355
Networks with one server in
the middle that will act as a

66
00:04:40,365 --> 00:04:43,025
bridge is very easy with docker.

67
00:04:43,525 --> 00:04:48,495
We can imagine this network, for
example, as one cloud provider

68
00:04:48,515 --> 00:04:51,195
or one data center on this one.

69
00:04:51,235 --> 00:04:51,895
It can be.

70
00:04:51,985 --> 00:04:53,785
I can represent another data center.

71
00:04:54,105 --> 00:04:59,105
On prem, cloud, it doesn't matter as
long as you understand that these servers

72
00:04:59,135 --> 00:05:03,485
didn't have a communication with these
servers and the communication goes through

73
00:05:03,685 --> 00:05:09,355
DM for our automations and everything
we can create it as, two networks in

74
00:05:09,365 --> 00:05:11,695
Docker and then create our machines.

75
00:05:12,095 --> 00:05:16,235
this, this image is a
very publicly available.

76
00:05:16,255 --> 00:05:19,215
You can pull it at any
time for each new server.

77
00:05:19,215 --> 00:05:21,045
You have to secure them and see gone.

78
00:05:21,665 --> 00:05:22,075
Token.

79
00:05:22,735 --> 00:05:24,675
There are three ways of executing this.

80
00:05:25,095 --> 00:05:28,495
Another one is through RESTful
and from the command line.

81
00:05:28,995 --> 00:05:32,125
Or, and this one as
well, from the DM core.

82
00:05:32,625 --> 00:05:34,835
It generates a token for a new server.

83
00:05:34,835 --> 00:05:36,355
The token can be used only once.

84
00:05:36,555 --> 00:05:41,675
So we have to generate one token for
each new server from any other server

85
00:05:41,675 --> 00:05:43,785
that is already part of this group.

86
00:05:44,285 --> 00:05:45,245
Adding the last one.

87
00:05:45,685 --> 00:05:47,595
We have to copy our token as before.

88
00:05:48,055 --> 00:05:49,435
We are using the second subnet.

89
00:05:49,935 --> 00:05:51,585
And then it's playing about.

90
00:05:52,085 --> 00:05:54,975
The decentralization and
distributed management.

91
00:05:55,315 --> 00:05:59,715
When we are adding each of these
servers, we can administrate from

92
00:05:59,765 --> 00:06:05,445
any of them, any other or all the
others, all of them as a group.

93
00:06:06,435 --> 00:06:08,665
This is called a dimension dimension.

94
00:06:09,185 --> 00:06:15,345
This cluster, then it's already with
some logics to handle the split brain

95
00:06:15,415 --> 00:06:17,775
in case there is a network instability.

96
00:06:18,205 --> 00:06:22,115
And also it has mechanism to
keep the metadata consistent

97
00:06:22,125 --> 00:06:23,655
between the surviving group.

98
00:06:24,155 --> 00:06:28,585
This is all a distributed database
built on top of SQL Alchemy.

99
00:06:29,085 --> 00:06:36,765
Coming back to our command line, we
have now all the servers up and running.

100
00:06:37,765 --> 00:06:43,765
You can see here that there is a. That
D shell where it contains at the moment

101
00:06:44,005 --> 00:06:48,755
just the username and server default
to connect because you can Download

102
00:06:48,855 --> 00:06:53,885
the software and connect to another
server Where is running the mensegon

103
00:06:53,885 --> 00:06:56,275
and not exactly to the local host.

104
00:06:56,875 --> 00:06:57,545
You can do that.

105
00:06:58,125 --> 00:07:05,365
In this case, we just, Dcl, we are not
yet connected, but we can do login safe.

106
00:07:06,305 --> 00:07:11,535
Then when we input our password, you can
see here that our token will be safe.

107
00:07:11,865 --> 00:07:15,925
And next time we can
directly execute by tap.

108
00:07:16,550 --> 00:07:18,410
We can execute any of this command.

109
00:07:18,620 --> 00:07:20,040
We are already log in.

110
00:07:20,460 --> 00:07:22,360
First of all, we will do the status.

111
00:07:23,220 --> 00:07:25,550
You see with the tab, it auto completes.

112
00:07:25,920 --> 00:07:28,220
For example, I use this.

113
00:07:29,030 --> 00:07:32,420
And we have, this is the
version of the catalog.

114
00:07:32,420 --> 00:07:34,400
This is the metadata of the database.

115
00:07:35,060 --> 00:07:37,110
And the server is in here.

116
00:07:37,470 --> 00:07:37,900
Yes.

117
00:07:38,270 --> 00:07:42,300
We can continuously add the others by tab.

118
00:07:42,800 --> 00:07:48,530
And the important thing is to see
the catalog and to control that the

119
00:07:48,530 --> 00:07:50,680
catalog should be in the same version.

120
00:07:51,380 --> 00:07:57,615
If not, We have something to
execute, the manager catalog refresh.

121
00:07:58,245 --> 00:08:01,325
This will detect if there is a new
catalog in the network and it will

122
00:08:01,925 --> 00:08:04,525
pull the catalog to our location.

123
00:08:05,025 --> 00:08:09,635
You have to execute this manager catalog
refresh from another server where it's

124
00:08:09,635 --> 00:08:12,995
in a minor version or an older version.

125
00:08:13,365 --> 00:08:18,890
Then it will retrieve the latest
catalog from any of the networks.

126
00:08:19,390 --> 00:08:24,110
Additionally, it has a mechanism
to auto update the catalog when

127
00:08:24,110 --> 00:08:25,900
it has found a new version.

128
00:08:26,270 --> 00:08:33,180
You will find this into the nohub or
the loch from the dimensicon process.

129
00:08:34,170 --> 00:08:38,090
Coming back to the presentation, once
you have two or more nodes, it's more

130
00:08:38,140 --> 00:08:43,170
interesting because you can have Some
commands that make sense when you have not

131
00:08:43,170 --> 00:08:46,730
only one server, but more to administrate.

132
00:08:47,440 --> 00:08:54,180
DCL was the, was developed on top of
Promptoolkit with other components that

133
00:08:54,180 --> 00:08:57,300
you may see in the repository or the PYPI.

134
00:08:58,180 --> 00:09:02,050
And we will go through all the
different commands that we have here.

135
00:09:02,550 --> 00:09:07,535
But first of all, I want to
Explain more about our units.

136
00:09:07,595 --> 00:09:13,145
The hierarchy that we have is one,
orchestration is one automation.

137
00:09:13,535 --> 00:09:16,915
We can create the steps inside and step.

138
00:09:17,005 --> 00:09:22,825
We have to define actions to have some
sort of reusability so we can reuse these

139
00:09:22,825 --> 00:09:25,135
actions into many other orchestration.

140
00:09:25,225 --> 00:09:31,015
We can also reuse orchestration as
one step into another orchestration.

141
00:09:31,400 --> 00:09:35,540
Also, we have a step and do the step
and do we have to define in which

142
00:09:35,540 --> 00:09:40,530
condition we consider than the that the
orchestration is failing and then it

143
00:09:40,530 --> 00:09:46,150
will execute the step and do also in
the order that we wish to, to execute.

144
00:09:46,650 --> 00:09:51,040
We have a repository that we call
orchestration library in there.

145
00:09:51,340 --> 00:09:57,450
We wish that everyone can share their
JSON that, it can they can easily be

146
00:09:57,480 --> 00:09:59,530
imported into the command line interface.

147
00:09:59,530 --> 00:10:02,470
And once you import the JSON,
you can navigate through the

148
00:10:02,470 --> 00:10:06,220
command line interface through
the steps and modify them.

149
00:10:06,650 --> 00:10:11,760
If you modify an orchestration, there is
a versioning mechanism that it will create

150
00:10:11,770 --> 00:10:16,030
a new version of the orchestration instead
of overwriting the current version.

151
00:10:16,880 --> 00:10:20,500
This is made for consistency.

152
00:10:20,925 --> 00:10:23,025
between your automations.

153
00:10:23,315 --> 00:10:27,755
So you know that there is
some immutability to the

154
00:10:27,755 --> 00:10:29,145
version that you were using.

155
00:10:29,565 --> 00:10:33,525
And in case someone creates
a modification, it's a new

156
00:10:33,525 --> 00:10:34,925
version inside the catalog.

157
00:10:35,425 --> 00:10:41,445
As explained before, there is a catalog
that it's spreading over your network of

158
00:10:41,455 --> 00:10:43,565
servers that you manage with Dimensiigon.

159
00:10:44,225 --> 00:10:50,140
These Is when you create something,
new that can action, orchestration,

160
00:10:50,580 --> 00:10:55,490
lock federation and software
that are added to the library,

161
00:10:56,180 --> 00:10:57,810
any of these operations will it.

162
00:10:58,310 --> 00:11:03,820
Higher the watermark of the catalog and
with the time it will be distributed.

163
00:11:04,110 --> 00:11:09,730
If there is a need for immediate
distribution due to an orchestration

164
00:11:10,270 --> 00:11:14,600
execution or so, then it
will come in the background.

165
00:11:15,100 --> 00:11:16,690
Let's jump into our first demo.

166
00:11:16,690 --> 00:11:21,220
We will create the typical
hello world of this.

167
00:11:21,630 --> 00:11:25,960
Very simple, just with the,
A command line interface.

168
00:11:26,270 --> 00:11:28,600
This is a summary of
what you have to type.

169
00:11:29,100 --> 00:11:33,160
Let's go into the SSH to
test it with the D Shell.

170
00:11:33,660 --> 00:11:37,620
At D Shell, first of all, we have to
create the action that we will use to

171
00:11:37,620 --> 00:11:39,870
populate one step into the orchestration.

172
00:11:40,480 --> 00:11:43,280
Then we have to just type action create.

173
00:11:43,560 --> 00:11:48,510
You see, I can tap and also I can
use the minus H in any sub option.

174
00:11:49,010 --> 00:11:51,540
Then we can do action create.

175
00:11:51,995 --> 00:11:57,805
We need a name that it can be a hello
world to make it the same as example

176
00:11:58,245 --> 00:12:06,135
and then type shell some comment here
we can shell python ansible then we can

177
00:12:06,185 --> 00:12:12,425
easily integrate with any playbook in
ansible and there are some special call

178
00:12:12,685 --> 00:12:17,505
request and also we have some other
internals that I will show you later.

179
00:12:18,005 --> 00:12:24,665
then as, as such, we will start then
in any, in any command, we can just

180
00:12:24,685 --> 00:12:27,205
type minus H. We will see our options.

181
00:12:27,535 --> 00:12:30,025
We can preview what we are doing.

182
00:12:30,155 --> 00:12:35,505
Instead, there is an interesting minus
H because you can see All the parameters

183
00:12:35,505 --> 00:12:42,065
here that you can modify, apart from the
name, the version, the type we can, we can

184
00:12:42,075 --> 00:12:48,635
modify and go to all the other type that
from what we have initially, configured

185
00:12:49,055 --> 00:12:55,895
the expected is standard out or also
the expected, the expected return code

186
00:12:56,565 --> 00:12:58,945
and some other more complex parameters.

187
00:12:59,145 --> 00:13:01,685
Topics that we won't
discuss in a hello world.

188
00:13:02,185 --> 00:13:04,715
Then from here, we can
just simple set code.

189
00:13:05,215 --> 00:13:10,895
The easy here we will do in
vi echo and then hello from

190
00:13:11,255 --> 00:13:12,965
we can directly use variables.

191
00:13:12,965 --> 00:13:14,335
We have also a vault.

192
00:13:14,885 --> 00:13:16,845
Okay, let me put an exclamation.

193
00:13:17,235 --> 00:13:18,875
Then like this, we can just save it.

194
00:13:19,445 --> 00:13:23,855
Then in here, we can preview
and also we can submit.

195
00:13:24,115 --> 00:13:27,915
Submit will create a new
item in the repository.

196
00:13:27,935 --> 00:13:34,275
Then it will make the catalog to
higher the watermark a bit more.

197
00:13:35,205 --> 00:13:36,125
When we submit.

198
00:13:36,450 --> 00:13:38,970
We got some ID.

199
00:13:39,470 --> 00:13:41,770
Pay attention to this 880.

200
00:13:42,370 --> 00:13:47,670
Then, for example, if we
do action list and by name.

201
00:13:48,170 --> 00:13:51,520
We will see that we have
some other internal actions

202
00:13:51,770 --> 00:13:52,880
that we will explain later.

203
00:13:53,480 --> 00:13:55,110
But our hello world is there.

204
00:13:55,840 --> 00:13:59,350
Then we can, of course, list
and see the contents of this.

205
00:13:59,780 --> 00:14:06,770
Of course, you can action and
then load from a JSON in here.

206
00:14:07,110 --> 00:14:08,760
It will be a file with the absolute.

207
00:14:09,260 --> 00:14:15,080
path and you can upload actions
defined by any other colleague or so.

208
00:14:15,810 --> 00:14:21,640
Then when we have our action already we
can go into org then we see our options

209
00:14:21,680 --> 00:14:28,330
we can list we may not have anything at
the moment but we are about to create

210
00:14:28,330 --> 00:14:33,590
it a hello world also with the same name
has no problem with the it's a different

211
00:14:33,600 --> 00:14:40,550
type of entity then When we have a, oh
yes, I did a list, hello world, there

212
00:14:40,550 --> 00:14:46,810
is no list, hello world, we have to do
a create, hello world, then over here

213
00:14:46,810 --> 00:14:53,180
there is nothing more that we need to
modify or create, name, hello world,

214
00:14:54,125 --> 00:14:57,545
Then in here is a bit more options.

215
00:14:57,795 --> 00:15:00,785
We have also the step option in this step.

216
00:15:01,195 --> 00:15:05,705
We have to start with
the step and do or undo.

217
00:15:05,965 --> 00:15:09,575
We can define in any order
they undo first or whatever.

218
00:15:09,585 --> 00:15:14,895
We will define the order also
later in case we need an undo.

219
00:15:14,925 --> 00:15:18,805
But then let's do our first
step do to move forward.

220
00:15:18,915 --> 00:15:20,755
We see a one on the command line.

221
00:15:21,315 --> 00:15:23,395
Then when we have this, we can select.

222
00:15:23,895 --> 00:15:29,315
Action, look, I will copy paste, select
minus eight, set action template ID,

223
00:15:29,815 --> 00:15:36,505
then when we are here, I can just tap
and we see our ID with the translation

224
00:15:36,575 --> 00:15:42,505
of the name we, we gave in the
action definition is a version one.

225
00:15:43,005 --> 00:15:46,575
When we select this, we
can just also preview.

226
00:15:47,075 --> 00:15:50,375
We see our, our guy there and submit.

227
00:15:50,875 --> 00:15:55,925
With it, oh yes, of course,
save first, then submit.

228
00:15:56,425 --> 00:15:59,455
With this operation we create
our first orchestration.

229
00:15:59,955 --> 00:16:04,475
Then we can org list by name, hello world.

230
00:16:05,005 --> 00:16:07,245
We have this orchestration.

231
00:16:07,885 --> 00:16:12,085
Also we have the detail that
it provides in the steps.

232
00:16:12,585 --> 00:16:16,345
Our action that we define
type shell and what it does.

233
00:16:17,055 --> 00:16:17,455
Yes.

234
00:16:17,545 --> 00:16:17,785
Okay.

235
00:16:18,155 --> 00:16:24,465
So in this regard, when we need to
create more, we can do it or copy.

236
00:16:24,625 --> 00:16:27,845
You will create the version
two when we need to load from

237
00:16:27,845 --> 00:16:29,685
a JSON file, we will do a load.

238
00:16:30,315 --> 00:16:30,755
Yes.

239
00:16:31,045 --> 00:16:31,705
And that's it.

240
00:16:32,085 --> 00:16:36,785
And also when we do a copy and
a tab with the orchestration.

241
00:16:37,415 --> 00:16:37,855
Yes.

242
00:16:38,065 --> 00:16:41,915
Then we can, we have
one option called dump.

243
00:16:42,595 --> 00:16:50,785
If we do the dump, we can do dump h,
dump, hello world, hello json, yes.

244
00:16:51,285 --> 00:16:57,595
And then we can exit and exit over
here and you will see, hello world.

245
00:16:58,095 --> 00:17:04,745
This will be our definition that we can do
the orchestration load and load this file.

246
00:17:05,420 --> 00:17:09,060
But we haven't had to
create the JSON in the past.

247
00:17:09,060 --> 00:17:14,680
So we generate JSON, but from command
line is like we navigate them easy.

248
00:17:15,430 --> 00:17:22,010
Then we enter into this shell and
now we can simply do the same.

249
00:17:22,510 --> 00:17:26,160
Orc run the options here.

250
00:17:26,930 --> 00:17:33,027
There are some options to put
parameters and some options for the

251
00:17:33,027 --> 00:17:35,230
vault where we have the secrets.

252
00:17:35,640 --> 00:17:40,370
Of course, we have the scope that you
can create secrets that are usable only

253
00:17:40,620 --> 00:17:45,690
in production or in other environments
in case you have similar, same, other

254
00:17:45,690 --> 00:17:47,750
environments in the same dimension.

255
00:17:47,940 --> 00:17:50,480
At least this way you can, select.

256
00:17:51,435 --> 00:17:54,215
Secrets from different, dictionaries.

257
00:17:54,865 --> 00:17:55,325
Yes.

258
00:17:56,225 --> 00:17:57,935
Then in this case, we just run.

259
00:17:58,575 --> 00:18:02,005
We will put our orchestration
and we have the target.

260
00:18:02,035 --> 00:18:10,630
We can put Exactly as such one, two nodes
or three nodes, for example, these three

261
00:18:10,630 --> 00:18:15,930
nodes and then with the enter we will just
hit and it will run in these three servers

262
00:18:16,430 --> 00:18:21,000
you see here important is that
you quickly see the server

263
00:18:21,660 --> 00:18:23,960
and success equal true, okay?

264
00:18:24,400 --> 00:18:28,120
Then we see from it is like this.

265
00:18:28,670 --> 00:18:34,250
apart from it, I will show you another
way of just executing that very simple

266
00:18:34,400 --> 00:18:38,770
statements at once in all the servers
you wish from our presentation.

267
00:18:39,585 --> 00:18:42,645
I record then an output for your review.

268
00:18:43,255 --> 00:18:48,735
You see the output is, also there are
interesting stuff for the return, code

269
00:18:49,175 --> 00:18:55,095
and the parameters that were passed
and some elapse time of how it was

270
00:18:55,095 --> 00:18:58,155
executed, on the runtime or at the end.

271
00:18:58,155 --> 00:19:01,685
You have some sort of summary
of success through for the

272
00:19:01,685 --> 00:19:03,825
automation that, orchestration.

273
00:19:03,825 --> 00:19:04,215
Okay.

274
00:19:04,575 --> 00:19:08,085
And the, on all the target
that has been a success.

275
00:19:08,625 --> 00:19:10,015
Is it similar to Ansible?

276
00:19:10,515 --> 00:19:14,035
We come back to the next
topic is distributed commands.

277
00:19:14,435 --> 00:19:22,035
You can do a command shell that is enabled
this shell with the delta and then select

278
00:19:22,055 --> 00:19:30,135
the target of what servers it will have
to complete with the tab and any upcoming

279
00:19:30,135 --> 00:19:31,995
command will execute in all the servers.

280
00:19:32,305 --> 00:19:32,874
Let's try it.

281
00:19:33,374 --> 00:19:37,604
Here in the shell, to execute our
distributed command, we are tab, we

282
00:19:37,604 --> 00:19:43,274
do in tab all the time to use the
help in any command or sub command,

283
00:19:43,494 --> 00:19:44,874
you will get a very nice help.

284
00:19:45,344 --> 00:19:47,994
And then in command, we use shell.

285
00:19:48,494 --> 00:19:49,804
And we put the target.

286
00:19:49,904 --> 00:19:54,374
Now we are using the tab,
abusing on the tab all the time.

287
00:19:54,734 --> 00:20:00,334
Then we will just use two servers
for having a very short, output.

288
00:20:00,984 --> 00:20:05,914
Then when we are here, it's as easy
as tabbing, as using any command.

289
00:20:06,744 --> 00:20:11,684
Yes, we can use this command
and query everywhere.

290
00:20:12,204 --> 00:20:18,784
Or to double check that our
Systems are ready for the upcoming

291
00:20:18,894 --> 00:20:20,464
automation that we will run.

292
00:20:20,964 --> 00:20:23,034
Some sort of preparation.

293
00:20:23,374 --> 00:20:29,404
It helps very much for it or
troubleshooting in many servers.

294
00:20:29,764 --> 00:20:36,864
This, it was useful first time with some
distributed shell in Exadata, one of the

295
00:20:36,864 --> 00:20:39,074
ones that has some experience with Oracle.

296
00:20:39,424 --> 00:20:44,354
And from that idea, that is also a Python,
we came into these distributed commands.

297
00:20:44,854 --> 00:20:49,324
Coming back to the presentation, the
next topic could be the software library.

298
00:20:49,974 --> 00:20:57,134
The software library, we can add a
software in any host in our network

299
00:20:57,454 --> 00:20:59,634
and use it in any other place.

300
00:20:59,924 --> 00:21:06,954
It will pull the software or one off
or on demand from a orchestration.

301
00:21:07,454 --> 00:21:11,964
As you can check with the help,
you can do a software add or

302
00:21:11,964 --> 00:21:14,874
list or also software send.

303
00:21:15,374 --> 00:21:20,024
We will try here in another demo that
we will send a software that we will

304
00:21:20,024 --> 00:21:26,574
put, in the DM four that is isolated
by DM one and the software will be sent

305
00:21:26,894 --> 00:21:29,944
to the DM one through proxy in DM zero.

306
00:21:30,444 --> 00:21:35,724
We can do a quick demo and do a
one-off transfer from server DM

307
00:21:35,724 --> 00:21:39,764
four to server DM one as we don't
have the software in DM four.

308
00:21:40,154 --> 00:21:41,824
Let's place it first and

309
00:21:42,324 --> 00:21:43,074
DM four.

310
00:21:43,534 --> 00:21:50,524
It's this one, then we can copy
software like this to dm4 with

311
00:21:50,524 --> 00:21:56,804
our alias for the machine 200
megabytes, then we have to still

312
00:21:57,304 --> 00:22:01,294
modify the ownership of the file this

313
00:22:01,794 --> 00:22:06,114
we can do a quick one off
demo of how to transfer.

314
00:22:06,164 --> 00:22:11,674
Let's of course put the software first
into dm4 and then transfer it to dm1.

315
00:22:12,174 --> 00:22:19,034
In docker, we have to first do the copy
software installer to dm4 and then later

316
00:22:19,084 --> 00:22:25,684
we just need here the container to change
the ownership of the file when we have

317
00:22:25,684 --> 00:22:31,854
this we can quickly connect for the
registration to this to the node that

318
00:22:31,854 --> 00:22:40,219
it has our software dm4 bash minus l
then when we have our software correct

319
00:22:40,219 --> 00:22:42,884
permissions You can go in this shell.

320
00:22:43,754 --> 00:22:44,634
Let me check it out.

321
00:22:44,634 --> 00:22:47,684
If we have already, we
don't have the token.

322
00:22:47,894 --> 00:22:55,074
So to do a low auto login, it's
very comfortable, the login safe.

323
00:22:55,574 --> 00:23:00,884
Then we have the token and we
can do the software at instead of

324
00:23:00,964 --> 00:23:06,354
going directly, I would do minus
age to show you the help software.

325
00:23:06,614 --> 00:23:08,704
We don't have any, you know, in the list.

326
00:23:09,204 --> 00:23:12,334
So we do the add the family test.

327
00:23:12,854 --> 00:23:17,894
It can be the name dummy
software version 1.

328
00:23:17,894 --> 00:23:24,044
0 and file the absolute the
absolute path just like that.

329
00:23:24,544 --> 00:23:25,674
And we add the software.

330
00:23:26,174 --> 00:23:30,824
The, the dictionary or catalog
in this note will rise.

331
00:23:31,624 --> 00:23:33,064
Its high watermark.

332
00:23:34,044 --> 00:23:34,434
Yes.

333
00:23:34,434 --> 00:23:40,334
This, we can see actually in here we
are in the 65, have to be a bit quick.

334
00:23:40,334 --> 00:23:41,854
Also, it can.

335
00:23:42,354 --> 00:23:49,644
Yeah, we see this one is like
23rd February at 712 and on

336
00:23:49,654 --> 00:23:54,504
the other note we have another
dictionary is not yet up to date.

337
00:23:54,944 --> 00:23:57,594
Anyway, we can see the software.

338
00:23:58,094 --> 00:24:02,284
List, for example, if I
either ID or name, we will see

339
00:24:02,284 --> 00:24:04,244
something nice, dummy software.

340
00:24:04,744 --> 00:24:08,124
Then we see that our dummy
software, it has this size in

341
00:24:08,124 --> 00:24:14,084
bytes and it has a checksum and we
can use the software by this ID.

342
00:24:14,564 --> 00:24:18,274
as you can see, there is a for
orchestration and another moment

343
00:24:18,284 --> 00:24:24,334
we will explain, the list by name
and we have these orchestrations.

344
00:24:25,254 --> 00:24:27,814
The one of sent software.

345
00:24:28,314 --> 00:24:34,874
We can execute a known in any other
orchestration is a native type in.

346
00:24:35,654 --> 00:24:40,734
The schema, the schema would be the
YAML that you have to buy, build

347
00:24:41,134 --> 00:24:42,894
with the following, parameters.

348
00:24:43,734 --> 00:24:48,984
But the required ones are just a software
and in the server that it will come, yes?

349
00:24:49,464 --> 00:24:53,074
And more or less, it executes
this part internally.

350
00:24:53,574 --> 00:24:58,244
then with the software, we can go
in software, send, it's a one off.

351
00:24:59,134 --> 00:25:01,444
Then in here, we have our software.

352
00:25:01,944 --> 00:25:02,724
Before that.

353
00:25:03,079 --> 00:25:03,749
Minus age.

354
00:25:04,249 --> 00:25:07,439
We have first the destination path.

355
00:25:07,939 --> 00:25:08,839
let's use temp.

356
00:25:09,339 --> 00:25:11,549
The software ID is this one.

357
00:25:11,579 --> 00:25:15,099
It will translate, which is very easy.

358
00:25:15,669 --> 00:25:17,319
And then the destination server.

359
00:25:17,799 --> 00:25:24,719
We have it in the server DM four
that if you remember is the DM. 65

360
00:25:24,759 --> 00:25:29,789
ending with the containers is a bit
not that easy as in your company

361
00:25:29,789 --> 00:25:32,689
with some meaningful server names.

362
00:25:32,699 --> 00:25:37,039
But here with the containers, we
have also this automated names.

363
00:25:37,599 --> 00:25:41,599
And then another that is not
the 65, for example, in this one

364
00:25:42,309 --> 00:25:46,599
before we transfer it, we can go.

365
00:25:47,074 --> 00:25:48,494
Also to that server.

366
00:25:48,994 --> 00:25:51,604
Actually, we were in that C40.

367
00:25:52,014 --> 00:25:57,034
So in the C40, we will see that they have,
no, their software is not there in TMP.

368
00:25:57,944 --> 00:26:03,304
So when we do this, and we have no
other, we can still put the foreground,

369
00:26:03,304 --> 00:26:08,124
so it will wait, and this command will
wait until the software is successfully

370
00:26:08,164 --> 00:26:13,064
transferred, and also the forward that it
will overwrite it if it's already there.

371
00:26:13,564 --> 00:26:14,704
Then, let's go like this.

372
00:26:15,204 --> 00:26:19,854
This, it's happened because, the,
the software is not existing.

373
00:26:20,639 --> 00:26:27,899
In destination, which means we just have
to, manage the catalog at destination

374
00:26:28,399 --> 00:26:30,009
is sometimes we have to do this.

375
00:26:30,509 --> 00:26:36,589
We can go to destination and let's
see here in this in this software,

376
00:26:36,609 --> 00:26:41,959
you will see that there is nothing
list, nothing, but we can do manager.

377
00:26:42,459 --> 00:26:44,049
Catalog refresh.

378
00:26:44,809 --> 00:26:48,099
This should pull the
catalog from the other node.

379
00:26:48,239 --> 00:26:49,329
No catalog found.

380
00:26:49,339 --> 00:26:53,169
Then we have now we are software list.

381
00:26:53,579 --> 00:26:54,549
Now we have it.

382
00:26:55,169 --> 00:27:00,129
So as we have pulled the new
version, we can retry this

383
00:27:00,629 --> 00:27:01,929
And now we have a transfer ID.

384
00:27:02,479 --> 00:27:03,349
That was so fast.

385
00:27:03,349 --> 00:27:04,419
I'm repeating the test.

386
00:27:04,689 --> 00:27:08,369
So when you have a software sent,
we click it, we have our transfer

387
00:27:08,369 --> 00:27:12,829
ID, go to transfer list ID.

388
00:27:13,049 --> 00:27:14,679
And then with this ID,

389
00:27:15,179 --> 00:27:16,639
we have no info in here.

390
00:27:16,749 --> 00:27:17,809
Let me see from here.

391
00:27:18,309 --> 00:27:20,929
We come here, transfer list.

392
00:27:21,429 --> 00:27:23,469
Last one is in progress.

393
00:27:23,769 --> 00:27:29,069
Let's check it out what we have there
because we have the same 101 chunks.

394
00:27:30,059 --> 00:27:34,209
it's, in here, in temp,
we have all these chunks.

395
00:27:34,509 --> 00:27:36,309
They are being transferred one by one.

396
00:27:36,309 --> 00:27:38,469
Then they are, being, joined.

397
00:27:39,039 --> 00:27:43,259
And when they are joined, it forms
the final binary file You see?

398
00:27:43,759 --> 00:27:48,819
I have less now and now is
finally the file is mounted back.

399
00:27:49,379 --> 00:27:53,949
This, what has happened is very
interesting to understand the

400
00:27:53,989 --> 00:27:58,049
possibilities of this technology
with the software when you

401
00:27:58,049 --> 00:27:59,549
use it one off, of course.

402
00:27:59,839 --> 00:28:06,789
It's just a matter of some comfort, but
if you, if we use it with automation,

403
00:28:07,319 --> 00:28:12,849
it can be something like, one step
we pull the software to whatever,

404
00:28:12,969 --> 00:28:18,879
whatever number of, distant servers
that we wish, install it and do a post

405
00:28:18,879 --> 00:28:21,989
installation steps into other actions.

406
00:28:22,269 --> 00:28:28,879
Yes, what has happened in here is that
we have transferred a software that is

407
00:28:29,019 --> 00:28:34,939
in one location that is not directly
communicated with another location.

408
00:28:35,434 --> 00:28:42,324
Yes, this is interesting for many
companies that they have some software

409
00:28:42,364 --> 00:28:46,724
in another part of the company and
it's sometimes difficult to mount

410
00:28:46,724 --> 00:28:49,024
an NFS from one place into another.

411
00:28:49,274 --> 00:28:57,484
So this way with the proxy, we can
just skip all the network difficulties

412
00:28:57,534 --> 00:29:00,554
and just pass the software from
one place to another on the fly

413
00:29:00,844 --> 00:29:02,434
via an orchestration as well.

414
00:29:02,934 --> 00:29:08,604
Before we try more complex
orchestrations, let me do a quick

415
00:29:08,694 --> 00:29:11,294
catch up over all the commands we have.

416
00:29:11,794 --> 00:29:17,684
Action, we already said that is a part of
a step that is inside an orchestration.

417
00:29:18,594 --> 00:29:20,654
Command is a distributed command.

418
00:29:21,574 --> 00:29:25,534
Environment, we can list the environment.

419
00:29:26,034 --> 00:29:31,154
We can also set or set or get variables.

420
00:29:31,654 --> 00:29:35,944
This can also be used by inside
the orchestrations as well.

421
00:29:36,394 --> 00:29:40,454
But for secrets, we have the vaults
that we will come in another moment.

422
00:29:40,454 --> 00:29:42,724
Exec is executions.

423
00:29:43,224 --> 00:29:44,624
We can list executions.

424
00:29:45,474 --> 00:29:48,554
In this case, we had in
the past the hello world.

425
00:29:49,449 --> 00:29:54,129
For in in the past we execute
that was a sex success and it

426
00:29:54,129 --> 00:29:57,759
was a cute in that servers here.

427
00:29:58,339 --> 00:29:58,669
Okay.

428
00:29:59,419 --> 00:30:05,989
see control C control L. Then we continue
here exit nothing luck Federation.

429
00:30:06,009 --> 00:30:13,319
We will come to this topic of subscribing
to a law or to a directory that it will.

430
00:30:13,629 --> 00:30:18,569
Replicate its content of the log
from many directories everywhere,

431
00:30:18,619 --> 00:30:21,399
to one other or other locations.

432
00:30:22,159 --> 00:30:25,999
log, this is just to the login inside
the application that we can modify here.

433
00:30:26,549 --> 00:30:31,349
inside login we have still the
save or to login only once.

434
00:30:31,849 --> 00:30:37,259
or to another username also we can
create, but this is a more advanced topic.

435
00:30:38,019 --> 00:30:39,459
I will create some users.

436
00:30:39,819 --> 00:30:42,959
then in the manager we have a two minutes.

437
00:30:42,979 --> 00:30:43,949
The catalog refresh.

438
00:30:44,449 --> 00:30:50,509
To manage the locking mechanism,
we can ignore one server, mark and

439
00:30:50,559 --> 00:30:59,139
unignore to include it back into
the, clustering, locking mechanism.

440
00:30:59,329 --> 00:30:59,779
Yes.

441
00:31:00,189 --> 00:31:01,269
Also, we can show.

442
00:31:01,704 --> 00:31:02,864
How is the status?

443
00:31:02,924 --> 00:31:08,124
For example, we can show a status of
this is unlocked for catalog operations

444
00:31:08,194 --> 00:31:13,324
for upgrade or for orchestration
executions when there is one that we

445
00:31:13,464 --> 00:31:20,494
decide to lock to and don't enable
concurrency for because we we have

446
00:31:20,814 --> 00:31:22,554
very critical orchestration running.

447
00:31:22,564 --> 00:31:23,884
We can just see it here.

448
00:31:24,384 --> 00:31:29,954
Also, we have the orchestrate
orchestrations where we list or

449
00:31:29,954 --> 00:31:34,564
create, or we copy or we load
from Jason or we just run it.

450
00:31:35,234 --> 00:31:38,484
interesting at the
moment now just to list.

451
00:31:39,149 --> 00:31:41,299
I see that we have the hello world only.

452
00:31:41,799 --> 00:31:45,329
The other ones are the internal
actions that we saw in the past.

453
00:31:45,829 --> 00:31:46,819
How are the actions?

454
00:31:47,319 --> 00:31:52,289
We see in the list by name, I want
to explain the Ascent software.

455
00:31:52,789 --> 00:31:56,189
It executes, insert an orchestration.

456
00:31:56,209 --> 00:32:02,009
This would be like, we in one step, we
define one action as Ascent software.

457
00:32:02,139 --> 00:32:06,869
And then in that one, we will have
to pass the parameters of in the

458
00:32:06,869 --> 00:32:08,949
destination and in which server.

459
00:32:09,809 --> 00:32:12,739
Destination directory where
it would be sending software.

460
00:32:13,529 --> 00:32:18,509
Wait servers is where you want an
orchestration to stop in the middle

461
00:32:18,509 --> 00:32:25,839
of another server, provisioning until
the server is added to DimensiGone.

462
00:32:26,339 --> 00:32:30,089
Orchestration, you want to wait,
you want, no, you want to create

463
00:32:31,029 --> 00:32:36,039
an orchestration inside an
action, then this you can specify.

464
00:32:37,019 --> 00:32:38,599
Wait route to server.

465
00:32:38,959 --> 00:32:45,179
When you add a server, it has to be
an existing route to reach the server.

466
00:32:45,494 --> 00:32:50,284
It's a second level of adding a server
when it's inside the catalog already.

467
00:32:50,774 --> 00:32:54,854
delete servers, you can wait until
a server is no longer part of

468
00:32:54,854 --> 00:32:56,864
the dimension, of the dimension.

469
00:32:57,264 --> 00:33:01,134
Then it means that you can
continue because something

470
00:33:01,134 --> 00:33:03,844
was executing there, whatever.

471
00:33:04,364 --> 00:33:10,124
And our, our action there, that we have
used in the same name orchestration.

472
00:33:11,124 --> 00:33:14,854
Then cancel here, and after
this we have the pin command.

473
00:33:14,919 --> 00:33:22,169
We can ping any number of nodes here to
understand if they are up and running

474
00:33:23,069 --> 00:33:25,369
with Dimensiigon, not the server itself.

475
00:33:25,789 --> 00:33:27,849
In servers there are
some interesting stuff.

476
00:33:28,259 --> 00:33:29,499
We can list the servers.

477
00:33:30,009 --> 00:33:34,579
We can delete the server from the
dimension, the dimension, and we

478
00:33:34,579 --> 00:33:37,889
can see its roots is interesting.

479
00:33:37,899 --> 00:33:40,879
We are right now in the DM0.

480
00:33:41,459 --> 00:33:43,109
So we can see the roots.

481
00:33:43,309 --> 00:33:47,299
Yeah, they are not that much
interesting because this one

482
00:33:47,299 --> 00:33:48,939
can reach all the servers.

483
00:33:49,169 --> 00:33:51,989
Cost is the number of jumps that it has.

484
00:33:52,869 --> 00:33:54,799
And this we see that is our server.

485
00:33:55,119 --> 00:33:57,239
So, but let's go to the server.

486
00:33:58,079 --> 00:33:59,769
We see the routes from here.

487
00:33:59,779 --> 00:34:05,539
Also, the, this one, yes, this one
is isolated in, is like in one corner

488
00:34:05,539 --> 00:34:10,239
from one of the two networks that we
have one network, another network.

489
00:34:10,919 --> 00:34:16,039
Then if we list the routes, we
will see that in this case, we

490
00:34:16,039 --> 00:34:21,499
have two servers that they are
accessible through a proxy server.

491
00:34:21,989 --> 00:34:24,999
That is our server that we are,
we were connected right now.

492
00:34:25,689 --> 00:34:26,569
And another.

493
00:34:27,234 --> 00:34:32,904
Two servers that it can connect
directly is, of course, one is the proxy

494
00:34:32,904 --> 00:34:37,664
server and another one is the network
that we have in the same network.

495
00:34:38,574 --> 00:34:43,484
This is interesting in the
servers and still on the list.

496
00:34:43,624 --> 00:34:46,004
We saw that we can have some details.

497
00:34:46,504 --> 00:34:50,564
So by name, let's say if I
put some details, yeah, we

498
00:34:50,564 --> 00:34:52,104
can see what is the gates.

499
00:34:52,534 --> 00:34:59,474
So for each IP, it's, listening for
each IP on the server to upcoming,

500
00:34:59,514 --> 00:35:01,794
yeah, upcoming connections.

501
00:35:02,394 --> 00:35:03,874
This is interesting also.

502
00:35:04,374 --> 00:35:05,314
Then let's clean again.

503
00:35:05,814 --> 00:35:06,544
About software.

504
00:35:06,544 --> 00:35:10,714
We can see from the software
library what we have there.

505
00:35:11,214 --> 00:35:13,174
Yeah, like for my ideas.

506
00:35:13,224 --> 00:35:14,154
We have just one.

507
00:35:14,384 --> 00:35:20,384
You want when it taps with with one it
out of resolution resolution to just

508
00:35:20,384 --> 00:35:26,154
one and I. D. In this case, if we have
more, we will see, tabular, options.

509
00:35:26,784 --> 00:35:29,554
Yeah, that we have in the status.

510
00:35:29,634 --> 00:35:32,364
We are used at the
beginning of this tutorial.

511
00:35:33,264 --> 00:35:34,534
yeah, we can query.

512
00:35:34,889 --> 00:35:36,409
The status of other.

513
00:35:36,859 --> 00:35:41,019
Also, we can include the detail,
just if we query two, you

514
00:35:41,019 --> 00:35:42,899
will see that just querying.

515
00:35:43,139 --> 00:35:49,459
We see the catalog that is in sync
with the others, and we see that,

516
00:35:50,009 --> 00:35:54,579
the other notes are registered
as alive, not in coma in coma.

517
00:35:54,579 --> 00:35:58,649
It can be when also they are
like you stop the domestic on

518
00:35:58,649 --> 00:36:00,249
service and also the neighbors.

519
00:36:00,749 --> 00:36:06,009
And we have, in this case, these two
networks, the ID and the server name,

520
00:36:06,509 --> 00:36:12,329
and the other one, it has another
network here, and this one is kind of

521
00:36:12,329 --> 00:36:14,229
interesting to see when it was executed.

522
00:36:15,174 --> 00:36:18,484
And also, the version that
is running of the software.

523
00:36:18,844 --> 00:36:21,544
This is also managed by the elevator.

524
00:36:22,044 --> 00:36:27,904
Apart from it, we have
the sync that in that one.

525
00:36:28,044 --> 00:36:33,354
To be honest, this one,
I, I don't, I don't know.

526
00:36:33,374 --> 00:36:34,254
I don't remember for this.

527
00:36:34,504 --> 00:36:35,344
What is this for?

528
00:36:35,874 --> 00:36:39,824
Because, I would have to, double
check with the documentation.

529
00:36:40,444 --> 00:36:45,244
The sync, the transfer we
already saw is the transfer list.

530
00:36:45,809 --> 00:36:48,419
In this case, we have two completed one.

531
00:36:48,419 --> 00:36:49,289
It was too fast.

532
00:36:49,289 --> 00:36:52,159
I was not able to show you
just the chunks that are being

533
00:36:52,169 --> 00:36:54,399
transferred on the other one.

534
00:36:54,409 --> 00:37:01,649
We saw it on how it was completed and
also apart from the time transfer.

535
00:37:01,649 --> 00:37:08,429
I like I like very much the vault
and by double purely braces inside

536
00:37:08,509 --> 00:37:15,509
the code of a python or in in
shell, we can specify secrets.

537
00:37:15,509 --> 00:37:15,559
Thanks.

538
00:37:16,024 --> 00:37:20,134
And these secrets are accessible
by the dictionary vault

539
00:37:20,214 --> 00:37:23,224
dot and the variable name.

540
00:37:23,844 --> 00:37:29,294
Then, of course, here we don't have,
but we can define a scope of to list.

541
00:37:30,154 --> 00:37:32,764
And in this regard, it's just that simple.

542
00:37:32,794 --> 00:37:33,734
No, wait a moment.

543
00:37:33,734 --> 00:37:36,044
I have a vault list.

544
00:37:36,444 --> 00:37:37,124
Nothing.

545
00:37:37,634 --> 00:37:40,654
Of course, we have a vault, right?

546
00:37:41,409 --> 00:37:48,209
Minus eight, then we can just say,
okay, right, let's go broad and

547
00:37:48,209 --> 00:37:54,659
variable name can be, so my username
from a database and the password.

548
00:37:55,579 --> 00:38:00,409
Yes, and as you see here, the
global is the default scope.

549
00:38:00,909 --> 00:38:04,249
It's already connecting
with the other nodes.

550
00:38:04,579 --> 00:38:07,879
And spreading the word about this secret.

551
00:38:07,999 --> 00:38:13,769
Actually, if we see now from this node
to another, we see now a new version.

552
00:38:13,979 --> 00:38:20,159
And with the time, in a matter
of 5 minutes, it will spread the

553
00:38:20,189 --> 00:38:22,689
catalog to the other machines.

554
00:38:23,309 --> 00:38:25,389
We see in the vault, list.

555
00:38:25,889 --> 00:38:28,859
And well, in the case we
don't indicate the scope,

556
00:38:29,359 --> 00:38:34,959
we have nothing listed because for
security we have configured this

557
00:38:34,959 --> 00:38:39,479
way, but if we include the scope, we
see the script directly with this.

558
00:38:40,169 --> 00:38:43,619
With the value as well, so that
it can be changed, it can be

559
00:38:43,619 --> 00:38:46,029
changed with the configuration.

560
00:38:46,609 --> 00:38:52,789
That's all, that's, so far the main
commands that we can use around.

561
00:38:53,359 --> 00:38:56,929
Of course, around the orchestration,
there are many options with the command

562
00:38:57,049 --> 00:39:02,499
line in how to define and how to,
the copy, something that we will use.

563
00:39:03,264 --> 00:39:08,544
To, generate the version two of the
our hello world and continue with the

564
00:39:08,554 --> 00:39:14,074
tutorial, but to keep it short this
time is better than we just refresh some

565
00:39:14,074 --> 00:39:21,454
of the concepts that we explained so
we can come with a So, Nice idea about

566
00:39:21,684 --> 00:39:26,674
what we have instead of complicating
more with some more examples.

567
00:39:27,384 --> 00:39:30,434
Remember that the
orchestration is made of steps.

568
00:39:30,814 --> 00:39:34,164
We define the actions beforehand.

569
00:39:34,594 --> 00:39:39,894
We can, we have shown only the action
shell, but also there is an ansible.

570
00:39:40,434 --> 00:39:42,474
Playbooks you can integrate.

571
00:39:43,074 --> 00:39:48,324
Python directly and another
orchestration made of whatever,

572
00:39:48,844 --> 00:39:51,654
steps or also the internal method.

573
00:39:52,319 --> 00:39:57,129
As we saw, the software sent are
wait for servers, this kind of

574
00:39:57,129 --> 00:40:02,789
things, and yeah, require also some,
testing from your site if you wish.

575
00:40:03,359 --> 00:40:09,069
there are some complex logics that can
be, execute as a parallel processes.

576
00:40:09,569 --> 00:40:13,689
If you have one or more
steps depending on one.

577
00:40:14,189 --> 00:40:19,989
It means it can be executed in parallel
and also it works as well for the undo.

578
00:40:20,419 --> 00:40:23,519
So if you have, one number one,

579
00:40:24,019 --> 00:40:31,269
if it fails, it will execute step
seven, as undo number two, number 10.

580
00:40:31,619 --> 00:40:35,379
Will be executed in parallel
if number one is successful.

581
00:40:35,869 --> 00:40:40,679
Number two, if it fails, it will
execute the number 11 as undo.

582
00:40:41,259 --> 00:40:46,869
And number three, it has a more
complex undo as it can also

583
00:40:47,059 --> 00:40:49,279
execute first undo number four.

584
00:40:49,824 --> 00:40:56,294
Then if successful number four, it
will execute number five and six on.

585
00:40:56,394 --> 00:40:59,064
As you can see, number five goes off.

586
00:40:59,794 --> 00:41:01,174
It has also number eight.

587
00:41:01,174 --> 00:41:07,559
And after that, number nine, this
This kind of situation that can

588
00:41:07,559 --> 00:41:13,449
be easily defined with the command
line as well as we mentioned.

589
00:41:13,589 --> 00:41:16,119
This is a polyglot, technology.

590
00:41:16,259 --> 00:41:22,199
So when you combine steps using
a different language or even,

591
00:41:22,589 --> 00:41:27,309
Interfaces from different technologies
like a chef or a terraform from

592
00:41:27,309 --> 00:41:28,959
another machine, et cetera.

593
00:41:29,459 --> 00:41:35,639
So you can combine a polyglot and have
something very easy and fast defined.

594
00:41:36,139 --> 00:41:39,059
Thanks for joining this
presentation of the mensegon.

595
00:41:39,929 --> 00:41:43,919
if you have any questions,
please feel free to contact me.

596
00:41:44,329 --> 00:41:50,239
I am, I have the LinkedIn
link in my profile in conf42.

597
00:41:50,599 --> 00:41:51,749
Thanks and goodbye.

