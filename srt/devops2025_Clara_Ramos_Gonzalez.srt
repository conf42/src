1
00:00:00,610 --> 00:00:01,260
Hello.

2
00:00:01,380 --> 00:00:02,750
Welcome, everybody.

3
00:00:02,780 --> 00:00:06,530
My name is Clara, and I want
to welcome you all to this new

4
00:00:06,530 --> 00:00:10,809
edition off DevOps Conference 2025.

5
00:00:11,290 --> 00:00:15,969
In the following 30 minutes, we
will review and navigate through

6
00:00:15,970 --> 00:00:20,540
different test plans and test
strategies for the DevOps framework.

7
00:00:20,660 --> 00:00:22,010
So let's start.

8
00:00:22,880 --> 00:00:26,610
Welcome back to our session
DevOps test management.

9
00:00:27,370 --> 00:00:27,700
strategies.

10
00:00:28,310 --> 00:00:30,760
Let's start by introducing myself.

11
00:00:31,260 --> 00:00:31,850
Who am I?

12
00:00:32,280 --> 00:00:33,340
My name is Clara.

13
00:00:33,480 --> 00:00:38,080
As I said, I'm from Argentina,
but I'm currently living in Spain.

14
00:00:38,729 --> 00:00:40,719
I'm a passionate QA manager.

15
00:00:40,720 --> 00:00:45,409
I have been in the QA industry
for over 14 years, and I have

16
00:00:45,409 --> 00:00:48,910
enjoyed each one of those years.

17
00:00:49,380 --> 00:00:51,410
I love our field of action.

18
00:00:51,835 --> 00:00:57,485
I love our quality assurance work
and I'm very passionate about it.

19
00:00:58,385 --> 00:01:03,274
There is a say in the QA industry and
we say for every development activity,

20
00:01:03,305 --> 00:01:08,895
there is a corresponding testing activity
and I always want to honor that saying.

21
00:01:09,705 --> 00:01:11,955
I'm also a lifelong learner.

22
00:01:12,215 --> 00:01:16,855
I love to study, I love to train
myself, I love to develop and

23
00:01:16,865 --> 00:01:22,625
acquire new skills, and I'm always
trying to achieve new goals.

24
00:01:22,674 --> 00:01:27,710
I think, I honestly think I can
learn from anybody around me.

25
00:01:28,240 --> 00:01:31,430
And I'm also a yoga teacher
and an assiduous meditator.

26
00:01:31,460 --> 00:01:34,810
And I like to combine that
with my work activities.

27
00:01:35,359 --> 00:01:40,030
I think the skills that I have
accomplished during my years meditating

28
00:01:40,340 --> 00:01:43,460
are very useful for me during my work.

29
00:01:43,960 --> 00:01:46,389
Okay, but enough about me.

30
00:01:46,759 --> 00:01:48,209
Why are we here?

31
00:01:48,529 --> 00:01:53,660
Today we are going to learn a little
bit about testing in a DevOps framework.

32
00:01:54,060 --> 00:01:59,030
So we will start in Talking about
the generalities of our DevOps

33
00:01:59,080 --> 00:02:02,360
framework, then the QA role within it.

34
00:02:02,790 --> 00:02:06,889
And then we will deeply navigate
into the construction of a

35
00:02:06,889 --> 00:02:09,669
proper test plan for DevOps.

36
00:02:10,300 --> 00:02:17,450
And we will review a dual testing
strategy that encompass that test plan.

37
00:02:18,350 --> 00:02:21,910
So I hope you enjoyed this
session as much as I did.

38
00:02:22,490 --> 00:02:23,800
And let's start.

39
00:02:24,300 --> 00:02:31,620
What is DevOps is a combination of
cultural philosophies, practices, and

40
00:02:31,630 --> 00:02:36,640
tools that increase the organization's
ability to deliver applications

41
00:02:37,010 --> 00:02:40,060
and services at a high velocity.

42
00:02:40,400 --> 00:02:45,404
DevOps is all about fostering
collaboration, efficiency, and efficiency.

43
00:02:45,675 --> 00:02:53,365
quality in DevOps framework, and we have
seven C's seven continuous activities

44
00:02:53,665 --> 00:03:00,425
that we need to accomplish and ensure
those are continuous operation, continuous

45
00:03:00,535 --> 00:03:06,955
development, continuous integration,
continuous testing, continuous deployment,

46
00:03:07,015 --> 00:03:12,379
or deliver continuous feedback and
improvement and continuous development.

47
00:03:12,790 --> 00:03:13,710
Monitoring.

48
00:03:14,440 --> 00:03:20,600
This is, in a few words, in a nutshell,
the essence and the life of the DevOps

49
00:03:20,930 --> 00:03:29,360
framework is not only a work framework,
it's also a cultural philosophy, a

50
00:03:29,360 --> 00:03:34,460
mindset, and a way of we in the team
to work and collaborate together.

51
00:03:34,730 --> 00:03:41,070
Together, evolving and improvement
products at a faster pace so we are able

52
00:03:41,110 --> 00:03:47,940
to deliver to our clients in a velocity
way within this DevOps framework.

53
00:03:48,580 --> 00:03:51,040
Which one is the QA role?

54
00:03:51,400 --> 00:03:55,660
So we have been spoken
about continuous testing.

55
00:03:56,240 --> 00:04:00,800
So what is the role of a QA in
a continuous testing framework?

56
00:04:01,300 --> 00:04:06,130
DevOp DevOps, it's all about fostering
collaboration, efficiency, and quality.

57
00:04:06,520 --> 00:04:12,490
In this continuous delivery model, QA
plays a crucial role by ensuring the end

58
00:04:12,550 --> 00:04:15,880
to end testing integrates seamlessly.

59
00:04:16,200 --> 00:04:23,530
Into the DevOps pipeline in DevOps, we
need to construct, maintain, sustain

60
00:04:23,740 --> 00:04:31,390
a set off unit test cases to automate
and to execute within each deliver.

61
00:04:31,780 --> 00:04:36,099
So continuous testing automates
and validates code changes

62
00:04:36,169 --> 00:04:41,250
continuously, enabling rapid
feedbacks and risks reduction.

63
00:04:41,635 --> 00:04:48,885
Enhancing, enhancing product reliability
and accelerating the release cycle

64
00:04:49,185 --> 00:04:52,624
with a robust product ensuring quality.

65
00:04:53,124 --> 00:04:59,104
So to start talking about a test
plan, we need to know what is a

66
00:04:59,144 --> 00:05:03,144
test plan and which are the parts
that compose a good test plan.

67
00:05:03,215 --> 00:05:08,664
There are a lot of things to
have in mind when you are working

68
00:05:08,704 --> 00:05:10,224
and constructing a test plan.

69
00:05:10,314 --> 00:05:14,364
I'm sure everybody here
is aware of those parts.

70
00:05:14,614 --> 00:05:20,704
So we will quickly review the life and
the foundations of a test plan to go

71
00:05:20,704 --> 00:05:27,654
deeply and navigate into the test plan
strategies and the test plan construction.

72
00:05:28,524 --> 00:05:33,174
So the parts are the objective
is the first thing you need to

73
00:05:33,174 --> 00:05:39,464
establish what is what are the
objectives for this testing endeavor.

74
00:05:39,764 --> 00:05:42,744
Then the scope test methodologies.

75
00:05:43,609 --> 00:05:47,559
Approach, the assumptions you
need to do, the risk assessment,

76
00:05:47,619 --> 00:05:52,459
the risk identification, then a
mitigation plan or contingency plan.

77
00:05:52,869 --> 00:05:57,649
You need to establish within your test
plan every role and responsibility.

78
00:05:58,119 --> 00:06:03,079
You need to do the proper schedule
to have a proper timeframe

79
00:06:03,159 --> 00:06:05,519
established for your test plan.

80
00:06:05,989 --> 00:06:09,479
Then, we need to
establish a proper defect.

81
00:06:09,694 --> 00:06:13,334
Tracking process tools
and people involved.

82
00:06:13,824 --> 00:06:18,134
We need to establish the test
environments that this testing this

83
00:06:18,134 --> 00:06:24,344
test plan is going to be conducted
on our entry and exit criteria.

84
00:06:24,354 --> 00:06:27,244
Those must be written
within the test plan.

85
00:06:27,765 --> 00:06:29,004
I know DevOps and agile.

86
00:06:29,504 --> 00:06:32,554
Are not that deeply
into the documentation.

87
00:06:32,564 --> 00:06:34,704
We are trying to deliver faster.

88
00:06:34,704 --> 00:06:41,214
So documentation is relegated to a
second plan to a second part, but

89
00:06:41,354 --> 00:06:46,074
it's not that we don't have any
is minimal documentation approach.

90
00:06:46,594 --> 00:06:50,454
But we need to have the
necessary documentation in

91
00:06:50,454 --> 00:06:52,274
the test plan is one of those.

92
00:06:52,714 --> 00:06:56,794
So you need to write into your test
plan, your entry and exit criteria,

93
00:06:57,674 --> 00:06:59,564
then the test automation part.

94
00:07:00,004 --> 00:07:04,604
They want that we execute continuously
and also the ones that will be

95
00:07:04,674 --> 00:07:08,924
added to that continuous test
suite within this test project.

96
00:07:09,384 --> 00:07:12,404
Then our effort and estimation how long.

97
00:07:12,819 --> 00:07:17,639
It's going to take us and what we need,
we need to do a resource allocation

98
00:07:17,649 --> 00:07:21,119
here for environments, tools and people.

99
00:07:21,799 --> 00:07:25,419
And then the test deliverables and temp.

100
00:07:26,079 --> 00:07:32,499
So these are the 16 steps,
tasks or modules that forms.

101
00:07:32,929 --> 00:07:33,929
A test plan.

102
00:07:34,659 --> 00:07:41,749
So we will, explore the test plan
itself and the test strategies.

103
00:07:42,499 --> 00:07:45,329
Let's just start regarding our test plan.

104
00:07:45,609 --> 00:07:51,099
I want to introduce you guys and
girls in this opportunity to the

105
00:07:51,100 --> 00:07:57,909
different levels that a test plan can
have in my organization, in my team.

106
00:07:58,269 --> 00:08:02,699
I like to create a test plan
for organizational level.

107
00:08:03,199 --> 00:08:06,929
Project level and software
development life cycle level

108
00:08:07,809 --> 00:08:09,859
regarding the organizational level.

109
00:08:10,229 --> 00:08:15,809
I always start by analyzing the
organization itself, its generalities,

110
00:08:15,849 --> 00:08:20,519
the industry our organization is
in, the legal compliance that we

111
00:08:20,519 --> 00:08:25,109
need to have in mind, the tools
that are used organizational wise.

112
00:08:25,529 --> 00:08:30,269
So you need to have those in
mind regarding the project level.

113
00:08:30,299 --> 00:08:31,289
That's regarding.

114
00:08:31,639 --> 00:08:36,039
That's reflecting the current project,
so includes the test script, the test

115
00:08:36,049 --> 00:08:41,949
suites, the people itself, and about the
software development life cycle level,

116
00:08:42,299 --> 00:08:47,269
we need to make sure we accomplish
the delivery fast piece progress.

117
00:08:47,570 --> 00:08:48,889
And cadence.

118
00:08:49,779 --> 00:08:56,919
So by creating these three levels of test
plans, Yay Manager, as myself, ensures

119
00:08:56,969 --> 00:09:03,779
that the testing activities are consistent
with organizational goals, flexible to

120
00:09:03,779 --> 00:09:09,339
the individual project requirements,
and adaptive to the specific development

121
00:09:09,379 --> 00:09:16,899
practices like DevOps, leading to a robust
and efficient quality assurance process.

122
00:09:17,749 --> 00:09:22,589
We will review each one of
these test plans levels.

123
00:09:22,939 --> 00:09:25,339
Let's start by the organizational level.

124
00:09:25,839 --> 00:09:30,229
When you have a test plan at
organizational level, the purpose for this

125
00:09:30,229 --> 00:09:36,049
test plan is to establish the overreaching
goals and standards for quality

126
00:09:36,049 --> 00:09:39,089
assurance across the entire organization.

127
00:09:39,679 --> 00:09:43,549
If the test plan, the organizational
test plan, has never been created,

128
00:09:44,274 --> 00:09:49,304
This is a great opportunity for you to
start this practice as this test plan

129
00:09:49,604 --> 00:09:55,094
will serve as foundation and baseline
for every other project test plan.

130
00:09:55,574 --> 00:10:02,534
So in this organizational test plan, we
need to point out the tools for testing

131
00:10:02,554 --> 00:10:05,344
that are used at organizational level.

132
00:10:05,700 --> 00:10:11,097
the organizational industry requirements
that we need to comply and the

133
00:10:11,097 --> 00:10:16,729
organizational goals for quality that
our complete company wants to achieve.

134
00:10:17,689 --> 00:10:22,619
It ensures consistency in testing
practices and align the testing

135
00:10:22,639 --> 00:10:27,439
strategy with the organization
mission and the quality objectives.

136
00:10:28,209 --> 00:10:32,079
What will you add into
this test plan content?

137
00:10:32,879 --> 00:10:39,159
It includes a guideline for testing
methodologies that we can use in our

138
00:10:39,369 --> 00:10:44,209
organization that are recommended
and encourage the tools, as we said,

139
00:10:44,369 --> 00:10:46,179
that we can use for each project.

140
00:10:46,849 --> 00:10:52,369
Depending on the project, you will use,
utilize more or less of those tools.

141
00:10:52,489 --> 00:10:58,884
If, for example, your project Is regarding
the non functional aspects, you will need

142
00:10:58,884 --> 00:11:01,764
to use the tools for performance testing.

143
00:11:01,764 --> 00:11:07,454
For example, Jmeter, if your project
includes user acceptance testing part

144
00:11:07,524 --> 00:11:13,334
only, then you will focus on manual
testing, functional testing, and we

145
00:11:13,334 --> 00:11:18,604
need also to address in this test plan,
in the organizational test plan, the

146
00:11:18,604 --> 00:11:24,929
resources Allocation, including the
environments, servers, capability, the

147
00:11:24,979 --> 00:11:30,729
third party vendors, if any, and the
resources within our organization, it

148
00:11:30,729 --> 00:11:37,999
serves as a framework for all the project
specifics test that we will review now.

149
00:11:38,499 --> 00:11:43,999
For a project level test plan, the purpose
of this, this is the most common test

150
00:11:43,999 --> 00:11:47,109
plan that everybody designs and develops.

151
00:11:47,159 --> 00:11:52,349
When you design your test plan is
commonly mostly at project level because

152
00:11:52,409 --> 00:11:55,069
address the needs of the current project.

153
00:11:55,449 --> 00:12:00,489
So it will include all of the actions
and steps that we review before.

154
00:12:01,169 --> 00:12:06,199
But our project level, it focused
on the specific needs and goals

155
00:12:06,219 --> 00:12:11,329
for this particular project, and it
includes the time map, the scope,

156
00:12:11,369 --> 00:12:16,919
the objectives, technologies, and all
the aspects related to our project.

157
00:12:17,459 --> 00:12:23,779
The content will be the testing approach,
the entry and exit criteria, the

158
00:12:23,819 --> 00:12:29,904
resources, The timeline, the estimation,
of course, the specific test cases

159
00:12:29,904 --> 00:12:35,494
and test suite or use cases are the
life of this test plan project level.

160
00:12:36,194 --> 00:12:40,534
Here we will include the risk
analysis and the roles and

161
00:12:40,534 --> 00:12:42,714
responsibilities for the project.

162
00:12:43,374 --> 00:12:46,964
This is more detailed, is the longest
of our test plans and contextualize

163
00:12:47,464 --> 00:12:52,134
that the organizational test plan
and use the organizational standards.

164
00:12:52,694 --> 00:12:58,774
As a foundation, so the project level
test plan is unique per project, but the

165
00:12:58,774 --> 00:13:05,644
organizational level test plan is the
same for every push now to review the

166
00:13:05,644 --> 00:13:08,734
software development life cycle test plan.

167
00:13:09,494 --> 00:13:15,304
This will also be reutilized and can be
shared within all the projects in the

168
00:13:15,334 --> 00:13:21,714
company if we are all user using the
same software development life cycle

169
00:13:22,034 --> 00:13:29,114
is a guideline baseline to utilize when
we are executing our project test plan.

170
00:13:29,754 --> 00:13:34,494
The purpose of this project, the software
development life cycle test plan.

171
00:13:35,384 --> 00:13:41,104
It's to address the specifics of the
development life cycle being used, such

172
00:13:41,104 --> 00:13:44,144
as Agile, Scrum, or in this case, DevOps.

173
00:13:44,554 --> 00:13:49,444
It ensures that testing is
effectively integrated with the

174
00:13:49,474 --> 00:13:55,094
development process and aligned with
its iterative and collaborative.

175
00:13:55,539 --> 00:14:00,319
Nature for this software
development life cycle test plan.

176
00:14:00,339 --> 00:14:06,309
We will involve our project managers
are developers to validate that we are

177
00:14:06,309 --> 00:14:13,019
planning the corresponding test activities
for every each development each deploy.

178
00:14:13,959 --> 00:14:18,899
The content of this test plan, it's
specified the testing activities

179
00:14:19,039 --> 00:14:24,079
tied to each phase of the software
development life cycle, such as in

180
00:14:24,079 --> 00:14:28,689
continuous integration and continuous
deployment, the automation strategies.

181
00:14:29,494 --> 00:14:34,674
The acceptance criteria for each
iteration, the performance testing and

182
00:14:34,674 --> 00:14:39,204
non functional testing and monitoring
practices that we are going to put

183
00:14:39,204 --> 00:14:45,354
in place and this helps ensures the
testing is an ongoing and adaptive to

184
00:14:45,354 --> 00:14:47,799
changes during the development phase.

185
00:14:47,949 --> 00:14:48,419
process.

186
00:14:48,939 --> 00:14:54,749
So again, this can be reutilized in
different projects is not specific

187
00:14:54,809 --> 00:15:00,959
to the project, but it is specific to
the software development life cycle

188
00:15:00,969 --> 00:15:03,279
that we are using at company level.

189
00:15:03,779 --> 00:15:07,310
That's regarding our
test plan development.

190
00:15:07,369 --> 00:15:12,344
We have learned how to develop a
test plan in organizational level.

191
00:15:12,545 --> 00:15:16,745
At project level, which is the
most common one and at software

192
00:15:16,745 --> 00:15:18,765
development life cycle level.

193
00:15:19,575 --> 00:15:23,885
Now that we have our test plan
developed, analyzed and tailored

194
00:15:23,895 --> 00:15:28,365
to our needs and our project, we
can decide our testing strategy.

195
00:15:28,865 --> 00:15:30,485
To construct a testing strategy.

196
00:15:30,985 --> 00:15:36,135
In this case, I, myself, will use
three different testing strategies

197
00:15:36,225 --> 00:15:39,485
coexisting for a DevOps project.

198
00:15:40,145 --> 00:15:43,785
First of all, it will be
our continuous testing.

199
00:15:43,825 --> 00:15:50,285
So this will include our automatic test
run that executes every time a code is

200
00:15:50,335 --> 00:15:57,305
committed, allowing quick feedback and
rapid interactions as DevOps baseline.

201
00:15:57,805 --> 00:16:03,525
But that will be general to any DevOps
project, the life of a DevOps project.

202
00:16:03,565 --> 00:16:07,965
It's the continuous testing
and it's the robust set of unit

203
00:16:07,975 --> 00:16:12,435
testing that is executed and run
every time a code is committed.

204
00:16:12,935 --> 00:16:16,755
But for each project, we will need
to have our own testing strategy.

205
00:16:17,425 --> 00:16:25,055
In this case, I would like to address a
shift left testing strategy as a first,

206
00:16:25,255 --> 00:16:31,215
practice as a number one testing strategy
within, combined within a risk based

207
00:16:31,415 --> 00:16:34,235
testing strategy as a secondary testing

208
00:16:34,735 --> 00:16:35,052
strategy.

209
00:16:35,052 --> 00:16:35,686
Let's review.

210
00:16:35,686 --> 00:16:38,560
Shift left testing as it is on the name.

211
00:16:39,145 --> 00:16:43,935
It stands for going to the
shift, shifting, shifting to

212
00:16:43,935 --> 00:16:46,215
the left as much as you can.

213
00:16:46,575 --> 00:16:51,865
You need, you need to start your
QA or testing activities as early

214
00:16:51,865 --> 00:16:57,255
as possible within your software,
the development life cycle.

215
00:16:57,715 --> 00:17:03,155
It's a day identify and fix defects early
in the development process by starting

216
00:17:03,155 --> 00:17:06,365
test activities as soon as possible.

217
00:17:06,705 --> 00:17:07,075
This is.

218
00:17:07,220 --> 00:17:09,000
Very, very important.

219
00:17:09,370 --> 00:17:16,510
The cheapest way to fix a defect is
to find this defect within the same

220
00:17:16,860 --> 00:17:21,990
phase of the software development
lifecycle that was introduced.

221
00:17:22,390 --> 00:17:24,510
That's the cheapest way to fix it.

222
00:17:24,920 --> 00:17:32,215
And if we can mention some
industry standards, it's 15 times

223
00:17:32,215 --> 00:17:38,295
cheaper to fix a defect within the
development phase that in production.

224
00:17:38,705 --> 00:17:41,225
So that number is a lot.

225
00:17:41,295 --> 00:17:46,305
If we reach our pre production
status or stage with a lot of

226
00:17:46,335 --> 00:17:48,535
defects, we may consume our budget.

227
00:17:48,845 --> 00:17:54,075
And there are a lot of projects that
never reach production because of this.

228
00:17:54,400 --> 00:17:56,420
because of budget running out.

229
00:17:56,850 --> 00:18:02,540
So shift left strategy involves
QAs as early as possible.

230
00:18:03,220 --> 00:18:05,040
And what is the earliest possible?

231
00:18:05,420 --> 00:18:06,630
Static testing.

232
00:18:07,470 --> 00:18:15,360
So we will try to start our testing with
a static testing, Practices, the static

233
00:18:15,410 --> 00:18:22,520
testing of the code, we can use tools
for the static analysis as SonarQube or

234
00:18:22,570 --> 00:18:27,740
any other tools that your organization
is maybe using, or you can introduce to

235
00:18:27,740 --> 00:18:33,799
the organization and the manual static,
testing, which is the reviews, the

236
00:18:33,800 --> 00:18:38,610
reviews of the work products, reviews
of the user stories you can conduct.

237
00:18:39,500 --> 00:18:44,030
And informal reviews, or if you
can go more formal and conduct

238
00:18:44,370 --> 00:18:46,440
formal reviews or retrospectives.

239
00:18:46,780 --> 00:18:50,970
For informal reviews, and the
most common practice that I will

240
00:18:50,970 --> 00:18:52,740
recommend is the peer review.

241
00:18:53,170 --> 00:18:58,650
So you can go doing peer review and review
the requirements, the test scripts, the

242
00:18:58,690 --> 00:19:05,890
code, everything can be reviewed at its
early stage to try to identify and fix the

243
00:19:05,890 --> 00:19:08,690
defects as soon and as cheap as possible.

244
00:19:09,430 --> 00:19:14,870
So engage testers early in the sprint
or iteration, incorporate testing

245
00:19:14,920 --> 00:19:17,320
into the design and decoding phases.

246
00:19:17,540 --> 00:19:22,620
and carry out early non functional testing
such as performance and security testing.

247
00:19:23,120 --> 00:19:28,210
Our second test strategy
will be risk based testing.

248
00:19:28,710 --> 00:19:35,835
Risk based testing can coexist with
any other Testing strategy because

249
00:19:35,895 --> 00:19:43,655
risk-based testing, BA is based on
the execution of the test script,

250
00:19:43,685 --> 00:19:46,895
the execution of the use cases.

251
00:19:47,135 --> 00:19:53,355
So let's review a little bit for a
risk-based test strategy, we prioritize

252
00:19:53,385 --> 00:19:56,030
the testing activities based on the risk.

253
00:19:56,510 --> 00:20:03,170
And the impact of different components and
features by focusing on areas that present

254
00:20:03,190 --> 00:20:09,880
the higher risk, you can ensure critical
functionalities are thoroughly tested,

255
00:20:10,290 --> 00:20:15,880
which is essential in DevOps environments
where rapid delivery is important.

256
00:20:16,380 --> 00:20:21,440
So for a risk based testing
strategy, we need to perform.

257
00:20:21,880 --> 00:20:23,880
two important actions.

258
00:20:24,100 --> 00:20:29,030
One is the risk analysis and
the second is risk monitoring.

259
00:20:29,890 --> 00:20:34,167
Let's review our first activity
for a risk based testing strategy.

260
00:20:34,167 --> 00:20:37,300
The risk analysis.

261
00:20:37,670 --> 00:20:40,989
The risk analysis includes two parts.

262
00:20:41,050 --> 00:20:44,250
The first is risk identification.

263
00:20:44,360 --> 00:20:51,045
You need to identify properly which
are the risks within your project.

264
00:20:51,505 --> 00:20:52,795
How do you do that?

265
00:20:53,235 --> 00:21:00,524
You involve in the risk identification
the correct Everybody that is a relevant

266
00:21:00,594 --> 00:21:06,884
stakeholder needs to be involved in
a risk identification assessment.

267
00:21:07,484 --> 00:21:13,024
You can do it by performing interviews,
retrospectives, risk workshops,

268
00:21:13,044 --> 00:21:17,054
which are my favorite, actually,
because it's a very dynamic and

269
00:21:17,134 --> 00:21:20,474
collaborative way to identify the risks.

270
00:21:20,944 --> 00:21:21,994
Or you can use training.

271
00:21:22,159 --> 00:21:22,809
checklist.

272
00:21:23,149 --> 00:21:28,989
That can also be an offline activity and
you can send those to the stakeholders

273
00:21:29,019 --> 00:21:31,339
by email and track the answers.

274
00:21:31,939 --> 00:21:38,299
But within this activity, you should
end up with a proper list of risks,

275
00:21:38,449 --> 00:21:41,949
properly identified by every stakeholder.

276
00:21:42,449 --> 00:21:44,914
I cannot repeat Enough.

277
00:21:45,214 --> 00:21:50,094
How important is to involve
the proper stakeholders in the

278
00:21:50,094 --> 00:21:52,284
risk identification process?

279
00:21:52,404 --> 00:21:59,494
Because if you don't identify the
risk properly, if you, oversee a

280
00:21:59,494 --> 00:22:04,684
risk, or if you highlight as a risk
something that is not, it will result

281
00:22:04,944 --> 00:22:07,394
in the complete risk based strategy.

282
00:22:08,104 --> 00:22:09,214
being unused.

283
00:22:09,714 --> 00:22:14,234
So after you conclude your risk
identification process, you

284
00:22:14,234 --> 00:22:16,254
should end up with a list of risk.

285
00:22:16,294 --> 00:22:21,024
Let's say, let's say risk
A, risk B and risk C.

286
00:22:21,484 --> 00:22:24,454
Then it's time to do your risk assessment.

287
00:22:24,564 --> 00:22:30,624
In this qualification of your risk,
You will assign a risk level for

288
00:22:30,704 --> 00:22:34,114
each one of those identified risk.

289
00:22:34,584 --> 00:22:35,864
What is your risk level?

290
00:22:36,274 --> 00:22:41,484
A risk level is the combination
between the risk likelihood

291
00:22:41,724 --> 00:22:42,584
and the risk probability.

292
00:22:42,874 --> 00:22:45,264
impact upon occurrence.

293
00:22:46,134 --> 00:22:54,874
So, for example, if risk a is very
likely to occur, but the impact upon

294
00:22:54,874 --> 00:23:00,524
occurrence is very low, you will
identify this risk in a medium level

295
00:23:01,054 --> 00:23:02,964
because it's very likely to happen.

296
00:23:02,974 --> 00:23:08,454
You want to cover that to mitigate
that, but because its impact is very

297
00:23:08,504 --> 00:23:11,399
low, you will assign it a medium level.

298
00:23:12,069 --> 00:23:19,969
For risk B, for example, if the likelihood
of appearance is low, but the impact

299
00:23:20,049 --> 00:23:27,029
upon appearance is critical, you will
anyway assign a high level to this

300
00:23:27,029 --> 00:23:32,704
risk because you want to make sure that
This will not happen in production as

301
00:23:32,704 --> 00:23:38,904
soon as possible and for risk C, if
they have a likelihood of appearance,

302
00:23:39,284 --> 00:23:42,544
it's made, but the impact it's high.

303
00:23:42,794 --> 00:23:49,934
You will also assign it as a
high risk level feature or this.

304
00:23:50,434 --> 00:23:55,314
Then this will be the first
part of our risk based testing

305
00:23:55,324 --> 00:23:57,434
strategy, the risk analysis.

306
00:23:57,914 --> 00:24:03,914
After we have identified a risk and
assigned a risk level to each one of

307
00:24:03,944 --> 00:24:08,739
those, we will continue to the second
part, which is the risk analysis.

308
00:24:09,239 --> 00:24:14,199
Within the risk control, we continue
perform the risk monitoring.

309
00:24:14,199 --> 00:24:16,269
This is a continuous activity.

310
00:24:16,269 --> 00:24:17,559
This never stop.

311
00:24:17,559 --> 00:24:22,659
Risk monitoring is part of our
strategy and our testing process.

312
00:24:23,009 --> 00:24:27,359
This allow us to report on
testing progress in terms

313
00:24:27,419 --> 00:24:30,494
already of residual risk level.

314
00:24:30,989 --> 00:24:36,989
At any point, which is very important
for the stakeholders to make informed

315
00:24:37,049 --> 00:24:42,989
and appropriate decisions regarding going
or not going to production, for example.

316
00:24:43,489 --> 00:24:46,439
And also the risk control part includes.

317
00:24:46,734 --> 00:24:48,814
The risk mitigation.

318
00:24:49,474 --> 00:24:54,874
Our essential mitigation action
when we execute a risk based

319
00:24:55,224 --> 00:25:02,424
testing strategy is to execute our
test scripts in a prioritized way.

320
00:25:02,704 --> 00:25:09,074
We prioritize According to the risk
level, so the test scripts are assigned

321
00:25:09,084 --> 00:25:14,104
from highest to lowest to a different
risk level regarding the feature of

322
00:25:14,104 --> 00:25:19,544
functionality, having in mind the
risk assessment and identification we

323
00:25:19,544 --> 00:25:22,649
just did during risk analysis part.

324
00:25:23,149 --> 00:25:28,609
Regarding this test execution, there
are two ways in the industry that we can

325
00:25:28,609 --> 00:25:36,309
choose to execute, a risk-based strategy
to mitigate risk as soon as possible.

326
00:25:36,809 --> 00:25:43,759
The first execution will be a deep
first approach that execute all the

327
00:25:43,759 --> 00:25:46,579
scripts in a strict descending order.

328
00:25:47,319 --> 00:25:52,199
For the level of risk from the
highest to the lowest, so no matter

329
00:25:52,249 --> 00:25:58,299
the feature or the part of the
system that we are executing the test

330
00:25:58,329 --> 00:26:05,159
script, we will execute all the high
priority regarding the risk first and

331
00:26:05,159 --> 00:26:08,749
then go down into until the lowest.

332
00:26:09,379 --> 00:26:11,559
So that's one way to go.

333
00:26:11,599 --> 00:26:13,259
It's very robust.

334
00:26:13,534 --> 00:26:16,534
But it's time consuming
and it's very structured.

335
00:26:17,434 --> 00:26:24,124
If we need to be more flexible or if we
need to make faster decisions, we will

336
00:26:24,164 --> 00:26:27,754
choose a breathe first test approach.

337
00:26:28,534 --> 00:26:37,484
In this test approach, Each test script
will be assigned to with the highest risk

338
00:26:37,594 --> 00:26:44,754
priority, we will assign one test script
per feature or per product to the highest

339
00:26:45,224 --> 00:26:51,954
test priority, and we will execute those
highest one per product or one per feature

340
00:26:52,454 --> 00:26:57,924
as soon as possible in the first round
of execution, and then we will continue.

341
00:26:58,704 --> 00:27:03,244
In this way, we will be able to
provide information regarding

342
00:27:03,244 --> 00:27:08,154
the sanity of our project to the
stakeholders in a faster way.

343
00:27:08,624 --> 00:27:14,844
So we will be able to assess and evaluate
the current quality if we execute

344
00:27:14,984 --> 00:27:20,874
breathe first approach one test script
with the highest risk per feature.

345
00:27:21,374 --> 00:27:28,214
Normally in our projects, we start with
a deep first testing approach because

346
00:27:28,264 --> 00:27:35,474
it is more robust, more organized, but
as soon as we are starting consuming our

347
00:27:35,474 --> 00:27:42,244
time and our budget, we move to a brief
first approach trying to provide it.

348
00:27:42,244 --> 00:27:42,304
Thank you.

349
00:27:42,829 --> 00:27:46,859
more information and to assess
the quality of our project in a

350
00:27:46,859 --> 00:27:49,049
general way as soon as possible.

351
00:27:49,549 --> 00:27:52,869
So this is regarding our risk control.

352
00:27:53,479 --> 00:27:55,659
Let's review our key takeaways.

353
00:27:56,159 --> 00:28:01,979
That has been our analysis regarding the
test strategies that we want to choose

354
00:28:02,379 --> 00:28:09,349
and a compass for our three level test
plans within our DevOps framework project.

355
00:28:09,879 --> 00:28:13,494
Why we will choose A mixed test strategy.

356
00:28:13,994 --> 00:28:21,084
First, it allows you early detection
of the highest important defects.

357
00:28:22,024 --> 00:28:24,994
It ensures efficient resource allocation.

358
00:28:25,004 --> 00:28:28,484
You will allocate your resources
as soon as possible to the

359
00:28:28,514 --> 00:28:31,024
highest risk part of your project.

360
00:28:31,924 --> 00:28:33,584
It enhance collaboration.

361
00:28:33,584 --> 00:28:38,444
You will involve all the stakeholders,
developers, project managers,

362
00:28:38,484 --> 00:28:40,914
product owners, final users.

363
00:28:41,174 --> 00:28:46,404
You will involve all of the stakeholders
within your development of your risk

364
00:28:46,434 --> 00:28:51,204
strategy, and this will foster a
collaboration spirit in your organization.

365
00:28:51,704 --> 00:28:57,274
It improves quality and speed because
you will isolate the defects faster

366
00:28:57,504 --> 00:29:02,464
and you will have a robust test
strategy with three different test

367
00:29:02,574 --> 00:29:07,064
plan levels and with three different
test strategies, the continuous testing

368
00:29:07,144 --> 00:29:14,024
strategies from DevOps, a shift left
test strategy and a risk based approach

369
00:29:14,044 --> 00:29:15,914
sustaining your other strategy.

370
00:29:16,639 --> 00:29:22,069
And this will enable informed
decision making for your stake

371
00:29:22,309 --> 00:29:24,119
holders and your managers.

372
00:29:24,469 --> 00:29:29,319
So that's why we should always
consider this mixed test strategies

373
00:29:29,669 --> 00:29:32,469
as a driven for our projects.

374
00:29:33,379 --> 00:29:35,939
So that will be all.

375
00:29:36,019 --> 00:29:41,839
And I just want to remember you guys,
girls, team, all the, this phrase that I

376
00:29:41,849 --> 00:29:46,309
love from RQA environment and RQA world.

377
00:29:47,034 --> 00:29:52,404
The product quality is highly
influenced by the quality of the

378
00:29:52,404 --> 00:29:55,244
process being used and applied.

379
00:29:56,084 --> 00:30:02,344
So if you, your process has a
high quality, it will influence

380
00:30:02,684 --> 00:30:05,494
highly the quality of your product.

381
00:30:05,504 --> 00:30:10,654
So remember to invest time
developing a tailored process

382
00:30:10,734 --> 00:30:11,794
for each of your projects.

383
00:30:12,294 --> 00:30:14,104
Thank you very much.

384
00:30:14,134 --> 00:30:16,984
And I hope you, we can stay in touch.

385
00:30:16,984 --> 00:30:23,524
So please add me to your LinkedIn accounts
and let's continue talking about quality.

386
00:30:24,024 --> 00:30:26,204
I hope you have enjoyed this time.

387
00:30:26,674 --> 00:30:27,414
So thank you.

388
00:30:27,914 --> 00:30:28,534
Okay.

389
00:30:28,554 --> 00:30:31,574
So that was all for today's session.

390
00:30:32,004 --> 00:30:35,984
Thank you very much for staying
with me for this 30 minutes.

391
00:30:36,034 --> 00:30:41,134
I hope you find this information
very useful and let's keep in touch.

392
00:30:41,694 --> 00:30:42,024
Thank you.

