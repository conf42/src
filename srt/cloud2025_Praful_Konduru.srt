1
00:00:00,010 --> 00:00:01,410
Hey, good morning, everybody.

2
00:00:01,550 --> 00:00:02,810
My name is Praful Kondiru.

3
00:00:02,909 --> 00:00:06,279
I'm a software engineer with over
10 years of experience building

4
00:00:06,379 --> 00:00:08,139
distributed and scalable systems.

5
00:00:08,870 --> 00:00:10,530
And I'm excited to be here today.

6
00:00:11,089 --> 00:00:14,039
in my session, we'll be exploring
more about, cloud native

7
00:00:14,059 --> 00:00:16,519
resilience, and I'll talk a bit.

8
00:00:16,935 --> 00:00:22,885
More about how I build scalable and fault
tolerant systems and hope my experience

9
00:00:22,885 --> 00:00:24,535
would have valuable lessons for you.

10
00:00:25,235 --> 00:00:29,854
by, you may ask what, what does cloud
native resilience actually mean?

11
00:00:30,555 --> 00:00:35,974
and short answer for that is we
mean designing systems that not only

12
00:00:35,975 --> 00:00:40,765
scale efficiently, but also maintain
their performance and availability,

13
00:00:40,785 --> 00:00:43,335
even when unexpected issues arise.

14
00:00:43,835 --> 00:00:47,065
during this talk, we'll
cover several key areas.

15
00:00:47,675 --> 00:00:50,935
I'll first start off by
introducing cloud native concepts.

16
00:00:51,485 --> 00:00:55,394
and then I'll move on to talking
about the core design principles

17
00:00:55,394 --> 00:00:57,044
that support resilience.

18
00:00:57,695 --> 00:01:02,795
and the most important topic of
all is talking more about the

19
00:01:02,795 --> 00:01:07,915
role of Microsoft's architecture,
containerization, and automation.

20
00:01:08,675 --> 00:01:11,175
and finally, we'll dive
into some practical code

21
00:01:11,175 --> 00:01:12,725
examples and demonstrations.

22
00:01:13,510 --> 00:01:17,150
so yeah, this presentation is geared
towards tech professionals like yourselves

23
00:01:17,470 --> 00:01:22,060
so you can expect in that, content
along with some hands on examples.

24
00:01:22,170 --> 00:01:24,840
please feel free to note your
questions you have and we can

25
00:01:24,840 --> 00:01:27,369
you can shoot me an email, if you
have any questions at the end.

26
00:01:27,890 --> 00:01:33,020
but yeah, my goal is to equip you with all
sorts of practical insights and techniques

27
00:01:33,460 --> 00:01:37,969
that can apply that you can apply to
build robust and fault tolerant systems

28
00:01:38,130 --> 00:01:42,700
in your own cloud environments so yeah,
so without further ado, let's get started.

29
00:01:43,200 --> 00:01:46,800
So yeah, so like I spoke
in My previous slide.

30
00:01:47,110 --> 00:01:50,490
so on this slide i'll walk you through
the agenda for today's session.

31
00:01:50,870 --> 00:01:56,320
So we'll start with an introduction to
Cloud Native Concepts, the fundamental

32
00:01:56,370 --> 00:01:59,450
ideas behind building resilient systems.

33
00:02:00,320 --> 00:02:04,830
Next we'll discuss the key design
principles that help us build fault

34
00:02:04,850 --> 00:02:12,179
tolerant applications, such as redundancy,
loose coupling and graceful degradation.

35
00:02:12,460 --> 00:02:15,940
Then we'll explore a little bit more
about the microservice architecture

36
00:02:16,600 --> 00:02:21,780
And, how breaking application to do
smaller independent services can actually

37
00:02:22,240 --> 00:02:24,120
Boost resilience and scalability.

38
00:02:24,130 --> 00:02:27,610
Following that, we will cover
containerization and orchestration

39
00:02:28,250 --> 00:02:32,770
tools like Docker, Kubernetes that
kind of simplify deployment and

40
00:02:32,780 --> 00:02:35,100
management of cloud native systems.

41
00:02:35,600 --> 00:02:39,960
And finally, I'll talk a bit more about
like the CI CD pipelines and monitoring

42
00:02:39,960 --> 00:02:45,335
tools just to make sure, when a system
crashes, like how do we recover It's

43
00:02:45,335 --> 00:02:47,365
super quickly in a dynamic environment.

44
00:02:47,465 --> 00:02:50,355
and you'll see you in most of
the slides I have like code and

45
00:02:50,355 --> 00:02:54,285
demonstrations to help you understand
the practical nature of this.

46
00:02:54,835 --> 00:03:00,715
Yeah, let's come get started with
the first intro So let's define what?

47
00:03:01,380 --> 00:03:03,120
Cloud native actually means right?

48
00:03:03,390 --> 00:03:06,980
So people throw this word cloud
all over the place But I initially

49
00:03:06,980 --> 00:03:08,780
didn't like a couple of years ago.

50
00:03:08,780 --> 00:03:12,600
I didn't know what it actually meant
but yeah, so when I when you say cloud

51
00:03:12,620 --> 00:03:16,580
native, it's actually an approach to
building and like running applications

52
00:03:16,610 --> 00:03:20,870
that kind of fully Exploit the
advantages of like cloud computing.

53
00:03:21,330 --> 00:03:27,450
so this means like designing applications
to be like super scalable, elastic and

54
00:03:27,750 --> 00:03:30,170
resilient right from like the ground up.

55
00:03:30,260 --> 00:03:33,050
so there are a lot of like ways
to achieve this and this is

56
00:03:33,050 --> 00:03:34,670
what my talk today will cover.

57
00:03:35,500 --> 00:03:40,440
So also talking a bit more about the key
characteristics of cloud native systems.

58
00:03:40,950 --> 00:03:45,590
Is like I mentioned, the scalability
part of it, which is to like effortlessly

59
00:03:45,780 --> 00:03:49,770
handle increases in workload, by
adding more and more resources.

60
00:03:50,210 --> 00:03:53,060
elasticity is another property
of like cloud native systems,

61
00:03:53,100 --> 00:03:57,190
which kind of dynamically adjust
resources based on demand.

62
00:03:57,800 --> 00:04:01,830
and finally resilience which is
essentially maintaining performance

63
00:04:01,830 --> 00:04:05,920
and like availability even in the
face of failure So these are like

64
00:04:05,920 --> 00:04:07,740
the main characteristics of it.

65
00:04:08,100 --> 00:04:13,390
and The benefits with building cloud
native applications are like, obviously,

66
00:04:13,780 --> 00:04:18,600
faster innovation, like it's super quick
to deploy to cloud, obviously, and along

67
00:04:18,600 --> 00:04:21,610
with it, we can cheaply utilize resources.

68
00:04:21,610 --> 00:04:25,370
We can like smartly scale up and
scale down based on the demand.

69
00:04:25,770 --> 00:04:29,450
if on a certain day, there's going to be
like a million customers to a website.

70
00:04:29,905 --> 00:04:35,045
You can pre compute and scale your
resources to that extent, and on

71
00:04:35,075 --> 00:04:36,355
off days, you can scale it down.

72
00:04:36,355 --> 00:04:40,915
So you're efficiently using your
resources and not turning on your compute

73
00:04:40,995 --> 00:04:43,565
for 24 7, which is a waste of money.

74
00:04:44,195 --> 00:04:46,455
so yeah, moving on, okay.

75
00:04:46,635 --> 00:04:48,545
Why resilience actually matters?

76
00:04:48,975 --> 00:04:49,935
So why does this matter?

77
00:04:50,025 --> 00:04:52,425
so how do I define resilience, right?

78
00:04:52,425 --> 00:04:55,655
So essentially, like I mentioned,
the ability to handle and recover

79
00:04:55,655 --> 00:05:00,695
from failures gracefully, and
why does it actually matter?

80
00:05:01,195 --> 00:05:07,195
So we need high availability for our
systems so that we can ensure that

81
00:05:07,225 --> 00:05:12,745
applications remain accessible, which is
crucial for like user satisfaction, right?

82
00:05:12,765 --> 00:05:17,745
Or else we wouldn't want to like, lose
our customers just because our website is

83
00:05:17,745 --> 00:05:20,035
down, and also the business impact of it.

84
00:05:20,580 --> 00:05:21,300
It's huge.

85
00:05:21,580 --> 00:05:26,800
because like reduced downtime translates
directly to Lower, lower financial

86
00:05:26,800 --> 00:05:29,090
losses on improved service reliability.

87
00:05:29,410 --> 00:05:34,290
and finally, like I mentioned, the user
experience as a user, I don't really want

88
00:05:34,290 --> 00:05:37,110
to see huge websites like Amazon done.

89
00:05:37,480 --> 00:05:40,690
So it like severely impacts
the user trust and experience.

90
00:05:40,790 --> 00:05:43,680
so yeah, in the following
slides, we can discuss more.

91
00:05:44,260 --> 00:05:48,940
On the design principles that help
achieve this level of resilience

92
00:05:49,260 --> 00:05:52,870
and i'll show you how these Ideas
are actually implemented in like

93
00:05:52,880 --> 00:05:55,740
real world examples yeah moving on.

94
00:05:56,270 --> 00:06:03,280
So so yeah in order to build Brazilian
systems, it's essential to incorporate

95
00:06:03,760 --> 00:06:05,740
Key design principles from the start.

96
00:06:06,140 --> 00:06:09,710
so as an engineer when you're building
a cloud native application some

97
00:06:09,710 --> 00:06:14,115
of the things that You would need
to remember is along the lines of,

98
00:06:14,145 --> 00:06:19,095
redundancy, by duplicating crucial
components, the system can like continue

99
00:06:19,115 --> 00:06:21,295
operating even if one instance fails.

100
00:06:21,625 --> 00:06:23,455
So that's what you call talk people.

101
00:06:23,465 --> 00:06:25,885
You hear people talk about
like horizontal scaling, right?

102
00:06:25,945 --> 00:06:29,825
You got to have like multiple
copies of the same server where

103
00:06:29,855 --> 00:06:31,175
your code is currently deployed.

104
00:06:31,175 --> 00:06:34,185
Cause if one of the servers goes
down, you could essentially.

105
00:06:34,955 --> 00:06:39,855
Move all the traffic to another server
and prevent any downtime to your website

106
00:06:40,475 --> 00:06:44,975
and another important principle is
loose coupling and what I mean by that

107
00:06:44,975 --> 00:06:51,110
is like We got a design systems where
components have like minimal dependencies

108
00:06:51,110 --> 00:06:56,780
on each other And ensure that failures
in one area doesn't really cascade and

109
00:06:56,790 --> 00:07:01,540
bring down the entire system So this is
another prime principle of like resilient

110
00:07:01,550 --> 00:07:06,000
systems and also I have to fail fast.

111
00:07:06,080 --> 00:07:10,900
just because I don't wanna sit and
deal with a server that is down and

112
00:07:10,910 --> 00:07:15,030
restart it and who knows how long it's
gonna take me to restart and in the

113
00:07:15,030 --> 00:07:19,085
meanwhile I don't want to keep my user
waiting so I'll have to transfer All

114
00:07:19,095 --> 00:07:21,445
the traffic to like another server.

115
00:07:21,505 --> 00:07:24,035
And, this is what I mean
by graceful degradation.

116
00:07:24,055 --> 00:07:29,175
I don't want users to like, just see a
404 on the screen and just be like, Oh,

117
00:07:29,435 --> 00:07:31,625
this website isn't really useful to me.

118
00:07:32,035 --> 00:07:36,165
but yeah, so another thing is
the monitoring and like automated

119
00:07:36,165 --> 00:07:41,385
recovery part where we got to build
a robust tool mechanism where we

120
00:07:41,385 --> 00:07:44,275
are continuously monitoring what
is going on with our website.

121
00:07:44,750 --> 00:07:50,460
And can have smart automated
systems to detect when there is

122
00:07:50,470 --> 00:07:54,580
like peak traffic and automatically
scale your website up or down.

123
00:07:55,080 --> 00:07:59,860
so moving on to the next one, we
can, at this point, I feel it's,

124
00:08:00,000 --> 00:08:04,190
in right time to dive into what
is a microservice architecture.

125
00:08:04,790 --> 00:08:08,940
so when you talk about cloud native
microservices, it's thrown around a lot.

126
00:08:09,485 --> 00:08:10,845
Why, you may ask, right?

127
00:08:10,845 --> 00:08:16,025
So in a microservices setup, an
application is broken down into Extremely

128
00:08:16,025 --> 00:08:20,505
small and like loosely coupled services
that kind of magically just work together.

129
00:08:20,665 --> 00:08:23,945
there's a lot of work behind
obviously like this intermingling

130
00:08:23,975 --> 00:08:26,415
of all these different modules
and microservices, right?

131
00:08:26,750 --> 00:08:30,220
and each of the service should
be designed to perform just as

132
00:08:30,750 --> 00:08:33,350
like extremely specific function.

133
00:08:33,910 --> 00:08:36,990
It can be as simple as Oh, add
these two integers and spit out

134
00:08:37,030 --> 00:08:40,410
the output and transfer that
information to another service.

135
00:08:40,790 --> 00:08:44,860
this way each service is designed to
perform a specific function and it

136
00:08:44,880 --> 00:08:50,330
makes it extremely easy to develop,
test it, deploy it, and also debug it.

137
00:08:50,840 --> 00:08:55,730
debugging it is easy 'cause I know when
something fails, which particular service

138
00:08:55,730 --> 00:08:57,470
to go to, to actually go and debug.

139
00:08:57,890 --> 00:09:02,080
so yeah, so like you, you could see,
the benefits, on, on, on a screen.

140
00:09:02,500 --> 00:09:04,120
so independent deployment, right?

141
00:09:04,120 --> 00:09:06,925
So services can be updated without
affecting like the entire system.

142
00:09:07,425 --> 00:09:08,315
Scalable, right?

143
00:09:08,315 --> 00:09:11,715
So like I mentioned in some of the
previous slides, you can scale up and

144
00:09:11,715 --> 00:09:16,755
scale down your service like individual
services, based on the traffic that's

145
00:09:16,755 --> 00:09:20,375
coming in or the volume of users or the
volume of the compute that you need.

146
00:09:20,625 --> 00:09:25,335
you can say your application has 10
microservices and that one of your

147
00:09:25,335 --> 00:09:30,635
microservices is, facing a lot of intake
or like volume is like rising too much.

148
00:09:31,015 --> 00:09:34,525
You could specifically just
scale that single microservice

149
00:09:34,565 --> 00:09:35,345
and you should be good.

150
00:09:35,835 --> 00:09:39,455
you're saving money, like all
the other services, but not

151
00:09:39,485 --> 00:09:40,855
unnecessarily scaling it up.

152
00:09:41,255 --> 00:09:41,565
yeah.

153
00:09:41,765 --> 00:09:43,765
And finally, the third one
is like isolation, right?

154
00:09:43,815 --> 00:09:48,155
If one specific service fails,
you don't, it doesn't really bring

155
00:09:48,155 --> 00:09:50,865
your whole system down unless
it's like a core service, right?

156
00:09:51,195 --> 00:09:54,645
Where, for which users come and use a
website, but yeah, isolation is like

157
00:09:54,645 --> 00:09:58,255
super crucial to like maintaining
the overall system resilience.

158
00:09:58,865 --> 00:10:02,495
but yeah, so yeah, in the, so in
a moment I'll show you like a code

159
00:10:02,515 --> 00:10:07,505
example, that kind of demonstrates how
a basic microservices is implemented.

160
00:10:07,845 --> 00:10:10,964
I'll talk about how these independent
service interact and support like

161
00:10:10,964 --> 00:10:15,845
a resilient architecture So as you
could see on the screen, this is a

162
00:10:15,845 --> 00:10:20,884
super simple microsoft Architecture I
implemented using like java and spring

163
00:10:20,885 --> 00:10:26,224
boot on this slide we have a basic code
snippet that kind of Illustrates how

164
00:10:26,224 --> 00:10:31,144
to create like a restful service So in
this example, the greeting controller

165
00:10:31,164 --> 00:10:35,814
that you see here, it's annotated
with at rest controller, which kind of

166
00:10:35,854 --> 00:10:38,724
indicates that it'll handle web requests.

167
00:10:38,725 --> 00:10:43,334
Now, for example, web requests, as in
when a user, say clicks on a button and

168
00:10:43,344 --> 00:10:44,724
API is called to the backend, right?

169
00:10:44,724 --> 00:10:47,044
So this is the controller
that kind of handles that.

170
00:10:47,554 --> 00:10:51,594
so inside this controller, like
another annotation called at auto

171
00:10:51,594 --> 00:10:53,794
wired, annotation to like inject.

172
00:10:54,294 --> 00:10:59,654
Greeting service, which is responsible for
all the business logic so essentially you

173
00:10:59,654 --> 00:11:04,564
know the forward slash greet annotation
maps like the http get request to the

174
00:11:04,564 --> 00:11:10,764
greet endpoint And essentially when this
endpoint is hit The get greeting, method

175
00:11:10,764 --> 00:11:15,004
is called and essentially this method
returns a simple greeting message called.

176
00:11:15,774 --> 00:11:18,574
Oh, Hey, oh, hello cloud native world.

177
00:11:19,064 --> 00:11:23,294
yeah, so essentially what I want to
explain here is by separating the

178
00:11:23,294 --> 00:11:27,584
controller from like the service
layer We cannot achieve a loose

179
00:11:27,584 --> 00:11:32,564
coupling between the components And
this design not only like simplifies

180
00:11:33,014 --> 00:11:37,354
development and testing, but also
reinforces like fault isolation, right?

181
00:11:37,774 --> 00:11:41,734
yeah, just a basic example, just
to give you a rough idea of how

182
00:11:41,764 --> 00:11:43,264
Microsoft actually looks like.

183
00:11:43,844 --> 00:11:45,034
but yeah, moving on.

184
00:11:45,504 --> 00:11:50,594
so yeah, so the next concept that I really
want to talk about is containerization.

185
00:11:51,024 --> 00:11:55,004
So whenever you're developing
cloud native applications, one of

186
00:11:55,004 --> 00:11:56,544
the thing you should remember is.

187
00:11:56,704 --> 00:12:00,604
I'm building it as a microservice
from the ground up and the

188
00:12:00,614 --> 00:12:03,304
next thing is containerization.

189
00:12:03,304 --> 00:12:07,374
And what I mean by that is like a
method of packaging an application

190
00:12:07,424 --> 00:12:11,604
along with all of its dependencies
into a single self contained unit

191
00:12:12,064 --> 00:12:13,544
is essentially called a container.

192
00:12:14,534 --> 00:12:15,364
so that.

193
00:12:15,674 --> 00:12:19,984
And the purpose of this is we ensure
that the application runs reliably

194
00:12:20,194 --> 00:12:23,054
regardless of where it's deployed, right?

195
00:12:23,154 --> 00:12:26,294
and yeah, so like I mentioned on
the screen, some of the benefits

196
00:12:26,294 --> 00:12:30,534
is like consistency, isolation,
and like portability and docker.

197
00:12:30,564 --> 00:12:34,144
You guys would have come across
docker a lot where you would have

198
00:12:34,154 --> 00:12:37,744
come across terms like dockerization,
which, which basically means that.

199
00:12:38,579 --> 00:12:44,009
I essentially am placing a service
in a closed container something like

200
00:12:44,009 --> 00:12:48,259
docker along with all the dependencies
that the container That the service

201
00:12:48,319 --> 00:12:52,699
needs so that and upgrades happen
automatically to all the dependencies.

202
00:12:52,709 --> 00:12:56,359
So I don't need to worry about Oh, what
if this dependency is not upgraded yet

203
00:12:56,359 --> 00:13:00,289
and it fails my system So those are
some things that I wouldn't worry about

204
00:13:00,329 --> 00:13:02,359
if I docker my dockerize my system.

205
00:13:02,859 --> 00:13:08,339
So yeah, so moving on just a super
quick like demo of What I mean by

206
00:13:08,499 --> 00:13:14,389
containerization a microservice using
docker So essentially step one create a

207
00:13:14,389 --> 00:13:18,629
microservice right of your cloud native
applications step two If you need to

208
00:13:18,639 --> 00:13:23,499
dockerize it so on this slide, you'll
see a docker file that kind of defines

209
00:13:23,974 --> 00:13:25,734
The steps to build our container, right?

210
00:13:26,144 --> 00:13:32,694
So essentially you'll see open JDK image
Which is essentially a Java application

211
00:13:33,194 --> 00:13:39,194
And a work directory command to set the
working directory of the container The

212
00:13:39,374 --> 00:13:43,414
jar file which is essentially all the
dependencies that are needed You'll see

213
00:13:43,414 --> 00:13:48,544
the expose function informs docker like
which port the application will use

214
00:13:48,584 --> 00:13:52,444
and in this case port 8080 and finally
the entry point for it to run, right?

215
00:13:53,234 --> 00:13:57,357
and essentially This is the, the most
common file of a docker container.

216
00:13:57,357 --> 00:14:02,987
And we would need this to actually run
the application and essentially how

217
00:14:02,997 --> 00:14:07,337
you would run it is just do a build
command on this, which essentially call

218
00:14:07,387 --> 00:14:13,017
a docker build and greeting service,
which will basically create a docker

219
00:14:13,047 --> 00:14:15,087
image called tagged greeting service.

220
00:14:15,087 --> 00:14:18,777
And when you run this, when you'd
say something like, Oh, docker run

221
00:14:18,777 --> 00:14:20,557
greeting service, it starts a container.

222
00:14:20,927 --> 00:14:23,227
and it essentially runs the service.

223
00:14:23,727 --> 00:14:28,527
So in the interest of time
moving on, so then, with our

224
00:14:28,557 --> 00:14:30,187
Microsoft is now containerized.

225
00:14:30,627 --> 00:14:34,017
So the next step is how do we
manage and orchestrate this

226
00:14:34,017 --> 00:14:35,557
containers at scale, right?

227
00:14:35,987 --> 00:14:40,957
so this is where Kubernetes
comes into picture and you

228
00:14:40,957 --> 00:14:42,707
may ask, what is Kubernetes?

229
00:14:43,192 --> 00:14:47,212
So kubernetes is a really powerful
orchestration platform that kind

230
00:14:47,212 --> 00:14:50,362
of automates deployment scaling
and like management, right?

231
00:14:50,782 --> 00:14:56,032
so we need we definitely need automatic
scaling for all our cloud native

232
00:14:56,052 --> 00:14:59,902
applications because kubernetes can
dynamically adjust like the number

233
00:14:59,902 --> 00:15:04,952
of Instances that are running it can
monitor the health and like self heal

234
00:15:05,092 --> 00:15:09,112
based on if a certain instances up
or down And essentially it has this

235
00:15:09,112 --> 00:15:14,012
whole like functionality to efficiently
resource, manage different resources.

236
00:15:14,512 --> 00:15:18,372
so yeah, it's really different,
important that we use Kubernetes along

237
00:15:18,382 --> 00:15:20,642
with, Doc, Docker and microservices.

238
00:15:21,212 --> 00:15:24,552
And essentially all we have
Kubernetes, like you could see

239
00:15:24,562 --> 00:15:30,022
is we essentially have pods where
we have these containers running.

240
00:15:30,512 --> 00:15:33,092
And essentially, there are various
commands that kubernetes has

241
00:15:33,132 --> 00:15:36,422
which will help us like deploy
and maintain these services

242
00:15:36,922 --> 00:15:41,932
so moving on to this slide where
we'll focus on like the automation

243
00:15:41,952 --> 00:15:47,537
strategies to enhance kind of system
resilience so So for any cloud native

244
00:15:47,597 --> 00:15:54,657
application, we need to focus a lot on
like system resilience and building CICD

245
00:15:54,657 --> 00:15:59,987
pipelines, like automate testing and
run your build through a CICD pipeline.

246
00:15:59,987 --> 00:16:03,947
So that's, so as soon as you deploy
some kind of code, we need an automated

247
00:16:03,947 --> 00:16:08,867
service that kind of builds a jar
out of the service and then runs a

248
00:16:08,867 --> 00:16:13,377
bunch of automated, tests around it
and make sure it is production ready.

249
00:16:13,897 --> 00:16:18,907
Without this we can deploy a service
and without any testing involved.

250
00:16:19,027 --> 00:16:20,377
What if it just breaks it, right?

251
00:16:20,377 --> 00:16:22,067
So that'll just mess up the whole service.

252
00:16:22,397 --> 00:16:23,377
So we don't want that.

253
00:16:23,377 --> 00:16:28,647
So we'll have to build out CI CD pipelines
for this And also we need a bunch of like

254
00:16:28,657 --> 00:16:34,717
self healing infrastructure that kind
of auto scales Based on load restarts

255
00:16:34,757 --> 00:16:38,492
whenever the service is done so like you
could see on the screen, there are a lot

256
00:16:38,492 --> 00:16:43,872
of monitoring integration systems like
Prometheus, Grafana, and, ELK stack,

257
00:16:43,922 --> 00:16:45,942
on Amazon for like proactive alerts.

258
00:16:46,442 --> 00:16:47,942
so yeah, so moving on.

259
00:16:47,962 --> 00:16:52,312
So this is like a super high level of
how a CI CD pipeline might look right.

260
00:16:52,762 --> 00:16:57,392
If, if you guys use Git in, in your,
daily work, you would notice that

261
00:16:57,412 --> 00:16:59,432
we have like several branches, main.

262
00:16:59,702 --> 00:17:02,472
so whenever you want to create
a pull request, you push a code.

263
00:17:02,492 --> 00:17:07,172
And once you like, do submit
your CI CD pipelines take over.

264
00:17:07,602 --> 00:17:12,032
They run a bunch of like
unit tests, automated tests.

265
00:17:12,122 --> 00:17:15,062
if it's, if it's a mobile
platform, it generates an APK.

266
00:17:15,517 --> 00:17:17,697
And it does a bunch of like screenshots.

267
00:17:17,707 --> 00:17:21,527
So these are really important,
to make sure none of it breaks.

268
00:17:22,057 --> 00:17:26,497
And like on the screen, there
are a set of commands, this is

269
00:17:26,537 --> 00:17:27,607
essentially a settings file.

270
00:17:27,967 --> 00:17:31,937
So there are a lot of jobs that
are run and you can modify it to

271
00:17:31,937 --> 00:17:36,237
such an extent that you can run
your application on any service.

272
00:17:36,247 --> 00:17:39,987
For example, you can run it on Ubuntu,
you can run it on like a Windows or a

273
00:17:39,997 --> 00:17:44,397
Mac and make sure your application runs
properly on like different services.

274
00:17:44,897 --> 00:17:50,207
Moving on, we will discuss how
integrating monitoring and self healing

275
00:17:50,217 --> 00:17:55,097
capabilities helps the resilience
of cloud native systems, right?

276
00:17:55,467 --> 00:17:59,527
so yeah, so monitoring
different metrics is useful.

277
00:17:59,707 --> 00:18:05,777
just cause we can see how our
system is CPU memory and the network

278
00:18:05,777 --> 00:18:09,907
utilization, And we want to make sure
none of this goes beyond a point.

279
00:18:10,307 --> 00:18:15,647
and if it does, we need to have things
in place to make sure our instances

280
00:18:15,967 --> 00:18:17,927
or our containers aren't overloaded.

281
00:18:18,317 --> 00:18:21,997
So we have like several tools, and set
up called Prometheus for collecting

282
00:18:21,997 --> 00:18:26,677
different metrics and like alerting our
SRAs or developers just to make sure

283
00:18:26,677 --> 00:18:30,127
that if a service is being overloaded, we
got to go in and do something to fix it.

284
00:18:30,347 --> 00:18:34,777
and Grafana is pretty useful for like
visualization, like dashboarding as well.

285
00:18:35,277 --> 00:18:37,797
yeah, but yeah, so moving on.

286
00:18:37,817 --> 00:18:42,237
So let's quickly talk about, like
a real world case study, right?

287
00:18:42,607 --> 00:18:45,587
so let's look at say, like a
major e commerce platform, like

288
00:18:45,617 --> 00:18:49,957
Amazon that kind of migrated
to a cloud native architecture.

289
00:18:50,597 --> 00:18:51,097
This is.

290
00:18:51,597 --> 00:18:52,557
Super hypothetical.

291
00:18:52,587 --> 00:18:57,237
so let's say initially the phased a lot
of like frequent downtime like scalability

292
00:18:57,317 --> 00:19:02,607
issues during like peak load times And
like really slow deployment process

293
00:19:03,097 --> 00:19:07,347
But once they adopted like a cloud
native approach, they re architected

294
00:19:07,357 --> 00:19:11,577
the whole system into microservices
Containerized their applications

295
00:19:11,577 --> 00:19:16,392
using docker And implemented like
a robust CI CD pipeline along with

296
00:19:16,402 --> 00:19:18,672
monitoring using Prometheus and Grafana.

297
00:19:19,172 --> 00:19:23,872
So this way Some of the lessons that they
learned was like, oh building resilience

298
00:19:23,872 --> 00:19:28,092
from like ground up is super essential
for maintaining high availability,

299
00:19:28,102 --> 00:19:30,722
especially in a dynamic cloud environment.

300
00:19:31,172 --> 00:19:36,042
And obviously continuously monitoring
and like feedback loops are crucial for

301
00:19:36,092 --> 00:19:40,862
ongoing improvements and like a quick
recovery from unexpected failures.

302
00:19:41,502 --> 00:19:46,702
So this case study definitely underscores
like the importance of integrating these

303
00:19:46,702 --> 00:19:50,662
practices to build systems to make your
cloud native application like scalable.

304
00:19:51,162 --> 00:19:51,612
Yeah.

305
00:19:51,722 --> 00:19:54,332
so yeah, so that brings us to
the end of this presentation.

306
00:19:54,852 --> 00:19:59,142
to quickly recap, we explored the
fundamental principles of like

307
00:19:59,362 --> 00:20:01,062
cloud native, resilience, right?

308
00:20:01,062 --> 00:20:05,282
So including the benefits of
microservices, containerization using

309
00:20:05,292 --> 00:20:10,592
Docker, the automation using CI and CD
pipelines and monitoring using Grafana.

310
00:20:11,092 --> 00:20:12,772
yeah, thanks for coming to my talk.

