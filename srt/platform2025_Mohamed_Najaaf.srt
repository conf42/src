1
00:00:00,500 --> 00:00:01,220
Hi everyone.

2
00:00:01,380 --> 00:00:02,969
My name is Mohammad Nja.

3
00:00:03,060 --> 00:00:06,239
I work as a solutions architect
at Amazon Web Services.

4
00:00:06,760 --> 00:00:08,620
So thank you for joining
for today's session.

5
00:00:09,080 --> 00:00:12,860
So today I will be talking about
Amazon Queue Developer and how is

6
00:00:12,860 --> 00:00:17,810
it integrated with GitLab to create
a next level developer experience.

7
00:00:18,310 --> 00:00:22,540
So before diving into the D details,
I wanted to share a report from

8
00:00:22,840 --> 00:00:29,450
GitLab Global DevSecOps which was
shared last year, which says that 74

9
00:00:29,450 --> 00:00:35,360
percentage of organization using AI
for software development reports the

10
00:00:35,360 --> 00:00:38,240
desire to consolidate their tool chain.

11
00:00:38,690 --> 00:00:44,150
So we have seen the AI tools have been
part of our personal life as well as.

12
00:00:44,900 --> 00:00:49,100
Our work life for many months
and couple of years now.

13
00:00:49,200 --> 00:00:54,570
So what we have seen from customers
is a strong requirement or a need to

14
00:00:54,570 --> 00:01:01,060
consolidate, some of the tools so they can
perform their tasks related to software

15
00:01:01,060 --> 00:01:05,420
development in a single tool rather than,
using multiple tasks, which increases the

16
00:01:05,420 --> 00:01:08,080
complexity as well as causing confusion.

17
00:01:08,130 --> 00:01:12,060
That has been a need that customers
have been, sharing with us.

18
00:01:12,150 --> 00:01:16,830
So how can we help the people who have
been using KIT Lab, so that, that's

19
00:01:16,830 --> 00:01:18,960
the main part of our today's session.

20
00:01:19,460 --> 00:01:22,520
So that's where GitLab Duo
with Amazon Q mbs, right?

21
00:01:23,080 --> 00:01:27,910
So we know that GitLab is a very
popular DevSecOps platform that has

22
00:01:27,910 --> 00:01:33,530
been used by software developers and
IT professionals all across the globe.

23
00:01:34,160 --> 00:01:40,060
Now with integration with Amazon Queue
you have the ability to accelerate

24
00:01:40,210 --> 00:01:44,800
your overall software development
lifecycle, whether it's transforming

25
00:01:44,800 --> 00:01:50,720
your legacy code or in order to, you
have an idea and you wanted to create

26
00:01:50,750 --> 00:01:55,900
code and all the way to, raising a
merge request in GitLab, that all can

27
00:01:55,900 --> 00:01:57,870
be accelerated, using Amazon Queue.

28
00:01:58,320 --> 00:02:01,920
And also you, if you want to
conduct security code reviews.

29
00:02:02,340 --> 00:02:05,600
For your code, Amazon queue
can also help with that.

30
00:02:05,870 --> 00:02:11,290
So the aim of using Amazon
Queue is to accelerate your

31
00:02:11,530 --> 00:02:12,850
software development lifecycle.

32
00:02:13,450 --> 00:02:16,630
So we will talk about some
of this in the coming slides.

33
00:02:16,630 --> 00:02:21,730
We also have like few demo videos that
can help you in better understanding

34
00:02:22,030 --> 00:02:23,530
of the features of Amazon Queue.

35
00:02:24,030 --> 00:02:29,810
And one more important thing is that
as of today, the Amazon queue is for

36
00:02:29,810 --> 00:02:35,660
GitLab customers is only available for
GitLab self-managed ultimate customers.

37
00:02:36,160 --> 00:02:40,650
So I also wanted to talk about some
of the core features of Amazon Queue

38
00:02:40,650 --> 00:02:42,750
when using it along with GitLab Duo.

39
00:02:43,420 --> 00:02:46,180
So the first one is streamlining
software development, right?

40
00:02:46,180 --> 00:02:50,670
As I said before, if you have an idea,
so you have a, code triple which you

41
00:02:50,670 --> 00:02:54,390
have in GitLab and say there is a new.

42
00:02:54,690 --> 00:03:01,460
Issue that you have created an idea,
and with the use of Amazon Q can.

43
00:03:01,835 --> 00:03:08,045
Look at that issue, see the descriptions
and create a code, for you, which

44
00:03:08,045 --> 00:03:12,965
you can then review yourself and,
add or remove anything that you

45
00:03:13,325 --> 00:03:17,735
don't, you want to update and then
send all the way to, MER request.

46
00:03:18,365 --> 00:03:21,600
So we will see again then
in a demo video coming up.

47
00:03:22,100 --> 00:03:24,560
And the second one is
optimizing your code, right?

48
00:03:24,560 --> 00:03:29,670
You can use Amazon queue to generate
unit test from a merge request.

49
00:03:30,440 --> 00:03:34,520
Another important thing is like
maximizing the code quality and security.

50
00:03:34,520 --> 00:03:40,290
So with Amazon Queue you can perform,
high quality security code reviews.

51
00:03:40,740 --> 00:03:45,240
And lastly, you can modernize your
code, you can transform your legacy

52
00:03:45,240 --> 00:03:49,470
Java applications that are using
eight or 11 version, and then.

53
00:03:49,710 --> 00:03:52,740
Transfer me to Channel 17 in minutes.

54
00:03:52,790 --> 00:03:56,600
And earlier we know that it can
take up to weeks or in some cases,

55
00:03:56,600 --> 00:03:59,990
depending upon the size of the
code, it can take up to months.

56
00:04:00,290 --> 00:04:05,710
But we'll see, shortly how Amazon
Q working along with Kit Lab can

57
00:04:05,710 --> 00:04:07,870
accelerate that transformation.

58
00:04:08,370 --> 00:04:12,800
So coming to the first feature
is idea to merge request, right?

59
00:04:12,980 --> 00:04:13,910
So what are the benefits?

60
00:04:13,910 --> 00:04:15,320
And it is quite clear, right?

61
00:04:15,320 --> 00:04:18,770
It's faster feature implementation cycles.

62
00:04:18,770 --> 00:04:22,550
So if your business requirement
needs a particular new feature that

63
00:04:23,010 --> 00:04:27,040
you want to deliver it, quickly
with the help of Amazon, QU can

64
00:04:27,040 --> 00:04:29,230
deliver it much faster now and.

65
00:04:29,679 --> 00:04:31,059
Core quality, right?

66
00:04:31,129 --> 00:04:37,324
It gives you and another perspective
from the A R AI code AI tools such

67
00:04:37,324 --> 00:04:43,114
as Amazon Queue to ensure that the
quality of the code is high and it

68
00:04:43,114 --> 00:04:47,864
doesn't contain any, vulnerabilities,
which it can detect through the unit

69
00:04:47,864 --> 00:04:50,374
security code code scanning, et cetera.

70
00:04:50,874 --> 00:04:51,444
And.

71
00:04:52,359 --> 00:04:55,029
And lastly, it improves the
developer productivity, right?

72
00:04:55,119 --> 00:04:58,649
And thus the overall aim
of using such tools, right?

73
00:04:58,829 --> 00:05:01,259
So for the demo, we have a sample.

74
00:05:01,484 --> 00:05:05,874
GitLab page where we have a sample
project with types script, files.

75
00:05:06,085 --> 00:05:09,789
So now what we are going to do is
we will be creating an issue, which

76
00:05:09,789 --> 00:05:13,179
is essentially an idea that we want
to integrate into this project.

77
00:05:13,659 --> 00:05:20,079
So what we'll be doing is
we'll be creating an issue

78
00:05:20,259 --> 00:05:22,779
on the top left and we can.

79
00:05:23,769 --> 00:05:24,339
Title.

80
00:05:24,339 --> 00:05:27,579
So in this case it's an adding
a new signup flow to the

81
00:05:27,579 --> 00:05:29,169
website, as you can see here.

82
00:05:29,769 --> 00:05:34,339
And and you create an account for
the user that takes an email and

83
00:05:34,339 --> 00:05:38,039
password and username add a flow
for existing users to sign in.

84
00:05:38,039 --> 00:05:40,529
And this should be linked
from the whole page, right?

85
00:05:40,529 --> 00:05:45,959
So those are the few descriptions that we
have added into our the new issue, right?

86
00:05:46,459 --> 00:05:50,299
Now what we are going to do is like once
we created it, the issue will be invoking

87
00:05:50,299 --> 00:05:53,179
Amazon Q using forward slash q and Dev.

88
00:05:53,524 --> 00:05:58,764
And once we enter that, we will
see anime a message from Amazon

89
00:05:58,764 --> 00:06:04,644
Queue Service saying, I am working
on generating code for this issue.

90
00:06:04,914 --> 00:06:08,274
I'll update this comment at Open
Emerge, request when I am done.

91
00:06:08,304 --> 00:06:11,994
So in the background, it's going
to look at the title, it's going to

92
00:06:11,994 --> 00:06:14,919
look at the description that you have
entered, and then it's generating.

93
00:06:15,199 --> 00:06:20,719
Quote on behalf of you, and
after a few seconds you will see

94
00:06:20,989 --> 00:06:22,909
an open merch request, right?

95
00:06:22,969 --> 00:06:24,094
So let's take a look.

96
00:06:24,594 --> 00:06:27,994
So you can see that it has finished
generating the proposed code

97
00:06:27,994 --> 00:06:29,644
changes and opened a merge request.

98
00:06:30,124 --> 00:06:36,454
So we can go to that merge request now,
and you can see it, it documents or

99
00:06:36,454 --> 00:06:41,119
it updates all those comments in the
relevant, issues or merge requests.

100
00:06:41,204 --> 00:06:45,584
So it's easier for us to understand
what's happening in the background on what

101
00:06:45,584 --> 00:06:47,834
exactly Amazon Queue service is doing.

102
00:06:48,334 --> 00:06:50,814
So you can see that the
code has been implemented.

103
00:06:50,874 --> 00:06:55,314
So the other important step is to
review the code changes, right?

104
00:06:55,614 --> 00:06:59,034
So you go through the code and see
what are the additional code that

105
00:06:59,034 --> 00:07:02,904
it has been degraded, and see if
there is anything that's missing.

106
00:07:03,414 --> 00:07:08,939
And basically doing a quick check
of the quality of the code, right?

107
00:07:09,439 --> 00:07:13,229
So in this case, what we are
what we're seeing is like we, we

108
00:07:13,439 --> 00:07:18,629
are trying to include one more
small feature into the code.

109
00:07:19,029 --> 00:07:20,769
So in this code there is no logging.

110
00:07:21,099 --> 00:07:25,719
So this, in this term you can see
we are adding a comment again,

111
00:07:25,719 --> 00:07:28,949
saying at logging and when we.

112
00:07:29,474 --> 00:07:35,284
After we add the comment and then we again
invoke the Amazon Q Service slash Q Dev.

113
00:07:35,784 --> 00:07:38,034
What it does is the same thing.

114
00:07:38,514 --> 00:07:41,964
It reviews the code, it reviews
your comment, and then it creates

115
00:07:41,964 --> 00:07:44,744
a code, based on your requirement.

116
00:07:44,749 --> 00:07:44,839
Right?

117
00:07:45,339 --> 00:07:49,809
So again, going back to the changes,
you can see there is now a new

118
00:07:49,809 --> 00:07:52,569
file called Log at or ts, which is.

119
00:07:53,184 --> 00:07:58,545
Very recently created for you and
you can review that code and if

120
00:07:58,545 --> 00:08:02,705
you're satisfied with it, you can
basically upload the moist request.

121
00:08:02,705 --> 00:08:07,965
So this is one of the features of
FAM using Amazon Q with kit Lab.

122
00:08:08,465 --> 00:08:11,525
So the next one is J
application Modernization.

123
00:08:11,574 --> 00:08:16,014
Let's say in your current in organization,
you have your applications that are

124
00:08:16,014 --> 00:08:18,804
using Java eight or Java 11 applications.

125
00:08:19,194 --> 00:08:24,364
So if you're looking to modernize
or transform the versions to

126
00:08:24,364 --> 00:08:30,184
Java 17 quickly, then Amazon Q
is a tool that you want to use.

127
00:08:30,754 --> 00:08:35,774
The specialty of using this tool is, it's
not just transform your code, but it does

128
00:08:35,774 --> 00:08:37,964
that in a well-documented way, right?

129
00:08:38,014 --> 00:08:43,414
It creates an upgrade plan and it
generates, the ready to review MER request

130
00:08:43,684 --> 00:08:45,484
while maintaining full traceability.

131
00:08:45,844 --> 00:08:49,984
So you have that full clear
documentation of what happened.

132
00:08:49,984 --> 00:08:52,204
What are the dependencies
that he it removed?

133
00:08:52,204 --> 00:08:54,544
What are the dependencies
that are, it has upgraded.

134
00:08:54,904 --> 00:08:59,734
All sort of information that you would
need will be documented along with

135
00:08:59,734 --> 00:09:01,714
the actual transformation of the code.

136
00:09:02,144 --> 00:09:05,559
So now let's take a look at that demo.

137
00:09:06,059 --> 00:09:10,109
All right, so now again, we have a
new issue which we have given a title

138
00:09:10,109 --> 00:09:13,619
called Upgrade Project to Java 17.

139
00:09:14,099 --> 00:09:17,449
And then what we are going to
do is give a in the dis in the

140
00:09:17,449 --> 00:09:19,429
description, we will be invoking.

141
00:09:20,164 --> 00:09:24,944
Amazon q in this case will
be invoking transform.

142
00:09:25,154 --> 00:09:30,624
Earlier we used dev, DEV in order
to generate code, but in this one

143
00:09:30,864 --> 00:09:32,634
we are transforming the code, right?

144
00:09:32,634 --> 00:09:34,805
So that's why we are using transform.

145
00:09:35,305 --> 00:09:38,670
And then when we create
the issue you will see.

146
00:09:39,170 --> 00:09:43,010
What are the different steps
that Amazon Queue will perform?

147
00:09:43,220 --> 00:09:47,440
So the first one is I'm running
the GitLab CSAD job required.

148
00:09:47,440 --> 00:09:51,850
Transform your code and then it'll upload
your code, generate a transformation plan.

149
00:09:52,270 --> 00:09:58,150
It'll transform your code and then
generate a merge request, right?

150
00:09:58,650 --> 00:10:00,480
So we'll see.

151
00:10:00,630 --> 00:10:03,520
What are the, what's the
accreditation plan and the

152
00:10:03,520 --> 00:10:05,710
documentation that Amazon Q provides?

153
00:10:05,830 --> 00:10:11,029
So you can see that it has started giving
output and very quickly you can see

154
00:10:11,029 --> 00:10:13,009
that it, it analyzes the source code.

155
00:10:13,009 --> 00:10:16,759
It says the lines of code in your
application, dependencies that needs to

156
00:10:16,759 --> 00:10:21,409
be replaced, a file should be changed,
and the plan transformation changes

157
00:10:21,409 --> 00:10:25,259
all those steps by different steps
that it'll take in order to upgrade.

158
00:10:25,759 --> 00:10:29,429
And once it's created the cre
transformation plan, the next step

159
00:10:29,429 --> 00:10:31,469
is actually transforming the code.

160
00:10:31,919 --> 00:10:34,349
And you will see that, yeah.

161
00:10:34,349 --> 00:10:36,274
It has finally created that.

162
00:10:36,804 --> 00:10:40,649
Merge request for the upgraded
upgrading to the Java 17.

163
00:10:40,949 --> 00:10:45,239
And as you can see in the screen
it details all those additional

164
00:10:45,239 --> 00:10:50,619
details that you'll recur like the
additional code that has been replaced.

165
00:10:50,619 --> 00:10:55,779
What are the files that has been changed
and what are the next steps that it'll do?

166
00:10:56,279 --> 00:10:57,719
Asks you to do right?

167
00:10:57,779 --> 00:11:01,889
You should always review the
code and see the change that

168
00:11:01,889 --> 00:11:03,719
it has made to the application.

169
00:11:04,139 --> 00:11:08,119
And again, but most of the times
you might have to make your small

170
00:11:08,119 --> 00:11:09,969
changes in some of the files.

171
00:11:10,359 --> 00:11:14,769
But the aim of using Amazon Q is
to accelerate your overall software

172
00:11:14,769 --> 00:11:16,119
lifecycle development, right?

173
00:11:16,599 --> 00:11:18,399
And that's what we are seeing now.

174
00:11:19,179 --> 00:11:22,609
You can see that it has paused
the, different stages of

175
00:11:22,609 --> 00:11:25,954
your pipeline and it yeah.

176
00:11:25,984 --> 00:11:29,854
So this is one of the other demo that I
wanted to show you how you can utilize

177
00:11:29,854 --> 00:11:35,014
Amazon Q to upgrade your Java legacy
applications to two, which have a 17.

178
00:11:35,514 --> 00:11:40,524
So moving on to the next and
final feature is the code reviews.

179
00:11:41,094 --> 00:11:46,444
So we know that when we develop
the code, we do the, peer

180
00:11:46,444 --> 00:11:48,794
reviewing, and other measures.

181
00:11:49,304 --> 00:11:51,999
But with the, gen ai we can.

182
00:11:52,934 --> 00:11:54,104
Do much better, right?

183
00:11:54,344 --> 00:11:59,764
That's basically using Amazon queue
services such like that to review

184
00:11:59,944 --> 00:12:04,564
your existing code and it'll suggest
are there any vulnerabilities?

185
00:12:04,954 --> 00:12:10,144
Are there any scope fori optimizing
your code, to make it more

186
00:12:10,144 --> 00:12:12,439
resilient, more secure in nature.

187
00:12:12,939 --> 00:12:18,309
So for the demo, what we are going to
see is we have emerge requests, right?

188
00:12:18,309 --> 00:12:23,180
And we, with all the code that we have
written down or generated by Amazon queue.

189
00:12:23,629 --> 00:12:27,140
And then what we are going to do
is like review that code to check

190
00:12:27,140 --> 00:12:30,000
for quality or, security issues.

191
00:12:30,300 --> 00:12:33,700
So for that purpose, we'll be
using forward slash q review.

192
00:12:34,270 --> 00:12:36,790
And when you comment
that behind the screen.

193
00:12:36,995 --> 00:12:43,025
It scans the code and it gives you
a detailed information on the the

194
00:12:43,025 --> 00:12:44,615
vulnerabilities it has detected.

195
00:12:44,615 --> 00:12:49,115
And it also highlight the piece of
code in your actual code base to see.

196
00:12:49,115 --> 00:12:51,395
This is where you have that vulnerability.

197
00:12:51,635 --> 00:12:55,324
So in this use case, you can see
that it has, it is seeing that

198
00:12:55,324 --> 00:13:00,155
is a possibility of SQL injection
attacks because of this code.

199
00:13:00,485 --> 00:13:04,620
And what you can do is like you
can review the findings and then.

200
00:13:05,405 --> 00:13:07,954
You can fix it then and there, right?

201
00:13:08,645 --> 00:13:10,685
And for that we use the fixed command.

202
00:13:11,185 --> 00:13:15,805
And when you add that command, it'll
generate the updated code and you

203
00:13:15,805 --> 00:13:20,094
can review the code changes again
and ensure that it's all good.

204
00:13:20,275 --> 00:13:22,555
And then, apply the suggestion.

205
00:13:23,055 --> 00:13:24,899
So this is one of the ways you can.

206
00:13:25,785 --> 00:13:30,545
Utilize Amazon queue to, basically
review your code for, quality checks

207
00:13:30,545 --> 00:13:32,314
and other security vulnerabilities.

208
00:13:32,814 --> 00:13:37,815
So that's all what I wanted to talk to
you about, just highlighting the main

209
00:13:37,815 --> 00:13:42,915
core features of Amazon Queue and if
you're using GitLab in your organization.

210
00:13:42,945 --> 00:13:49,015
And if you're using AWS, what I would
suggest is, give it, try with Amazon Queue

211
00:13:49,075 --> 00:13:54,645
and see how, if it helps in your, software
development for your organization.

212
00:13:55,630 --> 00:14:01,590
So feel free to scan the Q QR code
to learn more about this integration.

213
00:14:02,040 --> 00:14:06,040
And as I said before, as of
today, it's only available for

214
00:14:06,220 --> 00:14:08,170
self-managed ultimate customers.

215
00:14:08,670 --> 00:14:09,840
But yeah, thank you.

216
00:14:09,840 --> 00:14:12,390
Thank you so much for
taking part in this session.

217
00:14:12,390 --> 00:14:18,240
I hope it has been helpful and I hope
you have a good rest of the day in

218
00:14:18,240 --> 00:14:20,630
the platform engineering conference.

219
00:14:20,930 --> 00:14:21,260
Thank you.

