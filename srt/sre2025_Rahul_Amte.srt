1
00:00:00,780 --> 00:00:01,380
Hello everyone.

2
00:00:01,950 --> 00:00:02,760
Welcome to my talk.

3
00:00:03,390 --> 00:00:06,570
My name is Rahul Amte and I
work as a cloud architect.

4
00:00:07,260 --> 00:00:11,790
I've been working in IT and in cloud
technologies for more than a decade now.

5
00:00:12,240 --> 00:00:18,720
Today my topic is AI and chaos and energy,
and how we can implement smarter failure

6
00:00:18,720 --> 00:00:21,780
system testing for resilient systems.

7
00:00:23,105 --> 00:00:24,415
We'll start with introduction.

8
00:00:25,415 --> 00:00:27,365
AI is transforming chaos.

9
00:00:28,235 --> 00:00:33,364
Moving from manual failure testing
to intelligent, productive, and

10
00:00:33,455 --> 00:00:35,345
automated resilience validation.

11
00:00:35,825 --> 00:00:40,445
We'll cover foundational concepts
and then look into AI integration

12
00:00:40,535 --> 00:00:41,885
and real world use cases.

13
00:00:42,455 --> 00:00:44,225
So what is our agenda today?

14
00:00:44,915 --> 00:00:45,545
It is the flow.

15
00:00:46,175 --> 00:00:49,625
We'll begin with chaos
engineer and its evolution.

16
00:00:50,135 --> 00:00:54,635
Then explore why and how a AI enhances it.

17
00:00:55,114 --> 00:00:59,975
We'll go through the architecture
tools, case studies, and close with

18
00:00:59,975 --> 00:01:02,764
the best practices and future trends.

19
00:01:03,394 --> 00:01:07,924
With that, we'll move on to
explain what is chaos engineering.

20
00:01:08,704 --> 00:01:15,785
Can you imagine your systems going down
at 3M in an night, but coming back by

21
00:01:15,785 --> 00:01:18,574
themselves, by recovering by themselves?

22
00:01:19,160 --> 00:01:22,625
But what if there is no
human intervention needed?

23
00:01:23,060 --> 00:01:28,009
But before which, what if you can
test the whole scenario that in simple

24
00:01:28,009 --> 00:01:31,519
words, is inducing chaos engineering.

25
00:01:32,120 --> 00:01:35,630
Chaos engineering involves
running controlled experiments

26
00:01:35,690 --> 00:01:39,590
to test the system's ability to
withand turbulent conditions.

27
00:01:40,250 --> 00:01:45,590
Netflix was the first one to introduce
this to ensure system reliability,

28
00:01:45,859 --> 00:01:48,139
especially for distributor systems.

29
00:01:48,710 --> 00:01:53,840
Next, we'll move on to core
principles for chaos engineering.

30
00:01:54,560 --> 00:02:00,019
These principles guide the practice, so
we start with a steady state hypothesis,

31
00:02:00,500 --> 00:02:05,479
introduce real world disruptions, run
in production, automate the process, and

32
00:02:05,479 --> 00:02:08,269
always minimize the risk of blast radius.

33
00:02:09,289 --> 00:02:12,380
Let's now talk about
the evolution of chaos.

34
00:02:12,470 --> 00:02:12,709
Engineer.

35
00:02:13,070 --> 00:02:14,060
How did it start?

36
00:02:16,820 --> 00:02:19,100
Netflix Chaos Monkey.

37
00:02:19,579 --> 00:02:25,790
From an ecosystem to a full ecosystem
of tools like Lin and Litmus Chaos,

38
00:02:26,150 --> 00:02:29,930
chaos Engineering has matured into
a discipline engineering practice.

39
00:02:30,650 --> 00:02:35,840
It is now integrated with CICD pipeline
and the all workflows to induce chaos

40
00:02:35,840 --> 00:02:37,670
engineering and test the systems.

41
00:02:38,300 --> 00:02:39,830
Going on to the limitations.

42
00:02:39,830 --> 00:02:42,505
So what are the limitations of
traditional chaos engineering?

43
00:02:43,280 --> 00:02:44,630
Traditional methods are limited.

44
00:02:45,185 --> 00:02:50,075
They rely heavily on manual
scenario selection and lack of

45
00:02:50,255 --> 00:02:52,085
automation in analyzing results.

46
00:02:52,625 --> 00:02:58,715
This slow down learning and scale
where AI can jump in and help us

47
00:02:58,805 --> 00:03:03,995
and solve the problem, we'll move
on to why AI in chaos Engineering.

48
00:03:04,055 --> 00:03:04,745
How does it help?

49
00:03:05,495 --> 00:03:10,295
AI actually can enhance chaos, meaning
by making predictions generate.

50
00:03:11,899 --> 00:03:17,540
Dynamic test scenarios and analyzing
system behavior in their time, reducing

51
00:03:17,989 --> 00:03:20,420
the manual overhead significantly.

52
00:03:20,809 --> 00:03:25,339
But what are the key AI capabilities
to our resilience engineering?

53
00:03:25,730 --> 00:03:26,390
We'll look into that.

54
00:03:27,019 --> 00:03:30,920
Key capabilities conclude
anomaly detection through machine

55
00:03:30,920 --> 00:03:34,820
learning, forecasting component
failures, and reinforcement

56
00:03:34,820 --> 00:03:36,890
learning for scenario planning.

57
00:03:37,595 --> 00:03:38,705
Of course NLP.

58
00:03:38,855 --> 00:03:40,865
Analyzing incident reports.

59
00:03:41,165 --> 00:03:47,465
Incident reports as in data is definitely
a key AI capability for chaos engineering.

60
00:03:48,785 --> 00:03:50,015
How does the workflow work?

61
00:03:50,195 --> 00:03:54,335
Let's look into AI and the chaos
engineering workflow together.

62
00:03:54,875 --> 00:03:57,215
So this is how AI fits in.

63
00:03:57,665 --> 00:04:03,305
From collecting the observability data
to generating hypothesis, designing

64
00:04:03,635 --> 00:04:08,915
chaos experiments, injecting forms, and
using real time analytics for insights

65
00:04:09,005 --> 00:04:11,165
and remediation in the bottom line.

66
00:04:11,585 --> 00:04:15,305
Your observability data, as in your
logging monitoring observability data

67
00:04:15,395 --> 00:04:18,185
is a very important component for this.

68
00:04:18,755 --> 00:04:24,544
So let's actually now look at a sample AI
power architecture on AWS cloud provider.

69
00:04:24,965 --> 00:04:29,855
This is how the whole integration of
integrating and inducing the Chaos

70
00:04:29,855 --> 00:04:32,465
Monkey works for your systems like EC2.

71
00:04:33,275 --> 00:04:39,175
Also, there's multiple other use case
architectures where you can include

72
00:04:39,175 --> 00:04:44,094
parameters open elementary as input
and AI ML models for anomaly detection.

73
00:04:45,805 --> 00:04:48,085
So what are some of the
tools in chaos engineering?

74
00:04:48,325 --> 00:04:51,385
Let's look at some popular
tools in chaos engineering.

75
00:04:52,150 --> 00:04:55,450
A snapshot of popular tools
includes Chaos Monkey.

76
00:04:55,630 --> 00:05:01,150
As I mentioned, Netflix started all,
basically when you're watching a

77
00:05:01,150 --> 00:05:05,739
stream, a show on Netflix, and you
will not even know that the systems

78
00:05:05,739 --> 00:05:07,510
were down on the backend on Netflix.

79
00:05:07,870 --> 00:05:08,260
How?

80
00:05:08,469 --> 00:05:13,645
Because they have tested it multiple times
using Chaos Monkey and made sure it's

81
00:05:13,645 --> 00:05:15,520
a seamless streaming for the audience.

82
00:05:16,090 --> 00:05:19,090
MBR also offers a SA
model, which is another.

83
00:05:19,630 --> 00:05:24,130
Chaos Engineering tool limit Chaos
is a Kubernetes native tool and

84
00:05:24,130 --> 00:05:26,200
chaos toolkit is fully open source.

85
00:05:26,890 --> 00:05:32,080
And again, all these tools have their
strengths and all AI integration ship.

86
00:05:33,010 --> 00:05:37,870
Let's look at how these tools integrate
AI into the existing tools which

87
00:05:37,870 --> 00:05:41,080
your enterprises or companies or
organizations might be already using.

88
00:05:41,679 --> 00:05:43,959
AI doesn't need to replace existing tools.

89
00:05:44,379 --> 00:05:45,639
It can enhance them.

90
00:05:46,164 --> 00:05:50,484
For instance, chaos Toolkit can
use AI based probes for validation.

91
00:05:51,504 --> 00:05:54,504
Lin can use ML insights
for targeted attacks.

92
00:05:54,984 --> 00:05:59,394
Litmus chaos on the other side supports
the AI driven workflows as we speak.

93
00:06:00,024 --> 00:06:02,214
Let's look at couple
of quick case studies.

94
00:06:02,454 --> 00:06:05,724
As I mentioned, Netflix
was the first to try this.

95
00:06:06,364 --> 00:06:07,954
The tool is called Chaos Monkey.

96
00:06:08,389 --> 00:06:09,469
It's just one part though.

97
00:06:09,829 --> 00:06:13,469
They now used corrective analysis
and AI based simulations sim

98
00:06:13,859 --> 00:06:17,969
simulations to such resilience
of the global streaming services.

99
00:06:18,299 --> 00:06:24,539
That's why we never see at least 9.9% of
the times we don't see Netflix being done

100
00:06:25,289 --> 00:06:27,239
resulting in highly available systems.

101
00:06:27,809 --> 00:06:30,869
Another case study we can talk
about is Lin, which is another

102
00:06:31,094 --> 00:06:32,474
AI chaos engineering tool.

103
00:06:32,939 --> 00:06:40,614
They come with integrated with ml. It was
used in a Fortune 500 form and it actually

104
00:06:40,614 --> 00:06:45,655
proactively rejected risk systems and
states and resulted in the reduced inquiry

105
00:06:45,835 --> 00:06:48,984
time by 60%, avoiding major outages.

106
00:06:49,465 --> 00:06:55,854
This is very big win for thems since they
are operating critical trading systems.

107
00:06:56,544 --> 00:07:00,085
So now, so what are the benefits
of AI driven if you want to

108
00:07:00,085 --> 00:07:01,780
integrate AI into chaos engineering?

109
00:07:01,884 --> 00:07:05,694
There is fast reduction of failures,
reduce downtime, more accurate

110
00:07:05,694 --> 00:07:10,494
tests, and serve learning systems
that adapt to changing environments.

111
00:07:10,674 --> 00:07:14,124
It's a big leap from what we
have to the traditional static

112
00:07:14,124 --> 00:07:16,314
testing to the AI driven.

113
00:07:16,944 --> 00:07:21,234
But of course, every benefits
comes with challenges and risks.

114
00:07:21,624 --> 00:07:24,999
So some challenges and risks
are air brings complexity.

115
00:07:25,734 --> 00:07:27,294
Morning tuning is very important.

116
00:07:27,444 --> 00:07:29,094
You'll have to trust in its decisions.

117
00:07:29,514 --> 00:07:31,674
Data quality issues and governance.

118
00:07:32,004 --> 00:07:36,204
So it is critical to keep a human
in the loop when AI is used for

119
00:07:36,384 --> 00:07:41,574
resilience testing, as well as making
sure the models are fine tuned as per

120
00:07:41,574 --> 00:07:43,914
the observability data, KPI metrics.

121
00:07:44,484 --> 00:07:48,564
Next, let's move on to best
practices for implementation.

122
00:07:48,664 --> 00:07:53,104
Always start small experiment in
your dev environments, sandbox

123
00:07:53,104 --> 00:07:55,534
environments, make AI explainable.

124
00:07:56,104 --> 00:08:00,155
Collaborate with multiple teams
like S-R-E-M-L, ai DevOps teams,

125
00:08:00,184 --> 00:08:04,804
and most importantly track APIs
like availability, latency and

126
00:08:04,804 --> 00:08:08,044
TPR to measure the real impact.

127
00:08:08,405 --> 00:08:12,184
That's how we can put into practice
and make the best use of this.

128
00:08:12,695 --> 00:08:16,534
And there are some amazing resources
from awesome chaos engineering.

129
00:08:16,594 --> 00:08:20,315
It talks about the tools,
papers, and community projects

130
00:08:20,344 --> 00:08:21,694
and open source initiatives.

131
00:08:21,964 --> 00:08:25,414
It's a very good difference
for interested to check out.

132
00:08:26,524 --> 00:08:29,104
To conclude, what is the
future of chaos Engineering?

133
00:08:29,464 --> 00:08:33,964
Things self failing systems, autonomous
chaos agents, root cause analysis,

134
00:08:34,054 --> 00:08:39,005
powered by gen, AI and chaos testing
across hybrid and multi-cloud platforms.

135
00:08:39,424 --> 00:08:43,804
AI will lead this evolution, and
you don't have to answer a, call it

136
00:08:43,834 --> 00:08:47,915
3:00 AM anymore because your chaos
engineering software is taking care of

137
00:08:47,915 --> 00:08:52,685
it because you have tested, experimented,
and tested it multiple times.

138
00:08:53,330 --> 00:08:54,710
Thank you for your time today.

139
00:08:55,040 --> 00:08:55,760
I appreciate it.

