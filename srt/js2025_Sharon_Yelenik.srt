1
00:00:00,500 --> 00:00:02,750
Let's start this talk
by setting the scene.

2
00:00:03,530 --> 00:00:04,970
You're a JavaScript developer.

3
00:00:05,240 --> 00:00:08,480
Maybe you're working by yourself, maybe
you're working with a team, or maybe

4
00:00:08,480 --> 00:00:13,610
you're even leading a team, and your
goal is to use AI for real impact.

5
00:00:14,330 --> 00:00:17,750
Now the challenge is, do we
really know what that means?

6
00:00:18,094 --> 00:00:20,494
How do you use AI for real impact?

7
00:00:21,124 --> 00:00:26,194
What does it mean to use AI effectively
and what are the measurable benefits

8
00:00:26,194 --> 00:00:30,994
that we're expecting to achieve here
before we actually achieve our goal?

9
00:00:30,994 --> 00:00:35,405
We have to have a vision of how we're
gonna use AI in order to be effective.

10
00:00:36,095 --> 00:00:39,845
And once we understand that, the
next step is to think about those

11
00:00:39,845 --> 00:00:44,944
hallucinations that we all suffer
from, and we have to figure out what

12
00:00:44,944 --> 00:00:49,834
are the best practices that we need to
agree on in order to make sure that AI

13
00:00:49,834 --> 00:00:51,845
is accurate enough to be trustworthy.

14
00:00:52,715 --> 00:00:56,495
Because our teammates aren't gonna
buy into it, they're not gonna wanna

15
00:00:56,495 --> 00:01:02,134
use ai, even if we promise them real
impact, unless it actually works well.

16
00:01:02,635 --> 00:01:04,555
Hi, my name is Sharon Nik.

17
00:01:04,645 --> 00:01:08,845
I'm Senior developer Experience and
API content writer in Cloudinary.

18
00:01:09,234 --> 00:01:13,195
And tonight we're talk, gonna
talk about making API, docs and AI

19
00:01:13,195 --> 00:01:18,805
work together, improving context
accuracy and agentic coding in IDE.

20
00:01:18,985 --> 00:01:21,955
I hope you enjoy this talk
and I hope you find it useful.

21
00:01:22,455 --> 00:01:25,635
Over the past year, I've had
what I can only describe as

22
00:01:25,635 --> 00:01:27,345
a transformative experience.

23
00:01:28,215 --> 00:01:32,115
I was on a team, a very large
team in Cloudinary that worked on

24
00:01:32,145 --> 00:01:38,175
turning Cloudinary APIs into model
context, protocol MCP servers.

25
00:01:39,135 --> 00:01:42,345
That process completely reshaped
how I think about documentation

26
00:01:42,405 --> 00:01:46,455
accuracy and where AI truly
fits in a developer's workflow.

27
00:01:46,785 --> 00:01:49,965
So today I wanna share the takeaways
that changed my way of thinking.

28
00:01:50,465 --> 00:01:56,165
First of all, if we set up our environment
correctly, we don't have to leave the IDE.

29
00:01:56,825 --> 00:02:03,095
We can code, we can search docs, and we
can apply other tools from our tech stack

30
00:02:03,485 --> 00:02:07,595
from directly within the IDE without
having to leave it and without having to

31
00:02:07,595 --> 00:02:11,435
change context to do all of those tasks
that we used to have to juggle with.

32
00:02:11,935 --> 00:02:16,765
I also learned that the big problem
holding AI back is not only accuracy.

33
00:02:17,530 --> 00:02:22,299
But the context that we provide ai,
we'll talk about that a bit more later.

34
00:02:23,170 --> 00:02:27,940
And finally, I discovered the magic that
happens when we connect documentation

35
00:02:27,940 --> 00:02:30,910
directly to AI clients in the IDE.

36
00:02:31,410 --> 00:02:33,420
So onto our first question of the night.

37
00:02:33,870 --> 00:02:36,450
What does using AI
effectively actually mean?

38
00:02:36,700 --> 00:02:39,969
Our talk is about using AI within the IDE.

39
00:02:40,059 --> 00:02:43,929
So from now on, we're gonna
call that using the LLM client.

40
00:02:44,469 --> 00:02:48,459
The LLM client is the AI inside
the IDE that reads documentation

41
00:02:48,459 --> 00:02:50,799
reasons and performs actions.

42
00:02:51,039 --> 00:02:54,129
And we're gonna talk about two use cases.

43
00:02:54,129 --> 00:02:57,945
I think the central two use cases that
you can actually perform within your IDE.

44
00:02:58,510 --> 00:03:00,879
The first is code
generation and refactoring.

45
00:03:01,059 --> 00:03:05,049
And this is of course when you're working
in your IDE and you have your AI panel

46
00:03:05,049 --> 00:03:12,159
open and you ask the LLM client to
please create code for you or generate

47
00:03:12,159 --> 00:03:16,419
code for you that does X, y, and Z
for your app that you're working on.

48
00:03:17,139 --> 00:03:20,199
And the second use case is
to actually perform those

49
00:03:20,229 --> 00:03:22,194
agentic tasks within your IDE.

50
00:03:22,444 --> 00:03:26,614
And this is the AI executing
actions like uploading assets

51
00:03:26,644 --> 00:03:28,414
or configuring environments.

52
00:03:28,744 --> 00:03:33,844
Something that's actually more like on
the backend or more like configuration

53
00:03:33,844 --> 00:03:38,454
that you wouldn't do within your program,
but you would have to leave your IDE

54
00:03:38,725 --> 00:03:41,065
in order to do it somewhere else.

55
00:03:41,515 --> 00:03:47,424
So instead of having to leave and do
this elsewhere, we're gonna use MCP

56
00:03:47,424 --> 00:03:51,954
servers to handle authentication,
validation, and execution so that the

57
00:03:51,954 --> 00:03:54,204
AI can actually act safely for you.

58
00:03:54,704 --> 00:03:59,775
So when we created the MCP servers for
cloudinary, our goal was simple to enable

59
00:03:59,864 --> 00:04:02,385
ides like cursor, cloud code, and VS.

60
00:04:02,385 --> 00:04:03,465
Code copilot.

61
00:04:04,035 --> 00:04:09,225
Not just to suggest code, but to also
use cloudinary directly managing images

62
00:04:09,465 --> 00:04:14,595
and videos, adding metadata, configuring
environments, and automating workflows.

63
00:04:15,095 --> 00:04:19,955
So now that we understand how to
actually use AI effectively within

64
00:04:19,955 --> 00:04:24,605
the IDE, let's talk about some of the
measurable benefits that we can expect.

65
00:04:25,105 --> 00:04:28,555
So first of all, I'm not gonna go
through all of the statistics here.

66
00:04:28,555 --> 00:04:33,145
You can have a look at it yourself,
but lots and lots of developers are

67
00:04:33,145 --> 00:04:38,864
using APIs, third party APIs in order
to perform tasks within their apps.

68
00:04:39,145 --> 00:04:40,615
And the statistics are high on that.

69
00:04:41,560 --> 00:04:47,380
So from these statistics that we see
all of the APIs being used so heavily

70
00:04:47,740 --> 00:04:51,760
from next to author, to Stripe to
cloudinary, and much, much more.

71
00:04:52,450 --> 00:04:57,280
APIs are the connective tissue that
make modern JavaScript apps work.

72
00:04:57,940 --> 00:05:05,770
And when we use the LM LLM client with the
APIs, we absolutely streamline their use.

73
00:05:06,270 --> 00:05:09,480
In combination with that, let's
look a little bit at what is

74
00:05:09,480 --> 00:05:11,400
happening in AI development.

75
00:05:12,210 --> 00:05:14,800
Developers are saying that
it's speeding up their process.

76
00:05:14,800 --> 00:05:16,060
They're saving time.

77
00:05:16,120 --> 00:05:21,070
They can do the work that they usually
do in a day, in a few hours and.

78
00:05:21,440 --> 00:05:26,030
This is not only for code generation, but
this is also like we described before,

79
00:05:26,390 --> 00:05:31,740
the agentic tools that allow you to
actually perform actions that you would

80
00:05:31,740 --> 00:05:34,230
normally have to leave the IDE to perform.

81
00:05:34,730 --> 00:05:37,040
Now, of course, here comes the caveat.

82
00:05:37,430 --> 00:05:42,020
We've got poor stats on how much
developers distrust API tools.

83
00:05:42,850 --> 00:05:48,190
Only a small share of developers,
just 3.8% report experiencing low

84
00:05:48,190 --> 00:05:50,500
hallucination and high confidence.

85
00:05:51,010 --> 00:05:54,250
So this is really not so happy yet.

86
00:05:54,310 --> 00:05:58,755
We need to find ways in order to boost
the confidence and boost the accuracy.

87
00:05:59,255 --> 00:06:01,895
Also AI agents are still a minority.

88
00:06:01,895 --> 00:06:06,005
People are not catching on
yet to using MCP servers.

89
00:06:06,005 --> 00:06:09,635
And you could look at the stats
about how many developers are

90
00:06:09,635 --> 00:06:11,255
using these agents already.

91
00:06:11,775 --> 00:06:16,755
And you can see that maybe that has to do
with some of their worries on accuracy,

92
00:06:17,085 --> 00:06:18,974
some of their worries about data security.

93
00:06:19,560 --> 00:06:25,560
And this shows that we're still not
using AI agents and we're still not

94
00:06:25,560 --> 00:06:28,830
utilizing AI to its full benefit.

95
00:06:29,330 --> 00:06:33,530
Finally, the data is clear that
missing context is the problem.

96
00:06:34,099 --> 00:06:36,229
Hallucinations are not the root problem.

97
00:06:36,229 --> 00:06:40,069
It's just a symptom, and the core
problem is that we're missing context.

98
00:06:40,429 --> 00:06:44,119
The AI doesn't know the
details of my project.

99
00:06:44,119 --> 00:06:46,549
It doesn't know the
details of my architecture.

100
00:06:46,909 --> 00:06:48,169
Naming conventions.

101
00:06:48,784 --> 00:06:54,244
The product that I'm using, the API
documented rules and it just guesses

102
00:06:54,544 --> 00:06:59,644
every time it makes a guess and it's
hallucinating and it erodes the trust.

103
00:07:00,144 --> 00:07:04,464
So we can look at this negatively or
we can say that this is an opportunity.

104
00:07:04,974 --> 00:07:08,724
We have an opportunity because
we know that once we get our

105
00:07:08,724 --> 00:07:13,494
engineers to have high confidence,
the stats on enjoying and.

106
00:07:14,459 --> 00:07:18,919
Improving and how AI
makes jobs more enjoyable.

107
00:07:19,219 --> 00:07:20,569
All these stats go up.

108
00:07:20,849 --> 00:07:22,559
Confidence creates adoption.

109
00:07:22,619 --> 00:07:27,269
And the lesson is the better the context,
the better the LLM client performs and the

110
00:07:27,269 --> 00:07:29,429
easier it is to get buy-in from the team.

111
00:07:30,089 --> 00:07:31,259
So how are we gonna do that?

112
00:07:31,289 --> 00:07:34,799
How are we gonna improve
context within our LLM client?

113
00:07:35,429 --> 00:07:39,469
The solution is documentation in the past.

114
00:07:40,009 --> 00:07:43,819
Documentation used to give developers
what they needed instructions for

115
00:07:43,819 --> 00:07:46,039
setup code, snippets, and examples.

116
00:07:46,219 --> 00:07:51,649
And now our LLM clients are gonna
consume them right inside the IDE.

117
00:07:52,149 --> 00:07:56,379
The LLM client needs documentation as
its source of truth, just the way we

118
00:07:56,379 --> 00:08:01,239
do reading them, interpreting them, and
using them to figure out what to do next.

119
00:08:01,299 --> 00:08:04,839
And without them, the LLM
is working a bit blindly.

120
00:08:05,339 --> 00:08:10,079
So what best practices that we should
agree on in order to make sure that AI

121
00:08:10,079 --> 00:08:12,059
is accurate enough to be trustworthy?

122
00:08:12,559 --> 00:08:17,689
The best practices that we're gonna
talk about apply to all of these APIs,

123
00:08:18,004 --> 00:08:23,209
auth O Firebase, super base, slack,
Shopify, Cloudinary, and many others.

124
00:08:23,629 --> 00:08:27,769
We're going to use Cloudinary for the
purposes of demonstration, and we're gonna

125
00:08:27,829 --> 00:08:32,419
revisit the other APIs at the end just
to review what you could do with them.

126
00:08:32,919 --> 00:08:39,399
So we're gonna start with the basics of
just adding Cloudinary MCP servers into.

127
00:08:40,394 --> 00:08:44,864
My id, I'm gonna show this to you in
cursor, but of course you can go to

128
00:08:44,894 --> 00:08:50,484
any of the other IDs and you can look
up their documentation and see how to

129
00:08:50,484 --> 00:08:53,934
add MCPP servers in those IDs as well.

130
00:08:54,324 --> 00:08:56,574
So I'm gonna copy and paste.

131
00:08:56,664 --> 00:09:02,244
These are three of Cloudinary for
remote MCP servers that are offered.

132
00:09:02,634 --> 00:09:08,094
And I'm going to copy this code
and I'm gonna jump into the IDE.

133
00:09:08,514 --> 00:09:09,534
It's a cursor.

134
00:09:10,524 --> 00:09:13,634
I'm going to open cursor settings.

135
00:09:14,134 --> 00:09:18,274
I'm gonna open tools and cps
and I'm gonna add custom MCP.

136
00:09:18,634 --> 00:09:24,014
And right within these two brackets,
I'm gonna the code save it.

137
00:09:24,794 --> 00:09:27,674
And if you look at the
co cursor settings, I'm.

138
00:09:28,169 --> 00:09:29,429
C I'm connected.

139
00:09:29,429 --> 00:09:33,569
Now I'm connecting to these three
servers, but I need to authenticate,

140
00:09:33,599 --> 00:09:38,449
so I'm gonna click on this, which
reroutes me to my application.

141
00:09:38,449 --> 00:09:39,049
Login.

142
00:09:39,079 --> 00:09:40,369
I'm gonna log in.

143
00:09:40,869 --> 00:09:46,180
I'm gonna choose my cloud name, my
product environment, gonna accept

144
00:09:46,180 --> 00:09:48,930
access, and now I'm connected.

145
00:09:49,430 --> 00:09:52,550
Okay, I am gonna do the same
authentication for the others,

146
00:09:53,150 --> 00:09:54,829
and now all my tools are enabled.

147
00:09:55,329 --> 00:09:55,719
Great.

148
00:09:55,719 --> 00:10:01,089
So once that's done, I can go ahead
and dogen tasks right within my IDE.

149
00:10:01,870 --> 00:10:02,349
Okay.

150
00:10:02,349 --> 00:10:03,370
Back to the slides.

151
00:10:03,375 --> 00:10:04,270
What's the next thing?

152
00:10:04,770 --> 00:10:05,249
Next?

153
00:10:05,249 --> 00:10:10,050
I'm gonna reference the IPEs
doc site in my ip, in my IDE.

154
00:10:10,680 --> 00:10:12,719
So we're gonna do this for Cloudinary.

155
00:10:13,119 --> 00:10:17,349
We're gonna go to cursor settings,
indexing in docs, and we're going

156
00:10:17,349 --> 00:10:24,329
to add the URL for Cloudinary
documentation to the docs in the IDE.

157
00:10:24,930 --> 00:10:28,020
And every time I make a request,
I'm going to remember to add

158
00:10:28,020 --> 00:10:30,719
context and select those docs.

159
00:10:31,050 --> 00:10:33,660
So let's see how this
is done within the IDE.

160
00:10:34,454 --> 00:10:36,344
Okay, so we're already in settings.

161
00:10:36,675 --> 00:10:39,194
So now let's just click indexing in docs.

162
00:10:40,035 --> 00:10:46,614
Let's go to Add Doc, and we're gonna
type in Cloudinary documentation.

163
00:10:46,874 --> 00:10:50,794
Let's call this Cloudinary
Docs and we're gonna confirm.

164
00:10:51,294 --> 00:10:54,624
So the next best practice that we're
gonna talk about is contact seven.

165
00:10:55,494 --> 00:10:59,604
Contact seven provides an MCP server
that indexes the code snippets and

166
00:10:59,604 --> 00:11:01,824
examples from the API documentation.

167
00:11:02,664 --> 00:11:08,064
This means that your LLM client has
access to all of those examples and

168
00:11:08,064 --> 00:11:12,564
therefore its auto complete and generated
code are accurate, derived from the

169
00:11:12,564 --> 00:11:14,935
documentation and not from guesses.

170
00:11:15,925 --> 00:11:20,185
So not all products are yet
indexed in context seven.

171
00:11:20,185 --> 00:11:26,634
So when you do work within a certain
API just make sure that your.

172
00:11:27,214 --> 00:11:31,625
Product is already registered
together with context seven.

173
00:11:32,015 --> 00:11:34,595
And don't underestimate your influence.

174
00:11:35,015 --> 00:11:42,485
If users really want to use context,
seven APIs will start considering that

175
00:11:42,485 --> 00:11:44,285
and using context seven more and more.

176
00:11:44,785 --> 00:11:46,795
So how to add context seven in cursor.

177
00:11:47,590 --> 00:11:51,130
What you're gonna do is you're gonna
go to cursor settings again, you're

178
00:11:51,130 --> 00:11:57,010
going to go to tools and integrations,
and you're going to add the MCP server

179
00:11:57,040 --> 00:12:03,580
for context seven to that M-C-P-J-S-N
file that we saw before and since we've

180
00:12:03,580 --> 00:12:06,130
already had a chance to add MCP servers.

181
00:12:06,430 --> 00:12:10,660
So let's not demonstrate adding the
contact seven one and just assume

182
00:12:10,660 --> 00:12:12,220
that you can do that on your own.

183
00:12:12,590 --> 00:12:14,660
Copying and pasting this code here.

184
00:12:15,160 --> 00:12:17,470
Okay, so what comes after contact?

185
00:12:17,470 --> 00:12:17,980
Seven.

186
00:12:18,480 --> 00:12:19,620
Tip number four.

187
00:12:19,680 --> 00:12:22,410
Last but not least, is leveraging rules.

188
00:12:22,910 --> 00:12:23,360
Rules.

189
00:12:23,360 --> 00:12:28,520
Files are how we move from AI that
guesses to AI that follows your standards.

190
00:12:28,940 --> 00:12:33,530
In cursor there MDC files, but the
same concept exists in other IDs.

191
00:12:33,530 --> 00:12:37,250
For example, JetBrains uses MD and VS.

192
00:12:37,250 --> 00:12:39,470
Code uses Jason or yaml.

193
00:12:40,220 --> 00:12:41,870
The format doesn't really matter.

194
00:12:41,930 --> 00:12:43,580
It's just the principle that does.

195
00:12:44,240 --> 00:12:49,760
These are short example rich rules that
your LLM client reads before it writes.

196
00:12:49,970 --> 00:12:54,140
So every suggestion it makes, fits
your conventions and runs correctly.

197
00:12:55,010 --> 00:12:59,090
Some APIs already provide rules
or compatibility references

198
00:12:59,090 --> 00:12:59,975
that you can use right away.

199
00:13:00,475 --> 00:13:04,645
For example, Cloudinary includes a
document that explains how to create

200
00:13:04,645 --> 00:13:08,755
transformations correctly, including
how the order of transformation

201
00:13:08,755 --> 00:13:13,195
parameters affects the results and
which combinations are invalid.

202
00:13:13,675 --> 00:13:18,325
You can also create your own rules
files to help your LLM client perform

203
00:13:18,325 --> 00:13:20,995
tasks independently, for instance.

204
00:13:21,600 --> 00:13:25,920
In our docs as code setup, we created
a rules file that teaches the LLM

205
00:13:25,920 --> 00:13:30,960
client how to create a new markdown
page, migrate an article into it,

206
00:13:31,020 --> 00:13:35,010
and apply all the required formatting
and configuration automatically.

207
00:13:35,510 --> 00:13:38,870
Of course, the human eye has to
review all that and make sure that

208
00:13:38,870 --> 00:13:40,460
everything's been done correctly.

209
00:13:40,960 --> 00:13:42,880
So let's talk about how to do it.

210
00:13:43,390 --> 00:13:48,280
If you've got a rules file that's been
provided by the API, you could simply

211
00:13:48,280 --> 00:13:52,215
add it to the documentation, just like
we did with the Cloudinary General Docs.

212
00:13:52,465 --> 00:13:55,405
For example, we've got the
Cloudinary transformation

213
00:13:55,405 --> 00:13:58,175
Rules file which is an MD file.

214
00:13:58,205 --> 00:14:00,815
And you can just add it
the same way we did before.

215
00:14:00,905 --> 00:14:03,275
So I'm not gonna show it
to you in the IDE again.

216
00:14:03,335 --> 00:14:07,145
You'll go to cursor settings,
indexing and documentation.

217
00:14:07,515 --> 00:14:12,525
In the doc section, you'll add the doc and
you'll enter the name of the rules file.

218
00:14:13,025 --> 00:14:16,625
We'll see a little bit later how when
we actually see an actual example.

219
00:14:17,360 --> 00:14:23,360
Every time we ask for a prompt,
we're going to add context and

220
00:14:23,360 --> 00:14:28,015
we're gonna add that particular
doc to the request that we make.

221
00:14:28,725 --> 00:14:29,015
Okay.

222
00:14:29,265 --> 00:14:32,895
Now even more powerful is that you
can create your own rules file.

223
00:14:33,545 --> 00:14:39,395
In cursor you're going to put your rules
file in the doc cursor rules folder,

224
00:14:39,485 --> 00:14:43,745
and if you want it to be project wide,
you'll just put it in the doc cursor file.

225
00:14:43,995 --> 00:14:48,865
It's gotta be formatted as a markdown
with clear headings plus lightweight

226
00:14:48,865 --> 00:14:50,935
examples that the model can copy.

227
00:14:51,340 --> 00:14:55,900
Okay, so when you are creating your rules
file, here are a few tips and tricks.

228
00:14:56,420 --> 00:15:01,120
When writing rules think in terms of
the four Cs compatibility note, which

229
00:15:01,120 --> 00:15:08,950
parameters, SDKs or ais play well together
conventions Explain what your name naming

230
00:15:08,950 --> 00:15:11,080
folder or architecture standards are.

231
00:15:11,580 --> 00:15:15,300
Constraints, meaning what
the AI must never do.

232
00:15:15,330 --> 00:15:19,350
For example, exposing secrets or
calling admin APIs from the browser.

233
00:15:19,890 --> 00:15:25,110
And canon meaning copy, give it
short, correct examples and code

234
00:15:25,110 --> 00:15:30,570
snippets that the model can be used
in other scenarios and guardrails.

235
00:15:31,070 --> 00:15:35,300
Give the idea a range of what it
can or can't do, what it always

236
00:15:35,300 --> 00:15:37,430
should do or should never, ever do.

237
00:15:37,690 --> 00:15:39,910
Here are a few cloudinary examples.

238
00:15:40,300 --> 00:15:45,100
We always want format auto and quality
auto to be applied so that our images

239
00:15:45,100 --> 00:15:47,110
are always delivered optimized.

240
00:15:47,610 --> 00:15:51,210
We want our text overlays to
always look legible, and so we're

241
00:15:51,210 --> 00:15:52,620
going to give it a standard.

242
00:15:52,950 --> 00:15:56,310
We're gonna give it instructions
for how we want that formatted.

243
00:15:56,810 --> 00:16:01,430
We're going to forbid GFE to be used
with CPAD because those are incompatible.

244
00:16:01,670 --> 00:16:06,200
And with this, I have safeguarded
my code that gets generated by the

245
00:16:06,200 --> 00:16:10,370
LLM to make sure that I'm not going
to have bugs, that I'm going to

246
00:16:10,370 --> 00:16:12,290
have a really hard time finding.

247
00:16:12,790 --> 00:16:17,680
And finally, maintenance tips, keep
rules short, one to three pages,

248
00:16:17,680 --> 00:16:21,850
review it often and include links
to the official documentation.

249
00:16:22,350 --> 00:16:25,410
Now I'm gonna show you a
rules document that I created.

250
00:16:26,385 --> 00:16:31,695
And we're actually gonna soon see how
we actually apply it in a real use case.

251
00:16:32,175 --> 00:16:34,905
But we can see that some of the
things we talked about are here,

252
00:16:34,905 --> 00:16:40,455
for example, using auto format and
WA quality on all image deliveries.

253
00:16:40,785 --> 00:16:42,045
Here's a new one.

254
00:16:42,345 --> 00:16:44,715
I want my IDE to always.

255
00:16:44,990 --> 00:16:46,850
Apply name transformations.

256
00:16:46,850 --> 00:16:51,170
When I'm transforming images
of a certain type, for example,

257
00:16:51,170 --> 00:16:53,540
hero images or thumbnails.

258
00:16:53,900 --> 00:16:57,330
I don't want it to apply
ad hoc transformations.

259
00:16:57,330 --> 00:17:01,260
I want it to either apply an existing
name transformation, which is like

260
00:17:01,260 --> 00:17:06,300
a template, or if none exists for
that type that I'm requesting.

261
00:17:06,540 --> 00:17:09,720
It should create the name
transformation and then apply that.

262
00:17:10,060 --> 00:17:14,680
In that case and in all subsequent
cases, and so I've got a little

263
00:17:14,680 --> 00:17:18,770
bit of a description here, a little
bit of an explanation of what I'd

264
00:17:18,770 --> 00:17:22,730
like it to do in the case where I'm
transforming images of a certain type.

265
00:17:23,020 --> 00:17:27,550
Yeah, so we'd like G Face to
always be used with sea auto

266
00:17:27,550 --> 00:17:30,100
in order to get the effect.

267
00:17:30,455 --> 00:17:35,175
That is most close to my standards
of cropping, cropping around the

268
00:17:35,175 --> 00:17:39,525
face and an automatic crop that
keeps the main subject in the middle.

269
00:17:40,055 --> 00:17:43,535
Here's my text standards, my
text overlay standards that I

270
00:17:43,535 --> 00:17:46,055
wanted to always keep along with.

271
00:17:46,055 --> 00:17:52,235
A little bit of a example a code
example of how to achieve the

272
00:17:52,235 --> 00:17:53,460
requirements that I set out here.

273
00:17:53,960 --> 00:17:57,490
Okay, so finally here's a
little overview of other ides.

274
00:17:57,740 --> 00:18:01,010
The file extension that you need to
use for the rules, files in those

275
00:18:01,010 --> 00:18:07,000
ides and location that is required for
those rules files can review it on your

276
00:18:07,000 --> 00:18:11,120
own later if if you don't have cursor
and you use one of the other ites.

277
00:18:11,620 --> 00:18:13,210
Now we've made it to our finale.

278
00:18:13,300 --> 00:18:17,200
We're actually gonna go through a
cloudinary use case right within my

279
00:18:17,200 --> 00:18:22,360
IDE, and we're gonna see how results
become more accurate when you've got

280
00:18:22,390 --> 00:18:24,400
all of those best practices in place.

281
00:18:24,900 --> 00:18:28,020
So let's go through the scenario
first, and then we're gonna go into

282
00:18:28,020 --> 00:18:30,150
the IDE and actually implement it.

283
00:18:30,810 --> 00:18:36,600
So first we're gonna genetically upload an
image and then we're gonna use that image.

284
00:18:36,960 --> 00:18:40,530
So Genically uploading it is
going to save me that context.

285
00:18:40,530 --> 00:18:45,840
Switching, I'm staying in the IDE and
using the MCP servers instead of switching

286
00:18:45,840 --> 00:18:48,090
tools and going to the cloudinary console.

287
00:18:48,590 --> 00:18:51,530
So once that image is uploaded,
I'm gonna go ahead and use it

288
00:18:51,530 --> 00:18:53,450
as the hero image of my website.

289
00:18:53,990 --> 00:18:57,680
The original image is portrait,
so I'm gonna have to apply a name

290
00:18:57,680 --> 00:19:03,770
transformation in order to make
it a landscape orientation so that

291
00:19:03,770 --> 00:19:05,450
it could fit as my hero image.

292
00:19:05,950 --> 00:19:08,920
Next, I'm going to take that
or original image and I'm going

293
00:19:08,920 --> 00:19:10,810
to apply a text overlay to it.

294
00:19:11,170 --> 00:19:15,550
We're gonna see how the best practices
are implemented from my rules file.

295
00:19:16,050 --> 00:19:20,850
And finally, we're going to transform
that same image into a thumbnail.

296
00:19:21,090 --> 00:19:25,560
And I'm gonna, again, use the
transformation required in the rules file.

297
00:19:26,060 --> 00:19:29,240
So let's go right into the
IDE and see it in action.

298
00:19:29,740 --> 00:19:33,940
So here I've got my index html file,
which already has some code in it.

299
00:19:34,660 --> 00:19:39,040
I've got a placeholder for the hero
image, and I've got the source that

300
00:19:39,040 --> 00:19:42,730
is not yet populated, but it's going
to get populated by the code that

301
00:19:42,730 --> 00:19:44,500
I'm gonna put into my index js file.

302
00:19:45,000 --> 00:19:48,960
Over there, I'm going to transform
that original image that I'm

303
00:19:48,960 --> 00:19:50,460
going to upload to Cloudinary.

304
00:19:50,460 --> 00:19:51,120
Right now.

305
00:19:51,810 --> 00:19:58,470
I'm going to ask Cloudinary to upload
this image to my product environment.

306
00:19:58,970 --> 00:20:04,780
The public ID should
be Father's Day banner.

307
00:20:05,280 --> 00:20:10,440
It is giving me a prompt and I'm
gonna allow it to run the upload.

308
00:20:10,940 --> 00:20:11,870
And there we have it.

309
00:20:11,900 --> 00:20:16,280
I've got my image, and it even gave me
my image, URL that just got uploaded.

310
00:20:16,880 --> 00:20:20,030
Now for the Euro image, I want
the LLM client to, first of

311
00:20:20,030 --> 00:20:23,930
all, genetically create a name
transformation for hero images.

312
00:20:24,650 --> 00:20:28,820
Then I wanted to apply the
name transformation in index as

313
00:20:29,300 --> 00:20:30,740
to the image I just uploaded.

314
00:20:31,460 --> 00:20:34,970
And finally, to use the
generated URL as the source for

315
00:20:34,970 --> 00:20:37,220
the hero image in index html.

316
00:20:37,720 --> 00:20:39,670
Let's add all our docs as content.

317
00:20:39,670 --> 00:20:40,360
First.

318
00:20:40,860 --> 00:20:47,700
Click the Ampersand docs, Cloudinary
docs, and the transformation rules file.

319
00:20:48,200 --> 00:20:52,100
I don't have to add my
rules file that I created.

320
00:20:52,580 --> 00:20:55,730
And that's because I already
said it to always applying.

321
00:20:56,230 --> 00:20:58,690
Now let's add the prompt
and see what happens.

322
00:20:59,190 --> 00:21:07,230
Transform the specific image, make it a
hero, type with an height specified and

323
00:21:07,230 --> 00:21:13,740
apply the transformation in index g js
and uses at a source is in index html.

324
00:21:14,240 --> 00:21:15,050
Okay.

325
00:21:15,550 --> 00:21:18,850
Checking if a transformation
like that already exists.

326
00:21:19,540 --> 00:21:20,620
It found one,

327
00:21:21,120 --> 00:21:23,760
but it's not quite what I specified,

328
00:21:24,260 --> 00:21:28,820
so it's going to create a
new transformation, plus it

329
00:21:28,820 --> 00:21:30,680
added the code to apply it.

330
00:21:31,180 --> 00:21:31,810
Amazing.

331
00:21:32,310 --> 00:21:36,470
So let's take a look and see
how it did, and this is what our

332
00:21:36,470 --> 00:21:38,540
gorgeous HTML page looks like.

333
00:21:39,040 --> 00:21:40,990
Now let's go back and add something.

334
00:21:41,490 --> 00:21:45,330
Let's add another image below that,
which will contain a text overlay.

335
00:21:45,830 --> 00:21:47,810
So I'm gonna add the prompt again.

336
00:21:48,310 --> 00:21:53,600
Add another transformed image under
the hero image same public id and add

337
00:21:53,600 --> 00:21:56,480
a text overlay with a text specified.

338
00:21:57,140 --> 00:22:04,990
Again, generating it in index js
and rendering it in index html.

339
00:22:05,320 --> 00:22:06,460
Let's see what happens.

340
00:22:06,960 --> 00:22:12,090
Remember, it should take the instructions
that I gave it for how a text.

341
00:22:12,615 --> 00:22:15,705
Overlay should look and
apply it in this case.

342
00:22:16,205 --> 00:22:21,985
Okay, so it added the information
and the code to index js

343
00:22:22,345 --> 00:22:25,345
it, added it to index html,

344
00:22:25,845 --> 00:22:29,075
and let's see if it worked.

345
00:22:29,885 --> 00:22:32,075
So let's have a look
at our updated website.

346
00:22:32,450 --> 00:22:38,650
We've got our hero image and we've
got our text overlay example, and

347
00:22:38,650 --> 00:22:40,060
here's the text that we added.

348
00:22:40,490 --> 00:22:41,450
It looks good.

349
00:22:41,790 --> 00:22:45,000
It's the right font, nice clear font.

350
00:22:45,420 --> 00:22:48,660
It's white and it's flushed to the bottom.

351
00:22:49,470 --> 00:22:51,690
And that's what we asked
for in our rules file.

352
00:22:52,190 --> 00:22:52,220
Okay.

353
00:22:52,720 --> 00:22:55,150
So let's do one more.

354
00:22:55,510 --> 00:22:58,540
This time we wanna crop a
thumbnail around the face.

355
00:22:59,350 --> 00:23:05,530
We had a rule for using G face only
with auto crop, C auto, so let's see if

356
00:23:05,530 --> 00:23:07,570
we can trust it to do that accurately.

357
00:23:08,200 --> 00:23:10,150
Okay, so let's paste in our prompt.

358
00:23:10,650 --> 00:23:14,610
We're gonna add another transformed
image under the text overlaid image.

359
00:23:14,640 --> 00:23:16,770
We're gonna use the same public id.

360
00:23:17,220 --> 00:23:23,100
We're gonna crop the image to focus on
the face, and we are going to add upscale

361
00:23:23,100 --> 00:23:26,070
effect for even sharper looking images.

362
00:23:26,570 --> 00:23:27,585
Okay, let's see what happens.

363
00:23:28,085 --> 00:23:30,935
Okay, we've got C Auto and G face.

364
00:23:31,435 --> 00:23:32,035
Great.

365
00:23:32,395 --> 00:23:35,735
And let's see what our
updated website looks like.

366
00:23:36,125 --> 00:23:37,805
Okay, so let's find our thumbnail.

367
00:23:37,805 --> 00:23:38,795
And there it is.

368
00:23:38,795 --> 00:23:40,115
It looks just right.

369
00:23:40,625 --> 00:23:44,495
It's little bit big, but we didn't
make any rules about making it smaller.

370
00:23:45,095 --> 00:23:47,915
Okay, so let's get back
to our PowerPoint slides.

371
00:23:47,915 --> 00:23:48,935
Just to sum up.

372
00:23:49,435 --> 00:23:54,985
Here is a list of APIs that you
can use along with MCP support

373
00:23:54,985 --> 00:23:57,205
and also contact seven indexing.

374
00:23:57,935 --> 00:24:02,345
All of them have a few examples of
how you can use them age genetically.

375
00:24:02,645 --> 00:24:04,535
Let's just take a look
at one or two of them.

376
00:24:04,875 --> 00:24:09,825
We've got OAuth where you can set
up login and authentication flows.

377
00:24:09,885 --> 00:24:13,545
You can manage test users or
refresh API keys securely.

378
00:24:14,045 --> 00:24:18,185
With Shopify, you can add sample
products, draft test orders, or

379
00:24:18,185 --> 00:24:20,135
connect webhooks for your stores.

380
00:24:20,635 --> 00:24:24,535
Here are a few ideas of rule
files that you can create.

381
00:24:25,405 --> 00:24:30,325
You can set API fetching rules, for
example, how to call APIs using fetch

382
00:24:30,325 --> 00:24:36,325
or axios with consistent error handling
and no hard-coded keys, and you could

383
00:24:36,325 --> 00:24:38,545
create form handling, handling rules.

384
00:24:39,045 --> 00:24:42,765
You could set preferred validation
libraries structure for controlled

385
00:24:42,765 --> 00:24:44,715
inputs and submit patterns.

386
00:24:45,215 --> 00:24:50,455
So hopefully after today you can
leverage your LLM clients accurately

387
00:24:50,455 --> 00:24:55,435
and effectively use it for code
generation and I ident agent tasks.

388
00:24:55,885 --> 00:24:59,995
Be confident that it's correct when
implementing dog-friendly techniques.

389
00:25:00,495 --> 00:25:01,755
What's coming up next?

390
00:25:02,565 --> 00:25:07,095
Docs are about to stop being reference
pages and start being runtime components.

391
00:25:07,605 --> 00:25:10,635
There'll be adaptive,
dynamic and self-improving.

392
00:25:10,665 --> 00:25:14,655
We're already seeing a lot of that,
how adaptive and dynamic they are.

393
00:25:14,955 --> 00:25:17,205
Self-improving, not yet, but soon.

394
00:25:17,705 --> 00:25:22,145
The next generation of docs will live
inside our ides, which they do already.

395
00:25:22,835 --> 00:25:26,165
They'll have power of re reasoning
and execution, which they do

396
00:25:26,165 --> 00:25:30,275
already, and they'll evolve
dynamically from real usage.

397
00:25:30,305 --> 00:25:32,645
And that I'm really
looking forward to seeing.

398
00:25:33,145 --> 00:25:34,435
So thank you.

399
00:25:34,485 --> 00:25:36,405
Feel free to email me.

400
00:25:36,695 --> 00:25:39,365
And I hope that this was
a useful session for you.

