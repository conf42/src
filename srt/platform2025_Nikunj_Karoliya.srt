1
00:00:00,500 --> 00:00:01,255
Good morning everyone.

2
00:00:02,070 --> 00:00:05,699
Today I'm excited to explore with you
how platform engineering principle

3
00:00:05,699 --> 00:00:10,050
works, which are critical in modern
software development, can draw powerful

4
00:00:10,050 --> 00:00:14,670
lessons from industry that has mastered
this complexity over a century.

5
00:00:14,850 --> 00:00:16,800
I'm talking about
automotive manufacturing.

6
00:00:17,430 --> 00:00:21,090
If you take a step back, look at the
evolution of automotive industry.

7
00:00:21,090 --> 00:00:23,790
We see more than just rise of cars.

8
00:00:24,030 --> 00:00:25,860
We see birth of model design.

9
00:00:26,235 --> 00:00:29,205
Standardized platform and
assembly line production.

10
00:00:29,595 --> 00:00:34,214
All strategies designed to handle
scale variability and complexity.

11
00:00:34,694 --> 00:00:38,655
This principle have enabled manufacturer
to produce millions of vehicle

12
00:00:39,074 --> 00:00:43,754
efficiently with shared component
across models while maintaining high

13
00:00:43,754 --> 00:00:45,765
level of quality and customization.

14
00:00:46,214 --> 00:00:47,295
Sounds familiar, right?

15
00:00:47,295 --> 00:00:47,775
It should.

16
00:00:48,275 --> 00:00:51,425
These are exact challenges we
face in software engineering today

17
00:00:51,995 --> 00:00:53,614
as a software team Deals with.

18
00:00:54,020 --> 00:00:59,060
Sprawling microservices, distributed
system and cloud native architectures.

19
00:00:59,480 --> 00:01:03,709
We are in many way trying to solve
the same problem, how we manage,

20
00:01:03,950 --> 00:01:08,420
integrate interdependent system
in a repeatable, scalable way.

21
00:01:09,260 --> 00:01:11,360
Platform engineering is our response.

22
00:01:11,639 --> 00:01:15,720
Building reusable framework,
self-service tools and standardized

23
00:01:15,720 --> 00:01:18,960
environment to reduce friction
and accelerate development.

24
00:01:19,469 --> 00:01:24,179
Just like car manufacturers created common
chassis platform to serve multiple car

25
00:01:24,179 --> 00:01:28,740
lines, we are building internal developer
platforms to serve multiple product teams.

26
00:01:29,429 --> 00:01:33,330
In the next few minutes, we
will look at what software

27
00:01:33,335 --> 00:01:34,475
can learn from the shop floor.

28
00:01:35,354 --> 00:01:40,214
Principle like modularization
abstractions, assembly line automation,

29
00:01:40,575 --> 00:01:44,774
quality gates, and separation of
concern, and how they apply directly

30
00:01:44,774 --> 00:01:46,755
to the platform we are building today.

31
00:01:47,235 --> 00:01:50,595
So let's dive in and uncover
how the legacy of automotive

32
00:01:50,595 --> 00:01:54,555
manufacturing can drive innovation
and modern platform engineering.

33
00:01:55,215 --> 00:01:55,605
Thank you.

34
00:01:56,104 --> 00:01:59,584
Today I want to take you on a brief
journey, a journey from traditional

35
00:01:59,584 --> 00:02:04,054
car out manufacturing to a platform
thinking and show how this evolution

36
00:02:04,054 --> 00:02:07,865
closely mirrors the challenges we
face in software engineering today.

37
00:02:08,704 --> 00:02:11,885
In the early days of automotive,
manufacturing, every car model

38
00:02:11,885 --> 00:02:13,745
was essentially a one of effort.

39
00:02:14,149 --> 00:02:17,450
Each vehicle line require
custom components, tooling,

40
00:02:17,839 --> 00:02:19,159
and tailored assembly lines.

41
00:02:19,489 --> 00:02:23,690
This led to siloed expertise,
massive duplication of effort and

42
00:02:23,690 --> 00:02:28,039
scaling operation that were not
only expensive, but painfully slow.

43
00:02:28,459 --> 00:02:29,359
Sound familiar?

44
00:02:29,930 --> 00:02:32,329
Many of us in a software have lived this.

45
00:02:32,750 --> 00:02:36,529
Team building similar features from
scratch, maintaining separate system

46
00:02:36,529 --> 00:02:41,299
that do not, they do the same thing
and struggling to scale product

47
00:02:41,299 --> 00:02:43,339
without scaling cost and complexity.

48
00:02:43,940 --> 00:02:46,219
But then something changed
in automotive industry.

49
00:02:46,719 --> 00:02:50,409
They underwent a transformation
shifting towards modular

50
00:02:50,409 --> 00:02:52,089
component piece architecture.

51
00:02:52,569 --> 00:02:56,319
Instead of designing every car
from ground up, manufacturers

52
00:02:56,319 --> 00:02:58,179
started to using shared platform.

53
00:02:58,524 --> 00:03:02,334
Common chassis, interchangeable
parts and unified process that

54
00:03:02,334 --> 00:03:04,194
supports multiple vehicles lines.

55
00:03:04,614 --> 00:03:10,344
This shift didn't just reduce cost, it
improved quality speed up innovation,

56
00:03:10,404 --> 00:03:12,324
and made scaling sustainable.

57
00:03:13,134 --> 00:03:17,034
And this exactly the mindset we
are now adopting in software,

58
00:03:17,514 --> 00:03:21,984
what we call platform thinking,
just like auto manufacturer.

59
00:03:22,345 --> 00:03:27,445
Moved away from bespoke assembly to
modular platform software team building,

60
00:03:27,445 --> 00:03:31,704
shared services, reusable components,
and internal developer platform

61
00:03:32,155 --> 00:03:36,265
that supports a variety of product
needs without reinventing the wheel.

62
00:03:36,265 --> 00:03:40,090
Every time this shift changed
how we approach system design.

63
00:03:40,894 --> 00:03:45,665
How we allocate resources and how
fast we can innovate because we

64
00:03:45,665 --> 00:03:49,864
are no longer solving the same
problem multiple time in isolation.

65
00:03:50,285 --> 00:03:55,025
So as we continue to our journey into
platform engineering, let's take a page

66
00:03:55,025 --> 00:03:57,244
from Automotive Playbook Build Once.

67
00:03:57,744 --> 00:04:02,784
Reuse often and design with scale in
mind moment to appreciate how modularity

68
00:04:02,784 --> 00:04:07,164
has transformed not only the way cars
are built, but also how we design

69
00:04:07,164 --> 00:04:12,044
software platform today in automotive
industry, modularity isn't just

70
00:04:12,044 --> 00:04:14,774
about parts, it's about architecture.

71
00:04:14,864 --> 00:04:18,604
It's about structuring complexity
so that innovation become

72
00:04:18,604 --> 00:04:20,734
manageable, scalable, and fast.

73
00:04:20,854 --> 00:04:24,549
And that starts with the first
principle, separation of concern.

74
00:04:25,049 --> 00:04:28,559
Leading automaker separates their
vehicle architecture into three main

75
00:04:28,559 --> 00:04:33,509
condos, structural elements, powertrain
system, and user facing feature.

76
00:04:34,319 --> 00:04:38,489
For example, the team designing
chassis of a car doesn't need to

77
00:04:38,489 --> 00:04:40,770
be on infotainment system team.

78
00:04:41,129 --> 00:04:44,549
Each group works independently,
but because of well-defined

79
00:04:44,549 --> 00:04:47,219
interface, everything fits together.

80
00:04:47,579 --> 00:04:52,889
Whether it's a sedan, SUV or electric
variant, this is similar how the separate

81
00:04:53,039 --> 00:04:59,479
concern in platform engineering white
with dedicated teams for infrastructures,

82
00:04:59,900 --> 00:05:05,599
backend service and frontend expertise,
all operating independently but

83
00:05:05,599 --> 00:05:08,119
harmonizing through a clear API contracts.

84
00:05:08,749 --> 00:05:10,909
The second principle
is flexible foundation.

85
00:05:11,810 --> 00:05:15,110
Instead of designing entirely
different vehicles for electric and

86
00:05:15,110 --> 00:05:19,715
gas engines, companies like Volkswagen
uses what's called MQB platform.

87
00:05:20,215 --> 00:05:24,624
A shared architecture that supports
both power trains, whether it's

88
00:05:24,624 --> 00:05:28,425
traditional combustion engine or fully
electric, the same platform can be

89
00:05:28,425 --> 00:05:32,775
support both thanks to standardized
mounting points and modular design.

90
00:05:33,285 --> 00:05:37,755
Now, think of software platform that
supports both container based workloads

91
00:05:37,845 --> 00:05:40,365
and serverless function, the runtime.

92
00:05:40,670 --> 00:05:45,590
Environment differ greatly, but
developer inter interact with

93
00:05:45,590 --> 00:05:47,780
both using unified API layers.

94
00:05:48,200 --> 00:05:53,690
Just like the NQB platform, the underlying
mechanics may differ, but the mounting

95
00:05:53,690 --> 00:05:57,920
points or abstraction layer keeps
the developer experience consistent.

96
00:05:58,550 --> 00:06:00,860
And finally, interface standardization.

97
00:06:01,700 --> 00:06:04,555
Today's vehicle contain hundreds
of electronic control unit.

98
00:06:05,250 --> 00:06:08,280
Controlling everything from
breaking to climate system.

99
00:06:08,700 --> 00:06:13,680
This CS needs communicate reliably
and they do so using standardized

100
00:06:13,680 --> 00:06:15,960
protocols like Canvas and Flex Three.

101
00:06:16,530 --> 00:06:21,600
Without this braking system from
one supplier might not talk to a

102
00:06:21,600 --> 00:06:23,490
traction control system from another.

103
00:06:23,990 --> 00:06:28,580
In software, we saw this with
standardized communication protocol.

104
00:06:29,245 --> 00:06:34,645
Whether it's A-G-R-P-C-R-E-S-T,
or event buses, this protocol

105
00:06:34,645 --> 00:06:39,895
allows independent microservices or
components often developed by different

106
00:06:39,895 --> 00:06:42,805
teams to interpret seamlessly.

107
00:06:43,305 --> 00:06:47,565
So whether you are building a vehicle
or a platform, the principle are same.

108
00:06:48,195 --> 00:06:53,685
Separate concerns to unlock innovation
and design, flexible foundation for future

109
00:06:53,685 --> 00:06:56,895
growth, standardized interface for insure.

110
00:06:57,460 --> 00:06:58,630
Interoperability.

111
00:06:59,470 --> 00:07:03,640
That's the architecture of automotive
modularity and blueprint for

112
00:07:03,640 --> 00:07:05,170
scalable platform engineering.

113
00:07:05,670 --> 00:07:09,540
Let's talk about strategy, balancing
act, component standardization,

114
00:07:10,020 --> 00:07:13,680
and how the automotive industry
offers us powerful playbook for

115
00:07:13,680 --> 00:07:15,750
applying it in a software platform.

116
00:07:15,750 --> 00:07:16,260
Engineering.

117
00:07:17,100 --> 00:07:22,440
When we hear standardization, it's easy
to think that uniformity everywhere, but

118
00:07:22,500 --> 00:07:26,525
in reality, the smartest manufacturer
don't try to standardize everything.

119
00:07:27,150 --> 00:07:31,410
Instead, they focus on the area
where standardization delivers the

120
00:07:31,410 --> 00:07:37,320
greatest impact without stiffing
differentiation, where its matters most.

121
00:07:37,860 --> 00:07:41,400
Take the automotive world component,
like chassis frame, suspension.

122
00:07:41,400 --> 00:07:45,960
Mounting points and crash protection
system are often standardized

123
00:07:45,990 --> 00:07:48,000
across multiple vehicles models.

124
00:07:48,060 --> 00:07:48,420
Why?

125
00:07:48,870 --> 00:07:51,450
Because this elements require
heavy engineering investment.

126
00:07:52,170 --> 00:07:56,400
Strict regulatory compliance, and
yet they are rarely influenced

127
00:07:56,400 --> 00:07:57,810
the customer buying decision.

128
00:07:58,290 --> 00:08:01,890
You don't choose a car based on
whether the rear suspension bolts are

129
00:08:01,890 --> 00:08:07,320
proprietary, but you do care about
interior experience, the driving field

130
00:08:07,380 --> 00:08:12,120
and infotainment feature, and that's
where manufacturers preserve room

131
00:08:12,120 --> 00:08:13,950
for differentiation and innovation.

132
00:08:14,490 --> 00:08:17,460
Now let's bring this thinking
into world of software platform.

133
00:08:18,145 --> 00:08:19,725
Not all services in.

134
00:08:20,580 --> 00:08:23,430
Tech stack needs to be
unique to everything.

135
00:08:23,820 --> 00:08:29,160
For example, authentication,
logging, monitoring, and development.

136
00:08:29,160 --> 00:08:33,570
Pipelines are like chassis and
suspension of a digital platform.

137
00:08:34,230 --> 00:08:35,820
They're critical, complex.

138
00:08:36,690 --> 00:08:40,680
And offer little value when
rebuild differently by every team.

139
00:08:41,520 --> 00:08:45,930
These are the perfect candidates for
standardization, shared, well maintained

140
00:08:45,930 --> 00:08:48,600
components that everyone can rely on.

141
00:08:49,350 --> 00:08:53,730
On the other hand, services that
directly affect user experience or

142
00:08:53,730 --> 00:08:59,130
enable rapid product experimentation
such as recommendation engines

143
00:08:59,160 --> 00:09:03,150
or UI level personalization may
benefit from more flexibility.

144
00:09:03,570 --> 00:09:08,125
That's where team needs to f. Freedom
to innovate and differentiate.

145
00:09:08,815 --> 00:09:10,585
Let's take a real world example.

146
00:09:11,155 --> 00:09:15,205
Imagine a company building both for
delivery app and a right hailing app.

147
00:09:15,955 --> 00:09:18,445
You could standardize a payment
processing system across both.

148
00:09:18,945 --> 00:09:23,805
It's core infrastructure, just like
chassis, but driver matching algorithm

149
00:09:24,225 --> 00:09:25,935
or the order tracking interface.

150
00:09:26,055 --> 00:09:31,965
That's where each product needs a room to
innovate based on its unique user journey.

151
00:09:32,715 --> 00:09:37,155
So the lesson is simple but powerful,
standardized where it saves effort

152
00:09:37,245 --> 00:09:38,955
without sacrificing identity.

153
00:09:39,770 --> 00:09:43,695
Customize where it's add value
and drive differentiation.

154
00:09:44,195 --> 00:09:47,765
That's the art of component
standardization, and it's just

155
00:09:47,765 --> 00:09:51,215
essential in the software as
it's on the assembly line.

156
00:09:51,715 --> 00:09:54,865
I want to highlight and often
overlooked, but absolutely critical

157
00:09:54,865 --> 00:09:58,465
aspect of platform engineering,
governance and component versioning.

158
00:09:59,035 --> 00:10:03,535
And once again, the automotive industry
offers a masterclass in how to manage

159
00:10:03,535 --> 00:10:06,505
complexity scale and long-term stability.

160
00:10:06,925 --> 00:10:09,235
Let's start with
architecture review board.

161
00:10:09,640 --> 00:10:14,230
In automotive world when a new vehicle
model is developed, it's not free for all

162
00:10:14,230 --> 00:10:18,730
manufacturer established architectural
review board and component approval

163
00:10:18,730 --> 00:10:23,260
process that ensures every part from
a braking system to 14 minute unit

164
00:10:23,740 --> 00:10:25,750
aligns with a broader platform strategy.

165
00:10:26,170 --> 00:10:28,870
This cross-functional
teams are responsible for

166
00:10:29,140 --> 00:10:30,535
maintaining platform coherence.

167
00:10:31,390 --> 00:10:33,940
Across dozens of product
lines and suppliers.

168
00:10:34,630 --> 00:10:37,240
In software, we had
same kind of discipline.

169
00:10:37,360 --> 00:10:42,220
For example, an internal platform
team might manage a shared API

170
00:10:42,220 --> 00:10:44,350
gateway or authentication services.

171
00:10:44,770 --> 00:10:48,640
With our proper review process,
team could introduce breaking

172
00:10:48,790 --> 00:10:53,350
changes, duplicate efforts, or
drift from enterprise standards.

173
00:10:53,890 --> 00:10:57,985
A technical governance group helps
ensure the platform evolution.

174
00:10:58,960 --> 00:11:01,750
Remains intentional, scalable, and safe.

175
00:11:02,320 --> 00:11:04,360
The second principle is
long-term versioning.

176
00:11:04,990 --> 00:11:07,480
A car isn't something you
update every two weeks.

177
00:11:07,900 --> 00:11:12,580
Vehicles stay on a road for 10, 15, or
even 20 years, which means replacement

178
00:11:12,580 --> 00:11:17,710
parts from where updates and newer
components all have to remain compatible.

179
00:11:17,710 --> 00:11:21,940
Across generation, automotive
engineer carefully manage how to

180
00:11:21,940 --> 00:11:25,600
comp, how component evolves over time.

181
00:11:25,975 --> 00:11:30,115
Because even small chains can create
system-wide compatibility issue.

182
00:11:30,685 --> 00:11:33,145
Now think about enterprise
software platform.

183
00:11:33,715 --> 00:11:38,815
Many business critical application
in finance, healthcare, or government

184
00:11:39,415 --> 00:11:41,185
can't break with every updates.

185
00:11:41,605 --> 00:11:46,945
If your platform teams decide to
duplicate a shared logging library

186
00:11:47,125 --> 00:11:51,295
or update database, API, you must
have a clear versioning strategy,

187
00:11:51,745 --> 00:11:55,105
backward compatibility plans,
and long-term support policy.

188
00:11:55,525 --> 00:11:58,075
Because other teams
depends on your stability.

189
00:11:58,900 --> 00:12:01,420
And finally, stability guarantees.

190
00:12:01,450 --> 00:12:06,400
Software teams often take pride
in moving fast, pushing weekly

191
00:12:06,400 --> 00:12:08,260
updates and trading rapidly.

192
00:12:08,350 --> 00:12:12,970
But platform components that supports
enterprise workloads often needs

193
00:12:12,970 --> 00:12:15,220
to be stable for years, not weeks.

194
00:12:15,970 --> 00:12:21,645
Much like cost, safety system can't afford
surprises billing platform or identity

195
00:12:21,885 --> 00:12:25,005
provider and software must be rock solid.

196
00:12:25,410 --> 00:12:28,470
And treated as infrastructure,
not experiment.

197
00:12:29,190 --> 00:12:34,110
The automotive industry teaches us
that governance, long-term thinking and

198
00:12:34,110 --> 00:12:36,030
careful versioning aren't constrained.

199
00:12:36,930 --> 00:12:40,320
They are enablers for trust,
scale, and innovation.

200
00:12:40,740 --> 00:12:42,630
So we build our platform.

201
00:12:42,810 --> 00:12:48,180
Let's remember governance with intent
version with care and guarantee

202
00:12:48,180 --> 00:12:52,260
with confidence, because that's
what enables sustainable software.

203
00:12:52,695 --> 00:12:55,755
Just as it's enabled long
lasting vehicles on the road.

204
00:12:56,255 --> 00:12:57,815
Let's talk about reality.

205
00:12:57,815 --> 00:13:02,075
Every engineering team faces
technical depth and how the

206
00:13:02,075 --> 00:13:05,765
automotive industry offers valuable
lessons on managing it effectively.

207
00:13:06,455 --> 00:13:09,880
Car manufacturers have never
had luxury to wiping the slate.

208
00:13:10,580 --> 00:13:14,780
Screen with each new model legacy
platform, decades of investment in

209
00:13:14,780 --> 00:13:19,340
tooling training and supply chains,
this can't just be tossed aside.

210
00:13:19,610 --> 00:13:24,650
Instead, they've developed sophisticated
strategies for incremental modernization.

211
00:13:25,220 --> 00:13:29,720
One of the most powerful approaches,
obstruction layers, rather than replacing

212
00:13:29,720 --> 00:13:34,070
entire system engineering design
interfaces that allowed new component

213
00:13:34,070 --> 00:13:36,770
to integrate with older platform.

214
00:13:37,445 --> 00:13:42,035
This preserve existing functionality
while enabling forward progress.

215
00:13:42,485 --> 00:13:47,225
A strategy that kept factories
running supply chain intact and

216
00:13:47,615 --> 00:13:52,565
vehicle serviceable long after its
release software team applied this

217
00:13:52,565 --> 00:13:57,055
exact principle instead of big
bang, that risk breaking everything.

218
00:13:57,055 --> 00:14:00,070
We can modernize legacy
system incrementally.

219
00:14:00,615 --> 00:14:06,345
Using APIs, adapters, and platform
bridges to integrate new capabilities

220
00:14:06,375 --> 00:14:09,345
without destabilizing production system.

221
00:14:10,065 --> 00:14:15,195
Watch more automaker measure technical
depth, not just by age, but by impact.

222
00:14:15,705 --> 00:14:18,675
Looking at the component
availability, maintenance complexity.

223
00:14:19,330 --> 00:14:21,880
Performance issue and
integration friction.

224
00:14:22,510 --> 00:14:29,350
Similarly, we should define depth in
software, not as old code, but the code

225
00:14:29,350 --> 00:14:35,170
that slows us down is hard to maintain
or block integration in both industries.

226
00:14:35,170 --> 00:14:36,040
The goal is same.

227
00:14:36,610 --> 00:14:39,955
Preserve value from the past
while building for the future.

228
00:14:40,455 --> 00:14:43,425
Explore the fascinating parallels
between modern manufacturing

229
00:14:43,425 --> 00:14:45,465
automation and the world of DevOps.

230
00:14:46,125 --> 00:14:49,605
Walk into advanced manufacturing
factory today and you will find

231
00:14:49,605 --> 00:14:53,355
one of the most sophisticated
automation system on the planet.

232
00:14:53,805 --> 00:14:55,425
This assembly lines can.

233
00:14:55,845 --> 00:15:00,405
Produce multiple vehicles models
on the same line with minimal

234
00:15:00,645 --> 00:15:02,685
downtime between configuration.

235
00:15:03,255 --> 00:15:06,075
That's the level of
efficiency is not an accident.

236
00:15:06,585 --> 00:15:09,765
It's the result of decades of
investment in instrumentation,

237
00:15:09,765 --> 00:15:10,840
robotics, and process design.

238
00:15:11,340 --> 00:15:16,170
This is the manufacturing world equivalent
of fully automated CI ICD pipeline

239
00:15:16,170 --> 00:15:21,990
and software just like lights out
manufacturing where production lines runs

240
00:15:21,990 --> 00:15:24,810
with little to a no human intervention.

241
00:15:25,080 --> 00:15:28,680
DevOps teams aim for system
that can build, test, and

242
00:15:28,680 --> 00:15:30,720
deploy software automatically.

243
00:15:31,080 --> 00:15:32,910
This environment rely on observability.

244
00:15:33,410 --> 00:15:38,720
Self-healing mechanism and predictive
monitoring, very similar to how factories

245
00:15:38,720 --> 00:15:43,730
can use sensors and predictive maintenance
to keep machinery running 24 by seven.

246
00:15:44,390 --> 00:15:49,670
Another striking parallel is layered
quality control in auto manufacturing.

247
00:15:50,210 --> 00:15:53,810
Every stage of assembly line
includes built-in validation.

248
00:15:54,500 --> 00:15:59,030
From checking individual component
to full system integration test

249
00:15:59,090 --> 00:16:00,770
before the car leaves the plant.

250
00:16:01,220 --> 00:16:02,840
It's not final inspection.

251
00:16:02,930 --> 00:16:09,350
It's continuous assurance In software,
we do the same thing with unit test,

252
00:16:09,740 --> 00:16:14,900
integration test and end-to-end
validation, and throughout our CICD

253
00:16:14,900 --> 00:16:21,320
pipelines to catch issue early and
ensure that each build is read road

254
00:16:21,320 --> 00:16:23,570
ready before it reaches to users.

255
00:16:24,070 --> 00:16:27,250
So whether it's cars or code,
the principles are same.

256
00:16:27,700 --> 00:16:32,800
Automate what you can test
continuously and build for scale

257
00:16:33,190 --> 00:16:34,505
without sacrificing quality.

258
00:16:35,005 --> 00:16:38,995
In high stake environment,
observability isn't a luxury, it's

259
00:16:38,995 --> 00:16:41,005
a necessity and a few industry.

260
00:16:41,935 --> 00:16:46,675
This better than automotive manufacturing
where system failures can lead

261
00:16:46,675 --> 00:16:51,175
to a real world accident, product
recalls or massive financial loss.

262
00:16:51,535 --> 00:16:53,155
Let's look at how.

263
00:16:53,465 --> 00:16:57,155
Their approach offers powerful
lessons for software teams

264
00:16:57,215 --> 00:16:58,985
managing mission critical system.

265
00:16:59,495 --> 00:17:01,445
First, consider predictive maintenance.

266
00:17:01,865 --> 00:17:05,495
Modern engine management system
monitor everything from commercial

267
00:17:05,495 --> 00:17:09,785
efficiency to component weir by
analyzing pattern in a real time.

268
00:17:10,175 --> 00:17:11,045
They can predict.

269
00:17:11,380 --> 00:17:15,610
Whether the part will fail long
before it actually does this prevents

270
00:17:15,610 --> 00:17:18,520
breakdowns, reduce downtime and save cost.

271
00:17:19,060 --> 00:17:22,840
In software we use same approach
with health checks, usage

272
00:17:22,840 --> 00:17:25,090
trends, and anomaly detection.

273
00:17:25,450 --> 00:17:30,550
For example, a payment platform
might monitor API latency or

274
00:17:30,760 --> 00:17:34,870
error rates or a flag issue
before customer feel its impact.

275
00:17:35,215 --> 00:17:37,435
Ensuring uptime and trust.

276
00:17:37,825 --> 00:17:40,195
Second there incident response.

277
00:17:40,465 --> 00:17:44,785
When fault occurs in vehicle,
say a brake system failure

278
00:17:44,875 --> 00:17:47,605
engineer, don't just patch it.

279
00:17:47,755 --> 00:17:49,495
They diagnose the root cause.

280
00:17:49,525 --> 00:17:53,155
Provide temporary mitigation
and communicate clearly.

281
00:17:53,770 --> 00:17:57,940
Affected customer all while
ensuring safety is in compromise.

282
00:17:58,930 --> 00:18:02,710
This mirror how DevOps teams
should handle major incident.

283
00:18:03,260 --> 00:18:06,200
Server crash isn't just
about already starting it.

284
00:18:06,740 --> 00:18:11,780
It's about diagnosing the underlying
issue, mitigation impact, and

285
00:18:11,840 --> 00:18:15,895
working towards the permanent fix
with transparency for stakeholders.

286
00:18:16,465 --> 00:18:18,295
Finally, think about Fleet Elementary.

287
00:18:18,795 --> 00:18:23,505
Connected vehicles now send performance
data back to central system, helping

288
00:18:23,505 --> 00:18:29,355
manufacturer detect patterns, improve
reli reliability and shape future models.

289
00:18:29,925 --> 00:18:35,410
This exactly what we do with
observability platform like Datadog or.

290
00:18:35,910 --> 00:18:41,010
We stream logs, metrics, and
traces to understand how our

291
00:18:41,010 --> 00:18:42,570
system behave in production.

292
00:18:42,960 --> 00:18:46,170
Not just to detect problems,
but to drive continuous

293
00:18:46,170 --> 00:18:48,600
improvement in both cars and code.

294
00:18:48,930 --> 00:18:50,520
One principle holds true.

295
00:18:51,150 --> 00:18:53,790
You can't control what you can't observe.

296
00:18:54,290 --> 00:18:58,430
To understand stakeholder alignment
and organizational structure, we would

297
00:18:58,430 --> 00:19:00,200
like to take a real world example.

298
00:19:01,010 --> 00:19:03,710
Take Ford Motor Company as an example.

299
00:19:04,560 --> 00:19:09,150
Traditionally, historically, Ford
operates with dedicated engineering teams

300
00:19:09,150 --> 00:19:11,130
focused on a specific vehicle lines.

301
00:19:11,535 --> 00:19:15,435
For example, one team exclusively
responsible for Ford F-150 pickup,

302
00:19:15,915 --> 00:19:19,095
another for Mustang sports car and so on.

303
00:19:19,155 --> 00:19:22,545
Each team handled all aspects
of design, engineering, and

304
00:19:22,545 --> 00:19:24,555
production for their models.

305
00:19:24,855 --> 00:19:29,355
While this allowed for a deep
focus on individual product, it

306
00:19:29,355 --> 00:19:34,425
often led to duplicate efforts and
higher cost as similar component.

307
00:19:34,575 --> 00:19:38,705
Were engineered independently
for different vehicles for.

308
00:19:39,470 --> 00:19:44,230
If you see the platform structure in
four shifted towards modular platform

309
00:19:44,230 --> 00:19:49,900
strategy, particularly with its new
Ford Global platform approach, this

310
00:19:49,900 --> 00:19:53,770
involved creating cross-functional
team responsible for shared vehicle

311
00:19:53,770 --> 00:19:58,960
architecture and component such as
chassis, powertrain, and electronics

312
00:19:59,410 --> 00:20:04,060
that can be used across multiple models
and even across different vehicle types,

313
00:20:04,210 --> 00:20:06,955
trucks, SUV, and cars, for example.

314
00:20:07,705 --> 00:20:11,395
The F-150 and Ford Ranger now
share a significant portion of

315
00:20:11,395 --> 00:20:14,395
their underlying platform elements.

316
00:20:14,635 --> 00:20:20,995
The dedicated platform teams manages this
shared component, ensuring consistently

317
00:20:21,295 --> 00:20:25,645
consistency and quality while product
team focus on the model specific

318
00:20:25,645 --> 00:20:29,335
feature styling and customer experience.

319
00:20:29,905 --> 00:20:31,045
Why it matters.

320
00:20:31,255 --> 00:20:36,595
This transition helps forward
reduce engineering redundancy, cut

321
00:20:36,595 --> 00:20:40,405
cost, and speed of the innovation,
while still maintaining the unique

322
00:20:40,405 --> 00:20:44,065
identity and appeal of each vehicle.

323
00:20:44,575 --> 00:20:49,705
It's also promotes better stakeholders
alignment by clearly defining ownership

324
00:20:50,065 --> 00:20:53,125
between platform teams and product teams.

325
00:20:53,625 --> 00:20:57,945
In software organization, this
mirrors the shift to platform teams

326
00:20:58,335 --> 00:21:00,105
managing shared infrastructures.

327
00:21:00,435 --> 00:21:06,035
Our services, while product teams builds
unique feature on top, one of the key

328
00:21:06,035 --> 00:21:09,785
factor behind successful innovation
in large organization is the ability

329
00:21:09,785 --> 00:21:12,320
to build strong internal communities.

330
00:21:12,995 --> 00:21:17,375
And foster continuous knowledge
sharing this automotive industry

331
00:21:17,375 --> 00:21:21,545
offers a great example of how
this can be done efficiently.

332
00:21:21,965 --> 00:21:26,195
First, many manufacturer established
center of excellence, specialized

333
00:21:26,195 --> 00:21:29,885
team that develops deep expertise in
critical areas like electric power

334
00:21:29,885 --> 00:21:32,375
trains, our autonomous driving system.

335
00:21:32,495 --> 00:21:37,745
This team don't just innovate, they
also act internal consultant, guiding

336
00:21:37,745 --> 00:21:41,555
other teams across the company
and setting technical standards.

337
00:21:42,215 --> 00:21:44,375
Second comprehensive training program.

338
00:21:44,735 --> 00:21:48,935
Play a vital role engineer, participate
in certification processes and

339
00:21:48,935 --> 00:21:53,255
ongoing education initiatives to
ensure consistent high level of

340
00:21:53,255 --> 00:21:55,205
expertise across the organization.

341
00:21:55,655 --> 00:22:00,755
This helps avoid knowledge, silos,
and keeps the workforce up to

342
00:22:00,755 --> 00:22:03,515
date with the latest technology.

343
00:22:04,015 --> 00:22:08,035
Third automotive companies host
internal conferences, technical

344
00:22:08,035 --> 00:22:11,005
forums, and expertise sharing program.

345
00:22:11,035 --> 00:22:17,005
This event build vibrant communities
of practice around platform technology,

346
00:22:17,365 --> 00:22:22,195
encouraging collaboration, and the
rapid spread of best practices.

347
00:22:22,705 --> 00:22:28,135
Software platform teams can adopt
this same strategy by creating center

348
00:22:28,135 --> 00:22:33,025
of excellence for areas like cloud
infrastructures or security, establishing

349
00:22:33,025 --> 00:22:38,185
structure, training parts, and
hosting regular forums or tech talks.

350
00:22:38,485 --> 00:22:43,585
Platform teams can drive wide
adoption of and a deeper understanding

351
00:22:43,945 --> 00:22:45,955
across large, large organization.

352
00:22:46,455 --> 00:22:50,625
Building this community, not only
scale platform success, but also

353
00:22:50,625 --> 00:22:53,865
foster a culture of continuous
learning and collaboration.

354
00:22:54,855 --> 00:22:59,025
Managing versioning across multiple
product lines is one of the most

355
00:22:59,025 --> 00:23:02,835
complex and critical challenges in
automotive platform engineering.

356
00:23:02,865 --> 00:23:07,275
This complexity offers powerful
lessons for software team supporting

357
00:23:07,275 --> 00:23:09,405
diverse application first.

358
00:23:09,405 --> 00:23:12,615
Effective dependency
tracking is essential.

359
00:23:13,245 --> 00:23:18,195
Automotive engineers use sophisticated
tools to map out how component interact

360
00:23:18,555 --> 00:23:23,235
across different vehicles models each
with its own development timeline.

361
00:23:23,715 --> 00:23:28,515
This helps team understand the
ripple effect of changes that

362
00:23:28,575 --> 00:23:30,525
avoid unexpected conflicts.

363
00:23:30,810 --> 00:23:35,430
Similarly, software teams need
strong dependency management

364
00:23:35,430 --> 00:23:39,630
to coordinate updates across
multiple service and products.

365
00:23:40,230 --> 00:23:45,270
Second, backward compatibility
is non-negotiable requirement.

366
00:23:46,080 --> 00:23:51,075
Vehicle component often have to
support multiple generation of

367
00:23:51,475 --> 00:23:56,435
protocols and interfaces to ensure
Part three means interchangeable.

368
00:23:57,345 --> 00:23:58,875
System functions seamlessly.

369
00:23:59,445 --> 00:24:06,285
The drives careful design decision that
prevents costly disruption in software.

370
00:24:06,945 --> 00:24:11,655
Backward compatibility, ensure team
to deploy, update without breaking

371
00:24:11,655 --> 00:24:13,395
existing clients or service.

372
00:24:13,935 --> 00:24:19,185
Third, coordinated release are vital
when a shared component is updated.

373
00:24:19,700 --> 00:24:20,500
Engineer must care.

374
00:24:21,000 --> 00:24:25,350
Carefully assess its impact across
all product lines and develop

375
00:24:25,350 --> 00:24:27,239
strategy that minimize disruption.

376
00:24:27,840 --> 00:24:33,629
This often means phase rollouts,
fallback options, or clear migration path

377
00:24:34,409 --> 00:24:39,570
practice that software teams also need
to adapt to maintain system stability.

378
00:24:39,794 --> 00:24:43,324
Finally, extensive compatibility testing.

379
00:24:43,625 --> 00:24:44,804
Ensure that the sun.

380
00:24:45,304 --> 00:24:46,625
And ensure that update.

381
00:24:46,685 --> 00:24:51,475
Don't introduce regression
or new bugs in automotive.

382
00:24:51,475 --> 00:24:55,975
This might mean validating component
across dozens of vehicles variance

383
00:24:56,004 --> 00:24:57,894
before approval in software.

384
00:24:57,894 --> 00:25:04,070
Automated test and stacking environments
serves a similar purpose in both domains.

385
00:25:04,070 --> 00:25:08,754
Mastering versioning management is the
key to maintain reliability, enabling

386
00:25:08,754 --> 00:25:11,094
innovation and scaling complexity.

387
00:25:11,590 --> 00:25:14,800
Without Kio, the automotive
industry especially.

388
00:25:15,325 --> 00:25:18,955
Here in United States provides
a fascinating insight into

389
00:25:18,955 --> 00:25:22,735
sophisticated manufacturing process
that closely parallel modern

390
00:25:22,735 --> 00:25:24,265
software development strategies.

391
00:25:24,895 --> 00:25:28,255
Take Four Motor Company, for
example, when four introduce a

392
00:25:28,255 --> 00:25:33,565
new component into product lines,
whether for F-150 or Mustang, it

393
00:25:33,565 --> 00:25:35,485
doesn't simply swap parts overnight.

394
00:25:35,785 --> 00:25:38,815
Instead, they follow a
carefully controlled process

395
00:25:39,205 --> 00:25:40,765
of a gradual integration.

396
00:25:40,945 --> 00:25:43,315
New parts go through extensive testing.

397
00:25:43,815 --> 00:25:47,535
Pilot runs and phase rollouts
before full scale adoption.

398
00:25:47,925 --> 00:25:53,805
This mirror software practice like blue
green deployment are candidate releases

399
00:25:53,985 --> 00:25:59,685
where changes are introduced incrementally
to minimize risk and catch issue early.

400
00:26:00,165 --> 00:26:04,295
Another critical aspect is supply
chain management food as a robust

401
00:26:04,295 --> 00:26:08,915
system for qualifying supplier
continuously monitoring, qualifying,

402
00:26:09,305 --> 00:26:10,985
and maintaining backup supply.

403
00:26:11,485 --> 00:26:15,115
For Ensure production never falls.

404
00:26:15,565 --> 00:26:20,395
This is directly comparable to
managing dependency in cloud

405
00:26:20,395 --> 00:26:26,185
environments where teams monitor
third party services, ensure ses and.

406
00:26:26,475 --> 00:26:31,575
Plan of failover or vendor changes
in both manufacturing and software.

407
00:26:31,575 --> 00:26:36,705
This strategy helps ensure continuity,
maintaining quality, and reduce risk

408
00:26:36,885 --> 00:26:38,685
during complex change management.

409
00:26:39,195 --> 00:26:44,685
By learning from automated process like
this software team can improve deployment,

410
00:26:44,685 --> 00:26:49,635
reliability and resilience critical
for delivering seamless user experience

411
00:26:50,055 --> 00:26:51,825
in today's fast pace environment.

412
00:26:52,325 --> 00:26:56,495
As vehicle become more like computers
on wheels, the automotive industry is

413
00:26:56,495 --> 00:27:01,265
undergoing a massive transformation
and evaluation of platform

414
00:27:01,265 --> 00:27:03,605
engineering is at the heart of it.

415
00:27:04,235 --> 00:27:07,505
Take Tesla, for example, a
global leader in electric and

416
00:27:07,505 --> 00:27:08,915
autonomous vehicle innovation.

417
00:27:09,335 --> 00:27:12,965
Tesla has redefined how
platforms are built by treating

418
00:27:12,965 --> 00:27:15,130
software as a core, not a layer.

419
00:27:16,070 --> 00:27:21,080
Its vehicle receives over their
updates just like phone rolling

420
00:27:21,080 --> 00:27:24,950
out new features, performance
improvements, and even safety patches

421
00:27:25,340 --> 00:27:27,800
all without a visit to a dealership.

422
00:27:28,250 --> 00:27:33,590
This is only possible through a tightly
integrated platform spanning hardwares,

423
00:27:33,620 --> 00:27:36,830
software and cloud services and AI system.

424
00:27:37,280 --> 00:27:38,455
But Tesla is in salon.

425
00:27:39,095 --> 00:27:45,335
Companies like BMW Toyota and Volkswagen
are building unified EV platforms

426
00:27:45,395 --> 00:27:51,125
like VWs, MEB, that consolidate
mechanical, electrical, and digital

427
00:27:51,125 --> 00:27:53,435
domains into a single architecture.

428
00:27:53,915 --> 00:27:58,325
These platforms are designed to
support electric drive trains, but

429
00:27:58,325 --> 00:28:04,535
also to scale across different models,
geographics and service offering.

430
00:28:05,225 --> 00:28:07,055
Nowhere is the platform.

431
00:28:07,880 --> 00:28:12,770
Complexity more apparent
than its autonomous vehicles.

432
00:28:12,830 --> 00:28:17,750
Your engineering teams must integrate
mechanical system like braking and

433
00:28:17,750 --> 00:28:19,640
steering sensor suits, indicate.

434
00:28:20,140 --> 00:28:26,680
LIDAR and cameras, AI decision making and
cloud-based infrastructures for mapping

435
00:28:26,770 --> 00:28:29,170
fleet learning and real time updates.

436
00:28:29,710 --> 00:28:33,310
It's a platform engineering challenge
that spans multiple domains,

437
00:28:33,700 --> 00:28:35,710
physical, digital, and intelligent.

438
00:28:36,310 --> 00:28:37,990
For software team, the
parallels are clear.

439
00:28:38,490 --> 00:28:43,620
As we build multi-domain platforms,
integrating data APIs, machine

440
00:28:43,620 --> 00:28:48,720
learning, and realtime services,
the automotive world, remind us

441
00:28:48,720 --> 00:28:52,835
what successful platform requires
deep cross-functional collaboration.

442
00:28:53,535 --> 00:28:59,115
Flexible architecture and ability to
adapt while maintaining core stability.

443
00:28:59,685 --> 00:29:05,565
The road ahead is complex, but full of
opportunity for those who built platform

444
00:29:05,565 --> 00:29:07,875
with scale and agility in the mind.

445
00:29:08,375 --> 00:29:12,660
At last, I want to thank you for
joining me on this platform Engineering

446
00:29:12,660 --> 00:29:14,615
presentation and taking time.

447
00:29:15,575 --> 00:29:16,505
Thank you so much.

448
00:29:17,225 --> 00:29:17,945
Have a good day.

