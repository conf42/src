1
00:00:00,070 --> 00:00:01,089
Welcome to the session.

2
00:00:01,339 --> 00:00:02,719
today we're going to talk about current.

3
00:00:02,809 --> 00:00:03,979
It's an open source project.

4
00:00:04,010 --> 00:00:08,300
That's aimed at simplifying Cuban these
cluster processing at scale, right?

5
00:00:08,759 --> 00:00:14,389
So all of us who've been in the
DevOps world know what a pain it is

6
00:00:14,390 --> 00:00:16,009
to, probably in a cluster, right?

7
00:00:16,420 --> 00:00:21,370
You have to come up with, an optimal
way to do it at scale, and to manage,

8
00:00:21,370 --> 00:00:23,520
complex Configurations as well.

9
00:00:24,220 --> 00:00:26,609
So Codent solves this problem.

10
00:00:26,859 --> 00:00:30,009
in the session, we're going to look at
the challenges and we're going to see

11
00:00:30,529 --> 00:00:33,999
what difficulties are there in platform
engineering and then approach Codent.

12
00:00:34,189 --> 00:00:38,139
And towards the end of it, we'll
see, Codent in action, right?

13
00:00:38,629 --> 00:00:39,679
So I'm Bharath.

14
00:00:39,979 --> 00:00:41,819
I'm in the OSPO team at Monantis.

15
00:00:42,349 --> 00:00:45,029
I'm a senior software dev and
an open source contributor.

16
00:00:45,359 --> 00:00:47,539
Been working in and around
Kubernetes for a while now.

17
00:00:48,039 --> 00:00:48,889
Let's get started.

18
00:00:49,389 --> 00:00:54,519
So we all know how the cloud was
supposed to be right, but very quickly

19
00:00:54,519 --> 00:01:00,109
It got into this maze where everything
became just so much complex And even

20
00:01:00,109 --> 00:01:06,889
kubernetes which started as a very
basic project quickly grew and although

21
00:01:06,889 --> 00:01:11,949
it is the ecosystem, is what makes
it today the ecosystem has become so

22
00:01:11,949 --> 00:01:17,574
big that It's super complex, even for
an experienced person in this world.

23
00:01:18,564 --> 00:01:22,204
That's why we need a simplified
streamlined process, which we

24
00:01:22,204 --> 00:01:23,694
call platform engineering today.

25
00:01:24,194 --> 00:01:27,964
And for enterprises specifically,
when you look at platform engineering,

26
00:01:28,254 --> 00:01:31,684
if I have to sum up, what are
the key things that you look for?

27
00:01:32,184 --> 00:01:34,354
Developer self service
is extremely important.

28
00:01:34,364 --> 00:01:38,954
So having a dedicated DevOps team
that's as big or even bigger than your

29
00:01:39,434 --> 00:01:41,954
development team is not scalable anymore.

30
00:01:42,334 --> 00:01:44,429
So you've got to have
a self service portal.

31
00:01:44,929 --> 00:01:49,389
Where your dev teams and your QA teams
and your security teams and all the

32
00:01:49,389 --> 00:01:55,039
other teams can manage the infrastructure
themselves with the platform engineering

33
00:01:55,039 --> 00:01:58,879
being the backend You also need
operational simplicity If you don't have

34
00:01:58,879 --> 00:02:02,449
that then providing this for multiple
teams across your company becomes

35
00:02:02,449 --> 00:02:06,569
extremely difficult Customizations is
again another important thing because

36
00:02:06,609 --> 00:02:10,709
like I said, for different teams,
the requirements will be different.

37
00:02:11,069 --> 00:02:15,239
So without changing the core model,
having the option to customize is

38
00:02:15,239 --> 00:02:19,209
what, brings this whole process
about for platform engineers.

39
00:02:19,719 --> 00:02:25,219
And visibility and control, again, at an
administrative level, this is extremely

40
00:02:25,219 --> 00:02:27,189
important to manage your clusters.

41
00:02:27,729 --> 00:02:30,849
And then, last but not least,
security and compliance.

42
00:02:31,349 --> 00:02:32,669
Every company is going to follow it.

43
00:02:32,879 --> 00:02:34,649
that's a primary, these days.

44
00:02:35,149 --> 00:02:40,199
So given all these challenges,
there's a growing need for

45
00:02:40,239 --> 00:02:41,819
multi cluster configurations.

46
00:02:42,069 --> 00:02:46,689
So for a platform engineer, you need
multi cluster configurations for multiple

47
00:02:46,709 --> 00:02:53,569
things, such as AM and work nodes or multi
tenancy, edge devices, IOT, and so on.

48
00:02:54,069 --> 00:02:58,659
Now, when you look at the market and see
what are the options available for me

49
00:02:58,659 --> 00:03:04,209
to accomplish this, Then if you don't do
anything that's always an option, right?

50
00:03:04,539 --> 00:03:09,079
So if you don't do anything, your
infrastructure costs grows up and up.

51
00:03:09,339 --> 00:03:14,109
And before you realize you're
paying like huge cloud bills, right?

52
00:03:14,569 --> 00:03:20,529
Then let's take it like a basic step
ahead with DIY open source tools.

53
00:03:20,999 --> 00:03:23,799
of course, there's been so many
tools for cluster provisioning and

54
00:03:23,799 --> 00:03:26,079
maintenance in the open source market.

55
00:03:26,469 --> 00:03:28,339
But then there's always this.

56
00:03:28,849 --> 00:03:31,369
Learning curve, that's,
that comes with it.

57
00:03:31,729 --> 00:03:34,819
And then you gotta understand each
tools and you gotta understand how one

58
00:03:34,819 --> 00:03:38,869
tool works with another integrations
and configurations and all that.

59
00:03:39,419 --> 00:03:42,839
And then of course, you have
the problem for extending it

60
00:03:42,839 --> 00:03:44,069
to your on premises as well.

61
00:03:44,499 --> 00:03:47,709
Then if I have to take it another
step further, there are proprietary

62
00:03:47,709 --> 00:03:52,269
solutions, but the proprietary
solutions obviously come with expensive

63
00:03:52,269 --> 00:03:57,299
licenses and they're quite limited
to the options that they provide.

64
00:03:57,864 --> 00:04:01,544
And more often than not, two years,
three years down the line, what's

65
00:04:01,544 --> 00:04:05,964
going to happen is that without,
you looking at it really hard, you

66
00:04:05,964 --> 00:04:07,514
are in a vendor lock in, right?

67
00:04:07,564 --> 00:04:10,734
And if you have to expand to
multiple clouds, and it becomes

68
00:04:10,734 --> 00:04:12,194
really difficult at that point.

69
00:04:13,184 --> 00:04:18,734
So to solve all these problems,
we are presenting an enterprise

70
00:04:18,794 --> 00:04:20,754
grade open source solution, right?

71
00:04:21,064 --> 00:04:25,084
That's cost efficient and that's
customizable and it's completely in

72
00:04:25,084 --> 00:04:26,834
your hands and your control, right?

73
00:04:27,214 --> 00:04:30,404
And it works on multiple public
clouds as well as on drum.

74
00:04:30,904 --> 00:04:32,754
This is where Codent comes in, right?

75
00:04:33,314 --> 00:04:36,124
At a very high level,
we have three things.

76
00:04:36,554 --> 00:04:39,474
Cluster management, state
management and observability.

77
00:04:39,914 --> 00:04:43,944
So the cluster management, what I mean
by that is, how are you going to manage

78
00:04:43,964 --> 00:04:47,444
multiple clusters across clouds at scale?

79
00:04:47,864 --> 00:04:52,134
That level of cluster management
is taken care of by Codent.

80
00:04:52,699 --> 00:04:58,429
State management talks about the
day to operations when you deploy or

81
00:04:58,429 --> 00:05:03,249
need to deploy multiple applications
across your clouds in a single click.

82
00:05:03,749 --> 00:05:06,419
That's your state
management and then comes.

83
00:05:07,054 --> 00:05:07,914
Observability.

84
00:05:07,924 --> 00:05:13,344
So when you have a working operation,
clusters and workloads and apps

85
00:05:13,384 --> 00:05:17,634
running on it, the one thing that's
100 percent needed in this world or any

86
00:05:17,634 --> 00:05:19,474
world is really observability tools.

87
00:05:19,764 --> 00:05:23,514
So we're baking this into the
current ecosystem without having

88
00:05:23,514 --> 00:05:24,984
to rely on external resources.

89
00:05:24,984 --> 00:05:26,894
We have to again do
configuration yourself.

90
00:05:27,244 --> 00:05:32,044
All this is that so open delivery
is used and you can just use

91
00:05:32,044 --> 00:05:34,334
it right from the package.

92
00:05:34,884 --> 00:05:40,284
So before jumping there, just one
last thing about the golden paths

93
00:05:40,284 --> 00:05:43,904
that's often talked about in DevOps.

94
00:05:44,044 --> 00:05:46,124
So everybody wants to perfect this.

95
00:05:46,344 --> 00:05:50,194
Every company, every team is looking
to move as close as possible to

96
00:05:50,194 --> 00:05:53,484
a golden path, although you can
always argue there isn't one.

97
00:05:53,854 --> 00:05:54,294
But right.

98
00:05:54,794 --> 00:05:57,664
Having something close to that
is still a lot of success.

99
00:05:57,904 --> 00:06:04,324
It still saves you a lot of effort, money,
and it gives you a repeatable process

100
00:06:04,644 --> 00:06:06,614
for maintenance as well as scalability.

101
00:06:07,134 --> 00:06:11,444
So especially when you have a
choice of multiple clouds, then this

102
00:06:11,444 --> 00:06:13,104
becomes extremely important as well.

103
00:06:13,604 --> 00:06:17,654
A quick look at the Codon architecture.

104
00:06:18,094 --> 00:06:22,414
So at a high level, like I said,
there are three components.

105
00:06:22,714 --> 00:06:26,344
One is the cluster management, one
is the state management, and then

106
00:06:26,344 --> 00:06:27,904
you have the observability stack.

107
00:06:28,404 --> 00:06:32,624
So with the cluster management,
what happens is we use

108
00:06:32,704 --> 00:06:34,624
upstream capi controllers.

109
00:06:35,074 --> 00:06:41,444
So Since this is completely open
source, the underlying technologies to

110
00:06:41,444 --> 00:06:43,724
make this happen is also open source.

111
00:06:44,444 --> 00:06:48,424
Based on the cloud, we have
the CAPEX controllers as well.

112
00:06:49,024 --> 00:06:55,144
CAPA for AWS, CAPZ for Azure,
CAPV for VMware, and so on.

113
00:06:55,644 --> 00:07:01,004
We deploy the upstream CAPI controller,
as well as the cloud specific

114
00:07:01,004 --> 00:07:03,454
controllers, onto your management.

115
00:07:04,184 --> 00:07:07,644
Cluster along with that will
be the Cosmotron controller.

116
00:07:07,994 --> 00:07:15,234
So K0s and Cosmotron form a core part
and this entire architecture wherein

117
00:07:15,274 --> 00:07:18,004
we use that for controller management.

118
00:07:18,504 --> 00:07:24,394
So this becomes your management
cluster wherein the KCM controllers

119
00:07:25,394 --> 00:07:30,264
and a bunch of other components
that are related to current along

120
00:07:30,264 --> 00:07:31,394
with the upstream components.

121
00:07:31,894 --> 00:07:35,834
Are running on the management cluster
and right here in the management

122
00:07:35,834 --> 00:07:41,024
cluster for state management We
have sveltos controller So sveltos

123
00:07:41,064 --> 00:07:44,634
like I said is for managing the
states and deploying applications

124
00:07:44,684 --> 00:07:47,564
across multiple clusters, right?

125
00:07:47,954 --> 00:07:52,854
again, this is an open source project
and it's Integrated into codent so

126
00:07:52,854 --> 00:07:57,794
that all you need to do for example If
you want to provision or deploy cert

127
00:07:58,234 --> 00:08:03,214
manager across all your clusters Then
all you need to do is include search

128
00:08:03,214 --> 00:08:04,954
manager in the configuration file.

129
00:08:05,294 --> 00:08:09,324
And that's that's automatically deployed
to all the clusters And that is what's

130
00:08:09,324 --> 00:08:15,934
shown, here on the right side in the child
clusters So in the child cluster along

131
00:08:15,934 --> 00:08:20,184
with all the kubernetes add on services
that you'll find You'll also see that

132
00:08:20,184 --> 00:08:25,994
this is felt as agent that's operating
there To talk between your child cluster

133
00:08:26,044 --> 00:08:28,084
and the management cluster, right?

134
00:08:28,584 --> 00:08:33,744
How you accomplish this entire thing
is by defining something called as a

135
00:08:33,744 --> 00:08:37,744
cluster deployment We'll look at this
in detail when I go to the demo part

136
00:08:38,204 --> 00:08:42,104
But just briefly I want to mention
that your entire cluster configuration

137
00:08:42,524 --> 00:08:48,574
will be controlled and monitored using
this cr called as cluster deployment

138
00:08:49,494 --> 00:08:55,349
and to facilitate the Configuration
of the clusters based on the cloud.

139
00:08:55,709 --> 00:08:59,919
We have multiple cluster templates
and to facilitate the applications

140
00:08:59,989 --> 00:09:01,769
configuration, we have service templates.

141
00:09:02,649 --> 00:09:07,379
So the example that I gave you earlier
about cert manager is an example of

142
00:09:07,379 --> 00:09:11,589
a service template and example, let's
say you want to deploy it on AWS.

143
00:09:12,259 --> 00:09:15,689
That's defined as a
cluster template, right?

144
00:09:16,089 --> 00:09:20,119
So this is a very overall
architecture of, Got it.

145
00:09:20,454 --> 00:09:24,154
So now let's go into the demo and
just before we go into the demo.

146
00:09:24,204 --> 00:09:29,784
I want to open the documentation
and just briefly go through this so

147
00:09:29,904 --> 00:09:33,554
if I Look at the installation part,

148
00:09:34,054 --> 00:09:34,654
right?

149
00:09:35,154 --> 00:09:36,784
So we have a help package.

150
00:09:37,004 --> 00:09:38,584
like I said, you need
a management cluster.

151
00:09:38,624 --> 00:09:41,944
It could be kind or it could be running
on any other infrastructure as well.

152
00:09:42,704 --> 00:09:49,104
for simplicity, you can try kind to
run on your laptop or any VM and then

153
00:09:49,104 --> 00:09:50,994
all you got to do is do a helm install.

154
00:09:51,494 --> 00:09:54,214
Of, of the KCM, right?

155
00:09:54,994 --> 00:09:59,054
Once you do this, a bunch of
components are installed, like I said.

156
00:09:59,554 --> 00:10:04,254
The controllers, the Cosmotron
controllers, a bunch of other KCM stuff.

157
00:10:04,754 --> 00:10:11,324
And then we proceed to define
our, cluster templates and then

158
00:10:11,324 --> 00:10:13,234
define the cluster deployments.

159
00:10:13,589 --> 00:10:20,829
So now let's jump into the
terminal where in I already have

160
00:10:21,329 --> 00:10:22,929
a kind cluster, right?

161
00:10:23,499 --> 00:10:28,739
And if I do this, you'll see that
there are all these namespaces.

162
00:10:29,239 --> 00:10:35,759
And if I do this, you'll see all
the parts that are up and running.

163
00:10:36,019 --> 00:10:37,379
So it's exactly the same.

164
00:10:37,499 --> 00:10:40,829
Like I mentioned, there's
an alive kind cluster.

165
00:10:41,254 --> 00:10:45,464
All the controllers and Cosmotron
and other components of KCM, right?

166
00:10:45,964 --> 00:10:47,724
And the next thing, by the way,

167
00:10:48,224 --> 00:10:48,734
that's this.

168
00:10:48,734 --> 00:10:52,084
So kubectl hyphen and KCM system is Ka.

169
00:10:52,834 --> 00:10:58,624
And if I do cluster template
get, here you go, you see all

170
00:10:58,624 --> 00:10:59,869
the different cluster templates.

171
00:11:00,219 --> 00:11:04,169
So these are pre packaged
templates that are available for

172
00:11:04,169 --> 00:11:06,079
you to try based on the clouds.

173
00:11:06,579 --> 00:11:12,519
So we have for AWS EKS and
then AWS and then Azure EKS and

174
00:11:12,519 --> 00:11:15,169
Azure OpenStack and vSphere.

175
00:11:15,669 --> 00:11:22,059
Similarly, you have service templates and
by default, a bunch of service templates

176
00:11:22,059 --> 00:11:23,779
are baked into the management cluster.

177
00:11:24,524 --> 00:11:26,094
when you install it, the other Helm shot.

178
00:11:26,794 --> 00:11:28,994
some of the examples are these, right?

179
00:11:29,284 --> 00:11:32,584
So all you've got to do is specify
this in the cluster deployment.

180
00:11:33,559 --> 00:11:38,299
So just to show you how that looks
let's take a look at a shore.

181
00:11:38,799 --> 00:11:40,829
These are all the files
that you typically need.

182
00:11:40,889 --> 00:11:42,909
not all of them, but I'm
going to show you one by one.

183
00:11:43,349 --> 00:11:44,219
You'll need a secret.

184
00:11:44,259 --> 00:11:47,869
All these instructions are
provided in the docs, by the way.

185
00:11:48,479 --> 00:11:52,169
So the instructions are segregated.

186
00:11:52,629 --> 00:11:56,559
Or cloud provider and it's slightly
different for cloud provider based

187
00:11:56,559 --> 00:12:00,099
on how they expect the credentials
to be set up and all that So example

188
00:12:00,149 --> 00:12:04,689
aws you have these keys for azure
you have something different, right?

189
00:12:05,229 --> 00:12:09,684
you've got to create You've got to
create a service principle based on the

190
00:12:09,684 --> 00:12:14,694
subscription ID and for OpenStack, again,
it's all these variables and similar,

191
00:12:14,964 --> 00:12:17,324
similarly for vSphere as well, right?

192
00:12:17,724 --> 00:12:20,184
essentially, there's a secret.

193
00:12:20,184 --> 00:12:22,524
yml file and then there's
a credential file.

194
00:12:22,854 --> 00:12:29,394
this credential is referenced by
the secret and cluster identity is

195
00:12:29,404 --> 00:12:31,714
also referenced by the credential.

196
00:12:32,384 --> 00:12:35,044
cluster identity is a file.

197
00:12:35,749 --> 00:12:42,439
That is a cr of azure cluster
entity and it references these

198
00:12:42,439 --> 00:12:49,369
stuff now Finally, let's take a
look at the Cluster deployment.

199
00:12:50,019 --> 00:12:52,099
So i'm defined two
cluster deployments here.

200
00:12:52,949 --> 00:13:00,219
One would be a basic cluster with
One control plane and one work node,

201
00:13:00,909 --> 00:13:08,309
right and it uses minimum cpu Okay,
and then there's another control under

202
00:13:08,309 --> 00:13:13,969
the cluster deployment pretty much
a similar configuration but I have

203
00:13:13,969 --> 00:13:17,839
used A gpu enabled cluster, right?

204
00:13:18,339 --> 00:13:20,279
I've applied both these things.

205
00:13:20,489 --> 00:13:26,479
Just to show you the other bit
as well For aws you have all

206
00:13:26,479 --> 00:13:28,689
these things as well, right?

207
00:13:29,119 --> 00:13:32,739
So aws How you have to choose?

208
00:13:33,699 --> 00:13:37,489
Is if to choose the instance
type based on what you want.

209
00:13:37,899 --> 00:13:41,629
So here i've chosen an instance
type Which is a gpu enabled worker

210
00:13:41,629 --> 00:13:47,009
node if you don't want a gp enabled
worker node It's absolutely fine.

211
00:13:47,069 --> 00:13:50,079
All you got to do is select something
like this to three dot small t three

212
00:13:50,079 --> 00:13:54,339
dot medium Whatever is your requirement
and similarly for open stack as

213
00:13:54,339 --> 00:13:57,719
well Now i'm going to show you the
kind of objects that we work with.

214
00:13:57,869 --> 00:14:01,819
So Since i've already
ran this Here you go.

215
00:14:01,869 --> 00:14:06,339
So when you list the cluster deployments,
you'll see something like this, right?

216
00:14:06,829 --> 00:14:14,847
Let's go ahead and list one of them
and Do if no yaml, there you go.

217
00:14:14,847 --> 00:14:19,884
It's as simple as this So this is where
you mentioned the cluster template

218
00:14:20,384 --> 00:14:24,104
and this is where you mentioned the
credential and this is where you

219
00:14:24,104 --> 00:14:27,334
mentioned the configuration that's
specific to you and this is completely

220
00:14:27,334 --> 00:14:32,294
customizable if you look at you can
look up the documentation for all the

221
00:14:32,294 --> 00:14:34,584
various, fields that are available.

222
00:14:35,134 --> 00:14:40,694
and that's that so as to show you another
example, let's look at the open stack one

223
00:14:41,194 --> 00:14:43,174
So there's an identity ref.

224
00:14:43,214 --> 00:14:46,844
There's a specific to open
stack cloud And then there's the

225
00:14:46,874 --> 00:14:50,504
control plane configuration the
work configuration and then the

226
00:14:50,504 --> 00:14:53,344
template so on and so forth, right?

227
00:14:53,644 --> 00:14:55,494
So this is our private cloud.

228
00:14:55,994 --> 00:15:00,209
So some configuration that's related
to that has to be provided All right.

229
00:15:00,709 --> 00:15:03,629
now that we've seen the cluster
deployments, and like I mentioned,

230
00:15:03,629 --> 00:15:04,979
it's all Capi objects, right?

231
00:15:05,459 --> 00:15:11,759
So you can see the Capi object
being created underneath,

232
00:15:12,259 --> 00:15:12,579
right?

233
00:15:12,899 --> 00:15:16,509
So you'll have the AWS cluster,
Azure cluster, OpenStack cluster,

234
00:15:17,159 --> 00:15:24,659
and you will also have the AWS
machines, and Azure machines.

235
00:15:25,159 --> 00:15:29,419
And open stack machines, right?

236
00:15:30,259 --> 00:15:36,229
And finally if I have to do a machines
Then as you can see it's listing all

237
00:15:36,229 --> 00:15:42,409
the machines that are available on the
cluster to access this cluster it's as

238
00:15:42,409 --> 00:15:50,169
simple as getting the secret so Ka like
I said is in the kcm system namespace.

239
00:15:50,669 --> 00:15:55,529
Let's look at all the secrets in the kcm
system There's a bunch of secrets, but

240
00:15:55,529 --> 00:16:00,969
what we're interested in is the secret
that has kube config appended to it.

241
00:16:01,409 --> 00:16:06,719
So for every cloud, you have a kube
config and I've exported them all.

242
00:16:07,269 --> 00:16:07,819
I think.

243
00:16:08,319 --> 00:16:12,509
Let's also export this and
let's also export this.

244
00:16:13,009 --> 00:16:16,279
Now, if I go here and do this.

245
00:16:16,779 --> 00:16:19,819
Now I'm in the Azure context.

246
00:16:20,549 --> 00:16:21,469
I do this.

247
00:16:21,729 --> 00:16:22,219
There you go.

248
00:16:22,719 --> 00:16:26,829
I have a single worker node
and a single control plane node

249
00:16:27,329 --> 00:16:29,929
and it's up and running, right?

250
00:16:30,769 --> 00:16:33,719
Similarly for AWS.

251
00:16:34,219 --> 00:16:35,189
Alright, there you go.

252
00:16:35,689 --> 00:16:38,499
Last but not the least
for OpenStack as well.

253
00:16:38,999 --> 00:16:41,469
All right, so you have
all these notes, right?

254
00:16:41,969 --> 00:16:45,679
So you know, it's as simple as
that and on the cloud You can see

255
00:16:45,699 --> 00:16:51,187
that these machines are provisioned
here Similarly for a short as well.

256
00:16:51,187 --> 00:16:55,022
So as you can see this one is
using the standard one and this

257
00:16:55,022 --> 00:16:59,245
one is using instance type that
has gpu support as well, right?

258
00:16:59,245 --> 00:17:05,295
So that's running the tesla t4
nvidia chip Then aws has these So

259
00:17:05,295 --> 00:17:08,595
essentially, it's as simple as this,
end of the day, what you need to do

260
00:17:08,625 --> 00:17:13,405
is define your cluster deployment and
specify the configuration and Gordon

261
00:17:13,435 --> 00:17:15,595
takes care of it end to end, right?

262
00:17:16,145 --> 00:17:19,165
yeah, you have the KCM repository.

263
00:17:19,175 --> 00:17:20,895
It's completely open source.

264
00:17:21,515 --> 00:17:22,735
You can go take a look.

265
00:17:22,865 --> 00:17:25,085
Contributions are absolutely welcome.

266
00:17:25,185 --> 00:17:26,495
We have a slack channel as well.

267
00:17:27,275 --> 00:17:28,275
It's updated here.

268
00:17:29,025 --> 00:17:30,095
yeah, that's pretty much it.

269
00:17:30,345 --> 00:17:30,685
Thank you.

270
00:17:30,725 --> 00:17:31,485
Thank you for listening.

271
00:17:31,565 --> 00:17:31,925
Bye bye.

