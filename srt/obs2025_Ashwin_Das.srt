1
00:00:00,990 --> 00:00:05,640
Hello everyone and welcome
to Con 42 Observability 2025.

2
00:00:06,010 --> 00:00:09,190
My name is Ashwin and I'm
joined by my colleague Devan.

3
00:00:09,879 --> 00:00:13,329
I'm a senior engineering manager
at Adobe and Devan is a product

4
00:00:13,329 --> 00:00:15,220
manager in our payments organization.

5
00:00:15,670 --> 00:00:18,880
Together we have spent years
building and scaling, high volume

6
00:00:19,090 --> 00:00:20,680
commerce and payments platform.

7
00:00:21,279 --> 00:00:24,099
Today's stock is titled
beyond the Dashboard Building

8
00:00:24,099 --> 00:00:27,519
End-to-End Observability for
Commerce and Payment Systems.

9
00:00:28,130 --> 00:00:29,449
I want to start with a question.

10
00:00:29,719 --> 00:00:34,580
How many of you have experienced that s
sinking feeling when your revenue drops,

11
00:00:34,730 --> 00:00:36,620
but all your dashboards show green?

12
00:00:37,470 --> 00:00:41,129
Your servers are up, your APIs
are responding, but somehow

13
00:00:41,160 --> 00:00:42,660
there is a loss in your business.

14
00:00:43,230 --> 00:00:45,860
That's exactly the problem
we are here to solve today.

15
00:00:46,160 --> 00:00:50,370
During the course of this talk, we'll
talk to you on a journey from reactive

16
00:00:50,370 --> 00:00:54,450
monitoring to proactive business
observability, sharing real world

17
00:00:54,450 --> 00:00:58,660
examples, practical frameworks and
lessons learned from managing commerce

18
00:00:58,660 --> 00:01:00,330
and payments platforms at Adobe.

19
00:01:00,930 --> 00:01:01,500
Let's dive in.

20
00:01:02,000 --> 00:01:04,640
Let me start by putting this
challenge in a perspective with

21
00:01:04,640 --> 00:01:06,080
some numbers that might shock you.

22
00:01:06,440 --> 00:01:08,330
First, let's talk about downtime costs.

23
00:01:08,330 --> 00:01:12,890
Amazon loses $220,000 per
minute during downtime.

24
00:01:12,890 --> 00:01:14,780
It's in, its, that's not a typo.

25
00:01:15,050 --> 00:01:17,900
$220,000 every single minute.

26
00:01:17,900 --> 00:01:21,080
The systems are down, but
it's not just about downtime.

27
00:01:21,380 --> 00:01:24,850
During peak traffic periods
numbers get even more staggering.

28
00:01:25,510 --> 00:01:28,060
Shopify processes around 4.6 million.

29
00:01:28,385 --> 00:01:31,295
In orders per minute during
Black Friday peak traffic.

30
00:01:31,925 --> 00:01:34,055
Imagine the pressure on
the engineering teams.

31
00:01:34,445 --> 00:01:38,315
Every second of degraded
performance could cost millions.

32
00:01:39,195 --> 00:01:42,045
And here's perhaps the
most sobering statistics.

33
00:01:42,285 --> 00:01:48,555
62% of customers abandoned their purchase
after just one failed payment attempt.

34
00:01:49,065 --> 00:01:51,435
They don't retry, they don't call support.

35
00:01:51,735 --> 00:01:54,900
They just leave, and many
of them never come back.

36
00:01:55,400 --> 00:01:59,310
This brings us to the
key insight in commerce.

37
00:01:59,370 --> 00:02:03,060
Observability isn't just about
uptime, it's about survival.

38
00:02:03,420 --> 00:02:06,510
When your payment systems fail,
you're not just dealing with an

39
00:02:06,510 --> 00:02:10,320
engineering problem, you're dealing
with an existential business threat.

40
00:02:11,235 --> 00:02:13,365
These aren't theoretical numbers.

41
00:02:13,365 --> 00:02:15,855
Every minute your systems are degraded.

42
00:02:15,915 --> 00:02:18,765
Every failure failed
payment that goes unnoticed.

43
00:02:19,125 --> 00:02:22,695
Every customer who hits an error,
that's direct revenue loss.

44
00:02:23,175 --> 00:02:27,195
And unlike other types of applications
in commerce, there's no such

45
00:02:27,195 --> 00:02:29,655
thing as acceptable downtime.

46
00:02:30,155 --> 00:02:34,235
Before we dive deep, let me quickly
establish our credentials at Adobe

47
00:02:34,235 --> 00:02:37,925
Commerce, we are scaling platforms that
handle millions of daily transactions.

48
00:02:38,205 --> 00:02:40,755
We have designed end-to-end
observability architecture for

49
00:02:40,915 --> 00:02:45,875
complex commerce platform, and most
importantly, we have survived the

50
00:02:45,875 --> 00:02:48,230
real world battle scars Black Friday.

51
00:02:48,505 --> 00:02:49,375
Cyber mandates.

52
00:02:50,075 --> 00:02:52,615
Meeting payment mandates like three Ds.

53
00:02:52,675 --> 00:02:58,325
Many geo-specific mandates where every
second counts and failure isn't an option.

54
00:02:59,315 --> 00:03:02,195
We are here to share what we
have learned in the trenches.

55
00:03:02,695 --> 00:03:06,055
Now let's talk about the fundamental
shift we need to make in how

56
00:03:06,055 --> 00:03:07,225
we think about observability.

57
00:03:07,725 --> 00:03:11,775
Traditional monitoring focuses
on basic service health checks.

58
00:03:12,460 --> 00:03:15,940
It answers simple uptime
questions like is my service app.

59
00:03:16,630 --> 00:03:21,740
It looks at the CPU and memory usage
response time metrics and HTP Error

60
00:03:21,860 --> 00:03:24,440
rates like four XX codes, five x exports.

61
00:03:25,040 --> 00:03:29,180
This is the foundation, but in
commerce, it's not nearly enough.

62
00:03:29,750 --> 00:03:32,995
Commerce Observability takes a
completely different approach.

63
00:03:33,265 --> 00:03:36,445
It tracks the complete customer
journey and business outcomes.

64
00:03:36,625 --> 00:03:40,165
It monitors the end-to-end experience
from customer's perspective.

65
00:03:40,525 --> 00:03:44,695
Instead of asking, is my service up
commerce observability, ask the question

66
00:03:44,935 --> 00:03:47,095
that actually matters to your business.

67
00:03:47,335 --> 00:03:51,355
Can customers complete purchase
because your checkout API might be

68
00:03:51,355 --> 00:03:55,375
responding with 200 status codes,
but if there's a bug in the payment

69
00:03:55,375 --> 00:03:57,295
flow, customers still can't buy.

70
00:03:58,045 --> 00:04:01,255
Is the fraud detection,
blocking good customers?

71
00:04:01,885 --> 00:04:05,815
Your fraud system might be working
perfectly from a technical standpoint

72
00:04:06,185 --> 00:04:09,485
but if it's too aggressive, you
are losing legitimate revenue.

73
00:04:10,445 --> 00:04:13,055
What's the actual customer experience?

74
00:04:13,325 --> 00:04:16,835
Maybe your API is so fast,
but the front end is broken.

75
00:04:17,135 --> 00:04:19,025
Our payment forms aren't loading.

76
00:04:19,400 --> 00:04:20,780
Customers are frustrated.

77
00:04:21,380 --> 00:04:24,080
Are payment failures
causing involuntary churn?

78
00:04:24,360 --> 00:04:27,570
This is particularly concerning
for a subscription business.

79
00:04:27,810 --> 00:04:32,450
Your billing system might appear
healthy, but customers could be churning

80
00:04:32,809 --> 00:04:34,489
silently due to failed payments.

81
00:04:34,669 --> 00:04:36,469
We'll talk about this
a little later as well.

82
00:04:37,089 --> 00:04:39,549
And here's one that's often overlooked.

83
00:04:39,939 --> 00:04:42,639
Are customers able to edit
their wallets correctly?

84
00:04:43,159 --> 00:04:43,879
Sometimes.

85
00:04:44,124 --> 00:04:48,024
Something as simple as updating
payment information can become

86
00:04:48,084 --> 00:04:50,094
a revenue killer if it's broken.

87
00:04:50,594 --> 00:04:53,594
Now, let me show you what full
funnel observability actually

88
00:04:53,594 --> 00:04:54,764
looks like in practice.

89
00:04:55,424 --> 00:04:58,454
This is the complete customer
transaction journey, and we need

90
00:04:58,874 --> 00:05:00,434
observability at every single step.

91
00:05:01,244 --> 00:05:04,194
Let let's walk through the journey
from a customer's perspective.

92
00:05:04,254 --> 00:05:06,044
It starts with product discovery.

93
00:05:06,464 --> 00:05:09,284
When a customer lands on your
site and starts browsing.

94
00:05:09,784 --> 00:05:13,264
Here we are monitoring page, load
times, and search performance.

95
00:05:13,504 --> 00:05:17,314
If your product pages are slow
or search isn't working, we are,

96
00:05:17,314 --> 00:05:20,944
you are losing customers before
they even find what they want.

97
00:05:21,364 --> 00:05:22,684
Next is car tradition.

98
00:05:23,074 --> 00:05:25,979
The customer decides they want
something and adds it to the cart.

99
00:05:26,749 --> 00:05:30,919
We monitor API response time here
because if the add to card button

100
00:05:31,339 --> 00:05:34,819
doesn't respond quickly, customer
will assume it's broken and leave.

101
00:05:35,539 --> 00:05:37,519
Then we hit the checkout process.

102
00:05:38,179 --> 00:05:41,570
Here we are monitoring form validation,
and payment method selection.

103
00:05:42,289 --> 00:05:45,799
Every friction point here
directly impacts conversion.

104
00:05:46,130 --> 00:05:51,080
If customers can't easily select their
payment methods, or if form validation

105
00:05:51,080 --> 00:05:53,299
is confusing, they'll abandon.

106
00:05:53,799 --> 00:05:57,179
Authorization and fraud is
where the complexity increases.

107
00:05:57,689 --> 00:06:00,809
Here there are many data points
that will have to be monitored.

108
00:06:01,269 --> 00:06:05,109
We are monitoring risk engine
decisions and payment approval rates.

109
00:06:05,479 --> 00:06:10,909
Your fraud detection needs to be smart
enough to block bad actors while keeping

110
00:06:10,909 --> 00:06:12,454
it smooth for the good customers.

111
00:06:12,789 --> 00:06:16,390
And the balance here directly
impacts your revenue.

112
00:06:17,169 --> 00:06:20,319
Finally, order fulfillment,
confirmation and order processing

113
00:06:20,530 --> 00:06:22,210
even after payment succeeds.

114
00:06:22,270 --> 00:06:26,349
If customers don't get proper
confirmation or if there are issues

115
00:06:26,349 --> 00:06:30,460
with auto processing, you'll get
chargebacks and customer support tickets.

116
00:06:31,414 --> 00:06:36,784
The key insight is that each touch point
represents critical revenue impact.

117
00:06:37,144 --> 00:06:40,774
A failure at any step doesn't
just affect that step.

118
00:06:41,044 --> 00:06:43,744
It affects your entire conversion funnel.

119
00:06:44,404 --> 00:06:47,794
This is why we need observability
across the complete journey, not

120
00:06:47,794 --> 00:06:50,014
just at individual service endpoints.

121
00:06:50,514 --> 00:06:54,294
Now let's look at this from a subscription
business perspective, because the

122
00:06:54,294 --> 00:06:57,294
observability challenges are quite
different when you're dealing with

123
00:06:57,294 --> 00:06:59,214
recurring revenue and subscriptions.

124
00:06:59,764 --> 00:07:02,824
There are different data points and
metrics that need to be observed.

125
00:07:03,264 --> 00:07:06,779
This is a typical subscription
lifecycle journey, and every

126
00:07:06,779 --> 00:07:10,674
step is a potential failure point
that impacts ERR and retention.

127
00:07:11,254 --> 00:07:13,084
Unlike one time transactions.

128
00:07:13,399 --> 00:07:16,519
Subscription businesses have to
worry about the entire customer

129
00:07:16,639 --> 00:07:18,379
journey, not just a single purchase.

130
00:07:18,949 --> 00:07:20,719
Let's walk around this cycle.

131
00:07:21,209 --> 00:07:23,139
It starts with trial signup.

132
00:07:23,409 --> 00:07:27,169
We are monitoring conversion metrics
and onboarding friction points.

133
00:07:27,169 --> 00:07:31,534
I. If users can't easily sign up
for trials or if the onboarding

134
00:07:31,534 --> 00:07:35,554
process is confusing, you are losing
potential subscribers before they

135
00:07:35,554 --> 00:07:37,474
even experience your product value.

136
00:07:38,214 --> 00:07:40,614
Moving to free to paid
conversion, this is critical.

137
00:07:41,114 --> 00:07:45,344
We monitor payment, set up success
rates and method preferences.

138
00:07:46,214 --> 00:07:50,264
Many potential customers drop off
here, not because they don't want to

139
00:07:50,264 --> 00:07:55,154
pay, but because the payment method
or the payment setup process is

140
00:07:55,154 --> 00:07:59,234
too complicated or doesn't support
their preferred payment method.

141
00:08:00,194 --> 00:08:03,104
Here it is critical to measure
payment method usage rates.

142
00:08:03,464 --> 00:08:08,114
And also when a new payment methods,
for example, cloud Now or LPMs

143
00:08:08,114 --> 00:08:09,584
are launched, how they're adopted.

144
00:08:10,274 --> 00:08:12,314
Then we have the billing cycle.

145
00:08:12,614 --> 00:08:15,884
This is where many subscription
businesses get caught off guard.

146
00:08:16,324 --> 00:08:19,564
We monitor recurring billing
events and schedule accuracy.

147
00:08:20,014 --> 00:08:23,674
A missed billing event, for
example, or an incorrect scheduling

148
00:08:23,944 --> 00:08:25,654
can cause revenue delays.

149
00:08:25,699 --> 00:08:27,049
Our customer confusion.

150
00:08:27,479 --> 00:08:31,919
For example, if our billing system
is not able to charge the user for a

151
00:08:31,919 --> 00:08:36,869
month entitled internet system might
remove access after a grace period,

152
00:08:36,929 --> 00:08:38,969
even though the user is at no fault.

153
00:08:39,689 --> 00:08:43,919
Payment processing is where the technical
complexity really starts showing up.

154
00:08:44,199 --> 00:08:47,769
We are monitoring multiple different
gateway performances and authorization

155
00:08:47,769 --> 00:08:50,050
rates in subscription payment failures.

156
00:08:50,129 --> 00:08:53,879
Particularly damaging because
they can cause invol reach return.

157
00:08:54,329 --> 00:08:58,739
Customers who want to stay can't
because their payment failed.

158
00:08:59,609 --> 00:08:59,969
Renewal.

159
00:09:00,179 --> 00:09:03,374
The next step here is the renewal
step, which is at the moment of

160
00:09:03,374 --> 00:09:06,554
truth for retention rates and invol
reach, return, and prevention.

161
00:09:06,944 --> 00:09:10,034
This is where silent
failures can be devastating.

162
00:09:10,644 --> 00:09:14,274
But this is also an opportunity
for us to ride size subscriptions.

163
00:09:14,614 --> 00:09:19,425
Maybe a customer needs to be downgraded
so that their their plan is right

164
00:09:19,454 --> 00:09:22,094
sized rather than churn out completely.

165
00:09:22,545 --> 00:09:26,775
So without proper observability into
their usage patterns and payment behavior.

166
00:09:27,510 --> 00:09:29,609
We will miss these
retention opportunities.

167
00:09:30,119 --> 00:09:31,949
Finally, usage and expansion.

168
00:09:32,339 --> 00:09:36,329
We monitor feature adoption and
upgrade revenue opportunities here.

169
00:09:37,129 --> 00:09:42,270
Understanding how customers use our
product helps as identify expansion

170
00:09:42,270 --> 00:09:44,100
opportunities and even preventing churn.

171
00:09:44,550 --> 00:09:45,990
The key insight here is that.

172
00:09:46,334 --> 00:09:50,265
Subscription observability
requires monitoring through the

173
00:09:50,265 --> 00:09:54,555
entire customer lifetime, not
just individual transactions.

174
00:09:54,944 --> 00:09:59,025
Each step in the cycle compounds
over time, making the impact of

175
00:09:59,025 --> 00:10:02,930
failures much more significant than
in traditional e-commerce business.

176
00:10:03,430 --> 00:10:07,419
Now let's talk about how the traditional
three pillars of observability

177
00:10:07,640 --> 00:10:12,010
that's metrics, logs, and traces
will look when you're dealing with

178
00:10:12,040 --> 00:10:13,810
commerce and subscription businesses.

179
00:10:14,560 --> 00:10:16,180
First pillar, which is metrics.

180
00:10:16,629 --> 00:10:20,999
So beyond system health instead of just
tracking CPU and memory usage, we need to

181
00:10:20,999 --> 00:10:23,339
track revenue flow and business outcomes.

182
00:10:23,615 --> 00:10:26,695
We will have to focus on
customer centric measurements.

183
00:10:27,205 --> 00:10:30,895
This means revenue flow metrics
like a RR conversion rates.

184
00:10:31,165 --> 00:10:34,915
These tell you about your business
health, not just your system.

185
00:10:34,915 --> 00:10:40,650
Health payment success rate by processors
because like a. Nine, 9% success rate with

186
00:10:40,650 --> 00:10:43,650
one processor might be 85 with another.

187
00:10:44,260 --> 00:10:46,660
And that difference is
millions in revenue.

188
00:10:47,310 --> 00:10:52,050
And then customer lifecycle metrics
like churn and LTV, these help you

189
00:10:52,050 --> 00:10:55,920
understand the long-term impact of
the technical decisions that you make.

190
00:10:56,420 --> 00:10:58,370
And time to value percentage.

191
00:10:58,370 --> 00:11:02,160
How long does it take customers
to get value from your

192
00:11:02,160 --> 00:11:03,780
product after they sign up?

193
00:11:04,280 --> 00:11:04,580
Okay.

194
00:11:04,640 --> 00:11:07,400
Second pillar logs with business context.

195
00:11:07,925 --> 00:11:09,995
Traditional logs tell you what happened.

196
00:11:09,995 --> 00:11:14,495
Technically, commerce logs need
to capture decision reasoning

197
00:11:14,585 --> 00:11:16,385
and customer's journey context.

198
00:11:16,685 --> 00:11:20,405
They need to link technical
events to business impact.

199
00:11:20,885 --> 00:11:25,535
This includes payment processor
responses, not just payment failed, but

200
00:11:25,535 --> 00:11:30,595
why it failed and what that means for
specific customer journey breadcrumbs.

201
00:11:30,645 --> 00:11:33,715
That is basically understanding
the full path a customer took

202
00:11:33,775 --> 00:11:35,335
before they encountered an issue.

203
00:11:35,980 --> 00:11:37,990
Then business decision reasoning.

204
00:11:38,290 --> 00:11:41,080
Why did the fraud engine
block this transaction?

205
00:11:41,470 --> 00:11:46,600
What data points led to the decision and
the revenue weighted error classification?

206
00:11:47,200 --> 00:11:48,790
Not all errors are equal.

207
00:11:48,910 --> 00:11:51,130
Some cost you more money than others.

208
00:11:51,520 --> 00:11:53,140
Let's look at the third pillar.

209
00:11:53,700 --> 00:11:57,430
This traces across, revenue
systems we need to follow.

210
00:11:57,430 --> 00:12:00,670
Complete transaction flows across
all systems that affect revenue.

211
00:12:01,390 --> 00:12:05,240
This isn't just about following a
request through your microservices.

212
00:12:05,520 --> 00:12:09,120
It's about mapping dependencies
that affect your business.

213
00:12:09,930 --> 00:12:12,780
This means end-to-end transaction
flows from customers, click.

214
00:12:13,280 --> 00:12:16,660
To the money in the bank
payment gateway dependencies.

215
00:12:16,660 --> 00:12:19,300
Understanding how third party
services impact your revenue

216
00:12:19,300 --> 00:12:20,470
is also quite important.

217
00:12:20,920 --> 00:12:22,180
Third party services.

218
00:12:22,260 --> 00:12:26,670
Lets say when add in or PayPal
has issues, how does that affect

219
00:12:26,670 --> 00:12:28,170
your business and your customers?

220
00:12:28,670 --> 00:12:32,280
And now talking about subscription
lifecycle traffic tracking, we

221
00:12:32,280 --> 00:12:35,280
will have to follow the customer's
entire journey, like we looked

222
00:12:35,310 --> 00:12:39,680
looked at it a few slides up before
from trial to renewal to expansion.

223
00:12:40,100 --> 00:12:43,850
The key insight is that Commerce
Observability requires all three

224
00:12:43,880 --> 00:12:48,410
pillars to work together to give you a
complete picture of both your technical

225
00:12:48,410 --> 00:12:50,300
systems and your business outcomes.

226
00:12:50,800 --> 00:12:55,329
So all the slides about bring us to
this fundamental mind shift, moving

227
00:12:55,329 --> 00:13:00,819
from reactive monitoring to proactive
observability, reactive monitoring

228
00:13:00,819 --> 00:13:02,619
wage for problems to surface.

229
00:13:02,989 --> 00:13:07,560
You'll alert when services down,
customer complaints have gone up

230
00:13:07,930 --> 00:13:09,555
and then revenue is already lost.

231
00:13:10,220 --> 00:13:14,810
But proactive observability detects
patterns before they impact customers.

232
00:13:15,140 --> 00:13:20,170
You can detect degradation patterns
predict failure cascades implement

233
00:13:20,170 --> 00:13:23,530
automated remediation and operate
in revenue protection mode.

234
00:13:23,860 --> 00:13:24,610
Here's the difference.

235
00:13:24,640 --> 00:13:29,000
Instead of waiting for customers
to complain about failed payments a

236
00:13:29,000 --> 00:13:34,010
proactive observability can detect
a 2% increase in payment failures.

237
00:13:34,550 --> 00:13:38,450
And this can predict that this
could become a 20% involuntary term.

238
00:13:38,910 --> 00:13:44,580
This will give us time to fix it before it
starts impacting our business In commerce,

239
00:13:45,060 --> 00:13:47,370
reactive means revenues already lost.

240
00:13:47,670 --> 00:13:50,100
Proactive means we are
protecting the revenue.

241
00:13:50,600 --> 00:13:52,420
To drive this further home.

242
00:13:52,720 --> 00:13:57,960
Let's look at a real world example of why
this proactive mindset is so critical.

243
00:13:58,630 --> 00:14:02,410
This is about what we call a
silent killer of subscription

244
00:14:02,410 --> 00:14:03,940
business, involuntary churn.

245
00:14:04,855 --> 00:14:06,055
Let's start with the problem.

246
00:14:06,465 --> 00:14:11,235
20 to 40% of total churn in a
subscription business is involuntary.

247
00:14:11,815 --> 00:14:17,275
These are failed payments that silently
destroy subscriber basis without warning.

248
00:14:17,635 --> 00:14:20,020
Think about that nearly half
of your customer losses.

249
00:14:20,475 --> 00:14:24,075
Might not be because of customers
wanting to leave, but because

250
00:14:24,075 --> 00:14:25,575
of payment system failures.

251
00:14:26,175 --> 00:14:31,205
The renewal failure rate is at a
staggering five to 18% of subscriptions

252
00:14:31,565 --> 00:14:33,395
failing at each billing cycle.

253
00:14:33,765 --> 00:14:39,145
That means one in eight of your customers
might not renew successfully, not

254
00:14:39,145 --> 00:14:42,835
because they don't want your product, but
because their payment didn't go through.

255
00:14:43,405 --> 00:14:45,475
And now let's look at this impact.

256
00:14:45,800 --> 00:14:46,760
On a global scale.

257
00:14:46,970 --> 00:14:52,460
So this would be around 118 billion lost
globally in 2020 due to payment failures.

258
00:14:53,180 --> 00:14:57,440
This creates massive revenue
hemorrhage across entire industries.

259
00:14:57,710 --> 00:15:00,470
That's not just a technical
problem, that's an economic crisis.

260
00:15:00,870 --> 00:15:02,370
Here's the observability challenge.

261
00:15:02,370 --> 00:15:05,490
Traditional monitoring
creates a blind spot.

262
00:15:05,790 --> 00:15:09,510
Your systems will show healthy
when customers quietly, oil

263
00:15:09,540 --> 00:15:11,070
customers will quietly disappear.

264
00:15:11,400 --> 00:15:13,410
Your billing systems report success.

265
00:15:13,680 --> 00:15:16,500
Your APIs are responding, your
databases are performing well,

266
00:15:16,770 --> 00:15:18,570
but customers are churning silent.

267
00:15:19,200 --> 00:15:24,325
The most critical issue is zero time
visibility zero real time visibility.

268
00:15:24,825 --> 00:15:29,505
Most businesses discover churn
after customers have already gone.

269
00:15:29,925 --> 00:15:33,795
By the time you realize there's a
problem, you've lost not just revenue,

270
00:15:33,915 --> 00:15:37,665
but customer relationships that
took months or even years to build.

271
00:15:38,235 --> 00:15:41,760
This is a perfect example of
why traditional monitoring

272
00:15:41,760 --> 00:15:42,920
will fail in commerce.

273
00:15:43,425 --> 00:15:47,625
Our subscription businesses, all
your technical metrics can be green.

274
00:15:47,865 --> 00:15:49,665
While your business is bleeding money.

275
00:15:50,055 --> 00:15:53,955
You need observability that focuses on
business outcome, not just system health.

276
00:15:54,455 --> 00:15:57,555
This is why we need a proactive
approach like we discussed earlier

277
00:15:58,005 --> 00:16:03,925
that can detect payment issues sooner
so that more customers can be saved

278
00:16:04,285 --> 00:16:06,325
and more revenue can be protected.

279
00:16:06,825 --> 00:16:09,825
This brings us to one of the
most challenging aspects of

280
00:16:09,825 --> 00:16:13,755
commerce observability, which is
dealing with unknown unknowns.

281
00:16:14,385 --> 00:16:17,535
These are problems you
don't even know to look for.

282
00:16:18,435 --> 00:16:21,255
Let me contrast that
with true two approaches.

283
00:16:21,765 --> 00:16:23,685
The traditional approach is reactive.

284
00:16:23,765 --> 00:16:30,705
Teams define known failure modes upfront
and creates alerts for expected problems.

285
00:16:31,275 --> 00:16:33,915
This relies on reactive
monitoring while alert.

286
00:16:33,925 --> 00:16:39,925
Triggers after impact, it'll contain blind
spots for unexpected or novel issues.

287
00:16:40,555 --> 00:16:45,075
Investigations are typically
manual and slow, and it focuses on

288
00:16:45,135 --> 00:16:46,605
infrastructure or service health.

289
00:16:47,325 --> 00:16:50,175
Traditional monitoring will
answer questions like, are

290
00:16:50,175 --> 00:16:51,585
all services returning 200?

291
00:16:51,585 --> 00:16:52,035
Okay?

292
00:16:52,035 --> 00:16:53,715
Is the memory usage within limit?

293
00:16:54,165 --> 00:16:55,005
But here's the problem.

294
00:16:55,335 --> 00:16:59,325
This approach misses the business critical
issues that you never thought to monitor.

295
00:16:59,825 --> 00:17:03,135
Unknown detection takes a
completely different approach.

296
00:17:03,465 --> 00:17:07,725
Proactive intelligent systems,
surface insights from patterns

297
00:17:07,725 --> 00:17:09,045
you didn't know to look for.

298
00:17:09,465 --> 00:17:13,005
This includes anomaly detection on
work, business, and system metrics.

299
00:17:13,005 --> 00:17:16,785
Not just CPU spikes, but unexpected
drop in conversion rates.

300
00:17:17,655 --> 00:17:19,785
Or unusual payment patterns.

301
00:17:20,235 --> 00:17:25,635
For example, three Ds in France may
be failing for certain card types.

302
00:17:26,295 --> 00:17:29,385
Your system for still healthy,
as this might be a very small dip

303
00:17:29,385 --> 00:17:32,055
for a small subset of your users.

304
00:17:32,575 --> 00:17:38,335
But in the overall revenue scheme, this is
still a revenue loss, which goes unnoticed

305
00:17:38,695 --> 00:17:42,735
and could have been easily avoided
If you are looking for these unknown.

306
00:17:43,235 --> 00:17:47,515
Cross system correlation of logs, events
and telemetries will help you understand

307
00:17:47,545 --> 00:17:53,755
how issues in one system might be causing
problems in another behavioral pattern

308
00:17:53,755 --> 00:17:58,075
recognition to flag outliers like say,
detecting when customer behavior changes

309
00:17:58,105 --> 00:18:02,665
in ways that might indicate that there
may be some problem, for which reason the

310
00:18:02,665 --> 00:18:04,375
customer are changing their behaviors.

311
00:18:04,875 --> 00:18:08,655
And we should also look at how to
automate root cause analysis with

312
00:18:08,655 --> 00:18:13,095
investigating while investigating
workflows system that can trace problems

313
00:18:13,095 --> 00:18:15,195
back to their source automatically.

314
00:18:16,125 --> 00:18:20,515
Instead of asking our services
healthy, unknown detection asks

315
00:18:20,695 --> 00:18:22,075
why is the conversion dropping?

316
00:18:22,075 --> 00:18:23,815
What things that we didn't expect?

317
00:18:24,265 --> 00:18:25,345
The key insight.

318
00:18:25,845 --> 00:18:27,045
Is captured in this question.

319
00:18:27,255 --> 00:18:30,855
What weird thing is happening
that we didn't think to monitor?

320
00:18:31,485 --> 00:18:35,805
In commerce, the most expensive problems
are often the ones you never saw coming.

321
00:18:36,165 --> 00:18:39,315
A payment processor starts
declining certain types of cards.

322
00:18:39,625 --> 00:18:42,345
Fraud detection rule, suddenly flags.

323
00:18:42,405 --> 00:18:47,165
Let's estimate customers a front frontend
checkout update breaks to checkout

324
00:18:47,165 --> 00:18:49,925
workflow in a specific browser or.

325
00:18:50,270 --> 00:18:52,160
A specific in-app experience.

326
00:18:52,730 --> 00:18:56,480
These are issues that can cost millions
before you even realize they exist.

327
00:18:56,870 --> 00:19:00,590
This is why modern commerce
observability needs to be intelligent

328
00:19:00,650 --> 00:19:02,390
and proactive, not just reactive.

329
00:19:02,890 --> 00:19:05,890
Now let's get practical with
lessons from the trenches.

330
00:19:06,460 --> 00:19:07,450
What you should do.

331
00:19:07,660 --> 00:19:10,810
Start with the subscriber's
journey, not system architecture.

332
00:19:11,570 --> 00:19:15,110
Instrument for ERR outcomes,
not just technical health.

333
00:19:15,440 --> 00:19:19,550
Create runbooks with a churn impact
context so your team knows about

334
00:19:19,550 --> 00:19:21,080
the business Impact immediately.

335
00:19:21,570 --> 00:19:25,680
And test your observability during
billing cycles when you need it the most.

336
00:19:26,220 --> 00:19:27,180
What not to do.

337
00:19:27,270 --> 00:19:28,590
Don't alert on everything.

338
00:19:28,620 --> 00:19:30,540
Focus on revenue and churn impact.

339
00:19:30,910 --> 00:19:33,250
Don't ignore payment
processor dependencies or

340
00:19:33,250 --> 00:19:34,540
other external dependencies.

341
00:19:34,990 --> 00:19:40,590
Don't forget about in-app mobile
experience metrics and don't neglect

342
00:19:40,590 --> 00:19:42,390
customer success team communication.

343
00:19:42,390 --> 00:19:44,280
They're often the first
to hear about issues.

344
00:19:44,700 --> 00:19:46,800
The key insight here
is effective commerce.

345
00:19:47,340 --> 00:19:51,845
Observability is as much about process
and communication as it is about.

346
00:19:52,105 --> 00:19:55,855
Tech technology and the stack that
we use one of the biggest challenges

347
00:19:55,855 --> 00:20:00,625
in commerce, observability isn't
technical, it's also organizational.

348
00:20:01,105 --> 00:20:02,665
Getting everyone on the same page.

349
00:20:03,165 --> 00:20:06,195
The challenge is that different
teams have different priorities.

350
00:20:06,405 --> 00:20:11,415
Engineering most typically always
focuses on system uptime and performance.

351
00:20:11,505 --> 00:20:13,785
Product cares about feature
adoption and retention.

352
00:20:14,145 --> 00:20:17,510
BU and finance organizations
care about ERR churn.

353
00:20:18,090 --> 00:20:19,020
And churn reduction.

354
00:20:19,290 --> 00:20:22,350
Customer success team wants
seamless billing experience

355
00:20:22,350 --> 00:20:23,640
at a very low call volume.

356
00:20:24,540 --> 00:20:28,140
The solution here is an alignment
around shared business outcomes.

357
00:20:28,440 --> 00:20:32,280
We have to create shared dashboards
with the error context so everyone

358
00:20:32,280 --> 00:20:33,840
sees the same business metrics.

359
00:20:34,240 --> 00:20:37,960
You have to implement cross-functional
incident response for payment

360
00:20:37,960 --> 00:20:41,720
issues, not and treat, not just
treat them as engineering problems.

361
00:20:42,230 --> 00:20:46,760
We should use revenue impact scoring for
all alerts so teams understand business

362
00:20:46,760 --> 00:20:52,310
priority and hold regular business
reviews of subscription health metrics

363
00:20:52,610 --> 00:20:57,200
when everyone understands how their work
connects to revenue and customer success.

364
00:20:57,605 --> 00:21:00,785
Observability becomes a
shared responsibility, not

365
00:21:00,785 --> 00:21:02,195
just an engineering tool.

366
00:21:02,585 --> 00:21:07,945
And speaking of that product perspective
and a non-engineering perspective let me

367
00:21:07,945 --> 00:21:12,295
now hand it over to my colleague Dev Wang,
who will share insights on observability

368
00:21:12,445 --> 00:21:14,335
from a product manager's perspective.

369
00:21:14,695 --> 00:21:15,445
Take it over everyone.

370
00:21:15,945 --> 00:21:16,870
Thanks Ashwin.

371
00:21:16,960 --> 00:21:17,590
Hi everyone.

372
00:21:17,690 --> 00:21:18,470
I'm Dev Go.

373
00:21:18,680 --> 00:21:22,685
I'm a payments product manager at Adobe
leading various payment optimization.

374
00:21:23,185 --> 00:21:27,445
Now that we have seen how engineering
teams approach observability, let's

375
00:21:27,445 --> 00:21:31,645
actually zoom out and ask why should
product managers care about this as well?

376
00:21:32,145 --> 00:21:36,795
After all, when something breaks, we
don't just ask, was the system up?

377
00:21:37,475 --> 00:21:42,715
We ask a few more important questions as
well did the users drop off at checkout?

378
00:21:43,105 --> 00:21:47,155
Did failed payments silently kill
our renewal rate, or did our new

379
00:21:47,155 --> 00:21:51,775
features really increase retention,
or did it just introduce new friction?

380
00:21:52,765 --> 00:21:57,595
These are very important and core
product questions and observability if

381
00:21:57,595 --> 00:22:01,915
done right, gives us the answers before
the revenue is lost, before the churn

382
00:22:01,915 --> 00:22:03,985
report lands in at the end of the quote.

383
00:22:04,485 --> 00:22:09,195
Product managers are increasingly
being held accountable, not just

384
00:22:09,245 --> 00:22:12,605
for what they launch, but for
the outcome their product drives.

385
00:22:13,505 --> 00:22:18,095
And we need to know if a feature truly
drove more renewals, reduced friction,

386
00:22:18,365 --> 00:22:23,905
or just added unnecessary noise, and that
requires absolute best observability,

387
00:22:24,405 --> 00:22:27,585
not just at the infrastructure level,
but at the customer journey level.

388
00:22:28,085 --> 00:22:31,925
So in the next few minutes, let's
explore how observability becomes

389
00:22:32,165 --> 00:22:34,355
critical growth lever for product teams.

390
00:22:34,865 --> 00:22:38,315
And I'll share a few lessons as
we have learned the hard way.

391
00:22:38,815 --> 00:22:41,485
Let me take you to a place
every product manager has been.

392
00:22:42,175 --> 00:22:44,545
You launch a feature, the team celebrates.

393
00:22:44,635 --> 00:22:46,525
You move on to building
the next big thing.

394
00:22:47,395 --> 00:22:49,825
Then a few weeks later you hear.

395
00:22:50,380 --> 00:22:51,850
Revenue is down in Europe.

396
00:22:52,480 --> 00:22:54,910
Any idea why you scramble?

397
00:22:55,030 --> 00:22:59,870
You pull logs, you talk to engineering
you check all sorts of analytics,

398
00:22:59,870 --> 00:23:03,590
dashboards, and in the end, maybe
you find a clue or maybe you don't.

399
00:23:04,090 --> 00:23:05,559
And this is the core issue.

400
00:23:05,799 --> 00:23:08,854
We have visibility into
delivery, but not into results.

401
00:23:09,604 --> 00:23:13,779
Product teams today are
flying blind at key moments.

402
00:23:14,289 --> 00:23:18,459
Checkout renewal upgrade because
we don't have observability

403
00:23:18,459 --> 00:23:20,379
into what happened after launch.

404
00:23:21,129 --> 00:23:25,329
In most cases, that's not even
our plan and that needs to change.

405
00:23:25,829 --> 00:23:27,329
That's the exact blind spot.

406
00:23:27,659 --> 00:23:29,279
Observability is actually
meant to eliminate.

407
00:23:30,029 --> 00:23:30,869
Let me give you a story.

408
00:23:31,369 --> 00:23:36,139
I've had cases where an
AB experiment showed no.

409
00:23:36,639 --> 00:23:41,259
We were ready to kill the feature,
but our observability data showed

410
00:23:41,259 --> 00:23:45,999
users were actually a silent Java
script error on mobile devices.

411
00:23:46,824 --> 00:23:48,954
Now, in this case, it
wasn't about the feature.

412
00:23:49,164 --> 00:23:50,904
It was about a missing dependency.

413
00:23:51,504 --> 00:23:54,264
We would've made the wrong
decision without that insight.

414
00:23:55,044 --> 00:23:56,394
And it's not just one feature.

415
00:23:57,114 --> 00:23:59,454
Think of your user funnel as a leaky pipe.

416
00:23:59,724 --> 00:24:02,784
Without observability, you
don't know where it's leaking.

417
00:24:02,994 --> 00:24:06,774
You just see the bucket
filling slower than expect.

418
00:24:07,274 --> 00:24:11,384
So now the question is, what does
product observability look like?

419
00:24:11,884 --> 00:24:16,144
Think of it like upgrading from a car
dashboard that only tells you if the

420
00:24:16,144 --> 00:24:20,244
engine is on to the one that tells
you your passengers are buckled in

421
00:24:20,244 --> 00:24:23,694
GPS is working, and whether you are
even heading towards your destination.

422
00:24:24,654 --> 00:24:31,004
Now, the traditional metrics tells us
if a system is healthy, but product

423
00:24:31,004 --> 00:24:35,864
observability tells us if your business is
healthy and here is a simple comparison.

424
00:24:36,364 --> 00:24:37,264
CPU usage.

425
00:24:37,474 --> 00:24:37,804
Good.

426
00:24:38,434 --> 00:24:41,014
But did you, did your
free trial users convert?

427
00:24:41,224 --> 00:24:42,874
That's even better, right?

428
00:24:43,504 --> 00:24:48,544
Then response time, quite useful,
but did wallet updates succeed?

429
00:24:48,934 --> 00:24:50,134
That's quite actionable.

430
00:24:50,634 --> 00:24:52,464
And how about uptime?

431
00:24:52,644 --> 00:24:55,014
That's necessary, but
did renewals go through?

432
00:24:55,314 --> 00:24:56,574
That's actual revenue.

433
00:24:57,074 --> 00:24:58,424
Let me give you an example, right?

434
00:24:58,914 --> 00:25:00,444
Imagine you have launched a new wallet.

435
00:25:00,444 --> 00:25:05,934
Experience uptime is 4 9 99 0.99% API.

436
00:25:05,934 --> 00:25:11,014
Latency is below threshold, but users are
being the users are seeing an unhelpful

437
00:25:11,014 --> 00:25:12,874
error message if their card is expired.

438
00:25:13,714 --> 00:25:16,414
Now, you wouldn't know that unless
you are tracking wallet updates.

439
00:25:16,414 --> 00:25:21,294
Success rate observability means turning
these customer interactions into signals.

440
00:25:21,414 --> 00:25:22,554
We can actually act on.

441
00:25:23,054 --> 00:25:24,434
Now here is why this matters.

442
00:25:24,934 --> 00:25:29,644
This actually shortens the feedback
loop between problem and action.

443
00:25:30,144 --> 00:25:36,154
Now, in a traditional setup, you might
notice John went up last month, you dig

444
00:25:36,154 --> 00:25:40,654
in, do an analysis, maybe you know, you
bring your additional analytics data,

445
00:25:40,654 --> 00:25:45,194
analytics teams weeks go by and in
the process, revenue's actually lost.

446
00:25:45,694 --> 00:25:49,804
Now imagine the same situation,
but observability detects a 15%

447
00:25:49,804 --> 00:25:53,404
spike in failed renewals from
one single payment processor.

448
00:25:53,904 --> 00:25:58,944
You get an alert, you look at the logs,
see it's tied to a specific card range,

449
00:25:58,944 --> 00:26:03,694
payment method or maybe a specific
market or geo as well, and you route

450
00:26:03,844 --> 00:26:06,094
traffic differently the very same day.

451
00:26:06,664 --> 00:26:09,364
This is the difference between
watching your engine die on the

452
00:26:09,364 --> 00:26:13,774
freeway and getting a dashboard warning
before you even leave the garage.

453
00:26:14,274 --> 00:26:18,254
I often ask my team what signal
would've helped us cache this sooner?

454
00:26:18,944 --> 00:26:22,394
And more often than not,
that signal already exists.

455
00:26:23,204 --> 00:26:24,854
It's just that it's buried.

456
00:26:25,184 --> 00:26:28,609
Deep down observability
brings it to the surface.

457
00:26:29,109 --> 00:26:32,959
Let me give you a real example from
one of our recent experiences, right?

458
00:26:33,379 --> 00:26:38,339
We noticed churn in us was creeping up
but our dashboards looked just fine.

459
00:26:38,789 --> 00:26:41,669
There was no apparent service degradation.

460
00:26:41,669 --> 00:26:42,899
There were no alerts, nothing.

461
00:26:43,514 --> 00:26:47,684
But our observability data showed a
certain drop in wallet update success

462
00:26:47,774 --> 00:26:49,274
for a particular payment process.

463
00:26:49,844 --> 00:26:56,044
A config change it turns out, had silently
broken our integration, and therefore

464
00:26:56,044 --> 00:26:58,084
the users were not able to update cards.

465
00:26:58,084 --> 00:27:00,334
So their subscription
renewals were failing.

466
00:27:00,834 --> 00:27:03,590
We fixed it in less than
48 without observability.

467
00:27:04,560 --> 00:27:08,160
That would've taken us weeks, and by
then the revenue would have been lost.

468
00:27:08,880 --> 00:27:13,260
Now, some people might say, this is
a pure payment processor issue, not

469
00:27:13,440 --> 00:27:17,010
you know, your fault, but as product
managers, we own the customer journey.

470
00:27:17,430 --> 00:27:20,700
Whether it's a product feature
or a payments edge case, it's

471
00:27:20,700 --> 00:27:22,655
on us to see and solve it.

472
00:27:23,155 --> 00:27:25,585
So what is a product
manager's role in all of this?

473
00:27:25,905 --> 00:27:29,055
We are not just backlog
managers or roadmap owners.

474
00:27:29,295 --> 00:27:31,545
We are the actual sense makers.

475
00:27:32,205 --> 00:27:33,045
We cut through the noise.

476
00:27:33,195 --> 00:27:35,655
We connect business outcomes
to product decisions.

477
00:27:36,045 --> 00:27:38,745
That means we need to
lead with observability.

478
00:27:39,375 --> 00:27:41,805
We define what success looks like.

479
00:27:42,645 --> 00:27:46,635
We ask how will we know this
is working in real time or not.

480
00:27:47,135 --> 00:27:50,374
To achieve that we partner with
engineering to build not just

481
00:27:50,374 --> 00:27:53,135
features, but great feedback loops.

482
00:27:54,034 --> 00:27:58,564
Now think of observability like writing
a product specification, but for

483
00:27:58,564 --> 00:28:03,514
visibility, if you're launching a new
billing flow, add a couple of things

484
00:28:03,635 --> 00:28:05,225
to your acceptance criteria like.

485
00:28:06,185 --> 00:28:08,675
Can I see payment success
by payment method?

486
00:28:09,065 --> 00:28:11,735
Can customer support see
wallet errors by region?

487
00:28:12,095 --> 00:28:15,605
Can we detect if rera success
drops by a particular card

488
00:28:15,605 --> 00:28:17,705
type payment method, right?

489
00:28:18,205 --> 00:28:21,654
If you don't ask these questions, no one
will, and you will face the consequence.

490
00:28:22,154 --> 00:28:22,409
Okay?

491
00:28:22,409 --> 00:28:26,194
So after understanding all
of that, where do you start?

492
00:28:26,974 --> 00:28:28,624
You don't need to boil the entire ocean.

493
00:28:28,924 --> 00:28:30,844
Start with the point closest to.

494
00:28:31,344 --> 00:28:34,794
In a subscription business,
that usually means three things.

495
00:28:35,484 --> 00:28:39,264
Free to paid conversion, wallet
updates, and set up success and

496
00:28:39,264 --> 00:28:40,524
recurring billing and renewal.

497
00:28:41,184 --> 00:28:42,594
These are the golden flows.

498
00:28:43,344 --> 00:28:47,814
Every percent improvement here compounds
monthly, bringing in more revenue

499
00:28:47,814 --> 00:28:49,014
for your product and the company.

500
00:28:49,514 --> 00:28:53,634
For example, at Adobe we started by
instrumenting retry success rate,

501
00:28:53,994 --> 00:28:56,624
just knowing when and changed how we.

502
00:28:57,124 --> 00:28:59,824
Transactions and this helped
us retain revenue that would

503
00:28:59,824 --> 00:29:01,294
have other otherwise been lost.

504
00:29:01,794 --> 00:29:04,074
It turns out you don't need 500 metrics.

505
00:29:04,254 --> 00:29:06,474
You just need five that matter.

506
00:29:06,974 --> 00:29:08,974
Now let's wrap up with
a few key takeaways.

507
00:29:09,394 --> 00:29:11,764
First, think subscriber journey.

508
00:29:11,764 --> 00:29:16,849
First, not just uptime, our users
able to convert, pay and renew.

509
00:29:17,584 --> 00:29:21,604
You have to think about second
instrument, what drives annual recurring

510
00:29:21,604 --> 00:29:23,734
revenue, churn, and lifetime value.

511
00:29:24,234 --> 00:29:26,514
Not just logs, but actual outcomes.

512
00:29:26,844 --> 00:29:29,784
And third, make observability
cross-functional.

513
00:29:29,814 --> 00:29:31,254
You can't do it all by yourself.

514
00:29:31,524 --> 00:29:35,204
Your dashboard should be shared by
cross teams like customer support,

515
00:29:35,204 --> 00:29:36,914
engineering, finance, and product.

516
00:29:37,544 --> 00:29:42,164
And lastly, treat observability like
a product investment because the best

517
00:29:42,164 --> 00:29:46,604
growth strategy is not just launching
new features, it's making sure the ones

518
00:29:46,604 --> 00:29:49,994
you have already launched are working
and that you know they are working.

519
00:29:50,494 --> 00:29:51,544
I'll leave you with this.

520
00:29:51,604 --> 00:29:53,614
Your roadmap doesn't end at launch.

521
00:29:53,674 --> 00:29:55,594
It ends when you have proven the impact.

522
00:29:55,774 --> 00:29:58,104
And observability is how Thank.

