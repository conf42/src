1
00:00:00,150 --> 00:00:01,170
Hello, everyone.

2
00:00:01,450 --> 00:00:03,350
My name is Alexander Guzenko.

3
00:00:03,450 --> 00:00:08,099
And today I'm going to, I'm going
to talk about architecture, in

4
00:00:08,099 --> 00:00:09,749
particular front end architecture.

5
00:00:10,630 --> 00:00:16,639
Probably everyone faced with such
difficulties when, in large application,

6
00:00:16,749 --> 00:00:23,749
when it becomes larger and larger, it,
It becomes harder to maintain it, and,

7
00:00:23,799 --> 00:00:29,019
that's the problem because, sometimes
we need really large application and

8
00:00:29,039 --> 00:00:34,529
we also want to well maintainable
and well scalable applications.

9
00:00:35,019 --> 00:00:41,309
today We're going to cover such topics
as, key qualities of a good application.

10
00:00:41,699 --> 00:00:46,179
What the difference between
good applications and bad ones.

11
00:00:46,969 --> 00:00:52,929
Then, we're going to talk about problems
of modern front end and why just we

12
00:00:52,929 --> 00:00:58,719
can't write only good applications,
maintainable and scalable applications.

13
00:00:59,479 --> 00:01:07,039
Next, we of course, Gonna cover some
ways how to solve that problems and

14
00:01:07,149 --> 00:01:12,649
in final part I want to tell you
about feature slice design and how

15
00:01:12,679 --> 00:01:15,469
it can help you solve this problem.

16
00:01:16,089 --> 00:01:20,779
That's not the only one solution
but it's my favorite one.

17
00:01:21,279 --> 00:01:27,779
Just a few words about myself, I have
more than eight years of experience in

18
00:01:27,779 --> 00:01:37,159
software development and Several years ago
I realized that many developers don't know

19
00:01:37,209 --> 00:01:43,849
architecture well, and but architecture
is one of the most important part of

20
00:01:44,594 --> 00:01:46,524
whole software development process.

21
00:01:46,934 --> 00:01:52,014
So I decided that my mission is to
popularize front end architecture.

22
00:01:52,404 --> 00:01:54,754
And, so here we go today.

23
00:01:55,544 --> 00:01:58,584
let's talk about key qualities
of a good application.

24
00:01:59,074 --> 00:02:04,164
first one, it's of course business
efficiency because applications needs,

25
00:02:04,244 --> 00:02:07,544
for, receiving, money, to the business.

26
00:02:08,044 --> 00:02:10,214
And, for earning money for the business.

27
00:02:10,784 --> 00:02:14,544
of course, first, and, the most
important one is business efficiency.

28
00:02:15,044 --> 00:02:16,999
Next one is scalability.

29
00:02:17,684 --> 00:02:23,274
Scalability in front end is about,
how fast you can add new feature or

30
00:02:23,274 --> 00:02:26,364
maybe new module to your application.

31
00:02:26,864 --> 00:02:29,374
And, Last one, it's maintainability.

32
00:02:29,804 --> 00:02:34,714
it's about, how easy it is to
make changes and, maintain your

33
00:02:34,744 --> 00:02:36,624
application in the long term.

34
00:02:37,524 --> 00:02:39,964
so first one, business efficiency.

35
00:02:39,964 --> 00:02:42,904
it's not under our responsibility.

36
00:02:43,224 --> 00:02:47,194
It's more about, good and
bad business decisions.

37
00:02:47,234 --> 00:02:49,564
So it's not about software development.

38
00:02:50,114 --> 00:02:53,344
and, We're going to cover
the second and third ones,

39
00:02:53,704 --> 00:02:56,114
scalability and maintainability.

40
00:02:56,344 --> 00:02:58,484
So let's focus on these two.

41
00:02:58,984 --> 00:03:05,334
Why is it important to be well
scalable and well maintainable?

42
00:03:05,834 --> 00:03:10,385
Let's talk about scalability, when
it's easy to add new functionality.

43
00:03:10,940 --> 00:03:19,600
So it becomes cheaper and, we all want to
spend less time releasing new feature and

44
00:03:19,630 --> 00:03:25,350
we all want that it will, that It needs
to be an easy process, not really hard.

45
00:03:25,850 --> 00:03:28,500
so what about maintainability?

46
00:03:28,940 --> 00:03:32,870
when an application is well
maintainable, the increase in

47
00:03:32,870 --> 00:03:35,500
development costs remains small.

48
00:03:36,010 --> 00:03:41,850
So it, it allows for the implementation
of a large application in the future.

49
00:03:42,410 --> 00:03:44,550
And vice versa, it's bad maintainable.

50
00:03:44,910 --> 00:03:53,405
So sometimes it may be some point when
It is so hard to maintain and so hard to

51
00:03:53,405 --> 00:04:01,955
change the functionality that it becomes
easier to Rewrite whole application

52
00:04:02,405 --> 00:04:05,345
and we all don't want this scenario.

53
00:04:06,175 --> 00:04:12,675
So what the problems with that two
main qualities and the problems that

54
00:04:12,795 --> 00:04:18,075
it's one of the most difficult tasks
is, to, release your application

55
00:04:18,075 --> 00:04:22,915
to develop it, that, determine
the balance between scalability.

56
00:04:23,695 --> 00:04:25,735
maintainability, and development speed.

57
00:04:26,235 --> 00:04:29,055
and there are several reasons for that.

58
00:04:29,425 --> 00:04:32,515
First one, unclear
future at the beginning.

59
00:04:33,265 --> 00:04:39,195
We all need to do some important
architectural decisions at

60
00:04:39,195 --> 00:04:40,885
the beginning, not at the end.

61
00:04:41,250 --> 00:04:46,110
of development process, but the
thing that, at the beginning, we

62
00:04:46,160 --> 00:04:51,940
have the least information about the
feature or the application at all.

63
00:04:52,430 --> 00:04:57,950
And, during the development process, we
receive more and more information and

64
00:04:57,960 --> 00:05:02,500
the most of information we have only
at the end of the development process.

65
00:05:03,000 --> 00:05:08,290
the most important decisions we had
to, we have to make at the beginning

66
00:05:08,330 --> 00:05:10,270
when we have the least information.

67
00:05:11,120 --> 00:05:16,860
next problem, requirements may
change too often and unfortunately

68
00:05:16,860 --> 00:05:19,110
we can't do anything with that.

69
00:05:19,650 --> 00:05:25,595
probably everyone faced with, such
problem when, your You are in the middle

70
00:05:25,635 --> 00:05:31,085
of development process and your manager
comes to you and said, we decided to

71
00:05:31,085 --> 00:05:33,055
change the concept of this feature.

72
00:05:33,495 --> 00:05:38,935
just, just to follow the new concept
and you release that, to follow the

73
00:05:38,965 --> 00:05:41,185
new concept, you need to rewrite.

74
00:05:41,400 --> 00:05:48,780
most of your written code and that's
the problem and, next one, lack of time.

75
00:05:49,630 --> 00:05:51,810
Unfortunately, we don't
have infinity of time.

76
00:05:51,860 --> 00:05:57,840
And if we could, to have to do it,
probably we could, create the better

77
00:05:57,840 --> 00:06:02,350
decisions, but unfortunately we
don't have infinity of time, such

78
00:06:02,360 --> 00:06:04,210
as we don't have infinity of money.

79
00:06:04,960 --> 00:06:06,720
and that's the problem too.

80
00:06:06,820 --> 00:06:13,300
But there is another problem,
that every application is unique.

81
00:06:13,870 --> 00:06:18,660
And, the best solution for one
application, doesn't guarantee you

82
00:06:19,040 --> 00:06:21,590
that, it will work for another.

83
00:06:21,660 --> 00:06:25,560
So every time, you need to reinvent.

84
00:06:26,070 --> 00:06:31,440
your architectural decisions for every
new task, new feature, and so on.

85
00:06:31,940 --> 00:06:33,920
But, what we can do with that?

86
00:06:34,370 --> 00:06:38,940
first of all, I want to make a
little mark that for every company,

87
00:06:38,970 --> 00:06:44,330
every person, and every team, there
may be its own, good solutions.

88
00:06:44,490 --> 00:06:48,390
But, here are the most
universal ones, for me.

89
00:06:48,890 --> 00:06:52,810
First one, you need to become
a master in architecture.

90
00:06:53,520 --> 00:06:56,490
this is the longest and the hardest way.

91
00:06:56,520 --> 00:07:00,060
You need to know many
architectural patterns.

92
00:07:00,060 --> 00:07:05,010
Architectural concepts, of
course, you need to make a lot

93
00:07:05,010 --> 00:07:07,770
of mistakes and to solve them.

94
00:07:08,270 --> 00:07:13,740
but, in final, you will so much are in
architecture that every architectural,

95
00:07:13,790 --> 00:07:19,310
task, it will be easier for you and
you will do it really fast, but it

96
00:07:19,330 --> 00:07:24,650
doesn't guarantee you that, your
development team will also have,

97
00:07:24,690 --> 00:07:31,080
such architectural knowledges and
probably, you will need to control them

98
00:07:31,140 --> 00:07:35,100
harder, but this is good, solution.

99
00:07:35,600 --> 00:07:40,790
next one, use the best known
practices, it's easier than first one.

100
00:07:41,645 --> 00:07:45,505
Because you don't need whole
architectural patterns and a

101
00:07:45,505 --> 00:07:46,975
lot of architectural things.

102
00:07:47,335 --> 00:07:53,895
You just need, to know a few of
them and, use them, everywhere.

103
00:07:54,125 --> 00:07:59,575
it's If your only tool is a hammer,
every problems, every problem

104
00:07:59,575 --> 00:08:05,575
look, looks like a nail, that's the
same, it's not, the bad solution.

105
00:08:05,575 --> 00:08:11,815
Also because, using some architectural
patterns is better than not using

106
00:08:11,815 --> 00:08:14,845
them at all, but not perfect also.

107
00:08:15,395 --> 00:08:17,345
And, Last one for me.

108
00:08:17,435 --> 00:08:22,315
This is the most efficient solution
use out of the box solutions.

109
00:08:22,355 --> 00:08:27,275
So What is it out of the box solutions?

110
00:08:27,775 --> 00:08:34,195
let's talk about on the example And
my example is feature slice design.

111
00:08:34,725 --> 00:08:38,995
This is an architectural
methodology and, let's talk about

112
00:08:39,025 --> 00:08:40,795
what is it, feature slice design.

113
00:08:41,775 --> 00:08:48,365
As another architectural methodologies,
it's just a compilation of rules and

114
00:08:48,415 --> 00:08:51,105
conventions on organizing a code.

115
00:08:51,715 --> 00:08:55,055
But it has some, important parts.

116
00:08:55,665 --> 00:09:00,415
First one, feature slice design
based on solid principles.

117
00:09:00,515 --> 00:09:05,405
And, you of course need to
know the solid principles.

118
00:09:05,995 --> 00:09:09,355
solid principles are the
basic in, architecturing.

119
00:09:09,715 --> 00:09:15,445
And if you don't know about SOLID, I
really recommend it to, to learn about it,

120
00:09:15,595 --> 00:09:19,485
about that more, because this is the base.

121
00:09:20,195 --> 00:09:22,435
next one, public API.

122
00:09:22,435 --> 00:09:28,120
Public API, is, is pretty small
architectural pattern, but Also pretty

123
00:09:28,160 --> 00:09:34,070
important, because it can help you to
write, maintainable, scalable code.

124
00:09:34,570 --> 00:09:38,130
Next one, it's low
coupling and high cohesion.

125
00:09:38,750 --> 00:09:41,960
in this diagram, you can
see what does it mean.

126
00:09:42,460 --> 00:09:50,090
on the y axis you, you can see coupling
and the x, you can see cohesion

127
00:09:50,230 --> 00:09:55,240
and, there are different, there are
many combinations of them and the

128
00:09:55,250 --> 00:10:01,400
best one when low coupling and high
cohesion and here you can see why.

129
00:10:02,070 --> 00:10:02,780
It's better.

130
00:10:03,290 --> 00:10:07,370
if you don't know about this
pattern, I also recommend you to

131
00:10:07,400 --> 00:10:09,590
learn about that a little more.

132
00:10:10,090 --> 00:10:13,340
And, last one, it's feature
slide design own rules.

133
00:10:14,090 --> 00:10:18,570
And let's talk what is, what is,
own rules feature slide design.

134
00:10:19,410 --> 00:10:23,450
first one, In the feature slice
design, your whole application

135
00:10:23,810 --> 00:10:26,970
needs to divide into several layers.

136
00:10:27,190 --> 00:10:29,250
There are six possible layers.

137
00:10:29,510 --> 00:10:34,670
Shared, Entities, Features,
Widgets, Pages, and App.

138
00:10:35,170 --> 00:10:40,650
Notice that, in the screen there is,
process layer, but, it was in the first,

139
00:10:40,750 --> 00:10:45,650
version of feature slice design, and,
today we have second version, and,

140
00:10:45,700 --> 00:10:50,440
in the second version, process layer
is deprecated, keep it in your mind.

141
00:10:51,180 --> 00:10:54,100
some layers can have, its own slices.

142
00:10:54,385 --> 00:10:59,265
for example, entities layer
can have some such slices as

143
00:10:59,285 --> 00:11:02,155
user, post, comment, and so on.

144
00:11:02,745 --> 00:11:06,545
And, every slice you can
divide into some segments.

145
00:11:06,655 --> 00:11:09,965
UI, model API and so on.

146
00:11:10,805 --> 00:11:14,185
And, let's dive deep into layers.

147
00:11:14,275 --> 00:11:16,095
let's start with shared layers.

148
00:11:16,145 --> 00:11:18,535
It's the most abstract layer.

149
00:11:19,005 --> 00:11:25,865
And here you need to put some, basic
parts of your application, which don't

150
00:11:25,895 --> 00:11:28,695
know anything about business logic.

151
00:11:29,245 --> 00:11:37,255
for example, it is buttons, selects,
inputs, maybe some layouts, and so on.

152
00:11:37,755 --> 00:11:39,735
Next layer is entities.

153
00:11:40,305 --> 00:11:45,055
And it is, it's a business
entity, and, for example,

154
00:11:45,155 --> 00:11:48,325
comment, post, user, and so on.

155
00:11:48,745 --> 00:11:54,885
Here you can put your, UI, some
methods, how to fetch data,

156
00:11:55,235 --> 00:11:57,725
from the backend and, so on.

157
00:11:58,285 --> 00:12:00,365
Next layer is features.

158
00:12:00,725 --> 00:12:01,295
Features.

159
00:12:01,575 --> 00:12:07,755
it's about actions, about user
interactions, for example, like

160
00:12:07,815 --> 00:12:14,675
comment, repost comment, delete post,
update user profile data, and so on.

161
00:12:14,725 --> 00:12:15,375
actions.

162
00:12:16,265 --> 00:12:19,645
next one, is widgets layer.

163
00:12:19,705 --> 00:12:24,830
widgets layer, it's about
composition, compositioning.

164
00:12:25,060 --> 00:12:30,490
And here you can, compose, your
entities and features together,

165
00:12:30,570 --> 00:12:35,020
to make, for example, in this
exam, here you can see post.

166
00:12:35,140 --> 00:12:41,560
Post contains, from, from entity
post and some features and, repost,

167
00:12:41,620 --> 00:12:43,590
comment, download, and so on.

168
00:12:44,090 --> 00:12:46,760
Next one is pages layer.

169
00:12:46,870 --> 00:12:47,560
Pages layer.

170
00:12:47,900 --> 00:12:55,520
It's easy because it's just a page What
do you want to see inside your page?

171
00:12:56,020 --> 00:13:00,170
It's like also compositioning but
high level compositioning whole

172
00:13:00,210 --> 00:13:06,295
page whole page layer layout, you
can put here in this layer and last

173
00:13:06,295 --> 00:13:10,245
one application or app layer here.

174
00:13:10,295 --> 00:13:18,645
you may put your global objects, global
stylus, global types, some providers like

175
00:13:18,645 --> 00:13:27,065
routing, faming also on, and, Export, your
main, object, your application object,

176
00:13:27,295 --> 00:13:29,335
if we talk, for example, about React.

177
00:13:30,255 --> 00:13:36,555
Of course, at the beginning, it may be
difficult to divide your every feature

178
00:13:36,735 --> 00:13:40,955
to these layers, segments, and so on.

179
00:13:41,895 --> 00:13:47,375
And their core team of Feature
Slice Design, created, some,

180
00:13:47,405 --> 00:13:56,060
decomposition cheat which can help
you to decompose your feature and

181
00:13:56,070 --> 00:13:58,610
you can use it, on their own website.

182
00:13:58,660 --> 00:14:02,840
Yes, they have a website, Feature
Slice Design, has a good website

183
00:14:02,840 --> 00:14:04,270
with a lot of information.

184
00:14:04,930 --> 00:14:11,570
I'll give you a link at the end of,
my speech and, Let's return to the

185
00:14:11,630 --> 00:14:13,910
main questions of my today's speech.

186
00:14:14,070 --> 00:14:19,260
How feature slice design can help me to
achieve maintainability and scalability?

187
00:14:19,260 --> 00:14:26,890
Firstly, this is a good combination
of time tasted architectural patterns

188
00:14:26,930 --> 00:14:32,110
and principles with its own rules
to solve modern front end problems.

189
00:14:32,270 --> 00:14:33,050
What does it mean?

190
00:14:33,550 --> 00:14:38,900
It contains from a lot of architectural
patterns, good patterns, and

191
00:14:39,480 --> 00:14:42,690
they work together in a synergy.

192
00:14:42,870 --> 00:14:45,270
So it's a really good combination for me.

193
00:14:46,100 --> 00:14:50,050
But moreover, it, it was
released, this architectural

194
00:14:50,050 --> 00:14:52,670
methodology released in 2020.

195
00:14:53,010 --> 00:14:59,900
So it's pretty new and it was released
in modern front end era and it, good,

196
00:15:00,320 --> 00:15:02,860
solve modern front end, problems.

197
00:15:03,360 --> 00:15:08,150
Next one, Feature Slice Design
has a big community and a website

198
00:15:08,180 --> 00:15:11,550
that can help on board newcomers.

199
00:15:11,720 --> 00:15:12,350
faster.

200
00:15:12,800 --> 00:15:15,930
You don't need to, to write your own.

201
00:15:16,720 --> 00:15:21,910
Documentation, because it
is, it already, written.

202
00:15:22,370 --> 00:15:30,160
And, if you have a newcomer in your team,
you just can, send a link to feature

203
00:15:30,160 --> 00:15:33,660
slice design website, and that's it.

204
00:15:33,970 --> 00:15:36,630
newcomer will, will read.

205
00:15:36,740 --> 00:15:42,120
that information and we'll
learn what is it next one.

206
00:15:42,310 --> 00:15:48,130
this is a embodiment of the experience
of many experience at development.

207
00:15:48,600 --> 00:15:52,960
it just lies design have,
has a good, good support.

208
00:15:53,130 --> 00:15:55,120
of core team.

209
00:15:55,250 --> 00:16:00,900
Yes, there is a core team in feature
slice design that contribute to

210
00:16:01,010 --> 00:16:03,510
this methodology almost every week.

211
00:16:03,890 --> 00:16:10,460
And I know that guys, they really
put a lot of effort to maintain this.

212
00:16:11,080 --> 00:16:13,870
And, this is really good, experience.

213
00:16:13,910 --> 00:16:16,030
They really experienced guys.

214
00:16:16,530 --> 00:16:21,780
Next one, feature slice design is
suitable for projects of almost any

215
00:16:21,780 --> 00:16:30,470
size from little to do lists to big
dashboard applications with hundreds

216
00:16:30,510 --> 00:16:32,690
or even millions lines of code.

217
00:16:33,660 --> 00:16:38,720
And, Finally, you don't need to
reinvent new solutions every time.

218
00:16:39,090 --> 00:16:44,600
Once you learn about feature slice
design and once you try to use it,

219
00:16:44,850 --> 00:16:50,890
you could use it everywhere in every
project releasing every feature and

220
00:16:50,890 --> 00:16:55,870
this is really convenient, and you don't
need to reinvent solutions every time.

221
00:16:56,620 --> 00:17:02,150
So, For me, that's it and I
really hope, you are interested

222
00:17:02,150 --> 00:17:07,390
in feature slice design and more
interested in architecture at all.

223
00:17:08,090 --> 00:17:12,510
And if you have some questions,
just feel free to write me

224
00:17:12,510 --> 00:17:15,210
down in my LinkedIn or Gmail.

225
00:17:15,710 --> 00:17:19,540
And of course, I really recommend
to visit Feature Slice Design

226
00:17:19,550 --> 00:17:25,030
website, even if you are not gonna
use it, just, to know what is it.

227
00:17:25,500 --> 00:17:28,140
And, this is really important information.

228
00:17:28,260 --> 00:17:30,700
So thank you, and have a good day.

229
00:17:30,790 --> 00:17:31,160
Bye.

