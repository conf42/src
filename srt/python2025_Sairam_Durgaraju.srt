1
00:00:00,190 --> 00:00:02,070
Hello guys, welcome to the session.

2
00:00:02,790 --> 00:00:08,430
today i'm going to discuss about python
for passwordless authentication and how

3
00:00:08,430 --> 00:00:14,329
can we implement the 502 on the web auth
and for a secure feature using the python.

4
00:00:14,829 --> 00:00:17,650
So Just want to give
some background, right?

5
00:00:17,650 --> 00:00:19,000
So why passwordless?

6
00:00:19,949 --> 00:00:23,949
the world is, pretty much digital
right now, and, with the increasing

7
00:00:23,949 --> 00:00:27,309
cyber threats, and the traditional
password based authentication

8
00:00:27,319 --> 00:00:28,589
is no longer sufficient.

9
00:00:29,269 --> 00:00:33,249
the world is marching towards the
password less authentication, and

10
00:00:33,259 --> 00:00:38,969
that can be achieved using FIDO2, it's
something called Fast Identity Online 2.

11
00:00:39,429 --> 00:00:44,590
framework and then web auth and ensures a
strong and more secure way to authenticate

12
00:00:44,610 --> 00:00:47,380
the users Without relying on passwords.

13
00:00:47,410 --> 00:00:50,050
So just imagine a world
without passwords, right?

14
00:00:50,050 --> 00:00:51,600
So It's so cool.

15
00:00:51,660 --> 00:00:57,419
It's the user experience will be seamless
and It's more secure we can leverage

16
00:00:57,459 --> 00:01:03,740
Python and, it's libraries, to do this
seamless integration for FIDO2, WebAuthn,

17
00:01:03,900 --> 00:01:06,350
using the existing authentication systems.

18
00:01:06,900 --> 00:01:10,150
as I said, the key benefits of
the passwordless authentications

19
00:01:10,150 --> 00:01:11,800
includes enhanced security.

20
00:01:12,525 --> 00:01:17,055
And then improve the user experience
and then, the compliance, right?

21
00:01:17,065 --> 00:01:25,840
all the, at NIST GDPR HIPAA alliances
are, forcing all the, Organizations

22
00:01:25,860 --> 00:01:29,440
to follow the standards and move
towards the passwordless integrations

23
00:01:30,170 --> 00:01:34,980
and it also works with Mobile
desktop and web applications as well.

24
00:01:35,910 --> 00:01:37,710
So just try to understand.

25
00:01:37,740 --> 00:01:40,953
Let's try to understand what
is Fido 2 and WebAuthn, right?

26
00:01:40,953 --> 00:01:44,710
So Fido 2 as I said, it's a
fast identity online tool.

27
00:01:44,730 --> 00:01:50,240
That's an open authentication standard
developed by the Fido alliance so By

28
00:01:50,240 --> 00:01:54,700
using that it can we can enable the
passwordless authentication by leveraging

29
00:01:54,700 --> 00:02:01,430
the public key cryptography So we can
go into the details and see how it works

30
00:02:01,430 --> 00:02:05,720
in detail also we need to understand
what are the key components of a 502

31
00:02:06,580 --> 00:02:09,360
web authen the web authentication api.

32
00:02:09,450 --> 00:02:12,840
It's a standard that enables the
passwordless authentication via

33
00:02:12,840 --> 00:02:17,625
browsers and then there is Ctap p which
is client to authenticator protocol.

34
00:02:18,065 --> 00:02:21,455
It defines how external authenticators
communicate with the browsers.

35
00:02:22,425 --> 00:02:24,730
So let's look at how
web auth works, right?

36
00:02:25,120 --> 00:02:30,000
web auth, simply like you need to
understand that's tied to the user device.

37
00:02:30,440 --> 00:02:36,430
So user hash to register a device first,
the device could be a security key,

38
00:02:36,480 --> 00:02:39,330
or a mobile phone or your laptop, or.

39
00:02:39,950 --> 00:02:41,240
any iot, right?

40
00:02:41,580 --> 00:02:45,540
so user registers with the security
key or biometrics, authenticator.

41
00:02:46,130 --> 00:02:50,810
as part of the registration, a
unique public private key pair, a

42
00:02:50,960 --> 00:02:55,760
cryptographic key pair is generated
and the public key is stored on

43
00:02:55,760 --> 00:03:00,560
the, open server while the private
key remains securely on the device.

44
00:03:01,110 --> 00:03:05,800
Once the registration process is
complete, then the we can also look

45
00:03:05,800 --> 00:03:07,640
at the authentication process, right?

46
00:03:08,020 --> 00:03:13,500
So whenever for example if you want
to do a Face id authentication bar

47
00:03:13,500 --> 00:03:16,820
biometrics authentication or retina
scan or whatever it is, right?

48
00:03:17,210 --> 00:03:21,770
So what happens is the authent server
will send a challenge to the client

49
00:03:22,340 --> 00:03:27,070
And the client signs the challenge
using the private key stored In your

50
00:03:27,070 --> 00:03:31,710
device, and, server verifies the
signature using the stored public key.

51
00:03:32,070 --> 00:03:35,460
And if everything matches, the
handshake is good, then, user is

52
00:03:35,460 --> 00:03:39,550
allowed to, authenticated and will
be allowed to access the resources.

53
00:03:40,100 --> 00:03:45,540
So let's take a step and see
how we can set up the Fido to

54
00:03:45,550 --> 00:03:46,920
WebAuthn with Python, right?

55
00:03:47,420 --> 00:03:50,730
So we do have many cloud
providers out there.

56
00:03:50,760 --> 00:03:55,270
This can be You know this Steps
what I'm going to show now will

57
00:03:55,290 --> 00:03:59,710
work pretty much with all the famous
cloud providers, which manage, which

58
00:03:59,710 --> 00:04:04,000
provides the authen, web authen and
then the FIDO, FIDO2 capabilities.

59
00:04:04,520 --> 00:04:07,670
so the prerequisites are
you need to have Python 3.

60
00:04:07,740 --> 00:04:10,310
7 plus versions.

61
00:04:10,785 --> 00:04:11,715
anything higher than 3.

62
00:04:11,715 --> 00:04:17,605
7 would do the job and then you either
need to have a flask or fast api for the

63
00:04:17,605 --> 00:04:25,335
backends and then we need to also download
the python, libraries for web 2 So the

64
00:04:25,335 --> 00:04:27,425
installation is the first step, right?

65
00:04:27,425 --> 00:04:29,405
So we'll have to install the fido 2.

66
00:04:29,455 --> 00:04:34,950
packages And then, we'll also take a
look at the backend implementation, which

67
00:04:34,950 --> 00:04:37,290
is, the code has been provided here.

68
00:04:37,640 --> 00:04:42,250
we just need to, import the flask
libraries, and then also we need to

69
00:04:42,250 --> 00:04:47,640
import the FIDO2 server packages and,
public, key credential RP entity package.

70
00:04:48,400 --> 00:04:51,590
and then the user
registration code is here.

71
00:04:52,050 --> 00:04:56,520
we just need to capture the
users, users device information

72
00:04:57,050 --> 00:04:59,730
and also users, the public key.

73
00:05:00,230 --> 00:05:05,410
And then there is this user authentication
flow, how the user is authenticated and

74
00:05:05,430 --> 00:05:11,430
that's explained here And I know to test
this flow, we need to run the flask server

75
00:05:11,980 --> 00:05:17,805
and the steps are given here The testing
the authentication flow so in order to

76
00:05:17,895 --> 00:05:23,685
test, the deployed code, we can use,
a current command or rest, API or rest

77
00:05:24,015 --> 00:05:29,225
client, for example, the postman to send
the post request, to, to register first.

78
00:05:29,225 --> 00:05:32,065
As I said, the first step
would be to register the.

79
00:05:32,705 --> 00:05:38,805
Users, a user device, in order to
allow the authentication, the seamless,

80
00:05:38,845 --> 00:05:43,335
authentication and then authenticate
a user is the second step after

81
00:05:43,335 --> 00:05:49,395
registration, testing the authentication,
test authentication, using one second.

82
00:05:49,895 --> 00:05:51,095
Using this command, right?

83
00:05:51,095 --> 00:05:53,615
So you are going to hit the
authenticate endpoint again.

84
00:05:53,615 --> 00:05:59,375
It's you can request or initiate the
request using the curl command or use

85
00:05:59,375 --> 00:06:05,277
the postman to find this authenticate
endpoint and this will verify the user

86
00:06:05,277 --> 00:06:10,275
credentials and return a authentication
successful response if the device

87
00:06:10,285 --> 00:06:14,055
provided key is matching with what we
have on our side with the public key

88
00:06:14,605 --> 00:06:19,355
if you want to test with security keys,
for example, the security keys could

89
00:06:19,355 --> 00:06:21,945
be ub key or a titan security key.

90
00:06:22,345 --> 00:06:27,575
These are the physical keys where
you need to plug into your device

91
00:06:27,655 --> 00:06:32,330
and Use a browser, pretty much
all the browsers, all the famous

92
00:06:32,330 --> 00:06:34,200
browsers are supported by WebAuthn.

93
00:06:34,700 --> 00:06:38,910
you can use Chrome, Edge or
Firefox and follow, the prompts

94
00:06:38,910 --> 00:06:40,150
to complete the authentication.

95
00:06:40,700 --> 00:06:43,760
user device compatibility and
the WebAuthn support, right?

96
00:06:43,820 --> 00:06:47,680
as I said, WebAuthn is pretty
much mature right now and it's,

97
00:06:47,710 --> 00:06:52,610
widely accepted by, all the famous
browsers across the industry.

98
00:06:53,070 --> 00:06:58,260
The most famous ones, as you guys know,
are like Chrome Edge, Firefox, and Safari.

99
00:06:58,890 --> 00:07:02,190
and then, web Button is
also supported by Windows.

100
00:07:02,190 --> 00:07:05,535
Hello, or Mac or the Android biometrics.

101
00:07:06,105 --> 00:07:12,335
And then, there are web button is again
supported by, by using, USBs or NFS,

102
00:07:12,365 --> 00:07:14,345
NFC and the Bluetooth security case.

103
00:07:14,895 --> 00:07:21,365
so WebAuthn, if you want to test across
the devices, here is the website.

104
00:07:21,365 --> 00:07:23,605
It's a cool website, webauthn.

105
00:07:23,605 --> 00:07:23,985
io.

106
00:07:23,985 --> 00:07:27,065
You can use that website to,
debug the issues, and look

107
00:07:27,065 --> 00:07:28,805
at the request and responses.

108
00:07:29,385 --> 00:07:34,055
and then there is, a verify security key,
support in the browser settings as well.

109
00:07:35,035 --> 00:07:36,475
And troubleshooting, right?

110
00:07:36,475 --> 00:07:40,315
So if you guys see any issues
while running the code or while

111
00:07:40,405 --> 00:07:45,155
registering the device or while
authenticating the user, the very

112
00:07:45,155 --> 00:07:47,445
common issues are documented here.

113
00:07:47,795 --> 00:07:50,175
security key not detected and sure.

114
00:07:50,285 --> 00:07:54,215
so if you see a error saying, security
key is not detected, ensure that

115
00:07:54,215 --> 00:07:59,265
the device supports CT, or invalid
credentials error and that key might

116
00:07:59,265 --> 00:08:03,255
not be registered properly or, we
have to retry the registration, that

117
00:08:03,255 --> 00:08:08,325
could be a corrupt, public key or
mismatch with the, keys and then the

118
00:08:08,465 --> 00:08:10,515
browser and campaign compatibility.

119
00:08:10,565 --> 00:08:12,085
so make sure WebAuthn is enabled.

120
00:08:12,865 --> 00:08:13,945
in the browser settings.

121
00:08:14,445 --> 00:08:16,335
Okay, let me see.

122
00:08:16,835 --> 00:08:22,055
So best practices, always enforce the
multifactor authentication, combined

123
00:08:22,055 --> 00:08:24,785
web bot and with OTP for added security.

124
00:08:25,315 --> 00:08:27,925
and then, use the attestations properly.

125
00:08:27,975 --> 00:08:31,395
validate all the authenticators
using Fido metadata service.

126
00:08:31,975 --> 00:08:36,305
or monitor authentication attempts,
which is like implement logging for

127
00:08:36,325 --> 00:08:41,635
authentication failures and look at the
logs and create the alerts, probably

128
00:08:41,635 --> 00:08:46,575
if you are using any sim tools you can
You know If your logs are flowing into

129
00:08:46,575 --> 00:08:50,780
the sim tool Make sure you create the
alerts and look at, the authentication

130
00:08:50,790 --> 00:08:55,970
failures or the attempts, to flag if
there are any, anomalies in the request.

131
00:08:56,750 --> 00:09:00,640
So overall, by leveraging the Python
to implement the FIDO2 on WebAuthn,

132
00:09:01,140 --> 00:09:07,890
Developers can build a robust passwordless
authentication system that's both user

133
00:09:07,890 --> 00:09:13,060
friendly and highly secure as cyber
security threats have all organizations

134
00:09:13,090 --> 00:09:17,770
must adopt to modern authentication
methods to protect the users and data.

135
00:09:18,600 --> 00:09:21,230
so thank you so much for this opportunity.

136
00:09:21,630 --> 00:09:26,120
And if you guys want to know more
about, Fido two or anything related

137
00:09:26,130 --> 00:09:29,950
to web auth and, or if you have any
questions, you can reach out to me.

138
00:09:29,990 --> 00:09:31,310
I'm available in LinkedIn.

139
00:09:31,400 --> 00:09:33,050
my ID is Iram Durkaraju.

140
00:09:33,760 --> 00:09:35,740
thanks again for, attending this session.

