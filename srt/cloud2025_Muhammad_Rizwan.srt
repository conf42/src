1
00:00:00,170 --> 00:00:00,880
Hello everyone.

2
00:00:01,359 --> 00:00:02,570
Thank you for being here today.

3
00:00:03,070 --> 00:00:06,860
Today we are going to dive into
an exciting and transformative

4
00:00:06,910 --> 00:00:11,040
topic, microservices architecture
in cloud native systems.

5
00:00:11,719 --> 00:00:15,705
We will explore how microservices
have evolved The key principles

6
00:00:15,705 --> 00:00:19,915
behind them, challenges in their
implementation and best practices

7
00:00:19,925 --> 00:00:21,495
that industry leaders follow.

8
00:00:22,115 --> 00:00:25,385
By the end of the session, you
will have a solid understanding

9
00:00:25,425 --> 00:00:30,745
of microservices and how they fit
into modern cloud environment.

10
00:00:31,375 --> 00:00:32,345
Let's get started.

11
00:00:32,845 --> 00:00:34,955
What is microservices architecture?

12
00:00:35,455 --> 00:00:35,815
To begin.

13
00:00:36,670 --> 00:00:40,290
Let's define microservices
architecture in simple terms.

14
00:00:40,360 --> 00:00:44,700
It is an approach to software
design where an application is built

15
00:00:44,790 --> 00:00:48,590
as a collection of small loosely
coupled services that work together.

16
00:00:49,090 --> 00:00:53,420
This is a huge shift from the traditional
monolithic way of building application.

17
00:00:53,875 --> 00:00:58,755
And it's crucial in cloud native
environments for a few key reasons.

18
00:00:58,995 --> 00:01:03,875
the first is it allows application
to scale more efficiently.

19
00:01:04,245 --> 00:01:06,665
It, speeds up development cycles.

20
00:01:07,005 --> 00:01:10,565
It enables rapid deployment
and continuous delivery.

21
00:01:11,065 --> 00:01:15,875
Throughout the session, we will
unpack these ideas and see how they

22
00:01:15,875 --> 00:01:18,295
play out in real world applications.

23
00:01:18,795 --> 00:01:24,575
Let's take a moment to talk about
monolithic architecture and traditional

24
00:01:24,575 --> 00:01:28,045
software development applications
are built as a single unit.

25
00:01:28,525 --> 00:01:35,385
While this approach works well for smaller
projects, as applications grow, monolithic

26
00:01:35,395 --> 00:01:36,985
structures become difficult to maintain.

27
00:01:37,975 --> 00:01:41,295
Here are some key
challenges with monoliths.

28
00:01:42,095 --> 00:01:46,445
A large code base makes updates
complex and time consuming.

29
00:01:46,945 --> 00:01:51,495
Scaling requires redeploying the entire
application, which is not efficient.

30
00:01:51,995 --> 00:01:54,915
Slower deployment cycles make it harder.

31
00:01:55,505 --> 00:01:57,665
To quickly roll out new features.

32
00:01:58,415 --> 00:02:02,945
This is why companies are shifting
towards microservices, which

33
00:02:02,975 --> 00:02:07,535
allow teams to develop, deploy,
and scale services independently.

34
00:02:08,075 --> 00:02:11,105
It's a game changer for
modern software development.

35
00:02:11,605 --> 00:02:17,325
So when does it make sense to transition
from monolith to microservices?

36
00:02:17,825 --> 00:02:21,875
If application is growing and
becoming difficult to manage,

37
00:02:22,225 --> 00:02:24,055
microservices might be the answer.

38
00:02:24,555 --> 00:02:29,005
If you need independent scaling for
different components of your application,

39
00:02:29,505 --> 00:02:35,335
if DevOps and continuous deployment are
priorities for your team, this shift

40
00:02:35,365 --> 00:02:41,725
requires careful planning, but when done
it brings incredible benefits in terms

41
00:02:41,725 --> 00:02:44,445
of agility, resilience, and scalability.

42
00:02:44,945 --> 00:02:51,835
To successfully design microservices,
we need to follow some key principles.

43
00:02:52,335 --> 00:02:55,075
SRP, the Single Responsibility Principle.

44
00:02:56,075 --> 00:02:59,335
each service should do
one thing and do it well.

45
00:02:59,695 --> 00:03:03,965
This keeps services
lightweight and maintainable.

46
00:03:04,825 --> 00:03:07,105
Lose coupling and high cohesion.

47
00:03:07,635 --> 00:03:11,665
Service should be independent but
still work together efficiently.

48
00:03:12,165 --> 00:03:13,875
The API first approach.

49
00:03:14,345 --> 00:03:17,315
All communication should happen
through well defined APIs,

50
00:03:17,815 --> 00:03:19,935
making integration smoother.

51
00:03:20,795 --> 00:03:24,335
Domain driven design services
should align with business.

52
00:03:24,915 --> 00:03:29,645
capabilities, ensuring better
organization and maintainability.

53
00:03:30,505 --> 00:03:35,785
Keeping these principles in mind
will help us build scalable and

54
00:03:35,895 --> 00:03:38,445
efficient microservices architectures.

55
00:03:38,945 --> 00:03:43,485
Now let's, look at the core components
that make microservices work.

56
00:03:43,985 --> 00:03:45,215
Service communication.

57
00:03:45,715 --> 00:03:47,275
This can be synchronous.

58
00:03:47,850 --> 00:03:53,219
With REST or gRPC for real time
interactions or asynchronous

59
00:03:53,220 --> 00:03:58,070
message use like Kafka or for
the decoupled communication.

60
00:03:58,930 --> 00:04:03,850
Service Discovery ensures that
microservices can dynamically

61
00:04:03,860 --> 00:04:05,930
find and interact with each other.

62
00:04:06,610 --> 00:04:12,000
API Gateway acts as the entry
point managing security,

63
00:04:12,010 --> 00:04:13,640
load balancing, and routing.

64
00:04:14,140 --> 00:04:15,260
Database per service.

65
00:04:15,760 --> 00:04:20,680
Each service should have its own
database to maintain independence.

66
00:04:21,140 --> 00:04:26,260
Together, these components create a robust
and efficient microservices architecture.

67
00:04:26,760 --> 00:04:33,460
To deploy and manage microservices
effectively, we use some key technologies.

68
00:04:33,960 --> 00:04:35,780
Containers and Kubernetes.

69
00:04:36,540 --> 00:04:41,410
Containers like Docker package
microservices, making them portable.

70
00:04:41,840 --> 00:04:46,250
Kubernetes automates deployment,
scaling, and management.

71
00:04:46,750 --> 00:04:50,280
Serverless and function as a service fast.

72
00:04:50,780 --> 00:04:54,780
This allows microservices
to execute on demand without

73
00:04:54,830 --> 00:04:56,580
managing the infrastructure.

74
00:04:57,080 --> 00:04:58,710
CICD pipelines.

75
00:04:59,210 --> 00:05:02,800
It automates testing,
deployment, and updates.

76
00:05:03,390 --> 00:05:06,020
Enabling continuous
integration and delivery.

77
00:05:06,220 --> 00:05:11,390
These tools help streamline development
and ensure that applications

78
00:05:11,880 --> 00:05:13,420
run smoothly in production.

79
00:05:13,920 --> 00:05:18,650
Of course, microservices come
with their own set of challenges.

80
00:05:19,150 --> 00:05:22,920
Data consistency and
distributed transactions.

81
00:05:23,420 --> 00:05:27,550
Managing transitions across
multiple services can be complex.

82
00:05:28,230 --> 00:05:33,590
service communication, choosing
between REST, gRPC, or message

83
00:05:33,590 --> 00:05:35,450
brokers impacts performance.

84
00:05:35,950 --> 00:05:36,710
Security.

85
00:05:37,210 --> 00:05:40,460
Implementing authentication,
authorization, and zero

86
00:05:40,460 --> 00:05:42,190
trust security is crucial.

87
00:05:42,780 --> 00:05:48,730
These are some of the biggest hurdles
teams face when adopting microservices.

88
00:05:48,940 --> 00:05:52,540
But with the right strategies,
they can be effectively managed.

89
00:05:53,040 --> 00:05:57,550
Monitoring services is critical
for maintaining performance

90
00:05:57,590 --> 00:05:59,360
and debugging issues.

91
00:05:59,860 --> 00:06:05,110
Key tools include, Promethesis
and Grafana, used for collecting

92
00:06:05,140 --> 00:06:06,920
and visualizing metrics.

93
00:06:07,090 --> 00:06:10,709
OpenTelemetry, a standard
framework for observability.

94
00:06:11,209 --> 00:06:17,829
We also focus on logging to track
events in the system, tracing

95
00:06:18,099 --> 00:06:21,489
to follow requests as they move
through the different services.

96
00:06:22,129 --> 00:06:25,109
metrics, to monitor
application performance.

97
00:06:26,099 --> 00:06:29,769
observability ensures we can
detect and resolve issues before

98
00:06:29,769 --> 00:06:31,599
they become the major problems.

99
00:06:32,099 --> 00:06:35,829
Let's take a look at how industry
leaders have successfully

100
00:06:35,829 --> 00:06:37,359
implemented microservices.

101
00:06:37,539 --> 00:06:40,589
Netflix, one of the
pioneers of microservices.

102
00:06:40,939 --> 00:06:45,849
They transitioned to this model to
handle massive scalability requirements.

103
00:06:46,539 --> 00:06:51,244
Uber, originally built as monolith
Uber moved to microservices to

104
00:06:51,244 --> 00:06:53,844
improve agility and manageability.

105
00:06:54,124 --> 00:06:58,044
these examples show that,
microservices are not just a trend.

106
00:06:58,104 --> 00:07:02,214
They are a necessity, for
companies operating at a scale.

107
00:07:02,714 --> 00:07:07,374
As we wrap up, here are, some
key takeaways for implementing

108
00:07:07,454 --> 00:07:09,134
microservices successfully.

109
00:07:09,634 --> 00:07:11,434
Start small and evolve.

110
00:07:12,124 --> 00:07:15,234
Don't try to migrate everything at once.

111
00:07:15,574 --> 00:07:18,804
Begin with one service
and expand gradually.

112
00:07:19,304 --> 00:07:20,214
Automate everything.

113
00:07:20,704 --> 00:07:24,814
CICD, testing and deployments
should be fully automated.

114
00:07:25,794 --> 00:07:28,434
Design for failure and resilience.

115
00:07:28,544 --> 00:07:33,584
Use retry circuit breakers and
fallback mechanisms to handle failures

116
00:07:33,634 --> 00:07:36,364
gracefully, which is resilience.

117
00:07:36,864 --> 00:07:38,374
Continuous learning and adaption.

118
00:07:38,425 --> 00:07:43,025
Monitor performance, collect feedback,
and keep refining the system.

119
00:07:43,595 --> 00:07:49,025
By following these best practices,
organizations can fully leverage

120
00:07:49,265 --> 00:07:50,965
the benefits of microservices.

121
00:07:51,465 --> 00:07:54,165
Brings us to the end of our discussion.

122
00:07:54,625 --> 00:08:00,085
Microservices enhance scalability,
agility, and resilience, but they

123
00:08:00,085 --> 00:08:04,585
require careful planning, security
concentrations, and robust monitoring.

124
00:08:05,085 --> 00:08:09,715
I hope this session has provided you
with valuable insights into designing,

125
00:08:09,715 --> 00:08:13,335
deploying, and managing microservices
in cloud native environments.

126
00:08:14,335 --> 00:08:17,055
Now I'd love to hear from you.

127
00:08:17,055 --> 00:08:18,675
Do you have any questions?

128
00:08:19,175 --> 00:08:20,265
Thank you for your time.

