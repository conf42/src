1
00:00:00,150 --> 00:00:00,780
Hey, everyone.

2
00:00:00,970 --> 00:00:05,090
My name is Dewan Ahmed, and I'm a
Principal Developer Advocate at Harness.

3
00:00:05,540 --> 00:00:11,109
I'm thrilled to be here
at Conf42 DevSecOps 2024.

4
00:00:11,110 --> 00:00:15,619
Today, we're diving into securing
Git repositories, preventing

5
00:00:15,659 --> 00:00:19,800
accidental secret commits with
GitLinks and Harness open source.

6
00:00:20,190 --> 00:00:24,590
Now, it's a common challenge for
developers, accidentally committing

7
00:00:24,590 --> 00:00:26,560
secrets into Git repositories.

8
00:00:26,960 --> 00:00:28,680
But it doesn't have to be costly.

9
00:00:29,080 --> 00:00:33,169
I'll show you how tools like
GitLinks and Harness Open Source

10
00:00:33,449 --> 00:00:37,559
can prevent this disaster and
protect your Git repositories.

11
00:00:37,779 --> 00:00:38,809
Let's dive in.

12
00:00:39,309 --> 00:00:40,859
Let's start with the first question.

13
00:00:40,989 --> 00:00:43,129
Why are Git repositories vulnerable?

14
00:00:43,559 --> 00:00:44,569
There are a few reasons.

15
00:00:44,589 --> 00:00:48,379
The first one is the very collaborative
nature of these resources.

16
00:00:48,819 --> 00:00:54,089
Multiple developers are working on this
together, and there are higher chances of

17
00:00:54,089 --> 00:00:56,429
someone accidentally committing secrets.

18
00:00:57,370 --> 00:01:00,199
The second one is the ease
of accidental commits.

19
00:01:00,360 --> 00:01:03,809
you are checking in multiple files
that you are working on locally.

20
00:01:03,839 --> 00:01:06,680
Maybe there is a n file
you are trying to test.

21
00:01:06,940 --> 00:01:09,099
Maybe that has a database credential.

22
00:01:09,390 --> 00:01:13,689
accidentally committing secrets is
actually more common than you might think.

23
00:01:14,470 --> 00:01:18,470
Then of course there are growing number
of repositories and code base that

24
00:01:18,470 --> 00:01:23,600
your admin is managing There are public
repositories private repositories

25
00:01:23,650 --> 00:01:28,910
open source contributions And with
containerized applications microservices

26
00:01:29,310 --> 00:01:37,175
There are too many repositories these
days that without Proper access control

27
00:01:37,225 --> 00:01:42,315
and procedures in place, it's much
easier for some secrets to just seep

28
00:01:42,345 --> 00:01:45,245
in to your organization repositories.

29
00:01:45,745 --> 00:01:49,335
Let's look at what we
mean by secrets in code.

30
00:01:49,385 --> 00:01:53,405
So here we have the main, the
protected branch, or supposed to be

31
00:01:53,405 --> 00:01:56,885
protected branch, and then a developer
is working on a feature branch.

32
00:01:57,334 --> 00:02:00,795
they're accidentally committing
an API key, and then, someone

33
00:02:00,795 --> 00:02:04,405
caught it, and they're adding
a commit to remove the API key.

34
00:02:04,905 --> 00:02:08,975
The security fix is the green branch,
which is catching all those issues.

35
00:02:09,155 --> 00:02:14,025
Then there's a DB update, another feature
branch, the blue branch, and then someone

36
00:02:14,035 --> 00:02:18,985
accidentally adds the database credential,
an SSH key, and an access token.

37
00:02:19,425 --> 00:02:23,525
And then again, the green
security fix reverts the sensitive

38
00:02:23,525 --> 00:02:24,945
information using a commit.

39
00:02:25,505 --> 00:02:29,295
But an interesting thing here
is, all of these are just

40
00:02:29,295 --> 00:02:31,935
staying in, in your history.

41
00:02:32,165 --> 00:02:36,155
so it's incredibly
difficult to erase, history.

42
00:02:36,405 --> 00:02:42,755
Once these sensitive information or
secrets are going into Git, it, it gets

43
00:02:42,795 --> 00:02:46,965
highly likely to be used by bad actors.

44
00:02:47,465 --> 00:02:48,325
So what do we do?

45
00:02:49,015 --> 00:02:50,955
We shift left on security.

46
00:02:51,555 --> 00:02:53,345
What do we mean by shifting left?

47
00:02:53,695 --> 00:02:58,905
It means catching issues at an early
stage in the development life cycle.

48
00:02:59,345 --> 00:03:00,445
Why that's better?

49
00:03:00,945 --> 00:03:06,255
The benefits are it minimizes the
exposure risk, the lower time it is

50
00:03:06,255 --> 00:03:08,715
exposed, easier it is to remediate.

51
00:03:08,715 --> 00:03:16,445
It also reduces the time and effort you
need to spend fixing the issues later.

52
00:03:16,945 --> 00:03:19,935
So we'll present you
two open source tools.

53
00:03:20,605 --> 00:03:26,385
The first one is Gitlix, an open source
secret scanner for Git repositories, but

54
00:03:26,385 --> 00:03:29,955
it can also scan files and directories.

55
00:03:30,455 --> 00:03:34,285
The key features are predefined
and customizable secret patterns.

56
00:03:34,335 --> 00:03:38,725
We'll show you a predefined
secret pattern in the next slide.

57
00:03:39,395 --> 00:03:41,705
It's lightweight and pretty fast.

58
00:03:41,705 --> 00:03:43,065
You can use it locally.

59
00:03:43,365 --> 00:03:46,195
You can also use it in CI CD integration.

60
00:03:46,695 --> 00:03:49,025
Here's an example of GitLinks rules.

61
00:03:49,335 --> 00:03:55,975
So this is a piece of code I proposed
to Gitlix to add Harness Personal

62
00:03:55,975 --> 00:03:58,135
Access Token and Service Account Token.

63
00:03:58,475 --> 00:03:59,305
kudos to Gitlix team.

64
00:03:59,815 --> 00:04:03,265
Their contribution process
is very straightforward and

65
00:04:03,275 --> 00:04:04,915
the pull request was merged.

66
00:04:05,405 --> 00:04:08,955
So now Harness Personal Access
Token and Service Account Token

67
00:04:09,305 --> 00:04:11,095
can be recognized by Gitlix.

68
00:04:11,445 --> 00:04:12,625
So let's go over this.

69
00:04:12,745 --> 00:04:16,775
The ID, of course, the
unique name, Harness API key.

70
00:04:17,210 --> 00:04:20,210
Description tells the reader what this is.

71
00:04:20,210 --> 00:04:23,600
RegEx, let's explain the RegEx.

72
00:04:24,140 --> 00:04:29,480
The term would start with PAT or SAT
for personal access token or service

73
00:04:29,480 --> 00:04:35,850
account token, followed by a dot,
followed by a 22 character alphanumeric.

74
00:04:36,600 --> 00:04:42,050
It could also include a dash or underscore
for this part, followed by a dot.

75
00:04:42,595 --> 00:04:46,305
And then 24 character alphanumeric
followed by a dot and a

76
00:04:46,335 --> 00:04:47,875
20 character alphanumeric.

77
00:04:48,375 --> 00:04:53,805
for most of us, we'll probably ask
ChatGPT to generate, brackets for us.

78
00:04:54,115 --> 00:04:57,445
And you can also, explain
using, some services.

79
00:04:57,945 --> 00:04:59,525
Let's see how GitLinks works.

80
00:04:59,845 --> 00:05:03,705
just like the previous screen,
the detector, detection process

81
00:05:03,705 --> 00:05:06,295
will use a pattern based scanning.

82
00:05:06,485 --> 00:05:07,485
It will look at the pattern.

83
00:05:07,880 --> 00:05:12,820
If there is a secret that matches that
pattern, then it would be detected.

84
00:05:13,550 --> 00:05:17,290
You can configure rules, and
then there are some modes.

85
00:05:17,370 --> 00:05:22,200
You can configure GitLinks locally for
local scanning, as pre commit hooks,

86
00:05:22,680 --> 00:05:25,340
and of course in CI CD pipelines.

87
00:05:25,840 --> 00:05:28,600
Now, GitLinks is one part of the puzzle.

88
00:05:29,560 --> 00:05:34,310
Let's introduce the second
tool, Harness Open Source.

89
00:05:34,820 --> 00:05:41,570
Harness Open Source comes as a lightweight
Go binary and you can install it locally.

90
00:05:41,630 --> 00:05:48,159
You can run it on a 4 digital
ocean droplet or an AWS EC2 VM.

91
00:05:48,340 --> 00:05:53,390
Harness Open Source, this instance
comes with user management as

92
00:05:53,390 --> 00:05:55,400
well as a built in secret manager.

93
00:05:56,320 --> 00:06:00,200
Projects within Harness open source,
you can relate to GitHub orgs.

94
00:06:00,600 --> 00:06:04,360
Each project can have
one or more repositories.

95
00:06:04,850 --> 00:06:08,500
And the CICD pipelines are
tied to each repository.

96
00:06:08,560 --> 00:06:11,940
You can have one or more
pipelines within each repository.

97
00:06:12,580 --> 00:06:16,420
You can also have built in artifact
registry for pushing and pulling

98
00:06:16,480 --> 00:06:21,275
artifacts, for example, Docker
images, as well as Git spaces.

99
00:06:21,535 --> 00:06:24,655
Git spaces are the pre
configured dev environment.

100
00:06:24,975 --> 00:06:28,345
If you have heard something called
a dev container, it's based on that.

101
00:06:28,645 --> 00:06:30,825
Think of this as GitHub code spaces.

102
00:06:31,125 --> 00:06:33,585
We'll learn more about
these during the demo.

103
00:06:34,180 --> 00:06:37,890
How is Harness open source,
different from Harness platform?

104
00:06:38,030 --> 00:06:41,460
Harness open source is ideal for
individual developers or small

105
00:06:41,470 --> 00:06:47,740
teams, comes with these five modules,
codepository, CI, CD, Artifact registry,

106
00:06:47,750 --> 00:06:49,670
and pre configured dev environment.

107
00:06:49,710 --> 00:06:51,250
We are calling it Git spaces.

108
00:06:51,780 --> 00:06:54,990
And then, of course, there's
an easy upgrade to the platform

109
00:06:54,990 --> 00:06:56,970
with more modules, with robust.

110
00:06:57,310 --> 00:06:59,360
governance, and scalability.

111
00:07:00,210 --> 00:07:01,920
All right, so enough talking.

112
00:07:02,190 --> 00:07:07,450
Now time to go into the demo on how
we can prevent accidental secret

113
00:07:07,450 --> 00:07:09,800
commits to the Git repositories.

114
00:07:10,580 --> 00:07:12,740
Let's get started with
Harness open source.

115
00:07:13,270 --> 00:07:16,870
I'll provide the link to this
documentation in the video description.

116
00:07:17,370 --> 00:07:22,170
So here, all you need is Docker
installed on your machine and you

117
00:07:22,170 --> 00:07:24,130
can get started with this command.

118
00:07:24,610 --> 00:07:29,040
So I've already run this command
and if you go to localhost port

119
00:07:29,090 --> 00:07:33,469
3000, you'll see the Harness open
source instance up and running.

120
00:07:33,500 --> 00:07:38,880
All you need to do is create an account
and then you'll see a screen like this.

121
00:07:39,470 --> 00:07:43,150
Projects in Harness open
source is like collection of

122
00:07:43,170 --> 00:07:45,024
repositories, something like this.

123
00:07:45,245 --> 00:07:46,405
GitHub orgs.

124
00:07:46,705 --> 00:07:49,015
So let's actually create a project.

125
00:07:49,535 --> 00:07:53,865
I'll call this Confort2,
create the project.

126
00:07:54,414 --> 00:07:58,415
Once you're within the project,
you can either import repositories

127
00:07:58,445 --> 00:07:59,894
or create a new repository.

128
00:08:00,485 --> 00:08:02,144
Let me import a repository.

129
00:08:02,265 --> 00:08:04,445
I'll choose GitHub as the provider.

130
00:08:05,415 --> 00:08:08,535
I'll use Harness Community
as the organization.

131
00:08:08,930 --> 00:08:13,290
And I'll use a popular cloud
native project called PodInfo.

132
00:08:13,710 --> 00:08:17,010
It's a public repository, so
I don't require authorization.

133
00:08:17,440 --> 00:08:23,150
I could import pipelines, for example,
GitHub Actions from GitHub, or if

134
00:08:23,150 --> 00:08:25,699
it's GitLab, the pipelines from there.

135
00:08:25,760 --> 00:08:28,559
But for this one, I'll
create the pipelines myself.

136
00:08:28,870 --> 00:08:30,920
so I'll skip importing the pipelines.

137
00:08:31,915 --> 00:08:38,805
Let me import the repository it's almost
instant and then I see the repository is

138
00:08:39,415 --> 00:08:46,604
imported here Once you have the repository
It's just like a Git provider you can

139
00:08:46,604 --> 00:08:52,555
do all operations That you typically do
for example, you can make a clone You

140
00:08:52,555 --> 00:08:55,265
can contribute it by adding a new file.

141
00:08:55,265 --> 00:09:03,335
You have commits branches pull requests
So let's clone this repository locally.

142
00:09:03,635 --> 00:09:05,645
So what I'll do is I'll hit clone.

143
00:09:06,145 --> 00:09:07,865
I'll copy the clone URL.

144
00:09:08,365 --> 00:09:13,375
Once you have copied the clone URL, you
can choose your favorite code editor

145
00:09:13,775 --> 00:09:15,995
and you can clone the repository.

146
00:09:16,025 --> 00:09:18,295
For example, here I'm using VS Code.

147
00:09:18,745 --> 00:09:25,875
I'll click on clone repository, paste in
the link and then I'll select a location

148
00:09:26,115 --> 00:09:29,205
within my local machine And hit clone.

149
00:09:29,705 --> 00:09:33,045
Alright, you can see the
repository is cloned locally.

150
00:09:33,545 --> 00:09:38,355
Once the repository is cloned,
I'll try to add a secret and

151
00:09:38,355 --> 00:09:39,655
try to commit that secret.

152
00:09:40,405 --> 00:09:45,225
You can follow this GitHub repo, harness
community, harness open source lab.

153
00:09:45,245 --> 00:09:47,985
I'll add the link in
the video description.

154
00:09:48,615 --> 00:09:50,765
And here you can see an example.

155
00:09:50,825 --> 00:09:56,885
If you scroll down, you'll see
an example of secret detection.

156
00:09:57,535 --> 00:09:59,185
So let's follow this.

157
00:09:59,835 --> 00:10:03,775
We have an example for a
harness personal access token.

158
00:10:04,115 --> 00:10:07,935
It follows the same pattern, but
it's not actually a valid secret.

159
00:10:08,710 --> 00:10:15,579
So let me copy this and then
go back to my VS code here.

160
00:10:15,580 --> 00:10:17,240
I'll add a new file.

161
00:10:17,740 --> 00:10:18,850
You can name it anything.

162
00:10:18,930 --> 00:10:25,380
I'll call it, config dot YAML
and paste in what I just copied.

163
00:10:25,880 --> 00:10:26,860
You can see that.

164
00:10:27,525 --> 00:10:33,385
This is Pat, followed by the same
pattern, what we showed you, for

165
00:10:33,385 --> 00:10:36,305
harness API key, as a gate leaks rules.

166
00:10:36,755 --> 00:10:43,225
So let me save this file before I actually
try to push this to the repository.

167
00:10:43,615 --> 00:10:50,515
I'll go back and within the repository
I'll click on manage repository.

168
00:10:51,015 --> 00:10:55,225
Under security, that there's
a toggle for secret scanning.

169
00:10:55,625 --> 00:10:59,685
It block commits containing secrets
like passwords, API keys, and tokens.

170
00:10:59,935 --> 00:11:01,815
So this is based on GitLinks.

171
00:11:02,355 --> 00:11:06,555
So let me toggle it to enable
secret scanning and hit save.

172
00:11:07,055 --> 00:11:11,805
So once we have enabled secret
scanning, then we'll go back to VS

173
00:11:11,835 --> 00:11:17,835
Code and add a meaningful message,
whoops, and then hit commit.

174
00:11:18,335 --> 00:11:24,885
I'll try to sync changes and then
it'll ask me for my, get credentials.

175
00:11:25,385 --> 00:11:31,865
So for the username, you can go here,
In files and you'll see there's a button

176
00:11:32,215 --> 00:11:38,105
called clone click the button clone And
then generate clone credential So you

177
00:11:38,105 --> 00:11:40,075
can see my username is the one for you.

178
00:11:40,085 --> 00:11:44,515
It will be different and then there
is the password or api token as well.

179
00:11:44,585 --> 00:11:50,555
So let me copy this go back to vs
code So for username i'll enter my

180
00:11:50,555 --> 00:11:55,665
name the one For password, I already
have it copied in my clipboard.

181
00:11:55,745 --> 00:12:02,795
I'll paste it and then You'll see that
I was not able to push the commit Let me

182
00:12:02,835 --> 00:12:06,035
open the git log to see what's the issue

183
00:12:06,535 --> 00:12:17,215
So I can see that it says failed to
push because The push contains secret

184
00:12:17,215 --> 00:12:20,325
You So it found a generic API key.

185
00:12:20,595 --> 00:12:22,655
it even tells, where's the file.

186
00:12:22,725 --> 00:12:23,924
It's config.

187
00:12:23,924 --> 00:12:30,175
yaml file, the secret, the
commit ID, and a description.

188
00:12:30,215 --> 00:12:35,375
It detected a generic API key, potentially
exposing access to various services.

189
00:12:35,875 --> 00:12:36,325
All right.

190
00:12:36,425 --> 00:12:42,425
This shows that when I have the secret
scanning enabled in my Harness open

191
00:12:42,425 --> 00:12:47,725
source repository, which is based
on GitLinks, it looks for a pattern.

192
00:12:48,295 --> 00:12:55,125
So this pattern matches one of the rules
in GitLinks that is Harness API key.

193
00:12:55,735 --> 00:13:00,165
And if it finds that pattern, they need to
understand that this is actually a secret.

194
00:13:00,665 --> 00:13:04,979
So I won't let it go in
to the Git repository.

195
00:13:05,479 --> 00:13:11,829
This is much better than you find
a leaked credential in your Git

196
00:13:11,829 --> 00:13:17,889
repository and then trying to remediate
and trying to minimize the exposure.

197
00:13:18,509 --> 00:13:19,979
There is one heads up though.

198
00:13:20,194 --> 00:13:26,574
So the heads up is this method
prevents new API keys and secrets

199
00:13:26,824 --> 00:13:29,164
from going in to the Git repository.

200
00:13:29,584 --> 00:13:36,844
So after you have enabled, it prevents
new, secrets, but if you already have

201
00:13:36,864 --> 00:13:42,514
existing secrets in the repository, it
doesn't scan and find and detect those.

202
00:13:42,524 --> 00:13:44,314
So that's something to keep in mind.

203
00:13:44,814 --> 00:13:45,734
Let's sum up.

204
00:13:46,494 --> 00:13:47,504
So in this video.

205
00:13:47,884 --> 00:13:52,814
We understood why Git repositories are
vulnerable due to their collaborative

206
00:13:52,824 --> 00:13:57,814
nature, the ease of accidental
commits, and the growing number of

207
00:13:57,834 --> 00:14:00,364
repositories and codebases these days.

208
00:14:00,924 --> 00:14:04,474
We highlighted the right
approach, which is shifting left

209
00:14:04,764 --> 00:14:05,944
for your development workflow.

210
00:14:06,444 --> 00:14:09,774
Then we talked about two
popular open source tools.

211
00:14:10,194 --> 00:14:14,644
GitLinks and Harness open source
and how they can come together

212
00:14:14,884 --> 00:14:18,714
from preventing accidental
secrets in your Git repositories.

213
00:14:18,924 --> 00:14:19,964
So what are the secrets?

214
00:14:20,054 --> 00:14:25,034
The secrets could be API keys,
personal access tokens, database

215
00:14:25,034 --> 00:14:30,944
credentials, any sensitive information
you don't want to go on public.

216
00:14:31,444 --> 00:14:36,364
Then we watched a demo on how easy it is
to get started with Harness open source

217
00:14:36,644 --> 00:14:41,324
with its light footprint You can get
started within a few seconds whether you

218
00:14:41,324 --> 00:14:48,154
install it locally or host it yourself
on a cloud VM We saw how we can import a

219
00:14:48,174 --> 00:14:54,974
repository Enable secret scanning and once
it's enabled it will prevent any secrets

220
00:14:55,044 --> 00:14:58,064
that is defined within a GitLinks rules.

221
00:14:58,494 --> 00:15:02,814
And also, if your organization
secret is not already in

222
00:15:02,854 --> 00:15:07,014
GitLinks rule, the contribution
process is very straightforward.

223
00:15:07,024 --> 00:15:09,894
So you can define your own GitLinks rules.

224
00:15:10,454 --> 00:15:14,704
I really hope you give Harness
open source and GitLinks a try.

225
00:15:15,134 --> 00:15:20,084
I'll add all the required links for this
presentation in the top description,

226
00:15:20,394 --> 00:15:23,064
as well as you can find me on LinkedIn.

227
00:15:23,064 --> 00:15:23,079
for listening.

228
00:15:23,659 --> 00:15:25,459
Thank you for joining this talk.

