1
00:00:00,500 --> 00:00:01,310
Hello everyone.

2
00:00:01,640 --> 00:00:06,170
This is RA Maria, and today I'll
be talking about cloud native MDM

3
00:00:06,260 --> 00:00:09,469
utilizing Kubernetes orchestration
for enterprise data quality.

4
00:00:09,530 --> 00:00:13,450
At scale Master data management
system is evolving from monolithic

5
00:00:13,450 --> 00:00:15,220
systems to cloud native architectures.

6
00:00:15,220 --> 00:00:19,470
This transformation leverages Kubernetes
orchestration to deliver enterprise

7
00:00:19,470 --> 00:00:23,940
grade data quality at unprecedented
scale, combining the reliability of.

8
00:00:24,915 --> 00:00:28,005
Traditional MDM with agility
of modern cloud platforms,

9
00:00:28,504 --> 00:00:30,515
why master data management must evolve?

10
00:00:31,015 --> 00:00:34,405
Traditional MDM systems are heavyweight
stateful and slow to scale in

11
00:00:34,405 --> 00:00:37,405
modern distributed environments
with hybrid and multi-cloud

12
00:00:37,405 --> 00:00:42,505
deployments, it they demand flexible
portable data management solutions.

13
00:00:43,045 --> 00:00:44,800
No, we are into microservices era.

14
00:00:45,430 --> 00:00:47,545
Distributed architectures
require MDF systems.

15
00:00:48,310 --> 00:00:52,890
That can integrate seamlessly across
services to meet the real time demands.

16
00:00:53,100 --> 00:00:57,060
Modern enterprises need immediate
data quality and availability

17
00:00:57,060 --> 00:00:58,620
for critical business decisions.

18
00:00:59,120 --> 00:01:01,820
The enterprise IT landscape
has fundamentally changed with

19
00:01:01,850 --> 00:01:06,530
containerization, making workloads,
portable and dynamic cloud native MDM

20
00:01:06,590 --> 00:01:10,925
Rethinks data mastering principles to
work seamlessly in Kubernetes ecosystems

21
00:01:11,275 --> 00:01:12,685
providing a single source of truth.

22
00:01:13,385 --> 00:01:17,165
For customers, products, suppliers,
and financial accountants.

23
00:01:17,665 --> 00:01:20,965
Cloud native MDM represents
a complete redesign of data

24
00:01:20,965 --> 00:01:24,355
mastering for distributed, elastic
and automated environments.

25
00:01:24,985 --> 00:01:29,935
It's not simply ization the legacy MDM
products, but fundamentally rethinking

26
00:01:30,475 --> 00:01:33,775
how data quality and governance
work in modern infrastructure.

27
00:01:34,275 --> 00:01:38,535
With microservices first, design
each MDM capability like matching.

28
00:01:38,595 --> 00:01:40,035
Merging validation.

29
00:01:40,455 --> 00:01:43,875
Governance operates as its own
containerized service with clear

30
00:01:43,875 --> 00:01:45,435
boundaries and responsibilities.

31
00:01:45,935 --> 00:01:50,215
Kubernetes manifest provide declarative
infrastructure, helm charts and GI tops,

32
00:01:50,275 --> 00:01:53,785
manage deployments and configuration
through code-based approaches.

33
00:01:54,285 --> 00:01:55,755
Horizontal part autoscaler.

34
00:01:56,255 --> 00:02:00,725
Handles variable data loads automatically
scaling resources up and down based

35
00:02:00,725 --> 00:02:03,185
on demand, providing elastic scaling.

36
00:02:03,685 --> 00:02:08,475
The backbone of orchestration pods
and deployments encapsulate my

37
00:02:08,475 --> 00:02:12,495
MD microservices, like matching
engines and data quality validators

38
00:02:12,555 --> 00:02:13,935
in managed scalable units.

39
00:02:14,435 --> 00:02:18,515
State full sets help in managing
ordered stable PO pod identities and

40
00:02:18,515 --> 00:02:23,645
persistent data for core MDM stores that
require state consistencies persistent

41
00:02:23,645 --> 00:02:28,685
volumes provide durable storage beyond
ephemeral containers, ensuring data

42
00:02:28,685 --> 00:02:35,115
service PO restarts and failures
with enforcing the secure, reliable

43
00:02:35,120 --> 00:02:39,240
interservice communication through
tools like T and linker service mass

44
00:02:39,240 --> 00:02:41,400
integration can be easily achieved.

45
00:02:41,900 --> 00:02:47,060
Kubernetes transforms MDM into fragile
static deployments to self-healing,

46
00:02:47,120 --> 00:02:51,440
dynamically scalable infrastructure
config maps, and secret manage

47
00:02:51,440 --> 00:02:53,390
governance rules and credentials.

48
00:02:53,720 --> 00:02:58,040
With horizontal port auto scaling responds
automatically to data processing spikes.

49
00:02:58,540 --> 00:02:58,760
How?

50
00:02:58,770 --> 00:03:03,825
How Help charge help in streamlining
MDM deployment with seamless single

51
00:03:03,825 --> 00:03:07,815
command deployment for integrated
multiple components in MDM architecture.

52
00:03:08,475 --> 00:03:12,735
Dynamic Parameterization for precise
environment specific configuration,

53
00:03:13,275 --> 00:03:17,055
robust dependency orchestration
for interconnected sub charts.

54
00:03:17,555 --> 00:03:22,625
Assurance of safe and reliable
roadblocks for control updates help

55
00:03:22,625 --> 00:03:27,005
revolutionizes the deployment of Complex
M Indian systems by encapsulating

56
00:03:27,005 --> 00:03:29,165
them as version ParaBit rise packages.

57
00:03:29,665 --> 00:03:33,595
This allows teams to consolidate
all critical events from

58
00:03:33,865 --> 00:03:35,395
data matching and cleansing.

59
00:03:35,485 --> 00:03:39,685
To user interfaces and APIs
into single manageable chart.

60
00:03:40,405 --> 00:03:44,785
The result is unparalleled consistency
across development, staging, and

61
00:03:44,785 --> 00:03:48,805
production environments drastically
minimizing configuration drift and

62
00:03:48,805 --> 00:03:53,210
accelerating time to value, which is hard
to achieve In monolithic MDM systems.

63
00:03:53,710 --> 00:03:57,475
Handling stateful workloads in Kubernetes
requires sophisticated patterns to

64
00:03:57,475 --> 00:04:01,795
ensure data integrity and consistency
across the distributed environments.

65
00:04:02,295 --> 00:04:06,095
Stateful sets provide stable network
identities and order deployment

66
00:04:06,095 --> 00:04:07,625
for critical MDM components.

67
00:04:08,125 --> 00:04:12,895
Abstract cloud pro storage providers
like A-W-S-E-B-S, Azure Disk, and GCP

68
00:04:12,895 --> 00:04:17,545
per certain disk provide persistent
volume so that data can be lost.

69
00:04:18,045 --> 00:04:22,515
Tools like ETCD or CockroachDB
ensure consistent state across

70
00:04:22,515 --> 00:04:26,965
nodes and prevent data corruption,
providing consensus protocols with.

71
00:04:27,465 --> 00:04:31,755
Cloud native MDM, it's relatively
easier to scale for millions of records.

72
00:04:32,115 --> 00:04:37,115
99.9% availability can be
achieved even when processing

73
00:04:37,115 --> 00:04:38,465
millions of records per day.

74
00:04:38,965 --> 00:04:44,605
Organizations can run 24 7 operations
with continuous data processing with

75
00:04:44,605 --> 00:04:50,205
automatic scaling, and up to a million
plus record can be mastered at enterprise

76
00:04:50,205 --> 00:04:52,155
scale with this infrastructure.

77
00:04:52,655 --> 00:04:56,155
Kubernetes native MDM handles massive
data loads through horizontal port

78
00:04:56,185 --> 00:05:01,045
autoscaler, sharded data stores,
and even driven architecture using

79
00:05:01,045 --> 00:05:06,825
Kafka and pulse resources quota scale
prevent service starvation while

80
00:05:06,825 --> 00:05:08,565
maintaining optimal performance.

81
00:05:09,065 --> 00:05:14,495
This architecture provides a
self-healing and resilient system.

82
00:05:14,995 --> 00:05:18,445
Likeness and readiness probes
automatically restart unhealthy

83
00:05:18,445 --> 00:05:22,405
pots, ensuring continuous
operation and monitor health.

84
00:05:22,405 --> 00:05:25,995
Continuously circuit breakers
prevent cascading failures between

85
00:05:25,995 --> 00:05:29,145
independent services through
intelligent failure isolation.

86
00:05:29,645 --> 00:05:33,755
Stateful sets smooth workloads to healthy
nodes with persistent storage intact

87
00:05:33,755 --> 00:05:38,755
during failures, providing automated
failover mechanism tools like chaos Mash.

88
00:05:39,255 --> 00:05:44,295
Validate that MDM survives unexpected
disruptions and maintains data integrity.

89
00:05:44,795 --> 00:05:50,395
Data quality without visibility is a
black box, which is one of the major

90
00:05:50,395 --> 00:05:55,975
problems in existing MDM solutions, but
with cloud native MDM, which integrates

91
00:05:56,335 --> 00:06:01,075
deep observability to transform
MDM from an opaque system into an

92
00:06:01,075 --> 00:06:03,325
actionable data operations platform.

93
00:06:03,825 --> 00:06:08,235
Prometheus exporters publish matrices
for data validation, throughput

94
00:06:08,925 --> 00:06:11,355
matching latency, and merge accuracy.

95
00:06:11,625 --> 00:06:16,035
Grafana dashboards provide at a glance
view of MDM Health and Performance

96
00:06:16,035 --> 00:06:18,225
with customizable visualizations.

97
00:06:18,725 --> 00:06:23,945
Jacker or Open Telemetry can be used
for distributed tracing to follow

98
00:06:23,945 --> 00:06:25,805
data records across microservices.

99
00:06:26,305 --> 00:06:31,045
Intelligent alerting can be placed
with notify, which notify DevOps

100
00:06:31,045 --> 00:06:33,085
teams to f fulfill data loads.

101
00:06:33,115 --> 00:06:38,595
Still governance rules or degraded SS
managing configuration manually error

102
00:06:38,595 --> 00:06:43,895
prone and lacks audit auditability,
tops brings discipline, traceability

103
00:06:43,955 --> 00:06:48,695
and agility to MDM, which is a critical
requirement in regulated industries.

104
00:06:49,195 --> 00:06:53,335
With version control rules, every
change in update to data matching

105
00:06:53,335 --> 00:06:57,295
survivorship or validation policies
is tracked and get with full history.

106
00:06:57,795 --> 00:07:03,585
Automated deployments using CSCD pipelines
apply Kubernetes manifest date, relatively

107
00:07:04,065 --> 00:07:06,615
reducing human error and deployment time.

108
00:07:07,115 --> 00:07:10,835
We can revert to known good
configurations if governance updates

109
00:07:10,835 --> 00:07:14,885
cause issues, ensuring system
stability and providing safe rollbacks.

110
00:07:15,385 --> 00:07:18,925
I would like to talk about
enterprise system integration.

111
00:07:18,955 --> 00:07:24,915
In this way, we can integrate with
API gateways using Kong A PG index,

112
00:07:25,065 --> 00:07:29,475
which expose master data to application
securely with rate limiting and

113
00:07:29,475 --> 00:07:34,415
authentication Streaming platforms
like Kafka and Puler can ingest raw

114
00:07:34,415 --> 00:07:38,100
data and broadcast master updates in
real time across in the enterprise.

115
00:07:38,600 --> 00:07:44,085
With for the legacy systems, integration
can be achieved using adapters and bridge

116
00:07:44,085 --> 00:07:50,325
services, which can bring mainframe or ERP
data into cloud native fabric seamlessly.

117
00:07:50,825 --> 00:07:55,265
DBT Airflow and Blue Feed data
warehouses and analytics platform

118
00:07:55,265 --> 00:08:00,785
with high quality master data can be
leveraged using ETL and ELT pipeline.

119
00:08:01,285 --> 00:08:05,875
By using standard APIs and event driven
patterns, MDM becomes an integrated

120
00:08:05,875 --> 00:08:10,795
hub rather than an isolated silo,
enabling comprehensive data governance

121
00:08:10,885 --> 00:08:12,595
across the enterprise ecosystems.

122
00:08:13,095 --> 00:08:16,905
Data mastering often involves
sensitive and regulated information.

123
00:08:17,505 --> 00:08:21,435
Cloud native MDM enforces comprehensive
security measures while maintaining

124
00:08:21,435 --> 00:08:23,385
cloud agnostic compliance capabilities.

125
00:08:23,885 --> 00:08:26,285
We can ensure security with zero trust.

126
00:08:26,285 --> 00:08:31,685
Networking where mutual tail is between
services via server mash ensures encrypted

127
00:08:31,685 --> 00:08:34,085
communication and identity verification.

128
00:08:34,585 --> 00:08:40,375
Kubernetes secrets integrated with
vault systems like HashiCorp Vault or

129
00:08:40,885 --> 00:08:44,905
secure for secured credential handling
can help in secured management.

130
00:08:45,405 --> 00:08:50,625
End-to-end encryption can be achieved
and data can be encrypted in transit

131
00:08:50,685 --> 00:08:56,315
with TLS and rest using cloud
provider KMS or CSI Drivers fine.

132
00:08:56,315 --> 00:09:00,995
Green access controls and comprehensive
audit logs to meet the G-D-P-I-C-C-P

133
00:09:01,115 --> 00:09:04,775
and other industry requirements can
be achieved with RPAC and audit.

134
00:09:05,275 --> 00:09:08,545
In one of the studies,
the our global retailer.

135
00:09:09,045 --> 00:09:14,385
Was face facing the a huge roadblock
with when they had, like with millions

136
00:09:14,385 --> 00:09:18,345
of products and customer records with
daily ingestion peaks During seasonal

137
00:09:18,345 --> 00:09:24,105
sales, legacy MDM downtime was affecting
order fulfillment and customer experience

138
00:09:24,605 --> 00:09:30,365
to get away with this problem, they
deployed MDMS microservice with he state

139
00:09:30,455 --> 00:09:32,795
full sets backed by cloud block storage.

140
00:09:33,350 --> 00:09:37,040
Kafka for ingestion and still were
secure interservice communication.

141
00:09:37,540 --> 00:09:43,720
As a result, they achieved 99.9% uptime,
including Black Fridays in the peak

142
00:09:43,720 --> 00:09:50,500
load, 30% cost reduction using elastic
scaling during off peak periods, and

143
00:09:51,490 --> 00:09:55,990
the rule deployments were easier like
never before with new governance rules

144
00:09:56,170 --> 00:09:58,720
via GI tops being deployed in minutes.

145
00:09:59,220 --> 00:10:00,445
With this.

146
00:10:00,535 --> 00:10:05,035
In this slide, I would like to talk about
some common best practices and pitfalls.

147
00:10:05,535 --> 00:10:08,925
Best practices include start small.

148
00:10:09,015 --> 00:10:12,945
Begin with one domain, like customer
data before expanding to other entities.

149
00:10:13,445 --> 00:10:18,635
Choose databases and consensus strategies
upfront to avoid costly refactoring later.

150
00:10:19,135 --> 00:10:23,370
Automate everything using C-A-C-I-C-D
for both application and data governance.

151
00:10:24,130 --> 00:10:28,110
Configurations, observe
relentlessly build comprehensive

152
00:10:28,110 --> 00:10:29,550
dashboards before going live.

153
00:10:29,550 --> 00:10:34,230
To ensure visibility, the most
common pitfalls which we have

154
00:10:34,230 --> 00:10:36,900
observed are stateless assumptions.

155
00:10:37,020 --> 00:10:41,870
Treating MDM like a stateless app
leads to data loss on PO restarts

156
00:10:42,470 --> 00:10:46,610
storage latency, ignoring storage
performance flows, matching and merging

157
00:10:46,610 --> 00:10:49,130
under load network complexities.

158
00:10:49,630 --> 00:10:51,460
Underestimating service match.

159
00:10:51,490 --> 00:10:55,120
Operational overhead and
configuration complexity may

160
00:10:55,120 --> 00:10:56,920
be a nightmare on later stages.

161
00:10:57,670 --> 00:11:01,600
Missing observability, skipping
monitoring, making debugging

162
00:11:01,630 --> 00:11:04,450
makes debugging impossible,
but data quality degrades.

163
00:11:05,020 --> 00:11:09,430
So all these things should be
in place before we go live.

164
00:11:09,930 --> 00:11:13,380
Cloud native MDM continues
evolving as enterprises modernize

165
00:11:13,380 --> 00:11:14,160
their data infrastructure.

166
00:11:14,460 --> 00:11:18,480
The future promises even greater
automation, intelligence and

167
00:11:18,480 --> 00:11:19,860
integration capabilities.

168
00:11:20,360 --> 00:11:25,490
Machine learning will improve identity
resolution, matching accuracy and survival

169
00:11:25,760 --> 00:11:27,890
survivorship decisions automatically.

170
00:11:28,390 --> 00:11:32,560
With serverless extensions, we can
offload specific data transformations

171
00:11:32,560 --> 00:11:37,365
to fast platforms for cost
effective event driven processing.

172
00:11:37,865 --> 00:11:41,075
MDMs deployment with multicast deployment.

173
00:11:41,495 --> 00:11:43,685
Nearer to closer to the data regions.

174
00:11:44,194 --> 00:11:49,235
Through edge computing and distributed
cluster architecture can be achieved.

175
00:11:49,735 --> 00:11:53,275
We can build self tuning systems
with automated data Pipelines with

176
00:11:53,305 --> 00:11:57,505
anomaly detection will minimize
human intervention requirements.

177
00:11:58,005 --> 00:12:02,330
Kubernetes and cloud native design have
redefined how data mastering can scale,

178
00:12:02,390 --> 00:12:04,280
heal, and integrate in modern enterprise.

179
00:12:05,165 --> 00:12:08,825
By embracing these technologies,
organizations achieve resilient,

180
00:12:08,885 --> 00:12:14,405
observable, and scalable MDM platforms
capable of supporting the next

181
00:12:14,405 --> 00:12:16,925
decade of data driven innovation.

182
00:12:17,425 --> 00:12:18,205
Thank you for your time.

