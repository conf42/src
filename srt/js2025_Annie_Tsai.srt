1
00:00:00,500 --> 00:00:01,610
Hello everyone.

2
00:00:02,090 --> 00:00:03,170
My name is Annie.

3
00:00:03,260 --> 00:00:05,270
I'm Anthropology Interactive.

4
00:00:05,420 --> 00:00:09,530
Today me and my co-founder Adam
Reheated, will be talking about

5
00:00:09,530 --> 00:00:13,754
Level Up, why TypeScript and
JavaScript for gain development.

6
00:00:14,254 --> 00:00:15,875
A little bit more about us.

7
00:00:15,935 --> 00:00:21,634
We started the game engine on development
with what technologies around two

8
00:00:21,634 --> 00:00:27,695
years ago, and he is a senior software
engineer and also product owners

9
00:00:28,055 --> 00:00:33,734
with experiences from Metri startup
in Sweden and also from Spotify.

10
00:00:34,665 --> 00:00:35,234
And.

11
00:00:36,029 --> 00:00:37,080
Me, Annie.

12
00:00:37,360 --> 00:00:41,980
I am doing public relations, UX
designer research and project management

13
00:00:41,980 --> 00:00:44,260
right now, oncology Interactive.

14
00:00:44,760 --> 00:00:50,430
When we are talking about games made
with web technologies, for example, HTML

15
00:00:50,430 --> 00:00:55,580
five, JavaScript and TypeScript there
are several game types that you will see.

16
00:00:55,580 --> 00:01:02,059
For example, it's most suitable for web
and mobile games, the game genres mostly

17
00:01:02,059 --> 00:01:07,460
related to puzzle games, cozy games,
hyper casuals, FPS and racing games.

18
00:01:08,115 --> 00:01:11,895
Who knows in the future what other
types of games you will be able to

19
00:01:11,895 --> 00:01:16,720
make with TypeScript and JavaScript,
since the technology is getting better.

20
00:01:17,220 --> 00:01:21,210
Now when we're talking about web and
mobile games, a lot of the people

21
00:01:21,210 --> 00:01:25,380
are still thinking about, maybe
a decade ago you're playing flash

22
00:01:25,380 --> 00:01:30,090
games on the website and trying to
hide the browser from your parents.

23
00:01:31,005 --> 00:01:33,345
But today it's actually evolving.

24
00:01:33,645 --> 00:01:39,355
There is upcoming huge numbers of
web and mobile game platforms that

25
00:01:39,355 --> 00:01:43,585
are forming and they're reaching
out to audiences around the globe.

26
00:01:43,975 --> 00:01:45,205
For example, poke.

27
00:01:45,955 --> 00:01:48,505
They have very high monthly.

28
00:01:49,040 --> 00:01:53,270
Monthly player numbers and they're
reaching out to players from

29
00:01:53,270 --> 00:01:55,910
over 100 different countries.

30
00:01:56,480 --> 00:02:01,070
And there's also platforms like Crazy
Games who are pushing the boundaries

31
00:02:01,130 --> 00:02:05,930
of the web and mobile game platforms
This year they actually published

32
00:02:05,930 --> 00:02:08,600
an FPS game on their platform.

33
00:02:09,100 --> 00:02:15,410
There are benefits for making games with
web technologies, especially on the part

34
00:02:15,410 --> 00:02:18,769
of the mobile and instant games areas.

35
00:02:19,079 --> 00:02:23,369
For example, traditionally when
game studios are making games,

36
00:02:23,369 --> 00:02:28,409
they're thinking about PC games
and also console games, and, but.

37
00:02:28,664 --> 00:02:32,384
There is a lot of players
who are on mobile and also on

38
00:02:32,624 --> 00:02:35,324
social media platforms online.

39
00:02:35,774 --> 00:02:40,424
And so your gain, when you are making
your gain for those kind of platforms,

40
00:02:40,664 --> 00:02:44,714
you are reaching out to a whole new
audience out there around the world

41
00:02:45,314 --> 00:02:48,554
and for example, discord activities.

42
00:02:48,864 --> 00:02:53,664
Now you can reach out to people
who are already on Discord and

43
00:02:53,694 --> 00:02:55,494
try to publish your games there.

44
00:02:56,454 --> 00:03:00,924
That's a whole new area that
the traditional game development

45
00:03:01,054 --> 00:03:05,934
studios probably are still in
the process of researching and

46
00:03:05,934 --> 00:03:07,854
exploring the possibilities.

47
00:03:08,354 --> 00:03:13,034
Also games made with web
technologies are actually going

48
00:03:13,034 --> 00:03:15,584
into kind of like a new era.

49
00:03:15,584 --> 00:03:22,304
For example, the cloud gaming services
are projected to reach around $25

50
00:03:22,304 --> 00:03:26,184
billion for the market size by 2027.

51
00:03:26,684 --> 00:03:31,394
And you can also starting to make
games where when people are streaming,

52
00:03:31,394 --> 00:03:35,894
there's an overlay where audiences
can play games in the chats.

53
00:03:36,225 --> 00:03:40,545
That's a whole new level of interactions
when it comes to entertainment.

54
00:03:41,295 --> 00:03:45,364
You can also you can also go
into education, marketing,

55
00:03:45,394 --> 00:03:50,074
and rapid prototyping with web
technologies in game development.

56
00:03:50,574 --> 00:03:56,514
The benefit of developing web and
mobile games is about accessible

57
00:03:56,514 --> 00:04:04,584
platforms, platforms that many people
can access without technological and

58
00:04:04,584 --> 00:04:07,854
financial constraints, for example.

59
00:04:08,724 --> 00:04:16,614
Imagine if you can play FPS or
RPG, the best kind of games that

60
00:04:16,614 --> 00:04:20,904
you've been dreaming about, but
they're mostly on consoles and pc.

61
00:04:20,904 --> 00:04:23,364
But now you can play on web browsers.

62
00:04:23,659 --> 00:04:27,949
And what it does is it eliminates
the installation barriers because

63
00:04:27,949 --> 00:04:31,579
you're starting to notice why
are most of the games nowadays?

64
00:04:31,849 --> 00:04:38,119
They require so much space in your
computers and then they expect you

65
00:04:38,119 --> 00:04:44,359
to buy expensive graphic cards in
order to play the games and also.

66
00:04:44,729 --> 00:04:49,989
It also remove the need to
have to buy extra toolings and

67
00:04:49,989 --> 00:04:52,029
equipments to play the games.

68
00:04:52,389 --> 00:04:57,489
It is also very versatile because
when you're using web technologies

69
00:04:57,489 --> 00:05:01,539
to make interactive environment,
it could be games, it could be

70
00:05:01,539 --> 00:05:03,849
educational, but it could be just.

71
00:05:04,204 --> 00:05:11,434
Another 3D experience on the web, and also
you are more likely to be able to access

72
00:05:11,674 --> 00:05:17,584
the 3D experiences and games anywhere
as long as you have internet available.

73
00:05:18,084 --> 00:05:21,579
If you look at the landscape
of web technologies for.

74
00:05:22,259 --> 00:05:22,949
Gaming.

75
00:05:22,979 --> 00:05:29,199
We've had WebGL for a long time now,
and WebGL two is supported in most big

76
00:05:29,199 --> 00:05:33,089
browsers for last few years as well.

77
00:05:33,149 --> 00:05:35,849
And on top of that, we have
Web GBU now, which is also

78
00:05:35,849 --> 00:05:38,549
supported in all major browsers.

79
00:05:39,049 --> 00:05:44,944
WebGL enables you to take advantage of
the GPU to create a high performance.

80
00:05:45,469 --> 00:05:46,280
Graphics.

81
00:05:46,619 --> 00:05:52,609
While they may not be at the same
level as other native applications,

82
00:05:52,969 --> 00:05:54,200
you can get pretty close.

83
00:05:54,710 --> 00:06:03,019
And I think that the capabilities
of them have not been taking

84
00:06:03,019 --> 00:06:04,734
advantage of to their fullest.

85
00:06:05,234 --> 00:06:10,575
And then we have web gpu, which gets
even closer to native capabilities

86
00:06:10,575 --> 00:06:16,125
for 3D rendering, as well as
paralyzed compute on the GPUs,

87
00:06:16,845 --> 00:06:18,525
which can be used in games as well.

88
00:06:19,025 --> 00:06:24,155
So why would you use JavaScript or
TypeScript for game development?

89
00:06:24,844 --> 00:06:26,974
Starting with JavaScript itself?

90
00:06:27,364 --> 00:06:30,215
It can aid rapid development very well.

91
00:06:30,874 --> 00:06:35,954
You don't have any long compile
times so you can quickly see what

92
00:06:36,014 --> 00:06:37,724
your changes to your code is doing.

93
00:06:38,224 --> 00:06:40,799
It is good for smaller projects as well.

94
00:06:40,869 --> 00:06:45,739
It's quick to get started with
and it's good for prototyping.

95
00:06:45,829 --> 00:06:49,309
Can very quickly share what you've
created as a website or upload it

96
00:06:49,309 --> 00:06:53,979
to platforms like Itch to share with
people to test what you've created.

97
00:06:54,479 --> 00:06:57,929
And it can be used in
more applications as well.

98
00:06:57,929 --> 00:07:01,259
So it's very much a general
purpose language nowadays.

99
00:07:01,759 --> 00:07:04,819
And then we have TypeScript,
which just makes JavaScript

100
00:07:05,119 --> 00:07:07,159
better in cer certain ways.

101
00:07:07,189 --> 00:07:12,049
It's better for larger scale applications
because having the typing makes it

102
00:07:12,049 --> 00:07:14,149
easier to understand code basis.

103
00:07:14,649 --> 00:07:20,439
And it can also improve your code quality
and maintain maintainability as it as

104
00:07:20,939 --> 00:07:23,879
a bit like self-documenting on its own.

105
00:07:24,284 --> 00:07:27,764
And also price type safety, which can
be good for reliability to ensure you're

106
00:07:27,764 --> 00:07:31,724
using correct types, especially if
you're working with libraries, so you're

107
00:07:31,724 --> 00:07:33,704
less reliant on external documentation.

108
00:07:34,204 --> 00:07:38,044
So if we were to compare this to
what's traditionally used in game

109
00:07:38,044 --> 00:07:42,169
development, like c plus and C when
we have static typing, so you have.

110
00:07:42,504 --> 00:07:44,934
That in similar ways
as C sharp and c plus.

111
00:07:45,034 --> 00:07:48,694
And it has similar compiled
time safety for types.

112
00:07:48,694 --> 00:07:54,894
If you using types strictly, so how strict
you want your types is configurable.

113
00:07:55,224 --> 00:07:59,464
So you can have very strict type checking
as you can have more relaxed type checking

114
00:07:59,464 --> 00:08:01,324
as well, depending on what you prefer.

115
00:08:01,824 --> 00:08:05,394
And, yeah, this really bridges
a gap between these the dynamic

116
00:08:05,394 --> 00:08:12,834
nature of JavaScript and these more
statically type checked languages.

117
00:08:13,334 --> 00:08:18,934
So you can get the best of both and yeah,
you can catch a lot of type related errors

118
00:08:18,994 --> 00:08:22,324
and just make your code more reliable.

119
00:08:22,824 --> 00:08:26,724
So one thing it can help with
a lot is hot tree loading.

120
00:08:27,114 --> 00:08:32,594
Because it is a scripting language,
it doesn't need to be compiled and you

121
00:08:32,594 --> 00:08:38,034
can easily run it from within an ex
existing application without having to

122
00:08:39,019 --> 00:08:41,874
recompiled entire application itself.

123
00:08:42,634 --> 00:08:43,149
So this can.

124
00:08:43,649 --> 00:08:48,349
Then be used like we're using it in
our game engine in its editor, so it's

125
00:08:48,379 --> 00:08:52,879
can monitor the code and transpire
the code as soon as it notices,

126
00:08:52,879 --> 00:08:55,309
changes, and execute that code.

127
00:08:55,699 --> 00:08:58,939
And all of this happens within a
couple of a hundred milliseconds.

128
00:08:59,439 --> 00:09:00,729
And this just helps you.

129
00:09:01,229 --> 00:09:05,459
See the changes of your code, which can
be very helpful when learning or when

130
00:09:05,459 --> 00:09:07,649
you're prototyping or experimenting.

131
00:09:08,339 --> 00:09:09,749
So you get that quick feedback.

132
00:09:10,249 --> 00:09:17,049
So one of the selling points for something
like JavaScript for game development is.

133
00:09:17,549 --> 00:09:22,799
That it has a great ecosystem and it has
a great open source culture as well, which

134
00:09:22,799 --> 00:09:28,739
makes it easier to collaborate with others
and to leverage existing functionality.

135
00:09:29,239 --> 00:09:31,989
And this is a bit different
traditional game development,

136
00:09:32,589 --> 00:09:35,049
walrus open source there as well.

137
00:09:35,629 --> 00:09:39,529
It is more common to have
proprietary technologies.

138
00:09:40,174 --> 00:09:41,344
And ecosystems.

139
00:09:41,374 --> 00:09:44,734
Many game engines, they come with
their own programming languages

140
00:09:45,184 --> 00:09:50,044
in some cases, and they have
their own version control systems.

141
00:09:50,284 --> 00:09:54,424
They have proprietary file
formats that are very difficult

142
00:09:54,424 --> 00:09:59,074
to version control or understand
or integrate with other tooling.

143
00:09:59,794 --> 00:10:05,484
And they often come with this big set
of tools that you have to learn that

144
00:10:05,844 --> 00:10:07,464
doesn't translate to anything else.

145
00:10:07,964 --> 00:10:12,344
So what you then have with JavaScript,
you have NPM, which has millions of

146
00:10:12,464 --> 00:10:17,944
packages, and you have a growing number
of tools and frameworks that can aid

147
00:10:17,944 --> 00:10:22,419
you, that also can be applied to other
things outside of game development.

148
00:10:22,919 --> 00:10:26,189
One topic that often comes up
in game development though is

149
00:10:26,219 --> 00:10:32,269
performance and JavaScript is highly
performant more performance than

150
00:10:32,719 --> 00:10:34,819
most people often believe It is.

151
00:10:35,599 --> 00:10:40,319
You can write type type script or
JavaScript in a way similar to C

152
00:10:41,160 --> 00:10:45,540
that can allow you to get very high
performance, especially when you

153
00:10:45,540 --> 00:10:47,550
are using like typed array buffers.

154
00:10:48,525 --> 00:10:54,305
The just in time compilation can optimize
it very well, but if you want to have

155
00:10:54,635 --> 00:10:58,775
even better performance, you also have
web assembly, which sometimes runs just

156
00:10:58,775 --> 00:11:03,944
as fast as JavaScript, but sometimes even
faster depending on what you're doing.

157
00:11:04,444 --> 00:11:07,055
And it can be used for certain
optimizations where you need it.

158
00:11:07,265 --> 00:11:10,745
If you're building a physics
engine or some other library

159
00:11:10,745 --> 00:11:12,425
for simulation in your game.

160
00:11:12,975 --> 00:11:17,985
You often don't have to touch web
assembly, but you have that option.

161
00:11:18,485 --> 00:11:22,805
It just allows you to write code in
different languages, like c plus or

162
00:11:22,805 --> 00:11:27,325
C or even assembly script, which is
the super set of TypeScript itself.

163
00:11:28,195 --> 00:11:30,625
Which can then compile to
web assembly and can run it.

164
00:11:31,375 --> 00:11:35,825
And one thing it also enables
is to integrate other libraries

165
00:11:36,005 --> 00:11:39,845
that you otherwise use in game
development, like path finding

166
00:11:39,845 --> 00:11:41,645
libraries or physics libraries.

167
00:11:42,455 --> 00:11:45,645
So you can get sort of the
functionality and the quality of

168
00:11:45,645 --> 00:11:49,695
these libraries that are already
used in other like AAA game engines.

169
00:11:50,400 --> 00:11:57,000
Thank you for attending our session today
and if you want to learn more about web

170
00:11:57,000 --> 00:12:04,940
gain developments and also interested in
our game engine ology engine made with web

171
00:12:04,940 --> 00:12:10,400
technologies, feel free to connect with
us on LinkedIn or checkout our website.

172
00:12:11,360 --> 00:12:13,490
I have included the QR code here.

