1
00:00:00,500 --> 00:00:01,280
Hello everyone.

2
00:00:02,239 --> 00:00:07,550
This is Uri and I working in ITO
20 years with cloud architecture,

3
00:00:07,550 --> 00:00:09,830
security and performance engineering.

4
00:00:10,280 --> 00:00:14,840
In my career, I've had opportunity
to help enterprises navigate the

5
00:00:14,840 --> 00:00:18,650
challenges of multi-cloud environments
from avoiding vendor lock.

6
00:00:19,340 --> 00:00:20,870
And ensuring compliance.

7
00:00:20,940 --> 00:00:25,350
And by squeezing last bit of like
performance out of every penny we

8
00:00:25,350 --> 00:00:29,099
spent and every infrastructure we
stood up there, I worked across

9
00:00:29,280 --> 00:00:34,900
AWS Azure GCP, and very extensively
on the, on cloud environments.

10
00:00:34,950 --> 00:00:38,190
So I've seen firsthand how
to manage multiple clouds,

11
00:00:38,190 --> 00:00:40,500
bring enormous flexibility.

12
00:00:41,370 --> 00:00:43,920
Also a fair share of headaches
comes with it, right?

13
00:00:44,000 --> 00:00:47,450
Like performance, bottlenecks,
increased attack surfaces and

14
00:00:47,450 --> 00:00:51,800
operational complexity often comes,
becomes a biggest roadblock for this.

15
00:00:51,840 --> 00:00:53,400
Any kind of innovation, right?

16
00:00:54,120 --> 00:01:00,050
So that's why like today I wanna share how
rust a language built for safety, speed,

17
00:01:00,050 --> 00:01:02,240
and reliability is changing the game.

18
00:01:02,840 --> 00:01:06,800
We look into how organizations are
using RAs to build high performance,

19
00:01:06,800 --> 00:01:11,240
secure tools that run consistently
across heterogeneous environments.

20
00:01:11,240 --> 00:01:14,840
And why the modern enterprise
like multi-cloud in is no

21
00:01:14,840 --> 00:01:15,890
longer an optional thing.

22
00:01:15,890 --> 00:01:17,600
It's a strategy imperative.

23
00:01:18,100 --> 00:01:22,715
So let's talk about why Rust,
actually, why I choose rust or

24
00:01:22,715 --> 00:01:27,339
any other, and why I wanna bring,
more attention to the rust, right?

25
00:01:27,789 --> 00:01:31,410
Rust is like modern programming
languages which is designed for speed,

26
00:01:31,410 --> 00:01:36,420
safety, and reliability, especially in
systems where performance is critical.

27
00:01:36,920 --> 00:01:41,360
It runs nearly as fast as C but
without any memory risks of C.

28
00:01:41,360 --> 00:01:42,500
That's one big thing.

29
00:01:43,070 --> 00:01:46,870
And it is safe actually one of the
very safe product where it prevents

30
00:01:46,870 --> 00:01:48,460
common bug, like memory leaks.

31
00:01:48,490 --> 00:01:52,560
That's one big thing with C
and crashes and, data, right?

32
00:01:53,140 --> 00:01:54,250
It's very reliable.

33
00:01:54,250 --> 00:01:58,480
Encourages clear maintainable code that
works consistently across the environment.

34
00:01:58,480 --> 00:02:01,060
It's popular in industries
where security and performance

35
00:02:01,060 --> 00:02:05,140
matters most, like finance, cloud
computing, and embedded systems.

36
00:02:06,070 --> 00:02:11,220
Companies use multi-cloud providers to
avoid lock-in cut cost, and to ensure

37
00:02:11,220 --> 00:02:13,170
compliance and improve resilience.

38
00:02:13,200 --> 00:02:14,700
But it's not easy, right?

39
00:02:14,700 --> 00:02:18,840
Security risks and management
complexity grow without good tools.

40
00:02:19,350 --> 00:02:21,990
Also, think of it like
managing multiple houses.

41
00:02:21,990 --> 00:02:26,350
So you have a house and you have
a second house, a third house.

42
00:02:27,250 --> 00:02:28,630
First house is fine.

43
00:02:28,730 --> 00:02:34,800
A vacation house is okay, and having a
third, fourth house, then the problem

44
00:02:34,800 --> 00:02:37,080
starts coming into the picture, right?

45
00:02:37,590 --> 00:02:39,570
So similar like with multi-cloud, right?

46
00:02:39,570 --> 00:02:46,170
Once one cloud, easy to manage, piece
of cake or two clouds, maybe it's okay.

47
00:02:46,530 --> 00:02:47,790
Or hybrid architecture.

48
00:02:47,790 --> 00:02:49,080
We are on form cloud.

49
00:02:49,110 --> 00:02:50,315
Maybe it's okay but.

50
00:02:50,745 --> 00:02:53,855
Once you expand beyond two, it's not easy.

51
00:02:53,855 --> 00:02:56,465
And it comes with this
operational challenges.

52
00:02:56,515 --> 00:03:00,595
Technological how people, how much
people need to know about each product.

53
00:03:00,595 --> 00:03:05,625
The ops is like biggest
challenge for enterprise teams.

54
00:03:06,125 --> 00:03:09,920
So y is an wire for a
multicloud excellence, right?

55
00:03:10,390 --> 00:03:15,060
Performance security and develop
developer experience, right?

56
00:03:15,510 --> 00:03:18,840
These are the three main things and
it is very ideal for building tools

57
00:03:18,840 --> 00:03:21,155
like work reli across AWS Azure.

58
00:03:21,655 --> 00:03:22,705
GCP, et cetera.

59
00:03:23,275 --> 00:03:28,075
So it's very fast, very smaller in terms
of footprint and more predictable apps.

60
00:03:28,525 --> 00:03:32,455
And also catches memory box
even before the code even runs.

61
00:03:32,825 --> 00:03:35,015
Great tooling and cross-platform support.

62
00:03:35,435 --> 00:03:37,615
So those are main things I would rust.

63
00:03:38,115 --> 00:03:42,355
So what, why rust multi-cloud
impact areas, right?

64
00:03:42,405 --> 00:03:44,655
What are the rust
multi-cloud impact areas?

65
00:03:45,635 --> 00:03:48,035
So it's

66
00:03:48,535 --> 00:03:51,555
performance container
orchestration excellence.

67
00:03:51,605 --> 00:03:52,775
That's one thing.

68
00:03:52,805 --> 00:03:55,595
Like container starts
faster and use less memory.

69
00:03:55,595 --> 00:03:58,955
And when return the rust, no
delay from garbage collection

70
00:03:58,955 --> 00:04:00,545
like some of the other languages.

71
00:04:00,545 --> 00:04:04,415
Some files quicker deployment
and cheaper storage.

72
00:04:04,415 --> 00:04:06,845
A big bank saw like almost.

73
00:04:07,565 --> 00:04:12,635
I'll say 30% to 40% save in latency.

74
00:04:13,065 --> 00:04:16,015
By choosing critical components
to rust, actually switching

75
00:04:16,015 --> 00:04:17,395
critical components to rust.

76
00:04:17,895 --> 00:04:19,875
And infrastructure as a code revolution.

77
00:04:19,905 --> 00:04:23,525
We all know that it, this revolution
now infrastructure as a code.

78
00:04:23,885 --> 00:04:28,795
So almost like two to three 2, 2, 2
third of companies are like, are trying

79
00:04:28,795 --> 00:04:31,045
rust based tools for cloud setups.

80
00:04:31,465 --> 00:04:32,725
Very few mistakes.

81
00:04:32,755 --> 00:04:36,745
Thanks to restrict checks and
preventive and, other checks performs

82
00:04:36,745 --> 00:04:39,715
and, faster provisioning or three
to four times quicker than the older

83
00:04:39,985 --> 00:04:41,335
way ways of doing the business.

84
00:04:41,385 --> 00:04:47,295
Deployments works like seamlessly across
different providers without any surprises.

85
00:04:47,715 --> 00:04:53,285
Great advantage of being with this tool
resilience multi-cloud and microservices.

86
00:04:53,385 --> 00:04:57,225
So the rust prevents problems in
the system that run across different

87
00:04:57,255 --> 00:05:01,125
clouds at the same time, it forces
you to handle errors, properly

88
00:05:01,605 --> 00:05:06,765
result apps that recover quickly from
failures and keep running smoothly.

89
00:05:07,125 --> 00:05:09,255
That's a big, that's a big thing actually.

90
00:05:09,795 --> 00:05:13,585
And coming to the security the
multi-cloud, the multi-cloud means like

91
00:05:13,585 --> 00:05:18,625
more places to attack rust helps close
the dose, prevents the type of bug that

92
00:05:19,075 --> 00:05:22,045
cause more severe cloud security problems.

93
00:05:22,315 --> 00:05:27,655
It has a stronger protection against bad
dependencies and accidentals secret leaks.

94
00:05:28,155 --> 00:05:31,675
And case studies and, global
financial Institute, as I said global

95
00:05:31,675 --> 00:05:33,565
Financial Institute almost saves like.

96
00:05:34,065 --> 00:05:38,265
Hefty amount of latency issues
are addressed, and it is like

97
00:05:38,765 --> 00:05:40,085
excellent product, right?

98
00:05:40,845 --> 00:05:45,375
It's a great product for healthcare
manufacturing, for data, for healthcare,

99
00:05:45,375 --> 00:05:50,655
like data processing or HIPAA
compliance, or, any other cost saving

100
00:05:50,655 --> 00:05:52,290
mechanisms they want put in place.

101
00:05:52,635 --> 00:05:54,735
Like it's a great tool for them.

102
00:05:55,065 --> 00:05:58,125
And also manufacturing, like
for better quality controls,

103
00:05:58,125 --> 00:05:59,535
smaller updates for devices.

104
00:06:00,145 --> 00:06:05,955
Smooth across cloud operations
and also coming to container

105
00:06:05,955 --> 00:06:07,995
orchestration and excellence.

106
00:06:08,075 --> 00:06:12,485
So container ecosystem from the backbone
of motor on cloud applications, but

107
00:06:12,485 --> 00:06:16,535
traditional runtime phases, performance
limitations like rust advantages.

108
00:06:17,135 --> 00:06:22,600
So it's way 40% faster than a normal,
traditional, bills and no memory overhead

109
00:06:23,350 --> 00:06:28,300
reduces almost 60 to 70% of memory
overhead and it's very predictable.

110
00:06:28,300 --> 00:06:31,370
Latency without GC pauses
during the critical operations.

111
00:06:31,420 --> 00:06:34,450
Smaller binary sizes leading to the
faster deployment and reduction of

112
00:06:34,450 --> 00:06:40,170
storage cost and fine grain resource
control for better multi-tenant isolation.

113
00:06:40,590 --> 00:06:44,820
So this is like some of the
components I'd like to highlight when.

114
00:06:45,315 --> 00:06:50,535
Coming on container orchestration
excellence, and also infrastructure as

115
00:06:50,535 --> 00:06:56,055
a code revolution is we already spoke
about this in the previous slide where

116
00:06:56,115 --> 00:07:01,985
it being almost like two to two, two
third of companies trying wide, trying

117
00:07:02,255 --> 00:07:07,645
rust, and also multi-cloud microservices,
mi like rust prevents problems.

118
00:07:07,725 --> 00:07:11,415
In systems that runs different co
clouds at the same time, forces you

119
00:07:11,415 --> 00:07:15,745
to handle errors properly and results
apps that recover quickly from the

120
00:07:15,745 --> 00:07:18,235
failures and keep running them smoothly.

121
00:07:18,735 --> 00:07:22,745
So ownership model benefits like
prevent data raises in concurrent

122
00:07:22,745 --> 00:07:26,615
operations guarantee, resource
cleanup, even during the failures

123
00:07:27,035 --> 00:07:28,715
and enforce proper error handling.

124
00:07:28,715 --> 00:07:33,665
And throughout the code basis, it may also
distribute system bound boundary release,

125
00:07:33,695 --> 00:07:38,485
explicit and error handling excellences,
like another great tool where results

126
00:07:38,485 --> 00:07:42,105
type forces explicit error handlings and.

127
00:07:43,035 --> 00:07:46,905
Pattern matching for
comprehensive error cases, error

128
00:07:47,685 --> 00:07:49,575
propagation with the operator.

129
00:07:49,575 --> 00:07:53,745
Custom error types for the
domain specific handling.

130
00:07:54,245 --> 00:07:56,495
So let's talk about the security.

131
00:07:56,495 --> 00:07:59,605
This is one big thing with multi-cloud.

132
00:07:59,605 --> 00:08:05,025
We all, we briefly touched it a couple
times already multi-cloud breaches

133
00:08:05,025 --> 00:08:07,295
are like very expensive on an average.

134
00:08:07,295 --> 00:08:11,075
And the single cloud instance due
to increased complexity and large

135
00:08:11,075 --> 00:08:18,515
attack surfaces and memory safety
critical, like 70% of high severe CVS

136
00:08:18,515 --> 00:08:22,675
or cloud infrastructure components
from memory safety issues precisely

137
00:08:22,945 --> 00:08:25,005
what rust prevents by design.

138
00:08:25,665 --> 00:08:28,455
And supply chain protection
like rust ecosystem offer.

139
00:08:28,800 --> 00:08:32,270
Strong dependency verification
and reproduction bills.

140
00:08:32,370 --> 00:08:35,640
Re reducing the supply chain
risk across cloud bond risk, and

141
00:08:35,640 --> 00:08:37,680
also secret management, right?

142
00:08:37,680 --> 00:08:38,940
That's one big thing.

143
00:08:38,940 --> 00:08:44,100
Again rust compliance time guarantees
helps prevent accidental secrets exposure

144
00:08:44,460 --> 00:08:48,540
between cloud environments, and it is a
very common source of breaches, right?

145
00:08:48,900 --> 00:08:49,770
We are aware of that.

146
00:08:50,270 --> 00:08:55,110
So in this case, study of a global
financial institute is a it's one of the

147
00:08:55,110 --> 00:08:59,540
bank that replaced Java services with
rust and which runs faster, cost less.

148
00:08:59,540 --> 00:09:02,790
And it was based way faster and safer.

149
00:09:03,290 --> 00:09:05,810
It got higher up time and
smaller deployment times.

150
00:09:05,810 --> 00:09:09,310
And no serious security issues
for months after launch.

151
00:09:09,410 --> 00:09:09,980
That's one.

152
00:09:10,030 --> 00:09:14,230
And coming to healthcare and
manufacturing they have faster data

153
00:09:14,230 --> 00:09:18,920
processing, HIPAA compliance and cost
savings millions of cost savings.

154
00:09:18,920 --> 00:09:23,850
It's and also coming to the manufacturing
like they have better quality control,

155
00:09:24,150 --> 00:09:28,800
smaller updates for our devices and
smoother cross cloud of operations.

156
00:09:29,300 --> 00:09:33,110
Emerging trends in the rust plus
multicloud rust becoming go-to

157
00:09:33,110 --> 00:09:35,060
language for secure cloud services.

158
00:09:35,570 --> 00:09:40,720
And it's leading in web assembly
apps that run the same on any cloud.

159
00:09:41,110 --> 00:09:45,650
And it's great for edge computing
instant setup and reliable performance.

160
00:09:46,150 --> 00:09:50,700
And let's talk about implementation
roadmap and key tech on this slide.

161
00:09:50,700 --> 00:09:54,330
And it starts small with
non-critical services.

162
00:09:54,410 --> 00:09:59,640
Low hanging fruits start something small
and target pain points like performance

163
00:09:59,640 --> 00:10:01,920
bottlenecks which applications.

164
00:10:02,420 --> 00:10:07,640
Has the highest pain points and, but
still has a very low hanging fruit.

165
00:10:08,120 --> 00:10:11,750
Pick something like that and try to
address those pain points starting there

166
00:10:12,380 --> 00:10:16,490
and build a reusable libraries for all
the clouds so that way it's easy and

167
00:10:16,490 --> 00:10:18,800
faster for our for the deployments.

168
00:10:19,655 --> 00:10:22,565
Measure improvements from
day one what you did.

169
00:10:22,565 --> 00:10:26,245
And as you days progress, keep
measuring the improvements and so

170
00:10:26,245 --> 00:10:32,655
that you can optimize better as even
things progress and scale successful

171
00:10:32,655 --> 00:10:34,475
patterns and rust helps you.

172
00:10:34,880 --> 00:10:38,810
Keep performance, security and reliability
consistent in complex cloud setups.

173
00:10:38,860 --> 00:10:39,610
So yeah.

174
00:10:39,760 --> 00:10:42,340
Scale success is pretty critical actually.

175
00:10:42,920 --> 00:10:46,900
So expense successful patterns
across our nations with reasonable

176
00:10:46,900 --> 00:10:50,230
components like and internal advocacy.

177
00:10:50,280 --> 00:10:52,910
So these are a few things I
would like to bring on to notice.

178
00:10:53,795 --> 00:10:57,965
Thank you very much for this opportunity
and listening to me all this time then.

179
00:10:58,025 --> 00:10:58,475
Thank you.

180
00:10:58,925 --> 00:11:02,025
I appreciate everyone's
effort here and thank you.

