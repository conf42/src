1
00:00:00,150 --> 00:00:00,679
Hello everyone.

2
00:00:00,690 --> 00:00:01,670
How's it going today?

3
00:00:01,710 --> 00:00:04,660
This is Con 42 and my name
is Muhammad Ahsan Ayaz.

4
00:00:04,740 --> 00:00:07,690
I'm a Google developer expert
in Angular and a software

5
00:00:07,690 --> 00:00:09,179
architect working at Scania.

6
00:00:09,230 --> 00:00:12,250
I'm also an author of two
worldwide published books,

7
00:00:12,389 --> 00:00:16,689
namely The Angular Cookbook, and
you can find me on my socials.

8
00:00:16,760 --> 00:00:19,579
Now today I'm going to actually
talk about something special,

9
00:00:19,579 --> 00:00:20,959
something that's close to my heart.

10
00:00:21,009 --> 00:00:25,450
The topic is from Patchwork to Picasso,
managing or refactoring 150 plus

11
00:00:25,480 --> 00:00:27,580
web projects and what we went wrong.

12
00:00:27,620 --> 00:00:29,070
You're gonna hear some stories.

13
00:00:29,070 --> 00:00:31,250
You're gonna also learn
quite a lot of things.

14
00:00:31,260 --> 00:00:34,120
So if you want to follow on my socials,
you can see them at the bottom.

15
00:00:34,160 --> 00:00:38,050
And I want you to take just a second
to take this picture from your camera.

16
00:00:38,100 --> 00:00:41,120
This allows you to give feedback
directly to me about the talk

17
00:00:41,120 --> 00:00:42,519
and anything that I can improve.

18
00:00:42,540 --> 00:00:44,019
So thank you in advance.

19
00:00:44,360 --> 00:00:46,740
Now, I want to ask you to UI question.

20
00:00:46,880 --> 00:00:50,250
A very existential question,
if I may dare to say that.

21
00:00:50,280 --> 00:00:56,659
What if you had cats, about 150 of
them, and you tried to walk them at

22
00:00:56,660 --> 00:00:59,430
the same time around your street?

23
00:00:59,480 --> 00:01:00,280
What would happen?

24
00:01:00,280 --> 00:01:01,870
Can you imagine what that would feel like?

25
00:01:01,879 --> 00:01:04,719
And this picture actually is a
depiction of what it could feel like.

26
00:01:04,770 --> 00:01:08,210
And that is exactly how I felt when
I was working on my second edition

27
00:01:08,240 --> 00:01:12,380
of the angular cookbook, because
I had more than 150 projects.

28
00:01:12,690 --> 00:01:13,370
to work with.

29
00:01:13,410 --> 00:01:16,460
And that's what we are going to talk
about in the next about half an hour.

30
00:01:16,490 --> 00:01:17,190
Who am I?

31
00:01:17,250 --> 00:01:18,770
I already introduced myself a bit.

32
00:01:18,790 --> 00:01:20,930
I'm an author of two
worldwide published books.

33
00:01:20,930 --> 00:01:24,910
I'm also working as a software architect
at Scania and I'm a GDE in Angular.

34
00:01:25,010 --> 00:01:27,889
I'm also maintainer of a lot of
open source projects as well.

35
00:01:27,909 --> 00:01:31,770
But one of the most famous ones is NGX
device detector, which is being used

36
00:01:31,770 --> 00:01:33,760
by more than 5, 000 projects on GitHub.

37
00:01:33,820 --> 00:01:37,635
I'm also someone who's recognized in
the developers community as an educator.

38
00:01:37,635 --> 00:01:40,655
And this is one of the awards
that I got recently at JS Pullin.

39
00:01:40,705 --> 00:01:44,505
And I've also been featured by Google
when I was working with them on

40
00:01:44,685 --> 00:01:47,614
this AI campaign for Google Gemini.

41
00:01:47,705 --> 00:01:49,585
Let me take you back to 2019.

42
00:01:49,635 --> 00:01:53,464
That's when Pact, which is one of
the publishers out there for books,

43
00:01:53,665 --> 00:01:56,525
reached out to me and they wanted
me to work on a video course.

44
00:01:56,575 --> 00:01:58,225
And that was on Ionic.

45
00:01:58,225 --> 00:02:00,835
So I hope A few of you know what Ionic is.

46
00:02:00,925 --> 00:02:02,885
And at first I was really happy.

47
00:02:02,885 --> 00:02:05,485
I was like, okay, this is super
cool because I was fascinated by

48
00:02:05,505 --> 00:02:09,405
all these, you know, thought leaders
and course creators out there.

49
00:02:09,405 --> 00:02:11,425
And I wanted to do that myself as well.

50
00:02:11,515 --> 00:02:12,865
But there were some challenges.

51
00:02:12,915 --> 00:02:17,680
I used to live in Pakistan back then
with my family and Even though it is

52
00:02:17,680 --> 00:02:21,510
a preferred way of living there, it
comes with some challenges when you're

53
00:02:21,510 --> 00:02:25,800
living with your family, which means
that each couple has one room to it.

54
00:02:25,810 --> 00:02:30,999
When I used to record, it was usually
at night when everyone was sleeping and

55
00:02:31,089 --> 00:02:33,429
that actually came with some challenges.

56
00:02:33,440 --> 00:02:37,639
So the first challenge was I was newly
married and I had very less furniture

57
00:02:37,649 --> 00:02:41,410
in my room, which means that whenever
I was trying to record something and

58
00:02:41,580 --> 00:02:46,985
even if there was a slight echo, that
would be recorded in the microphone and

59
00:02:46,995 --> 00:02:48,685
I would have to eventually re record it.

60
00:02:48,695 --> 00:02:53,125
So even the slightest sound of my
wife sort of moving on the bed would

61
00:02:53,135 --> 00:02:58,344
just make me angry and I was like,
ah, can you please not breathe?

62
00:02:58,345 --> 00:03:00,965
And then I would basically go out
in the living room and I would

63
00:03:00,975 --> 00:03:03,434
try to record there, but that
also came with some challenges.

64
00:03:03,445 --> 00:03:08,254
For example, or so I would hear all
these sounds and that would make me.

65
00:03:08,754 --> 00:03:09,825
Yeah, as you can imagine.

66
00:03:09,864 --> 00:03:13,274
Fortunately, I moved to Sweden
and you can see how happy I was.

67
00:03:13,325 --> 00:03:17,224
But once I published the video course,
I thought I would earn a lot of money

68
00:03:17,244 --> 00:03:18,724
and I started dreaming about it.

69
00:03:18,765 --> 00:03:23,344
But that was exactly the same time
when React Native came out and

70
00:03:23,344 --> 00:03:25,445
that basically kicked Ionic away.

71
00:03:25,494 --> 00:03:27,484
So the course actually did
not perform really well.

72
00:03:27,554 --> 00:03:30,894
Then in 2020, PAC reached out
to me again and they were like,

73
00:03:30,904 --> 00:03:32,204
can you write a book for us?

74
00:03:32,244 --> 00:03:34,164
And I was like, okay, I can do that.

75
00:03:34,299 --> 00:03:38,299
So long story short, I took over
10 months and wrote this Angular

76
00:03:38,320 --> 00:03:42,689
cookbook with over 80 plus projects
and we sold over 2000 copies of this.

77
00:03:42,700 --> 00:03:44,269
So this was really a success.

78
00:03:44,359 --> 00:03:47,679
After that in late 2022, PAG reached
out again and they were like, can you

79
00:03:47,679 --> 00:03:49,379
work on the second edition of the book?

80
00:03:49,379 --> 00:03:50,089
And I was like, okay.

81
00:03:50,444 --> 00:03:51,224
We can do that.

82
00:03:51,324 --> 00:03:55,904
And at first I thought it would be super
easy because I just had to migrate or

83
00:03:55,974 --> 00:03:57,704
update what has happened in Angular.

84
00:03:57,724 --> 00:03:59,524
And this is just a second edition, right?

85
00:03:59,554 --> 00:04:03,974
But when I looked at the code base, I
knew I was in trouble because there were

86
00:04:03,994 --> 00:04:10,124
more than 150 projects all staring at me
and they were waiting to be updated from

87
00:04:10,184 --> 00:04:12,924
Angular version 12 to Angular version 16.

88
00:04:12,964 --> 00:04:15,404
Now you may ask why, and
that is because Angular has a

89
00:04:15,404 --> 00:04:17,180
predictable release frequency.

90
00:04:17,180 --> 00:04:20,349
So every six months there is a
major release and there are about

91
00:04:20,360 --> 00:04:24,070
one to three minor patches as
well during the six months time.

92
00:04:24,120 --> 00:04:28,500
So for me, updating 150 projects
basically seemed like this.

93
00:04:28,539 --> 00:04:31,379
I knew it was going to
be super, super slow.

94
00:04:31,440 --> 00:04:32,500
So what did I do then?

95
00:04:32,579 --> 00:04:37,430
I basically found out this really
cool tool called NX, which is the new

96
00:04:37,480 --> 00:04:41,599
cool way of managing monorepositories
for your particular projects,

97
00:04:41,630 --> 00:04:45,075
especially if you have a lot of
applications and or libraries.

98
00:04:45,145 --> 00:04:50,234
So looking at that, I decided to have one
monorepository with two NX workspaces.

99
00:04:50,235 --> 00:04:55,495
So I had one GitHub repo that had two
NX workspaces in that one for start

100
00:04:55,614 --> 00:04:59,895
and one for final because my book is
basically in the form of a cookbook.

101
00:04:59,895 --> 00:05:02,955
So you have a Problem statement,
you follow the recipe and then

102
00:05:02,955 --> 00:05:04,275
you have the solution for it.

103
00:05:04,325 --> 00:05:06,025
This is how the architecture looked like.

104
00:05:06,025 --> 00:05:09,035
So if you look at here, we have
the GitHub repository that has

105
00:05:09,035 --> 00:05:10,595
two folders, start and final.

106
00:05:10,684 --> 00:05:14,865
And then in both of them, we have
these chapter folders and inside we

107
00:05:14,865 --> 00:05:18,525
have a folder for each particular
project or what we call a recipe.

108
00:05:18,625 --> 00:05:19,934
Let me ask you a question.

109
00:05:20,005 --> 00:05:23,485
Do you like ui ux or do you love ui ux?

110
00:05:23,545 --> 00:05:25,735
I think a few of you say yes.

111
00:05:25,765 --> 00:05:28,915
Then how many of you
really advocate for ui ux?

112
00:05:28,915 --> 00:05:33,565
That means you go to designers, talk about
that, or your product managers, et cetera.

113
00:05:33,625 --> 00:05:36,295
And then I want to ask you, how
many of you actually advocate

114
00:05:36,295 --> 00:05:38,094
for a great developer experience?

115
00:05:38,094 --> 00:05:42,885
Because what I wanted for
my audience or my readers.

116
00:05:43,460 --> 00:05:46,789
was a great developer experience,
but not just for them, but for

117
00:05:46,789 --> 00:05:50,719
also myself as well, because I was
about to migrate 150 plus projects.

118
00:05:50,729 --> 00:05:53,520
So with the current NX structure,
this is what I would get.

119
00:05:53,580 --> 00:05:58,039
I would get a GitHub repository with these
folders and I had to proceed with this.

120
00:05:58,080 --> 00:06:01,189
Now, by default, when I was
designing this, any recipe

121
00:06:01,259 --> 00:06:02,799
would have to work this way.

122
00:06:02,840 --> 00:06:05,770
The reader would have to
first go and do CD start.

123
00:06:06,039 --> 00:06:07,559
Then they would have to run NX.

124
00:06:07,580 --> 00:06:10,080
And then this whole name.

125
00:06:10,159 --> 00:06:14,070
Now, remember, whenever we are structuring
our folders or our applications in

126
00:06:14,169 --> 00:06:19,300
Angular or in NX, whenever we try to
give them a hierarchy of folder, that

127
00:06:19,310 --> 00:06:21,940
becomes the name of the project itself.

128
00:06:21,940 --> 00:06:25,364
So if I wanted something like CC
on changes, inside the chapter

129
00:06:25,364 --> 00:06:29,375
one folder, then the name of that
project becomes this, which is huge.

130
00:06:29,395 --> 00:06:31,234
And I think that's not
really easy to remember.

131
00:06:31,255 --> 00:06:34,195
So for running a recipe in the start
folder, they would have to run this.

132
00:06:34,205 --> 00:06:37,044
Similarly, they could also run
other recipes like this as well.

133
00:06:37,094 --> 00:06:40,844
Now, as you know, as developers, we
want to be dry, not exactly this,

134
00:06:40,885 --> 00:06:42,294
but I think you'll get my point.

135
00:06:42,334 --> 00:06:44,234
But also remember, we
need a really good DX.

136
00:06:44,969 --> 00:06:48,440
I'm going to actually come back to this
term again, which is developer experience.

137
00:06:48,450 --> 00:06:52,240
So my first goal was how do
I make it so that the name of

138
00:06:52,240 --> 00:06:53,830
the project is not as long.

139
00:06:53,870 --> 00:06:58,109
So the first goal was actually to run
this npm run serve and this command,

140
00:06:58,109 --> 00:07:00,890
which means that I don't want to cd.

141
00:07:01,049 --> 00:07:02,890
into the start or the final folder.

142
00:07:02,929 --> 00:07:06,280
I could just run either this or
run the same command, but with

143
00:07:06,309 --> 00:07:09,179
additional parameter called
final from the project's root.

144
00:07:09,380 --> 00:07:10,700
So nobody has to cd into it.

145
00:07:10,759 --> 00:07:12,020
And this was pretty simple.

146
00:07:12,080 --> 00:07:15,390
But the second goal was to avoid
even having the chapter name

147
00:07:15,450 --> 00:07:16,570
when I'm running this command.

148
00:07:16,659 --> 00:07:19,849
And you may ask why that's
because each recipe is unique.

149
00:07:19,849 --> 00:07:23,359
So in my entire code repository
in the start folder, there

150
00:07:23,369 --> 00:07:25,159
is no duplicate recipe.

151
00:07:25,169 --> 00:07:28,270
Similarly in the final folder,
All the recipes are unique.

152
00:07:28,270 --> 00:07:31,870
So I should be able to just use the recipe
name instead of specifying the chapter.

153
00:07:31,909 --> 00:07:33,260
Now, the first goal was really simple.

154
00:07:33,260 --> 00:07:38,600
As I mentioned, I just moved to the CD
step and the command into a script file.

155
00:07:38,840 --> 00:07:42,250
And I moved that script or use
that script in my packages.

156
00:07:42,380 --> 00:07:45,220
And with this change, I could actually
run this command pretty easily.

157
00:07:45,220 --> 00:07:48,220
So I could run this for the start
folder and this one for the final

158
00:07:48,220 --> 00:07:50,520
folder, just by using npm run surf.

159
00:07:50,580 --> 00:07:54,394
Now I had to focus on the second task,
which was how do I remove this change?

160
00:07:54,405 --> 00:07:59,525
chapter name from running the command and
can just use the recipe name in general.

161
00:07:59,525 --> 00:08:02,025
Now I want to emphasize that
at this point, I'm actually

162
00:08:02,044 --> 00:08:03,445
migrating these projects.

163
00:08:03,445 --> 00:08:06,555
So I'm actually creating those projects
one by one, and I'm migrating them

164
00:08:06,555 --> 00:08:11,324
from separate 150 plus projects to
two monorepositories start and final.

165
00:08:11,395 --> 00:08:13,264
Now, when I was doing
that, I had three options.

166
00:08:13,274 --> 00:08:19,025
One, when I'm actually creating a project,
I could exclude the chapter name from it.

167
00:08:19,145 --> 00:08:20,685
before the project is created.

168
00:08:20,725 --> 00:08:25,395
The second option was I create the project
and then rename after it has been created.

169
00:08:25,395 --> 00:08:29,104
So just going into the files automatically
somehow, and then renaming it, and

170
00:08:29,104 --> 00:08:32,925
the third option was just give up and
start writing a PHP book, maybe that's

171
00:08:32,925 --> 00:08:35,044
easier, but I did not go for this.

172
00:08:35,084 --> 00:08:38,634
I choose the second approach, which means
creating the project and then renaming it.

173
00:08:38,705 --> 00:08:39,124
Why?

174
00:08:39,185 --> 00:08:40,314
I actually don't know.

175
00:08:40,384 --> 00:08:43,005
At that particular time, I
had no idea what I was doing

176
00:08:43,015 --> 00:08:44,104
and that's perfectly fine.

177
00:08:44,114 --> 00:08:47,415
You get into these issues as
developers always when you don't

178
00:08:47,415 --> 00:08:48,484
know something and you know that.

179
00:08:48,644 --> 00:08:49,144
later on.

180
00:08:49,265 --> 00:08:53,564
Now, coming back to the problem at hand,
I wanted to use this particular command

181
00:08:53,574 --> 00:08:55,675
npm run serve and just the recipe name.

182
00:08:55,675 --> 00:08:56,555
So keep that in mind.

183
00:08:56,665 --> 00:09:00,531
So for this particular situation,
I created my own plugin using

184
00:09:00,531 --> 00:09:03,124
the narwhal NX plugin package.

185
00:09:03,144 --> 00:09:06,354
It's quite possible that the package
name has changed now since everything

186
00:09:06,425 --> 00:09:11,515
moved to at NX now, but I used NX's
plugin package to create my own plugin.

187
00:09:11,604 --> 00:09:12,765
Again, the question is why?

188
00:09:12,795 --> 00:09:15,225
Because I wanted to do.

189
00:09:15,475 --> 00:09:16,475
this in the steps.

190
00:09:16,485 --> 00:09:19,364
So let's have a look at how I was
creating the application for my book.

191
00:09:19,374 --> 00:09:21,215
Back then I was actually
trying to do this.

192
00:09:21,285 --> 00:09:24,674
I would actually go to a start folder
and I would create a new project.

193
00:09:24,704 --> 00:09:29,385
Since I'm migrating them one by one, I
would actually go and do NPM NX generate,

194
00:09:29,414 --> 00:09:32,755
create an Angular application for me,
and then I would give that the path.

195
00:09:32,784 --> 00:09:36,255
So the chapter name or the chapter
folder, and then the recipe folder,

196
00:09:36,255 --> 00:09:39,435
just like this, this basically
generates with the app name.

197
00:09:39,610 --> 00:09:40,170
this one.

198
00:09:40,219 --> 00:09:42,850
And as we discussed, that
is too much to remember.

199
00:09:42,880 --> 00:09:45,499
The chapter name and the
recipe name, not super easy.

200
00:09:45,560 --> 00:09:49,109
Now, the plugin I created
actually had two counterparts.

201
00:09:49,129 --> 00:09:52,880
One is the NX generators and
the second is the NX executors.

202
00:09:52,910 --> 00:09:55,989
And that is what I'm trying to focus
on this talk to actually tell you.

203
00:09:56,029 --> 00:10:00,250
So, the first part, that is the generator,
actually creates the application.

204
00:10:00,270 --> 00:10:04,880
So instead of me going into the folder
and running the command, it actually uses

205
00:10:04,900 --> 00:10:07,400
a generator to generate the application.

206
00:10:07,430 --> 00:10:12,829
And during the generation process, it
adds the executor into the project JSON.

207
00:10:13,050 --> 00:10:14,300
So take it like two steps.

208
00:10:14,310 --> 00:10:16,030
So in the first step, we create the app.

209
00:10:16,060 --> 00:10:18,170
In the second step, we rename the project.

210
00:10:18,189 --> 00:10:18,880
That's the idea.

211
00:10:18,890 --> 00:10:20,979
So for that, the code
looks something like this.

212
00:10:21,125 --> 00:10:25,225
When I generate my project, there's
a function that I call and that

213
00:10:25,265 --> 00:10:26,435
essentially looks like this.

214
00:10:26,455 --> 00:10:31,665
It takes the package JSON of the
project and then adds this rename

215
00:10:31,765 --> 00:10:33,854
executor inside that from my plugin.

216
00:10:33,935 --> 00:10:36,064
Then it basically becomes
something like this.

217
00:10:36,074 --> 00:10:40,670
So let's say the recipe was This
NG on changes, then I actually

218
00:10:40,670 --> 00:10:43,989
have these parameters like chapter
number and then the app name.

219
00:10:44,010 --> 00:10:47,699
Since the actual name that we are
targeting right now contains both the

220
00:10:47,699 --> 00:10:52,040
chapter number or the chapter folder
and the recipe name, I can actually use

221
00:10:52,040 --> 00:10:54,639
this to use some regex to rename easily.

222
00:10:54,679 --> 00:10:55,539
Now, the second step.

223
00:10:55,945 --> 00:10:57,885
is to run the executor.

224
00:10:57,935 --> 00:11:00,965
So first step, we created the
generator that creates the application.

225
00:11:00,965 --> 00:11:04,445
Second step, the executor actually
goes into the project, JSON, and

226
00:11:04,445 --> 00:11:06,244
then it fetches out this information.

227
00:11:06,314 --> 00:11:07,454
What is the chapter number?

228
00:11:07,584 --> 00:11:08,695
And what is the recipe name?

229
00:11:08,724 --> 00:11:12,505
When it looks at that particular
situation, it actually then renames

230
00:11:12,765 --> 00:11:14,564
this right here in this function.

231
00:11:14,564 --> 00:11:18,135
So we're not going to go too deep
into this, but the idea is actually to

232
00:11:18,135 --> 00:11:20,805
rename using the executor's information.

233
00:11:20,834 --> 00:11:22,564
So if I Summarize this.

234
00:11:22,604 --> 00:11:23,665
This is my whole process.

235
00:11:24,175 --> 00:11:28,465
I had to just run this command to create
a new project, which is super easy for me.

236
00:11:28,505 --> 00:11:29,975
I just run npm run create.

237
00:11:30,004 --> 00:11:31,905
I give the number of the chapter.

238
00:11:32,124 --> 00:11:35,824
I give the recipes name and the
title I want to show in the header.

239
00:11:35,885 --> 00:11:38,185
So that means that runs
a couple of things.

240
00:11:38,244 --> 00:11:39,925
First, it starts with a batch script.

241
00:11:40,035 --> 00:11:42,195
It runs the generator, which
generates the application.

242
00:11:42,285 --> 00:11:46,205
Then it runs the executor that
goes and renames the application.

243
00:11:46,265 --> 00:11:47,135
That's easy peasy.

244
00:11:47,245 --> 00:11:47,485
So.

245
00:11:47,895 --> 00:11:51,375
This is what happens when we run
npm run create, this runs the

246
00:11:51,375 --> 00:11:53,834
packages in the script, which
in turn runs the bash script.

247
00:11:53,885 --> 00:11:54,805
This is the chapter number.

248
00:11:54,805 --> 00:11:57,955
As I mentioned, this is the app name, and
this is the title to show in the header.

249
00:11:57,985 --> 00:12:00,185
So this is pretty simplified
version of what happens.

250
00:12:00,195 --> 00:12:04,154
So it takes out the app name, the app
title, and all of these things as the

251
00:12:04,154 --> 00:12:06,655
argument or the positional arguments.

252
00:12:06,844 --> 00:12:08,545
And then it runs all of this.

253
00:12:08,555 --> 00:12:12,564
So here you can see that it runs the
rename executor before that it runs the

254
00:12:12,564 --> 00:12:14,934
generation of the application for me.

255
00:12:14,995 --> 00:12:15,245
Awesome.

256
00:12:15,255 --> 00:12:16,844
Which means that if I was able.

257
00:12:17,035 --> 00:12:22,965
To run this correctly, all I had to do
was run this NPM run serve CC engine on

258
00:12:22,985 --> 00:12:27,605
changes because the name already has been
changed and the app has been renamed now.

259
00:12:27,634 --> 00:12:28,004
Great.

260
00:12:28,035 --> 00:12:29,775
Now, do you remember what our goal was?

261
00:12:29,805 --> 00:12:32,884
It was actually a great
developer experience.

262
00:12:32,915 --> 00:12:35,354
And this was the time when I
actually felt like I was over

263
00:12:35,355 --> 00:12:38,265
the moon because I actually
conquered one of my biggest fears.

264
00:12:38,295 --> 00:12:42,805
And that was working with Angular
schematics, which is what we use.

265
00:12:42,965 --> 00:12:48,265
to work with, NX generators and executors
because it scripts everything and then

266
00:12:48,305 --> 00:12:50,065
does it automatically on the file system.

267
00:12:50,275 --> 00:12:54,804
As I felt enlightened, actually
a new problem knocked my

268
00:12:54,815 --> 00:12:57,195
door and that was not great.

269
00:12:57,235 --> 00:12:59,075
Have you heard this
term called consistency?

270
00:12:59,104 --> 00:13:03,375
Well, I actually wanted my entire project
to be consistent in terms of UI UX and

271
00:13:03,375 --> 00:13:07,775
I wanted the same structure and user
experience for all of my applications.

272
00:13:08,125 --> 00:13:11,905
So the idea was to have the same header
across all the projects, which means.

273
00:13:11,970 --> 00:13:13,250
It could look something like this.

274
00:13:13,260 --> 00:13:14,820
So we would have the header at the top.

275
00:13:14,820 --> 00:13:18,120
So if we dissect it, it's the header
having the title of the application,

276
00:13:18,290 --> 00:13:21,050
the Angular logo and information burden.

277
00:13:21,160 --> 00:13:24,009
And then this content is the
dynamic content, which is

278
00:13:24,010 --> 00:13:25,280
different for every application.

279
00:13:25,340 --> 00:13:28,980
Now, I thought I could do the
following using my generator.

280
00:13:29,019 --> 00:13:33,559
So my generator is already creating new
applications, which means that if I went

281
00:13:33,569 --> 00:13:38,110
inside my generator and I look at the
template, so one of them was index HTML.

282
00:13:38,320 --> 00:13:40,260
And the other one was app component HTML.

283
00:13:40,290 --> 00:13:44,540
So for all the things related to the
consistent fonts across all applications

284
00:13:44,660 --> 00:13:48,610
and the icons, which is like material
icons, which I can basically load from the

285
00:13:48,610 --> 00:13:50,760
CDN, I could actually work on index HTML.

286
00:13:50,970 --> 00:13:55,060
And for the applications architecture, I
could actually use the app component HTML.

287
00:13:55,275 --> 00:13:58,215
To have the header and then
the placeholder for dynamic

288
00:13:58,465 --> 00:13:59,585
content of the applications.

289
00:13:59,595 --> 00:14:00,785
So this is what I did.

290
00:14:00,825 --> 00:14:05,015
I actually modified the index HTML to
include material icons, the font that

291
00:14:05,015 --> 00:14:09,505
I basically use, which is Nonito and
everything that I needed on the index HTML

292
00:14:09,505 --> 00:14:13,334
level, then in the app component HTML,
I actually had the toolbar and then this

293
00:14:13,345 --> 00:14:17,585
main element, which would have the dynamic
content different for every application.

294
00:14:17,615 --> 00:14:19,815
And here you can see that
we do have the info button.

295
00:14:20,005 --> 00:14:21,465
We also have the title here.

296
00:14:21,625 --> 00:14:23,735
And we also have the
Angular logo as an SVG.

297
00:14:23,785 --> 00:14:26,995
Now we have discussed only the
HTML part or the templates.

298
00:14:27,025 --> 00:14:30,935
But what about the biggest fear
of web developers, which is CSS?

299
00:14:30,965 --> 00:14:35,245
How do I ensure that the styles
across the applications are consistent

300
00:14:35,445 --> 00:14:36,695
and they're easy to update as well?

301
00:14:36,735 --> 00:14:41,804
That's actually when I created my own
NX library within the NX workspace.

302
00:14:41,805 --> 00:14:45,054
So I created a library named NGCB UI.

303
00:14:45,215 --> 00:14:48,885
And this is actually within my plugins
package repository or monorepository.

304
00:14:49,385 --> 00:14:53,815
So now I have this global SCSS,
which contains all of my styles.

305
00:14:53,845 --> 00:14:56,525
I package it so I can use that.

306
00:14:56,870 --> 00:14:59,930
in my other workspaces
like start and final.

307
00:15:00,180 --> 00:15:01,920
And I also ensure that this is included.

308
00:15:01,930 --> 00:15:05,779
So that means that now when I'm creating
a new application, not only I'm creating

309
00:15:05,780 --> 00:15:10,639
an app with this consistent, structure
with HTML for index HTML and app component

310
00:15:10,640 --> 00:15:16,600
HTML, but I'm also including this global
SCSS sneakily into both those projects.

311
00:15:16,610 --> 00:15:19,830
And the beauty of this is that I'm not
doing this for one 50 plus projects.

312
00:15:20,010 --> 00:15:21,179
I only have to do this for two projects.

313
00:15:21,320 --> 00:15:22,240
two workspaces.

314
00:15:22,500 --> 00:15:24,650
The start workspace and
the final workspace.

315
00:15:24,850 --> 00:15:28,299
I don't have to do it for every project
because I only have two NX workspaces.

316
00:15:28,300 --> 00:15:30,910
This is the beauty of automation so far.

317
00:15:30,930 --> 00:15:34,780
So when we looked at the
result, It was beautiful.

318
00:15:34,820 --> 00:15:38,930
We had a header, we had the logo right
here, we had the info button, and this

319
00:15:38,930 --> 00:15:41,250
was consistent for all of my applications.

320
00:15:41,470 --> 00:15:45,460
Having this dynamic container here, which
can have different content, of course.

321
00:15:45,510 --> 00:15:49,379
And just as I thought everything
was sunshine and butterflies,

322
00:15:49,665 --> 00:15:51,545
something big happened.

323
00:15:51,615 --> 00:15:52,645
Something crazy.

324
00:15:52,725 --> 00:15:53,305
Can you guess?

325
00:15:53,335 --> 00:15:55,115
I'm going to give you
some seconds to think.

326
00:15:55,165 --> 00:15:56,265
All right, maybe you guessed it.

327
00:15:56,285 --> 00:15:56,925
Maybe you didn't.

328
00:15:56,995 --> 00:15:59,524
Angular actually changed their
logo and they went from a

329
00:15:59,525 --> 00:16:02,454
red logo to this cool logo.

330
00:16:02,494 --> 00:16:06,565
And while this is so pleasing
to the eye, this is so modern,

331
00:16:06,585 --> 00:16:07,784
I actually really liked it.

332
00:16:07,795 --> 00:16:13,819
But this caused And that was, I was
left with 150 plus Angular projects

333
00:16:14,089 --> 00:16:20,039
still now, even with NX workspaces with
hard coded SVGs that I had in my, App

334
00:16:20,039 --> 00:16:24,969
component html and that was not super
cool So if you remember we had this app

335
00:16:24,969 --> 00:16:29,869
component html which had a toolbar the
dynamic content But this hard coded image

336
00:16:29,989 --> 00:16:35,359
now, I have 150 projects having this in
their code base And that was not good.

337
00:16:35,379 --> 00:16:38,299
First of all I compose
myself like a good developer.

338
00:16:38,339 --> 00:16:41,299
I thought of analyzing what's
happening right now and

339
00:16:41,299 --> 00:16:42,599
started thinking of a solution.

340
00:16:42,609 --> 00:16:45,979
So the first thing that came to
my mind was to go from this, which

341
00:16:45,979 --> 00:16:49,739
is the current state of the app
component HTML to something like this.

342
00:16:49,779 --> 00:16:54,029
Instead of having a hard coded logo, I
could create a component in my NX library

343
00:16:54,149 --> 00:16:57,399
and I could use the same component
throughout all of my application.

344
00:16:57,489 --> 00:17:02,989
And this file right now, which is app
component HTML is part of the So if

345
00:17:03,009 --> 00:17:07,209
you think that sounds good and this
could solve the issue, You're wrong.

346
00:17:07,219 --> 00:17:09,989
And that is because we are talking
about the code of a generator.

347
00:17:10,049 --> 00:17:13,579
The generator only works when we
are creating the applications.

348
00:17:13,629 --> 00:17:19,159
I already have my 150 plus projects
already, which have that code.

349
00:17:19,169 --> 00:17:23,739
So having changed the generator's
code or the template doesn't

350
00:17:23,739 --> 00:17:24,599
really work right now.

351
00:17:24,619 --> 00:17:25,499
I need something else.

352
00:17:25,569 --> 00:17:29,969
Because I have 150 projects,
my 150 plus cats having the old

353
00:17:29,979 --> 00:17:32,349
logo, which nobody likes anymore.

354
00:17:32,469 --> 00:17:35,979
So I started thinking about the
solution and I had some questions.

355
00:17:35,999 --> 00:17:40,699
My main questions were, how do geniuses
at Angular and NX solve such issues of

356
00:17:41,059 --> 00:17:44,254
a workspace wide, Migration or change.

357
00:17:44,294 --> 00:17:48,614
How can I have a graceful fallback if
I'm trying to do this automatically

358
00:17:48,634 --> 00:17:53,164
across my GitHub repository, how do
I know if something breaks and, you

359
00:17:53,164 --> 00:17:57,814
know, revert my changes and not, you
know, come in middle of a situation,

360
00:17:57,824 --> 00:17:59,534
which is half baked, so to say.

361
00:17:59,554 --> 00:18:02,114
And then how do I ensure that
I don't have to think about the

362
00:18:02,114 --> 00:18:03,884
same problem again in the future?

363
00:18:03,924 --> 00:18:09,024
So first I created this header
component inside my library is still,

364
00:18:09,214 --> 00:18:11,014
because still it's a good idea.

365
00:18:11,334 --> 00:18:13,854
Do not have the hard
coded, header everywhere.

366
00:18:13,894 --> 00:18:15,574
And we could have this from a library.

367
00:18:15,604 --> 00:18:18,704
So if we needed to change anything
in the header, we could just

368
00:18:18,704 --> 00:18:21,054
update the library and then all
the projects start using that.

369
00:18:21,054 --> 00:18:22,574
So that's what I did first.

370
00:18:22,604 --> 00:18:25,714
Secondly, I use something
called NX migrations.

371
00:18:25,944 --> 00:18:28,084
And trust me, this is really, really cool.

372
00:18:28,184 --> 00:18:32,484
Beauty of migration is that it
allows us to run generators after

373
00:18:32,524 --> 00:18:34,004
the applications have been created.

374
00:18:34,144 --> 00:18:37,414
And this can run to the whole workspace.

375
00:18:37,484 --> 00:18:41,354
So to say, the beauty of this is that
I can also specify which version of my

376
00:18:41,354 --> 00:18:45,794
plugin that I'm using right now in a start
and final will trigger this migration.

377
00:18:45,794 --> 00:18:47,844
So I can also, versionize it.

378
00:18:47,854 --> 00:18:49,144
So to say, and that is.

379
00:18:49,354 --> 00:18:50,284
Really, really nice.

380
00:18:50,334 --> 00:18:55,424
So the goal for my migration was to
have this replace app toolbar run

381
00:18:55,434 --> 00:18:57,914
in both the start and final folder.

382
00:18:57,954 --> 00:18:59,224
So that means two steps.

383
00:18:59,254 --> 00:19:02,424
And when I do these two steps,
I should have migrated my whole

384
00:19:02,614 --> 00:19:04,354
code base, all the projects.

385
00:19:04,374 --> 00:19:06,054
And this is what the migration looks like.

386
00:19:06,124 --> 00:19:09,604
So if I show you the code base, it
basically goes inside my application

387
00:19:09,634 --> 00:19:11,004
and looks at all the projects.

388
00:19:11,004 --> 00:19:14,434
Now, some of the Angular projects are
module based, some are standalone.

389
00:19:14,474 --> 00:19:18,444
So essentially it goes, it finds
the header or the title, it

390
00:19:18,444 --> 00:19:21,684
extracts it, and then it replaces
it right here with the new toolbar.

391
00:19:21,724 --> 00:19:25,494
And if you look at the new toolbar,
it is essentially this, the ngcbui

392
00:19:25,504 --> 00:19:27,514
header, just like we discussed before.

393
00:19:27,544 --> 00:19:31,684
And once that does it, it also makes sure
that this particular component is also

394
00:19:31,724 --> 00:19:33,984
imported in the TypeScript file as well.

395
00:19:34,194 --> 00:19:35,624
Because you need that.

396
00:19:35,694 --> 00:19:37,144
For the standalone components.

397
00:19:37,204 --> 00:19:40,964
And if you're using a module based
application, then you need to import

398
00:19:40,994 --> 00:19:44,414
this or declare this in the ng
module of your application as well.

399
00:19:44,454 --> 00:19:45,394
So that was pretty nice.

400
00:19:45,424 --> 00:19:50,464
And if we actually look at what happened
after I ran these migration, let me

401
00:19:50,464 --> 00:19:54,194
show you, this is the commit that
actually was done after the migration.

402
00:19:54,194 --> 00:19:56,154
So this is replacing all the headers.

403
00:19:56,304 --> 00:19:57,594
in the start folder.

404
00:19:57,674 --> 00:20:00,994
And if I close the migration
files, I also want to show you

405
00:20:00,994 --> 00:20:02,394
what happened in each project.

406
00:20:02,394 --> 00:20:06,384
So here you can see that this whole
toolbar was replaced by API UI header.

407
00:20:06,434 --> 00:20:09,854
Then in the TypeScript file, we
go and import this automatically

408
00:20:09,994 --> 00:20:11,234
and add that to the imports.

409
00:20:11,264 --> 00:20:13,114
And this is the same for all the recipes.

410
00:20:13,124 --> 00:20:16,774
So this toolbar had the same
result, just like this, this one.

411
00:20:17,019 --> 00:20:21,179
And this one, and this one, you'll see the
repeating sort of pattern for all of this.

412
00:20:21,189 --> 00:20:25,219
So this basically ran across all of
my projects within the start folder.

413
00:20:25,279 --> 00:20:27,369
And then I did the same for
the final folder as well.

414
00:20:27,429 --> 00:20:30,269
And once I ran the migration on
both the folders, things were

415
00:20:30,279 --> 00:20:34,209
like muska as we say in Pakistan,
which means like buttery smooth.

416
00:20:34,289 --> 00:20:36,039
And I want to show you
the final result now.

417
00:20:36,069 --> 00:20:36,469
So if I.

418
00:20:36,689 --> 00:20:37,539
show you the demo.

419
00:20:37,589 --> 00:20:38,419
This is what it looks like.

420
00:20:38,419 --> 00:20:42,049
You can see that all the applications
have a header right now, have this

421
00:20:42,049 --> 00:20:44,319
logo, and then this content is dynamic.

422
00:20:44,319 --> 00:20:47,629
So I can show you this really
nice example in which I have, for

423
00:20:47,629 --> 00:20:49,809
example, folders moving right here.

424
00:20:49,869 --> 00:20:52,769
And this example actually shows
how to lazily load different

425
00:20:52,769 --> 00:20:54,349
components, even on a single page.

426
00:20:54,369 --> 00:20:57,359
So here you can see that a lot of
these projects or a lot of these

427
00:20:57,359 --> 00:20:59,339
components are lazily being loaded.

428
00:20:59,359 --> 00:21:02,859
So all of my recipes in my
Angular cookbook, right now

429
00:21:02,909 --> 00:21:06,339
have the same consistent layout
across all of the projects.

430
00:21:06,409 --> 00:21:09,389
And when I was actually able to
achieve all of that, I felt like

431
00:21:09,389 --> 00:21:11,539
a self proclaimed NX expert.

432
00:21:11,579 --> 00:21:16,699
So if I summarize, what we have talked
about is cats are possum, managing 150

433
00:21:16,699 --> 00:21:22,069
plus projects is completely possible
and no solution is perfect because

434
00:21:22,139 --> 00:21:26,069
I started with something, I failed,
I found out the issue with that,

435
00:21:26,119 --> 00:21:30,089
and then I re evaluated and improved
the solution and we as developers.

436
00:21:30,179 --> 00:21:33,809
should be easy or should be,
you know, not hesitant to do so.

437
00:21:33,859 --> 00:21:35,959
And it's also never too
late to learn something new.

438
00:21:35,999 --> 00:21:39,499
As soon as the opportunity presents
itself, I think we should just grab it.

439
00:21:39,499 --> 00:21:44,659
Because when I started with migration,
I did not know about Angular schematics

440
00:21:44,659 --> 00:21:48,429
or all of these things like NX
plugins, generators, executors.

441
00:21:48,449 --> 00:21:52,289
But by the end of all of this, I
actually know a lot that I can share now.

442
00:21:52,329 --> 00:21:53,149
So that's pretty much it.

443
00:21:53,189 --> 00:21:56,309
I would highly encourage if you can
provide me the feedback with that.

444
00:21:56,514 --> 00:21:57,924
QR code that you can see here.

445
00:21:57,964 --> 00:22:01,864
And also, if you want to take your skills
to the next level, and if you just want

446
00:22:01,874 --> 00:22:04,764
to explore all these projects, cool
projects that I've built with the angular

447
00:22:04,784 --> 00:22:08,844
cookbook, check out the angular cookbook,
second edition, or the latest edition,

448
00:22:08,844 --> 00:22:11,584
whatever is out there at the ng cookbook.

449
00:22:11,844 --> 00:22:12,134
com.

450
00:22:12,194 --> 00:22:16,714
And with that said, I want to thank con
42 for having me this time as always.

451
00:22:16,874 --> 00:22:17,834
Happy coding y'all.

452
00:22:18,044 --> 00:22:18,914
I'm going to see you next time.

