1
00:00:00,500 --> 00:00:05,580
Hello everyone and welcome
to the SRE at 2025.

2
00:00:06,330 --> 00:00:06,840
Today.

3
00:00:06,930 --> 00:00:12,690
The topic that I'll be talking about is
SRE at scale building resilient cloud

4
00:00:12,690 --> 00:00:17,220
infrastructure for higher education
enterprise resource planning systems.

5
00:00:18,119 --> 00:00:23,280
Now welcome to this technical deep
dive into site reliability engineering

6
00:00:23,400 --> 00:00:28,080
SRE practices for cloud-based
enterprise resource planning systems.

7
00:00:28,620 --> 00:00:35,250
In higher education today, we'll explore
how applying sophisticated reliability

8
00:00:35,250 --> 00:00:40,470
principles can transform fragmented
legacy systems into resilient cloud

9
00:00:40,530 --> 00:00:45,780
architectures that deliver consistent
performance during critical periods.

10
00:00:46,280 --> 00:00:52,130
Drawing from real world implementations
across various institutional settings, I

11
00:00:52,130 --> 00:00:54,125
will share the strategies that achieve.

12
00:00:54,680 --> 00:01:00,170
99.99% uptime during peak
registration periods and reduced

13
00:01:00,170 --> 00:01:03,260
security incidents by 78%.

14
00:01:04,070 --> 00:01:08,270
Let's explore the technical
foundations of reli operations

15
00:01:08,300 --> 00:01:09,710
in educational environments.

16
00:01:10,210 --> 00:01:10,430
So.

17
00:01:10,950 --> 00:01:15,460
Before we get started into the details,
let me tell you something about myself.

18
00:01:15,460 --> 00:01:16,990
I'll give you a background of myself.

19
00:01:16,990 --> 00:01:18,190
My name is Jeev pga.

20
00:01:18,730 --> 00:01:22,090
I have studied from the Vicious
Area Technological University.

21
00:01:22,900 --> 00:01:27,250
I have 21 years of experience working
in multiple projects around the globe.

22
00:01:27,790 --> 00:01:33,990
Currently I'm working as a program
manager at amazon in United

23
00:01:33,990 --> 00:01:35,475
States, in the Washington State.

24
00:01:36,285 --> 00:01:40,984
And prior to that I have worked
for many projects for the state,

25
00:01:41,434 --> 00:01:43,374
for the higher education domain.

26
00:01:43,794 --> 00:01:46,974
And the experiences that I have
gathered is what I'm going to

27
00:01:46,974 --> 00:01:48,874
share in this presentation.

28
00:01:49,374 --> 00:01:53,964
So next, so the next, we are talking
about the higher education ERP landscape.

29
00:01:54,279 --> 00:01:57,789
Now higher education, enterprise
resource planning landscape.

30
00:01:58,209 --> 00:02:04,269
It can be distinguished into three major
areas, which is cloud-based system, which

31
00:02:04,269 --> 00:02:06,219
is the modern containerized solution.

32
00:02:06,549 --> 00:02:11,019
Then we have the architecture of a
hybrid architecture, which bridges

33
00:02:11,019 --> 00:02:13,329
between cloud and on-premises.

34
00:02:13,779 --> 00:02:17,859
And then we have the legacy systems, which
is a fragmented institutional databases

35
00:02:17,859 --> 00:02:19,510
that we have seen over the years.

36
00:02:19,959 --> 00:02:24,060
And, the, and we have seen different
challenges that we have with the

37
00:02:24,060 --> 00:02:29,060
legacy systems, which are fragmented
in different campuses be, and they

38
00:02:29,060 --> 00:02:31,460
don't share data with other campuses.

39
00:02:32,150 --> 00:02:36,050
Now, higher education institutions
face unique challenges with

40
00:02:36,109 --> 00:02:38,090
the their ERP implementations.

41
00:02:38,390 --> 00:02:44,119
Many begin siloed, departmental complex
integrations needs and technical debt.

42
00:02:44,909 --> 00:02:48,839
Legacy systems often struggle with
modern security requirements and

43
00:02:48,839 --> 00:02:54,029
scaling demands and security is a big
concern when it comes to any industry,

44
00:02:54,029 --> 00:02:57,534
especially when it comes to higher
education industry because you have

45
00:02:57,539 --> 00:03:02,759
sensitive so many sensitive information
that the educational institutes collect

46
00:03:02,759 --> 00:03:04,349
from the students and the staff.

47
00:03:04,849 --> 00:03:08,869
Now the trend towards cloud-based
ERP solutions offers tremendous

48
00:03:08,869 --> 00:03:12,709
benefits, but it requires
careful architectural planning.

49
00:03:13,129 --> 00:03:18,129
Institutions must balance accessibility,
compliance requirements and the

50
00:03:18,129 --> 00:03:23,349
seasonal nature of academic workloads,
all while maintaining constant

51
00:03:23,409 --> 00:03:25,359
uptime for critical services.

52
00:03:25,859 --> 00:03:29,319
And that is what makes the
higher educational ERP landscape.

53
00:03:29,649 --> 00:03:32,409
Challenging for implementing
any ERP solution.

54
00:03:32,909 --> 00:03:36,579
Now in this slide we are going
to talk about the microservices

55
00:03:36,939 --> 00:03:39,369
architecture for educational workloads.

56
00:03:40,089 --> 00:03:43,539
Now, what is this microservices
architecture for educational workload?

57
00:03:44,479 --> 00:03:46,999
Here we are seeing on the
left hand side we are talk

58
00:03:47,049 --> 00:03:48,504
talking about containerization.

59
00:03:49,029 --> 00:03:53,549
Then we are looking into orchestration
in this phase, and then we are

60
00:03:53,549 --> 00:03:56,969
looking at the service mesh, and
then we are looking at the security

61
00:03:56,969 --> 00:03:58,320
layer, which has been applied.

62
00:03:59,070 --> 00:04:00,510
Now, what is conization?

63
00:04:00,570 --> 00:04:04,529
It's a docker based services
with education specific.

64
00:04:04,844 --> 00:04:11,504
Configuration, which which is done
for the, for the users to consume the

65
00:04:11,744 --> 00:04:13,454
the information which is being sent.

66
00:04:13,874 --> 00:04:15,854
So that is what is containerization.

67
00:04:15,884 --> 00:04:21,294
So if we are working for any educational
institute, it's the logo of the institute.

68
00:04:21,504 --> 00:04:26,104
It's the what information needs to be
shared with that particular you know,

69
00:04:26,104 --> 00:04:28,984
user is what is containerization now.

70
00:04:28,984 --> 00:04:33,784
Orchestration is the Kubernetes clusters
with automated scaling policies.

71
00:04:34,699 --> 00:04:39,049
And then we have the service mesh, which
is the Istio powered traffic management

72
00:04:39,049 --> 00:04:41,629
with encrypted east waste traffic.

73
00:04:41,689 --> 00:04:45,439
So what kind of, how do we manage
the traffic during peak period

74
00:04:45,439 --> 00:04:47,329
is what is the service mesh?

75
00:04:47,869 --> 00:04:51,349
And then we come to the security
layer, which is a zero trust network

76
00:04:51,349 --> 00:04:56,749
policy with identify with identity
verification, which is very critical.

77
00:04:57,029 --> 00:04:58,619
To the higher education.

78
00:04:59,369 --> 00:05:04,469
Now, breaking monolithic ERP systems
into containerized microservices

79
00:05:04,469 --> 00:05:08,999
has proven transform transformative
for educational institutions.

80
00:05:09,179 --> 00:05:13,709
This architecture, what it does is
it enables independent scaling of

81
00:05:13,709 --> 00:05:18,179
critical components during registration
period and financial aid processing

82
00:05:18,179 --> 00:05:21,779
season, because what we have seen
is during the registration period.

83
00:05:22,049 --> 00:05:26,579
More resources needs to be allocated
so that the students can register

84
00:05:27,239 --> 00:05:28,979
during financial aid processing.

85
00:05:28,979 --> 00:05:33,869
Also, we need more resources which
can be allocated to those functions.

86
00:05:33,869 --> 00:05:37,319
So that is how we see that this
architecture helps during those

87
00:05:37,319 --> 00:05:41,399
peak periods in managing the
workload, we have implemented

88
00:05:41,399 --> 00:05:45,624
automatic failover configurations
that maintain service continuity.

89
00:05:46,074 --> 00:05:49,044
Even when primary systems
experience issues.

90
00:05:49,584 --> 00:05:54,144
So these are the challenges that we
have seen in the monolithic ERP systems,

91
00:05:54,144 --> 00:05:59,709
but can be overcome by using this
framework of microservice architecture.

92
00:06:00,109 --> 00:06:00,229
I.

93
00:06:00,729 --> 00:06:05,439
Next we will look into how can we
establish education specific SLOs.

94
00:06:06,339 --> 00:06:12,399
Now looking into the SLOs that we can,
we need to implement for any higher

95
00:06:12,429 --> 00:06:16,669
education ERP system implementation
is student portal availability.

96
00:06:16,854 --> 00:06:20,664
So student portal availability is key
to the business of higher education.

97
00:06:20,754 --> 00:06:27,924
So 99.99% uptime during registration
period with 500 millisecond response

98
00:06:27,924 --> 00:06:32,144
time SLO, lower threshold during
off peak periods to optimize

99
00:06:32,144 --> 00:06:34,034
resource utilization and cost.

100
00:06:34,934 --> 00:06:40,004
The next is financial
system reliability, 99.999%.

101
00:06:40,424 --> 00:06:43,814
Transaction consistency with dual fees.

102
00:06:44,174 --> 00:06:45,044
Commit protocols.

103
00:06:45,044 --> 00:06:49,494
I. Prioritize during financial
aid, disbursement cycles, and

104
00:06:49,494 --> 00:06:51,474
dedicated infrastructure resources.

105
00:06:52,434 --> 00:06:57,294
The next is faculty service,
performance, grade submissions, and

106
00:06:57,294 --> 00:07:02,454
course management operations with
1.5 seconds maximum response time,

107
00:07:02,964 --> 00:07:09,204
and 99.9% availability with extended
thresholds during non-teaching periods.

108
00:07:09,704 --> 00:07:15,134
Service level objectives for educational
ERP systems must reflect the cyclic

109
00:07:15,224 --> 00:07:17,864
nature of academic operations.

110
00:07:18,404 --> 00:07:23,114
We developed custom error budgets
that vary throughout the semester,

111
00:07:23,834 --> 00:07:28,634
allowing for more experimental
deployments during quite periods while

112
00:07:28,874 --> 00:07:34,704
enforcing strict changes change freezes
during critical academic events.

113
00:07:35,004 --> 00:07:40,024
It is very important that there are
some you know, change freeze times so

114
00:07:40,024 --> 00:07:42,575
that it does not impact the peak period.

115
00:07:43,534 --> 00:07:48,984
This approach has allowed it teams
to balance innovation with stability,

116
00:07:49,494 --> 00:07:54,725
and our dashboards provide real time
visibility into remaining error budgets,

117
00:07:55,205 --> 00:07:59,375
influencing deployment decisions
and maintenance scheduling across

118
00:07:59,375 --> 00:08:01,655
multiple institutions and stakeholders.

119
00:08:02,155 --> 00:08:04,045
Multiple institutional stakeholders.

120
00:08:04,545 --> 00:08:08,235
Moving on to the next one, which is
comprehensive observability stack.

121
00:08:09,015 --> 00:08:13,245
So what are the different observability
stacks that we need to look into?

122
00:08:13,605 --> 00:08:14,595
Metric collection.

123
00:08:14,685 --> 00:08:19,305
So Prometheus based telemetry
with educational specific gauges.

124
00:08:19,995 --> 00:08:24,385
Log aggregation, centralized
ELK stack with P two.

125
00:08:24,415 --> 00:08:29,545
AWARE filtering, altering, altering
alerting systems, which is pager

126
00:08:29,545 --> 00:08:34,565
due to integration with role-based
escalation parts distributed tracing.

127
00:08:35,405 --> 00:08:39,035
Yeager implementation tracking
cross service transactions.

128
00:08:39,845 --> 00:08:45,045
Effective observability proved critical
for maintaining ERP reliability.

129
00:08:45,135 --> 00:08:49,815
We implemented custom instrumentation
for student facing services,

130
00:08:50,355 --> 00:08:55,695
capturing not just technical metric,
but also user experience indicators

131
00:08:55,695 --> 00:09:00,195
like registration completion rates
and form submission successes.

132
00:09:00,695 --> 00:09:03,035
Our observability stack.

133
00:09:03,455 --> 00:09:07,625
Includes specialized monitoring
for authentication framework.

134
00:09:08,045 --> 00:09:12,455
Given the complex identity management
needs in educational settings,

135
00:09:12,935 --> 00:09:17,975
we track federation's performance
across multiple identity providers.

136
00:09:17,975 --> 00:09:22,805
I. And maintain visibility into
single sign-on performance with

137
00:09:22,955 --> 00:09:28,445
alerts triggered when authentication
latency exceeds predefined thresholds.

138
00:09:28,565 --> 00:09:35,255
So it's very important to have thresholds
to measure those service SLOs and SLAs.

139
00:09:35,755 --> 00:09:39,565
Next, we are looking into chaos
engineering in educational context.

140
00:09:40,465 --> 00:09:44,935
The the game day exercises,
which is structured failure

141
00:09:44,935 --> 00:09:48,205
simulation with cross-functional
teams during maintenance windows.

142
00:09:48,745 --> 00:09:54,605
Next is automated failure injection
programmatic infrastructure and network

143
00:09:54,605 --> 00:09:56,765
degradation during non-critical periods.

144
00:09:57,380 --> 00:10:01,850
Next is schedule resilience testing
quarterly comprehensive system

145
00:10:01,850 --> 00:10:03,890
test with increased complexity.

146
00:10:04,815 --> 00:10:08,625
Next is documentation, update
run books and recovery procedures

147
00:10:08,625 --> 00:10:11,085
refined after each exercise.

148
00:10:11,385 --> 00:10:15,575
Now, these are some things some steps
which are critical because even after

149
00:10:15,635 --> 00:10:20,345
implementation, these are some of the
tests which needs to be done to make sure

150
00:10:20,585 --> 00:10:24,515
that when the peak is reached or when
we are going through the peak or when we

151
00:10:24,515 --> 00:10:29,655
are going through the critical period of
registration and financial aid awarding.

152
00:10:29,895 --> 00:10:34,355
The system is able to meet the
demands or meet the needs of

153
00:10:34,355 --> 00:10:35,885
the educational institutions.

154
00:10:36,725 --> 00:10:40,295
Now, chaos engineering practices
have proven invaluable for

155
00:10:40,295 --> 00:10:42,035
validating ERP resilience.

156
00:10:42,545 --> 00:10:46,025
We designed experiments that
simulate realistic failure

157
00:10:46,055 --> 00:10:50,405
scenarios, including database
unavailability during registration

158
00:10:50,405 --> 00:10:53,825
periods, identity provider outages.

159
00:10:54,215 --> 00:10:57,005
And network partitions between services.

160
00:10:57,575 --> 00:11:02,555
This control exercises reveal subtle
dependencies and failure modes that

161
00:11:02,555 --> 00:11:05,765
warrant apparent in architectural reviews.

162
00:11:06,275 --> 00:11:11,165
By systematically injecting failures,
we identified and remediated

163
00:11:11,615 --> 00:11:15,755
critical vulnerabilities because
they affected production systems.

164
00:11:16,235 --> 00:11:21,845
Each KIOS experiment resulted in
improved recovery procedures and

165
00:11:21,845 --> 00:11:23,405
more resilient system design.

166
00:11:23,945 --> 00:11:27,695
So that is where the Kios
engineering in educational context

167
00:11:27,935 --> 00:11:29,645
is very, very relevant as well.

168
00:11:30,145 --> 00:11:32,695
Next is automated remediation workflows.

169
00:11:33,085 --> 00:11:35,395
Now anomaly detection is the first step.

170
00:11:35,485 --> 00:11:39,385
Next is automated diagnosis
and then self-healing actions.

171
00:11:39,925 --> 00:11:41,515
Now, what is anomaly detection?

172
00:11:41,935 --> 00:11:46,075
It's the machine learning powered
baseline deviation identification.

173
00:11:46,585 --> 00:11:51,985
Next is pattern recognition with
contextual analysis, which is automated

174
00:11:51,985 --> 00:11:57,025
diagnoses and the self-healing
actions is Kubernetes operators

175
00:11:57,355 --> 00:11:59,245
implementing recovery patterns.

176
00:12:00,085 --> 00:12:05,245
Our implementation of automated
remediation workflows reduced mean

177
00:12:05,275 --> 00:12:09,805
time of recovery, which is MTTR by 65%.

178
00:12:10,135 --> 00:12:13,435
We developed a tiered
approach to automation.

179
00:12:13,915 --> 00:12:20,185
Level one remediations execute
automatically without human intervention.

180
00:12:20,845 --> 00:12:25,555
Next is while more complex, level two and
level three actions require progressive

181
00:12:25,675 --> 00:12:27,955
levels of approval and oversight.

182
00:12:28,455 --> 00:12:34,035
The system leverages machine learning to
detect anomalies specific to educational

183
00:12:34,035 --> 00:12:39,765
workloads added that precede incidents
when potential issues are detected.

184
00:12:39,915 --> 00:12:46,245
Self-healing mechanisms can execute
predefined playbooks from simple PO

185
00:12:46,485 --> 00:12:52,275
starts to complex databases, failovers,
and data integrity verifications.

186
00:12:52,775 --> 00:12:56,195
Next is resilient, API
gateway architecture.

187
00:12:56,690 --> 00:12:58,490
Now legacy system integration.

188
00:12:58,670 --> 00:13:04,160
Our API Gateway implementation
includes specified adapters for legacy

189
00:13:04,160 --> 00:13:08,900
systems with protocol translation
and data transformation capabilities.

190
00:13:09,380 --> 00:13:14,240
This adapters maintain backward
compatibility while enabling

191
00:13:14,240 --> 00:13:15,620
modern security practices.

192
00:13:16,475 --> 00:13:21,845
Circuit breakers prevent cascading
failures when legacy components experience

193
00:13:21,845 --> 00:13:27,635
issues gracefully degrading functionality
rather than allowing complete outages.

194
00:13:28,535 --> 00:13:31,085
Next is authentication and authorization.

195
00:13:31,505 --> 00:13:36,155
The gateway handles complex
authentication, flow common in

196
00:13:36,155 --> 00:13:41,250
educational settings, including SAML
federations with research institutions.

197
00:13:41,750 --> 00:13:46,860
Oau integration with cloud providers
and legacy authentication methods.

198
00:13:47,640 --> 00:13:52,670
Fine-grained authorization policies
enforces appropriate access

199
00:13:52,670 --> 00:13:56,750
controls while maintaining audit
trails for compliance requirements.

200
00:13:57,380 --> 00:14:01,620
So that's a authentication and
authorization plays a critical

201
00:14:01,620 --> 00:14:06,020
role when we are developing a
resilient API gateway architecture.

202
00:14:06,520 --> 00:14:08,170
Next is the traffic management.

203
00:14:08,710 --> 00:14:13,920
Which helps in making sure that there
is no delay or we are meeting the SLAs.

204
00:14:14,490 --> 00:14:19,740
Now, sophisticated rate limited protects
backend service during peak periods.

205
00:14:19,740 --> 00:14:24,215
I. Implementing fair scheduling
algorithms then that prioritize

206
00:14:24,215 --> 00:14:26,345
critical operations during high demands.

207
00:14:26,675 --> 00:14:32,135
Events like course registration, dynamic
routing capabilities enable gradual

208
00:14:32,135 --> 00:14:38,295
rollouts of new services with cannery
deployments and AB testing configurations.

209
00:14:39,075 --> 00:14:43,910
The EAPI gateway serves as a
critical reliability component.

210
00:14:44,550 --> 00:14:49,890
Providing a consistent interface
while abstracting the complexity

211
00:14:49,950 --> 00:14:51,360
of underlying systems.

212
00:14:52,110 --> 00:14:58,170
This architecture proved particularly
valuable during migrations, allowing

213
00:14:58,260 --> 00:15:02,220
incremental modernization without
disrupting service availability.

214
00:15:02,720 --> 00:15:08,535
Because, because any kind of an, any
kind of institutions, it's a, it's

215
00:15:08,535 --> 00:15:12,475
a large project and, it is better
approach with an agile approach.

216
00:15:12,505 --> 00:15:15,715
And when we are doing an agile
approach, it is implemented in

217
00:15:15,715 --> 00:15:17,335
different iterations and phases.

218
00:15:17,695 --> 00:15:21,775
So when we are implementing in different
iterations and phases, it is very

219
00:15:21,775 --> 00:15:26,335
important that we follow the resilient
API gateway architecture where some

220
00:15:26,335 --> 00:15:32,785
of the systems have been modernized
while some are still on legacy systems.

221
00:15:32,965 --> 00:15:37,825
So that is why where this resilient
API gateway architecture, while

222
00:15:37,825 --> 00:15:39,595
implementation becomes very critical.

223
00:15:40,095 --> 00:15:44,775
Next, moving on to immutable
infrastructure for scaling now

224
00:15:45,045 --> 00:15:50,485
infrastructure as, as code terraform
modules with specif specialized

225
00:15:50,485 --> 00:15:54,295
configurations for educational
workloads, version controlled and

226
00:15:54,295 --> 00:15:57,785
peer reviewed, which is very much
critical for infrastructure as

227
00:15:57,785 --> 00:16:01,925
code now automated A A MI creation.

228
00:16:02,425 --> 00:16:09,065
Packer pipelines producing hardened images
with pre-installed monitoring agents and

229
00:16:09,065 --> 00:16:11,375
security controls are very much important.

230
00:16:11,875 --> 00:16:15,865
Pre-deployment validation, automated
compliance and vulnerability

231
00:16:15,955 --> 00:16:18,895
scanning, integrated into CICD.

232
00:16:18,925 --> 00:16:21,295
Continuous improvement and
continuous development.

233
00:16:21,355 --> 00:16:23,275
Pipelines are very important.

234
00:16:23,845 --> 00:16:25,225
Blue-green deployments.

235
00:16:25,675 --> 00:16:30,175
Zero downtime implementation with
automated rollback capabilities

236
00:16:30,175 --> 00:16:31,975
based on health metrics.

237
00:16:32,065 --> 00:16:33,865
This is very much in.

238
00:16:34,195 --> 00:16:38,755
Important because while implementation,
if anything goes wrong goes wrong, then

239
00:16:38,755 --> 00:16:44,125
there should be a way to look into the
different metrices to see whether the

240
00:16:44,125 --> 00:16:45,925
implementation was successful or not.

241
00:16:46,465 --> 00:16:49,925
If it is successful that gives you
a confirmation to roll it out to

242
00:16:49,925 --> 00:16:53,715
all the users to start to have them
start using the new ERP system.

243
00:16:54,165 --> 00:16:58,525
If it does not go right, then it's
very important that we have a rollback

244
00:16:58,525 --> 00:17:00,595
capability and rollback plan as well.

245
00:17:01,095 --> 00:17:05,985
Now implementing immutable infrastructure
principles transformed our ability

246
00:17:05,985 --> 00:17:08,505
to scale during peak periods.

247
00:17:08,775 --> 00:17:13,815
Rather than patching or modifying
running systems, we deploy new instances

248
00:17:13,815 --> 00:17:18,315
from validated images and templates,
ensuring consistent configuration

249
00:17:18,320 --> 00:17:20,970
and eliminating configuration drifts.

250
00:17:21,835 --> 00:17:25,405
This approach enables
rapid horizontal scaling.

251
00:17:25,780 --> 00:17:30,370
During high demand periods like
registration and financial aid deadlines

252
00:17:30,900 --> 00:17:36,450
pre-provisioned capacity plans based
on historical usage patterns, ensure

253
00:17:36,450 --> 00:17:42,390
resources are available when needed,
while allowing, allowing for efficient

254
00:17:42,390 --> 00:17:44,435
cost management during quieter periods.

255
00:17:44,935 --> 00:17:49,465
Now moving on to the next one,
which is security as a code

256
00:17:49,465 --> 00:17:51,085
with continuous compliance.

257
00:17:51,585 --> 00:17:56,475
Now, automated vulnerability scanning
is the first one, which is continuous

258
00:17:56,475 --> 00:18:00,135
assessment of infrastructure
and appli application components

259
00:18:00,465 --> 00:18:04,695
against education sector, threat
models, and compliance framework.

260
00:18:05,235 --> 00:18:10,695
Next is policy S code OPA based
guardrails, enforcing security

261
00:18:10,965 --> 00:18:15,195
requirements across container
orchestration and cloud resources.

262
00:18:16,185 --> 00:18:20,865
The third one is Secret Man Secrets
Management Vault Implementation with

263
00:18:20,865 --> 00:18:25,275
dynamic credential generation and
automatic rotation for sensitive systems.

264
00:18:26,190 --> 00:18:30,910
Next is compliance reporting,
automated evidence collection and

265
00:18:30,910 --> 00:18:37,550
documentation generation for FERPA,
GLBA and other regulatory requirements.

266
00:18:38,050 --> 00:18:42,850
Security as core practices have
fundamentally changed how we approach

267
00:18:42,850 --> 00:18:47,950
GRP protection by coding security
policies and compliance requirements.

268
00:18:48,460 --> 00:18:52,870
We have integrated them directly into
infrastructure provisioning and app

269
00:18:53,590 --> 00:18:55,480
application deployment processes.

270
00:18:56,230 --> 00:19:01,870
This approach reduced security incidents
by 78% while streamlining compliance

271
00:19:01,870 --> 00:19:07,840
processes, continuous validation
against frameworks like NIST 800,

272
00:19:08,480 --> 00:19:11,680
slash 1 71 and fair part requirements.

273
00:19:12,010 --> 00:19:16,540
Ensure systems maintain compliance
throughout their lifecycle

274
00:19:16,690 --> 00:19:21,460
with automated remediation of
deviations from security baselines.

275
00:19:21,960 --> 00:19:25,470
So that was the end of the session.

276
00:19:26,100 --> 00:19:27,930
I thank you for joining this session.

277
00:19:28,230 --> 00:19:29,130
Have a wonderful day.

278
00:19:29,700 --> 00:19:30,120
Thank you.

