1
00:00:00,140 --> 00:00:00,750
Hello, everybody.

2
00:00:00,930 --> 00:00:01,920
My name is Shannon Lau.

3
00:00:01,920 --> 00:00:03,770
I'm the head of engineering
here at Design Strike.

4
00:00:04,270 --> 00:00:06,990
Today, I'm going to be giving a
talk about hybrid image search, and

5
00:00:06,990 --> 00:00:09,980
really what I'm talking about is
searching for image descriptions.

6
00:00:10,480 --> 00:00:12,570
Okay, so I'm just going to give
a quick intro about myself.

7
00:00:12,610 --> 00:00:15,160
I'm going to talk about the
project and design straight.

8
00:00:15,570 --> 00:00:18,940
And then I'm really going to talk about,
the 3 elements types of searches of

9
00:00:18,940 --> 00:00:23,560
text vector search and hybrid search
and then really talk about where we are

10
00:00:23,560 --> 00:00:26,790
and things that we're still working on
because we don't have a perfect and not

11
00:00:26,790 --> 00:00:30,280
necessarily getting all the results we
want to the things that you can do and

12
00:00:30,280 --> 00:00:32,460
look at on your side moving forward.

13
00:00:32,960 --> 00:00:37,620
Okay, so again, as I'm Shannon, CTO,
or head of engineering here at Design

14
00:00:37,620 --> 00:00:40,630
Strike, my previous background, I've
been in the software engineering field

15
00:00:40,640 --> 00:00:45,500
for 20 plus years, worked at companies
like RBC, so those of you abroad, RBC is

16
00:00:45,600 --> 00:00:49,590
Canada's largest bank, and before that
I was working at, initially as a startup

17
00:00:49,590 --> 00:00:53,060
called Microsigns, I got acquired by a
company called InView, so I was their

18
00:00:53,060 --> 00:00:53,904
head of engineering there for a while.

19
00:00:54,045 --> 00:00:56,515
and I was overseeing it
for about five years or so.

20
00:00:56,905 --> 00:00:57,915
we're not a design stripe.

21
00:00:57,915 --> 00:00:59,075
Our front end is Next.

22
00:00:59,075 --> 00:00:59,635
js, React.

23
00:00:59,635 --> 00:00:59,825
next.

24
00:00:59,825 --> 00:01:00,415
js.

25
00:01:00,535 --> 00:01:04,155
mostly some Python, but we do have
some TypeScript stuff in the back.

26
00:01:04,505 --> 00:01:08,085
We do use a little bit of Lang chain
in a couple areas, and then obviously

27
00:01:08,125 --> 00:01:11,905
predominantly our back end database
is Mongo, and we do have GCS for

28
00:01:11,915 --> 00:01:15,655
storing our physical assets, And
then just a little bit more about me.

29
00:01:15,655 --> 00:01:16,295
I'm married.

30
00:01:16,415 --> 00:01:17,995
I'm the father of a 10 year old son.

31
00:01:18,055 --> 00:01:21,485
And, most of the parents will get
this, but I'm also an unpaid Uber

32
00:01:21,485 --> 00:01:23,985
driver where I take my son around to
all of those different activities.

33
00:01:24,345 --> 00:01:28,085
most of the weekends are basically me
chauffeuring from one activity to another.

34
00:01:28,585 --> 00:01:31,775
Okay, so I'm just going to give a quick
little demo about design straight,

35
00:01:31,815 --> 00:01:36,425
not to plug or just to understand the
context and really for people understand

36
00:01:36,615 --> 00:01:38,985
that, what we're trying to solve here.

37
00:01:39,555 --> 00:01:42,795
before I do that, there is 1 thing I
forgot to introduce is to say, I'll

38
00:01:42,795 --> 00:01:44,475
include a link to my LinkedIn profile.

39
00:01:44,715 --> 00:01:47,035
It has all my contact
information on here as well.

40
00:01:47,345 --> 00:01:50,575
You feel free during the
presentation of his questions to

41
00:01:51,145 --> 00:01:53,375
pick me ask questions afterwards.

42
00:01:53,375 --> 00:01:58,355
I know this is a kind of a virtual thing
and you're watching this after the fact.

43
00:01:58,375 --> 00:02:00,885
So if you see anything, you
have questions about stuff.

44
00:02:01,675 --> 00:02:03,575
By all means, just ping me
directly and then we'll get

45
00:02:03,575 --> 00:02:05,365
on a call and we'll step out.

46
00:02:05,865 --> 00:02:08,855
yeah, so again, DesignStripe is
a smart design platform, like a

47
00:02:08,855 --> 00:02:11,074
combination of Canva and ChatTBD.

48
00:02:11,074 --> 00:02:14,944
It creates ready to publish social media
right now for your brand and business.

49
00:02:15,345 --> 00:02:17,434
So let me just demo this off
and talk a little bit about

50
00:02:17,435 --> 00:02:18,655
what exactly that means here.

51
00:02:19,575 --> 00:02:22,515
So, the workflow of what we
do, and I don't want to give

52
00:02:22,515 --> 00:02:23,655
everybody a full demo right now.

53
00:02:23,665 --> 00:02:26,715
I just want to focus in on how
the image piece fits into this.

54
00:02:27,415 --> 00:02:30,315
but just at a high level, what we do is
that we built our own kind of scraper

55
00:02:30,315 --> 00:02:36,125
that takes in a website URL, scrapes all
the text, gets the industry, the tone,

56
00:02:36,345 --> 00:02:40,455
and identifies the fonts by looking
at what are the fonts on your website.

57
00:02:40,900 --> 00:02:44,180
Gets different colors, we identify
the language, and then we get logos.

58
00:02:44,280 --> 00:02:46,810
And with this, we call this our brand DNA.

59
00:02:47,260 --> 00:02:51,320
So this detailed summary of information
here is what allows us to build

60
00:02:52,040 --> 00:02:55,759
contextual layouts for your business
and meet your business needs.

61
00:02:55,780 --> 00:02:59,830
So not only do we have an understanding of
your business, the language, the industry,

62
00:02:59,840 --> 00:03:03,280
and the tone, we also have colors of logos
that allows us to build out assets that

63
00:03:03,280 --> 00:03:04,724
are in line with your business needs.

64
00:03:04,865 --> 00:03:07,015
Expected colors, bright colors and logos.

65
00:03:07,515 --> 00:03:11,955
So the general workflow is this is that
you can see we built out a series of.

66
00:03:12,505 --> 00:03:14,355
Topics that we think are
maybe relevant to you.

67
00:03:14,355 --> 00:03:16,925
So these topics are not, they're
obviously, you can see here, the

68
00:03:16,925 --> 00:03:20,315
rise of AI generate illustrations
and their impact on design.

69
00:03:20,315 --> 00:03:23,065
So these are tailored for this
particular customer, right?

70
00:03:23,065 --> 00:03:25,865
So we use, tips for using
effective using SVG illustrations

71
00:03:25,865 --> 00:03:26,655
in web development, right?

72
00:03:26,655 --> 00:03:29,975
So this is specifically for
draw kit, which is like a, an

73
00:03:29,975 --> 00:03:30,944
illustration assets, right?

74
00:03:30,945 --> 00:03:34,095
So these are all generated
on the fly for the user based

75
00:03:34,145 --> 00:03:36,215
on their company information.

76
00:03:36,795 --> 00:03:39,260
So if I grab this one right
now, It's a point click.

77
00:03:39,280 --> 00:03:44,480
You pick one, one button and then boom,
you're given a whole series of customized,

78
00:03:44,510 --> 00:03:46,520
ready to go, social media posts.

79
00:03:47,310 --> 00:03:49,410
So I'm just going to wrap up
here just quickly on this side.

80
00:03:49,530 --> 00:03:51,350
I do want to just highlight a
couple of quick things here.

81
00:03:51,740 --> 00:03:52,700
So let me go here.

82
00:03:52,840 --> 00:03:55,439
When we talk about, social media
posts, it normally in our space

83
00:03:55,439 --> 00:03:56,819
consists of three different elements.

84
00:03:57,200 --> 00:03:57,979
One is the layout.

85
00:03:57,989 --> 00:04:01,540
So like the visual placement of elements
on the page and like little graphics and

86
00:04:01,540 --> 00:04:03,280
things like this, the way the logo be.

87
00:04:04,050 --> 00:04:05,020
Second thing is the.

88
00:04:05,340 --> 00:04:06,670
Text, right?

89
00:04:06,670 --> 00:04:08,600
So what's the copyright
in the design space?

90
00:04:08,600 --> 00:04:09,590
They call this the copyright.

91
00:04:09,920 --> 00:04:10,260
Where is it?

92
00:04:10,260 --> 00:04:11,790
Copyright going from here, right?

93
00:04:11,790 --> 00:04:15,060
So this is, behind the
scenes using an LLM.

94
00:04:15,070 --> 00:04:17,900
We have a couple of ones again,
throbbing open AI and Gemini that kind

95
00:04:17,900 --> 00:04:21,430
of used to generate this text based on
the brand and everything around that.

96
00:04:21,870 --> 00:04:23,170
And then there's an image, right?

97
00:04:23,220 --> 00:04:28,110
right now, what we have is a stock image
photography that we have access to.

98
00:04:28,250 --> 00:04:31,720
We also have access to a couple of
the third parties ones where we can.

99
00:04:31,720 --> 00:04:31,780
Yeah.

100
00:04:31,780 --> 00:04:31,799
Yeah.

101
00:04:31,960 --> 00:04:34,690
Get, send search queries down
to get, relevant images on this.

102
00:04:34,690 --> 00:04:35,497
Okay.

103
00:04:35,497 --> 00:04:39,572
now, okay, let me just, I want
to highlight one last thing.

104
00:04:40,572 --> 00:04:44,142
the goal of what this is, where we're
trying to do is that these images are.

105
00:04:44,547 --> 00:04:48,857
Based on our stock photography or a third
party stock photography that we have

106
00:04:48,937 --> 00:04:53,097
access to We're scraping on customers
website and ideally especially for

107
00:04:53,097 --> 00:04:56,137
things like e commerce where or where
they have lots of product and services

108
00:04:56,477 --> 00:05:01,017
It may be really useful to be able to
pull those images in and load them into

109
00:05:01,017 --> 00:05:04,177
our product right now So it would be
a great power for people to be like,

110
00:05:04,177 --> 00:05:08,087
hey, we scraped your Candle business
and then we pull in an actual physical

111
00:05:08,532 --> 00:05:10,102
Images of your candles into these assets.

112
00:05:10,112 --> 00:05:12,662
I think that is really where the
direction we're trying to go to.

113
00:05:13,062 --> 00:05:17,852
We also have access in a product
is a image generator, which allows

114
00:05:17,852 --> 00:05:21,082
you to connect up to a third
parties APIs to generate right now.

115
00:05:21,082 --> 00:05:24,442
So it'd be also useful to be
able to generate images and have

116
00:05:24,442 --> 00:05:27,112
those images automatically be
pulled into these assets as well.

117
00:05:27,212 --> 00:05:29,802
So being able to have Hey, I just
generated four or five images about

118
00:05:30,582 --> 00:05:33,342
let's say candles or illustrations
and have them automatically

119
00:05:33,702 --> 00:05:36,892
pulled in here and get images if
they're relevant about this topic.

120
00:05:37,262 --> 00:05:39,342
So that's a key thing that
we're trying to look at here.

121
00:05:39,842 --> 00:05:42,902
Okay, so before I go too far in here,
I'm going to talk a little bit about

122
00:05:42,902 --> 00:05:44,142
the tech stack that we're working with.

123
00:05:44,372 --> 00:05:47,592
And then I'm going to, and then
we'll get into, but I want to

124
00:05:47,602 --> 00:05:48,372
highlight a couple of things.

125
00:05:48,382 --> 00:05:50,302
So just a general workflow where we are.

126
00:05:50,692 --> 00:05:51,702
So our front end is Vercel.

127
00:05:52,287 --> 00:05:55,137
we have, I've really simplified
everything down at this point.

128
00:05:55,137 --> 00:05:58,447
This is our infrastructure is a little bit
more complex than this, but I just want

129
00:05:58,447 --> 00:06:00,057
to highlight the main areas right now.

130
00:06:00,897 --> 00:06:03,657
So when we do with uploading
of an image, what we do is

131
00:06:03,657 --> 00:06:06,217
we load the image to our GCS.

132
00:06:06,457 --> 00:06:09,287
And then, you'll notice before
we're actually saving the Mongo,

133
00:06:09,287 --> 00:06:12,017
we then take the description that
was used to generate the image.

134
00:06:12,497 --> 00:06:15,217
And then we send this down
to a vector embedding.

135
00:06:15,217 --> 00:06:17,437
And so we get a vector of that string.

136
00:06:17,487 --> 00:06:19,637
if you come over here, a group
of kids playing hockey on a pond.

137
00:06:19,637 --> 00:06:25,427
So that string was sent to OpenAI and
calling the vector embedding API, which

138
00:06:25,427 --> 00:06:27,157
then comes back with a long string, right?

139
00:06:27,157 --> 00:06:28,187
A long series of numbers.

140
00:06:28,637 --> 00:06:31,137
And then we store that with the
description of the image that was used

141
00:06:31,157 --> 00:06:35,667
generated where the image or asset
are stored, the user, a bunch of other

142
00:06:35,667 --> 00:06:37,467
metadata dates and times and things.

143
00:06:37,467 --> 00:06:39,107
And the vector embedding gets stored.

144
00:06:39,577 --> 00:06:43,307
in one location on in Mongo as part
of the same collection, and then all

145
00:06:43,307 --> 00:06:46,837
this is stored on, JKE for communities.

146
00:06:47,487 --> 00:06:50,677
Okay I am going to highlight right now
one of the things when I was doing this

147
00:06:50,677 --> 00:06:54,617
presentation is that I was starting
to have like blocks of code of Python

148
00:06:54,617 --> 00:06:57,797
code and it was getting in a bit I was
trying to do show you how to configure

149
00:06:57,797 --> 00:07:02,492
the ORM to run the aggregations, but
I really decided just to simplify

150
00:07:02,492 --> 00:07:06,042
down the flow just because I felt
that it was becoming a tutorial on

151
00:07:06,052 --> 00:07:11,542
FastAPI and Mongo connections and the
aggregations and a bunch of other things.

152
00:07:11,542 --> 00:07:14,072
And I really just wanted to narrow
it down because these are virtual

153
00:07:14,102 --> 00:07:17,542
talks and, I think it was going to
lose a lot of its focus right now.

154
00:07:17,542 --> 00:07:20,042
And I really just wanted to narrow
in on just the implementation

155
00:07:20,042 --> 00:07:21,272
of the hybrid search from Mongo.

156
00:07:21,772 --> 00:07:23,582
again, within a Python environment.

157
00:07:23,582 --> 00:07:26,892
And if afterwards you have any
questions about this or confusion,

158
00:07:27,357 --> 00:07:29,877
By all means, just like I said,
you've got my contact information,

159
00:07:29,907 --> 00:07:31,367
ping me and we can get on a call.

160
00:07:31,867 --> 00:07:32,207
Okay.

161
00:07:32,707 --> 00:07:33,507
Just give me a second.

162
00:07:33,507 --> 00:07:34,627
I'm going to set up my demo here.

163
00:07:35,127 --> 00:07:38,837
Okay, let me just get this to text.

164
00:07:39,337 --> 00:07:41,707
Just, I'm using this here because
it's, I'm, just so you're clear.

165
00:07:42,517 --> 00:07:46,377
What I did is I modified this UI here
just so that for the purposes of this

166
00:07:46,377 --> 00:07:49,617
demo, you can see in here that I've got
the text, the vector and the hybrid.

167
00:07:49,617 --> 00:07:52,237
So I had to throw something together
quickly, which is not in production.

168
00:07:52,672 --> 00:07:55,902
and that's why I just I'm running
that here locally, is just so that I

169
00:07:55,902 --> 00:07:57,182
can have that control for the demo.

170
00:07:57,182 --> 00:08:00,092
So I don't have to keep toggling
and changing the back end.

171
00:08:00,282 --> 00:08:02,492
So I had to do some modification
to the code and that's why

172
00:08:02,502 --> 00:08:03,202
it's just done like this.

173
00:08:03,692 --> 00:08:07,412
So in this environment, just to keep
things simple and confusion, I've got

174
00:08:07,422 --> 00:08:11,002
a couple of images here of some just
different topics in them, but there are

175
00:08:11,002 --> 00:08:13,212
two in here that have similar topics.

176
00:08:13,212 --> 00:08:17,222
This is a picture of a black Porsche,
and then you've got a picture of a

177
00:08:17,222 --> 00:08:18,962
red Ferrari sports car right now.

178
00:08:19,472 --> 00:08:21,512
So this is what I'm doing
is your traditional.

179
00:08:21,732 --> 00:08:23,822
Text search on how all this works.

180
00:08:23,822 --> 00:08:27,302
So let me just walk through, actually
I'll do the demo of this and then

181
00:08:27,302 --> 00:08:30,972
I'm going to go do the, I'll show
through the, index set up in the

182
00:08:30,982 --> 00:08:32,832
aggregation for this in here.

183
00:08:32,842 --> 00:08:35,992
If I come over here and I type
in car, let's give it a second.

184
00:08:36,842 --> 00:08:38,152
I'm going to see the red Ferrari.

185
00:08:38,652 --> 00:08:42,172
So the descriptions, I made a mistake
when I was testing this out here.

186
00:08:42,322 --> 00:08:46,662
locally, I'm not including descriptions in
that search results, you'll notice that.

187
00:08:47,007 --> 00:08:49,917
A picture of a red Ferrari sports
car is in the description here,

188
00:08:49,987 --> 00:08:50,977
which is perfect, is what we said.

189
00:08:51,027 --> 00:08:52,557
But why did this car not come up?

190
00:08:52,587 --> 00:08:53,567
Why did the Porsche not come up?

191
00:08:53,927 --> 00:08:56,307
if we look at the text description,
there's nothing in there about a car.

192
00:08:56,807 --> 00:09:00,407
basically, the way that the text is
working is looking for keyword searches,

193
00:09:00,407 --> 00:09:02,647
and it didn't see car anywhere in here.

194
00:09:02,897 --> 00:09:04,757
And so basically getting the
results that come up in there.

195
00:09:05,257 --> 00:09:08,117
And so if I come back to
this one and I go automobile,

196
00:09:08,617 --> 00:09:09,587
I get no results.

197
00:09:09,937 --> 00:09:12,627
So even though I have two
automobiles in here, I'm getting

198
00:09:12,637 --> 00:09:13,597
no results back from them.

199
00:09:13,657 --> 00:09:17,457
And the reason is that
there is no, keywords.

200
00:09:17,792 --> 00:09:22,832
Automobile is not in this description
here and is not in this description.

201
00:09:22,832 --> 00:09:26,262
And so this is the route of where
we're trying to solve, right?

202
00:09:26,352 --> 00:09:30,312
And so if we go back to my previous
demo, if somebody is trying to build

203
00:09:30,312 --> 00:09:35,422
a social media about that thing about
simplify your SVG usage, this may be a

204
00:09:35,422 --> 00:09:37,722
picture of a woman working on a computer.

205
00:09:38,542 --> 00:09:41,692
But how do you know, like, how do you,
how do the association that this is?

206
00:09:42,262 --> 00:09:43,052
Linked, right?

207
00:09:43,052 --> 00:09:45,962
Because this description may
not have anything about SVGs or

208
00:09:46,022 --> 00:09:47,152
illustration builders in there.

209
00:09:47,412 --> 00:09:51,142
It may just be a picture of a woman
with a dog working at her desk Doing

210
00:09:51,142 --> 00:09:53,742
creative work or something like
that how do you link that to and so

211
00:09:53,762 --> 00:09:57,242
this type of an image would not come
through in the search results on this

212
00:09:57,742 --> 00:10:02,332
Okay, so let me go through just how
this was set up and then we'll keep

213
00:10:02,342 --> 00:10:04,042
working through And go from there.

214
00:10:04,162 --> 00:10:08,607
So just In my document, in my slides that
I'll be sharing with you guys, I have

215
00:10:08,607 --> 00:10:12,907
links to the Mongo site and some other
links that really give a good example.

216
00:10:12,917 --> 00:10:15,747
These were the links in the
documentation that I used to

217
00:10:15,767 --> 00:10:17,237
get up to speed on this stuff.

218
00:10:17,567 --> 00:10:20,687
I didn't want to just copy it over
and paste it over here and I also,

219
00:10:20,727 --> 00:10:22,697
it's just a lot of text right now.

220
00:10:22,777 --> 00:10:25,107
And I just, what I'm going to
do is highlight the key things

221
00:10:25,107 --> 00:10:27,957
and then in my slide you can
find links to the documentation.

222
00:10:28,437 --> 00:10:31,597
Again, if you have questions, just
ping me on LinkedIn or you got

223
00:10:31,597 --> 00:10:32,897
my email and contact information.

224
00:10:33,167 --> 00:10:34,477
We can find some time to do this.

225
00:10:34,977 --> 00:10:35,277
Okay.

226
00:10:35,437 --> 00:10:38,207
So the 2 steps process is you
need to create a search index.

227
00:10:39,097 --> 00:10:40,747
And then you need to create
an aggregation, right?

228
00:10:40,747 --> 00:10:44,527
So the search index is you're setting up
an index on Mongo collection And here, you

229
00:10:44,527 --> 00:10:47,967
know i'm putting in I want to make sure
that deleted is an index Description is

230
00:10:47,967 --> 00:10:50,247
auto complete and then i'm using user id.

231
00:10:50,357 --> 00:10:54,287
These images are per user So it's not like
a large image catalog that's shared by

232
00:10:54,297 --> 00:10:58,767
everybody It is what we're trying to do
is filtering for a user So these searches

233
00:10:58,777 --> 00:11:02,842
have to be on users and maybe additional
other people The filter criteria,

234
00:11:02,972 --> 00:11:03,912
and that's what I'm highlighting.

235
00:11:04,412 --> 00:11:09,042
So this is the search index, and then this
is your traditional search aggregation.

236
00:11:09,042 --> 00:11:11,982
And in here, I'm doing the
criteria of filtering my user ID.

237
00:11:12,842 --> 00:11:15,442
I will highlight this, I had mentioned
to you at the beginning that there is,

238
00:11:15,472 --> 00:11:18,602
we do have a bit of TypeScript and that's
why you're seeing a bit of a camel case,

239
00:11:18,602 --> 00:11:22,842
is that some of these fields were built
with camel case in some of them right now.

240
00:11:22,842 --> 00:11:26,582
So it's just one of the things as
a team that we need to address.

241
00:11:26,992 --> 00:11:27,762
Just give me a second.

242
00:11:28,262 --> 00:11:29,492
Alrighty, let me go on to the next one.

243
00:11:29,992 --> 00:11:32,492
Alright, so I'm going to just
talk a little bit about Vector

244
00:11:32,492 --> 00:11:34,462
embeddings, I'm going to show a
link to the page here right now.

245
00:11:34,462 --> 00:11:39,062
And in my slides here, again, vector
embeddings is on its own topic.

246
00:11:39,282 --> 00:11:43,778
there are a huge enormous of YouTube
videos that you can get up to speed too.

247
00:11:44,128 --> 00:11:47,568
there are very good, the open
AI docs on this are very good.

248
00:11:47,618 --> 00:11:50,608
I, this is how I learned, I went through
and played around with it as well.

249
00:11:50,658 --> 00:11:53,738
I don't want to just go and give a five
minute speech on vector embeddings.

250
00:11:53,748 --> 00:11:56,988
I think if you're not up to speed on
this stuff, I highly recommend just

251
00:11:57,008 --> 00:11:58,398
maybe watching a quick YouTube video.

252
00:11:58,763 --> 00:12:02,143
I'll give a quick overview of what this
is, but I'm mainly providing links to how

253
00:12:02,143 --> 00:12:04,223
this is all going to work for you guys.

254
00:12:04,723 --> 00:12:07,233
Okay, so just to highlight
from OpenAI, vector embedding.

255
00:12:07,233 --> 00:12:10,583
A vector embedding is a vector
list of floating point numbers.

256
00:12:11,013 --> 00:12:13,323
The distance between vectors
measures their relatedness.

257
00:12:13,323 --> 00:12:17,423
Small distances suggest high relatedness,
and large distances suggest low.

258
00:12:17,453 --> 00:12:18,563
So what is it really doing?

259
00:12:18,563 --> 00:12:19,983
Why are we using vectors?

260
00:12:20,573 --> 00:12:23,973
The key thing is trying to get semantic
between how do you, if you have two

261
00:12:23,973 --> 00:12:28,863
sentences, a red automobile, a red
car driving up the street versus, a

262
00:12:28,883 --> 00:12:30,883
automobile driving down the laneway.

263
00:12:30,883 --> 00:12:32,563
Like, how do you measure those similar?

264
00:12:32,573 --> 00:12:35,163
The keywords aren't really lining
up because there's different words,

265
00:12:35,163 --> 00:12:36,773
but they do have very close meaning.

266
00:12:37,713 --> 00:12:39,893
And so this is what, one of the
things that we're trying to solve

267
00:12:39,893 --> 00:12:43,293
with vector embeddings is that how
do you measure semantic meaning?

268
00:12:43,433 --> 00:12:46,213
How do you measure the meaning
of those sentences and not

269
00:12:46,213 --> 00:12:47,323
just looking at the keywords?

270
00:12:47,493 --> 00:12:51,623
And that's, is the core of what embeddings
are trying to do is measure the.

271
00:12:52,198 --> 00:12:56,448
the meaning and it's between those two
sentences by not just looking at the

272
00:12:56,448 --> 00:12:58,538
key words, let alone those sentences.

273
00:12:59,308 --> 00:13:03,278
So that is at a high level, the steps
for creating an, a vector embedding.

274
00:13:03,298 --> 00:13:04,888
I, again, I'll point you to this.

275
00:13:04,898 --> 00:13:05,938
It's very detailed.

276
00:13:05,988 --> 00:13:10,188
This is exactly how I'm doing it right
now, but you're open AI has them.

277
00:13:10,218 --> 00:13:14,058
There's a lot of other, LLM providers
who have a different model that you

278
00:13:14,058 --> 00:13:18,358
can connect to, but basically you
send a string, your query string,

279
00:13:18,358 --> 00:13:19,808
or your description of your image.

280
00:13:20,238 --> 00:13:24,548
To open AI, if you use an open
AI or whatever provider, it will

281
00:13:24,568 --> 00:13:27,588
come generate a vector embedding
and then you can save it in there.

282
00:13:28,048 --> 00:13:32,228
And then when you want to do a match, you,
if you're looking for, the automobile,

283
00:13:32,548 --> 00:13:36,658
you would send that up to open AI would
generate a quick embedding, and then you

284
00:13:36,658 --> 00:13:37,828
can do your singularity match on that.

285
00:13:38,328 --> 00:13:41,138
And again, I just mentioned why we're
doing vector embeddings is to do the.

286
00:13:41,573 --> 00:13:43,973
similarity search or semantic
search between two different

287
00:13:43,973 --> 00:13:46,223
strings or in a database.

288
00:13:46,723 --> 00:13:50,553
Okay, so now I'm going to talk a
bit about, I'm going to shift in and

289
00:13:50,553 --> 00:13:51,563
I'm going to go back to the demo.

290
00:13:51,563 --> 00:13:52,813
I think I'll be consistent here.

291
00:13:53,313 --> 00:13:55,833
Let me just pause here because
I'm going to get my stuff ready.

292
00:13:56,333 --> 00:13:59,243
So in our text search, we did this, right?

293
00:13:59,243 --> 00:14:03,193
We did our search for automobile using
text and we got nothing back, right?

294
00:14:03,693 --> 00:14:06,133
So now what I'm going to do
is I'm going to flip this to

295
00:14:06,373 --> 00:14:08,383
vector and I'm going to do.

296
00:14:08,883 --> 00:14:10,763
So now I'm getting two results back.

297
00:14:11,713 --> 00:14:15,473
Okay, so now I'm doing a different
vector embedding search, but I'm

298
00:14:15,473 --> 00:14:17,263
getting two results back right now.

299
00:14:17,293 --> 00:14:22,253
So when I did just a straight up text
search, I got no results back because,

300
00:14:22,653 --> 00:14:27,263
none of these descriptions in here
mention anything about automobiles in

301
00:14:27,263 --> 00:14:28,743
their straight just text right now.

302
00:14:29,373 --> 00:14:33,208
However, when I put in the word
automobile, I'm doing a vector

303
00:14:33,208 --> 00:14:36,278
embedding on the phrase automobile,
and I'm trying to find comparing

304
00:14:36,338 --> 00:14:39,648
which are the results that have the
most closest match to automobile, and

305
00:14:39,658 --> 00:14:40,638
these are the ones that are coming up.

306
00:14:41,138 --> 00:14:44,728
And so this is a bit of the power
of vector embeddings is that now

307
00:14:45,098 --> 00:14:50,248
it can look beyond, the vector
search and maybe a text search and

308
00:14:50,248 --> 00:14:51,668
can be more of a meeting search.

309
00:14:51,668 --> 00:14:55,238
So it can understand that automobile
is very similar to a sports car

310
00:14:55,238 --> 00:14:56,738
or is very similar to a Porsche.

311
00:14:57,338 --> 00:14:58,448
These have similar meanings.

312
00:14:58,448 --> 00:14:59,548
Therefore, they have higher results.

313
00:14:59,548 --> 00:15:01,078
We should return these
results back to the user.

314
00:15:01,578 --> 00:15:05,948
So this is normally a point where I
would pause and ask for questions.

315
00:15:05,948 --> 00:15:08,698
But again, if you reiterate, I'll
probably keep saying this, but if you

316
00:15:08,698 --> 00:15:12,548
have any questions, don't hesitate
to ping me afterwards or and, we

317
00:15:12,548 --> 00:15:13,758
can book some time to review this.

318
00:15:14,428 --> 00:15:17,238
I'm just going to talk a little bit more
about the setup of the vector embedding

319
00:15:17,398 --> 00:15:19,158
and how it works and then go from there.

320
00:15:19,968 --> 00:15:20,248
Okay.

321
00:15:20,988 --> 00:15:24,018
Again, this is very similar to what
we've done before in the text search.

322
00:15:24,068 --> 00:15:26,968
Now we're doing a vector search demo.

323
00:15:26,978 --> 00:15:28,898
You've got the two pieces,
you've got a search index,

324
00:15:28,938 --> 00:15:29,778
and you've got an aggregation.

325
00:15:30,558 --> 00:15:33,628
in the search index, you're
creating a vector search index.

326
00:15:33,958 --> 00:15:36,373
I, this is not Everything
you need to do it.

327
00:15:36,773 --> 00:15:41,173
I have a lot of links in the notes for
you on how to, on where I set this up.

328
00:15:41,673 --> 00:15:43,303
I'm just highlighting some
of the key things that I

329
00:15:43,303 --> 00:15:44,203
wanted to do in my dimensions.

330
00:15:44,263 --> 00:15:45,843
key things here is the
number of dimensions.

331
00:15:45,853 --> 00:15:46,703
So how big is it?

332
00:15:46,743 --> 00:15:49,053
So this is, 512 is a bit
of a smaller dimension.

333
00:15:49,393 --> 00:15:51,923
you can get to things like
1024, I believe, and even bigger

334
00:15:51,923 --> 00:15:53,103
dimensions if you want to.

335
00:15:53,573 --> 00:15:56,793
Bigger dimensions come at a
cost in the sense of your data

336
00:15:56,793 --> 00:15:57,613
storage is going to increase.

337
00:15:57,623 --> 00:15:59,773
So you're going to be storing
lots and lots of images or

338
00:15:59,773 --> 00:16:01,073
lots of just vector embeddings.

339
00:16:01,658 --> 00:16:06,368
If you're using a very large dimension
for each one of them, it could,

340
00:16:06,468 --> 00:16:09,078
slow things down and just take up
a bit of the data space storage.

341
00:16:09,718 --> 00:16:12,418
But the bigger the dimensions tend
to be, you get better results.

342
00:16:12,918 --> 00:16:14,078
The path, right?

343
00:16:14,078 --> 00:16:17,668
So I mentioned to you that we
have restoring the text prompt

344
00:16:17,778 --> 00:16:18,678
and the vector and bronze.

345
00:16:18,678 --> 00:16:20,078
They're separate, right?

346
00:16:20,078 --> 00:16:23,678
So we put the vector embeddings in one
column effectively in the collection and

347
00:16:23,678 --> 00:16:25,868
then just the text in another column.

348
00:16:25,868 --> 00:16:27,488
that's why it's description values, right?

349
00:16:27,488 --> 00:16:28,398
So it's not the description.

350
00:16:28,398 --> 00:16:30,018
It's description values
are stored separately.

351
00:16:30,388 --> 00:16:33,648
It's still within the same collection,
same document, but separately.

352
00:16:34,148 --> 00:16:38,338
Then you can choose your, obviously
the type is vector, but you can choose

353
00:16:38,338 --> 00:16:41,388
your similarity, and there's really
three types of similarities you can

354
00:16:41,388 --> 00:16:43,668
use cosine, dot product, and Euclidean.

355
00:16:44,238 --> 00:16:46,658
And again, you want to play around with
those values a bit when you're doing

356
00:16:46,658 --> 00:16:48,478
your setup, just to see the difference.

357
00:16:48,668 --> 00:16:50,778
You'll see a lot of people
start defaulting to cosine,

358
00:16:50,788 --> 00:16:51,738
that's what we did as well.

359
00:16:52,098 --> 00:16:54,258
We've played around with a couple
of them, and cosine seems to

360
00:16:54,258 --> 00:16:55,458
be working and getting results.

361
00:16:56,243 --> 00:16:58,813
And the last thing I wanted to
show is just including filter

362
00:16:58,903 --> 00:17:01,063
path, which you can do in there.

363
00:17:01,463 --> 00:17:05,593
As I mentioned, we are looking for
user based images, not just a mix

364
00:17:06,003 --> 00:17:07,413
of searching of everybody's images.

365
00:17:07,913 --> 00:17:09,933
Okay, so now we're getting
into the aggregation.

366
00:17:09,943 --> 00:17:11,723
So how do you set up
and run the aggregation?

367
00:17:11,723 --> 00:17:14,913
So you've got your index name, the path
is whatever you pass in the embedding.

368
00:17:14,923 --> 00:17:17,463
So when you're doing your search,
when you get automobile, we would

369
00:17:17,463 --> 00:17:19,043
send that up to OpenAI, get it quick.

370
00:17:19,073 --> 00:17:22,763
That's normally sub one second, maybe
even faster to get an embedding on,

371
00:17:22,933 --> 00:17:26,093
on a string, and then, you can limit
and add some limits and number of

372
00:17:26,093 --> 00:17:27,123
candidates, and then you can apply it.

373
00:17:27,533 --> 00:17:30,503
And then this will basically
return a set of results that

374
00:17:30,503 --> 00:17:33,323
will include the similarity
scores for each of these as well.

375
00:17:33,323 --> 00:17:34,343
All right.

376
00:17:34,363 --> 00:17:36,713
So this is going through this demo here.

377
00:17:37,213 --> 00:17:40,483
So this is working well right
now, but there's a challenge in

378
00:17:40,483 --> 00:17:44,873
it right now that when I asked for
automobile, what happens if I wanted

379
00:17:44,943 --> 00:17:47,583
to give more weight to keywords?

380
00:17:48,263 --> 00:17:52,723
So like, why did the red one come
up versus, the black Porsche, right?

381
00:17:52,723 --> 00:17:55,563
So how do I control, let's say I
wanted to do a black automobile to

382
00:17:55,563 --> 00:18:01,523
make sure I start to favor keywords
versus on the automobile, because

383
00:18:01,523 --> 00:18:03,703
you might be dropping some results,
even though the keywords are there.

384
00:18:03,703 --> 00:18:04,923
So how do you find that right balance?

385
00:18:05,693 --> 00:18:08,063
And that really is what we're
talking about in hybrid search.

386
00:18:08,763 --> 00:18:11,953
And what hybrid search is really saying,
okay, the text search is really good.

387
00:18:11,953 --> 00:18:13,403
It's great for the keyword matching.

388
00:18:13,823 --> 00:18:15,913
The vector search is really
good for semantic matching.

389
00:18:15,913 --> 00:18:16,453
But what happened?

390
00:18:16,453 --> 00:18:18,313
Do I combine those 2 together into 1?

391
00:18:19,033 --> 00:18:22,403
And that's really what we're
talking about in a hybrid search.

392
00:18:22,903 --> 00:18:26,163
So I'm going to come back
over here and I'll go through

393
00:18:27,083 --> 00:18:28,573
the setup of the aggregate.

394
00:18:29,418 --> 00:18:32,578
Hybrid search and then I'll give you a
demo and then I'm going to talk about

395
00:18:32,578 --> 00:18:36,128
some optimization techniques that
we can do and then show some final

396
00:18:36,128 --> 00:18:39,318
wrap it up with some next steps in
terms of things that you can look at.

397
00:18:40,058 --> 00:18:43,778
Okay, so I'm just going to first start off
with just a setup, that we're going to do.

398
00:18:44,628 --> 00:18:48,388
again, it's really the same
setup in terms of your previous,

399
00:18:48,398 --> 00:18:51,158
your indexes haven't changed for
both your text and your search.

400
00:18:51,158 --> 00:18:52,968
So I'm not, I've already showed
that in the previous one.

401
00:18:53,368 --> 00:18:56,108
It's really a two step process
in terms of your aggregation.

402
00:18:56,798 --> 00:18:59,198
as I mentioned before, I wasn't going
to go through the whole setup of Mongo,

403
00:18:59,198 --> 00:19:01,688
just it would have been a lot more
slides and a lot more information.

404
00:19:01,708 --> 00:19:05,108
And I just want to keep this high level
and really focus on a particular topic.

405
00:19:05,168 --> 00:19:07,598
Just I found the focusing
on the aggregation side.

406
00:19:07,598 --> 00:19:11,198
I thought would be more valuable
for you for the people viewing this.

407
00:19:12,008 --> 00:19:14,248
So aggregation part one.

408
00:19:14,528 --> 00:19:15,258
So the vector search.

409
00:19:15,258 --> 00:19:18,968
So in here I'm including the index
name, the description values.

410
00:19:18,968 --> 00:19:20,698
This is very similar
to what we had before.

411
00:19:20,698 --> 00:19:23,198
So this, what you're doing at the
first stage of your aggregation is

412
00:19:23,198 --> 00:19:24,478
you're running the vector search.

413
00:19:24,768 --> 00:19:28,378
So this is exactly what I did before,
which is a traditional, it's the same.

414
00:19:28,628 --> 00:19:31,758
you then add an additional
stage after this.

415
00:19:32,118 --> 00:19:36,088
Which is you do a union with
and so what you're doing a union

416
00:19:36,098 --> 00:19:37,478
with you're specifying a column.

417
00:19:37,478 --> 00:19:41,228
So I'm still running this is union which
is allowed would allow you to do I think

418
00:19:41,678 --> 00:19:45,098
searches across multiple collections, but
I'm doing it within the same collection.

419
00:19:45,968 --> 00:19:48,878
I'm then creating a separate pipeline
and now I'm doing a text search.

420
00:19:49,378 --> 00:19:51,668
So this is within one
aggregation pipeline.

421
00:19:52,068 --> 00:19:53,638
I can do two sets of searches.

422
00:19:53,648 --> 00:19:55,358
So here I'm doing in a text search.

423
00:19:55,778 --> 00:19:56,678
Here's the index.

424
00:19:56,758 --> 00:19:57,848
I'm now doing compound.

425
00:19:58,098 --> 00:19:59,268
I'm searching the description.

426
00:19:59,268 --> 00:20:02,448
So now I'm doing a text search and
then I'm applying my filter part two.

427
00:20:02,948 --> 00:20:07,578
So both of these things, it's
allowing me to combine those results

428
00:20:07,588 --> 00:20:11,508
and get them into, both within
one kind of query to the database.

429
00:20:12,053 --> 00:20:14,183
I'm running my tech
search, I'm vector search.

430
00:20:14,513 --> 00:20:16,973
I'm then bringing in the tech
search I'm, and then I'm mixing

431
00:20:16,973 --> 00:20:17,903
and matching those ones together.

432
00:20:18,403 --> 00:20:18,643
Okay.

433
00:20:18,733 --> 00:20:23,833
So if I come over here now I'm on
hybrid and do black automobile.

434
00:20:24,333 --> 00:20:27,513
So now, right now, so it's going and
looking at the keywords and I'm gonna

435
00:20:27,513 --> 00:20:30,003
talk a bit about how you can play around
with this, but now I'm getting the

436
00:20:30,033 --> 00:20:35,543
black automobile because I'm introducing
the keyword black in that sentence.

437
00:20:35,868 --> 00:20:37,118
And it's getting in there right now.

438
00:20:37,118 --> 00:20:40,218
It's giving them more of a favorable
rank and getting better results.

439
00:20:41,208 --> 00:20:44,108
And so again, I would normally
stop here and just see if

440
00:20:44,108 --> 00:20:45,138
there's any questions in it.

441
00:20:45,638 --> 00:20:46,968
So that's the gist of it, right?

442
00:20:46,968 --> 00:20:50,458
So now we're talking about combining
these two together to get both

443
00:20:50,468 --> 00:20:54,428
your text and your, And your
vector search combined together.

444
00:20:54,928 --> 00:20:56,048
So this looks great.

445
00:20:56,438 --> 00:20:59,758
But the question is, how do I get
priority order, order the results?

446
00:20:59,768 --> 00:21:02,848
what can I do to like, make sure
all I've got is two sets of data

447
00:21:02,918 --> 00:21:04,688
to merge them together and you're
just dumping them out there.

448
00:21:04,958 --> 00:21:07,738
How do I organize and sort those
results and make them more relevant?

449
00:21:08,663 --> 00:21:10,773
And I'm going to talk about two
different things that we've done.

450
00:21:11,283 --> 00:21:12,883
the first one is reciprocal rank.

451
00:21:13,123 --> 00:21:17,873
Again, in the notes here, I'm
referencing to a document on Mongo.

452
00:21:18,823 --> 00:21:20,863
I'm going to summarize the
key attributes in there.

453
00:21:21,803 --> 00:21:26,353
But again, I followed their documentation
pretty much to the T and was able

454
00:21:26,353 --> 00:21:29,433
to implement that and get it up and
running for my application as well.

455
00:21:29,483 --> 00:21:32,463
I'm going to go through the highlighted
points that I think are relevant, but I

456
00:21:32,463 --> 00:21:35,843
would recommend either reaching out to
me afterwards, but also looking at the

457
00:21:35,843 --> 00:21:38,493
documentation from Mongo for this as well.

458
00:21:38,993 --> 00:21:41,133
So aggregation, same as before.

459
00:21:41,143 --> 00:21:43,913
I've got my vector in here,
but you'll see that I've done

460
00:21:43,913 --> 00:21:44,823
something a little bit different.

461
00:21:45,023 --> 00:21:48,543
So now what I'm doing is I'm taking
out something called the vector score,

462
00:21:49,073 --> 00:21:50,783
and I'm adding a reciprocal rank.

463
00:21:50,783 --> 00:21:54,023
So a reciprocal rank will do is you
take your results, and however they're

464
00:21:54,023 --> 00:21:57,753
sorted, it will give them a number
in, starting from the first one.

465
00:21:57,753 --> 00:22:00,663
It gives them like a ranking number
where they're divided by 60 here.

466
00:22:01,113 --> 00:22:03,213
And this is a technique that
allows you to compare different

467
00:22:03,213 --> 00:22:04,173
sets of results together.

468
00:22:04,503 --> 00:22:06,933
So here I'm applying a reciprocal rank.

469
00:22:07,488 --> 00:22:11,818
And giving them like a uniform number
where they rank based on their,

470
00:22:12,318 --> 00:22:15,408
order in the list, not their search
score, but their order in the list.

471
00:22:15,408 --> 00:22:16,948
And that's your key for
another reciprocal rank.

472
00:22:17,448 --> 00:22:20,458
So I'm applying this, giving me
a uniform number to work with on

473
00:22:20,458 --> 00:22:23,698
the vector side, and then same
thing on the aggregation side.

474
00:22:23,748 --> 00:22:28,118
So now I have a reciprocal rank here
where I can do this on the text score.

475
00:22:28,428 --> 00:22:31,698
now it's looking at giving me a
uniform sort of number across.

476
00:22:32,368 --> 00:22:35,068
Again, based on how they return
back in the results right now.

477
00:22:35,258 --> 00:22:38,708
And then lastly, you can do a final
combine and merge these things,

478
00:22:38,708 --> 00:22:40,508
insert them by those combines.

479
00:22:40,728 --> 00:22:45,268
So it'll match them together, looking
at what was the vector score search in

480
00:22:45,268 --> 00:22:47,658
the reciprocal rank for Say the Porsche.

481
00:22:48,058 --> 00:22:48,748
What was that one?

482
00:22:48,748 --> 00:22:53,168
And then merge them together and then sort
them into the order as well at the end.

483
00:22:53,878 --> 00:22:56,788
Again, I refer you to the
docs here on how they did it.

484
00:22:56,888 --> 00:22:59,278
They give a pretty good walkthrough
and a good demo that you can do.

485
00:22:59,778 --> 00:23:02,268
And again, don't hesitate to ping me
if you have any questions on this.

486
00:23:02,768 --> 00:23:03,398
perfect.

487
00:23:03,408 --> 00:23:03,848
Great.

488
00:23:04,038 --> 00:23:05,258
But there's an issue there.

489
00:23:05,888 --> 00:23:08,478
If we go back to some of the results,
the way that vector search is going to

490
00:23:08,488 --> 00:23:10,808
do is it will return back your results.

491
00:23:11,168 --> 00:23:15,478
And give you a search index score in
terms of how good those results are.

492
00:23:15,488 --> 00:23:20,068
So you will actually get this hockey
scene coming back in your results.

493
00:23:20,558 --> 00:23:21,758
So the challenge with it is that.

494
00:23:22,338 --> 00:23:24,068
I look for black automobile.

495
00:23:24,428 --> 00:23:26,748
Why am I getting the hockey
scene and my results?

496
00:23:27,508 --> 00:23:31,768
And the reason is that it's giving
you a similarity search, and so

497
00:23:31,788 --> 00:23:34,658
in the reciprocal rank, when I
was doing this, you could get some

498
00:23:34,658 --> 00:23:37,928
of these scores are like, what's
the hockey score seen back for?

499
00:23:38,548 --> 00:23:39,708
What's this one back for?

500
00:23:40,658 --> 00:23:43,508
And what you need to do is what we
ended up doing was saying, I want

501
00:23:43,508 --> 00:23:44,888
to actually put some thresholds.

502
00:23:45,303 --> 00:23:50,763
In these numbers to see and
say, only return me back results

503
00:23:50,763 --> 00:23:55,923
where the similarity score
is above 60 percent or 70%.

504
00:23:56,443 --> 00:23:59,943
And let's say, similar to the text
where you can only show me text

505
00:23:59,943 --> 00:24:05,813
results where, the similar search, the
text search score is above, say, 0.

506
00:24:05,813 --> 00:24:07,533
6 or whatever the number
you want to play with.

507
00:24:08,423 --> 00:24:11,403
so if we take that to the
next stage, this is what we're

508
00:24:11,403 --> 00:24:12,813
looking at here is combining now.

509
00:24:12,813 --> 00:24:18,753
So now what I'm doing here is I'm sending
some filter criterias in the aggregation

510
00:24:19,283 --> 00:24:23,663
to say, before you do your reciprocal
rank, I need you to filter out everything

511
00:24:23,663 --> 00:24:26,283
that is below this score right now.

512
00:24:26,313 --> 00:24:29,293
So again, I'm showing bits and
pieces, not the full pieces.

513
00:24:29,588 --> 00:24:32,498
but what I did is that I put
in a minimum text score and

514
00:24:32,498 --> 00:24:33,708
then a minimum vector score.

515
00:24:34,228 --> 00:24:37,098
And so I attended a stage, which I
did before this, but I was running

516
00:24:37,098 --> 00:24:40,468
out of space here where I would do a
match before I would actually do the

517
00:24:40,468 --> 00:24:45,278
reciprocal score to filter out and
say, okay, anything where the men, the

518
00:24:45,278 --> 00:24:46,778
minimum vector score is below say 0.

519
00:24:46,848 --> 00:24:47,778
6, you ignore.

520
00:24:48,498 --> 00:24:50,058
Or same thing for the tech score as well.

521
00:24:50,178 --> 00:24:55,368
And so I can put those criteria in and
then now I know that of the results that

522
00:24:55,368 --> 00:24:59,648
are return, return with the reciprocal
rank, I'm also not getting anything where

523
00:24:59,648 --> 00:25:01,688
that is below certain threshold values.

524
00:25:02,228 --> 00:25:04,278
And then that improves, my score as well.

525
00:25:04,778 --> 00:25:04,988
Okay.

526
00:25:05,378 --> 00:25:07,658
One last thing I'm gonna talk about
and then I'll go through the next

527
00:25:07,658 --> 00:25:11,748
steps so you can also in this, When
you're combining this in there, and

528
00:25:11,748 --> 00:25:15,578
when you look at the document for
reciprocal rank, you can, they will

529
00:25:15,578 --> 00:25:17,358
give you an example on text weight.

530
00:25:17,598 --> 00:25:20,548
So you can see in here, and this
is all from a lot of this is

531
00:25:20,548 --> 00:25:22,318
following from the documentation.

532
00:25:22,318 --> 00:25:26,523
So again, I was trying to paste
this in here and not have 30 or

533
00:25:26,523 --> 00:25:27,478
40 different slides for you guys.

534
00:25:27,478 --> 00:25:29,138
I wanted to keep it short and sweet.

535
00:25:29,638 --> 00:25:34,213
But, In their documentation, you'll
see that they apply text weights on.

536
00:25:34,353 --> 00:25:38,593
So if you want to say, I want to
reference, I want to give more favoritism

537
00:25:38,593 --> 00:25:43,523
to the text results versus the search
results versus the vector results.

538
00:25:43,533 --> 00:25:46,823
You can play with those numbers and say,
Actually, I'm going to give more weight

539
00:25:46,823 --> 00:25:50,313
to text versus more weight to the vector
search, and then you can do that with

540
00:25:50,313 --> 00:25:52,143
applying some weights over here as well.

541
00:25:52,643 --> 00:25:54,953
Okay, so now we're at the point
where we're going to wrap it up.

542
00:25:54,983 --> 00:25:57,713
This is normally when my presentations,
I would turn it to the audience

543
00:25:57,713 --> 00:25:58,993
and ask for any questions.

544
00:25:59,733 --> 00:26:01,923
I'll say, and I'll keep
repeating myself on this one.

545
00:26:01,983 --> 00:26:04,373
Please, if you have any questions,
you're not sure about this stuff.

546
00:26:04,748 --> 00:26:05,768
Don't hesitate to ping me.

547
00:26:05,768 --> 00:26:06,598
We can find some time.

548
00:26:06,598 --> 00:26:08,348
I would gladly love to get on the talk.

549
00:26:08,348 --> 00:26:08,868
And, it's great.

550
00:26:09,158 --> 00:26:12,358
It's great to give these presentations,
but I get a lot of sort of enjoyment of

551
00:26:12,358 --> 00:26:15,418
actually being able to talk to people
about this and see the passionate.

552
00:26:15,918 --> 00:26:17,938
so just where are we at
right now on this stuff?

553
00:26:17,938 --> 00:26:20,578
So we're still working our way
through some of these results.

554
00:26:21,253 --> 00:26:22,833
there's a couple of challenges
that we're running into.

555
00:26:23,303 --> 00:26:25,753
our data sets that we're working
with, because they're user generated

556
00:26:25,763 --> 00:26:27,483
images, can sometimes be a bit small.

557
00:26:27,783 --> 00:26:31,293
And we did, I did talk to the folks from
Mongo about this, and they said that

558
00:26:31,363 --> 00:26:34,433
their vector search is really designed
to optimize for larger data sets.

559
00:26:34,433 --> 00:26:39,163
So when you give it like four or
five results, it doesn't tend to

560
00:26:39,163 --> 00:26:42,783
always give you the best search
results back, which is one.

561
00:26:42,803 --> 00:26:44,963
So we're still working around with that.

562
00:26:45,183 --> 00:26:51,138
We are playing around with things like
maybe, the number of Words, do we start

563
00:26:51,148 --> 00:26:54,418
to maybe if there's a lot of words
in that search string, do we start

564
00:26:54,418 --> 00:26:56,018
to give more weight to the vector?

565
00:26:56,048 --> 00:26:58,538
Because maybe more of the meeting
is important versus keywords.

566
00:26:59,128 --> 00:27:00,768
So we're playing around with that as well.

567
00:27:00,768 --> 00:27:03,168
And just seeing how can do that.

568
00:27:03,168 --> 00:27:06,458
But this is really the hardest
part of it is the setting this

569
00:27:06,458 --> 00:27:07,938
up is actually relatively easy.

570
00:27:07,938 --> 00:27:10,198
Once you get the hang
of it, it's actually.

571
00:27:10,723 --> 00:27:15,643
You're going to be spending most of
your time in the indexing space of how

572
00:27:15,643 --> 00:27:16,803
do I get the results to be really good.

573
00:27:17,303 --> 00:27:20,653
The next thing I would be looking at is
playing around with the large vectors.

574
00:27:20,663 --> 00:27:24,103
So you can play with the different
vector size and the number of dimensions.

575
00:27:24,443 --> 00:27:27,203
in the open, in the vector
embedding side here, you can

576
00:27:27,203 --> 00:27:28,973
specify the number of embeddings.

577
00:27:29,603 --> 00:27:32,973
That you can do, I can tell you, we were
originally on the Ada model, which is one

578
00:27:32,973 --> 00:27:34,953
of their months, a year and a half ago.

579
00:27:35,243 --> 00:27:37,843
They've since in that launched out,
say, the text embedding to be small

580
00:27:37,843 --> 00:27:39,133
and text embedding to be large.

581
00:27:39,633 --> 00:27:42,623
And the results we get from search
are a lot better, but they're much

582
00:27:42,643 --> 00:27:44,293
bigger in vector embeddings as well.

583
00:27:44,733 --> 00:27:47,463
But you can specify the
number of dimensions.

584
00:27:47,503 --> 00:27:51,353
I'm just trying to make sure in here when
you're creating your vector embedding,

585
00:27:51,373 --> 00:27:52,573
say, this is what I'm looking for.

586
00:27:53,073 --> 00:27:56,153
again, this is another thing that you can
look at and play around with, which is

587
00:27:56,193 --> 00:28:00,023
like, how many results to have, what's
the dimensions and see, am I getting

588
00:28:00,023 --> 00:28:01,458
better results with one versus the other.

589
00:28:01,958 --> 00:28:04,198
The other thing you can look at is
you can start to play with sort of the

590
00:28:04,198 --> 00:28:06,988
traditional boost scores for text search.

591
00:28:07,378 --> 00:28:10,818
And, if you look at the, on the Mongo
site, there's lots of different techniques

592
00:28:10,818 --> 00:28:14,328
on how you can play with boosting,
different text search scores to get

593
00:28:14,478 --> 00:28:18,568
better results, improving, get more
favoritism weights to, depending if the

594
00:28:18,578 --> 00:28:19,658
keywords are at the beginning or not.

595
00:28:19,658 --> 00:28:21,998
So that's just one other thing
that you can play with as well.

596
00:28:22,498 --> 00:28:26,018
And then lastly, this is one of the
things we were doing on this path

597
00:28:26,018 --> 00:28:27,488
we're really trying to optimize this.

598
00:28:27,988 --> 00:28:31,508
And we stopped there a little bit,
because I was talking to a colleague

599
00:28:31,508 --> 00:28:35,568
of mine and he gave me a different
idea and what some other people are

600
00:28:35,568 --> 00:28:39,988
looking at is that this adds a bit of
costs and it adds a bit of latency.

601
00:28:39,988 --> 00:28:42,158
But what we're trying to do is like.

602
00:28:42,523 --> 00:28:46,273
We're running the query on the aggregation
we're trying to basically figure

603
00:28:46,273 --> 00:28:51,363
out of the, say, 20 results that are
returned, which are the most relevant?

604
00:28:51,873 --> 00:28:54,613
And can you filter out the ones
that are no longer relevant?

605
00:28:55,453 --> 00:28:58,323
And so having to do that is like
playing with, the weights and things.

606
00:28:58,333 --> 00:29:00,783
It's a little bit, you're really
trying to get that semantic meaning.

607
00:29:01,393 --> 00:29:04,183
one thing that we, I've heard about,
and I'm going to start looking

608
00:29:04,183 --> 00:29:06,733
at is, can you do final stage?

609
00:29:06,733 --> 00:29:06,853
Okay.

610
00:29:07,153 --> 00:29:11,333
you do your vector aggregation, you
do your text aggregation, you combine

611
00:29:11,333 --> 00:29:14,813
the results and let's see, you look
for 20 before you return them back to

612
00:29:14,813 --> 00:29:20,603
the user, take that and just run that
up and do an additional call to open

613
00:29:20,603 --> 00:29:25,423
AI and then just do a general get the
LLM to do a comparison for you and just

614
00:29:25,423 --> 00:29:26,653
like filter some of the results out.

615
00:29:27,163 --> 00:29:29,673
So ask it a problem and say, this
is the original search screen.

616
00:29:29,743 --> 00:29:30,923
Here's 20 results.

617
00:29:31,448 --> 00:29:34,928
Can you order them by a relevancy
and discard any of them that

618
00:29:34,928 --> 00:29:36,118
you think are not relevant?

619
00:29:36,618 --> 00:29:40,838
This will add a cost, obviously,
and it will add a bit of latency.

620
00:29:40,908 --> 00:29:44,548
but you will tend to get much better
search results because you're doing

621
00:29:44,548 --> 00:29:47,588
like a final pass through an LLM.

622
00:29:47,588 --> 00:29:51,393
And you're basically objecting and
saying, I'm looking for X. Please sort

623
00:29:51,443 --> 00:29:55,653
these 10, 20 different results based
on X, and please discard anything that

624
00:29:55,663 --> 00:29:57,263
you think doesn't really match as well.

625
00:29:58,063 --> 00:30:00,973
again, we're still in the early stages
of playing with this, and I'm more than

626
00:30:00,973 --> 00:30:03,343
welcome to share our progress, but it
is something that I've heard and I've

627
00:30:03,343 --> 00:30:04,593
been talking to other people about.

628
00:30:04,593 --> 00:30:07,773
This is saying a lot of these
tweaking with these engines is really

629
00:30:07,773 --> 00:30:12,253
trying to find the most natural,
meaningful Results and, this is what

630
00:30:12,353 --> 00:30:13,533
I know around is really good at.

631
00:30:14,273 --> 00:30:14,603
Okay.

632
00:30:14,653 --> 00:30:15,863
I'm going to wrap it up there.

633
00:30:15,913 --> 00:30:17,873
I've already gotten close
to about 35 minutes.

634
00:30:17,933 --> 00:30:21,453
I want to 1st, thank you again for
taking the time and hopefully you got

635
00:30:21,453 --> 00:30:23,993
to this part of the presentation again.

636
00:30:24,033 --> 00:30:25,933
I've shared out on my LinkedIn page.

637
00:30:26,023 --> 00:30:27,463
I've got all my contact information there.

638
00:30:27,493 --> 00:30:30,523
So if you have any questions, any
concerns, you want to jump on a

639
00:30:30,523 --> 00:30:31,963
quick call, just chat or whatever.

640
00:30:32,218 --> 00:30:35,018
Pick my brain or you want to go
through some code and look at this.

641
00:30:35,068 --> 00:30:36,308
I'm always available.

642
00:30:36,378 --> 00:30:37,098
Just drop me a line.

643
00:30:37,108 --> 00:30:38,188
I'd love to chat about this stuff.

644
00:30:38,468 --> 00:30:40,588
And I hope you enjoy the
rest of your presentation.

645
00:30:40,588 --> 00:30:43,508
And I want to be a big thanks
to all your organizers for this.

646
00:30:43,518 --> 00:30:44,498
And, thank you very much.

647
00:30:44,578 --> 00:30:44,848
Appreciate it.

