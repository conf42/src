1
00:00:00,170 --> 00:00:00,960
Hi everyone.

2
00:00:01,030 --> 00:00:02,360
Welcome to my talk.

3
00:00:02,400 --> 00:00:04,019
I hope you will enjoy it.

4
00:00:04,080 --> 00:00:06,020
So let's start.

5
00:00:06,520 --> 00:00:11,249
What I have prepared for you today is
a talk about environment as a service.

6
00:00:11,740 --> 00:00:19,870
And I hope I will explain it well enough
to help you understand how with this

7
00:00:19,880 --> 00:00:23,449
practice you can unlock innovation
and speed up product development.

8
00:00:24,289 --> 00:00:27,279
Why I'm talking about this today for you?

9
00:00:27,289 --> 00:00:30,014
Well, first of all, my
name is Caio Medeiros.

10
00:00:30,514 --> 00:00:35,264
And, I have been playing as DevOps
human, a huge part of my career,

11
00:00:35,324 --> 00:00:36,984
but also a software engineer.

12
00:00:37,804 --> 00:00:40,904
So I'm going to talk from my
experience working with teams.

13
00:00:41,234 --> 00:00:46,354
and in the last, six or seven years,
I, I had the chance to work with the

14
00:00:46,364 --> 00:00:48,004
different teams and different companies.

15
00:00:48,419 --> 00:00:52,929
So taking all this experience, I
want to explain this practice to you.

16
00:00:53,489 --> 00:00:58,029
also I had the chance to start, being
ambassador for DevOps Institute,

17
00:00:58,169 --> 00:01:02,269
platform engineering, do my, my
participations in the communities.

18
00:01:02,539 --> 00:01:06,939
And I will be bringing the DevOps
Days to Santiago first time in

19
00:01:06,949 --> 00:01:08,449
the history with some folks.

20
00:01:08,679 --> 00:01:12,569
I hope if you have the chance to
join us here, and also with Open

21
00:01:12,569 --> 00:01:16,399
Source Santiago, we are generating
some content, Time to time and we

22
00:01:16,399 --> 00:01:21,399
are planning also to bring the key CD
if you are able to come to Santiago,

23
00:01:21,429 --> 00:01:23,529
drink some wine and enjoy with us.

24
00:01:23,879 --> 00:01:28,269
If you want to connect with me,
just scan my QR code and the

25
00:01:28,939 --> 00:01:30,459
request to connect in LinkedIn.

26
00:01:31,429 --> 00:01:32,584
So let's start with the talk.

27
00:01:33,084 --> 00:01:36,374
And this is the structure
I prepared for this talk.

28
00:01:36,434 --> 00:01:42,069
We're going to Check first what must
see behind the continuous improvement

29
00:01:42,069 --> 00:01:47,309
process to unlock innovation inside
companies and improve the productivity.

30
00:01:47,569 --> 00:01:52,789
And later we're going to talk about
what I have seen and how we can

31
00:01:52,789 --> 00:01:59,029
go through the practice everything
environment as a service to help

32
00:01:59,029 --> 00:02:01,139
organizations on that same path.

33
00:02:01,639 --> 00:02:02,959
So the first.

34
00:02:03,274 --> 00:02:09,424
I think I have seen there is, or what
Massey is, the adoption journeys of

35
00:02:09,424 --> 00:02:13,124
these three main topics, the endless
adoption journeys, because again.

36
00:02:13,889 --> 00:02:15,639
It's about the continuous improvement.

37
00:02:15,669 --> 00:02:19,009
So continuous improvement is
not something with a clear end.

38
00:02:19,509 --> 00:02:23,939
So it starts and probably
whenever I end or just will

39
00:02:23,949 --> 00:02:25,999
stop for some specific reasons.

40
00:02:25,999 --> 00:02:32,429
But what I have seen or people see
based on my experience is Agile

41
00:02:32,719 --> 00:02:37,919
transformation processes to improve the
customer focus and the time to market.

42
00:02:38,439 --> 00:02:41,284
DevOps adoption journeys to a customer.

43
00:02:41,854 --> 00:02:44,974
Increase the productivity of teams
working throughout the software

44
00:02:45,004 --> 00:02:49,094
development life cycle at the same
time, ensuring the reliability of these

45
00:02:49,104 --> 00:02:54,614
products and the platform engineering
to ensure that the experience of the

46
00:02:54,654 --> 00:02:58,544
engineers behind the agile and DevOps
adoption journey is the best one.

47
00:02:58,844 --> 00:03:04,534
At the same time, is standardizing the
practices they will be implementing to.

48
00:03:05,034 --> 00:03:09,554
You know, live the principles,
values of Agile and DevOps.

49
00:03:10,054 --> 00:03:15,494
So to, to have a better understanding,
I wrote this, my vision of the software

50
00:03:15,494 --> 00:03:21,304
development life cycle is just, a
small, or let's say macro vision of the

51
00:03:21,304 --> 00:03:26,124
software development life cycle now,
a small value stream mapping where the

52
00:03:26,124 --> 00:03:28,404
customer is in the beginning, right?

53
00:03:28,624 --> 00:03:32,914
And all the needs or ideas of this
customer will come through the.

54
00:03:33,124 --> 00:03:38,774
Ideation phase to later develop a
requirement, verify and promote to

55
00:03:38,774 --> 00:03:42,714
production, an amazing product that will
solve all the needs of these customers

56
00:03:43,214 --> 00:03:48,909
that, probably we know everybody know
that, Each of these phases, they have

57
00:03:48,929 --> 00:03:55,639
a specific roles or sometimes specific
teams assigned with the ownership of

58
00:03:55,649 --> 00:04:01,279
the specific phase or some of these
phases, depending on the structure

59
00:04:01,409 --> 00:04:05,959
of the organization on how they did
the transformations that we have been

60
00:04:05,979 --> 00:04:09,139
seeing in the last 10 or 15 years.

61
00:04:10,099 --> 00:04:14,489
But definitely we still have some
organizations with teams that are creating

62
00:04:14,489 --> 00:04:16,539
this wall of confusion between them.

63
00:04:17,039 --> 00:04:22,559
Reducing all the possibility to
improve the productivity or the

64
00:04:22,809 --> 00:04:24,789
reliability of their products.

65
00:04:24,799 --> 00:04:27,349
They are generating with the
software development lifecycle.

66
00:04:27,749 --> 00:04:33,039
So through this three main or most
popular adoption journeys, we're

67
00:04:33,109 --> 00:04:38,179
going to see, People or the leaders
of these adoption journeys trying

68
00:04:38,179 --> 00:04:40,469
to bring frameworks like Scrum.

69
00:04:40,479 --> 00:04:45,249
The Scrum is the one that they have seen
is the most popular, to some frameworks

70
00:04:45,249 --> 00:04:50,659
to scale, the adoption of agile inside
organizations like safe, trying to

71
00:04:50,659 --> 00:04:53,399
reorganize in the teams in product.

72
00:04:53,399 --> 00:04:58,249
Multidisciplinary teams where all
the different skills will be there.

73
00:04:58,249 --> 00:05:04,819
So the ownership of the whole product
life cycle will be in inside the team,

74
00:05:05,109 --> 00:05:10,419
reducing all the handoffs and delays
that we can have with other teams.

75
00:05:11,009 --> 00:05:16,359
Obviously, the, the, the, the
restrictions will still exist.

76
00:05:17,349 --> 00:05:25,219
That's why Scrum has the Scrum Masters,
and the Scrum Coach to improve the

77
00:05:25,219 --> 00:05:30,119
communication between other teams, and
implementing the integration practice to

78
00:05:30,129 --> 00:05:34,339
release every, two or one week, right?

79
00:05:34,779 --> 00:05:35,629
that will help.

80
00:05:35,649 --> 00:05:36,419
Definitely.

81
00:05:36,609 --> 00:05:38,979
I have seen that has a good result.

82
00:05:39,329 --> 00:05:44,089
I don't like at all all the different
specific details behind some frameworks,

83
00:05:44,459 --> 00:05:49,209
but definitely it's something that
works for specific to improve specific

84
00:05:49,219 --> 00:05:53,109
phases or specific parts of the
software development life cycle.

85
00:05:53,609 --> 00:05:58,289
Later, when we talk about DevOps adoption
journeys, the most popular practices

86
00:05:58,289 --> 00:06:04,449
we have seen, what people see in the
market is the implementation of CICD

87
00:06:04,449 --> 00:06:07,509
and everything around CICD, right?

88
00:06:07,539 --> 00:06:10,479
Continuous integration, continuous
delivery, and continuous deployment.

89
00:06:10,919 --> 00:06:14,609
Trying to reduce the human
touch with automation, right?

90
00:06:14,729 --> 00:06:19,139
To give the chance to
engineers to work on creation.

91
00:06:19,689 --> 00:06:27,389
On put their minds on generate value,
moving left all or shifting, shifting

92
00:06:27,389 --> 00:06:32,869
left all the quality and security
gates that usually we have later in

93
00:06:32,889 --> 00:06:37,539
the software development lifecycle
process and promoting practices like

94
00:06:37,819 --> 00:06:43,199
everything as a goal, testing automation
to reduce even more than human touches.

95
00:06:43,699 --> 00:06:44,759
And finally.

96
00:06:45,259 --> 00:06:49,959
Not only related to platform
engineering, but, for all the three

97
00:06:49,959 --> 00:06:55,189
adoption journeys, we're going to see
AI everywhere, everywhere, because

98
00:06:55,469 --> 00:06:58,949
with AI, we have, some success.

99
00:06:59,204 --> 00:07:05,024
For use cases like generating, auto
generating the testing code to do unit

100
00:07:05,034 --> 00:07:11,254
testing to your, regression test or
load test, helping developers to code

101
00:07:11,564 --> 00:07:15,894
or engineers in general to code, to
create the infrastructure as a code

102
00:07:15,894 --> 00:07:19,544
as well, if we need to talk about the
infrastructure or, operation side,

103
00:07:19,994 --> 00:07:26,964
reducing the time to solve issues because
sometimes, People rotate to a lot in IT

104
00:07:27,294 --> 00:07:33,444
world, so sometimes it's not the same
person, not the same engineer who needs

105
00:07:33,444 --> 00:07:38,294
to fix an issue or who wrote the code.

106
00:07:38,384 --> 00:07:43,184
So using AI we have seen that this
can be improved the time to solve

107
00:07:43,214 --> 00:07:47,414
issues, to generate documentations
and some other use cases.

108
00:07:47,724 --> 00:07:53,794
So even without this Different
adoption journeys focus on this

109
00:07:53,814 --> 00:07:57,874
most popular practices or movements.

110
00:07:57,924 --> 00:08:02,814
If we want to say that, we're gonna
see that not all metrics will be

111
00:08:02,814 --> 00:08:06,174
showing as good as we want to, right?

112
00:08:06,824 --> 00:08:11,364
In case of agile, some of the
ones, the metrics I have seen

113
00:08:11,624 --> 00:08:15,114
is spring burnout, customer
satisfaction, cycle time, lead time.

114
00:08:15,504 --> 00:08:19,724
And focusing on specifically in
the metrics that are measuring.

115
00:08:19,779 --> 00:08:27,829
Time here when we talk about lead time or
cycle time, it depends really depends on

116
00:08:28,109 --> 00:08:36,949
where you start to measure to really know
if the whole cycle is improving or just

117
00:08:36,979 --> 00:08:39,109
part of the cycle, which is okay, right?

118
00:08:39,479 --> 00:08:42,399
We can improve the whole cycle,
just improving some part, but

119
00:08:42,409 --> 00:08:43,214
we're going to reach the end.

120
00:08:44,174 --> 00:08:49,114
Some levels, we're going to reach
some level of improvement and

121
00:08:49,304 --> 00:08:52,904
from there it will be hard to keep
growing, right, to keep improving.

122
00:08:53,404 --> 00:08:57,684
And we're going to see this in
some, in an idea I have so in

123
00:08:57,684 --> 00:08:59,314
the other section of this talk.

124
00:09:00,224 --> 00:09:04,514
Later with DevOps metrics, we have
the Dora metrics, the most popular

125
00:09:04,514 --> 00:09:06,274
metrics in the market, right?

126
00:09:06,364 --> 00:09:10,184
Due to the Dora reports, the
state of DevOps reports, right?

127
00:09:10,334 --> 00:09:13,254
there we have delivery time, the
volume and frequency, time to

128
00:09:13,254 --> 00:09:17,804
restart, change failure rate, and,
the idea I want to broke with the

129
00:09:18,074 --> 00:09:23,464
environment as a service, will not
be visible in some of these metrics.

130
00:09:23,464 --> 00:09:28,944
And that's why I'm putting them here,
because, as well as, some agile metrics

131
00:09:29,024 --> 00:09:30,894
and platform engineering metrics.

132
00:09:31,204 --> 00:09:36,244
The in a pass on boarding time mean
time to unlock on resource allegation.

133
00:09:36,914 --> 00:09:41,294
Sometimes they are just focusing
on show what is the current state

134
00:09:41,504 --> 00:09:46,844
or where we are in with some
specific part of the flow, right?

135
00:09:47,664 --> 00:09:51,834
So I want to invite you to
see what I saw there, right?

136
00:09:52,214 --> 00:09:56,244
Because, A lot of organizations using
this matrix going through these three

137
00:09:56,244 --> 00:10:00,374
adoption journeys and trying to implement
those practices we already talked,

138
00:10:00,464 --> 00:10:05,694
discussed, they seem like, they see that
like they are, they are having success.

139
00:10:05,724 --> 00:10:06,774
They are improving.

140
00:10:06,844 --> 00:10:13,184
Everything is going good, but they have
so that developers are burning out.

141
00:10:13,529 --> 00:10:19,239
Do some other reasons, some other holes
we can find in the software development

142
00:10:19,419 --> 00:10:25,489
cycle because maybe I'm automating
everything after my commit push, my

143
00:10:25,519 --> 00:10:28,519
commit and push to the core repository.

144
00:10:29,109 --> 00:10:34,809
But what happens before if I need to
start a migration to cloud and, the,

145
00:10:34,819 --> 00:10:39,139
the unique, support they have inside
organization is provisioning the

146
00:10:39,139 --> 00:10:43,784
resources, but they need to go ahead
I need to go to other side to request

147
00:10:43,784 --> 00:10:47,914
network configurations and I need to go
to other side to request certificates.

148
00:10:48,194 --> 00:10:55,434
So everything it's in different teams
or even in small companies, the is

149
00:10:55,434 --> 00:11:00,034
the same thing who wants to who must
own everything and manage everything.

150
00:11:00,374 --> 00:11:05,534
So all these different holes will
generate problems in the flow that

151
00:11:05,574 --> 00:11:11,344
cannot be solved with the traditional
We are at least the common practices.

152
00:11:11,344 --> 00:11:13,534
We, I, I, I mentioned it before.

153
00:11:14,034 --> 00:11:21,014
So what I, I, so, as main
problems, or if I need to put an

154
00:11:21,014 --> 00:11:23,199
example of Some of these holes.

155
00:11:23,549 --> 00:11:25,129
The first thing is lack of knowledge.

156
00:11:25,129 --> 00:11:26,899
And, you're gonna say probably.

157
00:11:27,069 --> 00:11:28,439
Yeah, it happens.

158
00:11:28,469 --> 00:11:29,119
It's normal.

159
00:11:29,159 --> 00:11:33,729
Lack of knowledge is something that we
can we will live with lack of knowledge.

160
00:11:33,959 --> 00:11:36,319
It's a problem that we're
gonna have all time.

161
00:11:36,729 --> 00:11:43,879
If we don't have the expertise inside the
organizations and thinking on in all 80.

162
00:11:44,099 --> 00:11:46,409
It's a common problem even more and more.

163
00:11:46,964 --> 00:11:51,964
But there I also have seen lack
of capacity, lack of budget.

164
00:11:52,464 --> 00:11:56,434
That again, you may say it's,
they are common problems.

165
00:11:57,204 --> 00:12:03,114
so to, to reinforce this problem that
probably you see, yeah, it's a problem

166
00:12:03,664 --> 00:12:09,034
at the fact that I have seen, in with
some of the teams I have worked is,

167
00:12:09,084 --> 00:12:14,234
They took from 3 to 24 months to adapt,
to really adapt new technologies.

168
00:12:14,954 --> 00:12:17,624
So it's a, it's too much time, right?

169
00:12:17,744 --> 00:12:23,724
If we want to innovate and be better than
competitors and win in the marketplace.

170
00:12:24,374 --> 00:12:27,164
Same thing happens with the tractors.

171
00:12:27,664 --> 00:12:30,204
People that is saying, if
it works, don't touch it.

172
00:12:30,704 --> 00:12:37,774
Let's leave it there with the
speech, like, we are using, this

173
00:12:37,954 --> 00:12:41,764
process or this standard because
we are used to do like that.

174
00:12:41,854 --> 00:12:47,154
Or someone else told me I need to do
that and I don't know who decided this.

175
00:12:47,634 --> 00:12:51,834
And the standard says that, have
you ever read the standards?

176
00:12:51,884 --> 00:12:57,534
and also sometimes the standards
are, based on interpretation and

177
00:12:57,594 --> 00:12:59,034
it can generate a lot of biases.

178
00:12:59,534 --> 00:13:05,614
And the fact gives a story again,
because 70 to 80 percent of the

179
00:13:05,614 --> 00:13:12,094
teams I have worked, they had
the tractors, they had the skills

180
00:13:12,384 --> 00:13:15,214
to, start, in, improvement path.

181
00:13:15,714 --> 00:13:20,464
And later, we have the bureaucracy
that, is one of the holes I want to

182
00:13:20,464 --> 00:13:26,404
reinforce with the, Environment as a
service practice because the bureaucracy

183
00:13:27,054 --> 00:13:31,434
generates a lot of burnout on teams.

184
00:13:31,894 --> 00:13:36,374
the probably most of the organizations
are trying to solve this with platform

185
00:13:36,374 --> 00:13:40,159
engineering and the agile and DevOps.

186
00:13:40,159 --> 00:13:43,769
but, in the organizations they
have worked, mainly in the

187
00:13:43,789 --> 00:13:50,439
bigger ones, even having years
working in the adoption journeys.

188
00:13:50,749 --> 00:13:56,049
They still have some problems with
bureaucracy and the fact they cannot

189
00:13:56,089 --> 00:14:01,009
look at the software development
life cycle as a whole process.

190
00:14:01,499 --> 00:14:05,299
They just focus in specific
phases of the flow.

191
00:14:05,799 --> 00:14:07,679
And the fact kills the stories again.

192
00:14:08,179 --> 00:14:13,249
Some teams they have worked, they
waited during three to six months

193
00:14:13,299 --> 00:14:19,239
to for their environments to just
start deploying some small POCs.

194
00:14:19,944 --> 00:14:20,574
It's crazy.

195
00:14:20,714 --> 00:14:21,234
It's crazy.

196
00:14:21,274 --> 00:14:27,874
That definitely will block any kind of
competence the organization can have.

197
00:14:28,374 --> 00:14:33,584
So where to start with the environments
as a service and how to approach this to,

198
00:14:34,044 --> 00:14:41,164
face the challenges and try to, solve or
remove the holes I mentioned that before.

199
00:14:41,664 --> 00:14:46,174
The first thing is a start by name, there
is no way to improve if you don't know

200
00:14:46,174 --> 00:14:54,004
where you are, that's part of my, my, my,
my pillars, my mindset, and they want to

201
00:14:54,004 --> 00:14:58,954
share this with you before to even talk
about the practice because DevOps, Agile

202
00:14:58,954 --> 00:15:04,519
and platform engineering practices have
been shared in the last years as something

203
00:15:04,529 --> 00:15:09,769
that can be reused and definitely it can
be done, but, it depends a lot on the

204
00:15:09,779 --> 00:15:13,129
reality of each customer company, right?

205
00:15:13,149 --> 00:15:17,739
Sometimes, there are some practices
that will really help the organization.

206
00:15:17,769 --> 00:15:21,439
Sometimes, they gonna do that
just because they want to have.

207
00:15:21,749 --> 00:15:24,059
C I C D as an example, right?

208
00:15:24,769 --> 00:15:29,219
So Gator data from the value stream is
important to understand if the efforts

209
00:15:29,219 --> 00:15:34,269
you can put to implement some practices
will really generate the value expected

210
00:15:34,679 --> 00:15:39,919
Gator the data, do some Gemba walks,
walk with teams, understand what they

211
00:15:39,919 --> 00:15:45,879
are doing and understand these holes they
can have in the in the process and be as

212
00:15:45,879 --> 00:15:51,414
much as possible open with your mind to
go fewer, even more to the left, right?

213
00:15:51,634 --> 00:15:56,724
Or even more to the right, because
maybe there is the holes that is

214
00:15:56,764 --> 00:15:59,684
really generating delays in your
software development life cycle.

215
00:16:00,184 --> 00:16:04,684
So there, having that in mind,
let me introduce my understanding

216
00:16:04,684 --> 00:16:06,384
of environment as a service.

217
00:16:06,884 --> 00:16:13,644
Definitely, it takes some ideas and
principles from these three different

218
00:16:13,684 --> 00:16:17,364
adoption journeys, the endless
adoption journeys I introduced later.

219
00:16:17,884 --> 00:16:23,134
Before, sorry, which is Agile DevOps
and Platform Engineering, mainly DevOps

220
00:16:23,134 --> 00:16:29,114
and Platform Engineering because the
teams to go and implement the practices.

221
00:16:29,769 --> 00:16:34,359
And the mindset of DevOps, they're going
to need technology, they're going to

222
00:16:34,359 --> 00:16:40,009
need, the environments where they will be
able to automate the deployments, where

223
00:16:40,009 --> 00:16:46,169
they're going to be able to automate the
monitoring, and improve the practice of

224
00:16:46,669 --> 00:16:53,129
DevOps and all the different roles in
between them, or even Before after them.

225
00:16:53,629 --> 00:16:58,969
So if we take the idea of platform
engineering on generating platforms as

226
00:16:58,969 --> 00:17:04,409
a product inside organizations based on
the needs and exposing them as a service

227
00:17:04,599 --> 00:17:09,879
through API's, we're going to have an
example on how to implement environments

228
00:17:09,879 --> 00:17:15,449
as a service because, What I have seen
here in the market working with teams is

229
00:17:15,799 --> 00:17:19,679
usually they request for environments,
and the idea of environments is just

230
00:17:19,709 --> 00:17:21,969
the resources, but it's not just that.

231
00:17:22,159 --> 00:17:25,609
And when they reach production,
they discover that they are a lot,

232
00:17:25,639 --> 00:17:30,809
they are, they have a huge gap on
non functional requirements and,

233
00:17:30,859 --> 00:17:36,539
specific security conditions to reach
production, generating a lot of delays.

234
00:17:37,039 --> 00:17:40,309
So I'm not talking about Infra
provisioning or configuration

235
00:17:40,309 --> 00:17:41,939
provisioning, right?

236
00:17:42,239 --> 00:17:44,649
This is just a small part of it, right?

237
00:17:45,159 --> 00:17:50,319
it's not a matter of, putting as a service
the generation of a virtual machine

238
00:17:50,559 --> 00:17:53,829
or to request a namespace environment.

239
00:17:54,469 --> 00:17:57,529
I'm talking about, To
something greater than that.

240
00:17:58,029 --> 00:18:01,069
Also, it's not just
reusable assets, right?

241
00:18:01,129 --> 00:18:04,469
This is a common service that the
organizations are trying to implement

242
00:18:05,259 --> 00:18:10,359
generating in their source communities
inside the organization to share, Small

243
00:18:10,379 --> 00:18:15,809
pieces of technology that can be reusable
to to improve the activity of teams

244
00:18:16,009 --> 00:18:18,379
and also very used by platform teams.

245
00:18:18,379 --> 00:18:22,559
I have seen that the platform
teams are generating a lot of

246
00:18:22,559 --> 00:18:26,559
community inside organizations to
avoid teams to reinvent the wheel.

247
00:18:27,369 --> 00:18:29,349
But also, I'm not talking even.

248
00:18:29,849 --> 00:18:31,289
of user management.

249
00:18:31,299 --> 00:18:35,389
It's these three things are parts
of the idea of environment, right?

250
00:18:36,129 --> 00:18:37,029
An environment.

251
00:18:37,039 --> 00:18:42,839
It's a concept for me is everything you
need to put your software and make it run.

252
00:18:43,339 --> 00:18:46,579
So that's the definition of environment.

253
00:18:46,579 --> 00:18:50,159
I want to generate the shared
understanding between us right there.

254
00:18:50,319 --> 00:18:56,159
It's everything that need a
team needs to start working.

255
00:18:56,544 --> 00:19:00,214
On their, release of the software
they are developing of the

256
00:19:00,214 --> 00:19:01,134
product they are delivering.

257
00:19:01,844 --> 00:19:05,304
So it's a box with a lot of things inside.

258
00:19:05,354 --> 00:19:06,174
Resources.

259
00:19:06,614 --> 00:19:09,504
I'm talking about infrastructure
and configuration things.

260
00:19:09,874 --> 00:19:10,794
Secrets.

261
00:19:11,754 --> 00:19:17,144
Credentials to connect with the third
parties, services, databases, messaging

262
00:19:17,154 --> 00:19:23,904
brokers, processes to understand how I can
promote my software to that environment.

263
00:19:24,264 --> 00:19:26,584
What is the standards I need to follow?

264
00:19:27,264 --> 00:19:30,544
What kind of authentication,
authorization, non functional

265
00:19:31,234 --> 00:19:36,094
configurations I must ensure to
promote something to production

266
00:19:36,104 --> 00:19:37,314
inside my organization.

267
00:19:37,864 --> 00:19:42,924
The rights, the permissions to
my internal team, right, and also

268
00:19:42,994 --> 00:19:47,214
other support teams to ensure that
this environment will be useful.

269
00:19:47,564 --> 00:19:50,914
Assets to reduce the
reinvention of the wheel.

270
00:19:51,524 --> 00:19:53,964
Ensuring that the teams
are using the right.

271
00:19:54,879 --> 00:20:00,199
Tools, the right files, the right
configurations, and finally documentation,

272
00:20:00,669 --> 00:20:05,789
which is, something, I have seen,
it's, one of the worst things that,

273
00:20:05,789 --> 00:20:11,139
platform teams I had the chance to,
to work with, they, they must take

274
00:20:11,139 --> 00:20:15,989
more care of documentation is, is the
way to solve the gap of knowledge,

275
00:20:16,039 --> 00:20:18,739
adopting new platforms and environments.

276
00:20:19,074 --> 00:20:20,764
It's something similar, right?

277
00:20:21,334 --> 00:20:26,244
when we talk about the commendation,
it's, Achilles, fit, for every

278
00:20:27,174 --> 00:20:31,634
product team, Because, since they
are focusing too much on generate

279
00:20:31,644 --> 00:20:36,334
the product, sometimes they delay or
they forget to create documentation.

280
00:20:36,844 --> 00:20:39,464
So environments will be
everything a team needs.

281
00:20:39,864 --> 00:20:46,134
So, and also in specific organizations,
well, in each organization, the

282
00:20:46,604 --> 00:20:49,744
needs of an environment will
be sometimes different, right?

283
00:20:49,804 --> 00:20:55,784
So that's why I think the generation of
this environment should be a product.

284
00:20:55,974 --> 00:21:01,164
An internal product and as fast as
you can provide these environments

285
00:21:01,344 --> 00:21:05,934
will have the teams to not only
generate value throughout the software

286
00:21:05,934 --> 00:21:10,034
development life cycle, but also
will help them to modernize their

287
00:21:10,034 --> 00:21:12,214
applications in the future, right?

288
00:21:12,404 --> 00:21:18,584
Some of the experience I had was, some
teams trying to move from, virtual machine

289
00:21:18,634 --> 00:21:24,489
based environments to go to containerized
environments, and they Waste a lot of

290
00:21:24,529 --> 00:21:30,049
time, like around three to six months
just waiting for the first environment

291
00:21:30,049 --> 00:21:33,159
to do the first POC of that migration.

292
00:21:33,449 --> 00:21:34,179
That's crazy.

293
00:21:34,709 --> 00:21:36,309
Not, competitive at all.

294
00:21:37,039 --> 00:21:39,069
Some, some other
takeaways I want to share.

295
00:21:39,329 --> 00:21:46,699
For you today, in order to really
be successful, if you want to go and

296
00:21:46,709 --> 00:21:50,999
try to implement the environmental
service with this, this, conception

297
00:21:50,999 --> 00:21:52,649
of environments in your organization.

298
00:21:53,229 --> 00:21:56,659
One of the things you must
take care is this is the costs.

299
00:21:56,899 --> 00:22:01,649
So something we discussed a lot
with my my friend Francisco Meneses

300
00:22:01,909 --> 00:22:03,779
in the last Q comes out Lake City.

301
00:22:04,059 --> 00:22:10,379
Which is, if you want to give environments
to, to the teams, you, you need to

302
00:22:10,379 --> 00:22:12,299
understand the money is, limited, right?

303
00:22:12,339 --> 00:22:14,869
It's not a, endless resource.

304
00:22:15,259 --> 00:22:18,389
So, here it's important
to make it visible.

305
00:22:18,889 --> 00:22:23,169
If the information is there, if you
are monitoring the costs of generating

306
00:22:23,169 --> 00:22:28,039
an environment, it's enough to
generate the shared responsibility.

307
00:22:28,369 --> 00:22:30,309
And say you have your budget.

308
00:22:30,899 --> 00:22:36,049
This is the costs you're going to have if
you request this environment and give also

309
00:22:36,049 --> 00:22:39,969
the chance to have a trial plans, right?

310
00:22:40,329 --> 00:22:44,679
Maybe I can request an environment
during one or two days to do a PLC

311
00:22:44,889 --> 00:22:49,229
and I can have that environment in a
matter of minutes or one hour, maybe,

312
00:22:49,279 --> 00:22:54,649
and remove all the burnout or all
the stress of waiting for an whole

313
00:22:54,649 --> 00:22:57,239
environment just to be able to try.

314
00:22:57,714 --> 00:22:59,944
That environment to try that technology.

315
00:23:00,904 --> 00:23:02,804
Another thing which is super important.

316
00:23:02,804 --> 00:23:08,254
I have seen makes the difference
between the success or not are the

317
00:23:08,254 --> 00:23:10,524
failure is generating training.

318
00:23:11,139 --> 00:23:16,769
Training, and observability enough
to, again, generate this shared

319
00:23:17,109 --> 00:23:21,049
responsibility because we're going
to have different teams here.

320
00:23:21,119 --> 00:23:24,329
It's not the same team which will
use the environment, who will be

321
00:23:24,329 --> 00:23:26,299
providing this environment as a service.

322
00:23:26,799 --> 00:23:29,629
Which can be even a platform
team who will be providing

323
00:23:29,629 --> 00:23:31,029
this environment as a service.

324
00:23:31,439 --> 00:23:36,169
So the different teams using the
solution of environment as a service,

325
00:23:36,179 --> 00:23:40,089
they will need some training, some
preparation to use the platform.

326
00:23:40,929 --> 00:23:46,069
And also they will be able, they must
need to see what is happening there,

327
00:23:46,499 --> 00:23:48,109
to understand what is happening there.

328
00:23:48,109 --> 00:23:52,134
So the team, That will be in charge of
generating the environment as a service.

329
00:23:52,534 --> 00:23:57,784
They must ensure that the solution
is understandable with the logs.

330
00:23:57,794 --> 00:24:00,194
It's generating the messages, right?

331
00:24:00,414 --> 00:24:06,734
And also have a huge amount of
knowledge base to train the team.

332
00:24:07,514 --> 00:24:14,409
Sometimes I will Try to correct what I
said on huge training knowledge base, I

333
00:24:14,409 --> 00:24:20,519
will say, as better as possible to guide
the teams as fast as possible to start

334
00:24:20,539 --> 00:24:26,379
using the platform and later, last but
not least, I think it's super important to

335
00:24:26,379 --> 00:24:29,819
have a clear service level of agreement.

336
00:24:30,319 --> 00:24:34,749
With the support team providing some
connection with the users of this

337
00:24:34,749 --> 00:24:39,069
platform and the engineering team
working on continues improve this

338
00:24:39,439 --> 00:24:46,099
solution of environment as a service
and the delivery time is a is a corner.

339
00:24:46,494 --> 00:24:50,194
Stone that you must take
into account, right?

340
00:24:50,394 --> 00:24:55,814
As I mentioned that before, the experience
I had with some teams waiting for months

341
00:24:55,814 --> 00:25:00,764
to have the first environment, the
delivery lead time of releasing from

342
00:25:00,914 --> 00:25:05,954
when I requested the environment to when
I have the environments in my hands can

343
00:25:05,964 --> 00:25:11,089
make the difference between a company
that will win And release a new feature

344
00:25:11,489 --> 00:25:16,099
to a company that will be the last one
releasing that feature in the marketplace.

345
00:25:16,599 --> 00:25:21,059
So the last part of this talk is,
helping you to understand what kind

346
00:25:21,059 --> 00:25:26,139
of tools you can use or what tools
I have investigated and tried to

347
00:25:26,139 --> 00:25:27,859
implement environment as a service.

348
00:25:27,869 --> 00:25:29,309
The first one is crossplane.

349
00:25:29,669 --> 00:25:31,259
I had the chance to.

350
00:25:31,449 --> 00:25:34,999
Talk with, Victor Fabric and
the last KubeCon Satellite

351
00:25:34,999 --> 00:25:39,589
CD to discuss a bit about the
environments, ephemeral environments.

352
00:25:39,889 --> 00:25:44,759
Well, cross plane is, control plane
to connect, to manage, providers of

353
00:25:45,079 --> 00:25:47,589
infrastructure providers of configuration.

354
00:25:48,049 --> 00:25:50,329
It's super useful because
you can define your.

355
00:25:50,514 --> 00:25:56,064
On APIs, and it's highly extensible,
so you can manage the back end and

356
00:25:56,074 --> 00:26:02,504
configure some controllers to manage
this environment, ephemeral environments

357
00:26:02,514 --> 00:26:07,664
that I mentioned that before, or even
generate connections with some kind

358
00:26:07,664 --> 00:26:13,024
of providers that are not Available by
default in the tool, definitely it will

359
00:26:13,024 --> 00:26:20,204
help you to generate everything you need
for an environment as a definition and

360
00:26:20,204 --> 00:26:25,584
orchestrate everything for you thinking
on those environments that are that are

361
00:26:25,584 --> 00:26:31,084
related on where you're going to offer
a service later, deploy an application,

362
00:26:31,534 --> 00:26:37,984
release a service, to, network service,
The other thing you have is, that I

363
00:26:38,004 --> 00:26:43,374
think it's important is the technology
agnostic that some to some platforms

364
00:26:43,404 --> 00:26:46,174
provides like a test cube test cube.

365
00:26:46,224 --> 00:26:51,454
It's a platform that enable you to
orchestrate testing throughout the

366
00:26:51,454 --> 00:26:52,864
software development life cycle.

367
00:26:53,154 --> 00:26:55,674
And for testing, you
also need environment.

368
00:26:55,914 --> 00:26:56,284
Right?

369
00:26:56,354 --> 00:27:00,224
Environments as a service and test
cube can help you to generate these

370
00:27:00,284 --> 00:27:06,604
environments as a service to do testing
to ensure that you can move this

371
00:27:06,604 --> 00:27:12,994
feedback of, if your unit, functions are
working as expected, if your user flow

372
00:27:12,994 --> 00:27:17,714
is, working as expected, if the load
is the expected for your application.

373
00:27:17,714 --> 00:27:22,914
So with test cube platform, you will
be able to, radiate information.

374
00:27:23,689 --> 00:27:29,569
Generating environments to on
demand to test your applications,

375
00:27:29,579 --> 00:27:34,319
your solutions, your it products
with the execution on demand.

376
00:27:34,359 --> 00:27:37,649
As I said, with reusable
assets, some of the things we

377
00:27:37,649 --> 00:27:38,989
already discussed before, right?

378
00:27:39,019 --> 00:27:44,629
As part of the environments, everything
I need to make my application work and

379
00:27:44,629 --> 00:27:49,349
fully integrated with the whole software
development cycle life cycle, something

380
00:27:49,359 --> 00:27:54,479
that the people is just, putting too
much focus like CICD, but also something

381
00:27:54,479 --> 00:28:00,209
that people maybe is not doing too
much, which is continuous testing.

382
00:28:00,209 --> 00:28:03,849
After deploying the production, I
can keep testing my application.

383
00:28:04,149 --> 00:28:08,579
And with TestCube and the technology
agnostic that this platform

384
00:28:08,609 --> 00:28:13,839
offers, I can cover most of the
technologies or almost technologies

385
00:28:13,839 --> 00:28:17,159
I have inside our organization
to implement continuous testing.

386
00:28:17,549 --> 00:28:22,829
And finally, the open cost, because
it's something I reinforce with the

387
00:28:22,829 --> 00:28:28,629
takeaways, which is the FinOps visibility
of the costs to generate the shared

388
00:28:28,759 --> 00:28:35,529
responsibility over the dispensers I have
when I are working with when I'm working

389
00:28:35,529 --> 00:28:41,519
with the environment and be able to
have this, this option to work with any

390
00:28:41,519 --> 00:28:44,799
vendor and see the costs in real time.

391
00:28:45,004 --> 00:28:45,274
Right.

392
00:28:45,384 --> 00:28:49,234
So joining all these three
platforms, I thought it's a

393
00:28:49,234 --> 00:28:52,624
good way to start implementing
every environment as a service.

394
00:28:52,964 --> 00:28:57,584
But if definitely if you need some
other solutions to complement this, it

395
00:28:57,594 --> 00:29:02,174
depends on, on what technologies you
already have, but if you don't have, One

396
00:29:02,204 --> 00:29:04,734
technology for one specific requirement.

397
00:29:04,934 --> 00:29:09,794
You can find a lot of these options in
the cloud native computer foundation

398
00:29:10,064 --> 00:29:16,504
landscape from where I took this three
important and amazing products, or

399
00:29:16,504 --> 00:29:18,654
platforms, projects as you want to call.

400
00:29:19,154 --> 00:29:21,754
So at the end, we're going
to have something like this.

401
00:29:21,974 --> 00:29:23,724
It's my proposal, right?

402
00:29:23,884 --> 00:29:28,834
Have a platform team with a product
called environment as a service platform.

403
00:29:29,334 --> 00:29:35,384
Where are they going to provide different,
APIs where the teams will be able to

404
00:29:35,454 --> 00:29:42,034
use to request their environment using
platforms like crossplane, testcube, open

405
00:29:42,034 --> 00:29:47,474
cost to cover all the different aspects
I mentioned it right to generate an

406
00:29:47,474 --> 00:29:52,504
environment, not only releasing resources,
not only generating a virtual machine

407
00:29:52,534 --> 00:29:58,124
for a team, but also Put in there, the
certificates, the network configurations

408
00:29:58,124 --> 00:29:59,494
and everything that is needed.

409
00:29:59,694 --> 00:30:02,084
Same thing for a Kubernetes namespace.

410
00:30:02,844 --> 00:30:08,434
so all these artifacts will be part
and will be needed to generate this

411
00:30:08,434 --> 00:30:13,964
environment as a service solution and,
using automation, using platforms like

412
00:30:14,094 --> 00:30:18,974
cross plane test cube and open cost,
the delivery time will be reduced,

413
00:30:19,114 --> 00:30:20,944
but definitely you need to tell.

414
00:30:21,124 --> 00:30:26,764
Think in the in the whole architecture
of your product, considering this

415
00:30:26,814 --> 00:30:32,564
aspect, because I have seen teams that
are providing Kubernetes namespaces

416
00:30:32,564 --> 00:30:37,434
as a service, and they are delaying
a lot on generate the environments

417
00:30:37,954 --> 00:30:39,634
due to the resource management.

418
00:30:39,684 --> 00:30:42,524
This is another thing
that must be considered.

419
00:30:43,474 --> 00:30:46,399
finally, to Take to have success.

420
00:30:46,400 --> 00:30:50,159
My let's share my, my success
keys for platform teams.

421
00:30:50,169 --> 00:30:52,309
The first thing is focus on customer.

422
00:30:52,599 --> 00:30:54,059
That's why I have this sign.

423
00:30:54,199 --> 00:30:57,319
The first sign here, this
is coming from another talk.

424
00:30:57,329 --> 00:30:59,949
If you want to, go deeper
on this, you can see.

425
00:31:00,129 --> 00:31:01,979
Find that talking in YouTube.

426
00:31:02,359 --> 00:31:07,299
the three practices I recommend to
have success with platform engineering.

427
00:31:07,579 --> 00:31:09,199
The first one is focused on customers.

428
00:31:09,239 --> 00:31:13,779
So the platform team must understand
who is their customer and how to

429
00:31:13,779 --> 00:31:15,389
generate environments for them.

430
00:31:15,679 --> 00:31:20,799
Because I mentioned it before, the
environment for one team maybe will

431
00:31:20,799 --> 00:31:25,599
be different Of, environments to
other team in another company, right?

432
00:31:25,619 --> 00:31:29,749
Because each company has different
standards, different, providers.

433
00:31:29,919 --> 00:31:34,089
So that's important to understand
and identify your customer, identify

434
00:31:34,099 --> 00:31:38,919
their needs and generate a platform of
environment as a service based on that.

435
00:31:39,419 --> 00:31:44,269
The second thing is measure and
try to implement the practices

436
00:31:44,279 --> 00:31:46,269
you are releasing as a service.

437
00:31:46,769 --> 00:31:50,739
So if you use a tool, you will be a
customer as well and will be better

438
00:31:50,739 --> 00:31:55,874
for you to get your feedback if you
are using the platform and you have

439
00:31:55,874 --> 00:31:58,029
the same pains that other teams.

440
00:31:58,279 --> 00:31:59,714
And finally, form a team.

441
00:31:59,874 --> 00:32:04,694
Champions inside the platform team
where you have different platforms

442
00:32:04,794 --> 00:32:09,764
totally integrated with each other with
artifacts specifically created for your

443
00:32:09,824 --> 00:32:12,484
own company or your specific customer.

444
00:32:12,674 --> 00:32:18,144
You're gonna need expertise inside and
one person cannot be expert in everything.

445
00:32:18,384 --> 00:32:24,104
So form experts inside your team to
support each other with a T shaped format.

446
00:32:24,314 --> 00:32:27,194
and, have a platform team
that can grow together.

447
00:32:27,694 --> 00:32:33,244
So my closing comment is do not
just replicate what others did think

448
00:32:33,264 --> 00:32:36,764
out of the box and discover the
continuous improvement never that

449
00:32:37,004 --> 00:32:38,434
continuous improvement never ends.

450
00:32:38,684 --> 00:32:38,974
Right?

451
00:32:39,974 --> 00:32:44,319
And why I'm saying this because a lot
of people is just focused on On the

452
00:32:44,349 --> 00:32:49,789
implementing the DevOps adoption journey
with CICD agile adoption journey with scam

453
00:32:49,849 --> 00:32:54,899
or scaling with safe platform engineering,
generating the DevOps platform engine,

454
00:32:54,900 --> 00:33:00,749
a DevOps platform with a lot of tools,
everything connected, but they forget.

455
00:33:01,109 --> 00:33:08,629
about these other aspects that can heavily
impact on the time to market, right?

456
00:33:08,789 --> 00:33:17,139
Just imagine, reduce the whole team stress
to go from idea to first touch in a matter

457
00:33:17,139 --> 00:33:20,389
of minutes, in a matter of hours, right?

458
00:33:20,789 --> 00:33:24,489
So let's say a team was requested
to generate a new product.

459
00:33:24,649 --> 00:33:25,659
Amazing product.

460
00:33:25,939 --> 00:33:31,219
And they want to test deploying the
first feature, and they just remember

461
00:33:31,229 --> 00:33:33,069
that they require an environment.

462
00:33:33,379 --> 00:33:37,264
So they go through this platform
and request the trial, right?

463
00:33:37,264 --> 00:33:41,399
And they deploy some pieces of
software there and they can start

464
00:33:41,419 --> 00:33:43,029
receiving feedback, celebrate.

465
00:33:43,269 --> 00:33:44,329
That will be amazing.

466
00:33:44,349 --> 00:33:48,189
I have seen a lot of stress
on teams do they don't have

467
00:33:48,189 --> 00:33:51,049
access to their environments
in the time they are expecting.

468
00:33:51,979 --> 00:33:53,269
So thanks for joining.

469
00:33:53,899 --> 00:33:58,519
I hope you will keep
enjoying this com, 42 20 25.

470
00:33:59,019 --> 00:34:03,189
I love to have this space
to share this idea with you.

471
00:34:03,519 --> 00:34:08,189
And if you wanna want to go deeper
on this, you wanna talk about this

472
00:34:08,189 --> 00:34:13,349
with me or some other people, feel
free to reach me out, in linking

473
00:34:13,439 --> 00:34:15,689
and or in the chat of the event.

474
00:34:16,049 --> 00:34:19,019
and see you soon for a next another talk.

