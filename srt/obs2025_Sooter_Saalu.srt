1
00:00:00,500 --> 00:00:08,360
Okay, so let's go right into the
presentation writing custom EVPF

2
00:00:08,450 --> 00:00:12,560
programs for observability purposes.

3
00:00:13,060 --> 00:00:15,340
What exactly is EVPF?

4
00:00:15,790 --> 00:00:23,920
The extended Berkeley packet filter is an
evolution of the original BPF technology.

5
00:00:24,160 --> 00:00:27,369
It extends the capabilities of BPF by.

6
00:00:27,670 --> 00:00:33,850
Providing a more powerful and
flexible way to perform more features

7
00:00:33,850 --> 00:00:39,610
like dynamic tracing, network
analysis, performance monitoring.

8
00:00:40,120 --> 00:00:44,950
But mainly how it does this is by
providing a framework for you to

9
00:00:45,310 --> 00:00:49,580
write kernel compatible sandbox.

10
00:00:50,090 --> 00:00:56,420
Programs that can be executed directly in
your kernel space without modifying the

11
00:00:56,420 --> 00:01:04,690
kernel code itself, or without running
a file of any security protocols, you

12
00:01:04,690 --> 00:01:12,780
get a flexible tool you that you can
use to program observability control

13
00:01:12,780 --> 00:01:15,730
or enhance your kernel behavior.

14
00:01:16,135 --> 00:01:20,755
So looking here, we see the
architecture, basically the process

15
00:01:20,755 --> 00:01:28,005
by which the EVPF program is created
and is loaded to the kernel space.

16
00:01:28,365 --> 00:01:34,174
So basically you start with the C
source or like a c program EBPF program.

17
00:01:34,714 --> 00:01:39,845
And then this program is converted
to by code before being, converted

18
00:01:39,845 --> 00:01:46,714
to birth code by the compiler the
compiler before being attached into

19
00:01:46,714 --> 00:01:53,685
the or loaded into the kernel space
and attached to either hooks or events

20
00:01:53,685 --> 00:01:56,625
or system calls as the case may be.

21
00:01:57,104 --> 00:02:03,435
So between between the
compiler and the loader page.

22
00:02:03,935 --> 00:02:08,149
Verifier goes through your programs
to ensure that, okay, there are

23
00:02:08,149 --> 00:02:12,649
no loops, there are no out of
memory or any security protocols.

24
00:02:12,950 --> 00:02:17,899
And then this makes it a compatible,
a kind of compatible program

25
00:02:18,140 --> 00:02:23,160
that can be executed as machine
code within the kernel space.

26
00:02:23,660 --> 00:02:26,990
Why is E-B-P-F-A game
changer for observability?

27
00:02:27,490 --> 00:02:33,190
It's because you get that flexibility,
you get that ability to basically

28
00:02:33,250 --> 00:02:37,450
execute code within your NEL space.

29
00:02:37,840 --> 00:02:42,640
This gives you nel level visibility,
something that you can use to

30
00:02:42,640 --> 00:02:48,800
like able to get custom metrics
way before any user space.

31
00:02:49,150 --> 00:02:51,100
Application might see it.

32
00:02:51,200 --> 00:02:54,110
You get them like almost
immediately in run time.

33
00:02:54,799 --> 00:02:59,309
As the operations are being
executed, you get that visibility.

34
00:02:59,670 --> 00:03:01,489
You get no code instrument.

35
00:03:01,820 --> 00:03:07,099
No, there's no code instrumentation
need, no manual instrumentation is

36
00:03:07,099 --> 00:03:09,799
needed for you to get this visibility.

37
00:03:10,109 --> 00:03:15,279
Because yeah, EPF is a clinical
compatible tool or technology.

38
00:03:15,549 --> 00:03:17,109
Basically, it works for.

39
00:03:17,489 --> 00:03:27,329
Most or any kernel version, and you do not
need to basically create or mess with your

40
00:03:27,329 --> 00:03:29,369
security, the security of your kernel.

41
00:03:29,869 --> 00:03:31,429
Also low overhead.

42
00:03:31,919 --> 00:03:37,900
As we said earlier, everything gets
compiled or extended to machine code.

43
00:03:38,605 --> 00:03:44,645
And all your scripts, however,
flexible, gets compiled into the machine

44
00:03:44,645 --> 00:03:49,674
code that is executed at runtime at
the same time as your operations,

45
00:03:49,674 --> 00:03:52,214
basically real world use cases.

46
00:03:52,214 --> 00:03:57,355
So a lot of companies have used this tool.

47
00:03:58,195 --> 00:04:02,455
A lot of companies have extended
this tool creating using it as a

48
00:04:02,455 --> 00:04:07,495
foundation for tracing system calls,
network visibility, performance

49
00:04:07,495 --> 00:04:09,895
profile lead, security monitoring.

50
00:04:10,195 --> 00:04:15,910
And I linked in some examples from
Netflix, apple, basically what

51
00:04:15,910 --> 00:04:18,580
they have done with this tool.

52
00:04:19,079 --> 00:04:25,699
We have a demo with, I added
in a GitHub link, so if that

53
00:04:25,699 --> 00:04:27,529
is useful to us, but let's see.

54
00:04:28,444 --> 00:04:37,354
This is the GitHub link where the code
instructions on how to basically set your

55
00:04:37,354 --> 00:04:41,544
environment to test the EVPF code as well.

56
00:04:41,994 --> 00:04:48,239
U usually, or like for this particular
one, you just need an instance.

57
00:04:48,629 --> 00:04:57,550
I'm going to be using, aWS instance,
prettier micro or, yeah, that, and that's

58
00:04:57,550 --> 00:05:00,370
all I need to just test these two demos.

59
00:05:00,370 --> 00:05:03,990
First, the packet log, which
would basically which would

60
00:05:03,990 --> 00:05:11,610
basically get traffic packets
and log it in to a BPF map.

61
00:05:12,255 --> 00:05:14,925
So let's just see how that works.

62
00:05:15,425 --> 00:05:19,145
I have already done this already.

63
00:05:19,225 --> 00:05:25,345
Put up the environment basically
so we can just test this.

64
00:05:25,675 --> 00:05:29,875
Just basically sending in packets,
sending in traffic packets,

65
00:05:30,415 --> 00:05:34,045
and then we'll see that this.

66
00:05:34,545 --> 00:05:40,515
Has been a BPF map has been
generated for us in packet counters

67
00:05:40,605 --> 00:05:46,385
and packet events, and we can be
able to see this particular ones.

68
00:05:46,955 --> 00:05:53,435
This BPF map is accessible to
NEL space, but also accessible

69
00:05:53,435 --> 00:05:55,235
to the user space as well.

70
00:05:55,235 --> 00:06:01,325
It can be exported, it can be pushed
towards your, your observability

71
00:06:01,325 --> 00:06:06,945
tools like Prometheus and Graph,
basically with user space tools.

72
00:06:07,185 --> 00:06:12,115
But then for this particular
demo, we used C program,

73
00:06:12,615 --> 00:06:19,220
the C program to basically pass the
packet information from our traffic.

74
00:06:20,030 --> 00:06:27,930
Log that data into basic BPF map and with
the counter also to, to count to basically

75
00:06:27,930 --> 00:06:33,390
generate metrics, just costal metrics
like a counter get the packet size.

76
00:06:33,390 --> 00:06:36,000
Also put that in there as well.

77
00:06:36,570 --> 00:06:42,270
So once you do this, once you
like put down your logic, your

78
00:06:42,330 --> 00:06:45,965
EVPF logic, you then load it.

79
00:06:46,635 --> 00:06:48,855
Like I said earlier, you compile it.

80
00:06:49,425 --> 00:06:51,045
This is the compiling stage.

81
00:06:51,105 --> 00:06:57,605
You compiled it, loaded it into this
interface, and then yeah, you could

82
00:06:58,265 --> 00:07:01,295
immediately see that it has been loaded.

83
00:07:01,625 --> 00:07:03,815
This is the packet of server.

84
00:07:04,315 --> 00:07:06,655
And then we have tested it and seen that.

85
00:07:06,685 --> 00:07:07,915
Okay, it.

86
00:07:08,415 --> 00:07:13,395
The map has been created and been
stored in the kernel space where it

87
00:07:13,395 --> 00:07:16,245
can be accessed by user space programs.

88
00:07:16,455 --> 00:07:22,735
But then that is not the only
way to create or to utilize.

89
00:07:23,169 --> 00:07:29,409
Your EBPF programs, you can create
native C-E-B-P-F programs, but there

90
00:07:29,469 --> 00:07:37,589
are also extensions such as Python
extensions, go rust in BCC Cilium library.

91
00:07:37,589 --> 00:07:44,640
And then I, this extensions offer,
like abstractions of the base code.

92
00:07:44,940 --> 00:07:47,680
They help you basically do more.

93
00:07:48,175 --> 00:07:51,865
With your EVPF programs
make it easier for you.

94
00:07:52,284 --> 00:07:57,145
However, they also have their performance
cost, basically because you get more

95
00:07:57,145 --> 00:08:01,074
delayed execution and a larger footprint.

96
00:08:01,135 --> 00:08:09,524
We'll see this with our next demo
where we use the BCC BCC tool to,

97
00:08:09,854 --> 00:08:14,144
create E an EVPF program in Python.

98
00:08:14,834 --> 00:08:17,864
So this is the Python code.

99
00:08:18,224 --> 00:08:25,334
You can see that BCC is imported
and then used in passing your

100
00:08:25,334 --> 00:08:29,624
main VPF programming and logic.

101
00:08:29,984 --> 00:08:37,294
And then that is now used to
initialize and process events.

102
00:08:37,820 --> 00:08:40,490
Within the code instructions.

103
00:08:41,030 --> 00:08:47,740
So this particular code traces first
we'll pull up an in JX web service

104
00:08:48,160 --> 00:08:51,010
and then we'll add some files into it.

105
00:08:51,880 --> 00:08:59,390
And then you can trace the access, you
can trace user access to those files.

106
00:08:59,600 --> 00:09:02,280
Basically just login or.

107
00:09:03,120 --> 00:09:09,110
Accessing the files and
generating metrics from that.

108
00:09:09,680 --> 00:09:15,760
I have done all this installing
testing creating the HTML

109
00:09:15,760 --> 00:09:18,190
files that we would then trace.

110
00:09:19,065 --> 00:09:24,925
I've done all this in the
Ubuntu instance, so we just.

111
00:09:25,425 --> 00:09:29,185
Start that up and then try and test it.

112
00:09:29,335 --> 00:09:31,495
Let's go with the load test instead.

113
00:09:31,995 --> 00:09:38,015
So the load test of our inject
web service in another terminal,

114
00:09:38,515 --> 00:09:42,545
and then it's basically mixed
like a hundred requests to all.

115
00:09:43,045 --> 00:09:45,895
Different pages and
then we can see it here.

116
00:09:46,765 --> 00:09:50,735
The operations, this is our BPF program.

117
00:09:50,825 --> 00:09:56,315
Basically reacting and basically
carrying out our program logic

118
00:09:56,815 --> 00:09:59,215
for the a hundred requests.

119
00:09:59,545 --> 00:10:01,870
That is that service receives

120
00:10:02,370 --> 00:10:03,000
the program.

121
00:10:03,300 --> 00:10:04,620
Logic is up to you.

122
00:10:04,680 --> 00:10:05,310
You can.

123
00:10:05,880 --> 00:10:08,280
Whatever you want to do
with that information.

124
00:10:08,280 --> 00:10:11,400
Whatever you want to do with the
visibility or the access to the

125
00:10:11,400 --> 00:10:15,870
visibility that you have, whether you
want to create custom metrics from

126
00:10:15,870 --> 00:10:21,550
that, whether you want to export the
data directly to your observability

127
00:10:21,550 --> 00:10:28,800
tools, your analysis tools, whether
you just want that information logged.

128
00:10:29,300 --> 00:10:31,250
EBPF gives you the access.

129
00:10:31,625 --> 00:10:37,945
And gives you the ability to program
your custom logic into the NEL space.

130
00:10:38,665 --> 00:10:41,315
So we have seen two demos now.

131
00:10:41,615 --> 00:10:48,715
One, using native c programming to
create, to create, eVPF program and

132
00:10:48,715 --> 00:10:50,785
attach that to the kernel space.

133
00:10:51,055 --> 00:10:53,445
Another using Python basically.

134
00:10:53,805 --> 00:11:01,295
And then as we saw, we didn't need
to load or to attach manually the

135
00:11:01,295 --> 00:11:07,970
Python BC, C program did that at
runtime for the Python execution.

136
00:11:08,470 --> 00:11:08,770
Yeah.

137
00:11:08,770 --> 00:11:16,040
So extending EVPF, like I said earlier,
you have either those custom metrics

138
00:11:16,100 --> 00:11:25,320
or you have the BPPF the BP BPF map
basically with your data and you

139
00:11:25,320 --> 00:11:31,040
can export this, you can, utilize
it with a user space application.

140
00:11:31,640 --> 00:11:34,820
However you need for extending EVPF.

141
00:11:35,300 --> 00:11:37,610
There's a wide range of tools.

142
00:11:38,240 --> 00:11:39,920
Open Telemetry has one.

143
00:11:40,020 --> 00:11:41,190
Promeus has one.

144
00:11:42,000 --> 00:11:43,650
Grafana has one.

145
00:11:43,860 --> 00:11:51,720
Basically all this based on EVPF and
utilizing this revolutionary technology

146
00:11:52,110 --> 00:11:54,780
that gives you access to corner space.

147
00:11:55,350 --> 00:11:59,590
For your observability tools,
your observability tooling.

148
00:12:00,190 --> 00:12:08,200
So here we see a kind of ecosystem
map, basically looking at all the

149
00:12:08,260 --> 00:12:14,880
projects, XD case that are available
to you for whatever use case you have

150
00:12:15,390 --> 00:12:18,480
for observability and monitoring.

151
00:12:18,720 --> 00:12:20,550
We have pixie.

152
00:12:21,050 --> 00:12:21,710
Gimme a moment.

153
00:12:22,210 --> 00:12:26,445
We have Pixie, which is a
Kubernetes observability tool.

154
00:12:27,400 --> 00:12:33,940
Basically takes away the need for manual
instrumentation as it is based on EVPF.

155
00:12:34,210 --> 00:12:39,150
You have Parker, which gives you
continuous system profiling Periscope,

156
00:12:39,330 --> 00:12:42,570
another continuous profiling platform.

157
00:12:42,570 --> 00:12:47,380
Deep Flow has automated
observability with tracing, and

158
00:12:47,380 --> 00:12:49,270
you have network tools like Cilium.

159
00:12:49,640 --> 00:12:50,090
Hopefully.

160
00:12:50,705 --> 00:12:56,385
Which gives you like that networking
for your Kubernetes Kubernetes purposes.

161
00:12:56,885 --> 00:12:59,945
There are also program management tools.

162
00:13:00,395 --> 00:13:07,445
You have Leaf BPF man and
bleb, basically this ecosystem.

163
00:13:07,785 --> 00:13:11,415
Your EBPF ecosystem is,
has a wide range of.

164
00:13:11,915 --> 00:13:18,485
Variety of tolling, variety of management
and optimization tools that you can use

165
00:13:18,845 --> 00:13:27,855
to better to better utilize and optimize
observability networking or security

166
00:13:28,215 --> 00:13:32,505
across your across your infrastructure.

167
00:13:33,005 --> 00:13:38,695
Here I linked in some, so more
learning docs, basically to see

168
00:13:38,725 --> 00:13:48,475
more on how EVPF came to be on the
infrastructure of EPF, on basically

169
00:13:48,505 --> 00:13:51,280
learning how to utilize EVPF more.

170
00:13:51,955 --> 00:13:57,415
And then an article EVPF for Frank,
which basically goes through how how.

171
00:13:57,915 --> 00:14:03,525
Startups or how companies take
giants like apple and Netflix

172
00:14:03,585 --> 00:14:06,545
are using EBPF for their tools.

173
00:14:07,045 --> 00:14:10,525
This is the end of my presentation.

174
00:14:10,645 --> 00:14:15,625
The GitHub links slides as well,
will be made available to you.

175
00:14:15,655 --> 00:14:22,385
So thank you very much for taking the
time to go through to this presentation.

