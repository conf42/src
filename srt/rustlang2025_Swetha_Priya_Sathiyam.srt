1
00:00:00,500 --> 00:00:02,150
Hello, welcome.

2
00:00:02,585 --> 00:00:06,665
To Ang 2025 and thank you
for watching my presentation.

3
00:00:07,114 --> 00:00:08,164
My name ista sat.

4
00:00:08,825 --> 00:00:13,325
I'm a director of Solution Design and
Architecture at a TP, and I'm happy to

5
00:00:13,325 --> 00:00:20,595
present today's topic on how Ang has been,
can potentially, revolutionize employee

6
00:00:20,595 --> 00:00:23,655
experience across our organizations.

7
00:00:24,190 --> 00:00:28,405
HR technology, as is one of the very
few enterprise systems that touches

8
00:00:28,405 --> 00:00:30,415
every single person in an organization.

9
00:00:30,979 --> 00:00:34,850
From the day a person is recruited
till their very last paycheck,

10
00:00:35,180 --> 00:00:36,290
the stakes are very high.

11
00:00:36,890 --> 00:00:38,630
A payroll delay can you know, trust.

12
00:00:38,630 --> 00:00:43,160
A data breach can cost humongous
lawsuits and a slow benefits portal can

13
00:00:43,160 --> 00:00:45,380
potentially damage employee experience.

14
00:00:45,980 --> 00:00:49,640
Today we'll explore how RAs a very
modern systems programming language

15
00:00:50,000 --> 00:00:54,620
is emerging as a serious contender to
power these mission critical platforms.

16
00:00:55,165 --> 00:01:00,355
Rust brings in performance, safety,
and concurrency in ways traditional

17
00:01:00,384 --> 00:01:03,384
HR tech stacks cannot often match.

18
00:01:03,474 --> 00:01:06,985
And we'll see how this translates
directly into better reliability,

19
00:01:06,985 --> 00:01:11,095
lower cost, and a more seamless
experience for both employees, HR

20
00:01:11,095 --> 00:01:13,074
teams, and organizations as a whole.

21
00:01:13,574 --> 00:01:15,585
Let's take a brief look
at our today's agenda.

22
00:01:15,585 --> 00:01:16,604
Here's where we are headed.

23
00:01:16,994 --> 00:01:20,895
We'll start with the evolution of HR
technology, where we've come from and

24
00:01:20,895 --> 00:01:21,960
what that means to today's systems.

25
00:01:22,320 --> 00:01:26,610
We will take a look at modern HR
i's requirements and why they have

26
00:01:26,610 --> 00:01:28,589
outgrown our older architectures.

27
00:01:29,009 --> 00:01:33,210
We'll explore how rusts technical
advantages and how they can

28
00:01:33,210 --> 00:01:35,279
potentially apply to HR systems.

29
00:01:35,789 --> 00:01:38,190
We'll break down a reference
architecture and see some sort.

30
00:01:38,374 --> 00:01:40,444
Real world examples that
you could relate to.

31
00:01:41,044 --> 00:01:43,774
And we'd also examine security
performance and integration

32
00:01:43,774 --> 00:01:46,144
capabilities from a rust point of view.

33
00:01:46,354 --> 00:01:50,164
And finally, a sort of a look ahead
into emerging trends and where

34
00:01:50,164 --> 00:01:52,624
Rust fits in the future of HR tech.

35
00:01:53,124 --> 00:01:54,024
Let's set the stage.

36
00:01:54,565 --> 00:01:58,694
HR technology, if, as has
gone through three big eras.

37
00:01:59,324 --> 00:02:01,629
They started off with a
manual era where, you know.

38
00:02:02,425 --> 00:02:08,245
People data were stored in personal
files, paper forms, physical timecards.

39
00:02:08,545 --> 00:02:11,394
Efficiency was extremely low,
and errors are extremely high.

40
00:02:11,635 --> 00:02:15,925
Even today, there are organizations
who have manual paper forms for

41
00:02:15,925 --> 00:02:19,714
their onboarding or for their,
personal action forms, et cetera.

42
00:02:20,085 --> 00:02:22,185
And then keep the legacy digital era.

43
00:02:22,185 --> 00:02:26,645
This is where the, HRIS platforms or
as an enterprise architecture in the

44
00:02:26,645 --> 00:02:31,625
eighties and the nineties, digitized
records, but they ran on old architecture

45
00:02:31,625 --> 00:02:34,085
such as stronger architecture,
such as mainframes or proprietary

46
00:02:34,085 --> 00:02:36,305
systems like on-premise systems.

47
00:02:36,575 --> 00:02:40,030
For example, many Fortune find
companies still have core payroll

48
00:02:40,030 --> 00:02:42,035
systems that are written with cobol.

49
00:02:42,435 --> 00:02:45,585
They're extremely reliable, no
doubt about it, but they're also

50
00:02:45,585 --> 00:02:47,655
inflexible and very costly to update.

51
00:02:48,070 --> 00:02:51,399
And then now we are currently
in the modern cloud era where we

52
00:02:51,399 --> 00:02:55,420
have platforms like Workday, SAP,
SuccessFactors, we have Oracle

53
00:02:55,420 --> 00:03:00,760
Cloud Head cm that deliver web-based
self-service analytics and integrations.

54
00:03:01,359 --> 00:03:05,079
Now, what's the problem really
then even these modern platforms,

55
00:03:05,109 --> 00:03:09,189
they often run into scalability
and performance bottlenecks.

56
00:03:09,519 --> 00:03:12,210
And I've seen, open enrollment
windows where a system took.

57
00:03:12,285 --> 00:03:16,755
Three minutes to load a single benefits
page or a single promotion for an

58
00:03:16,755 --> 00:03:20,905
employee takes, seven minutes to run
simply because there are thousands

59
00:03:20,905 --> 00:03:24,955
of employees in the database and they
were all trying to log in at once.

60
00:03:25,255 --> 00:03:29,415
And this is the opportunity where
Russ gives us a way to build system to

61
00:03:29,415 --> 00:03:31,635
avoid these choke points completely.

62
00:03:32,135 --> 00:03:38,704
Modern H-R-I-S-A, truly modern HRIS
has to meet demands in forefronts.

63
00:03:39,094 --> 00:03:41,075
One is multiple stakeholders.

64
00:03:41,989 --> 00:03:46,159
Employees today expect very
intuitive mobile self-service

65
00:03:46,159 --> 00:03:47,929
for personal data benefits leave.

66
00:03:47,929 --> 00:03:50,809
They wanna do everything
at the click of a finger.

67
00:03:51,259 --> 00:03:56,149
Managers want to do their actions as
performance, moving employee scheduling

68
00:03:56,149 --> 00:03:58,339
for them, approving things, et cetera.

69
00:03:58,939 --> 00:04:02,899
And then HR admins require
compliance ready tools and they wanna

70
00:04:02,904 --> 00:04:04,795
report run reports instinctively.

71
00:04:05,295 --> 00:04:06,795
There are also technical demands.

72
00:04:06,915 --> 00:04:10,305
System must process huge volumes
of sensitive data, payroll,

73
00:04:10,305 --> 00:04:13,275
drawn tax reports, performance
review without exposing it.

74
00:04:13,575 --> 00:04:18,135
Integrations has to be strongly built
with finance learning identity systems.

75
00:04:18,404 --> 00:04:22,005
There are so many that are non-negotiable
with technical integrations.

76
00:04:22,485 --> 00:04:24,195
Think about scalability for a second.

77
00:04:24,405 --> 00:04:25,365
What works.

78
00:04:25,740 --> 00:04:30,090
A tech stack for a 500 employee
must also scale to 50,000 without

79
00:04:30,090 --> 00:04:31,350
really rewriting the system.

80
00:04:31,710 --> 00:04:35,030
Imagine a company like Deloitte,
scaling, onboarding for 200,

81
00:04:35,030 --> 00:04:37,070
I hires for a month to 2000.

82
00:04:37,070 --> 00:04:38,960
Hire in, because of a growth push.

83
00:04:39,450 --> 00:04:41,340
Think about what a system needs to do.

84
00:04:41,895 --> 00:04:43,695
And finally, data integrity.

85
00:04:43,965 --> 00:04:47,445
A single payroll error can
mean regulatory fines, employee

86
00:04:47,445 --> 00:04:49,785
attrition, and serious consequences.

87
00:04:50,085 --> 00:04:55,245
Legacy languages sometimes let subtle
bugs slip through that rust compiler

88
00:04:55,245 --> 00:04:56,835
would catch before deployment.

89
00:04:57,225 --> 00:05:00,975
This complexity demands a tech stack
that can balance safety, speed,

90
00:05:01,065 --> 00:05:04,815
and adaptability, which is where
rust fits in very beautifully.

91
00:05:05,315 --> 00:05:08,125
Let's look at, talking about
all these requirements, let's.

92
00:05:08,645 --> 00:05:13,755
Talk about what are rusts technical
advantages and how it brings its

93
00:05:13,755 --> 00:05:15,555
strengths to HRIS development.

94
00:05:15,945 --> 00:05:18,825
The first and foremost that I'd
like to talk about is memory safety.

95
00:05:19,215 --> 00:05:23,625
Entire classes of bugs, like buffer
overflows, dangling pointers simply

96
00:05:23,625 --> 00:05:28,175
cannot happen in a rust language
for an HR system holding things

97
00:05:28,175 --> 00:05:33,305
like social security numbers, bank
details, sensitive, PII, that is huge.

98
00:05:34,035 --> 00:05:35,685
Fearless concurrency.

99
00:05:35,775 --> 00:05:38,835
Payroll runs, benefits
processing, performance analytics

100
00:05:39,135 --> 00:05:40,545
all can execute in parallel.

101
00:05:40,545 --> 00:05:45,355
Think about it, your payrolls are running
almost every other week, and at the same

102
00:05:45,355 --> 00:05:48,805
time, if you're running a huge performance
cycle or your annual performance cycle

103
00:05:48,805 --> 00:05:52,045
and running analytics out of it, all
of this needs to concurrently run.

104
00:05:52,045 --> 00:05:56,065
And in an imagine in an organization
that's about 50,000 as associates,

105
00:05:56,635 --> 00:06:01,465
the concurrency of processes
running together is very critical

106
00:06:01,465 --> 00:06:02,755
for high volume deadlines.

107
00:06:03,540 --> 00:06:08,640
Performance, zero cost abstractions
mean we can write expressive

108
00:06:08,640 --> 00:06:10,020
code without slowing it down.

109
00:06:10,290 --> 00:06:13,440
That's how you can run a global
payroll calculation across a hundred

110
00:06:13,440 --> 00:06:17,460
thousand organization, employee
organization in a, in very few minutes.

111
00:06:18,285 --> 00:06:21,915
Explicit error handling rust sort
of forces developers to consider

112
00:06:22,125 --> 00:06:23,475
what happens when something fails.

113
00:06:23,475 --> 00:06:28,005
For example, if a tax rate file is missing
or a benefit vendor, API is down, right?

114
00:06:28,015 --> 00:06:31,885
It forces you to write the
error, logic, strong type system.

115
00:06:32,425 --> 00:06:34,585
HR data is very complex, right?

116
00:06:34,585 --> 00:06:37,045
Think about a very simple data
point, such just a job grade.

117
00:06:37,075 --> 00:06:37,945
That's not a number.

118
00:06:38,245 --> 00:06:40,315
It's a structure that's tied to bands.

119
00:06:40,315 --> 00:06:43,285
That's tied to locations, and there are
rules that are running behind the scenes.

120
00:06:43,885 --> 00:06:46,795
Rust enforces these rules
in the type system itself.

121
00:06:47,275 --> 00:06:52,225
All of this in combination directly
addresses sort of core pain points

122
00:06:52,225 --> 00:06:56,155
that you know I've seen or the
industry has seen in the HRIS domain.

123
00:06:56,485 --> 00:06:59,485
Downtime, data errors, slow
processing, all of these are very

124
00:06:59,485 --> 00:07:01,120
common pain points for clients today.

125
00:07:01,620 --> 00:07:06,930
Let's take a look at RU'S
architecture and how the

126
00:07:06,935 --> 00:07:08,330
implementation is going to be really.

127
00:07:08,990 --> 00:07:09,470
Happening.

128
00:07:10,040 --> 00:07:14,000
A rust powered HRIS can be
designed in many ways, right?

129
00:07:14,000 --> 00:07:15,650
It can be in modular layers, right?

130
00:07:15,860 --> 00:07:18,380
It rust can potentially
sit at a data layer.

131
00:07:18,560 --> 00:07:22,160
It can work with SQL or
no SQL with compiled time.

132
00:07:22,160 --> 00:07:25,610
Query checks, meaning no runtime surprises
when you're fetching payroll records.

133
00:07:25,610 --> 00:07:26,270
Think about that.

134
00:07:26,810 --> 00:07:28,460
API development, right?

135
00:07:28,510 --> 00:07:29,590
Frameworks like act.

136
00:07:30,490 --> 00:07:33,220
I think ActX web handle
thousands of concurring

137
00:07:33,220 --> 00:07:34,810
requests with minimal resources.

138
00:07:34,990 --> 00:07:38,350
This is so perfect for, ESS
portals, employee sensors, portals.

139
00:07:39,040 --> 00:07:43,220
Thirdly, authentic authentication,
a very strong cryptography

140
00:07:43,220 --> 00:07:44,780
and role-based access control.

141
00:07:44,780 --> 00:07:46,010
Ensuring an HR admin can.

142
00:07:46,490 --> 00:07:51,230
Can't see an executive salaries data
unless explicitly granted authentication

143
00:07:51,230 --> 00:07:56,360
plays a very critical point from an HCM
domain because it really controls who

144
00:07:56,360 --> 00:08:00,020
can see whom within your organization
and what can they potentially do.

145
00:08:00,470 --> 00:08:04,520
HRI systems these days are looking to
get very granular with this, and Rust

146
00:08:04,520 --> 00:08:08,305
can very strongly support this with its,
with its role-based access controls.

147
00:08:08,805 --> 00:08:10,995
And finally background processing.

148
00:08:11,295 --> 00:08:15,285
Async and awaits allow payroll
calculation, batches or compliance

149
00:08:15,285 --> 00:08:19,005
report to run in the background
without really freezing the interface.

150
00:08:19,335 --> 00:08:23,655
For example, think about a 40,000
member organization which has, which

151
00:08:23,655 --> 00:08:27,645
is running payroll across countries,
right when we run tax calculations

152
00:08:27,825 --> 00:08:31,785
for, in the background for each
jurisdiction concurrently, and then

153
00:08:31,785 --> 00:08:35,475
merge the results, delivering those
final payroll reports and registers.

154
00:08:35,735 --> 00:08:39,125
Would be a matter of few
minutes instead of a few hours.

155
00:08:39,605 --> 00:08:44,765
So this modular architecture aligns very
well with microservices approach and gives

156
00:08:44,765 --> 00:08:50,615
different aspects of HR functionality
to be developed, deployed, and scaled

157
00:08:51,115 --> 00:08:53,845
Rest supports the entire can.

158
00:08:54,170 --> 00:08:58,190
Potentially support the entire employee
journey if we are to think about it.

159
00:08:58,610 --> 00:09:01,590
Recruitment, onboarding, right from
the time an apply applicant, is.

160
00:09:01,880 --> 00:09:04,640
Is getting into the
system through their ATSs.

161
00:09:04,850 --> 00:09:08,720
It can handle high volume searches,
it and state machine workflows.

162
00:09:08,720 --> 00:09:11,210
It can ensure a candidate can't
be marked as hired without

163
00:09:11,210 --> 00:09:12,440
a complete background check.

164
00:09:12,960 --> 00:09:16,620
It can support potentially from a
performance management as an example.

165
00:09:16,620 --> 00:09:20,010
It can do code tracking, it
can do feedback loops that can

166
00:09:20,010 --> 00:09:23,640
update instantly even during high
traffic performance life cycles.

167
00:09:24,000 --> 00:09:26,940
Benefits in payroll is one of the
very hot topics, like we've seen

168
00:09:26,940 --> 00:09:30,420
so many examples so far that we
talked about real time calculations.

169
00:09:30,780 --> 00:09:35,280
For, say benefit deductions or 4 0
1 case, et cetera, or stock options,

170
00:09:35,280 --> 00:09:36,960
et cetera, without running errors.

171
00:09:37,380 --> 00:09:40,830
And when you look at it from an
offboarding perspective, where you are

172
00:09:40,830 --> 00:09:45,360
securely retaining the data and the
deletion rules to ensure compliance and

173
00:09:45,360 --> 00:09:50,100
rest, like we said, has very strict access
controls and it can prevent ex-employee

174
00:09:50,130 --> 00:09:52,110
data from being accessed later.

175
00:09:52,610 --> 00:09:56,900
Think about an org organization
onboarding 500 seasonal staff in a week.

176
00:09:57,050 --> 00:09:59,960
Say like a retail outlet, like
a Macy's, which does seasonal

177
00:09:59,960 --> 00:10:01,040
hiring during Christmas.

178
00:10:01,280 --> 00:10:05,270
Rest ensures no data conflicts,
no stale records, and no missed

179
00:10:05,270 --> 00:10:07,440
payrolls for these seasonal hiring.

180
00:10:07,940 --> 00:10:11,150
Talking so much about it, I think
it's very important to talk about

181
00:10:11,180 --> 00:10:13,760
security and compliance in hr.

182
00:10:13,790 --> 00:10:16,370
Security is non-negotiable, right rest.

183
00:10:17,195 --> 00:10:20,165
This is where Rust provides
a memory safety guarantee.

184
00:10:20,405 --> 00:10:23,885
Many security beaches are
cost by memory related bugs.

185
00:10:24,215 --> 00:10:26,615
Rust makes those impossible
by design, right?

186
00:10:26,885 --> 00:10:29,825
Role-based access control, like we
talked about, it's modeled in the

187
00:10:29,825 --> 00:10:31,565
code, not just in config files.

188
00:10:31,595 --> 00:10:32,615
It's there at the code level.

189
00:10:32,915 --> 00:10:36,275
It ensures payroll processors
can see medical records, like

190
00:10:36,305 --> 00:10:39,725
they don't have to, like managers
cannot see PII of their associates.

191
00:10:39,725 --> 00:10:40,350
They shouldn't be.

192
00:10:41,245 --> 00:10:43,945
It also allows for tamper
proof audit, logging.

193
00:10:44,365 --> 00:10:48,535
Every access to sensitive data is logged
without degrading the performance.

194
00:10:48,715 --> 00:10:53,125
It is very critical as you go
global for GDPR and HIPA compliance.

195
00:10:53,365 --> 00:10:55,285
And finally, privacy by design.

196
00:10:55,585 --> 00:10:59,995
RU'S ownership model makes it easier
to implement strict data lifecycle

197
00:10:59,995 --> 00:11:03,685
controls like auto deletion, after
retention periods, purging, et cetera.

198
00:11:04,185 --> 00:11:05,985
Like how we talked about security.

199
00:11:06,375 --> 00:11:10,405
The other side of HRIS is what
is very important is performance.

200
00:11:10,825 --> 00:11:14,345
In performance terms rust
can potentially deliver sub

201
00:11:14,345 --> 00:11:16,865
millisecond API responses or even.

202
00:11:17,170 --> 00:11:20,880
Even under heavy load it can handle
thousands of concurrent benefit

203
00:11:20,880 --> 00:11:25,320
elections without crashing and
can use up to 50% less memory

204
00:11:25,320 --> 00:11:28,920
than garbage collected languages,
allowing more services per server.

205
00:11:29,560 --> 00:11:33,730
I also researched that one rust based
payroll system in financial services at

206
00:11:33,940 --> 00:11:37,600
currently reduced the processing time
from six hours to under 45 minutes.

207
00:11:37,780 --> 00:11:41,590
I think that is tremendous enabling
some of the day-to-day payroll

208
00:11:41,620 --> 00:11:44,590
corrections, something impossible
with the old code cobalt set up.

209
00:11:45,090 --> 00:11:47,675
We talked about security performance.

210
00:11:47,675 --> 00:11:52,265
I think the next big piece for HRI
is technology to be a huge success

211
00:11:52,265 --> 00:11:56,825
is integration APIs and how well your
platform can potentially connect.

212
00:11:56,825 --> 00:11:58,775
And this is where Rust
plays a big piece, right?

213
00:11:59,145 --> 00:12:02,925
There are high performance rest APIs
for connections to finance, learning,

214
00:12:02,925 --> 00:12:04,665
recruitment and identity systems.

215
00:12:04,995 --> 00:12:08,025
There is real time data streaming
for live dashboards showing

216
00:12:08,025 --> 00:12:10,365
hiring progress compliant tasks.

217
00:12:10,425 --> 00:12:11,355
Dashboards are.

218
00:12:11,795 --> 00:12:17,145
Are a huge importance in the HCM, I
would say from executive presence.

219
00:12:17,455 --> 00:12:21,385
And Rust easily offers this
message queuing to hold spikes.

220
00:12:21,385 --> 00:12:23,875
For example, processing
thousands of time of request.

221
00:12:23,875 --> 00:12:25,405
After a policy change announcement.

222
00:12:25,915 --> 00:12:30,350
A large healthcare provider used,
actually used rust microservices to sync.

223
00:12:30,895 --> 00:12:34,975
Employee scheduling data between HRS
and their patient care in real time,

224
00:12:35,125 --> 00:12:39,765
and they eliminate manually eliminating
manual errors in shift assignment.

225
00:12:40,265 --> 00:12:43,525
So all of these prove, gave me
the confidence that trust is

226
00:12:43,525 --> 00:12:46,645
winning in every angle that you
look at from a HCM presence.

227
00:12:46,945 --> 00:12:51,905
So I dug a little bit, and this is where
real world case studies where I picked

228
00:12:51,905 --> 00:12:56,135
three organizations that have, how they
have utilized, rust as a programming

229
00:12:56,135 --> 00:12:59,955
language there was a tech company
that completely replaced Java based

230
00:12:59,955 --> 00:13:04,425
onboarding app that crashed during high
volume, graduating hiring with rust and

231
00:13:04,425 --> 00:13:08,325
now to date handles thousands of new
hires per quarter with zero downtime.

232
00:13:08,905 --> 00:13:12,265
Also studied about a financial
services company that migrated from

233
00:13:12,295 --> 00:13:17,005
cobalt to rust, and it cut processing
times by 85% and it also enabled

234
00:13:17,005 --> 00:13:18,385
mid-cycle payroll runs by the way.

235
00:13:19,180 --> 00:13:23,050
And lastly, I, there was an interesting
case study about a healthcare that

236
00:13:23,050 --> 00:13:27,610
built a rust based healthcare records
platform that integrated with HR data.

237
00:13:27,610 --> 00:13:30,100
It met HIPAA compliance
without sacrificing speed.

238
00:13:30,610 --> 00:13:34,900
The common thread that you, that I saw
in all of this was three big things.

239
00:13:35,080 --> 00:13:38,980
There was reliability, there was speed,
and there was reduced maintenance cost.

240
00:13:39,480 --> 00:13:44,350
So with all of this in mind some of the
best practices that I can potentially

241
00:13:44,350 --> 00:13:49,230
conclude is, to succeed with rust
in the HCM space or in the HRIS

242
00:13:49,230 --> 00:13:53,065
world, you should use domain-driven
design to model HR processes to code.

243
00:13:53,695 --> 00:13:57,235
Of course and applying consistent
error handling so that pay

244
00:13:57,385 --> 00:13:59,485
payroll failures, surface early.

245
00:13:59,915 --> 00:14:03,845
Also making sure we are building
comprehensive tests end to end for

246
00:14:03,845 --> 00:14:07,805
compliance and data incre integrity
across whatever solution we are

247
00:14:07,805 --> 00:14:12,725
building into and minimizing unsafe
code and auditing third party libraries.

248
00:14:12,935 --> 00:14:15,875
And also making sure that we're
documenting core HR logic so

249
00:14:15,875 --> 00:14:18,305
that future development teams
can onboard very quickly.

250
00:14:18,805 --> 00:14:21,105
Finally just to sum it up.

251
00:14:21,265 --> 00:14:25,805
There is a future of HR tech with
definitely with rust and emerging

252
00:14:25,805 --> 00:14:30,005
tech will reshape HRI with tech in
terms of building AI for attrition,

253
00:14:30,005 --> 00:14:34,535
prediction talent matching rust
integrates with so many ML libraries.

254
00:14:34,875 --> 00:14:36,045
You could potentially use.

255
00:14:36,365 --> 00:14:39,125
Will reshape blockchain for
credential verifications.

256
00:14:39,305 --> 00:14:43,655
You can run real time analytics for
engagement and productivity insights.

257
00:14:43,935 --> 00:14:48,075
You can also have privacy preserving
computation for secure compliant data

258
00:14:48,075 --> 00:14:52,985
analytics analysis in the HR world, and
also edge computing to serve, global

259
00:14:52,985 --> 00:14:55,265
workforces with really greedy low latency.

260
00:14:55,765 --> 00:15:00,025
Just as a conclusion while I wrap
up, all of this, rust isn't just a

261
00:15:00,025 --> 00:15:03,985
new language, it's a platform choice
that can fundamentally improve HRIS

262
00:15:04,225 --> 00:15:06,235
performance, reliability, and security.

263
00:15:06,595 --> 00:15:11,425
It's already proving itself in small ways
in a real world systems that can handle

264
00:15:11,425 --> 00:15:13,465
some of the sensitive high volume data.

265
00:15:13,855 --> 00:15:17,815
But for HR tech leaders, I think this is
a chance to future proof their system with

266
00:15:17,845 --> 00:15:19,615
whatever applications they are in today.

267
00:15:19,885 --> 00:15:21,715
I think adding that layer.

268
00:15:21,720 --> 00:15:25,430
Of whatever we saw, whether it's in
APIs or whether it's in, reporting

269
00:15:25,430 --> 00:15:26,810
or whether it's in analytics.

270
00:15:26,970 --> 00:15:32,010
Rust is giving them an option to deliver
the kind of speed, safety, and scalability

271
00:15:32,340 --> 00:15:34,980
that the modern workforce really demand.

272
00:15:35,730 --> 00:15:39,660
So I hope you enjoyed all my
insights with a good context with

273
00:15:39,660 --> 00:15:44,365
hr and HCM technology and how Rust
brings a lot of advantages to this.

274
00:15:44,515 --> 00:15:45,445
Thank you so much.

275
00:15:45,725 --> 00:15:46,265
Have a good day.

