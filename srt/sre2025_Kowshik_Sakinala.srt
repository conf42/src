1
00:00:00,030 --> 00:00:00,625
Hello everyone.

2
00:00:01,450 --> 00:00:02,410
This is Kaushik sa.

3
00:00:02,910 --> 00:00:06,280
I'm a senior DevOps senior
deeply passionate about

4
00:00:06,290 --> 00:00:10,910
cloud native infrastructure,
automation and GitHubs practices.

5
00:00:11,629 --> 00:00:16,099
I worked across industries, modernizing
deployments using Kubernetes,

6
00:00:16,610 --> 00:00:21,709
Helen and GitLab ca and today I'm
here to talk about something I

7
00:00:21,709 --> 00:00:24,140
believe is the future of DevOps.

8
00:00:24,640 --> 00:00:25,680
Which is called gis.

9
00:00:25,680 --> 00:00:30,330
Whether you are just exploring GI tops or
looking to scale it across multiple teams,

10
00:00:31,110 --> 00:00:38,070
this talk will help you understand what it
is, why it matters, and how real companies

11
00:00:38,129 --> 00:00:41,370
are leveraging it to transform operations.

12
00:00:41,870 --> 00:00:42,800
So let's start.

13
00:00:42,860 --> 00:00:43,430
Why.

14
00:00:43,850 --> 00:00:48,560
We we need to use QS and why GI
tops exist in the first place.

15
00:00:49,040 --> 00:00:54,260
Traditional infrastructure management,
even with tools like Terraform or Ansible

16
00:00:54,620 --> 00:01:00,580
informs manual triggers, inconsistent
environments, and often lacks visibility.

17
00:01:01,335 --> 00:01:02,775
GitHub's flipped that model.

18
00:01:02,985 --> 00:01:07,485
It treats GIT as a source of truth,
allowing infrastructure changes

19
00:01:07,485 --> 00:01:12,855
to go through the same review,
approval and CICD pipelines as code.

20
00:01:13,355 --> 00:01:20,525
The 2023 state of continuous delivery
report shows 52% of organization already

21
00:01:20,645 --> 00:01:26,555
started using GI tops, and adoption is
growing because it brings consistency,

22
00:01:26,555 --> 00:01:29,075
automation, and confidence to the table.

23
00:01:29,850 --> 00:01:34,770
In the past projects and in the
current project, GIS eliminated that it

24
00:01:34,770 --> 00:01:37,740
worked on de but not on pro scenario.

25
00:01:38,370 --> 00:01:39,660
It unified the workflow.

26
00:01:40,160 --> 00:01:45,470
So I just want to talk about  the
key fundamentals of GitHubs.

27
00:01:45,970 --> 00:01:49,860
There are like four key pillars
that define GitHubs version control.

28
00:01:50,270 --> 00:01:55,860
Git tracks every change to infrastructure,
just like app code declared to config.

29
00:01:56,340 --> 00:02:01,590
You declared the research state
using AML or h She files continuous

30
00:02:01,590 --> 00:02:04,770
reconciliation agents like Argo cd.

31
00:02:04,800 --> 00:02:07,350
Check if your cluster matches Watson.

32
00:02:07,350 --> 00:02:10,050
Get and fix it if it drifts.

33
00:02:10,815 --> 00:02:11,655
Collaboration.

34
00:02:12,075 --> 00:02:15,285
Now infra can go through
pool request and approvals.

35
00:02:15,315 --> 00:02:18,705
You bring dev and ops into
one streamlined workflow.

36
00:02:19,395 --> 00:02:23,895
I like to call this infrastructure
meets software engineering principles.

37
00:02:24,285 --> 00:02:26,055
And that shift is really powerful.

38
00:02:26,555 --> 00:02:31,085
And I just want to start
with the GIS architecture and

39
00:02:31,125 --> 00:02:33,075
you know how the workflows.

40
00:02:34,035 --> 00:02:41,555
Think of it like this a developer makes a
change to Kubernetes manifest and gi let's

41
00:02:41,555 --> 00:02:46,205
say, updating a memory limit or rolling
out a new app version that triggers a

42
00:02:46,205 --> 00:02:48,675
pr which gets reviewed and approved.

43
00:02:48,675 --> 00:02:52,065
As soon as it is merged, your
GitHubs controller picks it

44
00:02:52,065 --> 00:02:54,405
up and updates the cluster.

45
00:02:55,305 --> 00:02:58,575
If something goes wrong, you
don't assess a it to the server,

46
00:02:58,905 --> 00:03:00,315
you roll back the GI commit.

47
00:03:00,915 --> 00:03:03,765
It's all versioned auditable and secure.

48
00:03:04,755 --> 00:03:08,835
So we used this model on a
multi crusher retail system.

49
00:03:09,595 --> 00:03:14,755
Every environment was in sync with git
and even engine fixes, like hot fixes

50
00:03:14,755 --> 00:03:16,825
were dragged just deliverable deployments.

51
00:03:17,325 --> 00:03:20,715
So I just want to share with you
like what are the different GitHubs

52
00:03:20,715 --> 00:03:22,155
tools and technologies out there.

53
00:03:22,615 --> 00:03:26,605
There are like primarily three GitHubs
tools where you can, explore and

54
00:03:26,615 --> 00:03:28,625
use regarding to your organization.

55
00:03:29,025 --> 00:03:30,345
The first one is Argo cd.

56
00:03:30,415 --> 00:03:34,525
Gives a beautiful UI to see
what's deployed versus Watson gi.

57
00:03:34,954 --> 00:03:36,095
Great for teams starting with.

58
00:03:36,595 --> 00:03:41,114
Is more lightweight and integrates
nicely with customization and her.

59
00:03:41,635 --> 00:03:43,105
It's great for GitHubs at scale.

60
00:03:43,535 --> 00:03:47,755
Jenkins X combines GIS with
CI pipelines and it's great

61
00:03:47,755 --> 00:03:50,155
for integrated dev workflows.

62
00:03:51,115 --> 00:03:56,210
Each tool has its place and the
beauty of GI is it's too agnostic.

63
00:03:56,270 --> 00:03:58,040
The core idea says the same.

64
00:03:58,540 --> 00:04:01,750
You can also integrate with the
Secrets manager, like Hashi Cup

65
00:04:01,750 --> 00:04:05,130
Walt, or a w Secrets manager
for secure config handling also.

66
00:04:05,630 --> 00:04:08,870
So now let's talk about  the
GitHubs and Kubernetes integration.

67
00:04:09,530 --> 00:04:12,320
So Kubernetes and GitHubs
are like peanut and butter.

68
00:04:13,040 --> 00:04:14,990
Like they just work together.

69
00:04:15,630 --> 00:04:19,960
Because  Kubernetes is already
declared to your just layering

70
00:04:19,990 --> 00:04:21,460
Git workflow on top of it.

71
00:04:22,060 --> 00:04:26,860
You store all your AML files in Git
and reconcile them automatically.

72
00:04:27,500 --> 00:04:34,960
You can manage not just apps, but entire
infrastructure namespace CRDs, SSEs, all.

73
00:04:35,460 --> 00:04:40,340
Let's talk about the benefits,
benefits of GI tops implementation.

74
00:04:40,880 --> 00:04:46,699
So what's the actual impact of GI tops,
like 50 to 70% faster deployments, audit

75
00:04:46,699 --> 00:04:51,439
trails built in, like you have built in
audit trails, consistent environments,

76
00:04:51,469 --> 00:04:55,570
all over the, like organization,
one Command Rollback with Kit Vert.

77
00:04:55,750 --> 00:05:01,550
In Real World project I worked on we
reduced post-deployment incidents by 40%

78
00:05:02,060 --> 00:05:04,100
within the first quarter of QAPs adoption.

79
00:05:04,640 --> 00:05:05,060
Why?

80
00:05:05,240 --> 00:05:07,970
Because there was no more guesswork.

81
00:05:07,970 --> 00:05:12,310
Everyone knew exactly
what was running and when.

82
00:05:12,810 --> 00:05:16,980
Now I just want to talk
about few, use case studies.

83
00:05:17,320 --> 00:05:21,330
Where  companies like Spotify
adopting GI Tops spot.

84
00:05:21,540 --> 00:05:23,280
Spotify had a real challenge.

85
00:05:23,620 --> 00:05:27,940
It has 200 plus microservices,
multi clusters and no

86
00:05:27,940 --> 00:05:29,350
unified deployment process.

87
00:05:29,980 --> 00:05:34,900
They adopted  one of the GI
Tops tools flux CD then built

88
00:05:35,050 --> 00:05:39,620
Backstage as an internal platform
that empowered like developers to

89
00:05:39,620 --> 00:05:42,170
self-serve their own deployments.

90
00:05:42,670 --> 00:05:48,490
The results are like 80% fewer
failures, three times deployment speed.

91
00:05:49,010 --> 00:05:52,130
This is what happens when you
combine GitHubs with DevX tools.

92
00:05:52,850 --> 00:05:55,610
And I just want to explore
another case study.

93
00:05:55,830 --> 00:06:00,970
One of the biggest companies like
Capital One story is all about  the mood.

94
00:06:01,135 --> 00:06:04,965
From manual to infra to Kubernetes.

95
00:06:04,965 --> 00:06:06,674
And then, embrace Argo.

96
00:06:07,064 --> 00:06:12,354
Now they manage three plus 3000
plus apps, cons, consistently across

97
00:06:12,414 --> 00:06:17,174
environments and get this like
the slash deployment times by 90%.

98
00:06:17,624 --> 00:06:23,604
90%. This proves likes isn't just for tech
startups, it works at enterprise level.

99
00:06:23,904 --> 00:06:26,864
I just want to talk about some
of the challenges you're gonna

100
00:06:26,864 --> 00:06:28,514
face when you're using GI Tops.

101
00:06:28,814 --> 00:06:30,104
It's not always smooth.

102
00:06:30,194 --> 00:06:34,374
Here are like three big areas to
take to tackle like a security.

103
00:06:34,774 --> 00:06:38,704
You need to use like a least privilege,
and you need to manage securities as well.

104
00:06:39,094 --> 00:06:43,194
Multi use layer report
structures templating tools

105
00:06:43,194 --> 00:06:44,934
like Hal, our customization.

106
00:06:45,569 --> 00:06:47,629
Oracle organization, adoption, train.

107
00:06:47,629 --> 00:06:52,249
You need to train teams, integrate with
your existing CI and communicate value.

108
00:06:52,879 --> 00:06:57,119
So we started the small app got
quick wins and  then we spread

109
00:06:57,119 --> 00:06:58,979
across the results internally.

110
00:06:59,289 --> 00:07:01,329
That's why we drove this adoption.

111
00:07:02,079 --> 00:07:02,679
If you.

112
00:07:03,049 --> 00:07:04,849
Try GitHubs and hit any blockers.

113
00:07:04,849 --> 00:07:06,559
I would love to chat after the session.

114
00:07:07,009 --> 00:07:09,529
These challenges are
like real, but solvable.

115
00:07:10,029 --> 00:07:13,599
So let's talk about  the roadmap, like
how we gonna implement the GitHubs.

116
00:07:13,749 --> 00:07:17,599
If you are looking to adopt GitHubs,
he is the path I suggest you're gonna

117
00:07:17,639 --> 00:07:19,829
start by assessing your current process.

118
00:07:20,129 --> 00:07:21,770
Pick a pilot app and GitHub tool.

119
00:07:22,270 --> 00:07:27,090
Document your wings, scale it
gradually, and measure it like,

120
00:07:27,090 --> 00:07:30,840
the metrics,  deployment frequency,
MTRs, and incident count.

121
00:07:31,530 --> 00:07:34,440
GitHubs is a mindset shift,
not just a tool adoption.

122
00:07:34,901 --> 00:07:38,261
It brings visibility, control,
and speed to the infrastructure.

123
00:07:38,761 --> 00:07:39,851
So let's stop.

124
00:07:40,150 --> 00:07:45,041
Talk about the,  GitHub's future
and how the GitHub's trend will go.

125
00:07:45,531 --> 00:07:47,451
So looking ahead, the future is exciting.

126
00:07:47,601 --> 00:07:49,491
I can see  a integration is coming.

127
00:07:49,821 --> 00:07:54,291
Imagine GitHub systems prior predicting
deployment failures before they happen.

128
00:07:54,541 --> 00:07:59,301
Like a multi-cloud GI UPS is already
here, manage A-W-S-G-C-P and on-prem

129
00:07:59,301 --> 00:08:06,081
together Git UPS is even more beyond
intra like, managing dbs A ps s and more.

130
00:08:06,591 --> 00:08:13,381
The GitHubs workflow like working group is
pushed toward interop and standardization.

131
00:08:13,861 --> 00:08:16,381
It's becoming the
backbone of modern cloud.

132
00:08:17,001 --> 00:08:18,021
Ops I can say.

133
00:08:18,981 --> 00:08:23,331
So those who embrace GIS now won't
just improve current processes.

134
00:08:23,451 --> 00:08:27,321
They'll just shape the next
generation of infrastructure delivery.

135
00:08:27,821 --> 00:08:29,731
So thank you guys.

136
00:08:29,811 --> 00:08:31,041
Thank you so much for listening.

137
00:08:31,321 --> 00:08:34,801
You can find me LinkedIn in LinkedIn.

138
00:08:34,801 --> 00:08:38,611
If you want, you can cut there and
thanks for giving this opportunity.

139
00:08:39,101 --> 00:08:39,551
Thank you.

