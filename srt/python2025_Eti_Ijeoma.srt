1
00:00:00,070 --> 00:00:05,240
Hi, I'll be speaking on the hidden
potential of Python's Dunder method.

2
00:00:05,740 --> 00:00:11,270
About me, I'm a software engineer
with over five years of experience in

3
00:00:11,299 --> 00:00:13,920
working for some companies globally.

4
00:00:14,440 --> 00:00:16,910
I'm very passionate about
sharing knowledge and I do

5
00:00:16,910 --> 00:00:18,800
this through technical writing.

6
00:00:19,430 --> 00:00:25,390
I'm also an active contributor to the
open source community, and socials below.

7
00:00:25,890 --> 00:00:27,070
What a Dunder method.

8
00:00:27,570 --> 00:00:31,860
So before I dive into our
Dunder method, I would like to

9
00:00:31,860 --> 00:00:34,600
just take us a few steps back.

10
00:00:35,490 --> 00:00:39,860
So maybe most of us here have
worked with Python classes and

11
00:00:39,910 --> 00:00:41,860
object oriented programming before.

12
00:00:42,360 --> 00:00:45,599
You've probably written the
double underscore init method

13
00:00:45,899 --> 00:00:47,570
to initialize your object.

14
00:00:47,910 --> 00:00:52,629
Or perhaps you've come across the double
underscore string method while trying to

15
00:00:52,639 --> 00:00:54,660
make your object print something readable.

16
00:00:55,459 --> 00:00:56,569
But let me ask you this.

17
00:00:57,060 --> 00:01:03,330
Did you ever stop and wonder what's really
going on behind those double underscores?

18
00:01:03,869 --> 00:01:06,529
Or are they just some
really quirky convention?

19
00:01:07,269 --> 00:01:11,070
They are part of something much
bigger because they help Python work

20
00:01:11,070 --> 00:01:15,370
the way it does and they make our
code really flexible and powerful.

21
00:01:15,870 --> 00:01:18,720
So imagine you're adding
two numbers in Python.

22
00:01:19,304 --> 00:01:23,515
That's probably simple, like you
write five plus three and Python

23
00:01:23,535 --> 00:01:25,135
instantly knows to return it.

24
00:01:25,824 --> 00:01:29,874
Now, what if you want to add to object
you've created in your own class?

25
00:01:30,395 --> 00:01:34,414
At first, Python might give you
an error, but here's the thing.

26
00:01:35,064 --> 00:01:38,544
You can teach Python how to
understand what's an error.

27
00:01:38,895 --> 00:01:43,325
The plus operator means for your
object, just like it does for number.

28
00:01:43,975 --> 00:01:44,975
How can we do that?

29
00:01:45,005 --> 00:01:46,895
We can do that using the Dunder method.

30
00:01:47,395 --> 00:01:53,084
So this might sound like some really
advanced Python, wizardry thing, but I

31
00:01:53,114 --> 00:02:00,424
promise it's not intimidating as it seems
so, Dunder methods or magic methods,

32
00:02:00,864 --> 00:02:03,085
as often as most people might call it.

33
00:02:03,739 --> 00:02:06,549
They're just basically tools, right?

34
00:02:06,570 --> 00:02:08,100
That built into Python.

35
00:02:08,669 --> 00:02:13,009
They let you define objects, how your
objects should behave when they are

36
00:02:13,019 --> 00:02:20,230
used in familiar ways, like being added
or compared and maybe, subtracted.

37
00:02:20,730 --> 00:02:26,489
So when methods, these methods, aren't
just something really technical.

38
00:02:26,819 --> 00:02:31,189
They're just practical ways to
make your code really clean, smart.

39
00:02:31,689 --> 00:02:32,749
And look like Python.

40
00:02:33,249 --> 00:02:35,439
So for example, think about this.

41
00:02:35,869 --> 00:02:40,799
Have you ever used the length
method function to get the size of

42
00:02:41,109 --> 00:02:43,089
a list of string behind the scene?

43
00:02:43,979 --> 00:02:48,710
Python isn't just automatically
going to know, the length, right?

44
00:02:49,100 --> 00:02:52,590
It's going to call the Dunder
method, double underscore length.

45
00:02:53,010 --> 00:02:56,359
And the same goes for printing an object.

46
00:02:57,200 --> 00:03:02,420
Python calls the double underscore string
method to figure out what to display.

47
00:03:02,810 --> 00:03:07,700
This methods are quietly doing a whole
lot of heavy lifting to make Python feel

48
00:03:07,750 --> 00:03:10,010
as seamless and intuitive as it does.

49
00:03:10,770 --> 00:03:13,510
But here's where the things
get even more exciting.

50
00:03:13,890 --> 00:03:18,849
This Dunder methods aren't just
limited to Python built in types.

51
00:03:18,930 --> 00:03:22,580
You can use them in your own
class to create objects that

52
00:03:22,620 --> 00:03:24,699
feel just as natural to use.

53
00:03:24,929 --> 00:03:27,100
So you imagine building a library.

54
00:03:27,275 --> 00:03:30,355
Where users can treat your
object like they treat the list.

55
00:03:30,855 --> 00:03:35,355
Like the trees list or numbers, they
can add, They can compare, they can

56
00:03:35,365 --> 00:03:41,134
iterate over them without ever having
to read a really complicated API docs.

57
00:03:41,155 --> 00:03:45,825
let me just give you a
glimpse of, how this works.

58
00:03:46,315 --> 00:03:51,095
we've maybe probably worked with
popular libraries like NumPy, In

59
00:03:51,095 --> 00:03:56,945
NumPy, you can add arrays together by
simply using the add operator, like I

60
00:03:56,955 --> 00:03:58,625
should, like I'm showing in the slide.

61
00:03:59,015 --> 00:04:04,215
And then the NumPy uses Donda methods like
the underscore adds to make this happen.

62
00:04:04,815 --> 00:04:09,995
Or maybe, we've probably worked
with the SQL alchemy and it's a

63
00:04:09,995 --> 00:04:11,975
library for working with database.

64
00:04:12,095 --> 00:04:12,115
Yeah.

65
00:04:12,630 --> 00:04:17,180
It's basically helps you, lets
you build SQL queries using Python

66
00:04:17,240 --> 00:04:22,320
comparison operator, like the double
equal to, this is not really just some

67
00:04:22,320 --> 00:04:26,000
hack it's done the methods at play.

68
00:04:26,000 --> 00:04:28,190
So done the methods basically uses the.

69
00:04:28,575 --> 00:04:31,345
Double underscore equal, method.

70
00:04:31,845 --> 00:04:37,045
And now you can see that this library
feels so intuitive because they've really,

71
00:04:37,465 --> 00:04:43,105
yeah, using the power of Python's methods
to blend seamlessly with the language.

72
00:04:43,605 --> 00:04:45,095
so here we see.

73
00:04:45,510 --> 00:04:50,350
that this libraries used on the methods
to integrate Python syntax without

74
00:04:50,350 --> 00:04:55,250
their objects, but they are making
the objects feel very easy to use.

75
00:04:55,750 --> 00:05:01,500
So done the methods goals beyond
using the double underscore in it, or.

76
00:05:01,805 --> 00:05:06,865
The double underscore REPL for creating a
clustering representation of your object.

77
00:05:07,275 --> 00:05:13,225
So we also have, the double underscore
get item, which enables you to get an

78
00:05:13,255 --> 00:05:16,105
index based access of your, objects.

79
00:05:16,805 --> 00:05:22,815
Or we have the double underscore iterate,
I T E R iteration, which basically

80
00:05:22,875 --> 00:05:25,905
helps you or makes your object iterable.

81
00:05:26,455 --> 00:05:30,775
What makes Dunder objects really
exciting is how they give you

82
00:05:30,775 --> 00:05:35,215
ability to control how your objects
behave in nearly any context.

83
00:05:35,465 --> 00:05:38,965
So you can define how they should
respond to arithmetic comparison.

84
00:05:39,825 --> 00:05:41,425
Or even built in function.

85
00:05:41,735 --> 00:05:46,155
And once you understand them, you
realize that they are not just a feature

86
00:05:46,155 --> 00:05:51,555
in Python, they are a very key part
of Python design philosophy, which is

87
00:05:51,555 --> 00:05:53,735
really simplicity and expressiveness.

88
00:05:54,235 --> 00:05:55,805
So now you might be wondering.

89
00:05:56,300 --> 00:05:59,006
Why should I care about Dunder Method?

90
00:05:59,006 --> 00:06:00,700
The answer is very simple.

91
00:06:01,060 --> 00:06:04,780
You are building applications, if
you are building applications, or

92
00:06:04,790 --> 00:06:09,350
libraries, or frameworks, using
Dunder Method can make your code

93
00:06:09,450 --> 00:06:11,530
really intuitive for others to use.

94
00:06:11,940 --> 00:06:16,240
It means like you're writing an API
that feels really natural and familiar

95
00:06:16,470 --> 00:06:19,350
reducing the learning curve for users.

96
00:06:19,590 --> 00:06:23,870
And if you work on your own project,
Dunder methods lets you write code

97
00:06:23,980 --> 00:06:26,480
really cleaner and really usable.

98
00:06:27,200 --> 00:06:34,950
So today we are going to dive into how
this Dunder method works and, we're going

99
00:06:34,950 --> 00:06:41,910
to see how we can use it to, Build our
own, custom class using done the methods.

100
00:06:42,240 --> 00:06:46,960
if you're just a beginner or you already
have some experience working with

101
00:06:46,960 --> 00:06:51,720
Python, this talk is just going to give
you like a really fresh perspective.

102
00:06:52,270 --> 00:06:53,350
how they work.

103
00:06:53,430 --> 00:06:59,030
like I said, there are core features of
Python that allows instances of class to

104
00:06:59,030 --> 00:07:04,030
seamlessly interact with Python's built
in functions and operator of the language.

105
00:07:04,320 --> 00:07:09,250
So the term done that just comes
from the word double underscore,

106
00:07:09,250 --> 00:07:15,050
because this method starts and
end with two underscores, such as

107
00:07:15,070 --> 00:07:18,010
underscore string and underscore in it.

108
00:07:18,860 --> 00:07:22,940
why they may seem mysterious at the
first glance, they are well defined

109
00:07:22,940 --> 00:07:27,930
rules and they are invoked at a
specific time in the Python interpreter.

110
00:07:28,470 --> 00:07:33,070
So at the core, Dunder methods are not
actually magical in the sense of being

111
00:07:33,110 --> 00:07:35,860
mysterious or some very arbitrary thing.

112
00:07:36,370 --> 00:07:37,610
They are methods that are.

113
00:07:37,770 --> 00:07:42,570
in Python's interpreter and and
Python interpreter implicitly

114
00:07:42,660 --> 00:07:46,630
calls them when like a specific
action occurs in your program.

115
00:07:46,630 --> 00:07:50,940
So for example, when you want to
assess the length of an object.

116
00:07:51,440 --> 00:07:55,090
there are some characteristics
of Python's Dunder method, right?

117
00:07:55,100 --> 00:07:58,870
Like I said earlier, it's a built
in, it has double underscore.

118
00:07:59,210 --> 00:08:04,070
you can't Dunder methods are tied to
a specific operation or functions.

119
00:08:04,380 --> 00:08:10,400
So such as like the, double underscore
call or double underscore add, right?

120
00:08:10,400 --> 00:08:15,400
So you can't just come up with your
own, or you can't invent your own

121
00:08:15,670 --> 00:08:20,050
Dunder methods you can't create a class,
for example, like what I did here.

122
00:08:20,355 --> 00:08:25,635
And name your dunder methods like create
a method and just give it a custom name,

123
00:08:25,685 --> 00:08:30,565
understand double underscore custom,
because in the real sense, Python will

124
00:08:30,565 --> 00:08:37,225
not be able to recognize your methods
and there, it will make much sense.

125
00:08:37,295 --> 00:08:37,845
this methods.

126
00:08:38,630 --> 00:08:42,470
You, for you to be able to use Python
standard method, you have to use

127
00:08:42,500 --> 00:08:46,240
what's already existing and you can
find the least of all these methods

128
00:08:46,240 --> 00:08:48,420
in the Python's documentation.

129
00:08:48,970 --> 00:08:53,240
so we're going to create
our own custom class, right?

130
00:08:53,300 --> 00:08:54,250
It's called points.

131
00:08:54,750 --> 00:08:58,660
when we create a custom class
called points, like we, most

132
00:08:58,660 --> 00:09:01,470
of us here do, we, we can.

133
00:09:01,970 --> 00:09:06,540
We already used the double
underscore in it, basically.

134
00:09:06,850 --> 00:09:12,000
And what this does is that it
helps, when we initialize our class.

135
00:09:12,520 --> 00:09:17,500
it's basically, passes or
initializes the object attributes,

136
00:09:17,500 --> 00:09:19,470
what we passed in the constructor.

137
00:09:19,960 --> 00:09:23,710
now We might want to print
out the class, right?

138
00:09:23,720 --> 00:09:25,380
Like print out the class.

139
00:09:26,040 --> 00:09:32,170
And then when we use print automatically,
Python uses the string double

140
00:09:32,180 --> 00:09:35,630
score double underscore string or
double underscore repel metal to

141
00:09:35,630 --> 00:09:39,820
define how this object should be
represented as strings by default.

142
00:09:40,285 --> 00:09:44,895
Python shows this object types
in look type and the location in

143
00:09:44,895 --> 00:09:49,415
memory, which isn't very helpful,
like what we have here in the slides.

144
00:09:49,965 --> 00:09:54,675
to use, to display, more readable, Data.

145
00:09:54,715 --> 00:09:59,235
When we try to print our class, we
can create by, or we can implement

146
00:09:59,235 --> 00:10:04,005
the REPL method to provide like a
more meaningful string representation.

147
00:10:04,355 --> 00:10:08,455
So here we, we added the REPL, method.

148
00:10:08,935 --> 00:10:14,565
And then when we instantiated our
class again and printed out points,

149
00:10:14,845 --> 00:10:16,595
what happened is that we were.

150
00:10:17,335 --> 00:10:24,435
We could see the, a better output,
which is points and two, two and three.

151
00:10:24,935 --> 00:10:28,715
So basically REPL just Python.

152
00:10:28,715 --> 00:10:32,865
When we call the print methods,
Python knows to call REPL and

153
00:10:32,865 --> 00:10:34,945
represent the string in a proper way.

154
00:10:35,815 --> 00:10:37,165
what if we want to add.

155
00:10:37,665 --> 00:10:41,825
We instantiate two classes
that are class twice, right?

156
00:10:41,825 --> 00:10:48,555
So for example, here we have
1 and 2 and we decide to add

157
00:10:48,555 --> 00:10:49,965
these two classes together.

158
00:10:50,355 --> 00:10:51,185
What happens?

159
00:10:51,545 --> 00:10:55,435
We get an error from Python
saying unsupported operand types,

160
00:10:55,725 --> 00:10:59,245
because we actually cannot add
these two classes together.

161
00:10:59,505 --> 00:11:05,235
the way the, add operator works by
default, it works with numbers or string.

162
00:11:05,545 --> 00:11:13,455
So to make the add work with our class,
we have to define the add on the methods.

163
00:11:13,620 --> 00:11:14,850
In our point class.

164
00:11:15,120 --> 00:11:17,190
So let's define the addDundee method.

165
00:11:17,740 --> 00:11:22,110
like you see here, we defined
it and we said, whenever the

166
00:11:22,760 --> 00:11:27,370
plus operator is called, we try
to add the classes together.

167
00:11:27,890 --> 00:11:32,240
And now when we try to instantiate
again, what happens is that we

168
00:11:32,300 --> 00:11:37,850
add the point one and point two
class and we get an actual output.

169
00:11:38,350 --> 00:11:43,700
now we've seen that we've been able
to tell Python how to handle the

170
00:11:43,770 --> 00:11:48,100
plus operator in the, the point
object, because now you can add

171
00:11:48,140 --> 00:11:53,030
both X and Y coordinates of the two
points and return a new point object.

172
00:11:53,530 --> 00:12:00,300
let's look at the plus,
the equal to operator.

173
00:12:00,300 --> 00:12:06,760
we can see that if we try to, like we
instantiated two class, the two objects,

174
00:12:06,770 --> 00:12:08,910
two points object earlier, right?

175
00:12:08,930 --> 00:12:12,140
If we try to compare both
objects together, right?

176
00:12:12,190 --> 00:12:13,960
We see, we try to compare 0.

177
00:12:13,960 --> 00:12:14,490
1 and 0.

178
00:12:14,490 --> 00:12:16,987
2. We got true, but 0.

179
00:12:16,987 --> 00:12:18,480
1 and 0.

180
00:12:18,860 --> 00:12:22,120
3, we got false, right?

181
00:12:22,890 --> 00:12:25,670
we got false for both of them.

182
00:12:26,170 --> 00:12:28,770
And oh, I'm sorry, I
missed something here.

183
00:12:28,770 --> 00:12:34,850
So if we try to instantiate the
point objects twice and compare 0.

184
00:12:34,850 --> 00:12:35,100
1 and 0.

185
00:12:35,100 --> 00:12:38,720
2, we see that it is not equal, right?

186
00:12:38,720 --> 00:12:45,960
So that's because if we don't have
the, don't, equal to method, right?

187
00:12:45,960 --> 00:12:47,100
Equality methods.

188
00:12:47,390 --> 00:12:52,830
So if we define that like we did here, and
we now instant, we try to compare them.

189
00:12:52,840 --> 00:12:54,050
And we see that 0.

190
00:12:54,050 --> 00:12:54,900
1 and 0.

191
00:12:54,900 --> 00:12:56,010
2 methods.

192
00:12:56,390 --> 00:13:00,140
now equal 3 are not equal.

193
00:13:00,640 --> 00:13:05,590
So basically now we've been able to
create, the fact that we created the

194
00:13:05,860 --> 00:13:11,000
equality done the methods now means
that when we use the double equal to,

195
00:13:11,450 --> 00:13:17,110
it now works on our point objects,
comparing X and Y values for equality.

196
00:13:17,610 --> 00:13:18,890
So another.

197
00:13:19,370 --> 00:13:25,040
Methods that we can create is the
double underscore multiplication,

198
00:13:25,130 --> 00:13:27,350
multiple collision, done the methods.

199
00:13:27,770 --> 00:13:34,230
So like you see here, we added
the multiplication methods.

200
00:13:34,560 --> 00:13:41,770
And what this does is that when we
try to multiply our class with, in

201
00:13:41,770 --> 00:13:45,225
number, It brings out an actual output.

202
00:13:45,485 --> 00:13:49,875
So we see that the multiplication operator
now scales the point by multiplying it

203
00:13:49,965 --> 00:13:54,325
our coordinates by the scalar value,
which we passed here and three, which

204
00:13:54,325 --> 00:13:56,105
is the scalar value we passed here.

205
00:13:56,605 --> 00:14:00,325
We can also, yeah, several
done the methods, but another

206
00:14:00,365 --> 00:14:02,405
very interesting one is the.

207
00:14:03,675 --> 00:14:11,075
let's implement this iterator method
to make the point objects iterable.

208
00:14:11,435 --> 00:14:17,875
So you can look through when we call
the, when we implement this method,

209
00:14:18,055 --> 00:14:22,895
what it does basically is that we
can loop over like the coordinates.

210
00:14:23,175 --> 00:14:26,595
So we can see how we, we did that here.

211
00:14:26,595 --> 00:14:26,625
Okay.

212
00:14:27,585 --> 00:14:35,105
but what happened is that now, when we try
to loop over our, point objects, we make

213
00:14:35,105 --> 00:14:37,655
them feel like native Python collections.

214
00:14:37,665 --> 00:14:39,775
So now we can be able
to loop through them.

215
00:14:40,275 --> 00:14:46,525
Um, The next thing I'll be talking
about is why Python Dundun methods

216
00:14:46,615 --> 00:14:48,415
are really interesting to use.

217
00:14:48,825 --> 00:14:52,925
we do not just want to use them
everywhere in our code, right?

218
00:14:52,925 --> 00:14:54,415
We do not want to abuse them.

219
00:14:54,415 --> 00:14:55,985
So, this.

220
00:14:56,485 --> 00:15:00,725
And, I think like we need
to use them when necessary.

221
00:15:01,145 --> 00:15:02,875
So they are really powerful.

222
00:15:02,875 --> 00:15:06,735
And personally, I think like you
should use them thoughtfully.

223
00:15:07,025 --> 00:15:10,245
So you shouldn't like
overuse them or misuse them.

224
00:15:10,585 --> 00:15:14,615
And because they can make the code
really confusing and unpredictable

225
00:15:14,825 --> 00:15:16,255
or probably hard to maintain.

226
00:15:16,695 --> 00:15:21,140
So there are several guides on
where not to use Dunder method.

227
00:15:21,580 --> 00:15:26,060
And, so for example, don't use them
to solve like really simple problems.

228
00:15:26,110 --> 00:15:29,340
So you can see here in our
calculator class, right?

229
00:15:29,580 --> 00:15:31,190
We just had, an add.

230
00:15:31,820 --> 00:15:33,870
we have the Dunder method add.

231
00:15:34,305 --> 00:15:40,925
To multiply, the, to multiply data, to
multiply the values in the calculator.

232
00:15:41,135 --> 00:15:45,415
So this is quite confusing because
we shouldn't use that, if we are

233
00:15:45,425 --> 00:15:50,265
using the ad, it should depicts
adding values together, Another

234
00:15:50,285 --> 00:15:52,485
thing too, is using the call.

235
00:15:52,965 --> 00:15:57,835
like I said earlier, we don't want to,
we don't want to use the, there's a

236
00:15:57,845 --> 00:16:00,725
double underscore call method, right?

237
00:16:01,095 --> 00:16:04,195
We don't want to implement that
in our class because that's

238
00:16:04,195 --> 00:16:05,755
quite unnecessary, right?

239
00:16:05,765 --> 00:16:09,605
It's doing, it's, we might
not really need it, right?

240
00:16:09,625 --> 00:16:14,435
Or imagine implementing a call method
that is actually adding numbers together.

241
00:16:14,625 --> 00:16:16,305
So it doesn't make any sense.

242
00:16:16,315 --> 00:16:18,635
So we want to use Dunder methods.

243
00:16:19,205 --> 00:16:21,325
That depicts the right thing in your code.

244
00:16:21,325 --> 00:16:23,295
So they don't become really confusing.

245
00:16:23,945 --> 00:16:26,785
Also, you do not want to
invent your own dunder methods.

246
00:16:26,815 --> 00:16:31,375
Like I said earlier, if you declare
a dunder method that does not exist

247
00:16:31,415 --> 00:16:36,455
in Python native, in the native
Python, it won't work, right?

248
00:16:36,465 --> 00:16:39,435
It's just going to be like, you're
going to be confusing everyone

249
00:16:39,625 --> 00:16:43,735
because someone can hop on your code
and see it and get confused because

250
00:16:43,775 --> 00:16:45,115
this doesn't really do anything.

251
00:16:45,125 --> 00:16:47,445
instead just use a regular method.

252
00:16:48,415 --> 00:16:54,195
Also, operator, we don't want to make
operator overload and really confusing.

253
00:16:54,625 --> 00:17:01,195
like I said earlier, you don't want to
just, use an add method to, Multiply

254
00:17:01,465 --> 00:17:07,095
several, numbers, you don't want to
use a multiply multiplication, done the

255
00:17:07,095 --> 00:17:09,795
methods to add several numbers, right?

256
00:17:10,265 --> 00:17:13,645
you want to keep it really
consistent and very predictable.

257
00:17:14,145 --> 00:17:17,795
So another thing is that you don't
want to overuse it in your classes.

258
00:17:18,105 --> 00:17:21,355
So you don't want to have
a class that uses all the.

259
00:17:22,015 --> 00:17:25,845
The method just makes your
class really confused.

260
00:17:25,855 --> 00:17:28,605
You want to use them only when necessary.

261
00:17:29,265 --> 00:17:33,025
And another thing is that
you don't want to sacrifice

262
00:17:33,105 --> 00:17:35,985
readability for cleverness, right?

263
00:17:35,985 --> 00:17:40,485
So if you have a lot of this done,
the methods, your class, it might

264
00:17:40,485 --> 00:17:45,215
look cool, but it might be very
difficult for others to maintain.

265
00:17:45,715 --> 00:17:46,725
in conclusion,

266
00:17:47,225 --> 00:17:51,525
using done, the methods
It's really powerful, right?

267
00:17:51,985 --> 00:17:56,925
So we've seen how we're able to combine
Dunder methods to be able to build

268
00:17:57,145 --> 00:18:01,625
the point class earlier and to make
it look really rich and intuitive.

269
00:18:02,125 --> 00:18:07,485
So these are like techniques that you can
use to design objects that makes it feel

270
00:18:07,515 --> 00:18:09,835
really natural in our applications domain.

271
00:18:09,845 --> 00:18:14,655
For example, If you are working with
a graphic library, you might want

272
00:18:14,655 --> 00:18:18,295
to use something like the Dunder
method underscore Dunder methods

273
00:18:18,355 --> 00:18:22,845
add, or you're working like with
a game development library, right?

274
00:18:22,945 --> 00:18:27,815
It might make sense to use the
equality Dunder methods for maybe

275
00:18:27,815 --> 00:18:30,025
your collision detection, right?

276
00:18:30,045 --> 00:18:34,995
So Dunder methods bridge the gap
between your custom object and

277
00:18:34,995 --> 00:18:36,475
Python's built in capabilities.

278
00:18:37,140 --> 00:18:41,360
Allowing you to design APIs, an
application that looks really

279
00:18:41,370 --> 00:18:44,140
powerful, but also really easy to use.

280
00:18:44,590 --> 00:18:45,210
Thank you.

281
00:18:45,897 --> 00:18:51,067
Hi, I'll be speaking on the hidden
potential of Python's Dunder method.

282
00:18:51,567 --> 00:18:57,097
About me, I'm a software engineer
with over five years of experience in

283
00:18:57,127 --> 00:18:59,747
working for some companies globally.

284
00:19:00,267 --> 00:19:02,737
I'm very passionate about
sharing knowledge and I do

285
00:19:02,737 --> 00:19:04,627
this through technical writing.

286
00:19:05,257 --> 00:19:11,217
I'm also an active contributor to the
open source community, and socials below.

287
00:19:11,717 --> 00:19:12,897
What a Dunder method.

288
00:19:13,397 --> 00:19:17,687
So before I dive into our
Dunder method, I would like to

289
00:19:17,687 --> 00:19:20,427
just take us a few steps back.

290
00:19:21,317 --> 00:19:25,687
So maybe most of us here have
worked with Python classes and

291
00:19:25,737 --> 00:19:27,687
object oriented programming before.

292
00:19:28,187 --> 00:19:31,427
You've probably written the
double underscore init method

293
00:19:31,727 --> 00:19:33,397
to initialize your object.

294
00:19:33,737 --> 00:19:38,457
Or perhaps you've come across the double
underscore string method while trying to

295
00:19:38,467 --> 00:19:40,487
make your object print something readable.

296
00:19:41,287 --> 00:19:42,397
But let me ask you this.

297
00:19:42,887 --> 00:19:49,157
Did you ever stop and wonder what's really
going on behind those double underscores?

298
00:19:49,697 --> 00:19:52,357
Or are they just some
really quirky convention?

299
00:19:53,097 --> 00:19:56,897
They are part of something much
bigger because they help Python work

300
00:19:56,897 --> 00:20:01,197
the way it does and they make our
code really flexible and powerful.

301
00:20:01,697 --> 00:20:04,547
So imagine you're adding
two numbers in Python.

302
00:20:05,132 --> 00:20:09,342
That's probably simple, like you
write five plus three and Python

303
00:20:09,362 --> 00:20:10,962
instantly knows to return it.

304
00:20:11,652 --> 00:20:15,702
Now, what if you want to add to object
you've created in your own class?

305
00:20:16,222 --> 00:20:20,242
At first, Python might give you
an error, but here's the thing.

306
00:20:20,892 --> 00:20:24,371
You can teach Python how to
understand what's an error.

307
00:20:24,722 --> 00:20:29,152
The plus operator means for your
object, just like it does for number.

308
00:20:29,802 --> 00:20:30,802
How can we do that?

309
00:20:30,832 --> 00:20:32,722
We can do that using the Dunder method.

310
00:20:33,222 --> 00:20:38,912
So this might sound like some really
advanced Python, wizardry thing, but I

311
00:20:38,942 --> 00:20:46,252
promise it's not intimidating as it seems
so, Dunder methods or magic methods,

312
00:20:46,692 --> 00:20:48,912
as often as most people might call it.

313
00:20:49,567 --> 00:20:52,377
They're just basically tools, right?

314
00:20:52,397 --> 00:20:53,927
That built into Python.

315
00:20:54,497 --> 00:20:58,837
They let you define objects, how your
objects should behave when they are

316
00:20:58,847 --> 00:21:06,057
used in familiar ways, like being added
or compared and maybe, subtracted.

317
00:21:06,557 --> 00:21:12,317
So when methods, these methods, aren't
just something really technical.

318
00:21:12,647 --> 00:21:17,017
They're just practical ways to
make your code really clean, smart.

319
00:21:17,517 --> 00:21:18,577
And look like Python.

320
00:21:19,077 --> 00:21:21,267
So for example, think about this.

321
00:21:21,697 --> 00:21:26,627
Have you ever used the length
method function to get the size of

322
00:21:26,937 --> 00:21:28,917
a list of string behind the scene?

323
00:21:29,807 --> 00:21:34,537
Python isn't just automatically
going to know, the length, right?

324
00:21:34,927 --> 00:21:38,417
It's going to call the Dunder
method, double underscore length.

325
00:21:38,837 --> 00:21:42,187
And the same goes for printing an object.

326
00:21:43,027 --> 00:21:48,247
Python calls the double underscore string
method to figure out what to display.

327
00:21:48,637 --> 00:21:53,527
This methods are quietly doing a whole
lot of heavy lifting to make Python feel

328
00:21:53,577 --> 00:21:55,837
as seamless and intuitive as it does.

329
00:21:56,597 --> 00:21:59,337
But here's where the things
get even more exciting.

330
00:21:59,717 --> 00:22:04,676
This Dunder methods aren't just
limited to Python built in types.

331
00:22:04,757 --> 00:22:08,407
You can use them in your own
class to create objects that

332
00:22:08,447 --> 00:22:10,527
feel just as natural to use.

333
00:22:10,757 --> 00:22:12,927
So you imagine building a library.

334
00:22:13,102 --> 00:22:16,182
Where users can treat your
object like they treat the list.

335
00:22:16,682 --> 00:22:21,182
Like the trees list or numbers, they
can add, They can compare, they can

336
00:22:21,192 --> 00:22:26,961
iterate over them without ever having
to read a really complicated API docs.

337
00:22:26,982 --> 00:22:31,652
let me just give you a
glimpse of, how this works.

338
00:22:32,142 --> 00:22:36,922
we've maybe probably worked with
popular libraries like NumPy, In

339
00:22:36,922 --> 00:22:42,772
NumPy, you can add arrays together by
simply using the add operator, like I

340
00:22:42,782 --> 00:22:44,452
should, like I'm showing in the slide.

341
00:22:44,842 --> 00:22:50,042
And then the NumPy uses Donda methods like
the underscore adds to make this happen.

342
00:22:50,642 --> 00:22:55,822
Or maybe, we've probably worked
with the SQL alchemy and it's a

343
00:22:55,822 --> 00:22:57,802
library for working with database.

344
00:22:57,922 --> 00:22:57,942
Yeah.

345
00:22:58,457 --> 00:23:03,007
It's basically helps you, lets
you build SQL queries using Python

346
00:23:03,067 --> 00:23:08,147
comparison operator, like the double
equal to, this is not really just some

347
00:23:08,147 --> 00:23:11,827
hack it's done the methods at play.

348
00:23:11,827 --> 00:23:14,017
So done the methods basically uses the.

349
00:23:14,402 --> 00:23:17,172
Double underscore equal, method.

350
00:23:17,672 --> 00:23:22,872
And now you can see that this library
feels so intuitive because they've really,

351
00:23:23,292 --> 00:23:28,932
yeah, using the power of Python's methods
to blend seamlessly with the language.

352
00:23:29,432 --> 00:23:30,922
so here we see.

353
00:23:31,337 --> 00:23:36,177
that this libraries used on the methods
to integrate Python syntax without

354
00:23:36,177 --> 00:23:41,077
their objects, but they are making
the objects feel very easy to use.

355
00:23:41,577 --> 00:23:47,327
So done the methods goals beyond
using the double underscore in it, or.

356
00:23:47,632 --> 00:23:52,692
The double underscore REPL for creating a
clustering representation of your object.

357
00:23:53,102 --> 00:23:59,052
So we also have, the double underscore
get item, which enables you to get an

358
00:23:59,082 --> 00:24:01,932
index based access of your, objects.

359
00:24:02,632 --> 00:24:08,642
Or we have the double underscore iterate,
I T E R iteration, which basically

360
00:24:08,702 --> 00:24:11,732
helps you or makes your object iterable.

361
00:24:12,282 --> 00:24:16,602
What makes Dunder objects really
exciting is how they give you

362
00:24:16,602 --> 00:24:21,042
ability to control how your objects
behave in nearly any context.

363
00:24:21,292 --> 00:24:24,792
So you can define how they should
respond to arithmetic comparison.

364
00:24:25,652 --> 00:24:27,252
Or even built in function.

365
00:24:27,562 --> 00:24:31,982
And once you understand them, you
realize that they are not just a feature

366
00:24:31,982 --> 00:24:37,382
in Python, they are a very key part
of Python design philosophy, which is

367
00:24:37,382 --> 00:24:39,562
really simplicity and expressiveness.

368
00:24:40,062 --> 00:24:41,632
So now you might be wondering.

369
00:24:42,127 --> 00:24:44,833
Why should I care about Dunder Method?

370
00:24:44,833 --> 00:24:46,527
The answer is very simple.

371
00:24:46,887 --> 00:24:50,607
You are building applications, if
you are building applications, or

372
00:24:50,617 --> 00:24:55,177
libraries, or frameworks, using
Dunder Method can make your code

373
00:24:55,277 --> 00:24:57,357
really intuitive for others to use.

374
00:24:57,767 --> 00:25:02,067
It means like you're writing an API
that feels really natural and familiar

375
00:25:02,297 --> 00:25:05,177
reducing the learning curve for users.

376
00:25:05,417 --> 00:25:09,697
And if you work on your own project,
Dunder methods lets you write code

377
00:25:09,807 --> 00:25:12,307
really cleaner and really usable.

378
00:25:13,027 --> 00:25:20,777
So today we are going to dive into how
this Dunder method works and, we're going

379
00:25:20,777 --> 00:25:27,737
to see how we can use it to, Build our
own, custom class using done the methods.

380
00:25:28,067 --> 00:25:32,787
if you're just a beginner or you already
have some experience working with

381
00:25:32,787 --> 00:25:37,547
Python, this talk is just going to give
you like a really fresh perspective.

382
00:25:38,097 --> 00:25:39,177
how they work.

383
00:25:39,257 --> 00:25:44,857
like I said, there are core features of
Python that allows instances of class to

384
00:25:44,857 --> 00:25:49,857
seamlessly interact with Python's built
in functions and operator of the language.

385
00:25:50,147 --> 00:25:55,077
So the term done that just comes
from the word double underscore,

386
00:25:55,077 --> 00:26:00,877
because this method starts and
end with two underscores, such as

387
00:26:00,897 --> 00:26:03,837
underscore string and underscore in it.

388
00:26:04,687 --> 00:26:08,767
why they may seem mysterious at the
first glance, they are well defined

389
00:26:08,767 --> 00:26:13,757
rules and they are invoked at a
specific time in the Python interpreter.

390
00:26:14,297 --> 00:26:18,897
So at the core, Dunder methods are not
actually magical in the sense of being

391
00:26:18,937 --> 00:26:21,687
mysterious or some very arbitrary thing.

392
00:26:22,197 --> 00:26:23,437
They are methods that are.

393
00:26:23,597 --> 00:26:28,397
in Python's interpreter and and
Python interpreter implicitly

394
00:26:28,487 --> 00:26:32,457
calls them when like a specific
action occurs in your program.

395
00:26:32,457 --> 00:26:36,767
So for example, when you want to
assess the length of an object.

396
00:26:37,267 --> 00:26:40,917
there are some characteristics
of Python's Dunder method, right?

397
00:26:40,927 --> 00:26:44,697
Like I said earlier, it's a built
in, it has double underscore.

398
00:26:45,037 --> 00:26:49,897
you can't Dunder methods are tied to
a specific operation or functions.

399
00:26:50,207 --> 00:26:56,227
So such as like the, double underscore
call or double underscore add, right?

400
00:26:56,227 --> 00:27:01,227
So you can't just come up with your
own, or you can't invent your own

401
00:27:01,497 --> 00:27:05,877
Dunder methods you can't create a class,
for example, like what I did here.

402
00:27:06,452 --> 00:27:09,672
you're done the methods
like create a methods.

403
00:27:09,732 --> 00:27:13,772
And just give me the custom limb,
understand double underscore custom

404
00:27:13,772 --> 00:27:19,472
because in the real sense Python will
not be able to recognize your methods

405
00:27:19,682 --> 00:27:22,812
and they, it will make much sense.

406
00:27:22,882 --> 00:27:23,642
this methods.

407
00:27:24,217 --> 00:27:28,057
You, for you to be able to use Python
standard method, you have to use

408
00:27:28,087 --> 00:27:31,827
what's already existing and you can
find the least of all these methods

409
00:27:31,827 --> 00:27:34,007
in the Python's documentation.

410
00:27:34,557 --> 00:27:38,827
so we're going to create
our own custom class, right?

411
00:27:38,887 --> 00:27:39,837
It's called points.

412
00:27:40,337 --> 00:27:44,247
when we create a custom class
called points, like we, most

413
00:27:44,247 --> 00:27:47,057
of us here do, we, we can.

414
00:27:47,557 --> 00:27:52,127
We already used the double
underscore in it, basically.

415
00:27:52,437 --> 00:27:57,587
And what this does is that it
helps, when we initialize our class.

416
00:27:58,107 --> 00:28:03,087
it's basically, passes or
initializes the object attributes,

417
00:28:03,087 --> 00:28:05,057
what we passed in the constructor.

418
00:28:05,547 --> 00:28:09,297
now We might want to print
out the class, right?

419
00:28:09,307 --> 00:28:10,967
Like print out the class.

420
00:28:11,627 --> 00:28:17,757
And then when we use print automatically,
Python uses the string double

421
00:28:17,767 --> 00:28:21,217
score double underscore string or
double underscore repel metal to

422
00:28:21,217 --> 00:28:25,407
define how this object should be
represented as strings by default.

423
00:28:25,872 --> 00:28:30,482
Python shows this object types
in look type and the location in

424
00:28:30,482 --> 00:28:35,002
memory, which isn't very helpful,
like what we have here in the slides.

425
00:28:35,552 --> 00:28:40,262
to use, to display, more readable, Data.

426
00:28:40,302 --> 00:28:44,822
When we try to print our class, we
can create by, or we can implement

427
00:28:44,822 --> 00:28:49,592
the REPL method to provide like a
more meaningful string representation.

428
00:28:49,942 --> 00:28:54,042
So here we, we added the REPL, method.

429
00:28:54,522 --> 00:29:00,152
And then when we instantiated our
class again and printed out points,

430
00:29:00,432 --> 00:29:02,182
what happened is that we were.

431
00:29:02,922 --> 00:29:10,022
We could see the, a better output,
which is points and two, two and three.

432
00:29:10,522 --> 00:29:14,302
So basically REPL just Python.

433
00:29:14,302 --> 00:29:18,452
When we call the print methods,
Python knows to call REPL and

434
00:29:18,452 --> 00:29:20,532
represent the string in a proper way.

435
00:29:21,402 --> 00:29:22,752
what if we want to add.

436
00:29:23,252 --> 00:29:27,412
We instantiate two classes
that are class twice, right?

437
00:29:27,412 --> 00:29:34,142
So for example, here we have
1 and 2 and we decide to add

438
00:29:34,142 --> 00:29:35,552
these two classes together.

439
00:29:35,942 --> 00:29:36,772
What happens?

440
00:29:37,132 --> 00:29:41,022
We get an error from Python
saying unsupported operand types,

441
00:29:41,312 --> 00:29:44,832
because we actually cannot add
these two classes together.

442
00:29:45,092 --> 00:29:50,822
the way the, add operator works by
default, it works with numbers or string.

443
00:29:51,132 --> 00:29:59,042
So to make the add work with our class,
we have to define the add on the methods.

444
00:29:59,207 --> 00:30:00,437
In our point class.

445
00:30:00,707 --> 00:30:02,777
So let's define the addDundee method.

446
00:30:03,327 --> 00:30:07,697
like you see here, we defined
it and we said, whenever the

447
00:30:08,347 --> 00:30:12,957
plus operator is called, we try
to add the classes together.

448
00:30:13,477 --> 00:30:17,827
And now when we try to instantiate
again, what happens is that we

449
00:30:17,887 --> 00:30:23,437
add the point one and point two
class and we get an actual output.

450
00:30:23,937 --> 00:30:29,287
now we've seen that we've been able
to tell Python how to handle the

451
00:30:29,357 --> 00:30:33,687
plus operator in the, the point
object, because now you can add

452
00:30:33,727 --> 00:30:38,617
both X and Y coordinates of the two
points and return a new point object.

453
00:30:39,117 --> 00:30:45,887
let's look at the plus,
the equal to operator.

454
00:30:45,887 --> 00:30:52,347
we can see that if we try to, like we
instantiated two class, the two objects,

455
00:30:52,357 --> 00:30:54,497
two points object earlier, right?

456
00:30:54,517 --> 00:30:57,727
If we try to compare both
objects together, right?

457
00:30:57,777 --> 00:30:59,547
We see, we try to compare 0.

458
00:30:59,547 --> 00:31:00,077
1 and 0.

459
00:31:00,077 --> 00:31:02,575
2. We got true, but 0.

460
00:31:02,575 --> 00:31:04,067
1 and 0.

461
00:31:04,447 --> 00:31:07,707
3, we got false, right?

462
00:31:08,477 --> 00:31:11,257
we got false for both of them.

463
00:31:11,757 --> 00:31:14,357
And oh, I'm sorry, I
missed something here.

464
00:31:14,357 --> 00:31:20,437
So if we try to instantiate the
point objects twice and compare 0.

465
00:31:20,437 --> 00:31:20,687
1 and 0.

466
00:31:20,687 --> 00:31:24,307
2, we see that it is not equal, right?

467
00:31:24,307 --> 00:31:31,547
So that's because if we don't have
the, don't, equal to method, right?

468
00:31:31,547 --> 00:31:32,687
Equality methods.

469
00:31:32,977 --> 00:31:38,417
So if we define that like we did here, and
we now instant, we try to compare them.

470
00:31:38,427 --> 00:31:39,637
And we see that 0.

471
00:31:39,637 --> 00:31:40,487
1 and 0.

472
00:31:40,487 --> 00:31:41,597
2 methods.

473
00:31:41,977 --> 00:31:45,727
now equal 3 are not equal.

474
00:31:46,227 --> 00:31:51,177
So basically now we've been able to
create, the fact that we created the

475
00:31:51,447 --> 00:31:56,587
equality done the methods now means
that when we use the double equal to,

476
00:31:57,037 --> 00:32:02,697
it now works on our point objects,
comparing X and Y values for equality.

477
00:32:03,197 --> 00:32:04,477
So another.

478
00:32:04,957 --> 00:32:10,627
Methods that we can create is the
double underscore multiplication,

479
00:32:10,717 --> 00:32:12,937
multiple collision, done the methods.

480
00:32:13,357 --> 00:32:19,817
So like you see here, we added
the multiplication methods.

481
00:32:20,147 --> 00:32:27,357
And what this does is that when we
try to multiply our class with, in

482
00:32:27,357 --> 00:32:30,812
number, It brings out an actual output.

483
00:32:31,072 --> 00:32:35,462
So we see that the multiplication operator
now scales the point by multiplying it

484
00:32:35,552 --> 00:32:39,912
our coordinates by the scalar value,
which we passed here and three, which

485
00:32:39,912 --> 00:32:41,692
is the scalar value we passed here.

486
00:32:42,192 --> 00:32:45,912
We can also, yeah, several
done the methods, but another

487
00:32:45,952 --> 00:32:47,992
very interesting one is the.

488
00:32:49,262 --> 00:32:56,662
let's implement this iterator method
to make the point objects iterable.

489
00:32:57,022 --> 00:33:03,462
So you can look through when we call
the, when we implement this method,

490
00:33:03,642 --> 00:33:08,482
what it does basically is that we
can loop over like the coordinates.

491
00:33:08,762 --> 00:33:12,182
So we can see how we, we did that here.

492
00:33:12,182 --> 00:33:12,212
Okay.

493
00:33:13,172 --> 00:33:20,692
but what happened is that now, when we try
to loop over our, point objects, we make

494
00:33:20,692 --> 00:33:23,242
them feel like native Python collections.

495
00:33:23,252 --> 00:33:25,362
So now we can be able
to loop through them.

496
00:33:25,862 --> 00:33:32,112
Um, The next thing I'll be talking
about is why Python Dundun methods

497
00:33:32,202 --> 00:33:34,002
are really interesting to use.

498
00:33:34,412 --> 00:33:38,512
we do not just want to use them
everywhere in our code, right?

499
00:33:38,512 --> 00:33:40,002
We do not want to abuse them.

500
00:33:40,002 --> 00:33:41,572
So, this.

501
00:33:42,072 --> 00:33:46,312
And, I think like we need
to use them when necessary.

502
00:33:46,732 --> 00:33:48,462
So they are really powerful.

503
00:33:48,462 --> 00:33:52,322
And personally, I think like you
should use them thoughtfully.

504
00:33:52,612 --> 00:33:55,832
So you shouldn't like
overuse them or misuse them.

505
00:33:56,172 --> 00:34:00,202
And because they can make the code
really confusing and unpredictable

506
00:34:00,412 --> 00:34:01,842
or probably hard to maintain.

507
00:34:02,282 --> 00:34:06,727
So there are several guides on
where not to use Dunder method.

508
00:34:07,167 --> 00:34:11,647
And, so for example, don't use them
to solve like really simple problems.

509
00:34:11,697 --> 00:34:14,927
So you can see here in our
calculator class, right?

510
00:34:15,167 --> 00:34:16,777
We just had, an add.

511
00:34:17,407 --> 00:34:19,457
we have the Dunder method add.

512
00:34:19,892 --> 00:34:26,512
To multiply, the, to multiply data, to
multiply the values in the calculator.

513
00:34:26,722 --> 00:34:31,002
So this is quite confusing because
we shouldn't use that, if we are

514
00:34:31,012 --> 00:34:35,852
using the ad, it should depicts
adding values together, Another

515
00:34:35,872 --> 00:34:38,072
thing too, is using the call.

516
00:34:38,552 --> 00:34:43,422
like I said earlier, we don't want to,
we don't want to use the, there's a

517
00:34:43,432 --> 00:34:46,312
double underscore call method, right?

518
00:34:46,682 --> 00:34:49,782
We don't want to implement that
in our class because that's

519
00:34:49,782 --> 00:34:51,342
quite unnecessary, right?

520
00:34:51,352 --> 00:34:55,192
It's doing, it's, we might
not really need it, right?

521
00:34:55,212 --> 00:35:00,022
Or imagine implementing a call method
that is actually adding numbers together.

522
00:35:00,212 --> 00:35:01,892
So it doesn't make any sense.

523
00:35:01,902 --> 00:35:04,222
So we want to use Dunder methods.

524
00:35:04,792 --> 00:35:06,912
That depicts the right thing in your code.

525
00:35:06,912 --> 00:35:08,882
So they don't become really confusing.

526
00:35:09,532 --> 00:35:12,372
Also, you do not want to
invent your own dunder methods.

527
00:35:12,402 --> 00:35:16,962
Like I said earlier, if you declare
a dunder method that does not exist

528
00:35:17,002 --> 00:35:22,042
in Python native, in the native
Python, it won't work, right?

529
00:35:22,052 --> 00:35:25,022
It's just going to be like, you're
going to be confusing everyone

530
00:35:25,212 --> 00:35:29,322
because someone can hop on your code
and see it and get confused because

531
00:35:29,362 --> 00:35:30,702
this doesn't really do anything.

532
00:35:30,712 --> 00:35:33,032
instead just use a regular method.

533
00:35:34,002 --> 00:35:39,782
Also, operator, we don't want to make
operator overload and really confusing.

534
00:35:40,212 --> 00:35:46,782
like I said earlier, you don't want to
just, use an add method to, Multiply

535
00:35:47,052 --> 00:35:52,682
several, numbers, you don't want to
use a multiply multiplication, done the

536
00:35:52,682 --> 00:35:55,382
methods to add several numbers, right?

537
00:35:55,852 --> 00:35:59,232
you want to keep it really
consistent and very predictable.

538
00:35:59,732 --> 00:36:03,382
So another thing is that you don't
want to overuse it in your classes.

539
00:36:03,692 --> 00:36:06,942
So you don't want to have
a class that uses all the.

540
00:36:07,302 --> 00:36:11,022
Done the methods just and makes
your class like really confused.

541
00:36:11,032 --> 00:36:13,782
You want to use them only when necessary.

542
00:36:14,442 --> 00:36:18,202
I know that thing is that
you don't want to sacrifice,

543
00:36:18,242 --> 00:36:20,832
readability for cleverness, right?

544
00:36:20,832 --> 00:36:25,332
So if you have a lot of this, done
the methods, your class, it might

545
00:36:25,332 --> 00:36:30,062
look cool, but it might be very
difficult for others to maintain.

546
00:36:30,612 --> 00:36:31,622
in conclusion,

547
00:36:32,122 --> 00:36:36,422
using Dunder Methods It's
really powerful, right?

548
00:36:36,882 --> 00:36:41,822
So we've seen how we're able to combine
Dunder methods to be able to build

549
00:36:42,042 --> 00:36:46,522
the point class earlier and to make
it look really rich and intuitive.

550
00:36:47,022 --> 00:36:52,382
So these are like techniques that you can
use to design objects that makes it feel

551
00:36:52,412 --> 00:36:54,732
really natural in our applications domain.

552
00:36:54,742 --> 00:36:59,552
For example, If you are working with
a graphic library, you might want

553
00:36:59,552 --> 00:37:03,192
to use something like the Dunder
method underscore Dunder methods

554
00:37:03,252 --> 00:37:07,742
add, or you're working like with
a game development library, right?

555
00:37:07,842 --> 00:37:12,712
It might make sense to use the
equality Dunder methods for maybe

556
00:37:12,712 --> 00:37:14,922
your collision detection, right?

557
00:37:14,942 --> 00:37:19,892
So Dunder methods bridge the gap
between your custom object and

558
00:37:19,892 --> 00:37:21,372
Python's built in capabilities.

559
00:37:22,037 --> 00:37:26,257
Allowing you to design APIs, an
application that looks really

560
00:37:26,267 --> 00:37:29,037
powerful, but also really easy to use.

561
00:37:29,487 --> 00:37:30,107
Thank you.

