1
00:00:00,250 --> 00:00:00,700
Hi there.

2
00:00:01,130 --> 00:00:03,850
My name is Nick Manoogian and I'm
the head of engineering at Doppler.

3
00:00:04,720 --> 00:00:08,080
Today, we're going to be talking about
secret ops, but before we talk about

4
00:00:08,080 --> 00:00:09,819
that, I want to talk about software.

5
00:00:10,660 --> 00:00:15,190
Every app has three components, the
code, which is the logic of the app, the

6
00:00:15,190 --> 00:00:19,630
compute, which is what runs the code,
virtual machines, Kubernetes clusters,

7
00:00:19,680 --> 00:00:21,900
serverless functions, things like that.

8
00:00:22,540 --> 00:00:25,450
And then there's secrets, which are the.

9
00:00:25,920 --> 00:00:29,920
Configuration for the app, these
could be sensitive values like API

10
00:00:29,990 --> 00:00:33,709
tokens, encryption keys, or they
could be non sensitive values like

11
00:00:33,709 --> 00:00:35,350
database hosts and port numbers.

12
00:00:35,850 --> 00:00:39,309
I want you to think about the automation
that your org has for each of these three.

13
00:00:40,070 --> 00:00:45,070
For code, we have things like Git
and GitHub and CI for managing the

14
00:00:45,070 --> 00:00:49,240
lifecycle of our applications and
deploying them to where they need to go.

15
00:00:49,839 --> 00:00:56,180
We've got compute like Kubernetes, IAC,
Terraform, and Pulumi that are responsible

16
00:00:56,180 --> 00:00:58,230
for managing how we deploy our code.

17
00:00:58,760 --> 00:00:59,800
And then we've got secrets.

18
00:01:00,300 --> 00:01:01,410
What do we have there, right?

19
00:01:01,420 --> 00:01:05,320
There's usually a native store in
our compute systems for being able to

20
00:01:05,530 --> 00:01:10,320
inject these values, but where is the
Git like maintenance of these values?

21
00:01:10,320 --> 00:01:13,020
Where, how do we, how are we
tracking changes over time?

22
00:01:13,520 --> 00:01:18,299
Every organization has some processes
for managing their secrets, and

23
00:01:18,300 --> 00:01:20,159
we're calling this secret ops.

24
00:01:20,929 --> 00:01:24,809
Every organization is already
doing these things to some extent.

25
00:01:25,295 --> 00:01:30,785
And I'm trying to propose a framework here
for thinking about how you are managing

26
00:01:30,795 --> 00:01:32,895
your secrets on a day to day basis.

27
00:01:33,615 --> 00:01:39,989
I want to make a small disclaimer that
as a Secret Ops tool, we do I don't

28
00:01:40,170 --> 00:01:42,940
have a product in this space and I'm
going to be showing it throughout,

29
00:01:42,970 --> 00:01:46,680
throughout this, this talk, but I am
not trying to sell you on the product.

30
00:01:46,710 --> 00:01:48,400
I want to sell you on the framework.

31
00:01:48,740 --> 00:01:51,420
So this is a layered approach
and these layers don't really

32
00:01:51,420 --> 00:01:53,450
correspond with particular features.

33
00:01:53,700 --> 00:01:55,590
They're more broad categories.

34
00:01:55,630 --> 00:02:00,470
And I think it's useful to think about
these as abstractions for the processes

35
00:02:00,470 --> 00:02:04,480
that you already use today and where
you can improve as an organization.

36
00:02:04,980 --> 00:02:06,710
So let's start at the top with.

37
00:02:07,210 --> 00:02:12,229
I like to tell a story about, my first
job out of school, I was working, at a

38
00:02:12,339 --> 00:02:14,730
shop that was developing an app in Python.

39
00:02:14,770 --> 00:02:17,360
So I cloned the repo, I ran app.

40
00:02:17,370 --> 00:02:21,790
py and I got an error about a missing
API key, the Google Maps API key.

41
00:02:22,395 --> 00:02:27,685
So I went to my manager and he told
me that I should go to Steve for

42
00:02:27,815 --> 00:02:29,655
the ENV file for this, project.

43
00:02:29,655 --> 00:02:33,565
So I went to Steve and he got back to
me after a few minutes over Slack, or I

44
00:02:33,605 --> 00:02:35,635
think maybe it was HipChat at the time.

45
00:02:36,065 --> 00:02:38,054
And, he gave me his ENV file.

46
00:02:38,164 --> 00:02:40,424
I was wondering, do I need
to change any of these?

47
00:02:40,424 --> 00:02:41,754
Are they unique to Steve?

48
00:02:41,934 --> 00:02:45,234
Do I need to update, my,
any of the values in here?

49
00:02:45,664 --> 00:02:48,775
And, how do I add values
to this going forward?

50
00:02:48,784 --> 00:02:51,784
I'm getting, was planning on
integrating with an email service.

51
00:02:51,854 --> 00:02:55,474
And do I just add the
SendGrid API key in here?

52
00:02:55,474 --> 00:02:57,304
How does it make it to
the other developers?

53
00:02:57,874 --> 00:03:01,514
like they absolutely don't know how
to add it for staging and production.

54
00:03:02,334 --> 00:03:05,254
And the point of this is storage
is more than just keeping

55
00:03:05,254 --> 00:03:06,814
secrets in a secure place.

56
00:03:06,874 --> 00:03:09,934
It's about centralizing them to make
sure that everyone knows where to

57
00:03:09,964 --> 00:03:11,844
find them and where to put them.

58
00:03:12,344 --> 00:03:16,644
And this kind of ties to this idea of
sprawl, which is a problem that happens

59
00:03:16,644 --> 00:03:18,704
when there are many secret stores.

60
00:03:18,984 --> 00:03:24,274
And it becomes a little challenging
to know where everything is.

61
00:03:24,274 --> 00:03:27,104
So if you're running your monolith,
you've got secrets for that

62
00:03:27,104 --> 00:03:28,854
stored in AWS Secrets Manager.

63
00:03:29,119 --> 00:03:32,679
But then there's also secrets for
CI that are in GitHub Actions.

64
00:03:32,929 --> 00:03:34,829
And there might be some overlap, right?

65
00:03:34,829 --> 00:03:37,019
There's like a service
that's used in both.

66
00:03:37,029 --> 00:03:39,559
They're both posting messages to Slack.

67
00:03:39,569 --> 00:03:43,179
And pretty quickly you lose confidence
that you understand where all

68
00:03:43,179 --> 00:03:44,609
of your secrets are being used.

69
00:03:44,899 --> 00:03:47,399
And if you find one in the wild,
or if you're trying to rotate

70
00:03:47,399 --> 00:03:50,889
something, you're not quite sure
what's going to happen next.

71
00:03:51,209 --> 00:03:54,639
and that's really the core
problem at this layer is how do

72
00:03:54,639 --> 00:03:56,049
we get a single source of truth.

73
00:03:56,384 --> 00:04:00,594
For where secrets are stored and make sure
that everyone knows where that place is.

74
00:04:01,094 --> 00:04:03,234
So I promise to not sell you on Doppler.

75
00:04:03,534 --> 00:04:07,104
I'm going to try not to, but I do want
to point out how we're thinking about

76
00:04:07,604 --> 00:04:09,464
the problems at each of these layers.

77
00:04:09,494 --> 00:04:13,794
So for the storage layer, this
is how we're thinking about it.

78
00:04:14,434 --> 00:04:17,794
When we're talking about secrets,
we're talking about secrets

79
00:04:17,804 --> 00:04:19,104
for a particular environment.

80
00:04:19,194 --> 00:04:21,894
So I've got a list of secrets
here that are all used to run

81
00:04:21,894 --> 00:04:23,104
the backend project, right?

82
00:04:23,114 --> 00:04:23,254
The app.

83
00:04:23,254 --> 00:04:24,494
py example.

84
00:04:24,954 --> 00:04:27,024
And some of these values are sensitive.

85
00:04:27,214 --> 00:04:28,064
Some of them are not.

86
00:04:28,394 --> 00:04:31,554
And addressing that being
forthright about that is useful.

87
00:04:32,054 --> 00:04:35,384
If I'm a developer and I want to add a
new API key, I know where to put that.

88
00:04:35,444 --> 00:04:38,054
I'm want to make an edit to
the development environment.

89
00:04:38,094 --> 00:04:40,974
So I go to dev and I
add my SendGrid API key.

90
00:04:41,394 --> 00:04:43,434
I like to call out that
this is just a random value.

91
00:04:43,934 --> 00:04:46,484
It's not actually a SendGrid API
key, but you're welcome to try it.

92
00:04:47,084 --> 00:04:51,124
I add that API key, and when I
go back to the project level, I'm

93
00:04:51,124 --> 00:04:54,875
getting warnings in staging and
production that secret is missing.

94
00:04:55,475 --> 00:04:59,135
Because presumably I'm going to commit
some code that requires that secret, and

95
00:04:59,135 --> 00:05:02,299
I don't want to take down these, these
other environments that might need it.

96
00:05:02,830 --> 00:05:05,920
So these are the kind of benefits
that you get from centralized,

97
00:05:06,070 --> 00:05:08,270
from a centralized secret store.

98
00:05:08,620 --> 00:05:12,640
You get this sort of cross sectional
view across environments and projects

99
00:05:12,640 --> 00:05:16,800
as a whole to be able to get this
visibility around the parity that should

100
00:05:16,800 --> 00:05:18,620
exist in these different environments.

101
00:05:19,120 --> 00:05:20,870
Okay, centralization is good.

102
00:05:21,160 --> 00:05:24,050
We've got one store where
everyone is working out of

103
00:05:24,370 --> 00:05:25,860
the next layer is governance.

104
00:05:25,900 --> 00:05:31,140
So it's really up to teams to determine
who should have access to what at Doppler.

105
00:05:31,170 --> 00:05:35,860
No developers have access to the
secrets in any production environment,

106
00:05:36,180 --> 00:05:37,810
but not every org works this way.

107
00:05:37,850 --> 00:05:39,550
There are disadvantages to doing that.

108
00:05:39,940 --> 00:05:43,120
No matter what your policy is, though,
you should be able to set up rules and

109
00:05:43,120 --> 00:05:47,180
your secrets manager to make sure that
you can get access to your values.

110
00:05:47,560 --> 00:05:50,570
And this is particularly important
in onboarding and offboarding.

111
00:05:50,880 --> 00:05:54,810
When a dev joins the team, they
shouldn't need to go find Steve, right?

112
00:05:54,810 --> 00:05:56,410
It shouldn't be a whole thing.

113
00:05:56,620 --> 00:05:59,460
They should get access immediately
to what they need to do their job.

114
00:05:59,850 --> 00:06:03,770
When they leave a team, they should
be able to lose access immediately

115
00:06:03,780 --> 00:06:08,860
without having to, try to claw out
an EMV file from them or having to

116
00:06:09,500 --> 00:06:11,110
track down who has access to what.

117
00:06:11,510 --> 00:06:14,779
it's a, it's an important thing to
be able to grant and revoke access

118
00:06:14,779 --> 00:06:17,379
whenever, you of the handler as well as
other variables or context, assigned,

119
00:06:17,379 --> 00:06:18,301
by user whenever it's required.

120
00:06:18,301 --> 00:06:22,405
And another section of this is, tracking
secrets, just like Git, you wouldn't

121
00:06:22,455 --> 00:06:25,715
ever want to try and develop an app
without being able to see how your

122
00:06:25,715 --> 00:06:27,150
application is changing the context.

123
00:06:27,500 --> 00:06:30,140
Over time, the same is true for secrets.

124
00:06:30,150 --> 00:06:33,890
If you've got a static secret store
and you aren't able to see how changes

125
00:06:33,890 --> 00:06:37,900
are happening over time, there are huge
risks overwriting data could result in

126
00:06:37,900 --> 00:06:39,830
loss that you can't get back that data.

127
00:06:40,190 --> 00:06:43,450
And you're also missing a lot of
auditing information around what's

128
00:06:43,450 --> 00:06:46,890
changed, who changed it, it can make it
very hard to determine what happened.

129
00:06:47,390 --> 00:06:50,740
So I won't show, how we handle
roles and groups in Doppler.

130
00:06:50,740 --> 00:06:54,040
Cause it looks pretty similar to
other tools, but I will show our

131
00:06:54,040 --> 00:06:55,870
audit logs, particularly for writing.

132
00:06:56,370 --> 00:07:02,210
So when you're evaluating, your posture,
in storage and governance, it's useful to

133
00:07:02,210 --> 00:07:06,210
see exactly what's been modified, what it
looked like before and after the change.

134
00:07:06,460 --> 00:07:09,870
And it's also useful to be able to
easily roll back to earlier versions.

135
00:07:09,880 --> 00:07:13,090
So I'm looking at this red green line
diff here for what's been modified.

136
00:07:13,540 --> 00:07:17,260
I can see I've modified, the password
for the database, for example.

137
00:07:17,610 --> 00:07:20,470
And if there was a typo in that,
or I need to roll back to that

138
00:07:20,470 --> 00:07:21,830
earlier version or see what it was.

139
00:07:22,070 --> 00:07:25,950
I can click a rollback button immediately
and jump back to that earlier version.

140
00:07:26,250 --> 00:07:28,890
really useful kind of table stakes.

141
00:07:28,890 --> 00:07:31,510
I'll, if I'm honest, this is
something that everyone should have.

142
00:07:32,010 --> 00:07:35,570
So once you've got, access control
and, you have the ability to roll

143
00:07:35,580 --> 00:07:38,075
back, the last bit of this is being
able to gate that access control.

144
00:07:38,245 --> 00:07:40,145
The ephemeral access that people need.

145
00:07:40,495 --> 00:07:45,365
as I mentioned, nobody at Doppler has
access to the production environment,

146
00:07:45,685 --> 00:07:49,135
but that doesn't mean that they aren't,
that it isn't important to them or,

147
00:07:49,175 --> 00:07:52,235
that it isn't a part of their job to
introduce a change to that environment.

148
00:07:52,655 --> 00:07:57,305
So the way that, this is handled at a
lot of orgs is file a ticket with the

149
00:07:57,305 --> 00:07:58,595
ops team and they'll take care of it.

150
00:07:59,125 --> 00:08:02,005
And one of the things we're
seeing in this space is.

151
00:08:02,355 --> 00:08:06,205
Tools allowing teams to self
serve these sorts of operations.

152
00:08:06,475 --> 00:08:07,905
So instead of just.

153
00:08:08,790 --> 00:08:13,480
I'm just handing this off and hoping
that it gets done, giving developers and,

154
00:08:13,520 --> 00:08:17,910
and folks on these teams, the ability
to submit changes for review, and then

155
00:08:17,910 --> 00:08:23,890
still maintaining control over the
approval and application of these secrets.

156
00:08:24,130 --> 00:08:25,650
So what this looks like in Doppler.

157
00:08:26,180 --> 00:08:27,180
Is a change request.

158
00:08:27,220 --> 00:08:30,660
So instead of making a change
directly to an environment, for this

159
00:08:30,670 --> 00:08:34,490
centigrade API key, for example, as
a developer, I can propose a change.

160
00:08:34,490 --> 00:08:37,600
So I've got three values in each
of these environments that I want

161
00:08:37,610 --> 00:08:39,460
to merge into the backend project.

162
00:08:39,960 --> 00:08:43,080
I can review how this is going
to impact those environments.

163
00:08:43,520 --> 00:08:46,700
I have access to the development and
staging environments, so I can see

164
00:08:46,700 --> 00:08:50,910
exactly what's being changed, but in
production, that's not visible to me.

165
00:08:50,910 --> 00:08:53,280
So all I know is that
there's a new value going in.

166
00:08:53,780 --> 00:08:56,620
Then the team members with approval
access are going to get notified

167
00:08:56,630 --> 00:08:59,920
and they can improve, they're able
to approve individual updates.

168
00:08:59,930 --> 00:09:02,520
So dev and staging, they've
gone ahead and approved that.

169
00:09:02,810 --> 00:09:06,290
And the one for production is
still waiting to be approved.

170
00:09:07,180 --> 00:09:10,710
Once it's approved, either the
author or the approver is able to

171
00:09:10,710 --> 00:09:12,800
apply that into the environment.

172
00:09:12,910 --> 00:09:14,130
So providing a.

173
00:09:14,630 --> 00:09:18,820
You can call it ephemeral access or,
workflows from making modifications

174
00:09:18,830 --> 00:09:19,920
in a more controlled way.

175
00:09:20,420 --> 00:09:22,540
So we've got storage and governance down.

176
00:09:22,920 --> 00:09:27,540
Orchestration is really, where things
start to get interesting because all

177
00:09:27,540 --> 00:09:31,210
the earlier layers are useful, but we're
not really doing much more than storing

178
00:09:31,210 --> 00:09:32,750
secrets in a password manager, right?

179
00:09:32,750 --> 00:09:34,760
Which is exactly what
Steve and I were doing.

180
00:09:35,155 --> 00:09:38,835
At the company that we worked for, so
one password was our source of truth.

181
00:09:38,885 --> 00:09:44,085
And, the orchestration layer
is like the CICD bit, right?

182
00:09:44,095 --> 00:09:46,825
How do you actually deliver these
secrets to where they need to go?

183
00:09:47,205 --> 00:09:49,515
And Steve was responsible for this.

184
00:09:49,565 --> 00:09:52,395
he needed to be super diligent
about making sure that a secret

185
00:09:52,395 --> 00:09:53,785
for staging or production.

186
00:09:54,490 --> 00:09:57,880
Ended up in one password and
he needed to SSH into the

187
00:09:57,880 --> 00:09:59,970
servers and update the secrets.

188
00:10:00,440 --> 00:10:01,000
json file.

189
00:10:01,470 --> 00:10:05,700
And we've absolutely had downtime
because of a copy pasta error or

190
00:10:05,700 --> 00:10:08,040
forgetting to copy it over entirely.

191
00:10:08,040 --> 00:10:11,130
He just added it to one password
and it's been many years since

192
00:10:11,140 --> 00:10:13,450
Steve and I worked together and
their processes have improved.

193
00:10:13,450 --> 00:10:16,928
but this is a real problem
for a lot of businesses.

194
00:10:16,928 --> 00:10:18,825
So how do we solve it?

195
00:10:18,825 --> 00:10:22,358
there are a couple ways to go about
it, but at Doppler, our approach

196
00:10:22,368 --> 00:10:23,783
is to meet you where you are.

197
00:10:24,443 --> 00:10:30,093
So we have a hub and spoke style model,
where we see Doppler as the source of

198
00:10:30,103 --> 00:10:34,623
truth and it's responsible for sinking
secrets to wherever they are consumed.

199
00:10:34,903 --> 00:10:38,303
So let's look at what that looks
like in a couple of different spots.

200
00:10:38,313 --> 00:10:41,953
It's just like the hub and spoke
visualization here, but for

201
00:10:41,953 --> 00:10:43,513
a developer running locally.

202
00:10:43,528 --> 00:10:47,118
And the CLI might be the easiest
spot to consume secrets, right?

203
00:10:47,388 --> 00:10:49,158
they're going to be working in, app.

204
00:10:49,158 --> 00:10:50,248
py, right?

205
00:10:50,248 --> 00:10:53,238
So the CLI is the easy
place to use those things.

206
00:10:53,578 --> 00:10:58,118
In a Kubernetes environment, using
an operator to sync those secrets

207
00:10:58,118 --> 00:11:01,758
into native cluster secrets might
be the easiest way to, to use those.

208
00:11:02,048 --> 00:11:05,628
In an AWS Lambda environment,
Parameter store or secrets

209
00:11:05,628 --> 00:11:07,458
manager might be the right spot.

210
00:11:07,718 --> 00:11:12,138
So treat Doppler as the source
of truth and then be able to sync

211
00:11:12,138 --> 00:11:13,478
secrets to wherever you need them.

212
00:11:13,978 --> 00:11:17,678
And the last bit of this, it's interesting
to talk about is automatic redeployment.

213
00:11:18,138 --> 00:11:21,228
So this is optional, but there
are some really cool benefits

214
00:11:21,238 --> 00:11:23,098
to being able to layer in.

215
00:11:23,533 --> 00:11:24,693
automatic updates.

216
00:11:24,713 --> 00:11:28,213
So the idea here is that you wire up
Doppler with either the Kubernetes

217
00:11:28,213 --> 00:11:32,853
operator or with webhooks to trigger
your builds or redeploy, redeploy your

218
00:11:32,853 --> 00:11:35,193
workloads whenever a secret is modified.

219
00:11:36,033 --> 00:11:39,673
and this is particularly nice in
conjunction with CRs because you're

220
00:11:39,673 --> 00:11:43,943
empowering teams to propose a change,
you approve them, and then they

221
00:11:43,943 --> 00:11:45,493
deploy them when they're ready.

222
00:11:45,923 --> 00:11:49,003
And with this orchestration set up,
there's a, you have a lot more knowledge

223
00:11:49,003 --> 00:11:50,643
around how secrets are being used.

224
00:11:51,048 --> 00:11:54,728
You have confidence that the services
that are relying on these secrets are

225
00:11:54,738 --> 00:11:59,338
actually going to consume the new values
that you are adding to the system.

226
00:11:59,838 --> 00:12:00,828
Move through here.

227
00:12:01,328 --> 00:12:01,638
Great.

228
00:12:01,638 --> 00:12:05,298
So this is definitely where Steve
and I, Could not go further.

229
00:12:05,298 --> 00:12:09,578
We did not have the orchestration layer
and we wanted to rotate secrets and we

230
00:12:09,578 --> 00:12:14,928
talked about doing it, but it just seemed
too risky because there was certainly

231
00:12:14,928 --> 00:12:19,358
some service somewhere that had the key
that we wanted to rotate in secrets.

232
00:12:19,358 --> 00:12:23,628
json and we didn't have the confidence
that we knew where all these things were.

233
00:12:23,658 --> 00:12:26,848
This is the ugly end for
secret sprawl, right?

234
00:12:27,158 --> 00:12:29,608
you really don't want to be in a
position where you're choosing between

235
00:12:29,608 --> 00:12:31,858
security posture and risking your uptime.

236
00:12:32,478 --> 00:12:35,158
So orchestration is the solution to this.

237
00:12:35,548 --> 00:12:38,478
Once orchestration is set up, you
have the confidence that you're able

238
00:12:38,478 --> 00:12:40,198
to rotate a secret whenever you want.

239
00:12:40,208 --> 00:12:44,428
You can just go to SendGrid,
issue a new API key and save it

240
00:12:44,428 --> 00:12:46,368
right back into the application.

241
00:12:46,658 --> 00:12:50,578
They're going to restart either on
the next deploy or automatically,

242
00:12:50,578 --> 00:12:52,498
if you have that set up and.

243
00:12:52,923 --> 00:12:54,893
You can actually take this a step further.

244
00:12:54,893 --> 00:12:57,853
If you have the confidence in your
orchestration, you can actually

245
00:12:57,853 --> 00:12:59,053
go forward and automate this.

246
00:12:59,053 --> 00:13:01,403
So we do have an
integration with SendGrid.

247
00:13:01,413 --> 00:13:02,643
I'm showing here Twilio.

248
00:13:03,143 --> 00:13:07,793
And in this example, we have Doppler
hooked up with Twilio directly, and

249
00:13:07,793 --> 00:13:11,583
it's responsible for issuing and
revoking Twilio API keys that are

250
00:13:11,583 --> 00:13:13,363
going to be consumed in the app.

251
00:13:13,713 --> 00:13:15,103
So I've got a policy here set up.

252
00:13:15,103 --> 00:13:15,603
It's a little.

253
00:13:16,108 --> 00:13:19,948
Small and hard to see here, maybe, but,
policy to rotate every 30 days, or you

254
00:13:19,948 --> 00:13:21,998
can manually rotate in an emergency.

255
00:13:22,968 --> 00:13:27,458
And what's really neat about this is when
you have automatic rotation set up, no

256
00:13:27,458 --> 00:13:30,428
human has ever handled or seen that value.

257
00:13:30,678 --> 00:13:33,678
And I'll talk a little bit more
later around why this is so useful.

258
00:13:33,678 --> 00:13:36,468
But at this stage, you've
got automation set up.

259
00:13:36,478 --> 00:13:40,788
That's coming from the confidence that you
have in your applications, being able to

260
00:13:40,788 --> 00:13:42,588
consume the secrets that they need to run.

261
00:13:42,638 --> 00:13:43,718
That's really the key here.

262
00:13:44,218 --> 00:13:47,768
So every time a secret comes
across the wire, it increases

263
00:13:47,768 --> 00:13:49,758
the chance of a leak, right?

264
00:13:49,818 --> 00:13:52,428
A secret is basically just
a vulnerability, right?

265
00:13:52,448 --> 00:13:53,738
That's like another way to think of it.

266
00:13:53,738 --> 00:13:55,008
It's a portable identity.

267
00:13:55,418 --> 00:13:58,948
And when viewed this way, a
secret read is just as important

268
00:13:58,948 --> 00:14:00,538
as a secret write, right?

269
00:14:00,538 --> 00:14:01,858
We should be tracking these events.

270
00:14:01,858 --> 00:14:03,268
we should be able to audit these things.

271
00:14:03,648 --> 00:14:06,678
And when you're looking at this
data, historically, you can answer

272
00:14:06,678 --> 00:14:09,318
questions like a person left the team.

273
00:14:10,008 --> 00:14:11,528
I need to know every
secret that they've seen.

274
00:14:12,028 --> 00:14:14,138
Are there any services
that are using this key?

275
00:14:14,258 --> 00:14:15,198
Can I revoke this?

276
00:14:15,208 --> 00:14:18,918
Is it safe to do And it can also help
you track down leaks if they do happen.

277
00:14:19,228 --> 00:14:23,098
So you can imagine that secret
that's being rotated every 30 days.

278
00:14:23,128 --> 00:14:28,588
If you find a API key hanging out
somewhere, it should be a pretty

279
00:14:28,588 --> 00:14:32,386
short list of human and non human
identities who had access to that

280
00:14:32,386 --> 00:14:33,933
particular version of the secret.

281
00:14:33,933 --> 00:14:35,481
So let's play through that.

282
00:14:35,481 --> 00:14:37,369
we find this key.

283
00:14:37,599 --> 00:14:40,909
somewhere we know it's like the
password for the database and

284
00:14:40,909 --> 00:14:42,189
it's leaked in the wild, right?

285
00:14:42,629 --> 00:14:46,009
You can do a global search in
Doppler, find where it's being stored.

286
00:14:46,079 --> 00:14:46,319
Okay.

287
00:14:46,319 --> 00:14:49,219
It's being used in the backend
environment, in, in the backend

288
00:14:49,489 --> 00:14:51,589
project in, in production.

289
00:14:52,089 --> 00:14:54,479
So then we can look at the
access logs for that secret.

290
00:14:54,539 --> 00:14:58,399
And for the current version, we
can conclude that only me, Nick,

291
00:14:58,429 --> 00:15:02,989
and these sync bots that are
responsible for syncing this value.

292
00:15:03,294 --> 00:15:08,384
Into Azure vault and, and AWS
secrets manager have seen this value.

293
00:15:08,934 --> 00:15:13,504
So I can conclude it was either Nick
or it was one of these identities.

294
00:15:13,514 --> 00:15:15,674
I should go look at
how they're being used.

295
00:15:15,674 --> 00:15:17,854
I should look at the audit
logs in these services and

296
00:15:17,854 --> 00:15:19,754
track down what happened here.

297
00:15:20,164 --> 00:15:21,404
Super powerful stuff.

298
00:15:21,904 --> 00:15:24,293
So what is secret ops?

299
00:15:24,293 --> 00:15:26,631
It's an automation framework for secrets.

300
00:15:26,631 --> 00:15:28,579
That's really what it is.

301
00:15:29,009 --> 00:15:32,349
You've got Git and GitHub, which
are 15 years old at this point.

302
00:15:32,719 --> 00:15:36,309
You've got Kubernetes and Docker
that are 10 years old at this point.

303
00:15:36,609 --> 00:15:38,799
Where are the tools
for automating secrets?

304
00:15:39,249 --> 00:15:43,079
I'm hopeful that I've convinced you to
take a closer look at this framework

305
00:15:43,089 --> 00:15:46,239
and to look at these layers and
really see where your org stacks up.

306
00:15:47,139 --> 00:15:50,089
Do developers know how and
where to store secrets?

307
00:15:50,519 --> 00:15:52,779
Is access configured in
the way that you want it?

308
00:15:53,239 --> 00:15:55,739
Are secrets delivered to
where they need to go?

309
00:15:55,969 --> 00:16:00,049
And are you able to effectively rotate
secrets and quickly adapt to leaks?

310
00:16:00,959 --> 00:16:03,739
It's worth thinking about and
you've made it to the end.

311
00:16:03,759 --> 00:16:05,319
we're really excited about secrets.

312
00:16:05,339 --> 00:16:07,759
And if you are too, please
feel free to drop us a line.

313
00:16:08,049 --> 00:16:09,489
My email is nickatdoppler.

314
00:16:09,519 --> 00:16:09,939
com.

315
00:16:09,969 --> 00:16:11,289
We would love to hear your feedback.

316
00:16:11,959 --> 00:16:14,129
Thanks again for watching
and hope to see you all soon.

