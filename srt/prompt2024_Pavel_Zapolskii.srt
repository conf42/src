1
00:00:00,400 --> 00:00:01,349
Hello everyone.

2
00:00:01,490 --> 00:00:04,720
Today we'll talk about my favorite
topic, anti fraud platform.

3
00:00:05,210 --> 00:00:09,830
We'll mainly talk about the FinTech
case study, but we'll also talk about

4
00:00:09,840 --> 00:00:14,440
other industry examples and philosophies
about generalized frameworks.

5
00:00:14,940 --> 00:00:19,089
Would be not excessive to say that
I've been working on anti fraud

6
00:00:19,229 --> 00:00:22,500
for more than four years in a
variety of B2C product companies.

7
00:00:23,100 --> 00:00:26,860
I also successfully applied the exact
math that I studied at university

8
00:00:26,889 --> 00:00:31,749
and, Build, effective ML anti fraud
pipelines in Yandex advertisement,

9
00:00:32,279 --> 00:00:35,719
working with the cheaters in
Playrix and fraudsters in Axios.

10
00:00:36,220 --> 00:00:41,879
So the plan for today to begin with,
we look at the example of what fraud

11
00:00:41,940 --> 00:00:43,700
is and why anti fraud is needed.

12
00:00:44,180 --> 00:00:47,810
We're going to analyze payment
fraud in the FinTech industry

13
00:00:47,830 --> 00:00:49,100
and the cheaters in game.

14
00:00:49,950 --> 00:00:52,230
Next, we'll go from simple to complex.

15
00:00:52,860 --> 00:00:57,380
As any ML engineer would think in solving
the problem of anti fraud, what would be

16
00:00:57,380 --> 00:00:59,580
the pitfalls and how to overcome them?

17
00:01:00,300 --> 00:01:04,330
We'll talk about ML system design,
real time processing, and even about

18
00:01:04,339 --> 00:01:08,750
other step in pipeline development
in anti fraud process, except ML.

19
00:01:09,250 --> 00:01:13,499
In the beginning, let's delve
into the concept of anti fraud.

20
00:01:13,999 --> 00:01:17,059
Let's figure out why a
company can benefit from it.

21
00:01:17,559 --> 00:01:21,789
To understand what anti fraud is, first
you need to define the fraud, of course.

22
00:01:22,289 --> 00:01:27,190
Let's say these are customer sections that
are not intended by the company, which

23
00:01:27,250 --> 00:01:29,470
result in deterioration of k metrics.

24
00:01:30,360 --> 00:01:34,290
If the client uses internal inefficiency
of the company's mechanisms, fraud

25
00:01:34,290 --> 00:01:37,090
calls, endogeneous, otherwise exogeneous.

26
00:01:37,925 --> 00:01:42,545
Accordingly, we call anti fraud
mechanism and process that

27
00:01:42,545 --> 00:01:44,755
prevent this malicious action.

28
00:01:45,545 --> 00:01:50,064
I'd say that the fight against fraud can
be fully automated where the decisions

29
00:01:50,384 --> 00:01:55,585
are made based on data and understanding
of the product, but without manual

30
00:01:55,585 --> 00:02:00,155
work, it is almost impossible to leave
the anti fraud platform completely.

31
00:02:00,655 --> 00:02:03,615
The definition though, the
metric was not chosen by chance.

32
00:02:04,405 --> 00:02:08,865
It's convenient for us to formalize
fraud at the set of complex action of

33
00:02:08,865 --> 00:02:14,675
an agent with our internal system, when
eventually has an effect on our metric.

34
00:02:15,025 --> 00:02:20,475
So for a unique user ID, for
our fraudster, we can, compare

35
00:02:20,485 --> 00:02:24,015
the corresponding drop in
money retention and so on.

36
00:02:24,515 --> 00:02:28,135
let's start with a simple example
of fraud in mobile game dev.

37
00:02:28,945 --> 00:02:32,985
usually free to play games are built
with paywalls, a difficult place

38
00:02:32,985 --> 00:02:39,245
where only a very skilled player can
pass through, or they must pay in a

39
00:02:39,245 --> 00:02:41,685
in game stop for additional benefits.

40
00:02:42,514 --> 00:02:46,785
A froster can use some software
to break the game and, bypass

41
00:02:46,815 --> 00:02:48,125
the most difficult levels.

42
00:02:48,665 --> 00:02:51,995
at the same time, if the game has
an online competition with other

43
00:02:51,995 --> 00:02:59,295
participants, they Same player can latch
huge advantage over others, which spoils

44
00:02:59,295 --> 00:03:01,805
impression for the rest people for sure.

45
00:03:02,305 --> 00:03:07,425
Here the key metric of detection
will be number of attempts per level.

46
00:03:07,925 --> 00:03:10,904
How quickly a person
passed a difficult level?

47
00:03:11,405 --> 00:03:13,545
Did it happen on the
first time, for example?

48
00:03:14,355 --> 00:03:16,424
If yes, it's worth to think about it.

49
00:03:16,924 --> 00:03:17,904
Now it's getting a bit harder.

50
00:03:18,454 --> 00:03:23,604
why does any fintech, company
have, so of course the place where

51
00:03:23,634 --> 00:03:27,274
customers money is stored, which
means they're only mechanism.

52
00:03:28,009 --> 00:03:31,859
Also a mechanism for how
this money gets there.

53
00:03:32,669 --> 00:03:37,489
We'll discuss, the study in payments,
a transactional fraud linked to

54
00:03:37,569 --> 00:03:39,779
foreign exchange conversion rates.

55
00:03:39,780 --> 00:03:45,770
Let's imagine that, a techie from
Europe used a, Payment system

56
00:03:45,940 --> 00:03:48,890
to place Euro into USD account.

57
00:03:49,390 --> 00:03:53,870
at the time of submitting the application,
the billing system generate a document

58
00:03:54,140 --> 00:03:55,750
with a fixed price of Euro USD.

59
00:03:56,530 --> 00:03:59,290
However, the person actually
had the right to pay it or not.

60
00:03:59,650 --> 00:04:04,450
Therefore, he has time to see
where the Euro USD rate will move.

61
00:04:04,950 --> 00:04:08,830
if the Euro becomes cheaper, then
a person can make a transaction.

62
00:04:09,220 --> 00:04:13,120
If it becomes more expensive,
then, do not send money at all.

63
00:04:13,180 --> 00:04:14,170
Don't do transaction.

64
00:04:15,150 --> 00:04:19,880
Those, the payment billing creates an
option for the client to buy dollars,

65
00:04:19,880 --> 00:04:24,540
sell errors when, the insurance of
this option costs zero for client.

66
00:04:24,540 --> 00:04:29,490
Actually, all that remains for
the client is just to monitor

67
00:04:29,820 --> 00:04:34,380
the fixed rate and create a fraud
with a positive math expectation.

68
00:04:34,880 --> 00:04:37,450
Okay, let's build an,
automatic anti fraud.

69
00:04:37,480 --> 00:04:39,330
Assume that, we have a.

70
00:04:39,830 --> 00:04:43,640
payment cost metric that takes
into account the money that comes

71
00:04:43,640 --> 00:04:48,780
to us, like in one currency in
Euro or Indian rupee or whatever.

72
00:04:49,280 --> 00:04:54,080
And, which goes to the payment, in
another currency commissions, measure

73
00:04:54,080 --> 00:04:59,339
and, normalizes anality somehow, and many
other indicators, complex, big metric.

74
00:05:00,299 --> 00:05:04,319
We will draw a time series for this
metric with a blue line in time.

75
00:05:05,089 --> 00:05:09,519
Let's take the classic gradient boot
boosting, train the prediction of the

76
00:05:09,569 --> 00:05:14,989
value, train, and predict variance
of time series by autoregression.

77
00:05:15,849 --> 00:05:18,529
And, look at the segments
and people in particular.

78
00:05:19,469 --> 00:05:21,569
draw orange line for a specific segment.

79
00:05:22,379 --> 00:05:27,819
let's call it India by country,
segment, already at that stage, if we

80
00:05:27,819 --> 00:05:32,599
made a good, classical ML prediction
of time series, we can identify

81
00:05:32,629 --> 00:05:34,679
the pitfalls, segment in detail.

82
00:05:35,189 --> 00:05:40,719
now we have a hypothesis that payment
fraud may occurred rupee and dollar.

83
00:05:41,269 --> 00:05:42,259
a few words about ML.

84
00:05:42,269 --> 00:05:43,059
What about ML?

85
00:05:43,659 --> 00:05:48,989
I will be blunt here and, suggest that you
don't waste, your time trying to optimize

86
00:05:49,029 --> 00:05:51,909
neural networks to catch anti fraud.

87
00:05:52,769 --> 00:05:56,169
there is a very simple and,
understandable reason why.

88
00:05:56,949 --> 00:06:02,369
as theory of probability and ML algorithms
in particular work when the same event can

89
00:06:02,389 --> 00:06:04,269
happen many times in similar conditions.

90
00:06:05,214 --> 00:06:09,294
If this is done, then we can create
prop function, build statistic

91
00:06:09,304 --> 00:06:10,884
and make hypothesis, whatever.

92
00:06:11,384 --> 00:06:15,684
Obviously, it is quite difficult
and long to train neural network.

93
00:06:16,024 --> 00:06:18,884
But, it's even harder to make it stable.

94
00:06:19,684 --> 00:06:23,754
And, here I can compare Antifraud
with, crazy gladiatorian arena

95
00:06:24,234 --> 00:06:27,594
in which you never know what
will happen in the next moment.

96
00:06:28,594 --> 00:06:32,604
So the same fraud can have many
different complex variation.

97
00:06:33,054 --> 00:06:38,454
It is very quickly adapt to anti
fraud and therefore neural networks

98
00:06:38,524 --> 00:06:41,634
go bad faster than you set it up.

99
00:06:42,134 --> 00:06:44,624
So better to forget about it here.

100
00:06:45,124 --> 00:06:48,544
At first glance, it's more or less simple.

101
00:06:48,884 --> 00:06:51,874
The model is trained
offline on a data lake.

102
00:06:52,319 --> 00:06:56,499
Kubernetes launch a model
in the persistent pod that

103
00:06:56,499 --> 00:06:58,139
lists the data from Kafka.

104
00:06:58,639 --> 00:07:00,829
this data is a user data.

105
00:07:01,379 --> 00:07:02,379
why is it so easy?

106
00:07:02,609 --> 00:07:07,129
if we don't have heavily loaded
services and, we need only client data.

107
00:07:07,829 --> 00:07:12,174
Technically any ML engineer can
adjust it nowadays, but it's not easy.

108
00:07:12,175 --> 00:07:15,754
In a realistic situation, usually
predicting sometimes is quite a

109
00:07:16,254 --> 00:07:20,794
difficult task, and we need a lot of
different representative data to increase

110
00:07:20,794 --> 00:07:24,314
accuracy, reduce variance also and so on.

111
00:07:24,814 --> 00:07:30,104
In our case, market data is generally
necessary by definition of our fraud.

112
00:07:30,604 --> 00:07:31,174
What then?

113
00:07:31,874 --> 00:07:35,894
then we need a hire of team C
developers who will design an

114
00:07:35,894 --> 00:07:38,154
effective reader of market quotations.

115
00:07:38,954 --> 00:07:44,814
You can imagine how can, How much the
load on services will increase, the

116
00:07:44,834 --> 00:07:46,834
complexity of data security and so on.

117
00:07:47,814 --> 00:07:50,034
it is already worth thinking
about the infrastructure.

118
00:07:50,034 --> 00:07:55,194
So the antifraud system doesn't slow
down the load on the product itself and

119
00:07:55,194 --> 00:07:57,994
the customer do not experience delays.

120
00:07:58,494 --> 00:08:06,014
Therefore, we'll have a market provider
and the aggregator block in our ML design.

121
00:08:06,514 --> 00:08:09,954
In fact, this is an extremely
simplified scheme since

122
00:08:09,964 --> 00:08:11,534
aggregation itself includes many.

123
00:08:12,119 --> 00:08:16,249
processes start from data qualities,
checks and, and a fair architecture

124
00:08:16,279 --> 00:08:21,059
of microservices that allows you to
combine data in convenient tabular

125
00:08:21,079 --> 00:08:23,599
form with the correct timestamp.

126
00:08:24,099 --> 00:08:27,889
What other problem could be,
it's too generalized, isn't it?

127
00:08:28,129 --> 00:08:30,549
Of course, we are trying
to come up with a function.

128
00:08:30,909 --> 00:08:35,069
that, will well reflect the bad
action of customers, but often

129
00:08:35,109 --> 00:08:36,619
an ensemble of model is needed.

130
00:08:37,119 --> 00:08:41,319
You need to clearly understand that
in order to achieve high accuracy in

131
00:08:41,349 --> 00:08:46,279
anti fraud with a decent recall, it's
not enough just to train model well.

132
00:08:46,709 --> 00:08:52,049
It's necessary to study very careful what
kind of fraud you have and associate a

133
00:08:52,049 --> 00:08:54,269
separate set of metrics for each fraud.

134
00:08:54,869 --> 00:08:55,449
accordingly.

135
00:08:56,349 --> 00:09:01,789
So in our example, the generalized
payment cost can be divided into

136
00:09:01,839 --> 00:09:06,659
commission costs, market arbitration,
different platforms, arbitration time,

137
00:09:07,019 --> 00:09:12,149
cost, for, interaction with the payment
system, counterparties and so on.

138
00:09:12,699 --> 00:09:18,764
this, our infrastructure is, expanding
and requires an individual analyst,

139
00:09:18,764 --> 00:09:23,224
data scientist, approach to identify
clusters of metric models that will

140
00:09:23,224 --> 00:09:25,334
give the best accuracy of forecasts.

141
00:09:25,834 --> 00:09:30,074
On the top of answer in the model, you
need to choose the ideal algorithmic

142
00:09:30,264 --> 00:09:35,614
solution that will match your risk
appetite, namely to answer the question,

143
00:09:36,274 --> 00:09:38,524
how often we can make a mistake.

144
00:09:39,024 --> 00:09:42,704
it's time to talk, how to make,
this ensemble perform often.

145
00:09:43,329 --> 00:09:47,529
in the beginning, the SMPU Spark
was, used as a default solution,

146
00:09:47,659 --> 00:09:49,409
but it was, sorely lacking.

147
00:09:50,099 --> 00:09:54,459
Now Trina is used for, modeling and,
computing in my current company,

148
00:09:54,809 --> 00:09:58,789
which shows itself much better due
to, completed work with, memory.

149
00:09:59,289 --> 00:10:04,589
Another option here would be, GPU
Spark calculation, but it's not

150
00:10:04,599 --> 00:10:06,289
trivial to run properly sometimes.

151
00:10:07,279 --> 00:10:11,709
A huge problem, especially in,
transactional and market data is

152
00:10:11,709 --> 00:10:13,629
an uneven load on infrastructure.

153
00:10:14,359 --> 00:10:19,749
So our news, Yeah, we have a,
periods with a high load in our case,

154
00:10:19,749 --> 00:10:23,339
it's in use, but in your company,
it may be a different period.

155
00:10:23,889 --> 00:10:28,499
this period, period with a high priority
at this moments, all prioritization

156
00:10:28,509 --> 00:10:33,580
with all resources is given to the vital
function of, of the product, making

157
00:10:33,580 --> 00:10:38,633
transaction or, Transcription sponsored
by RenaissanceRe Traits, whatever, while

158
00:10:38,633 --> 00:10:43,825
the model, politely receives information,
actually, it's just not efficient

159
00:10:43,825 --> 00:10:46,104
and, we can't calculate it properly.

160
00:10:47,074 --> 00:10:52,354
From this point of view of ML, a
specialist, we have, two solution either

161
00:10:52,384 --> 00:10:54,764
to, intelligently adjust the model.

162
00:10:55,114 --> 00:11:00,444
to the high load intervals, or to make
a separate model, not in real time

163
00:11:00,454 --> 00:11:06,984
that is looking for fraud on the high
load, the second wall of calculation.

164
00:11:07,484 --> 00:11:12,974
In total, we'll have, fast, efficient,
and accurate collection almost always.

165
00:11:13,509 --> 00:11:17,219
But in the most difficult moments of
product, we reduce amount of resources

166
00:11:17,389 --> 00:11:21,939
allocated to anti fraud block and,
either perform in a simple version

167
00:11:21,949 --> 00:11:27,709
without the wasting time and, catching
the big, biggest frauders, the most

168
00:11:27,709 --> 00:11:34,089
painful in terms of metric or recalculate
this entire block into the past a

169
00:11:34,109 --> 00:11:36,519
few minutes after load stabilize.

170
00:11:37,019 --> 00:11:38,959
So a flying support team.

171
00:11:39,509 --> 00:11:44,449
in fact, in fact we come to a very
important part of today's story and, what

172
00:11:44,449 --> 00:11:48,559
about the before and after ML model part?

173
00:11:49,339 --> 00:11:53,329
These are people, analyst and
anti fraud officer standing there.

174
00:11:53,829 --> 00:11:56,079
look at the probability formula, please.

175
00:11:56,229 --> 00:11:56,739
If we.

176
00:11:57,644 --> 00:12:03,994
competently built a pipeline for filtering
good users from frauders from, fraudsters

177
00:12:04,064 --> 00:12:09,394
while, filters will be independent is
just the, with the right processes, we'll

178
00:12:09,394 --> 00:12:15,134
make a huge improvement in accuracy of
the entirely anti fraud platform because

179
00:12:15,134 --> 00:12:22,674
our filters of analytical ML and the
operational team will go independent way.

180
00:12:23,349 --> 00:12:26,309
All different teams have a,
they're all researchers and

181
00:12:26,309 --> 00:12:28,179
thoughts how to capture fraudsters.

182
00:12:28,729 --> 00:12:31,859
let's look at the full
pipeline using an example.

183
00:12:32,639 --> 00:12:37,409
The analytical department signal,
signal that a strange activity was

184
00:12:37,409 --> 00:12:43,279
happening in India, for example,
dropping a little deeper our metric.

185
00:12:44,179 --> 00:12:47,669
and, they noticed that the
people associated with the one

186
00:12:47,669 --> 00:12:51,229
particular payment system had
dropped it significant on average.

187
00:12:51,729 --> 00:12:52,139
Okay.

188
00:12:52,539 --> 00:12:54,149
Now email engineers step into the game.

189
00:12:54,664 --> 00:12:58,514
look at the metric, study data,
predict this metric, and, catch

190
00:12:58,544 --> 00:13:02,124
quantiles from people, with a
particular strange behavior.

191
00:13:02,624 --> 00:13:06,894
After the correct validation of the
model, it became obvious that some

192
00:13:06,894 --> 00:13:08,574
of them can blocked immediately.

193
00:13:09,074 --> 00:13:10,334
These are, molecular fraudsters.

194
00:13:10,834 --> 00:13:14,624
But, in the same part where the
accuracy is, close to average,

195
00:13:14,664 --> 00:13:16,284
ML engineers are not sure.

196
00:13:16,339 --> 00:13:20,429
And, they give, these cases
to the operational team.

197
00:13:20,929 --> 00:13:26,099
they sort out the, borderline cases,
they're digging into the deepest essence

198
00:13:26,139 --> 00:13:31,629
of why the fraud occurred and, making
decision with their heads and hands.

199
00:13:32,129 --> 00:13:32,709
what next?

200
00:13:32,989 --> 00:13:33,389
Monitoring.

201
00:13:33,729 --> 00:13:34,999
Also very important part.

202
00:13:35,499 --> 00:13:39,619
Monitoring both online and offline
metric is crucial to ensure the

203
00:13:39,619 --> 00:13:41,309
system operates efficiently.

204
00:13:41,809 --> 00:13:46,309
One of the most important online
metrics should reflect the

205
00:13:46,309 --> 00:13:47,959
potential business cost of fraud.

206
00:13:48,849 --> 00:13:53,129
such costs related to the
payment system, may help us to

207
00:13:53,189 --> 00:13:55,889
prevent it or calculate, uh.

208
00:13:56,599 --> 00:14:00,769
it an efficient way, in particular
tracking, not just the value, but

209
00:14:00,929 --> 00:14:02,499
also the behavior of the cost.

210
00:14:03,049 --> 00:14:07,159
it can provide the early detection
mechanism for fraud, helping business

211
00:14:07,159 --> 00:14:10,689
to balance fraud prevention, with
the operational team as well.

212
00:14:11,189 --> 00:14:15,559
Offline metric provide a deeper
relation of the model security over

213
00:14:15,589 --> 00:14:18,339
time, given the class imbalance.

214
00:14:19,304 --> 00:14:23,314
Often present in the fraud
detection, metrics like peer oak

215
00:14:23,624 --> 00:14:27,504
and, particularly useful for,
assembling the model's performance.

216
00:14:28,004 --> 00:14:31,184
Additionally, monitoring the
false positive rate is crucial.

217
00:14:31,824 --> 00:14:37,004
as, because we want to minimize false
positives and, we need to maintain.

218
00:14:37,824 --> 00:14:42,514
A positive user experience while,
effectively, fighting against fraud.

219
00:14:43,014 --> 00:14:48,024
And, visualization of this metric
allows to team, analyst on or,

220
00:14:48,074 --> 00:14:53,274
operational team identify, emerging
fraud patterns and, spike activities.

221
00:14:53,774 --> 00:14:56,094
Therefore, as you can see, online metrics.

222
00:14:56,899 --> 00:15:02,109
using visualization and the special tools
go directly to rapid response people

223
00:15:02,149 --> 00:15:08,199
to check complex edge cases, either
when the model is uncertain or where

224
00:15:08,439 --> 00:15:14,239
metrics are contradictory and they need
to, detailed analysis, offline metrics

225
00:15:14,239 --> 00:15:19,149
as usual will help us to determine the
degree of degradation of the model.

226
00:15:20,039 --> 00:15:22,169
And, over time we'll retrain it.

227
00:15:23,019 --> 00:15:23,729
Once we need it.

228
00:15:24,279 --> 00:15:30,179
so thank you for your attention and,
thanks, to, Conf42 for the opportunity

229
00:15:30,229 --> 00:15:32,449
to talk about ML in antifraud.

230
00:15:33,089 --> 00:15:36,899
The main conclusion from my story
can be drawn that, don't need to over

231
00:15:36,899 --> 00:15:42,519
complicate places with the mathematics
that you do not require it while the

232
00:15:42,559 --> 00:15:46,579
proper process approach allows you
to improve the quality of the model.

233
00:15:46,969 --> 00:15:47,979
Multiple times.

234
00:15:48,859 --> 00:15:49,259
Thank you.

