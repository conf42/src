1
00:00:00,500 --> 00:00:03,290
Hello everyone and thank
you for joining me today.

2
00:00:03,340 --> 00:00:08,090
My name is Manoj Kumar Awa, and
I'm really excited to talk about

3
00:00:08,140 --> 00:00:12,030
something that's shaping the
future of AI platform engineering.

4
00:00:12,430 --> 00:00:16,360
Now when I say that phrase, AI
driven platform engineering, it

5
00:00:16,360 --> 00:00:20,580
might sound very technical, but to
be honest, it's a simple question.

6
00:00:21,000 --> 00:00:25,350
And the question is how do we
make the lives of developer easier

7
00:00:25,690 --> 00:00:29,320
while also making systems more
reliable and cost effective?

8
00:00:29,950 --> 00:00:35,260
So in this session, we are going to
explore how the artificial intelligence

9
00:00:35,260 --> 00:00:40,960
and machine learning are stepping in
to help with the challenge and why

10
00:00:40,960 --> 00:00:44,880
it matters, not just for developers,
but for organization as a whole.

11
00:00:45,380 --> 00:00:47,630
So here's what we will be covering today.

12
00:00:48,170 --> 00:00:51,480
We will be beginning with the
evolution of platform engineering.

13
00:00:51,820 --> 00:00:56,770
A little story of how we got here and why
the old ways just don't scale anymore.

14
00:00:57,310 --> 00:01:01,120
Then we will dive into idea of
intelligence infrastructure,

15
00:01:01,120 --> 00:01:06,380
automation what it means, what it
looks like, and why it's so powerful.

16
00:01:06,870 --> 00:01:09,570
After that, I will share a couple
of real world case studies.

17
00:01:10,020 --> 00:01:15,390
Stories of organizations that put into
practice and saw some excellent results.

18
00:01:16,170 --> 00:01:21,930
Then we will talk about how strategies,
architectural choices, and some of the

19
00:01:21,930 --> 00:01:23,960
challenges you need to watch out for.

20
00:01:24,590 --> 00:01:29,500
And finally, I'll wrap up with future
outlook and some practical next steps.

21
00:01:29,860 --> 00:01:34,080
That you can take if you want to explore
this in your own talk, own context.

22
00:01:34,420 --> 00:01:39,050
So let's get started with the story of
how platform engineering has evolved.

23
00:01:39,550 --> 00:01:43,900
So when Platform engineering first
emerged, the mission was simple.

24
00:01:44,280 --> 00:01:49,385
Give developers a standard set of tools so
they could build and ship software more.

25
00:01:50,070 --> 00:01:54,040
Consistently, things like
pipelines, development scripts,

26
00:01:54,040 --> 00:01:55,540
and monitoring dashboards.

27
00:01:55,910 --> 00:01:57,980
And in the early days this was huge win.

28
00:01:57,980 --> 00:01:59,840
Developers had guardrails.

29
00:02:00,180 --> 00:02:03,510
Teams did not need to reinvent
the wheel in a way every time

30
00:02:03,510 --> 00:02:05,410
they want to deploy something.

31
00:02:05,719 --> 00:02:06,829
But then everything grew.

32
00:02:06,829 --> 00:02:11,864
Infrastructure became massive, and we
moved from monoliths to microservices.

33
00:02:12,545 --> 00:02:16,084
We went from managing a few
servers to managing thousands of

34
00:02:16,084 --> 00:02:18,424
containers across multiple regions.

35
00:02:18,824 --> 00:02:21,734
When the cloud came in and
suddenly scale was unlimited.

36
00:02:22,104 --> 00:02:26,384
We all have experienced this, but
so where, we were moving parts.

37
00:02:26,844 --> 00:02:29,244
So this created four major problems.

38
00:02:29,304 --> 00:02:31,074
One is mental overload.

39
00:02:31,404 --> 00:02:35,184
So basically developers now
juggle dozens of dashboards.

40
00:02:35,799 --> 00:02:36,909
Alerts and tools.

41
00:02:37,259 --> 00:02:39,419
Every change means extra mental effort.

42
00:02:39,989 --> 00:02:43,779
And the second one is maintenance
overhead which is platform engineers

43
00:02:43,779 --> 00:02:48,369
spend more time fixing and patching
the system than actually improving it.

44
00:02:48,969 --> 00:02:51,159
And the third is scaling bottlenecks.

45
00:02:51,579 --> 00:02:56,679
Manual work doesn't scale, so if your
app traffic grows 10 times, you can't

46
00:02:56,679 --> 00:02:58,509
just hire 10 times more engineers.

47
00:02:59,009 --> 00:03:00,869
And the fourth one is rising cost.

48
00:03:01,239 --> 00:03:05,829
Cloud is flexible, but if unmanaged,
the bills grows fast then the business.

49
00:03:06,369 --> 00:03:08,889
You have probably seen
this in your own work.

50
00:03:09,049 --> 00:03:14,109
Maybe developer spends an entire
sprint just dealing with, broken bills.

51
00:03:14,419 --> 00:03:19,199
Maybe the platform team spends nights,
firefighting instead of innovating.

52
00:03:19,449 --> 00:03:23,989
This is reality means, teams, this is
the reality that teams live in, actually.

53
00:03:24,269 --> 00:03:25,499
And here's a big question.

54
00:03:25,859 --> 00:03:27,449
How do we escape this cycle?

55
00:03:27,969 --> 00:03:29,989
This is where AI opens a door.

56
00:03:30,239 --> 00:03:34,499
Instead of treating platforms as
things that need constant human

57
00:03:34,499 --> 00:03:38,999
babysitting, we can start to see
them as a intelligent ecosystem.

58
00:03:39,429 --> 00:03:45,624
Like systems that not only automate, but
also learn, anticipate, and also optimize.

59
00:03:46,124 --> 00:03:49,064
Here's a simple analogy
in my point of view.

60
00:03:49,114 --> 00:03:53,584
Thinking like driving a car, the
old way of platform engineering

61
00:03:53,584 --> 00:03:54,904
is driving a, shift car.

62
00:03:55,469 --> 00:03:59,879
Where, in rush hours you need to
change your shifts constantly watching

63
00:03:59,879 --> 00:04:03,769
every mirror and it's very stressful,
but yeah, driven platforms are like

64
00:04:03,819 --> 00:04:08,289
moving to a car with self-driving
features like adaptive cruise control.

65
00:04:08,419 --> 00:04:12,229
It manages avoid hazards and
even suggest the best route.

66
00:04:12,559 --> 00:04:17,389
You still decide the destination, but
the system takers of the heavy lifting.

67
00:04:17,659 --> 00:04:19,929
That's the transition
we are stepping into.

68
00:04:20,429 --> 00:04:22,799
So what's on the other side of the shift?

69
00:04:22,849 --> 00:04:25,249
What's the promise of AI driven platforms?

70
00:04:25,589 --> 00:04:28,439
There are four big benefits
I want to highlight here.

71
00:04:28,779 --> 00:04:33,569
First is the less mental
overload developers can hand off

72
00:04:33,599 --> 00:04:35,279
repetitive and routine tasks.

73
00:04:35,559 --> 00:04:39,919
Think about things like
selecting which test to run or

74
00:04:39,919 --> 00:04:41,119
ruling back after a failure.

75
00:04:41,849 --> 00:04:43,049
Yeah, you can handle that.

76
00:04:43,259 --> 00:04:47,889
Leaving developers free to focus
on actual problem solving skills.

77
00:04:48,219 --> 00:04:49,779
Second, faster delivery.

78
00:04:50,139 --> 00:04:54,519
With automations moving out,
bottlenecks and deployments move

79
00:04:54,519 --> 00:04:58,149
quicker and with fewer errors
instead of, stressful once a week.

80
00:04:58,149 --> 00:05:01,899
Release, teams can deploy more
times a day with more confidence.

81
00:05:01,929 --> 00:05:05,279
And third is a self-managing
infrastructure.

82
00:05:05,549 --> 00:05:11,039
Imagine a system that notices a service
is slowing down so it adjusts itself

83
00:05:11,039 --> 00:05:15,539
automatically and fixes the problem
without anyone needing to log in.

84
00:05:15,719 --> 00:05:20,529
That's no longer a really a science
fiction, it's becoming real and

85
00:05:20,859 --> 00:05:23,319
fourth, a better developer experience.

86
00:05:23,904 --> 00:05:26,514
Developers don't want
to fight these tools.

87
00:05:26,794 --> 00:05:30,684
They want platforms that are
responsive and even helpful.

88
00:05:31,024 --> 00:05:34,174
AI can create these environments
that really adapt to the way

89
00:05:34,174 --> 00:05:36,544
individuals and teams work best.

90
00:05:37,504 --> 00:05:38,554
And here's a key point.

91
00:05:38,894 --> 00:05:42,134
This isn't just about
efficiency, it's about people.

92
00:05:42,414 --> 00:05:46,939
Happier developers, write better code
teams with less frustration, move faster.

93
00:05:46,939 --> 00:05:49,399
And organizations that their developers.

94
00:05:49,859 --> 00:05:51,749
Gain a real competitive edge.

95
00:05:52,019 --> 00:05:55,294
That's the true promise of AI
driven platform engineering.

96
00:05:55,794 --> 00:06:00,624
Now that we have talked about promise
of AI driven platforms, the natural

97
00:06:00,624 --> 00:06:02,934
question is how does this actually work?

98
00:06:03,334 --> 00:06:05,674
So at a higher level, there
are five building blocks.

99
00:06:05,924 --> 00:06:10,444
First one is smaller, CID
smarter, C-I-D-C-I-C-D pipelines.

100
00:06:10,724 --> 00:06:12,734
Second one is predictive analysis.

101
00:06:13,184 --> 00:06:18,314
Third is automated remediation, and
fourth is dynamic resource optimization

102
00:06:18,314 --> 00:06:20,774
and intelligent observ observability.

103
00:06:21,164 --> 00:06:23,054
So these are the five pillars.

104
00:06:23,294 --> 00:06:27,904
Think of them as the toolkit that
transforms transact a traditional

105
00:06:27,904 --> 00:06:32,544
platform into one of the, that can learn,
adapt, and that can improve over time.

106
00:06:32,934 --> 00:06:35,654
So let's get deeper into each of these.

107
00:06:36,154 --> 00:06:39,244
So traditional p pipelines
are rigid, right?

108
00:06:39,274 --> 00:06:42,364
They treat every build and
deployment the same way.

109
00:06:42,709 --> 00:06:46,249
Whether the change is small or
huge, the pipelines are on the

110
00:06:46,249 --> 00:06:50,719
same long process that wastes time
and also create more problems.

111
00:06:51,109 --> 00:06:54,949
So with AI pipelines becoming
smarter, they can analyze codes

112
00:06:54,949 --> 00:06:58,939
and decide which tests actually
matter and skip irrelevant ones.

113
00:06:59,249 --> 00:07:01,619
They can also predict deployment risks.

114
00:07:01,939 --> 00:07:06,679
So if something looks wrong after release,
they can also roll back automatically

115
00:07:06,919 --> 00:07:08,779
before even customer even notices.

116
00:07:09,389 --> 00:07:13,289
And they can handle dependency
checks and scru scans without

117
00:07:13,319 --> 00:07:14,849
any extra manual effort.

118
00:07:15,359 --> 00:07:17,429
Think of it like a chef in a kitchen.

119
00:07:17,709 --> 00:07:21,699
A traditional pipeline is like
following the same 10 step recipe

120
00:07:21,699 --> 00:07:23,889
every time, no matter what the dishes.

121
00:07:24,289 --> 00:07:27,739
And a smart pipeline is like a
chef who knows which step really

122
00:07:27,739 --> 00:07:29,479
matters for this specific meal.

123
00:07:29,749 --> 00:07:35,129
Saving time reduces mistakes, and also
deliver food faster and more reliability.

124
00:07:35,724 --> 00:07:40,284
So organizations that actually adopt
this are reporting higher success rate

125
00:07:40,594 --> 00:07:43,174
fewer failed deployments and fast cycles.

126
00:07:43,444 --> 00:07:46,894
That's a big win for both
developers and customers.

127
00:07:47,394 --> 00:07:52,004
Now let's talk about predictive
analysis and incident resolution.

128
00:07:52,314 --> 00:07:54,474
The traditional way is reactive.

129
00:07:54,894 --> 00:07:58,134
Something breaks, the pager goes
off, engineer rushes in, and

130
00:07:58,134 --> 00:07:59,664
you, you need to work in a night.

131
00:08:00,114 --> 00:08:00,804
To fix it.

132
00:08:00,924 --> 00:08:02,724
We all know how stressful it is.

133
00:08:03,064 --> 00:08:07,714
So AI allows us to flip that into
a proactive model so it can spot,

134
00:08:07,714 --> 00:08:09,724
usual patterns in system behavior.

135
00:08:10,054 --> 00:08:13,814
It can perform root cause
analysis shifting through logs and

136
00:08:13,814 --> 00:08:15,194
metrics much faster than a human.

137
00:08:15,929 --> 00:08:18,990
And it call, it can also
suggest fixes or even apply them

138
00:08:19,049 --> 00:08:21,150
automatically if they're safe.

139
00:08:21,150 --> 00:08:26,280
And it's a routine task as the perfect
example could be a CP utilization

140
00:08:26,710 --> 00:08:31,390
where a system automatically
identifies it and increases the CPU

141
00:08:31,520 --> 00:08:33,950
code memory to that specific process.

142
00:08:34,550 --> 00:08:38,510
And it can filter alerts, reducing
the noise, and highlighting

143
00:08:38,510 --> 00:08:39,800
only what actually matters.

144
00:08:40,300 --> 00:08:44,910
So for engineers, this means fewer
false alarms and less wasted time.

145
00:08:45,270 --> 00:08:49,020
And for business it means less
downtime and faster recovery.

146
00:08:49,860 --> 00:08:53,870
So to correlate the perfect
example is again, imagine your car.

147
00:08:53,900 --> 00:08:57,560
The traditional approach is driving
until the engine light comes

148
00:08:57,560 --> 00:08:59,630
on, then rushing to a mechanic.

149
00:08:59,940 --> 00:09:03,600
Whereas the predictive analysis is
having sensors that warn you a week

150
00:09:03,600 --> 00:09:05,480
earlier, hey, your oil is running low.

151
00:09:05,730 --> 00:09:09,620
Schedule a quick service that that
early warning prevents a breakdown.

152
00:09:09,920 --> 00:09:13,270
That's the power of ai bringing
to this incident resolution.

153
00:09:13,770 --> 00:09:14,060
Okay.

154
00:09:14,560 --> 00:09:19,280
So one of the biggest hidden
challenges in cloud computing is cost.

155
00:09:19,730 --> 00:09:23,900
We often overprovision resources just
to be safe, which means, we pay for

156
00:09:23,900 --> 00:09:26,300
capacity that we really don't use.

157
00:09:26,640 --> 00:09:28,770
Machine learning helps us tackle this.

158
00:09:29,040 --> 00:09:33,130
How does it do it does it by
analyzing past usage patterns.

159
00:09:33,575 --> 00:09:37,235
Forecasting future demand and
automatically adjusting resources

160
00:09:37,535 --> 00:09:42,215
or down to match the actual needs
and learning from the outcomes

161
00:09:42,215 --> 00:09:43,955
to improve accuracy over time.

162
00:09:44,415 --> 00:09:46,095
These results are really impressive.

163
00:09:46,635 --> 00:09:51,915
Companies have seen 15 to 30% savings
in cloud costs while maintaining

164
00:09:52,575 --> 00:09:54,455
or even improving performance.

165
00:09:54,885 --> 00:09:57,495
So let me give you a simple analogy here.

166
00:09:57,885 --> 00:10:00,435
Imagine if your home
electricity automatically

167
00:10:00,435 --> 00:10:02,115
adjusts based on your habits.

168
00:10:02,455 --> 00:10:03,415
Lights dim.

169
00:10:03,485 --> 00:10:06,125
When you leave a room,
ac adjusts, et cetera.

170
00:10:06,435 --> 00:10:08,385
Appliances run at off peak cars.

171
00:10:08,775 --> 00:10:10,935
You would say money
without even noticing it.

172
00:10:11,205 --> 00:10:15,135
And that's what machine learning
powered resource optimization does at a

173
00:10:15,135 --> 00:10:17,335
scale for this kind of infrastructure.

174
00:10:17,835 --> 00:10:21,305
Now let's see this in action
with with real examples.

175
00:10:21,635 --> 00:10:24,935
So let's assume there is a gl,
a global financial services

176
00:10:24,935 --> 00:10:26,645
company that was struggling.

177
00:10:26,925 --> 00:10:28,575
Their deployments were slow.

178
00:10:28,735 --> 00:10:31,495
Production incidents were
frequent and cost for climbing.

179
00:10:31,795 --> 00:10:36,070
So in a business where every second
of downtime can affect trust and

180
00:10:36,070 --> 00:10:38,515
revenue, that's a very serious issue.

181
00:10:38,905 --> 00:10:40,430
And here's what they need.

182
00:10:41,105 --> 00:10:43,925
They implemented predictive scaling.

183
00:10:44,175 --> 00:10:48,105
They deployed machine learning,
analogy detection, and they built

184
00:10:48,165 --> 00:10:52,435
intelligent deployment pipelines
with safe and staged rollouts.

185
00:10:52,865 --> 00:10:54,755
So the results speak for themselves.

186
00:10:54,965 --> 00:10:59,945
So by implementing these things they
deployment speed increased by 65%.

187
00:11:00,315 --> 00:11:06,375
Production incidents dropped by 42%, and
infrastructure costs went down by 22%.

188
00:11:07,060 --> 00:11:10,270
Even though they were handling
more transactions, this shows

189
00:11:10,270 --> 00:11:12,040
that AI isn't just a buzzword.

190
00:11:12,310 --> 00:11:17,590
It can really deliver concrete, measurable
improvements in speed, reliability, and

191
00:11:17,590 --> 00:11:20,250
cost, even in high stake industries.

192
00:11:20,940 --> 00:11:22,890
I would like to take another example.

193
00:11:23,245 --> 00:11:27,265
Here there is a fast
growing e-commerce platform.

194
00:11:27,605 --> 00:11:32,675
Their main challenge was scaling, so they
need to support hundreds of developers,

195
00:11:32,675 --> 00:11:36,185
but they couldn't just keep, hiring
more people for the platform team.

196
00:11:36,735 --> 00:11:41,115
Their solution was AI driven
self-service platform with AI assisted

197
00:11:41,115 --> 00:11:43,365
configuration so developers could handle.

198
00:11:43,840 --> 00:11:49,120
Set up themselves and smart
observability that not only monitored,

199
00:11:49,120 --> 00:11:53,050
but also, auto troubleshoot common
issues that they see in a, in, in,

200
00:11:53,140 --> 00:11:54,460
in a very frequent daily basis.

201
00:11:54,960 --> 00:11:58,890
And machine learning powered
scaling to handle huge spikes

202
00:11:59,020 --> 00:12:00,430
during shopping seasons.

203
00:12:00,820 --> 00:12:05,290
And the results are the platform team
supported three times more developers

204
00:12:05,530 --> 00:12:07,210
without adding any headcount.

205
00:12:07,610 --> 00:12:09,200
That's the real story of ai.

206
00:12:09,510 --> 00:12:11,520
It scales people's impact.

207
00:12:11,800 --> 00:12:15,360
It lets smaller teams achieve
big results without, burning out.

208
00:12:16,125 --> 00:12:19,425
So we have talked about all this,
next we will be looking into

209
00:12:19,455 --> 00:12:21,285
this implementation strategy.

210
00:12:21,525 --> 00:12:25,665
So how do we start bringing AI
into your own platform engineering?

211
00:12:26,065 --> 00:12:29,005
Here are some of the practical strategies.

212
00:12:29,245 --> 00:12:31,165
The first one is start small.

213
00:12:31,505 --> 00:12:34,205
So don't try to automate
everything at once.

214
00:12:34,455 --> 00:12:38,835
Pick a high value, low risk area like
test optimization or auto scaling.

215
00:12:39,660 --> 00:12:43,080
This way, you know what you're
getting into and get used

216
00:12:43,080 --> 00:12:45,060
to it and build the trust.

217
00:12:45,600 --> 00:12:49,440
So next is build a strong data foundation.

218
00:12:49,950 --> 00:12:54,960
AI is only as good as the data it
sees, so make sure all your logging

219
00:12:54,960 --> 00:12:57,205
metrics and observability are solid.

220
00:12:57,475 --> 00:13:00,475
Without data, AI can't
make any good decisions.

221
00:13:00,975 --> 00:13:02,685
So next is use feedback loops.

222
00:13:03,535 --> 00:13:06,205
In the beginning, let
human review AI decisions.

223
00:13:06,235 --> 00:13:09,845
For example, if the system
recommends scaling down resources,

224
00:13:10,085 --> 00:13:11,315
let an engineer approve it.

225
00:13:11,645 --> 00:13:14,400
As trust builds, you can
always increase the automation.

226
00:13:14,900 --> 00:13:17,210
So increase automation gradually.

227
00:13:17,450 --> 00:13:19,280
Think of it like learning to swim.

228
00:13:19,280 --> 00:13:19,760
At first.

229
00:13:19,760 --> 00:13:21,650
You keep one feet on the ground.

230
00:13:21,920 --> 00:13:24,440
I know as you get more
confidence, you get deeper.

231
00:13:24,650 --> 00:13:25,640
Same with ai.

232
00:13:25,820 --> 00:13:29,180
Start with recommendations,
then semi-automation, and then

233
00:13:29,180 --> 00:13:30,830
followed by the full automation.

234
00:13:31,410 --> 00:13:34,500
And remember, this isn't just
technical, it's cultural.

235
00:13:34,810 --> 00:13:37,225
Teams need to see value, not just change.

236
00:13:38,210 --> 00:13:42,050
Share success stories internally,
highlight time saved, and celebrate

237
00:13:42,050 --> 00:13:45,490
the wins, that helps people
embrace the real journey here.

238
00:13:45,990 --> 00:13:48,220
So when you design AI driven platforms.

239
00:13:48,665 --> 00:13:50,075
Architecture really matters.

240
00:13:50,075 --> 00:13:55,855
Four principles stand out are,
modularity build AI as plugin components.

241
00:13:55,855 --> 00:13:59,495
Don't just rip and replace all
your whole stack, that's gonna burn

242
00:13:59,495 --> 00:14:01,465
your arms and your energy more.

243
00:14:02,225 --> 00:14:04,145
So second one is explainability.

244
00:14:04,365 --> 00:14:08,065
Make sure people can see
why AI made a decision.

245
00:14:08,345 --> 00:14:09,305
Transparency.

246
00:14:09,355 --> 00:14:10,555
Transparency builds a trust.

247
00:14:11,200 --> 00:14:15,640
Fallback mechanisms always have
manual overhead options so human

248
00:14:15,640 --> 00:14:17,320
can step in whenever needed.

249
00:14:18,160 --> 00:14:19,030
Continuous learning.

250
00:14:19,030 --> 00:14:23,530
Let this system improve with every
outcome and a piece of feedback.

251
00:14:23,810 --> 00:14:27,350
Think of it like, hiring a new
team member at first, obviously you

252
00:14:27,350 --> 00:14:31,160
don't give the entire access, they
explain their reasoning, you double

253
00:14:31,160 --> 00:14:34,970
check their work, and over time
you trust them with more autonomy.

254
00:14:35,280 --> 00:14:36,060
That's how.

255
00:14:36,435 --> 00:14:39,525
We should approach AI in in
platform engineering as well.

256
00:14:40,025 --> 00:14:44,135
Of course, like any, in any other
technologies, we do have some of

257
00:14:44,135 --> 00:14:47,945
the challenges and some of the
technical challenge challenges

258
00:14:47,945 --> 00:14:53,175
could be like, data quality issues,
integrity with older systems, keeping

259
00:14:53,175 --> 00:14:57,345
models up to date, and also meeting
security compliance requirements.

260
00:14:57,805 --> 00:15:00,385
And there are also some of
the organizational challenges.

261
00:15:00,760 --> 00:15:04,840
Which most of the organizations
obviously do notice this, we, that is

262
00:15:04,840 --> 00:15:07,050
a skill gap in AI and machine learning.

263
00:15:07,470 --> 00:15:11,150
And and for the existing employees
it is always a resistance to change

264
00:15:11,450 --> 00:15:15,860
and concerns about losing control
and difficulty managing really.

265
00:15:16,550 --> 00:15:18,900
ROI, beyond just cost savings.

266
00:15:19,300 --> 00:15:23,910
So do, how do we actually overcome these
problems is with a balanced approach.

267
00:15:23,910 --> 00:15:26,160
Invest in upskilling like trainings.

268
00:15:26,310 --> 00:15:31,500
Start with small pilots, communicate
clearly about what AI will and

269
00:15:31,500 --> 00:15:35,670
won't do, and always combine
automation with the human oversight.

270
00:15:36,180 --> 00:15:39,990
So if you address both the
technical and cultural sides,

271
00:15:40,330 --> 00:15:42,160
adoption becomes much smoother.

272
00:15:42,660 --> 00:15:48,300
So I just want to key recap in
know a big Tk K key takeaways here.

273
00:15:48,640 --> 00:15:51,520
AI is transforming platform engineering.

274
00:15:51,890 --> 00:15:55,960
It's creating more scalable resilient
and developer friendly systems.

275
00:15:56,390 --> 00:16:00,660
So start small and scale
gradually, begin with pilots

276
00:16:00,660 --> 00:16:03,570
that solve clear pain problems.

277
00:16:04,410 --> 00:16:08,260
Gradually expand measure
impact on developer experience.

278
00:16:08,570 --> 00:16:11,660
Success isn't just about
uptime or dollar sale.

279
00:16:11,960 --> 00:16:16,010
It's about, making developers'
lives better so they can be more

280
00:16:16,010 --> 00:16:19,760
creative, productive, and do
the actual innovative solutions.

281
00:16:20,240 --> 00:16:24,710
That's the lens through which we should
match, measure the progress of the ai.

282
00:16:25,210 --> 00:16:27,670
So some of the recommendations are here.

283
00:16:27,985 --> 00:16:30,385
You should always assess
your current platform.

284
00:16:30,385 --> 00:16:33,385
Where could AI make a quick,
meaningful difference?

285
00:16:33,815 --> 00:16:35,825
So evaluate your observability.

286
00:16:36,015 --> 00:16:39,615
Do you have the data foundation
AI that needs to learn?

287
00:16:39,945 --> 00:16:42,345
And the next one is, build a roadmap.

288
00:16:42,685 --> 00:16:44,395
Plan progressive implementation.

289
00:16:44,395 --> 00:16:50,095
Start with small wins and invest in
people upskilling your platform teams

290
00:16:50,275 --> 00:16:52,375
in AI and ML for infrastructure.

291
00:16:52,405 --> 00:16:53,785
This is very much needed.

292
00:16:53,860 --> 00:16:56,140
For the continue progress improvement.

293
00:16:56,600 --> 00:17:01,200
So if you do thi if you do these
things you will move from theory to

294
00:17:01,230 --> 00:17:03,830
practice in a safe sustainable way.

295
00:17:04,310 --> 00:17:05,360
And thank you.

296
00:17:05,660 --> 00:17:09,540
I really enjoyed, talking about
this and hope you implement in your

297
00:17:09,610 --> 00:17:11,530
environments and see the big difference.

298
00:17:11,900 --> 00:17:13,310
Thank you for joining me today.

