1
00:00:00,500 --> 00:00:01,160
Hello everyone.

2
00:00:01,660 --> 00:00:02,590
Thank you for joining.

3
00:00:03,090 --> 00:00:06,910
My name is NH Kku ti and I'm
a cybersecurity professional

4
00:00:06,910 --> 00:00:11,680
with experience in securing
cloud platforms, data protection

5
00:00:12,070 --> 00:00:15,310
applications, APIs, and AI workloads.

6
00:00:15,810 --> 00:00:19,800
Over the past decade, I've been
deeply involved in securing

7
00:00:20,130 --> 00:00:23,825
enterprise scale systems across
multicloud AWS Azure and GC.

8
00:00:24,075 --> 00:00:24,135
P.

9
00:00:24,635 --> 00:00:29,164
Over the years I've specialized in
embedding security directly into

10
00:00:29,164 --> 00:00:33,705
the development and deployment
process, what we now call DevSecOps.

11
00:00:34,205 --> 00:00:39,215
I've had the opportunity to design and
implement automated security pipelines

12
00:00:39,695 --> 00:00:44,715
where these pipelines that deliver
compliance checks, vulnerability scanning.

13
00:00:45,300 --> 00:00:49,560
Real time threat detection and
robust data security controls.

14
00:00:50,060 --> 00:00:56,290
My work has focused on making security
scalable and repeatable so that controls

15
00:00:56,380 --> 00:01:01,630
are not dependent on manual checks, are
manual reviews, but are codified into

16
00:01:01,630 --> 00:01:08,730
CSCD pipelines, giving faster feedbacks
feedback while maintaining exactly this.

17
00:01:09,360 --> 00:01:11,070
Strong compliance and protection.

18
00:01:11,570 --> 00:01:16,970
My work has focused not just
on vulnerability reduction or

19
00:01:16,970 --> 00:01:22,120
vulnerability remediation, but also
on ensuring data protection and

20
00:01:22,120 --> 00:01:28,480
privacy compliance, aligning within
the frameworks we use PCI or CIS

21
00:01:28,480 --> 00:01:31,870
benchmarks, or NIST and GDPR, et cetera.

22
00:01:32,370 --> 00:01:37,900
I've also contributed to API and data
security initiatives within Akamai.

23
00:01:38,900 --> 00:01:43,580
Defining strategies for sensitive data
handling, tokenization, safeguarding

24
00:01:43,830 --> 00:01:47,375
privacy safeguards while onboarding
workloads for continuous monitoring.

25
00:01:47,875 --> 00:01:52,539
I've also worked on ai security
initiatives applying policies and

26
00:01:52,539 --> 00:01:59,089
maintaining monitoring to safeguard
AI models and protecting AI models

27
00:01:59,089 --> 00:02:03,799
and data and workloads from a new
or evolving or emerging threats.

28
00:02:03,849 --> 00:02:10,089
Today's talk building pro proof pipelines,
security as code for platform engineering.

29
00:02:11,079 --> 00:02:12,789
It focuses on a challenge.

30
00:02:12,789 --> 00:02:18,149
I have repeatedly encountered security,
data protection and privacy too

31
00:02:18,149 --> 00:02:24,019
often treated as a final gate instead
of being embedded from the start.

32
00:02:24,519 --> 00:02:31,269
That's why I have been passionate about
the promoting security as code, a cultural

33
00:02:31,389 --> 00:02:34,959
and technical shift where policy scans.

34
00:02:35,394 --> 00:02:38,844
Data protection and compliance
checks are codified and

35
00:02:38,904 --> 00:02:41,544
automated inside the pipeline.

36
00:02:42,044 --> 00:02:49,984
This not only improves security postures
and privacy controls, but also a

37
00:02:49,984 --> 00:02:55,904
accelerates innovation, making security an
enabler, not a not instead of a blocker.

38
00:02:56,404 --> 00:02:58,454
So that's a bit about who I am.

39
00:02:59,299 --> 00:03:01,129
And why this topic matters to me.

40
00:03:01,399 --> 00:03:05,899
Let's take a quick look
at what we'll cover today.

41
00:03:06,169 --> 00:03:07,909
So you know exactly where we had added

42
00:03:08,409 --> 00:03:11,229
the dual L mandate of
platform engineering.

43
00:03:12,009 --> 00:03:15,419
Platform Engineering teams today
feels a dual responsibility

44
00:03:15,919 --> 00:03:20,659
delivering infrastructure and
applications at scale with speed while

45
00:03:20,659 --> 00:03:22,864
ensuring security and compliance.

46
00:03:23,364 --> 00:03:28,584
Business stakeholders demands rapid
innovation, faster development

47
00:03:29,014 --> 00:03:31,694
deployments and continuous delivery.

48
00:03:32,624 --> 00:03:39,374
Whereas while regulators and
security and customers expect secure

49
00:03:40,094 --> 00:03:42,674
compliant and resilient platforms,

50
00:03:43,174 --> 00:03:45,589
this tension creates a friction.

51
00:03:46,089 --> 00:03:51,759
Developers want agility, and while
security teams emphasize control, security

52
00:03:51,759 --> 00:03:54,609
as a code aims to bridge this gap,

53
00:03:55,109 --> 00:03:56,069
I have one use case.

54
00:03:56,569 --> 00:04:00,289
Consider a service deployment
pipeline where applications

55
00:04:00,289 --> 00:04:02,269
needs to scale on demand.

56
00:04:03,124 --> 00:04:08,754
By embedding security scanning
directly into the CSCD workflow teams

57
00:04:08,754 --> 00:04:14,514
can identify vulnerabilities in AWS
Lambda or Azure functions before

58
00:04:14,514 --> 00:04:15,864
they release to the production.

59
00:04:16,484 --> 00:04:23,344
This entire thing, allowss development
teams to maintain team deliver speed

60
00:04:23,525 --> 00:04:28,534
while still adhering to the compliance
frameworks like NIST or CIS, et cetera.

61
00:04:29,034 --> 00:04:33,054
The third slide, let's go to the
check on the security As a code

62
00:04:33,114 --> 00:04:35,265
proven transformation security.

63
00:04:35,265 --> 00:04:42,164
As code changes the paradigm, security
becomes an enabler, not a blocker.

64
00:04:42,664 --> 00:04:46,824
If you look at the slide,
there is a 65% reduction in

65
00:04:46,824 --> 00:04:48,264
vulnerabilities reaching production.

66
00:04:48,764 --> 00:04:54,934
50% faster time to market, 45%
improvement in compliance scores.

67
00:04:55,434 --> 00:05:01,664
The data shows 78% of organizations
accelerate remediation when

68
00:05:01,724 --> 00:05:03,224
adopting security as score word

69
00:05:03,724 --> 00:05:04,119
the problem.

70
00:05:04,619 --> 00:05:07,289
Security as an afterthought.

71
00:05:07,789 --> 00:05:12,769
Traditional security approaches rely
heavily on manual checks or manual

72
00:05:12,769 --> 00:05:16,249
reviews and late stage testing.

73
00:05:16,749 --> 00:05:21,789
By the time vulnerabilities are
discovered, the code is nearly production

74
00:05:21,789 --> 00:05:24,444
ready, leading to expensive work.

75
00:05:24,944 --> 00:05:31,694
Security and development teams often
operate in silos with different

76
00:05:31,694 --> 00:05:35,234
priorities, creating delays and friction.

77
00:05:35,734 --> 00:05:37,585
The results vulnerability is reached.

78
00:05:37,585 --> 00:05:41,665
Production remediation cycles
are extended, and compliance

79
00:05:41,725 --> 00:05:42,715
postures are weakened.

80
00:05:43,215 --> 00:05:49,835
I wanna give you one example in one
of my pipelines, we used we used to

81
00:05:49,835 --> 00:05:55,270
rely on manual security sign-offs
at the end of the release cycle.

82
00:05:55,770 --> 00:06:00,105
This meant vulnerabilities in terraform
infrastructure or container based images

83
00:06:00,345 --> 00:06:03,135
caught too late causing production delays.

84
00:06:03,635 --> 00:06:07,855
By the time fixes were made, release
timelines had already slipped,

85
00:06:08,605 --> 00:06:12,055
creating frustration for both
developers and security teams.

86
00:06:12,595 --> 00:06:13,465
This is one example.

87
00:06:13,965 --> 00:06:16,125
So how do we make this real?

88
00:06:16,815 --> 00:06:20,415
Let's break it down into the core
pillars of security as a core.

89
00:06:20,915 --> 00:06:22,145
If we look at the slide.

90
00:06:22,715 --> 00:06:26,795
A comprehensive approach that
integrates security at every stage

91
00:06:26,795 --> 00:06:27,965
of the development life cycle.

92
00:06:28,465 --> 00:06:31,665
These are the core pillars
the holistic framework.

93
00:06:31,875 --> 00:06:36,314
It covers automated security
integration, server security,

94
00:06:36,525 --> 00:06:41,254
infrastructure security, intelligent
risk management, secrets management.

95
00:06:41,764 --> 00:06:45,424
Each of these pillars ensures
security is continuous,

96
00:06:46,024 --> 00:06:48,454
automated and developer friendly.

97
00:06:48,954 --> 00:06:49,674
Let's deep.

98
00:06:50,334 --> 00:06:53,294
Let's dive deeper into the first pillar.

99
00:06:53,794 --> 00:06:55,864
Automated security integration

100
00:06:56,364 --> 00:07:02,904
shifts security from manual checks or
manual reviews to continuous protection.

101
00:07:03,404 --> 00:07:08,204
Detect 85% of critical vulnerabilities
before release compared to

102
00:07:08,204 --> 00:07:10,424
just 23% with manual checks.

103
00:07:10,924 --> 00:07:11,254
Tools.

104
00:07:11,254 --> 00:07:12,874
You could see that on the right side.

105
00:07:13,204 --> 00:07:19,379
GitLab, security scanning, Azure DevOps,
security, 45 AWS Inspector, et cetera.

106
00:07:19,879 --> 00:07:24,999
If you look at the, from reactive to
proactive security, there are two things.

107
00:07:24,999 --> 00:07:28,059
Traditional approach and
security as a code approach.

108
00:07:28,559 --> 00:07:33,869
Traditional approach security is
being as a final gate, lengthy

109
00:07:33,869 --> 00:07:35,609
remediation cycles, deployment delays.

110
00:07:36,119 --> 00:07:39,179
Security was a development,
always tension.

111
00:07:39,679 --> 00:07:43,819
Whereas security as a code approach
would make a lot of difference.

112
00:07:44,179 --> 00:07:50,799
There's security at every stage, real
time feedback loops, automated remediation

113
00:07:51,169 --> 00:07:52,789
collaborative security cultures.

114
00:07:53,289 --> 00:07:58,030
Now let's look at how this applies to
serverless and cloud infrastructure.

115
00:07:58,530 --> 00:08:01,049
This is pillar two, serverless
and infrastructure security.

116
00:08:01,549 --> 00:08:06,179
Serverless adoption is surging, but
function level protection is critical.

117
00:08:06,679 --> 00:08:11,209
Security as a code enables vulnerability
detection in serverless functions.

118
00:08:11,659 --> 00:08:15,734
Automated policy enforcement,
real-time validation during deployment

119
00:08:16,234 --> 00:08:17,434
policy as a code.

120
00:08:17,824 --> 00:08:21,874
Frameworks prevent 92% of
common cloud misconfigurations.

121
00:08:22,374 --> 00:08:26,424
But embedded scans is alone is not enough.

122
00:08:26,904 --> 00:08:29,784
Teams often face alert fatigue.

123
00:08:29,784 --> 00:08:32,229
That's where intelligent
risk management comes in.

124
00:08:32,729 --> 00:08:33,389
Pillar three.

125
00:08:33,889 --> 00:08:35,779
Risk management and secrets protection.

126
00:08:36,279 --> 00:08:42,159
A smart alerting and contextual
risk scoring, reduced noise by 60%.

127
00:08:42,659 --> 00:08:49,679
Secret scanning stops 99.7%
of hardcoded secrets before

128
00:08:50,129 --> 00:08:51,269
it gets into the production.

129
00:08:51,769 --> 00:08:55,879
Tools you could use actually car
Wal AWS, secrets Manager, nyk,

130
00:08:56,569 --> 00:08:58,369
or Gate Guardian, et cetera.

131
00:08:58,869 --> 00:09:04,309
I would like to give one example here
in one, one of, in one integration

132
00:09:04,309 --> 00:09:08,879
we used Git Guardian to detect
Hardcoded Secrets in GitLab re reports.

133
00:09:09,379 --> 00:09:15,589
Findings were piped into ServiceNow CV
workflow, where contextual prioritizations

134
00:09:15,889 --> 00:09:22,429
helped us fix critical exposures
immediately while ignoring low risk noise.

135
00:09:22,759 --> 00:09:22,789
I

136
00:09:23,289 --> 00:09:27,249
now, let's see how real
enterprises are already proving

137
00:09:27,254 --> 00:09:28,714
the value of security as code.

138
00:09:29,214 --> 00:09:35,404
The real world enterprise, case
studies, financial services, integrated

139
00:09:35,404 --> 00:09:42,214
fortify, and ways or prisma for reduced
remediation time from weeks to hours.

140
00:09:42,714 --> 00:09:43,674
Healthcare.

141
00:09:44,174 --> 00:09:47,804
They, some of them used Azure
DevOps plus policy as a code.

142
00:09:48,359 --> 00:09:55,669
That led to 70% fewer HIPA audits,
audit failures coming in retail AWS

143
00:09:55,669 --> 00:10:01,779
Inspector in Serverless that led to 50%
reduction in incidents during peak season.

144
00:10:02,279 --> 00:10:02,399
I

145
00:10:02,899 --> 00:10:04,789
Beyond security wins.

146
00:10:05,179 --> 00:10:06,284
What's the business value?

147
00:10:06,694 --> 00:10:07,844
Let's talk our why.

148
00:10:08,344 --> 00:10:12,714
Measuring success, ROI of security as code

149
00:10:13,214 --> 00:10:18,914
security as code delivers measurable
business outcomes, faster delivery,

150
00:10:19,414 --> 00:10:22,134
stronger compliance complaints like.

151
00:10:22,694 --> 00:10:28,034
SOC two PCI dss hipaa, GDPR, et cetera.

152
00:10:28,534 --> 00:10:33,414
Lower costs audit prep, patching,
rollbacks, and all this includes,

153
00:10:33,914 --> 00:10:38,394
and cost savings come from
fever brand breaches, right?

154
00:10:38,734 --> 00:10:40,474
Unless less rework.

155
00:10:40,974 --> 00:10:45,744
For example, when we automated Prisma,
serialized scannings or any security

156
00:10:45,744 --> 00:10:52,074
solution, scannings compliance teams
cut audit preparation time by 50%,

157
00:10:52,074 --> 00:10:57,644
saving hundreds of hours, and ensuring
PCI evidence was always up to date.

158
00:10:58,144 --> 00:11:00,874
So how do organizations
actually implement this?

159
00:11:01,684 --> 00:11:03,524
Let's look at the roadmap,

160
00:11:04,024 --> 00:11:05,584
implementation roadmap.

161
00:11:06,084 --> 00:11:07,354
There are four phases.

162
00:11:07,684 --> 00:11:12,564
Phase one foundation where it
gives pipeline scanning, baselines,

163
00:11:12,804 --> 00:11:15,524
trainings, phase two integration.

164
00:11:16,024 --> 00:11:20,434
Policy as a code secrets
detection feedback, hope loops,

165
00:11:20,934 --> 00:11:22,674
phase three, optimization.

166
00:11:23,174 --> 00:11:23,924
Intelligent.

167
00:11:23,954 --> 00:11:30,604
Risk dashboards, automated remediation,
phase four, maturity, continuous

168
00:11:30,604 --> 00:11:34,659
improvement, chaos, engineering,
threat modeling, automation, et cetera.

169
00:11:35,159 --> 00:11:38,099
Of course, the journey does not stop here.

170
00:11:38,599 --> 00:11:42,709
The future of security
code is even more exciting.

171
00:11:43,209 --> 00:11:44,259
Let's look at the next slide.

172
00:11:44,759 --> 00:11:47,814
The future of platform engineering
with security has core.

173
00:11:48,314 --> 00:11:53,684
You could see on the slides emerging
trends, platform engineering evolution.

174
00:11:54,184 --> 00:11:59,054
Emerging trend trends would be, AI
powered vulnerability prediction,

175
00:11:59,554 --> 00:12:03,739
automated threat modeling, zero
trust, pipeline architecture,

176
00:12:04,239 --> 00:12:06,249
runtime application, self protection.

177
00:12:06,749 --> 00:12:12,479
These will further reduce manual
work and strengthen resilience,

178
00:12:12,979 --> 00:12:15,069
whereas platform engineering evolution,

179
00:12:15,569 --> 00:12:19,464
but security as code represents
the natural conversions of

180
00:12:19,579 --> 00:12:22,699
DevOps velocity with enterprise
grade resilience and empowering.

181
00:12:23,199 --> 00:12:26,860
With platform engineering, DevOps,
security architects, infrastructure leads.

182
00:12:27,360 --> 00:12:29,900
I have one example I
would like to share it.

183
00:12:30,380 --> 00:12:36,920
We have already piloting AI driven anomaly
detection for API traffic in aka it helps

184
00:12:36,980 --> 00:12:44,410
differentiate normal versus suspicious
API behavior, reducing false positive use

185
00:12:44,739 --> 00:12:47,170
and strength in data privacy safeguards.

186
00:12:47,670 --> 00:12:50,154
Let's wrap this up with a big takeaway.

187
00:12:50,654 --> 00:12:51,324
Conclusion.

188
00:12:51,824 --> 00:12:54,285
Security can no longer be bolted on.

189
00:12:54,344 --> 00:12:56,685
It must be owned into pipeline

190
00:12:57,185 --> 00:12:57,575
of benefits.

191
00:12:58,075 --> 00:13:03,175
With this faster delivery, fewer
vulnerabilities in production,

192
00:13:03,685 --> 00:13:08,865
stronger communi compliance
brochure, measurable cost of savings.

193
00:13:09,365 --> 00:13:10,625
Final example.

194
00:13:11,045 --> 00:13:12,275
I would say closing example.

195
00:13:12,775 --> 00:13:19,705
By embedding security across
serverless APIs, containers, IAC

196
00:13:19,795 --> 00:13:25,965
and AI workloads, organization,
organizations, or organizations can

197
00:13:26,625 --> 00:13:31,865
innovate at scale without sacrificing
compliance or data protection.

198
00:13:32,365 --> 00:13:38,655
Finally, for enterprises striving
for both speed and safety, security

199
00:13:38,655 --> 00:13:41,295
as code is no longer optional.

200
00:13:41,685 --> 00:13:42,885
It's essential.

201
00:13:43,385 --> 00:13:43,805
Thank you.

