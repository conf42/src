1
00:00:00,810 --> 00:00:01,440
Hello everyone.

2
00:00:01,980 --> 00:00:02,880
I'm Prakesh Wanger.

3
00:00:03,150 --> 00:00:08,100
Overall, 13 years of exchange experience
specializing in AWS Cloud engineer

4
00:00:08,220 --> 00:00:10,140
and identity access management.

5
00:00:10,980 --> 00:00:15,240
Currently serving as an AWS
data engineer, designing and

6
00:00:15,480 --> 00:00:20,580
implementing scalable and secure data
pipelines, leveraging a W Services.

7
00:00:21,080 --> 00:00:24,709
I'm really excited to be here
to talk about something that

8
00:00:25,189 --> 00:00:25,909
at the intersection of ai.

9
00:00:26,409 --> 00:00:30,939
Cloud infrastructure and real
world business impact using Cloud

10
00:00:30,939 --> 00:00:37,119
native A to fight financial fraud
in real time and doing it reliable.

11
00:00:37,619 --> 00:00:40,319
Today, financial institutions
face critical challenging

12
00:00:40,819 --> 00:00:45,559
detection, sophisticated fraud
pattern across billions of digital

13
00:00:45,559 --> 00:00:50,169
transactions while maintaining
system reliability and performance.

14
00:00:50,559 --> 00:00:52,169
In this session, we.

15
00:00:52,964 --> 00:00:59,414
Drive into how site level engineers
are SRE Empower financial institutions

16
00:00:59,444 --> 00:01:05,084
to build cloud native AI systems
that detect fraud at scale.

17
00:01:05,084 --> 00:01:10,964
Without compromising speed, availability,
or user trust, we will explore how to

18
00:01:10,964 --> 00:01:17,024
architecture infrastructure capable
of subsecond responses, time handle

19
00:01:17,054 --> 00:01:19,604
mass, transactions, volume, and still.

20
00:01:20,104 --> 00:01:24,094
The gold standard of 99.9% of time.

21
00:01:24,594 --> 00:01:27,624
This is about more than
just dropping fraud.

22
00:01:28,404 --> 00:01:34,734
It's about building resilient in inte
and systems that form the backbone

23
00:01:34,734 --> 00:01:36,834
of modern financial security.

24
00:01:37,824 --> 00:01:39,744
Going to next slide.

25
00:01:40,244 --> 00:01:45,675
The challenge faced in this is ma,
mainly speed, scale and security.

26
00:01:46,380 --> 00:01:48,000
Let's start with the problem.

27
00:01:48,630 --> 00:01:52,050
Create financing systems, processing
billions of transactions daily,

28
00:01:52,800 --> 00:01:57,240
exposing them to constraint
sophisticated fraud attempts.

29
00:01:57,740 --> 00:02:03,409
Legacy systems which analyze data in
batches, however often transaction

30
00:02:03,409 --> 00:02:05,534
happens, simply don't work anymore.

31
00:02:06,529 --> 00:02:07,550
The challenge is huge.

32
00:02:08,050 --> 00:02:11,320
Detect fraud in real time across.

33
00:02:11,695 --> 00:02:16,345
Master volumes while keeping
latency under a second and blocking

34
00:02:16,345 --> 00:02:18,685
increasingly advanced attacks.

35
00:02:19,555 --> 00:02:25,885
For SRE Site Engineer, this means
balancing performance, scalability,

36
00:02:26,425 --> 00:02:29,125
and security all at once.

37
00:02:29,625 --> 00:02:34,600
Going to next slide, our experience
from batch to steaming bank,

38
00:02:35,100 --> 00:02:37,210
mentioning the architectural evolution.

39
00:02:38,090 --> 00:02:42,860
We started with a traditional batch
processing system where analyzing data

40
00:02:43,430 --> 00:02:45,770
happened hours after transaction happens.

41
00:02:46,160 --> 00:02:51,410
That delay led a lot of false
prostitutes and frustrated customers.

42
00:02:51,910 --> 00:02:55,870
To fix this, we transitioned
to a streaming architecture.

43
00:02:56,079 --> 00:02:57,310
This was a big shift.

44
00:02:57,820 --> 00:03:04,239
We introduced Kafka team to process
even in a real time, ensuring data

45
00:03:04,239 --> 00:03:06,130
flows continuously instead of.

46
00:03:06,609 --> 00:03:11,849
In Changs, we added future store
to provide low latency access to

47
00:03:11,849 --> 00:03:16,979
historical data, giving our models
the context they need instantly link.

48
00:03:17,909 --> 00:03:23,519
This gave us real time insights and
fraud detection that keeps us the modern

49
00:03:23,699 --> 00:03:30,719
threats and we move to microservice based
models are enabling real time interference

50
00:03:30,719 --> 00:03:33,599
with auto-scaling so we can meet.

51
00:03:34,259 --> 00:03:37,199
Demand without sacrificing
speed are reliability.

52
00:03:37,699 --> 00:03:39,079
Going to next slide.

53
00:03:39,579 --> 00:03:42,819
Let us see the resiliency
patterns for a Systems.

54
00:03:43,319 --> 00:03:48,254
A Systems bring new kinds of failure modes
that traditional SR methods, sometimes

55
00:03:48,764 --> 00:03:51,719
they return results too slowly to handle.

56
00:03:51,719 --> 00:03:52,859
These we adopted.

57
00:03:53,714 --> 00:03:55,694
Specialized resilience patterns.

58
00:03:56,204 --> 00:04:00,944
We use circuit breakers to detect
when models are overwhelmed,

59
00:04:01,544 --> 00:04:06,724
falling back to similar rule-based
system to keep transactions flowing

60
00:04:06,754 --> 00:04:08,974
and avoiding cascading failures.

61
00:04:09,784 --> 00:04:14,759
We built graceful degradation
paths where critical fraud checks

62
00:04:14,759 --> 00:04:20,159
continues, even if deeper analysis
needs to be passed during peak.

63
00:04:20,534 --> 00:04:26,174
Loads and with automated canary
analysis, we deploy new models to

64
00:04:26,174 --> 00:04:28,124
just a small portion of traffic.

65
00:04:28,994 --> 00:04:35,594
This let us monitored metrics like latency
and false positives before a full rollout,

66
00:04:36,314 --> 00:04:38,714
reducing risk, while improving quality.

67
00:04:38,774 --> 00:04:40,074
Going to next slide.

68
00:04:40,574 --> 00:04:43,479
Specialized observability for ML systems.

69
00:04:43,979 --> 00:04:48,779
Traditional monitoring tools weren't
enough for our a fraud detection systems.

70
00:04:48,989 --> 00:04:54,479
They simply couldn't capture the
complexity of model behavior or connect

71
00:04:54,569 --> 00:04:56,309
technical issues to business impact.

72
00:04:56,999 --> 00:05:01,159
We need to see how our A models
were performing and how that

73
00:05:01,609 --> 00:05:03,319
performance affected the business.

74
00:05:03,499 --> 00:05:09,259
So we built a specialized
observability stack focused on model

75
00:05:09,259 --> 00:05:11,479
performance, data quality, and.

76
00:05:12,199 --> 00:05:13,279
Business relevance.

77
00:05:14,269 --> 00:05:19,699
We now track interference latency
prediction, competence, and compute

78
00:05:19,699 --> 00:05:22,009
usages across different model versions.

79
00:05:22,509 --> 00:05:29,109
We monitor data drift by detecting changes
in statistical properties of input future,

80
00:05:29,109 --> 00:05:35,579
so we know when real world transaction
start to differ from training data with

81
00:05:35,639 --> 00:05:39,029
explainability tools, we visualize why.

82
00:05:39,689 --> 00:05:40,769
Transaction was flagged.

83
00:05:40,949 --> 00:05:45,599
This is a key for both debugging
and gaining stakeholder trust.

84
00:05:46,379 --> 00:05:51,149
And finally, we correlated technical
metrics with business outcomes like

85
00:05:51,299 --> 00:05:54,149
fraud, losses, our customer friction.

86
00:05:54,149 --> 00:05:59,009
So we are not just monitoring systems,
we are tracking what actually matters.

87
00:05:59,509 --> 00:06:00,709
Going to next slide.

88
00:06:01,209 --> 00:06:06,279
Then we have service level objectives
that balance, security, and experience.

89
00:06:06,779 --> 00:06:09,179
Setting service level
objectives for fraud.

90
00:06:09,179 --> 00:06:11,129
Detection isn't just about uptime.

91
00:06:11,369 --> 00:06:15,919
It's about balancing multiple,
often completing goals, security

92
00:06:15,919 --> 00:06:20,359
accuracy, posture, approvals,
and a smooth user experience.

93
00:06:21,289 --> 00:06:24,619
Traditionally, service level
objectives focused only on

94
00:06:24,619 --> 00:06:26,989
availability, but that wasn't enough.

95
00:06:27,109 --> 00:06:31,069
So we built a multi-dimensional
service level objectives framework

96
00:06:31,159 --> 00:06:35,179
that combines both technical
metrics and business impact.

97
00:06:36,064 --> 00:06:42,264
We track availability at 99.9% while
keeping detection latency under 200

98
00:06:42,264 --> 00:06:44,844
milliseconds for a seamless experience.

99
00:06:45,504 --> 00:06:50,844
To ensure quality, we aim for a false
positive rate below 0.5 percentage, and a

100
00:06:51,384 --> 00:06:53,664
fraud detection rate above 98 percentage.

101
00:06:54,474 --> 00:06:59,424
And to maintain trust, we required a
hundred percent explainability with

102
00:06:59,484 --> 00:07:01,614
clear reason codes for every decisions.

103
00:07:02,319 --> 00:07:07,539
This framework help us to make smart
trade off when we need to balance depth

104
00:07:07,629 --> 00:07:09,879
of analysis with real time performance.

105
00:07:10,379 --> 00:07:11,489
Going to next slide,

106
00:07:11,989 --> 00:07:14,389
s Engineering for fraud systems.

107
00:07:15,289 --> 00:07:18,169
Fraud detection is a
high stake environment.

108
00:07:18,739 --> 00:07:22,099
Failures he can lead to
immediate financial loss.

109
00:07:22,099 --> 00:07:25,849
So traditionally, K os
engineering, which often involves

110
00:07:25,849 --> 00:07:27,289
breaking things in production.

111
00:07:28,189 --> 00:07:32,629
Instead, we designed a specialized
approach that safe and controlled

112
00:07:33,259 --> 00:07:39,649
within chaos experiments in replica
environments that matter production, using

113
00:07:39,649 --> 00:07:45,349
synthetic transactions data to stimulate
both normal and fraudulent behavior.

114
00:07:46,099 --> 00:07:51,024
Each experiment is hypothesis
driven, targeting specific failure

115
00:07:51,234 --> 00:07:57,019
modes, and most importantly, we
evaluate that degradation path work.

116
00:07:57,844 --> 00:08:01,624
Payload triggers correctly and
automatic recovery mechanisms

117
00:08:01,804 --> 00:08:03,844
do what they are supposed to do.

118
00:08:04,564 --> 00:08:08,464
This way we gain the confidence
of Kio testing without risking

119
00:08:08,464 --> 00:08:11,194
real money or user trust.

120
00:08:11,694 --> 00:08:12,714
Going to next slide.

121
00:08:13,214 --> 00:08:18,134
By applying SRE principle tailored
specifically for aid driven fraud

122
00:08:18,134 --> 00:08:22,904
detections, we saw a major gain across
both technical and business dimensions.

123
00:08:23,729 --> 00:08:30,799
The biggest win was a 78% reduction in
detection time, which let us intercept

124
00:08:30,799 --> 00:08:36,709
fraud before transactions were completely
preventing laws instead of trying to

125
00:08:36,709 --> 00:08:42,979
recover it later, we also cut false
positives at by 60, 63% days, which

126
00:08:43,669 --> 00:08:45,589
directly improved customer satisfaction.

127
00:08:46,369 --> 00:08:49,759
Favor legitimate transactions
were wrongly flagged.

128
00:08:50,259 --> 00:08:53,139
Few users experience
delays at the system level.

129
00:08:53,799 --> 00:08:59,229
We maintain 99.99 percentage
availability, ensuring constant

130
00:08:59,279 --> 00:09:00,809
production without downtime.

131
00:09:01,379 --> 00:09:07,889
And finally, we you a 42% cost
production efficient infrastructure.

132
00:09:08,519 --> 00:09:15,184
Going to next slide in financial services,
we are bound by strict regulations

133
00:09:15,514 --> 00:09:17,674
which can clash with the fast moving.

134
00:09:18,319 --> 00:09:24,559
Trade to nature of tech to balance both
our SR team built specialized workflow

135
00:09:24,679 --> 00:09:29,749
that supports continuous compliance
without slowing down innovation.

136
00:09:30,649 --> 00:09:35,269
We translate regularity requirements
into technical controls using

137
00:09:35,299 --> 00:09:40,929
infrastructure as a code to ensure every
deployment is repeatedly and immutable.

138
00:09:41,429 --> 00:09:45,274
We also established a robust
models governance framework.

139
00:09:46,064 --> 00:09:51,674
Document training data model logics, and
how each ties back to a business need.

140
00:09:52,174 --> 00:09:55,894
Lastly, we implemented
automated audit trail logging.

141
00:09:55,894 --> 00:09:57,574
Every system change in detail.

142
00:09:58,354 --> 00:10:04,444
This allows to reconstruct systems
state at any time, ensuring traceability

143
00:10:04,474 --> 00:10:07,654
and audit readiness at all times.

144
00:10:08,154 --> 00:10:13,184
Going to next building a. AI
fraud detection systems is in

145
00:10:13,184 --> 00:10:16,184
just about adding more power.

146
00:10:16,424 --> 00:10:18,694
It's about thoughtful architecture.

147
00:10:19,534 --> 00:10:25,144
Our blueprint focused on decoupling
components, so if one fails, it

148
00:10:25,144 --> 00:10:27,034
doesn't brings the whole system down.

149
00:10:27,844 --> 00:10:33,034
We built in redundancy and ensure a full
observability, not just for technical

150
00:10:33,034 --> 00:10:35,404
metrics, but for business impact too.

151
00:10:35,904 --> 00:10:40,164
We break the system into reliable
domains, each with its own scaling logics.

152
00:10:40,644 --> 00:10:45,684
This given us flexibility, especially
when deploying new ML models, which

153
00:10:45,684 --> 00:10:48,294
often have unpredictable demands.

154
00:10:49,074 --> 00:10:54,174
At the foundation, we use scalable cloud
infrastructure with multi-region failover.

155
00:10:54,984 --> 00:11:00,894
Our data layers uses resilience event
stream from guaranteed delivered.

156
00:11:01,854 --> 00:11:04,734
The model layer is with the
smart loading balancing.

157
00:11:04,794 --> 00:11:08,954
And finally, the observability
layer uses end-to-end insight

158
00:11:09,044 --> 00:11:11,594
across system health model behavior.

159
00:11:12,094 --> 00:11:14,124
Going to next slide.

160
00:11:14,624 --> 00:11:19,844
A fraud detection systems can be
seen as risky and complex, but

161
00:11:20,084 --> 00:11:23,384
with the Rights R practice, they
become a community advantage.

162
00:11:24,359 --> 00:11:29,219
When reliability is built into a
foundation, our nation can deploy more

163
00:11:29,219 --> 00:11:34,679
sophisticated models faster with greater
confidence and lower operational overhead.

164
00:11:35,429 --> 00:11:38,009
And this value doesn't
stop at fraud prevention.

165
00:11:38,159 --> 00:11:42,869
The same fraud structure can support
personalization, risk scoring

166
00:11:42,929 --> 00:11:48,469
are market analytics creator a
multiplier effect across the business.

167
00:11:49,249 --> 00:11:51,889
To get there, we recommend
a three steps approach.

168
00:11:52,389 --> 00:11:53,949
Assess current capabilities.

169
00:11:54,309 --> 00:11:59,409
So identify reliability gaps and
performance bottleneck using SRE

170
00:11:59,409 --> 00:12:03,789
principle, building foundational
patterns before scaling.

171
00:12:03,789 --> 00:12:07,989
Implement key patterns like
circuit breakers and observability.

172
00:12:08,489 --> 00:12:09,779
Measure business impact.

173
00:12:10,559 --> 00:12:16,709
Align technical reliability with outcomes
like reduce fraud, losses, and better

174
00:12:16,709 --> 00:12:18,749
customer experience by doing this.

175
00:12:19,514 --> 00:12:24,839
We turn relatability into, not just by
technical goal, but a business strategy.

176
00:12:25,339 --> 00:12:26,779
Finally, thank you.

177
00:12:27,709 --> 00:12:28,939
Thank you all for your time.

178
00:12:29,299 --> 00:12:33,939
If you are working on fraud detection AI
system just trying to make your systems

179
00:12:33,969 --> 00:12:36,129
more relatable, I would love to connect.

180
00:12:36,819 --> 00:12:41,139
Let's keep building systems that
are not only smart, but also

181
00:12:41,139 --> 00:12:43,629
strong, forced and trustworthy.

182
00:12:43,899 --> 00:12:44,319
Thank you.

