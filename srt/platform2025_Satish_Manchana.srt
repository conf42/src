1
00:00:00,500 --> 00:00:01,369
Hi everyone.

2
00:00:01,489 --> 00:00:07,100
My name is Satish Manna and I'm very happy
to be part of K 42 Platform Engineering

3
00:00:07,129 --> 00:00:12,890
2025 session, and I'm here to talk about
compliance aware platform engineering.

4
00:00:13,370 --> 00:00:16,880
Just a little bit about me
before we go into the session.

5
00:00:17,300 --> 00:00:21,650
I have over 25 years of experience
across multiple continents.

6
00:00:21,920 --> 00:00:25,130
I was in Asia Pacific
for the first initial.

7
00:00:25,765 --> 00:00:31,285
Career about 14 years, and in the last
11 years in the USCA, in my overall

8
00:00:31,285 --> 00:00:36,835
experience, 20 plus years are very
focused on financial organizations.

9
00:00:37,195 --> 00:00:41,425
When I begin this presentation,
I like to immediately acknowledge

10
00:00:41,425 --> 00:00:44,754
that most platform engineers
already understand how to automate

11
00:00:45,625 --> 00:00:50,845
infrastructure, the harder parties
doing it in regulated environments.

12
00:00:51,114 --> 00:00:53,000
What I have learned over the years.

13
00:00:53,925 --> 00:00:58,785
Is that compliance isn't something that
can be added on at the end of the build.

14
00:00:59,234 --> 00:01:01,425
Just like we architect our.

15
00:01:01,925 --> 00:01:07,025
For high availability or performance,
we need to architect specifically for

16
00:01:07,115 --> 00:01:14,525
provability, meaning that we cannot only
apply controls, but also demonstrate

17
00:01:14,525 --> 00:01:16,865
how and when they were applied.

18
00:01:17,255 --> 00:01:21,695
That's the central idea behind
compliance aware platform engineering.

19
00:01:22,445 --> 00:01:27,340
In my experience, the cultural
mindset is just as important as the.

20
00:01:27,899 --> 00:01:28,949
Technical approach.

21
00:01:29,670 --> 00:01:35,910
Rather than thinking compliance teams as
blockers, we need to engage them early

22
00:01:35,970 --> 00:01:41,100
as stakeholders In platform design, that
means mapping the regulatory controls

23
00:01:41,100 --> 00:01:46,080
to practical, testable assertions
that can be implemented in core.

24
00:01:46,500 --> 00:01:50,729
Once the collaboration is in
place, the platform team becomes

25
00:01:50,820 --> 00:01:53,280
an enabler by providing a clean.

26
00:01:53,780 --> 00:01:58,730
Reusable way for application teams
to consume compliant infrastructure

27
00:01:59,060 --> 00:02:00,290
the moment they need it.

28
00:02:01,030 --> 00:02:05,740
The stock is therefore structured
around real world experience from

29
00:02:05,830 --> 00:02:10,660
financial institutions that operate
in multiple regulatory zones.

30
00:02:10,960 --> 00:02:12,280
You will see that we.

31
00:02:12,945 --> 00:02:18,525
Moved away from siloed manual tasks
and towards a model where compliance

32
00:02:18,525 --> 00:02:24,045
is embedded directly in automation
pipelines delivered as part of the

33
00:02:24,045 --> 00:02:26,655
platform and continuously validated.

34
00:02:27,155 --> 00:02:30,050
Let's start by outlining today's agenda.

35
00:02:30,550 --> 00:02:35,230
To make this concrete, I will start
through the regulatory landscape.

36
00:02:35,260 --> 00:02:41,930
We have had to go through and design based
on the regulatory landscape requirements.

37
00:02:42,350 --> 00:02:45,080
It's important to understand this first.

38
00:02:45,340 --> 00:02:50,620
Because tooling decisions and
architectural patterns only make sense

39
00:02:50,920 --> 00:02:56,050
when you look at the type of evidence
regulators expect us to produce.

40
00:02:56,410 --> 00:03:01,580
For example, under MiFi two, which is
one of the regulators in Europe, like

41
00:03:01,580 --> 00:03:07,730
so in the U-S-A-A-R-B and India, a Mass
in Singapore, we are required to log.

42
00:03:07,750 --> 00:03:12,850
All tax timestamped transactions
and pro synchronization of the

43
00:03:12,850 --> 00:03:14,830
time source for those locks.

44
00:03:15,760 --> 00:03:20,040
That has very real design
implications when you're starting

45
00:03:20,040 --> 00:03:21,765
to develop this solution.

46
00:03:22,630 --> 00:03:26,560
Design or think of this solution
once the context is set.

47
00:03:26,620 --> 00:03:30,340
I will take you step by step through
the evolution of our delivery

48
00:03:30,340 --> 00:03:35,140
model from ad hoc DevOps pipelines
into a scalable platform model.

49
00:03:35,530 --> 00:03:41,185
I'll spend most of the time on
four concrete building blocks and

50
00:03:41,305 --> 00:03:43,185
show how each one contributes to.

51
00:03:43,530 --> 00:03:45,000
Compliance by design.

52
00:03:45,330 --> 00:03:47,430
The number one is provisioning frameworks.

53
00:03:47,640 --> 00:03:49,860
Number two is hard and golden images.

54
00:03:50,010 --> 00:03:55,950
Number three, CICD, gate integration,
and the last one is policy as core.

55
00:03:56,190 --> 00:04:00,510
Right after that, I will show how
we exposed all of these to the

56
00:04:00,510 --> 00:04:05,190
wider organization via self-service
because it's not just enough

57
00:04:05,190 --> 00:04:06,810
to build a compliant pipeline.

58
00:04:06,900 --> 00:04:09,530
If people aren't consuming
them easy, right?

59
00:04:09,920 --> 00:04:12,415
Then I'll share what
worked and what didn't.

60
00:04:12,940 --> 00:04:17,500
In case study format and finally
walk through a practical roadmap

61
00:04:17,560 --> 00:04:20,485
that others can use to get
started in their own environment.

62
00:04:20,985 --> 00:04:26,025
Even though the examples and use
cases are predominantly from financial

63
00:04:26,025 --> 00:04:31,875
organizations, this can be applied in any
regulated industries, like in healthcare,

64
00:04:31,875 --> 00:04:34,515
retail insurances, you name it, right?

65
00:04:34,515 --> 00:04:37,785
So wherever there are some
regulations applied by some

66
00:04:37,785 --> 00:04:43,445
external auditors or regulated
organizations, so this can be applied.

67
00:04:44,135 --> 00:04:48,035
So what does the compliance challenge
look like in the financial services?

68
00:04:48,425 --> 00:04:50,705
Let's look into that in this next slide.

69
00:04:51,205 --> 00:04:53,815
Let me drill you into the
landscape a bit deeper.

70
00:04:54,065 --> 00:05:00,785
Financial services organizations operate
under multiple overlapping regulations.

71
00:05:00,815 --> 00:05:04,700
Reason being, they operate in various
continents from various countries.

72
00:05:05,000 --> 00:05:09,680
SOX governs internal controls
over financial reporting in us,

73
00:05:09,890 --> 00:05:12,500
whereas GDPR governs personal data.

74
00:05:12,770 --> 00:05:17,030
As I mentioned earlier, one of the
European regulators MiFi two mandates,

75
00:05:17,510 --> 00:05:24,230
granular record keeping of order and trade
events, and Dora introduces operational

76
00:05:24,920 --> 00:05:26,895
requirements across hybrid infrastructure.

77
00:05:27,590 --> 00:05:32,510
What's key here is that each regulation
not only tells you what must be

78
00:05:32,510 --> 00:05:38,660
protected, but often how and when
that protection must be verified,

79
00:05:39,170 --> 00:05:41,240
those requirements become technical.

80
00:05:41,270 --> 00:05:45,260
For example, mafi to explicitly
states about the timestamps to

81
00:05:45,260 --> 00:05:47,330
a millisecond accuracy for the.

82
00:05:47,935 --> 00:05:50,065
Financial transactions that are performed.

83
00:05:50,455 --> 00:05:56,185
That means a simple NTP is running isn't
a good answer for a regulator, right?

84
00:05:56,425 --> 00:06:01,345
You must implement timestamp, lag,
logging, regular validation of NTP

85
00:06:01,345 --> 00:06:03,295
drift and retain those logs for.

86
00:06:03,970 --> 00:06:07,570
Audit review, this is where
manual process breaks down.

87
00:06:07,870 --> 00:06:12,550
Nobody can manually verify under
that level of details across

88
00:06:12,550 --> 00:06:16,630
hundreds of thousands of servers
on a daily or on a regular cadence.

89
00:06:17,350 --> 00:06:21,690
So what we discussed early
on is that compliance is

90
00:06:21,690 --> 00:06:23,910
fundamentally a data problem.

91
00:06:24,120 --> 00:06:29,010
It's about having the right telemetry
stored in the right way at the right time.

92
00:06:29,510 --> 00:06:36,650
Proves you enforced your policies,
which means the only scalable solution

93
00:06:36,650 --> 00:06:41,960
is to automate all of it, including the
evidence of compliance and make it part

94
00:06:41,960 --> 00:06:44,800
of the platform to manage this platform.

95
00:06:44,800 --> 00:06:46,270
Engineering itself had to evolve.

96
00:06:47,230 --> 00:06:52,355
Let's see how the platform engineering
did evolve over the period of time.

97
00:06:52,855 --> 00:06:56,425
When I reflect on my own
journey, we started in very

98
00:06:56,425 --> 00:06:58,495
traditional infrastructure silos.

99
00:06:58,585 --> 00:07:01,945
Like many other organizations across
the globe, at that point in time,

100
00:07:02,485 --> 00:07:07,795
operations and security had their own
tools, processes, and approval workflows.

101
00:07:08,155 --> 00:07:09,220
Application teams were.

102
00:07:09,950 --> 00:07:11,990
Often frustrated with the delays.

103
00:07:12,320 --> 00:07:16,760
So they built shadow scripts, a
PowerShell script here, an Ansible

104
00:07:16,789 --> 00:07:19,370
role there just to bypass bottlenecks.

105
00:07:19,610 --> 00:07:25,640
That approach gave us speed in isolated
pockets, but didn't give us consist worse.

106
00:07:25,640 --> 00:07:29,659
It created zero shared
accountability for compliance.

107
00:07:29,750 --> 00:07:35,539
Every team was doing their own automation,
but no two teams did it the same way

108
00:07:35,840 --> 00:07:37,640
and the results weren't reusable.

109
00:07:37,640 --> 00:07:42,379
Shareable traceable, the shift to DevOps
helped at that point in time, right?

110
00:07:42,739 --> 00:07:45,919
So because it broke down the
wall between dev and ops and

111
00:07:45,919 --> 00:07:50,599
gave us automation pipelines, but
again, each pipeline was custom.

112
00:07:50,900 --> 00:07:56,090
One team integrated in Jenkins, another
used GitLab, some applied straight into

113
00:07:56,150 --> 00:08:01,710
public cloud, someone to the hybrid,
like into AWS and VMware as an example.

114
00:08:02,039 --> 00:08:06,390
While that gave velocity
it also created dozens of.

115
00:08:06,500 --> 00:08:09,020
Fragmented delivery patterns.

116
00:08:09,320 --> 00:08:13,940
None of them fully aligned with
regulatory policies at audit.

117
00:08:14,625 --> 00:08:19,905
Regulatory policy policies at audit
time, we had no easy way to prove

118
00:08:19,905 --> 00:08:23,534
compliance across environments
because there were no single baseline.

119
00:08:23,805 --> 00:08:26,174
So platform engineering was that logical.

120
00:08:26,174 --> 00:08:32,115
Next step, instead of every team
reinventing the V, we began packaging

121
00:08:32,385 --> 00:08:38,475
proven practices into reusable version
infrastructure services that the

122
00:08:38,565 --> 00:08:40,680
whole organization could consume.

123
00:08:41,180 --> 00:08:45,080
This is where the big change
for compliance happen once the

124
00:08:45,080 --> 00:08:47,210
platform teams owns the baseline.

125
00:08:47,570 --> 00:08:49,430
Exposes it as a service.

126
00:08:49,550 --> 00:08:52,880
Every team that uses the
platform automatically

127
00:08:52,880 --> 00:08:54,860
inherits the correct controls.

128
00:08:55,400 --> 00:08:58,550
Developers don't have to waste
time interpreting, say, for

129
00:08:58,550 --> 00:09:00,740
example, number of multiple pages.

130
00:09:00,740 --> 00:09:04,430
Policy documents are waiting
for manual risk approvals.

131
00:09:04,660 --> 00:09:09,580
The compliance rules are built
into the self-service itself,

132
00:09:09,790 --> 00:09:11,260
right into the service itself.

133
00:09:11,950 --> 00:09:14,350
That's also where the
cultural shift happened.

134
00:09:14,380 --> 00:09:18,550
We started being just operators,
running servers, and became

135
00:09:18,550 --> 00:09:20,920
product owners of a platform.

136
00:09:21,580 --> 00:09:23,950
Internally, we started
calling the platform.

137
00:09:24,450 --> 00:09:30,720
Compliance aware product, and when the
teams consume that product, they get

138
00:09:30,720 --> 00:09:33,180
both velocity and compliance by default.

139
00:09:33,330 --> 00:09:37,980
So compliance is no longer a
checkpoint at the end of a pipeline.

140
00:09:38,310 --> 00:09:43,140
It's baked into the pipeline itself, into
the images, into the provisioning glass,

141
00:09:43,710 --> 00:09:46,680
and into the self-service experience.

142
00:09:47,070 --> 00:09:50,765
So how do we actually build
system with compliance back?

143
00:09:51,430 --> 00:09:57,970
So let's look into see how do we build
secure hybrid IAS provisioning frameworks

144
00:09:58,390 --> 00:10:00,970
in your next type in our next slide.

145
00:10:01,470 --> 00:10:05,130
So when we implemented our
provisioning framework, the

146
00:10:05,220 --> 00:10:07,830
first objective was very clear.

147
00:10:08,490 --> 00:10:11,825
No resource should ever
be deployed outside of.

148
00:10:12,620 --> 00:10:14,840
A policy enforced path.

149
00:10:15,350 --> 00:10:19,819
In other words, if someone wants
to spin up a VM or a database or a

150
00:10:19,819 --> 00:10:23,840
storage bucket, they can't just create
it directly in the cloud console.

151
00:10:24,319 --> 00:10:27,770
Everything must be declared
as infrastructure as code.

152
00:10:27,830 --> 00:10:33,830
Typically, with Terraform in Azure, we
use bicep and arm templates, and every

153
00:10:33,830 --> 00:10:38,450
Terraform request is passed through a
policy engine that validates it against

154
00:10:38,810 --> 00:10:41,660
centrally defined before anything is.

155
00:10:42,160 --> 00:10:45,790
So we have centrally defined rules
before anything that's going to

156
00:10:45,790 --> 00:10:48,100
be built using this ISE code.

157
00:10:48,520 --> 00:10:51,940
To make this real, let me
give you some examples.

158
00:10:52,660 --> 00:10:56,590
If encryption address is disabled,
the deployment is rejected.

159
00:10:57,060 --> 00:11:01,410
Or if someone tries to attach a
public IP address to a subnet that

160
00:11:01,410 --> 00:11:05,735
designated for a regulated workplace
workloads, the request fails.

161
00:11:06,235 --> 00:11:08,125
So the policy engine blocks it.

162
00:11:08,545 --> 00:11:12,595
So the, these are very simple
controls, but when they enforced

163
00:11:12,745 --> 00:11:17,335
automatically, they set enormous
amount of remediation effort later.

164
00:11:17,905 --> 00:11:22,045
The second major capability we
added was predefined landing zones.

165
00:11:22,875 --> 00:11:24,795
These aren't just empty networks.

166
00:11:24,825 --> 00:11:30,435
They're blueprints that already contain
our overlap network topology identity

167
00:11:30,945 --> 00:11:35,175
and access management model, monitoring
hooks and logging configuration.

168
00:11:35,265 --> 00:11:39,735
So when a workload is deployed into
a public cloud or onto the private

169
00:11:39,735 --> 00:11:44,550
cloud, it automatically lands in a
secure, pre-approved environment.

170
00:11:45,415 --> 00:11:49,315
So teams don't even have to think about
whether logging is enabled, whether

171
00:11:49,315 --> 00:11:51,205
backup preferences are attached.

172
00:11:51,325 --> 00:11:52,525
They just inherited it.

173
00:11:53,125 --> 00:11:57,880
One of the most important lessons we have
learned the way along the way is that.

174
00:11:58,380 --> 00:12:02,880
Policy engine needs to remain
independent from the IAC engine.

175
00:12:03,120 --> 00:12:07,380
So policies evolve faster than
infrastructure code as code, right?

176
00:12:07,710 --> 00:12:11,610
So for example, if regulators update
encryption requirements, I don't want

177
00:12:11,610 --> 00:12:16,680
to go back and rewrite Terraform modules
across doesn't suffer repositories.

178
00:12:17,460 --> 00:12:21,840
So by separating policy into its
own repository and enforcing it

179
00:12:21,840 --> 00:12:26,340
as an admission control layer,
we can update controls globally.

180
00:12:26,835 --> 00:12:29,535
Immediately without breaking
infrastructure code.

181
00:12:29,775 --> 00:12:34,335
So the end result is a framework
that gives developers what they

182
00:12:34,335 --> 00:12:37,815
need, the ability to provision
infrastructure quickly, but

183
00:12:37,815 --> 00:12:39,615
only through a compliant path.

184
00:12:40,155 --> 00:12:41,805
What I have observed is that.

185
00:12:42,255 --> 00:12:44,685
It doesn't reduce flexibility at all.

186
00:12:44,895 --> 00:12:49,875
In fact, it increases the
confidence teams know what the

187
00:12:49,875 --> 00:12:51,645
provision is already compliant.

188
00:12:51,945 --> 00:12:56,445
Operation teams know they are not
going to be chasing exceptions later,

189
00:12:56,925 --> 00:13:01,245
and because of this framework works
consistently across both cloud and

190
00:13:01,630 --> 00:13:07,085
on-prem, and we have been able to unify
governance in a way that scales globally.

191
00:13:07,585 --> 00:13:11,635
So we, we learned a lot about,
alongside applying compliance on the

192
00:13:11,635 --> 00:13:15,955
provisioning process, we also need to
ensure the new workloads themselves

193
00:13:15,955 --> 00:13:19,255
start with a compliant baseline, right?

194
00:13:19,555 --> 00:13:20,695
So what does that mean?

195
00:13:20,755 --> 00:13:25,195
That drives us, that takes us
into the golden image creation

196
00:13:25,225 --> 00:13:27,165
with compliance, right?

197
00:13:27,405 --> 00:13:31,185
Golden images are often treated
as convenient, something to,

198
00:13:31,235 --> 00:13:34,385
quickly provision because
everything is embedded into it.

199
00:13:34,685 --> 00:13:39,635
But in a regulator environment,
their foundation of compliance,

200
00:13:40,055 --> 00:13:43,535
our pipeline starts with a
vendor ISO, for example, say.

201
00:13:43,725 --> 00:13:49,035
Windows server, IORL image and immediately
applies our hard hardening baselines

202
00:13:49,035 --> 00:13:54,435
from CIS level one, as an example,
internal account and lockout policies

203
00:13:54,555 --> 00:13:59,575
and configurations for audit and logging
for a centralized lock forwarding

204
00:13:59,635 --> 00:14:01,915
right once the base hardening is done.

205
00:14:02,415 --> 00:14:09,345
We embed operational agents and malware
file integrity monitoring, like time

206
00:14:09,345 --> 00:14:13,965
synchronization settings, backup
configuration, and endpoint protection,

207
00:14:14,535 --> 00:14:19,365
and the next phase of the pipeline runs
any vulnerability related scannings

208
00:14:19,365 --> 00:14:24,855
and checks the image against all
known high severity vulnerabilities.

209
00:14:25,145 --> 00:14:31,005
So only if the images passes these
checks does it it does get version

210
00:14:31,275 --> 00:14:33,405
and published into the catalog, right?

211
00:14:33,465 --> 00:14:37,845
So every release is signed
and timestamped, giving us an

212
00:14:37,845 --> 00:14:42,660
immutable audit record of exactly
what was approved and when.

213
00:14:43,515 --> 00:14:47,055
So another key point is that.

214
00:14:47,555 --> 00:14:53,135
The golden image lifecycle is automated,
so we rebuild on fixed account,

215
00:14:53,615 --> 00:14:55,355
so every two weeks, for example.

216
00:14:55,475 --> 00:14:59,285
There are certain exceptions in
situations like WannaCry or an emergence

217
00:14:59,285 --> 00:15:04,895
of a critical CDE, so it means we
never massively patch live workloads.

218
00:15:04,925 --> 00:15:07,715
We just replaced them using
new trusted base image.

219
00:15:08,315 --> 00:15:12,765
That's how we have eliminated drift and
provided consistent audit reports for.

220
00:15:13,245 --> 00:15:15,375
Every server in the estate.

221
00:15:16,215 --> 00:15:22,305
So configuration drift, we have used power
DSC, Azure, DSC, right configuration for

222
00:15:22,305 --> 00:15:24,480
windows and civil playbooks for Linux.

223
00:15:24,980 --> 00:15:27,860
But compliance shouldn't
just stop at provisioning.

224
00:15:27,860 --> 00:15:33,470
As I mentioned earlier, it must be
extended into CICD pipelines, right?

225
00:15:33,530 --> 00:15:38,780
So let's see how the CICD automated
compliance can be baked into

226
00:15:38,780 --> 00:15:42,810
The entire process of compliance
are platform engineering.

227
00:15:43,350 --> 00:15:47,520
So we have code commits, building
the pipelines, having an approval

228
00:15:47,520 --> 00:15:49,740
blades, and then a deployment, eh.

229
00:15:50,725 --> 00:15:56,495
Doing a monitoring at around time, so
once team started using the provisioning

230
00:15:56,495 --> 00:16:01,505
framework and golden images, the next
logical step was to move compliance

231
00:16:01,505 --> 00:16:04,700
checks directly into the CICD pipeline.

232
00:16:05,270 --> 00:16:10,130
That means we embed policy testing
just like we embed unit tests.

233
00:16:10,520 --> 00:16:15,800
If someone proposes a changes to an
ISE module, the pipeline will run a

234
00:16:15,800 --> 00:16:20,900
policy test suit that validates things
like I am principles, whether it has a

235
00:16:20,960 --> 00:16:25,640
tags, is it compliant with respect to
the tags, or does it have a mandatory

236
00:16:25,640 --> 00:16:28,400
logging, encryption, and network rules?

237
00:16:28,580 --> 00:16:29,780
These are just examples.

238
00:16:30,080 --> 00:16:31,010
If anything fails.

239
00:16:31,780 --> 00:16:37,300
The policy test, the pipeline stops
and gives the engineer a precise

240
00:16:37,300 --> 00:16:40,240
feedback on which policy failed and why.

241
00:16:40,920 --> 00:16:44,820
So that not only prevents
non-complaint changes, it also

242
00:16:44,880 --> 00:16:47,160
educates the engineers over time.

243
00:16:47,640 --> 00:16:52,380
They start to understand the
regulatory intent behind the policy.

244
00:16:52,860 --> 00:16:56,520
We have also extended this
into runtime validation.

245
00:16:56,970 --> 00:17:01,980
For example, once a workload is
deployed, we run periodic complaint

246
00:17:01,980 --> 00:17:04,020
scanning using the same policies.

247
00:17:04,425 --> 00:17:10,725
That allows us to detect and
alert if anything drifts from the

248
00:17:10,815 --> 00:17:13,425
up road and standard baseline.

249
00:17:14,265 --> 00:17:18,255
The key point is that compliance
becomes a continuous activity,

250
00:17:18,555 --> 00:17:21,225
not a pointing time audit.

251
00:17:22,005 --> 00:17:25,145
So next, let's look into policy as code.

252
00:17:25,205 --> 00:17:29,555
This is a cornerstone of
compliance ops, right?

253
00:17:29,615 --> 00:17:36,155
So policy as code is really what
binds everything together, right?

254
00:17:36,425 --> 00:17:40,625
Rather than storing governance
in documents, we translate them

255
00:17:40,685 --> 00:17:42,635
into machine readable policy.

256
00:17:43,320 --> 00:17:48,420
A simple example is storage buckets
must have server side encryption

257
00:17:48,510 --> 00:17:50,910
and block public access, right?

258
00:17:50,970 --> 00:17:54,000
So we spoke about this earlier
example, so I'm continuing with the

259
00:17:54,000 --> 00:17:55,950
same example here as well, right?

260
00:17:56,280 --> 00:17:57,240
In the policy scope.

261
00:17:57,270 --> 00:18:01,810
So we write we write that in the bicep
on templates and committee to the Git.

262
00:18:02,310 --> 00:18:05,730
So when a developer attempts to
provision a bucket, the provisioning

263
00:18:05,730 --> 00:18:11,010
engine queries the policy runtime
evaluates the request and returns allow.

264
00:18:11,975 --> 00:18:17,105
RI, explanation because those
policies live in get, we can apply

265
00:18:17,105 --> 00:18:22,325
the same software development like
Lifecycle to them, and we have pool

266
00:18:22,325 --> 00:18:27,755
request, peer reviews, automated test
and approvals before a particular

267
00:18:27,755 --> 00:18:30,035
pool request is signed off.

268
00:18:30,155 --> 00:18:33,095
And we have a traceability
around what changed, right?

269
00:18:33,455 --> 00:18:39,245
So this also gives us the ability to wash
policies and roll them back if we need to.

270
00:18:39,725 --> 00:18:41,195
When the regulator asks us.

271
00:18:42,065 --> 00:18:46,025
When a particular rule was
implemented, our RY it changed.

272
00:18:46,025 --> 00:18:48,065
We have full audit trailing git.

273
00:18:48,635 --> 00:18:53,405
So one of the added benefits is
that policy as code allows the

274
00:18:53,405 --> 00:18:59,040
platform team the compliance team to
collaborate with a shared artifact.

275
00:18:59,595 --> 00:19:04,275
The risk team doesn't need to read
Terraform, and the engineering team

276
00:19:04,275 --> 00:19:08,505
doesn't need to read those documents
that contain multiple policies.

277
00:19:09,165 --> 00:19:13,060
They both look at the policy escort
repository that's shared across.

278
00:19:13,935 --> 00:19:18,705
The source of the truth changed the
entire dynamic between those schemes.

279
00:19:18,825 --> 00:19:19,725
In a nutshell.

280
00:19:19,935 --> 00:19:24,975
So for example, like if I have to come
into talking about what technologies we

281
00:19:24,975 --> 00:19:31,695
use, Corp Sentinel, OPA AWS, configures
and Azure policy for IAC, right?

282
00:19:32,055 --> 00:19:37,365
The process involves creating a
policy registry map to regulations

283
00:19:37,425 --> 00:19:38,505
version controlling them.

284
00:19:39,340 --> 00:19:41,380
Test logic embedded in it.

285
00:19:42,160 --> 00:19:49,090
We also automate remediation and evidence
generation policy as code makes compliance

286
00:19:49,120 --> 00:19:55,870
verifiable and scalable transforming
rules into enforceable and testable code.

287
00:19:56,410 --> 00:20:00,040
So now that we have made
everything compliant with all the

288
00:20:00,040 --> 00:20:04,860
frameworks, how can we make this
a balanced self-service model?

289
00:20:04,920 --> 00:20:05,340
Fadi.

290
00:20:05,960 --> 00:20:08,720
Customers are the developers to use it.

291
00:20:08,990 --> 00:20:12,150
So let's dwell into our next slide.

292
00:20:12,300 --> 00:20:16,560
Enabling self-service while
preserving compliance, right?

293
00:20:16,610 --> 00:20:20,210
I think we have very strong base
so far, building the framework,

294
00:20:20,240 --> 00:20:25,400
building the golden images, adding
the compliance, putting them into CICD

295
00:20:25,400 --> 00:20:27,980
gate so that, it can be validated.

296
00:20:28,040 --> 00:20:31,670
Look, now engineers just don't want.

297
00:20:32,200 --> 00:20:33,250
Autonomy, right?

298
00:20:33,640 --> 00:20:35,470
So engineers want autonomy, right?

299
00:20:35,500 --> 00:20:39,970
While compliance teams need
governance, the sweet spot is at

300
00:20:39,970 --> 00:20:43,600
the intersection of automation
and self-service and governance.

301
00:20:44,230 --> 00:20:49,000
Embedding compliance into self-service
platforms enable speed without

302
00:20:49,000 --> 00:20:51,670
sacrificing regulatory alignment.

303
00:20:52,570 --> 00:20:57,430
At this point, once the building
docks were in place, we focused on.

304
00:20:58,100 --> 00:21:00,560
How to make them consumable, right?

305
00:21:00,560 --> 00:21:03,800
So if they cannot be consumed,
there's no point in having

306
00:21:03,800 --> 00:21:05,540
infrastructure as code at some point.

307
00:21:06,290 --> 00:21:11,390
So we built a self-service catalog where
development teams can select from a

308
00:21:11,390 --> 00:21:13,790
set of pre-approved environment types.

309
00:21:14,300 --> 00:21:17,485
So for example, windows
service with sql and start.

310
00:21:18,350 --> 00:21:22,250
Linux server with app stack
installed containers with runtimes

311
00:21:22,250 --> 00:21:23,540
and other stuff in stock, right?

312
00:21:23,899 --> 00:21:28,520
Each of those catalog entries is
simply a wrapper around the approved

313
00:21:28,610 --> 00:21:30,020
provisioning modules, right?

314
00:21:30,170 --> 00:21:32,389
The golden image and the policy runtime.

315
00:21:33,020 --> 00:21:35,780
From a developer perspective,
it's just a click.

316
00:21:35,780 --> 00:21:39,290
If they're using a UI or an API
call, if they're running through

317
00:21:39,290 --> 00:21:42,930
some programming language and they
get the environment within minutes.

318
00:21:43,260 --> 00:21:48,060
From a compliance perspective, they're
forced through the compliant provisioning

319
00:21:48,060 --> 00:21:52,440
path, which triggers the compliant
gates and applies the golden image.

320
00:21:52,830 --> 00:21:57,120
The beauty of this model is that
the faster we make the self-service

321
00:21:57,120 --> 00:22:01,710
experience, the less incentive
there is for teams to bypass it.

322
00:22:02,340 --> 00:22:06,660
In fact, they prefer the platform
because it saves the time.

323
00:22:07,160 --> 00:22:13,370
We also track consumption and attach
metadata to every provisioned resource.

324
00:22:14,090 --> 00:22:19,510
That means we can answer auditors
like, who requested this workload?

325
00:22:19,990 --> 00:22:25,930
What policy version was enforced, and
what controls were applied immediately

326
00:22:26,050 --> 00:22:30,015
without digging through the old
emails or, change tickets, et cetera.

327
00:22:30,805 --> 00:22:34,825
So that's how we did the
enabling self-service while

328
00:22:34,825 --> 00:22:36,625
preserving the compliance.

329
00:22:37,105 --> 00:22:41,135
Let's look at case study in a
leading financial organization,

330
00:22:41,135 --> 00:22:44,825
what challenges we had, what, how,
what approach we have taken, how

331
00:22:44,825 --> 00:22:49,475
the results enhance the reduction in
the compliance exception, et cetera.

332
00:22:49,845 --> 00:22:54,945
And our, the biggest pain point for the
financial organization was that they

333
00:22:54,945 --> 00:22:57,635
didn't know the how these regulations.

334
00:22:58,205 --> 00:23:00,395
Translate into technical requirements.

335
00:23:00,845 --> 00:23:05,225
It was that every region and
every business unit integrated

336
00:23:05,225 --> 00:23:06,755
them slightly differently.

337
00:23:07,475 --> 00:23:12,695
That meant the same type of server
could be built at least six different

338
00:23:12,695 --> 00:23:15,365
ways depending on where it was applied.

339
00:23:15,695 --> 00:23:20,435
It created massive headache to at
audit time because each region had

340
00:23:20,435 --> 00:23:24,605
to justify why its configuration
is different from the others.

341
00:23:25,145 --> 00:23:26,585
So by consolidating.

342
00:23:27,335 --> 00:23:32,315
Hardening into a single golden image
pipeline and enforcing provisioning

343
00:23:32,315 --> 00:23:34,295
through a central policy engine.

344
00:23:34,865 --> 00:23:39,425
We unified all those regional
variations into a one global standard.

345
00:23:39,845 --> 00:23:44,375
The result was not only a
faster provisioning from down,

346
00:23:44,375 --> 00:23:47,855
from days to under, few hours
or less than an hour, right?

347
00:23:48,095 --> 00:23:52,655
But also a reduction in audit findings
because these were finally a, they

348
00:23:52,655 --> 00:23:58,145
were single source of truth con
for configuration and compliance.

349
00:23:58,645 --> 00:24:03,985
Another important outcome was improved
collaboration with the risk function.

350
00:24:04,465 --> 00:24:10,795
Once they saw that the policies were
implemented in code and enforced

351
00:24:10,795 --> 00:24:14,965
consistently, they were much more
comfortable delegating control to

352
00:24:14,965 --> 00:24:20,720
the engineering firm teams that in
turn sped up project delivery and

353
00:24:20,750 --> 00:24:25,405
reduced the policy debate cycles
during large platform rollouts.

354
00:24:25,905 --> 00:24:28,785
So now how can you take
this into your organization?

355
00:24:28,955 --> 00:24:33,185
Let's look at the roadmap,
the implementation roadmap.

356
00:24:33,685 --> 00:24:37,555
So if you're trying to get
started, start with a small pilot

357
00:24:37,555 --> 00:24:39,715
project through the concept.

358
00:24:40,215 --> 00:24:43,755
Next, assess your current
compliance requirements and

359
00:24:43,755 --> 00:24:46,365
automated automation opportunities.

360
00:24:46,635 --> 00:24:51,645
Define a compliance ops strategy,
roadmap, tools, processes,

361
00:24:51,735 --> 00:24:53,835
and any required art changes.

362
00:24:54,015 --> 00:24:59,610
And then implement the foundation, say
using Golden images policy as code.

363
00:25:00,240 --> 00:25:06,450
And then scale across environments
and integrate with existing workflows.

364
00:25:06,480 --> 00:25:08,880
Use CACD policy gates, right?

365
00:25:09,420 --> 00:25:14,490
Finally, measure compliance
metrics and continuously improve.

366
00:25:15,480 --> 00:25:20,450
So this is what could be implementation
roadmap for in any organizations that you

367
00:25:20,450 --> 00:25:22,730
want to implement this whole framework.

368
00:25:23,480 --> 00:25:27,175
So before we close, let me
leave you with some key.

369
00:25:27,905 --> 00:25:28,535
Takeaways.

370
00:25:28,805 --> 00:25:30,335
So key takeaways.

371
00:25:30,835 --> 00:25:36,295
First, compliance must be design
principle, not an afterthought, right?

372
00:25:36,715 --> 00:25:41,815
Second, automation is essential because
manual processes cannot keep up.

373
00:25:42,745 --> 00:25:47,965
Third, compliance ops is the natural
next effort regulated environments.

374
00:25:48,655 --> 00:25:55,585
Finally, self-service and compliance can
coexist if platforms are designed well.

375
00:25:56,185 --> 00:26:00,085
So that concludes the key takeaways
in the entire presentation.

376
00:26:00,535 --> 00:26:02,245
I would like to Thanks.

377
00:26:02,305 --> 00:26:03,505
Thank you for your time.

378
00:26:03,625 --> 00:26:08,185
I hope this session gave you a clear
roadmap to scaling compliance of

379
00:26:08,335 --> 00:26:12,505
automation in your respective industries.

380
00:26:12,535 --> 00:26:16,585
Even though I have specifically
focused on financial services.

381
00:26:17,530 --> 00:26:19,510
Thank you very much for this opportunity.

382
00:26:19,570 --> 00:26:22,090
Looking forward for more sessions in.

