1
00:00:00,720 --> 00:00:03,719
Good morning, afternoon,
evening, everyone.

2
00:00:04,420 --> 00:00:10,040
my name is Paul Edward and, I have
over 12 years of experience in

3
00:00:10,050 --> 00:00:12,070
enterprise software development.

4
00:00:12,520 --> 00:00:14,200
I love the open source community.

5
00:00:14,200 --> 00:00:16,320
I contribute to the open source community.

6
00:00:16,790 --> 00:00:17,840
I love writing.

7
00:00:18,030 --> 00:00:23,160
I speak, I build, and most
importantly, I'm a boxing advocate.

8
00:00:23,160 --> 00:00:26,384
It's I'll be talking to you about.

9
00:00:26,905 --> 00:00:31,425
A topic that is very dear to me,
the risk you don't want to win.

10
00:00:32,285 --> 00:00:39,075
I've been fortunate to work on systems
that undo sensitive transactions, which

11
00:00:39,075 --> 00:00:42,055
means security is always a top priority.

12
00:00:42,485 --> 00:00:48,744
Today, we share a story about a breach we
faced, a flaw very subtle yet devastating

13
00:00:48,745 --> 00:00:51,385
that shook our system and our confidence.

14
00:00:52,255 --> 00:00:54,185
This is the race you don't want to win.

15
00:00:54,485 --> 00:00:55,645
So let's, dive in.

16
00:00:56,145 --> 00:01:01,435
So imagine two kids running
to grab a cookie from a jar.

17
00:01:01,645 --> 00:01:06,985
The jar is supposed to hold just
one cookie, but if the kids grab at

18
00:01:07,025 --> 00:01:11,255
this exact same time, the jar might
magically let both of them win.

19
00:01:11,755 --> 00:01:12,905
That is a race condition.

20
00:01:12,955 --> 00:01:17,705
Two processes competing to access
the same resources and most of the

21
00:01:17,715 --> 00:01:19,615
time the system gets very confused.

22
00:01:20,375 --> 00:01:27,305
So in, software development, this Apple
went to process, try to assess or modify

23
00:01:27,335 --> 00:01:29,095
the same database record at the same time.

24
00:01:29,315 --> 00:01:35,045
Imagine your system is updating the
user wallet balance and to withdraw

25
00:01:35,095 --> 00:01:38,615
request, it's the database simultaneously
and there are no checks in place.

26
00:01:39,195 --> 00:01:43,255
In that case, the database might end
up processing both of them, even though

27
00:01:43,695 --> 00:01:45,675
there was only enough money for one.

28
00:01:46,325 --> 00:01:51,195
So it is like your code is running
just too fast for his own good.

29
00:01:51,635 --> 00:01:52,705
And here is the kicker.

30
00:01:53,455 --> 00:01:58,695
It doesn't matter what programming
language you're using, Java, Python,

31
00:01:58,695 --> 00:02:01,735
even SQL database aren't immune.

32
00:02:01,805 --> 00:02:07,095
Condition doesn't discriminate
the mess of any system.

33
00:02:07,175 --> 00:02:09,735
And that is if you're not careful.

34
00:02:10,235 --> 00:02:15,355
So this condition has cost
the world a lot of money.

35
00:02:15,765 --> 00:02:22,005
Companies like, night capital has lost
over 440 million, Dollars even this year

36
00:02:22,585 --> 00:02:27,935
gt bank has had the same issue according
to the news report online And they

37
00:02:27,935 --> 00:02:34,935
were like, I think they had two weeks
of transactional failures and so The

38
00:02:34,955 --> 00:02:37,455
smallest oversights most of the time.

39
00:02:37,795 --> 00:02:45,075
I think all the time they are very
catastrophic consequence So That

40
00:02:45,075 --> 00:02:48,345
is why we are talking about it so
here's what I put in our system, our

41
00:02:48,395 --> 00:02:50,035
app possesses wallet transaction.

42
00:02:50,045 --> 00:02:53,705
Let's say a user has 1,
000 in their wallets.

43
00:02:54,095 --> 00:02:57,335
Then a clever attacker discovered
he could send two withdrawal

44
00:02:57,385 --> 00:02:59,295
requests at the exact same time.

45
00:02:59,525 --> 00:03:04,065
The system, thinking it is handling
things one by one, approved both requests.

46
00:03:04,565 --> 00:03:07,035
The same 1, 000 was withdrawn twice.

47
00:03:07,485 --> 00:03:12,275
So it was like the system was just too
polite to say, hey, wait your turn.

48
00:03:12,994 --> 00:03:18,414
Now, multiply this by hundreds
of transactions and you are going

49
00:03:18,414 --> 00:03:21,074
to be staring at a massive loss.

50
00:03:22,064 --> 00:03:27,925
A financial loss of over 70 million
and a loss of sleepless nights.

51
00:03:28,465 --> 00:03:30,155
how did we, tackle this?

52
00:03:30,995 --> 00:03:33,175
We immediately launched an investigation.

53
00:03:33,185 --> 00:03:36,635
Step one was to, identify
the breach entry points.

54
00:03:36,735 --> 00:03:42,984
We come through the logs, replicated
that issue in a controlled environment.

55
00:03:43,495 --> 00:03:48,714
We use, tools analyzers and
debugging frameworks were our

56
00:03:48,714 --> 00:03:50,304
best friend at that point in time.

57
00:03:51,264 --> 00:03:53,294
It wasn't just about fixing the problem.

58
00:03:53,304 --> 00:03:54,594
We needed to understand.

59
00:03:55,304 --> 00:04:00,124
fully What really happened to be able to
prevent future exploits and I will really

60
00:04:00,124 --> 00:04:05,984
advise you to do so as well So what are
the countermeasures that we also did?

61
00:04:06,174 --> 00:04:08,384
Our first move was damage control.

62
00:04:08,834 --> 00:04:12,974
And we disabled the affected feature
first of all and implemented a

63
00:04:12,974 --> 00:04:15,764
temporary fix just to stop that exploit.

64
00:04:16,374 --> 00:04:20,224
And long term, we redesigned the
transaction flow to be able to undo

65
00:04:20,345 --> 00:04:25,165
we also added some very stricter
monitoring and, monitoring and anomaly

66
00:04:25,425 --> 00:04:30,515
detection, ensuring that subtree
regularities will just trigger an alert.

67
00:04:31,185 --> 00:04:35,035
And we also implemented an accounting
feature, the principle of double

68
00:04:35,035 --> 00:04:38,845
entry, just to make sure that for
every credit, there's a debit.

69
00:04:39,165 --> 00:04:43,835
For every debit, there's an
equivalent, credit as well.

70
00:04:44,255 --> 00:04:48,345
The preventive measure that we
took, we make sure we test for

71
00:04:48,725 --> 00:04:53,035
edge cases, this weird scenario
where your code might break.

72
00:04:53,045 --> 00:04:57,955
You have to always test for edge cases and
probably under a controlled environment,

73
00:04:57,965 --> 00:05:04,585
simulate a very high traffic, stress test
your application to see if it holds up.

74
00:05:05,085 --> 00:05:06,855
You have to always think like an attacker.

75
00:05:06,855 --> 00:05:07,555
Yeah.

76
00:05:07,555 --> 00:05:07,955
Yeah.

77
00:05:08,435 --> 00:05:11,655
If you were trying to break
your system, how will you do it?

78
00:05:11,915 --> 00:05:17,005
Ask yourself that question and review
your code with concurrency in mind.

79
00:05:17,605 --> 00:05:22,205
Ask yourself, what happens if two people
click the same button at the same time?

80
00:05:22,705 --> 00:05:26,175
Secure coding is all about
asking the right question.

81
00:05:26,645 --> 00:05:30,895
Regularly test for vulnerabilities,
anticipate edge cases,

82
00:05:31,595 --> 00:05:32,955
test concurrency on that.

83
00:05:33,635 --> 00:05:34,835
Eye loads as well.

84
00:05:35,345 --> 00:05:39,335
So I'm just going to be walking you
through a very live demo to explain to you

85
00:05:39,415 --> 00:05:42,635
in real term how, this condition works.

86
00:05:43,135 --> 00:05:49,705
So I spinned up a PHP application, this
wallet controller as a withdraw method.

87
00:05:49,705 --> 00:05:54,235
And this withdrawal method is taken
into payload, the user ID and amounts.

88
00:05:54,930 --> 00:05:58,230
The user ID to be able to
identify the wallet that we

89
00:05:58,230 --> 00:06:00,160
intend to make a withdrawal from.

90
00:06:00,700 --> 00:06:04,790
And here is where we're trying
to get the, withdraw, the wallet

91
00:06:04,820 --> 00:06:05,990
that belongs to that user.

92
00:06:06,090 --> 00:06:09,640
And if that wallet is not found,
we immediately throw an error

93
00:06:10,340 --> 00:06:11,700
that the wallet cannot be found.

94
00:06:11,790 --> 00:06:15,120
And if the wallet is found, we
check if there's sufficient, if

95
00:06:15,120 --> 00:06:17,660
the balance is sufficient enough
to be able to make a withdrawal.

96
00:06:18,160 --> 00:06:23,690
And if it, if there is no enough fund, we
trigger insufficient balance straight up.

97
00:06:23,750 --> 00:06:27,110
This code looks very cool because
you're doing all the right checks,

98
00:06:27,850 --> 00:06:30,250
all the things are rightly done here.

99
00:06:30,650 --> 00:06:35,270
And immediately after that, we deduct
the money from the user, from the

100
00:06:35,270 --> 00:06:39,893
user's wallet balance and immediately
updates our database record.

101
00:06:39,893 --> 00:06:40,940
And we.

102
00:06:41,390 --> 00:06:42,700
Is that instant?

103
00:06:42,910 --> 00:06:46,120
We also notified you that
it would rise successful.

104
00:06:46,800 --> 00:06:47,230
As well.

105
00:06:47,550 --> 00:06:51,160
And if anything goes wrong, we
throw an error telling the user that

106
00:06:51,160 --> 00:06:52,890
probably, okay, something went wrong.

107
00:06:53,400 --> 00:06:57,340
If you're looking at this code, we are
doing all the right checks in place.

108
00:06:57,380 --> 00:07:01,640
Everything is done in the way
that is expected to be done.

109
00:07:01,690 --> 00:07:06,750
And I'm sure if you try this, you probably
throw a request at these, this to walk.

110
00:07:07,575 --> 00:07:08,555
very smoothly.

111
00:07:08,745 --> 00:07:11,415
The right amount of money that
you're throwing at it is going

112
00:07:11,415 --> 00:07:13,605
to be, deducted accordingly.

113
00:07:13,915 --> 00:07:18,105
if we are going to be attacking these
probably with this condition in mind,

114
00:07:18,185 --> 00:07:19,765
let's see what is going to happen.

115
00:07:20,225 --> 00:07:26,175
So here I spinned up a Python
code base and, I'm calling, I'm

116
00:07:26,175 --> 00:07:28,465
making, A call to that endpoint.

117
00:07:28,975 --> 00:07:31,375
And then we have a user idea of one.

118
00:07:31,435 --> 00:07:34,765
And because I think I need to show you
what is happening in the database here.

119
00:07:35,245 --> 00:07:38,305
So let's look at the wallet table.

120
00:07:39,005 --> 00:07:44,285
if you look at this, we have a user idea
of one and the wallet balance is there.

121
00:07:44,705 --> 00:07:49,545
So I think let's make this, 600,
and let's save this quickly.

122
00:07:50,505 --> 00:07:57,615
So really, so yeah, is the Python
request, and, just a very busy Python

123
00:07:57,615 --> 00:08:01,725
script that sends, concurrent, multiple
concurrent requests to these endpoints.

124
00:08:01,775 --> 00:08:05,525
And I think we're just going to be
sending 10, simultaneous requests

125
00:08:05,765 --> 00:08:07,395
to these endpoints instead of one.

126
00:08:07,905 --> 00:08:12,515
I think, let me try to just,
probably simulate just one request.

127
00:08:13,125 --> 00:08:14,515
And, and see, let's see what happens.

128
00:08:14,535 --> 00:08:20,445
We're going to be deducting 100 from
the 600 box we have in our database.

129
00:08:20,995 --> 00:08:25,245
And if I'm calling this, probably only
this Python scripts, what do we get?

130
00:08:25,745 --> 00:08:29,645
as you can see, your new
wallet balance is 500 now, 500.

131
00:08:30,105 --> 00:08:33,045
And if we are to refresh
this, you will see that.

132
00:08:33,880 --> 00:08:36,300
I think, balance has been updated to 500.

133
00:08:36,410 --> 00:08:37,990
Everything works very smoothly.

134
00:08:38,460 --> 00:08:42,650
So what about if we
decide to make this, 10?

135
00:08:43,195 --> 00:08:47,475
Simultaneous request, like we are
trying to call a end point 10 times.

136
00:08:47,655 --> 00:08:52,835
And, those 10 that we're trying to deduct
a hundred, a hundred bucks, we should

137
00:08:52,835 --> 00:08:55,985
not be able to deduct the piece because
a hundred multipli by 10, I think that

138
00:08:55,985 --> 00:09:02,125
will give us, 1000 and we just have 500
bucks in our, in our wallet balance.

139
00:09:02,545 --> 00:09:03,410
So let's see what happens.

140
00:09:03,910 --> 00:09:06,050
So I'm going to be initiating this end.

141
00:09:06,550 --> 00:09:10,572
If you can see, I was able
to make this call 10 times 1,

142
00:09:10,572 --> 00:09:15,210
2, 3, 4, 5, 6, 7, 8, 9, 10.

143
00:09:15,280 --> 00:09:22,150
And he's still telling me here that
I have a hundred bucks as my balance.

144
00:09:22,180 --> 00:09:28,500
I was able to, make a withdrawal
of, 1, 000 bucks, 10 on red box.

145
00:09:29,000 --> 00:09:33,430
It's telling me, yeah, that if
I'm to refresh this, we have,

146
00:09:33,480 --> 00:09:35,910
a balance of a hundred bucks.

147
00:09:36,260 --> 00:09:37,010
What does this mean?

148
00:09:37,900 --> 00:09:38,930
I have cheated the system.

149
00:09:39,430 --> 00:09:39,780
Yeah.

150
00:09:39,780 --> 00:09:45,650
So just in case you have this, I
would advise you to run this script

151
00:09:45,650 --> 00:09:49,690
against probably your code base
and see, and probably the results

152
00:09:49,710 --> 00:09:51,100
might be very shocking to you.

153
00:09:51,600 --> 00:09:57,000
So one of the lessons that's, we learned
from this is this, I'm coming back

154
00:09:57,000 --> 00:10:03,050
to explain how you able to fix things
like this is, we, you need to know that

155
00:10:03,050 --> 00:10:06,300
small flaws have very big consequences.

156
00:10:06,300 --> 00:10:11,650
If single book, almost true brought
down our system and prevention

157
00:10:11,650 --> 00:10:13,920
is better than cure tests.

158
00:10:14,340 --> 00:10:17,370
tests, proactively test
and test repeatedly.

159
00:10:17,860 --> 00:10:23,870
Monitoring could have also caught this
earlier, but I don't think we implemented

160
00:10:23,870 --> 00:10:25,990
all of this at the earlier stage.

161
00:10:26,530 --> 00:10:28,740
And also security is a team sport.

162
00:10:29,620 --> 00:10:31,520
It's a collective effort.

163
00:10:31,970 --> 00:10:37,600
Developers, testers, even users have
roles to play in keeping systems safe.

164
00:10:38,100 --> 00:10:40,959
But the real tiki we here is this.

165
00:10:41,459 --> 00:10:47,489
Treat every bug like it could
be your next big breach.

166
00:10:47,899 --> 00:10:49,179
I think let me repeat this again.

167
00:10:49,679 --> 00:10:54,179
Treat every bug like it
could be the next big breach.

168
00:10:54,289 --> 00:10:56,539
Because sometimes it will be.

169
00:10:57,039 --> 00:10:59,609
Yes, it could be sometimes.

170
00:11:00,389 --> 00:11:05,029
So I really emphasize on also
secure design and testing

171
00:11:05,039 --> 00:11:07,099
that Every stage as well.

172
00:11:07,849 --> 00:11:12,849
So before I would go back to the
conclusion, let me quickly go back

173
00:11:12,849 --> 00:11:14,489
to the live demonstration and okay.

174
00:11:14,489 --> 00:11:15,619
How did we fix this?

175
00:11:16,169 --> 00:11:20,029
So one of the things that
we did, let me go back.

176
00:11:20,059 --> 00:11:20,409
Yeah.

177
00:11:21,189 --> 00:11:27,409
Is one of the ways we can to prevents
a race condition is to use things

178
00:11:27,409 --> 00:11:29,509
that we call disable deadlocks.

179
00:11:30,289 --> 00:11:31,599
So be able to control.

180
00:11:32,584 --> 00:11:33,674
resource access.

181
00:11:34,174 --> 00:11:38,194
Usual transaction logs and rollback
mechanism like probably your DB

182
00:11:38,194 --> 00:11:42,634
transactions to, to make sure that
when probably there is, a bridge

183
00:11:42,634 --> 00:11:46,374
at any point or there's a failure
at any point, it can roll back the

184
00:11:46,374 --> 00:11:47,934
previous record as it has entered.

185
00:11:48,924 --> 00:11:53,434
And like I said earlier, introduce
rigorous testing and probably in a

186
00:11:53,434 --> 00:11:56,944
controlled environment simulate high
concurrent scenarios to be able to show

187
00:11:56,954 --> 00:11:58,394
that your code is running very smoothly.

188
00:11:59,304 --> 00:12:01,524
So let's go back to, the code base.

189
00:12:01,574 --> 00:12:04,544
And I think that will add more
light to what I've just said.

190
00:12:05,034 --> 00:12:10,504
and that is, it's, so now
we have a hundred books.

191
00:12:10,574 --> 00:12:13,074
I think I'm going to make this, 500.

192
00:12:13,574 --> 00:12:15,484
Now, and, let's save this.

193
00:12:15,874 --> 00:12:22,224
So I implemented another method here,
where we call this, the withdraw fix.

194
00:12:22,544 --> 00:12:25,954
So we are taking in the same,
payload, the user ID and the

195
00:12:25,954 --> 00:12:27,294
amount, but what did we do here?

196
00:12:27,384 --> 00:12:33,964
We, just like I mentioned in, my
previous, on the slide that we should you

197
00:12:33,964 --> 00:12:39,574
should watch, use this, use, she used,
transaction logs and go back mechanism.

198
00:12:40,014 --> 00:12:41,164
And that was what we did here.

199
00:12:41,484 --> 00:12:44,134
Laravel has a feature like this.

200
00:12:44,134 --> 00:12:45,224
I think this is for Laravel.

201
00:12:45,294 --> 00:12:50,844
other frameworks as their, other language
as their own, method in also making sure

202
00:12:50,874 --> 00:12:55,354
for you to be able to, do your transaction
log and your go back mechanism as well.

203
00:12:55,414 --> 00:12:57,264
But this is strictly for Laravel.

204
00:12:57,794 --> 00:13:02,859
So We started the transaction here
that anything between this transaction

205
00:13:03,259 --> 00:13:07,549
when there is an issue here, it's
When there's an issue here, it should

206
00:13:07,569 --> 00:13:15,009
immediately Roll back anything that it
has done previously, so let's, sorry,

207
00:13:15,039 --> 00:13:16,489
I was not showing you the code base.

208
00:13:17,049 --> 00:13:19,679
so yeah, we started the, transaction.

209
00:13:19,679 --> 00:13:19,829
Yeah.

210
00:13:19,939 --> 00:13:21,649
I think, like I said, this
is strictly for larval.

211
00:13:22,129 --> 00:13:24,339
So now I think let me close this.

212
00:13:24,339 --> 00:13:25,409
So we can have a full screen.

213
00:13:25,909 --> 00:13:30,349
And another thing we did while
we were checking for the user

214
00:13:30,349 --> 00:13:32,779
that owns the wallet, we did
what we call log for updates.

215
00:13:32,789 --> 00:13:37,209
So we're saying that the pending, when.

216
00:13:37,889 --> 00:13:43,539
This query is being run on the
database, lock that, rule for any

217
00:13:43,549 --> 00:13:48,659
further updates till I'm done checking
what is, what I need to do here.

218
00:13:49,149 --> 00:13:53,119
See when this query is successful,
lock this for further updates.

219
00:13:53,849 --> 00:13:58,669
So and I think this is one of the first
place we need to, we are, we actually

220
00:13:58,669 --> 00:14:02,339
started solving the issue of the risk
condition and if the wallet is not

221
00:14:02,339 --> 00:14:04,609
found, you need to do the same thing.

222
00:14:04,619 --> 00:14:04,814
Thank you very much.

223
00:14:05,144 --> 00:14:09,144
If the wallet is not found, you notify
the user that the wallet is not found.

224
00:14:09,594 --> 00:14:14,944
And yeah, we do what we call, we check
in the database is, if you have, enough,

225
00:14:14,994 --> 00:14:21,804
funds in your DB and we do a row back
here, just when, your wallet balance

226
00:14:21,824 --> 00:14:25,084
is less than, the amounts, we do that.

227
00:14:25,384 --> 00:14:30,834
And if not, just in case anything,
any edit has been made to the

228
00:14:30,854 --> 00:14:32,224
database within these points.

229
00:14:32,534 --> 00:14:33,854
So we want it to be rollback.

230
00:14:34,354 --> 00:14:40,694
So here at this point, then we make
the wallet deduction on the database

231
00:14:41,044 --> 00:14:43,754
and we commit the transaction.

232
00:14:43,814 --> 00:14:47,864
And if everything is successful, we return
that successful message to the user.

233
00:14:48,334 --> 00:14:51,774
and in case of any error,
we can also roll back here.

234
00:14:51,774 --> 00:14:57,224
I think I can also take these out, we
go back here and just probably had one.

235
00:14:57,334 --> 00:15:01,574
this is just to be able to prove a
point on how we can solve this as well.

236
00:15:01,914 --> 00:15:04,884
So now we are going to
call the second endpoints.

237
00:15:04,954 --> 00:15:11,044
And I think what I call these is,
I think, let me see, we draw fixed.

238
00:15:11,544 --> 00:15:16,254
And don't forget, we have
all we are, we just have, 500

239
00:15:16,254 --> 00:15:18,204
bucks in our wallet balance.

240
00:15:18,554 --> 00:15:22,474
So I'm going to call this again,
I'm going to run this again.

241
00:15:23,254 --> 00:15:26,364
So we're going to still
simulate 10 concurrent requests

242
00:15:26,364 --> 00:15:27,604
and let's see what happens.

243
00:15:27,974 --> 00:15:31,784
So I think 10 concurrent requests,
that would still be 1000.

244
00:15:31,884 --> 00:15:36,344
I should not be able to withdraw more than
500 because that is what I have in mind.

245
00:15:36,484 --> 00:15:38,884
So we'll try it again.

246
00:15:39,384 --> 00:15:39,744
Good.

247
00:15:40,614 --> 00:15:43,184
Now, as you can see, something went wrong.

248
00:15:43,674 --> 00:15:44,794
Okay, we started.

249
00:15:45,294 --> 00:15:47,094
I hear something went wrong.

250
00:15:47,114 --> 00:15:48,244
Something went wrong.

251
00:15:48,534 --> 00:15:48,894
Yeah.

252
00:15:49,464 --> 00:15:52,334
Our first, but I would
meet the first, 100 books.

253
00:15:52,644 --> 00:15:54,344
we draw a quest 400.

254
00:15:55,304 --> 00:16:00,284
300, 200, 100, 100, zero, and
it may start saying insufficient

255
00:16:00,294 --> 00:16:02,114
balance, as you can see.

256
00:16:02,114 --> 00:16:07,964
So we could not make that same withdrawal
of 1, 000, box like we did earlier.

257
00:16:08,484 --> 00:16:11,394
So and if we are to check the
database record, yeah, I think

258
00:16:11,394 --> 00:16:13,294
it should be zero right now.

259
00:16:13,294 --> 00:16:18,734
So we've prevented the
issue of race condition.

260
00:16:19,234 --> 00:16:20,334
I really hope this is clear.

261
00:16:20,614 --> 00:16:21,524
I believe it's clear.

262
00:16:21,844 --> 00:16:27,334
So let's, and, let's go back
to, the conclusion and yeah.

263
00:16:28,324 --> 00:16:28,704
Yeah.

264
00:16:28,774 --> 00:16:29,334
So

265
00:16:29,834 --> 00:16:32,119
security is in this point is a marathon.

266
00:16:32,319 --> 00:16:34,419
it is not just a checkbox.

267
00:16:34,419 --> 00:16:35,199
It is a mindset.

268
00:16:35,299 --> 00:16:37,469
We need to have security as a mindset.

269
00:16:38,179 --> 00:16:40,899
The reason you don't want to
win is, is the race to fix

270
00:16:40,899 --> 00:16:43,549
your system after an exploits.

271
00:16:43,819 --> 00:16:49,289
So let's stay vigilant, test
everything, and remember it is better

272
00:16:49,289 --> 00:16:52,569
to prevent the fire than to put it out.

273
00:16:53,049 --> 00:16:53,479
Thank you.

