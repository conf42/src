1
00:00:00,500 --> 00:00:03,050
Welcome everyone, and
thank you for joining.

2
00:00:03,680 --> 00:00:04,279
I'm Anish.

3
00:00:04,779 --> 00:00:10,059
Today's session will focus on how
modular architecture can be a catalyst

4
00:00:10,059 --> 00:00:15,339
for scaling, agility, maintainability,
and performance in enterprise platforms.

5
00:00:16,089 --> 00:00:19,824
We'll examine the core
principles of modularity, compare

6
00:00:19,824 --> 00:00:24,729
implementation strategies, and look
at real world applications and.

7
00:00:25,464 --> 00:00:29,244
Quantifiable outcomes, especially
in service heavy domains.

8
00:00:30,174 --> 00:00:32,275
Let's understand modular architecture.

9
00:00:32,874 --> 00:00:36,055
Modular architecture decomposes
large applications into

10
00:00:36,745 --> 00:00:38,785
discrete self-funding modules.

11
00:00:39,325 --> 00:00:42,775
Each encompassing a specific
business capability.

12
00:00:43,315 --> 00:00:47,635
These modules interact via
stable interfaces, particularly

13
00:00:48,205 --> 00:00:50,215
a or messaging brokers.

14
00:00:51,175 --> 00:00:51,950
Why this matters?

15
00:00:52,765 --> 00:00:56,905
It supports independent lifecycle
management, built deploy, and scale.

16
00:00:57,655 --> 00:01:01,585
It aligns development with domain
boundaries, especially when

17
00:01:01,585 --> 00:01:03,805
using domain driven design DTT.

18
00:01:04,304 --> 00:01:09,149
It simplifies testing and CICD pipelines
by reducing blast previous of changes.

19
00:01:09,839 --> 00:01:13,035
Think of each module as a ED context.

20
00:01:13,604 --> 00:01:20,145
It owns its own stake logic and can evolve
independently making it a natural fit for.

21
00:01:20,759 --> 00:01:22,289
Cloud native systems.

22
00:01:23,100 --> 00:01:26,399
Let's break down the fundamental
rates of our modular system.

23
00:01:26,759 --> 00:01:30,080
The core characteristics
first, encapsulation.

24
00:01:30,580 --> 00:01:34,990
Encapsulation prevents tight coupling
by hiding internal implementation.

25
00:01:35,529 --> 00:01:39,880
For example, our customer
module should expose only what's

26
00:01:39,925 --> 00:01:44,320
necessary, see a customer profile
API and hide how it aggregates.

27
00:01:44,320 --> 00:01:47,110
Loyalty points, high cohesion.

28
00:01:47,844 --> 00:01:51,714
All functionalities within a
module should serve one purpose.

29
00:01:51,714 --> 00:01:57,174
A well designed order module should
not handle customer notifications.

30
00:01:57,674 --> 00:02:02,890
Loose coupling modules communicate a
synchronously or via table contracts.

31
00:02:03,360 --> 00:02:07,890
This encourages event driven
architectures, which decouple execution

32
00:02:08,029 --> 00:02:13,610
and increase fall tolerance interface
stability interfaces, example.

33
00:02:14,445 --> 00:02:19,274
The rest graph or GRPC must
remain stable across versions.

34
00:02:19,664 --> 00:02:24,475
Tools open API or proto above schemas
are essential for maintaining version

35
00:02:24,475 --> 00:02:26,875
control and backward compatibility.

36
00:02:27,375 --> 00:02:31,545
Here's what to keep in mind
when designing modular systems.

37
00:02:32,295 --> 00:02:37,065
First, separation of concerns,
divide responsibilities logically.

38
00:02:37,905 --> 00:02:40,095
Ui, business logic, data persistence.

39
00:02:41,040 --> 00:02:42,750
Must be handled independently.

40
00:02:43,230 --> 00:02:49,140
For instance, don't mix billing
logic into a product catalog module.

41
00:02:49,950 --> 00:02:57,180
Standardized interfaces, use rest or GIPC
with versioning and schema contracts,

42
00:02:57,810 --> 00:03:03,630
employ tools, Kong or API gateway
for managing and securing interfaces.

43
00:03:04,130 --> 00:03:08,930
Scalability by design, each
module can scale independently.

44
00:03:09,505 --> 00:03:14,395
Payments module can scale three
times more than a literally

45
00:03:14,395 --> 00:03:16,285
static health center module.

46
00:03:16,495 --> 00:03:18,985
Saving cost and improving throughput.

47
00:03:19,485 --> 00:03:25,175
Reusability, shared libraries or
common services, example or audit

48
00:03:25,295 --> 00:03:32,225
login should be extracted as reusable
components or SDKs port isolation.

49
00:03:32,795 --> 00:03:36,755
If the inventory service fails, the
checkout should still proceed with.

50
00:03:37,130 --> 00:03:39,290
Estimated quantities or cash data.

51
00:03:39,470 --> 00:03:41,180
This is fault tolerance in action.

52
00:03:42,140 --> 00:03:42,740
Maintainability.

53
00:03:43,240 --> 00:03:47,650
Modularity allows you to migrate
tech stacks incrementally.

54
00:03:48,370 --> 00:03:53,260
Example, you can refactor one
module from PHP two, no JS without

55
00:03:53,260 --> 00:03:55,990
affecting the rest of the system.

56
00:03:56,490 --> 00:04:02,045
Let's look at the implementation
parts, microservices, architecture.

57
00:04:02,840 --> 00:04:07,160
Each service has its own code
base, DB deployment pipeline.

58
00:04:07,910 --> 00:04:13,570
I for domains with strong service
boundaries, tools, humanities, SST

59
00:04:13,570 --> 00:04:15,850
o Docker, spring Road, et cetera.

60
00:04:16,350 --> 00:04:22,260
Modular monoliths, a single deployable
unit, but internally organized as modules.

61
00:04:22,800 --> 00:04:26,460
Great for early stage teams, or
when deployment overhead needs to be

62
00:04:26,460 --> 00:04:29,760
minimized, can evolve into microservices.

63
00:04:30,450 --> 00:04:38,120
When maturity grows, plugin architectures
core system loads or injects new features

64
00:04:38,120 --> 00:04:44,870
at one time, common NCMS E-Commerce
engines with the magnet or data platform.

65
00:04:44,870 --> 00:04:49,970
STRANA enables feature toggles a
testing, and third party integration.

66
00:04:50,470 --> 00:04:55,270
Use decision mattresses based
on deployment frequency, team

67
00:04:55,270 --> 00:04:57,310
size, service criticality.

68
00:04:57,385 --> 00:04:59,935
To choose the appropriate architecture.

69
00:05:00,435 --> 00:05:04,595
Enterprise platforms benefit in
measurable ways, faster development.

70
00:05:05,075 --> 00:05:10,685
Modular CICD pipelines means teams can
release independently less bottlenecks,

71
00:05:11,225 --> 00:05:13,145
fewer cross team dependencies.

72
00:05:14,135 --> 00:05:18,750
Performance optimization, lightweight
modules enable caching, asing

73
00:05:18,750 --> 00:05:21,090
processing, and targeted load balancing.

74
00:05:21,540 --> 00:05:26,040
Think of a high volume pricing service
tuned independently from the backend.

75
00:05:26,540 --> 00:05:33,530
Simplified art maintenance easier to
isolate and debug issues, telemetry

76
00:05:33,530 --> 00:05:38,870
tools, ANA and open telemetry shine
when service emit consistent metrics.

77
00:05:39,370 --> 00:05:40,090
Technology.

78
00:05:40,355 --> 00:05:44,410
Agno one module could run
no GS while another run.

79
00:05:44,740 --> 00:05:47,290
Python modularity enables.

80
00:05:47,305 --> 00:05:50,935
GL services without
sacrificing consistency.

81
00:05:51,435 --> 00:05:54,795
To illustrate the practical
application of modular architecture

82
00:05:54,795 --> 00:05:59,235
principles, consider an enterprise
e-commerce platform that successfully

83
00:05:59,475 --> 00:06:02,295
implemented a modular are approach.

84
00:06:02,795 --> 00:06:07,355
Product catalog module migrated
to a standalone service with

85
00:06:07,895 --> 00:06:09,755
Elasticsearch based indexing.

86
00:06:10,145 --> 00:06:13,685
This reduced query time
by 47% and allowed for.

87
00:06:14,015 --> 00:06:14,915
Passing ingestion.

88
00:06:14,915 --> 00:06:15,605
Pipelines.

89
00:06:16,475 --> 00:06:21,485
Customer management, modernizing
customer onboarding, allowed targeted

90
00:06:21,545 --> 00:06:28,145
performance improvements, resulted in
40 to 60% reduction in form abandonment.

91
00:06:28,645 --> 00:06:29,545
Order processing.

92
00:06:29,665 --> 00:06:33,805
Adopted CQRS pattern
to separate operations.

93
00:06:33,925 --> 00:06:38,935
Enable 99.99% uptime with intelligent
retries and circuit breakers.

94
00:06:39,435 --> 00:06:44,040
A module introduced modular AI
based recommendation engine using

95
00:06:44,040 --> 00:06:49,170
a plug and play architecture enable
15% increase in product discovery

96
00:06:49,350 --> 00:06:50,760
through personalized rankings.

97
00:06:51,330 --> 00:06:55,890
This shows how modular enable
modularity enables both scalability

98
00:06:55,920 --> 00:06:57,750
and feature experimentation.

99
00:06:58,250 --> 00:07:00,470
Here are the benefits of modular approach.

100
00:07:00,920 --> 00:07:06,705
Faster time to market features, ship
faster with smaller focused teams.

101
00:07:07,205 --> 00:07:08,315
Implementation speed.

102
00:07:08,585 --> 00:07:12,785
New capabilities can be added
without disrupting existing ones.

103
00:07:13,565 --> 00:07:19,085
Resource utilization teams manage their
own workloads and backlogs, increasing

104
00:07:19,085 --> 00:07:24,950
throughput team autonomy, developers
own modules end to end, leading to

105
00:07:25,030 --> 00:07:26,965
more accountability and innovation.

106
00:07:27,445 --> 00:07:30,925
This approach is key for
scaling engineering orgs beyond

107
00:07:30,925 --> 00:07:32,575
a few cross-functional teams.

108
00:07:33,075 --> 00:07:34,230
It's strong, easy.

109
00:07:35,190 --> 00:07:38,610
These are the challenges
and considerations.

110
00:07:39,570 --> 00:07:44,790
Initial complexity, setting up module
boundaries, defining contracts,

111
00:07:44,880 --> 00:07:49,230
and building pipelines take effort
early investment is required.

112
00:07:49,730 --> 00:07:50,990
Next, performance overhead.

113
00:07:51,470 --> 00:07:52,490
Too many services.

114
00:07:52,550 --> 00:07:54,830
Talking to each other
can increase latency.

115
00:07:55,370 --> 00:07:59,360
Use techniques, bulk heads, caching,
message batching and connection Pooling.

116
00:07:59,860 --> 00:08:03,420
Organizational alignment
without clarity and ownership.

117
00:08:03,810 --> 00:08:05,640
Team scan unintentionally.

118
00:08:05,790 --> 00:08:10,920
Couple modules establish clear
domain ownership supported by tools

119
00:08:10,980 --> 00:08:12,990
backstage or compass for visibility.

120
00:08:13,490 --> 00:08:15,530
Here are the best practices for adoption.

121
00:08:16,339 --> 00:08:17,870
Start with domain modeling.

122
00:08:18,349 --> 00:08:22,609
Use DVD to define module
boundaries, tools, even storming

123
00:08:22,699 --> 00:08:24,284
or context max help here.

124
00:08:25,194 --> 00:08:26,324
Interface governance.

125
00:08:27,049 --> 00:08:32,569
Use API re registries, schema
violation and contract testing.

126
00:08:33,109 --> 00:08:36,039
Example, fact incremental migration.

127
00:08:36,789 --> 00:08:39,009
Don't big bank manufacture.

128
00:08:39,729 --> 00:08:42,399
Extract one module, define KPIs.

129
00:08:42,489 --> 00:08:44,619
Validate outcomes, then proceed.

130
00:08:45,249 --> 00:08:48,639
Feature toggles help automate everything.

131
00:08:49,359 --> 00:08:54,310
CICD Code quality checks API,
lending and runtime policies.

132
00:08:54,810 --> 00:08:57,900
This supports consistency
and security at scale.

133
00:08:58,400 --> 00:09:03,920
To summarize balance agility with
stability, modular architecture allows

134
00:09:03,949 --> 00:09:09,709
innovation without compromising system
health support, sustainable evolution.

135
00:09:10,579 --> 00:09:16,310
Code bases, infra and teams
can evolve independently, gain

136
00:09:16,310 --> 00:09:18,759
a competitive edge faster.

137
00:09:18,759 --> 00:09:21,969
Reiteration cycles lower risk, and.

138
00:09:22,389 --> 00:09:26,799
Greater developer productivity of
enterprise platforms is modular,

139
00:09:27,129 --> 00:09:30,279
composable, and scalable by default.

140
00:09:30,779 --> 00:09:32,429
Thank you for your attention.

141
00:09:32,879 --> 00:09:37,229
I would love to hear your questions,
whether they are about module boundaries,

142
00:09:37,439 --> 00:09:39,599
migration tooling, or team structures.

143
00:09:40,079 --> 00:09:42,004
Feel free to connect me with me.

