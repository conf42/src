1
00:00:00,500 --> 00:00:01,329
Hi myself.

2
00:00:01,545 --> 00:00:05,734
S I do have 10 plus experience
in healthcare integration world.

3
00:00:05,734 --> 00:00:07,835
Currently I'm working
for Henry Ford Health.

4
00:00:08,335 --> 00:00:13,034
Today I would like to start with my
topic as in a building t healthcare

5
00:00:13,034 --> 00:00:17,545
modality platforms for the engineering
epic ride share integration at a scale.

6
00:00:18,045 --> 00:00:23,895
And simply saying that basically we
have an epic EHR systems I would like

7
00:00:23,895 --> 00:00:29,305
to integrate with ride share platform
with the integration for the patient.

8
00:00:29,365 --> 00:00:31,585
So this is about the topic.

9
00:00:31,685 --> 00:00:32,615
About the topic.

10
00:00:32,615 --> 00:00:37,775
So I would like to explain here are
the few agenda items that I would

11
00:00:37,775 --> 00:00:42,875
like to cover in this topic, is that
technical architecture, overview

12
00:00:42,875 --> 00:00:48,565
engineering challenges and microservices
implementation and security observability

13
00:00:48,565 --> 00:00:51,355
and machine learning ops in healthcare.

14
00:00:51,595 --> 00:00:55,335
So these are the agenda items I
would like to cover in the topic.

15
00:00:55,995 --> 00:01:02,415
Now beginning about the how this Epic
integration platform works like an, I

16
00:01:02,415 --> 00:01:07,095
want to give an example how the real
world example, it'll gain a better

17
00:01:07,095 --> 00:01:08,985
explanation about in terms of that.

18
00:01:09,315 --> 00:01:13,185
So let me begin with the problem
that affects a millions of

19
00:01:13,185 --> 00:01:15,134
patients in the United States.

20
00:01:15,225 --> 00:01:20,564
One in five patients either
misses or delays, delays.

21
00:01:21,309 --> 00:01:25,660
Simply because they don't have
any reliable transportation.

22
00:01:25,719 --> 00:01:30,339
Now imagine this is not in
just on a regular checkup.

23
00:01:30,339 --> 00:01:36,519
Think if you, if any dialysis patient or
if any patient, or if a cancer patient

24
00:01:36,519 --> 00:01:42,960
are attending a chemotherapy even missing
in a one appointment, that could be

25
00:01:42,960 --> 00:01:44,850
in a life threatening for the patient.

26
00:01:45,240 --> 00:01:48,449
So it can, it may to have
serious health consequences.

27
00:01:49,035 --> 00:01:53,165
More our hospital visits and
even shorten the life expectancy.

28
00:01:53,495 --> 00:01:59,335
And also it would create an additional
burden to the patient on the like if,

29
00:01:59,515 --> 00:02:03,355
on the insurance as well, because if the
patient doesn't show at the insurance,

30
00:02:03,405 --> 00:02:07,215
the hospital that the provider gonna
put as a no-show, and that would

31
00:02:07,215 --> 00:02:09,705
even charge also for the patient.

32
00:02:10,155 --> 00:02:10,725
So without.

33
00:02:11,490 --> 00:02:18,570
Go without attending to any kind of, any
treatment or not seeing an appointment.

34
00:02:18,650 --> 00:02:20,300
Either way the patient might be lost.

35
00:02:20,300 --> 00:02:23,000
So the thing is that the
challenge is very clear here.

36
00:02:23,330 --> 00:02:27,350
We would like to tell how the solution
is, like healthcare isn't just about

37
00:02:27,740 --> 00:02:29,630
what happens inside the hospital.

38
00:02:29,630 --> 00:02:34,580
It is also a board making sure
patients can actually get there.

39
00:02:34,640 --> 00:02:40,300
Our visions our vision is straightforward
that we want to bridge Epic EHR

40
00:02:40,930 --> 00:02:45,970
record system to the hospital, already
used to manage appointments, the

41
00:02:45,970 --> 00:02:50,719
patient data with the everyday ride
share platform with Uber and Lyft.

42
00:02:51,219 --> 00:02:55,089
The goal for every patient, reliable
in complete and timely way to reach

43
00:02:55,089 --> 00:02:58,619
their care and to the hospital and
get the better patient outcome.

44
00:02:59,189 --> 00:03:03,969
In terms of platform, the if you see
about the numbers the daily, like

45
00:03:03,969 --> 00:03:09,559
6.5 million daily patients, record
exchange the process secured across

46
00:03:09,559 --> 00:03:14,959
the systems and 2,400 plus health
system connected through the platform.

47
00:03:15,869 --> 00:03:22,349
Moving to another another topic here, how
this entire epic ride share integration

48
00:03:22,349 --> 00:03:24,329
challenges, like how it is integrated.

49
00:03:25,109 --> 00:03:28,649
There are some core components
that been involved in this

50
00:03:28,649 --> 00:03:30,389
Epic integration platform.

51
00:03:30,929 --> 00:03:38,349
So Epic Smart Fire, which is like in a
standard, it's fire, is a fast resources,

52
00:03:38,349 --> 00:03:43,779
which is now a trend in healthcare
basically where you will get the patient

53
00:03:43,829 --> 00:03:47,204
access the data within a. Using rest API.

54
00:03:47,264 --> 00:03:51,464
Earlier we used to have an HL seven
version two Dox and three dox.

55
00:03:52,124 --> 00:03:57,704
Now with the file value, it can be, it
is in a set of data standard using a

56
00:03:57,704 --> 00:04:03,624
json with an XML content that can be
used to exchange for this platform.

57
00:04:04,274 --> 00:04:07,954
And, in terms of an architecture,
when you talk in terms of technical

58
00:04:07,954 --> 00:04:14,204
side epic smart and five set standards
like in a grammar for healthcare,

59
00:04:14,204 --> 00:04:16,884
basically it would be like in a.

60
00:04:17,154 --> 00:04:19,044
Communication language easily.

61
00:04:19,044 --> 00:04:22,134
We thought it would be a
doctor's patient's systems, all

62
00:04:22,134 --> 00:04:23,634
speaking different languages.

63
00:04:24,024 --> 00:04:29,544
Now, ride share a p is like an uber relief
warrant built for healthcare platform.

64
00:04:29,544 --> 00:04:32,454
So they were designed for a consumer nce.

65
00:04:32,814 --> 00:04:36,864
So quick pickup is that estimated
arrival time, but they don't

66
00:04:36,864 --> 00:04:40,644
have a built in compliance, the
protection to send to medical data.

67
00:04:41,274 --> 00:04:45,414
So that is where there the
integration layer comes.

68
00:04:45,949 --> 00:04:49,559
Here, this layer acts as in a bridge.

69
00:04:49,559 --> 00:04:53,609
Basically it's like a translator
with a security guard combined.

70
00:04:53,609 --> 00:05:00,029
It makes sure the data flow correctly,
quickly, and securely between Epic

71
00:05:00,089 --> 00:05:03,694
and the ride share system platform
like either Uber, other Lyft.

72
00:05:04,194 --> 00:05:09,609
And moving to the second agenda
topic, is one core engineering

73
00:05:09,609 --> 00:05:10,839
challenges, basically.

74
00:05:11,199 --> 00:05:16,929
So in the core engineering challenges, we
have a bidirectional API flow management

75
00:05:16,929 --> 00:05:19,919
system and fall tolerance implementation.

76
00:05:20,339 --> 00:05:23,274
So now let's talk about the
core engineering challenges.

77
00:05:23,279 --> 00:05:29,739
The first bidirectional API flow, which
Epic needs to share an appointment

78
00:05:29,739 --> 00:05:34,364
detail and a patient can text of the
ride share information that needs to be.

79
00:05:35,084 --> 00:05:40,244
Single things like a driver location,
estimated arrival, and a drop of

80
00:05:40,244 --> 00:05:42,704
confirmation on the both sides.

81
00:05:42,704 --> 00:05:48,224
They need to be constantly sync
between I pick and the patient.

82
00:05:48,224 --> 00:05:51,554
And at the same time, the
app also need to be aware.

83
00:05:52,034 --> 00:05:56,659
So the second the the fault
tolerance implementation is that.

84
00:05:57,474 --> 00:06:02,844
What if the lift goes down, like the
system needs to instantly switch to

85
00:06:02,844 --> 00:06:07,584
another provider, like in a Uber or
without any patient even noticing.

86
00:06:07,944 --> 00:06:12,584
It's like in a, just in a GPS
rerouting you instantly, when

87
00:06:12,584 --> 00:06:16,604
a road is closed, automatically
you'll get in a reroute option.

88
00:06:16,739 --> 00:06:19,724
A the estimated arrival
is like five minutes.

89
00:06:19,724 --> 00:06:24,729
So you can choose this particular map
and you go, where the care must be

90
00:06:24,729 --> 00:06:27,519
also continue without any interruption.

91
00:06:28,019 --> 00:06:32,159
When Lyft goes down,
automatically Uber picks up.

92
00:06:32,459 --> 00:06:37,189
So that kinda platform that we
need to switch based upon that.

93
00:06:37,519 --> 00:06:42,129
And there is a third that most
important is that the HIPAA compliant

94
00:06:42,129 --> 00:06:48,289
data problems, so every single
ride request involves more than 47.

95
00:06:48,644 --> 00:06:54,614
Sensitive variables like a patient name
like entire PHI, which comes as an patient

96
00:06:54,614 --> 00:06:57,284
name, appointment type and pick up type.

97
00:06:57,524 --> 00:07:02,594
Pick up an address, notes, and
put all the mobility needs.

98
00:07:03,074 --> 00:07:08,424
Each one must be an encrypted logged
and auditable and nothing can.

99
00:07:08,769 --> 00:07:11,169
Slip through the cracks, basically.

100
00:07:11,409 --> 00:07:16,709
When in terms of these hip up compliance,
these are abstract challenges.

101
00:07:16,709 --> 00:07:21,969
They're directly impact whether the
patient makes its dialysis today or

102
00:07:21,969 --> 00:07:24,569
in a cancer, or a cancer treatment.

103
00:07:24,869 --> 00:07:29,009
So the, any difference can
make a line between good health

104
00:07:29,069 --> 00:07:30,809
and serious complications.

105
00:07:31,169 --> 00:07:35,809
So this is why engineering isn't
just about a clever code, its

106
00:07:35,809 --> 00:07:41,169
about the patient lives, depending
upon the system that we design.

107
00:07:41,499 --> 00:07:47,479
So moving to the next topic is like an
overall how this, entire platform was

108
00:07:47,479 --> 00:07:50,459
like in a core microservice architecture.

109
00:07:51,179 --> 00:07:56,249
There are like in a, some of the core
components like epic integrations and

110
00:07:56,249 --> 00:08:02,099
transport orchestrators and provider
gateway and patient profile compliance

111
00:08:02,099 --> 00:08:05,039
and age, and there are event bus Kafka.

112
00:08:05,259 --> 00:08:11,679
We have an in the Kafka, where's an
accounting platform system basically

113
00:08:11,709 --> 00:08:16,119
for a Kafka realtime events where you'll
get and transportation request state

114
00:08:16,119 --> 00:08:19,199
changes, appointment updates from Epic.

115
00:08:19,369 --> 00:08:23,834
Driver locations and ET updates
and even the compliance related

116
00:08:24,014 --> 00:08:26,054
to the audit trail as well.

117
00:08:26,054 --> 00:08:31,834
And another component is a PostgreSQL for
transactions, where it gives a complete

118
00:08:31,834 --> 00:08:37,294
registry and billing reconciliation
data and compliance and documentation

119
00:08:37,494 --> 00:08:39,234
and configuration management.

120
00:08:39,654 --> 00:08:44,724
So read of performance like
patient transportation profiles.

121
00:08:45,114 --> 00:08:49,464
Here the data to make this work reliable.

122
00:08:49,824 --> 00:08:55,614
The microservices and event driven
approach with the Kafka, we can

123
00:08:55,614 --> 00:09:00,464
stream events the patient books
when a driver updates their status.

124
00:09:01,289 --> 00:09:05,789
Our ears gives an instant hookup,
such as whether the patient needs a

125
00:09:05,789 --> 00:09:10,739
wheelchair access or that, that gives,
that helps the patient basically.

126
00:09:10,799 --> 00:09:14,739
And this is in a, this
is like an separation.

127
00:09:14,739 --> 00:09:18,369
A powerful where instant,
one giant system trying to.

128
00:09:18,879 --> 00:09:24,489
To do everything, each microservices
like in a specialized hospital wing,

129
00:09:24,489 --> 00:09:29,739
one wing for emergency care and another
for lab test, and another for surgery,

130
00:09:30,219 --> 00:09:36,639
and another for radiology oncology, each
has its own team and its operates on own

131
00:09:36,639 --> 00:09:42,159
services, but apart from that, they're
all connected base secure hallways.

132
00:09:42,909 --> 00:09:49,389
This design means each services can
scale and independently suddenly

133
00:09:49,599 --> 00:09:51,279
for more patient need rides.

134
00:09:51,609 --> 00:09:56,439
During a flu season, the ride
matching services can scale up

135
00:09:56,709 --> 00:09:59,229
without slowing down everything else.

136
00:09:59,289 --> 00:10:03,194
So it's not just an elegant, that
architecture of micro, it's a,

137
00:10:03,584 --> 00:10:08,629
it's always a board, ensures that
patients can depend on these rights

138
00:10:08,629 --> 00:10:10,134
and every time, no matter what it is.

139
00:10:10,864 --> 00:10:12,814
So moving to another agenda.

140
00:10:13,774 --> 00:10:18,895
Topic here is that Kubernetes
orchestrations and SRE practices.

141
00:10:18,895 --> 00:10:24,425
So here we come categorize as a four
components, like in a multi region

142
00:10:24,425 --> 00:10:29,345
deployment, auto scaling, and automated
failover, and can already deployments.

143
00:10:29,980 --> 00:10:35,500
So our system runs on multi
regions on AWS deployment.

144
00:10:35,980 --> 00:10:40,780
Think it, we have a backup
hospitals in different cities if

145
00:10:40,780 --> 00:10:45,400
one goes offline and patients are
automatically routed to another.

146
00:10:45,400 --> 00:10:46,390
Okay.

147
00:10:46,490 --> 00:10:49,040
So care continues without a delay.

148
00:10:49,820 --> 00:10:53,330
We also use a predictive autoscaling.

149
00:10:53,330 --> 00:10:54,350
This means.

150
00:10:55,199 --> 00:10:59,369
Which this means we study
historical clinic loads.

151
00:10:59,369 --> 00:11:04,410
For example, flu season brings
more patients, so the system at

152
00:11:04,859 --> 00:11:07,500
medically scales capacity in advance.

153
00:11:07,589 --> 00:11:13,260
For example, in the COVID we might see
this, if you have more number of patients,

154
00:11:13,349 --> 00:11:18,030
that's also, you can take in a COVID
real world example that auto scales.

155
00:11:18,030 --> 00:11:20,939
If you have more patients
affected with COVID-19 and.

156
00:11:21,660 --> 00:11:24,060
That is one of the best example
to explain for auto scaling.

157
00:11:24,599 --> 00:11:28,850
So not only flu season then
there is an active cluster.

158
00:11:29,350 --> 00:11:33,250
Meaning to our more systems run
at the same time, even if one

159
00:11:33,250 --> 00:11:38,470
fails and automatically another
node pick ups like continuously.

160
00:11:38,470 --> 00:11:41,430
If another node fails, there
would be another backup node.

161
00:11:41,820 --> 00:11:46,410
So when we roll out few, when we
roll out few new features, we don't

162
00:11:46,410 --> 00:11:49,500
push them to every one at once.

163
00:11:49,530 --> 00:11:53,370
We use canary deployments and
just like in a hospital might.

164
00:11:54,025 --> 00:11:58,525
Test a new procedure with a small
group of patients, making it as

165
00:11:58,525 --> 00:12:00,915
a standards practice together.

166
00:12:01,815 --> 00:12:05,835
So these approaches, like 99
point, whatever, these approaches,

167
00:12:05,835 --> 00:12:10,635
like four approaches, which
gives 99.9% as an uptime.

168
00:12:11,085 --> 00:12:16,445
But in healthcare uptime is,
uptime, isn't about convenience.

169
00:12:16,445 --> 00:12:17,825
It's about saving lives.

170
00:12:18,325 --> 00:12:20,215
Moving to another agenda topic.

171
00:12:20,215 --> 00:12:24,235
So security engineering and
zero trust architecture.

172
00:12:25,135 --> 00:12:29,910
So in this also we cover like the
four major components like data.

173
00:12:30,410 --> 00:12:34,845
Protection and authentication and
authorization and network security.

174
00:12:35,505 --> 00:12:39,765
So when dealing with the
patient data, the security.

175
00:12:39,825 --> 00:12:44,265
Security isn't an optional, so
it's in a foundation for a patient.

176
00:12:44,265 --> 00:12:47,355
Healthcare, when we use a zero trust.

177
00:12:47,855 --> 00:12:52,205
Security, which means that
every request must prove itself

178
00:12:52,205 --> 00:12:54,905
no matter where it comes from.

179
00:12:55,025 --> 00:12:59,805
So like checking every visit
at the hospital door, even the

180
00:13:00,255 --> 00:13:02,175
various staff badge or anything.

181
00:13:02,175 --> 00:13:07,785
So no matter what endpoint that
we are getting, so either internal

182
00:13:07,785 --> 00:13:11,865
or external application that is
hinted heating the application.

183
00:13:12,315 --> 00:13:14,060
So we always interest based.

184
00:13:14,615 --> 00:13:20,615
Rotator based tokens encrypt all the
data with a S 2 56 encryption for all

185
00:13:20,615 --> 00:13:25,125
the data transit in force or two and PKC.

186
00:13:25,125 --> 00:13:29,235
On the network side, we
secured the traffic with TLS

187
00:13:29,235 --> 00:13:31,245
and web application firewalls.

188
00:13:31,635 --> 00:13:37,515
But beyond security observability, it's
just a critical, we need a visibility

189
00:13:37,515 --> 00:13:40,825
of both technical and clinical access.

190
00:13:41,565 --> 00:13:46,635
If the API slows down, that's an it's
an ID problem, but if dialysis right

191
00:13:46,635 --> 00:13:49,815
is late, that's an a clinical problem.

192
00:13:49,815 --> 00:13:51,105
It could harm a patient.

193
00:13:51,615 --> 00:13:56,625
So our monitoring separates this signals
so the right team response quickly.

194
00:13:57,075 --> 00:14:03,305
So if we even measure a custom
SLM metrics that tides timelines

195
00:14:03,405 --> 00:14:09,425
directly due, timelines directly to
medical schedule because in one of

196
00:14:09,425 --> 00:14:14,035
the system performance is about and
just number just number and a board.

197
00:14:14,035 --> 00:14:18,065
It's about the patient getting a
care what they need and on time.

198
00:14:18,455 --> 00:14:21,365
So I would like to move to another topic.

199
00:14:21,465 --> 00:14:25,120
The machine learning ops with the
challenges in healthcare, transportation.

200
00:14:25,120 --> 00:14:29,090
This is the other topic that we are
gonna cover in this Also, there are

201
00:14:29,090 --> 00:14:33,530
some of the core components in order
for this thing, like data collection.

202
00:14:34,310 --> 00:14:38,240
Future engineering and model
deployment and con compliant

203
00:14:38,240 --> 00:14:40,310
deployment and continuous monitoring.

204
00:14:40,820 --> 00:14:46,310
So now as a boom of AI and
machine learning also plays a role

205
00:14:46,700 --> 00:14:49,230
improving the healthcare mobility.

206
00:14:49,470 --> 00:14:55,950
Our pipeline moves from data
collection into a feature engineering.

207
00:14:56,050 --> 00:15:00,040
Model development and deployment,
and finally monitoring.

208
00:15:00,370 --> 00:15:03,550
But healthcare brings a unique challenge.

209
00:15:04,150 --> 00:15:10,900
Patient data is often in incomplete,
and transparency in critical, and

210
00:15:11,230 --> 00:15:17,870
clinicians need to understand why the
AI system is made as a recommendation

211
00:15:18,380 --> 00:15:22,545
despite these challenges, the impact
significant in our deployments.

212
00:15:23,350 --> 00:15:27,640
AI help to reduce the
patient no-show by 42%.

213
00:15:28,160 --> 00:15:35,090
Here is in a simple example, I suppose
the system learns that Mr. John Doe often

214
00:15:35,090 --> 00:15:38,370
cancels the rates on Monday morning.

215
00:15:38,400 --> 00:15:43,755
A can proactively schedule a
backup for that ride and send a

216
00:15:43,915 --> 00:15:46,225
reminder reducing, risk mis care.

217
00:15:46,255 --> 00:15:54,060
So in healthcare mobility, every
predictive or step A takes a sense of one

218
00:15:54,060 --> 00:15:59,310
more patient, get there an appointment
on time leading to a better outcome.

219
00:15:59,760 --> 00:16:05,230
So if you see here the plat, the platform
what are the graph that you would use

220
00:16:05,230 --> 00:16:10,385
in the successful, 10 x graph spikes
during the weather emergencies and

221
00:16:10,905 --> 00:16:16,725
processing 15 million transportation
even in monthly and reduce 42% I

222
00:16:16,725 --> 00:16:18,525
was discussing in the previously.

223
00:16:19,005 --> 00:16:26,984
So moving to, oh the design
the design on the platform.

224
00:16:27,484 --> 00:16:32,444
So let me share the real case
study on this platform reliability

225
00:16:32,444 --> 00:16:34,064
metrics and engineering impact.

226
00:16:34,114 --> 00:16:39,634
At a midsize hospital in Chicago,
about 40% of dialysis patients are

227
00:16:39,634 --> 00:16:41,164
missing an appointment each month.

228
00:16:41,989 --> 00:16:46,669
Because of un reliability transport,
that's the nearly half of the patient

229
00:16:46,699 --> 00:16:49,339
unable to get a life saving treatment.

230
00:16:49,729 --> 00:16:54,599
We implemented this platform
integrating with Epic scheduling

231
00:16:54,599 --> 00:16:59,989
directly with Lyft, API Patient needs
like an wheelchair access for care.

232
00:17:00,489 --> 00:17:04,449
Notes we are mapped automatically
into a right request during

233
00:17:04,449 --> 00:17:06,329
a Midwest Tom in Chicago.

234
00:17:06,869 --> 00:17:12,639
So the system held a strong thanks
to multi-region failover, even

235
00:17:12,639 --> 00:17:14,139
in harsh conditions as well.

236
00:17:14,529 --> 00:17:19,299
So the patients still got their
own appointments and the results

237
00:17:19,299 --> 00:17:24,119
were dramatic, and NoShow has
been dropped almost like 40%.

238
00:17:24,699 --> 00:17:30,019
If you calculate in with just
15% in six months the patients

239
00:17:30,439 --> 00:17:31,819
reported higher satisfaction.

240
00:17:32,319 --> 00:17:37,119
When we integrated this epic rates side
platform, clinicians also received about

241
00:17:37,119 --> 00:17:43,179
20 hours each month because they no longer
had manually coordinated the transport.

242
00:17:43,179 --> 00:17:48,009
And also the insurance companies,
which are the, whatever the providers

243
00:17:48,009 --> 00:17:50,789
charge for the insurance for.

244
00:17:50,789 --> 00:17:55,229
If you don't show as a no show
that may be also charged, right?

245
00:17:55,649 --> 00:17:58,629
So that also reduces a
little bit dropped as well.

246
00:17:59,319 --> 00:18:07,949
So moving to another topic here the key
takeaways of the platform engineering.

247
00:18:08,859 --> 00:18:13,839
Here we have four components like
design API, clinical workforce and

248
00:18:13,839 --> 00:18:18,429
manage sensitive data across the
systems and implement healthcare

249
00:18:18,964 --> 00:18:20,404
compliant in CICD pipeline.

250
00:18:21,234 --> 00:18:24,954
And also align monitoring with
the clinical requirements as well.

251
00:18:25,344 --> 00:18:29,074
So for an engineer, there are
like whatever the four topics

252
00:18:29,074 --> 00:18:30,864
and the big lessons here.

253
00:18:31,254 --> 00:18:35,604
First, API in healthcare must be
designed around a patient care,

254
00:18:36,024 --> 00:18:38,954
not just in a data exchange.

255
00:18:39,944 --> 00:18:41,864
Every call impacts that real lives.

256
00:18:41,914 --> 00:18:45,484
Second appliance, isn't
this something you.

257
00:18:45,984 --> 00:18:52,044
TAG or later, CRCD pipelines must automate
approvals and audits from the beginning.

258
00:18:52,464 --> 00:18:55,884
The third is that governance
of sensitive data is critical.

259
00:18:56,694 --> 00:19:01,084
Every piece of a patient
information must be addressable.

260
00:19:01,729 --> 00:19:03,259
I end to end basically.

261
00:19:03,349 --> 00:19:09,019
And finally, the observability needs
to be served on both IT and clinicians.

262
00:19:09,119 --> 00:19:13,029
Team, it's not enough to
know if the system is fast.

263
00:19:13,059 --> 00:19:18,399
We need to know if the patient actually
got their own appointment in end time.

264
00:19:18,729 --> 00:19:20,949
So these day, these four takeaways.

265
00:19:21,339 --> 00:19:25,479
That shows that building of in healthcare
means thinking beyond the code.

266
00:19:25,749 --> 00:19:30,774
It's about designing the system
that protects scale and heal

267
00:19:30,794 --> 00:19:31,974
for this entire platform.

268
00:19:32,474 --> 00:19:38,574
So moving to another topic that I would
like to end with the entire my topic.

269
00:19:38,604 --> 00:19:43,374
It's an end basically I would like
to put my closing statement about

270
00:19:43,374 --> 00:19:48,104
this Epic integration platform
with Uber or Lyft or whatever.

271
00:19:48,494 --> 00:19:54,284
So we are not just solving a
technology problem here, we are just

272
00:19:54,284 --> 00:19:57,164
addressing healthcare equity problem.

273
00:19:57,254 --> 00:20:01,714
Too many patients miss care
because of transportation fail.

274
00:20:01,774 --> 00:20:07,524
For a platform engineers, the
challenges is to embrace compliances

275
00:20:07,584 --> 00:20:09,354
and security and reliability.

276
00:20:09,354 --> 00:20:11,844
The design drivers not blockers.

277
00:20:11,904 --> 00:20:13,464
This is a mindset where.

278
00:20:13,984 --> 00:20:16,684
What the system makes like this possible.

279
00:20:16,684 --> 00:20:21,114
And here is a moral memorable
point that I would like to leave

280
00:20:21,954 --> 00:20:23,924
in this entire presentation.

281
00:20:24,434 --> 00:20:28,514
So in healthcare uptime isn't just a
metric, it's a lifeline, basically.

282
00:20:28,964 --> 00:20:34,474
And this system we build don't
just move data code, they move the

283
00:20:34,474 --> 00:20:36,514
patients, they keep the treatment.

284
00:20:36,614 --> 00:20:38,714
And track and they save the lives.

285
00:20:39,404 --> 00:20:42,524
And that's why this works matter.

286
00:20:42,584 --> 00:20:44,614
And thank you for giving this opportunity.

287
00:20:44,734 --> 00:20:47,264
I would like to close my presentation.

