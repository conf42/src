1
00:00:00,500 --> 00:00:01,309
Hello everyone.

2
00:00:01,429 --> 00:00:05,750
I'm excited to be here at Con 42 SRA 2025.

3
00:00:05,809 --> 00:00:09,860
My name is Villa Kumar here and
I'm senior cloud platform developer

4
00:00:09,860 --> 00:00:12,559
with over 20 years of experience.

5
00:00:13,370 --> 00:00:17,210
Today I will share cloud native
reliability strategies that blends

6
00:00:17,210 --> 00:00:20,990
automation, multi-region, archite, and ai.

7
00:00:21,490 --> 00:00:27,550
All aimed at minimizing downtime and
maximizing confidence in your platforms.

8
00:00:28,050 --> 00:00:30,360
Cloud native reliability strategies.

9
00:00:30,750 --> 00:00:36,030
So today we will explore how cloud
native environments can be designed to

10
00:00:36,030 --> 00:00:42,569
maximize uptime, umbrella automation,
and integration with AI tools to

11
00:00:42,569 --> 00:00:44,580
prevent outages before they occur.

12
00:00:45,495 --> 00:00:49,965
Whether you're running microservices,
Kubernetes cluster or multi-region

13
00:00:49,965 --> 00:00:56,205
infrastructure, this talk will arm you
with best practices and strategies.

14
00:00:56,705 --> 00:00:58,175
Why reliability matters.

15
00:00:58,445 --> 00:01:00,755
Downtime is more than a technical issue.

16
00:01:01,295 --> 00:01:02,614
It's a business risk.

17
00:01:02,855 --> 00:01:07,414
It directly impacts the revenue,
customer satisfaction, and brand trust.

18
00:01:07,914 --> 00:01:12,384
In a cloud native world where
systems are always on reliability

19
00:01:12,384 --> 00:01:14,725
must be intentional and proactive.

20
00:01:15,594 --> 00:01:18,684
It's not enough to react to the incidents.

21
00:01:18,744 --> 00:01:23,514
We must prevent them, detect
them early and recover quickly.

22
00:01:24,294 --> 00:01:29,094
That starts with treating reliability
as a core architectural goal.

23
00:01:29,594 --> 00:01:32,324
So what are the key cloud
reliability challenges?

24
00:01:33,255 --> 00:01:38,174
Cloud native systems bring
agility, but also complexity.

25
00:01:38,954 --> 00:01:45,615
You have likely faced latency spikes from
autoscaling, case scaling failures between

26
00:01:45,615 --> 00:01:49,064
services and the fatigue of noisy alerts.

27
00:01:49,664 --> 00:01:56,054
These challenges are amplified by dynamic
environments and ephemeral infrastructure.

28
00:01:56,744 --> 00:02:02,205
The key is visibility, knowing what
happening in your en, in your environment.

29
00:02:02,924 --> 00:02:10,844
When and why And creating system that
can withstand this unpredictability.

30
00:02:11,344 --> 00:02:15,129
So multi legion failover one
pro and reliability strategy

31
00:02:15,309 --> 00:02:16,659
is geographical redundancy.

32
00:02:17,289 --> 00:02:20,439
Deploying your application
in multiple regions.

33
00:02:20,529 --> 00:02:25,389
Protect against zone outages,
network dis disruptions.

34
00:02:25,734 --> 00:02:30,295
Or cloud provider failures,
but redundancy is not enough.

35
00:02:30,504 --> 00:02:31,944
You must test it.

36
00:02:32,694 --> 00:02:39,954
Regular failover rails, kiosk engineering
and synthetic traffic can validate your

37
00:02:40,584 --> 00:02:43,524
setup before a real incident occur.

38
00:02:44,464 --> 00:02:50,164
Active models give the best availability,
but that requires more engineering effort.

39
00:02:50,664 --> 00:02:56,124
So self-healing automation, we
all know that humans don't scale.

40
00:02:56,724 --> 00:03:02,574
Self-healing systems are your best
defense against unexpected disruptions.

41
00:03:02,994 --> 00:03:05,654
With Kubernetes, you can
autostart containers.

42
00:03:06,134 --> 00:03:09,894
With tar Terraform, you
can rebuild infrastructure.

43
00:03:09,924 --> 00:03:13,124
Declaratively Ansible can
automate your incident responses.

44
00:03:14,099 --> 00:03:19,439
The goal is to detect, react, and
recover, ideally without a pager.

45
00:03:19,529 --> 00:03:27,289
Alerting a human at 3:00 AM so AI driven
reliability AI is no longer futuristic.

46
00:03:28,009 --> 00:03:31,939
It's here and helping
us keep systems online.

47
00:03:32,779 --> 00:03:39,169
AI model can forecast anomalies,
reduce alert fatigues, and

48
00:03:39,229 --> 00:03:41,359
with intelligent filtering.

49
00:03:41,974 --> 00:03:46,504
Identify root cause faster than we think.

50
00:03:47,004 --> 00:03:54,834
Platforms like New Relic, ai Dyna, and
Azure Monitor are already embedded in

51
00:03:55,254 --> 00:03:57,624
enterprise ob observability tracks.

52
00:03:58,124 --> 00:04:03,765
This isn't about replacing engineers,
it's about giving them superpower.

53
00:04:04,265 --> 00:04:05,825
So what are the best practices?

54
00:04:06,325 --> 00:04:10,194
Here is the checklist
designed for failure.

55
00:04:10,194 --> 00:04:16,845
Simulated with chaos tools, automate
deployments, observe everything, logs,

56
00:04:16,995 --> 00:04:21,465
metrics, traces, and real time user data.

57
00:04:21,965 --> 00:04:23,855
Promote share responsibility.

58
00:04:23,860 --> 00:04:26,735
Reliability is not just the SRE job.

59
00:04:27,515 --> 00:04:28,805
Define the tracks.

60
00:04:29,420 --> 00:04:37,610
SLOs, SLI and other budgets adopt
infrastructure as a code and ops workflow.

61
00:04:38,110 --> 00:04:39,790
So what are the final takeaways?

62
00:04:40,290 --> 00:04:45,840
If there is one thing I hope you
live with, it's resilience isn't

63
00:04:45,840 --> 00:04:50,850
just about preventing downtime,
it's about earning users trust.

64
00:04:51,735 --> 00:04:57,855
Cloud native reliability is a continuous
journey for a better design, smarter

65
00:04:57,855 --> 00:05:00,675
automation and collaborative culture.

66
00:05:01,545 --> 00:05:07,795
Let's build system that predict
failures and keep your environment

67
00:05:08,395 --> 00:05:10,795
up and running with minimal downtime.

68
00:05:11,295 --> 00:05:11,805
Thank you.

69
00:05:12,225 --> 00:05:14,325
I would like to hear
your questions thought.

70
00:05:15,120 --> 00:05:20,760
Or challenges you face, please reach
out to me or an email or LinkedIn.

71
00:05:21,260 --> 00:05:21,619
Thank you.

