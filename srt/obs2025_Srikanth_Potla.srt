1
00:00:00,500 --> 00:00:01,060
Hello everyone.

2
00:00:01,120 --> 00:00:04,979
This is working as c network
security engineer at SoFi.

3
00:00:05,979 --> 00:00:09,589
Today I'll be talking about a
critical but of an overlooked

4
00:00:09,620 --> 00:00:13,700
security challenge that is threat
modeling for observability systems.

5
00:00:14,269 --> 00:00:17,390
While we have become experts at securing
our applications and infrastructure.

6
00:00:18,290 --> 00:00:23,000
Monitoring and observability tools
often operate in a security blind spot.

7
00:00:23,840 --> 00:00:27,950
This presentation will show you
how to identify, prioritize, and

8
00:00:28,040 --> 00:00:32,420
mitigate security risks that could
turn your observability systems from

9
00:00:32,420 --> 00:00:35,810
security assets into attack vectors.

10
00:00:36,310 --> 00:00:40,420
So understanding the observability
blind side, let's start with

11
00:00:40,420 --> 00:00:41,710
the uncomfortable truth.

12
00:00:42,210 --> 00:00:46,830
Adversaries are strategically targeting
the gaps in our observability coverage.

13
00:00:47,730 --> 00:00:50,490
So think about it from
an attacker perspective.

14
00:00:50,880 --> 00:00:52,500
If you can't see it, you can't defend it.

15
00:00:53,100 --> 00:00:56,940
The first major issue is that threat
actors methodologically exploit

16
00:00:56,940 --> 00:01:01,410
areas where observability coverage
is insufficient or non-existent.

17
00:01:02,170 --> 00:01:03,550
They're not randomly probing.

18
00:01:03,640 --> 00:01:08,620
They're specifically looking for the dark
corners of your infrastructure where their

19
00:01:08,620 --> 00:01:10,780
activities won't be logged or monitored.

20
00:01:11,410 --> 00:01:15,070
The second thing, your observability
data itself becomes intelligence for

21
00:01:15,070 --> 00:01:20,860
attackers, those publicly accessible
metric logs and prices that help you

22
00:01:20,860 --> 00:01:25,530
troubleshoot, they inadvertently reveal
your system architecture, service

23
00:01:25,530 --> 00:01:27,840
dependencies, and potential entry points.

24
00:01:28,140 --> 00:01:31,770
It's like leaving a blueprint of
your house on the front porch.

25
00:01:32,370 --> 00:01:33,000
Finally.

26
00:01:33,500 --> 00:01:35,510
Requires continuous reassessment.

27
00:01:36,080 --> 00:01:39,050
Even if you have robust observability
today, hidden vulnerabilities

28
00:01:39,080 --> 00:01:40,250
evolve with your system.

29
00:01:40,940 --> 00:01:47,289
That dashboard you deployed six months
ago might now be exploring sensitive data.

30
00:01:47,440 --> 00:01:51,440
You didn't anticipate the
traditional observability triad.

31
00:01:51,560 --> 00:01:56,270
So before we dive into the security
threats, let's establish our foundation.

32
00:01:56,930 --> 00:01:59,750
The traditional observability
thread consists of three pillars.

33
00:01:59,930 --> 00:02:04,220
Metrics provide numerical representations
of the system behavior over the time.

34
00:02:04,820 --> 00:02:10,160
These include performance indicators,
resource utilization, and error rates.

35
00:02:10,550 --> 00:02:13,130
They're great for understanding
trends and setting All alerts.

36
00:02:13,760 --> 00:02:17,900
Logs are timestamped records of
discrete events within your system

37
00:02:18,650 --> 00:02:22,850
so they can capture error messages,
access attempt, and state changes.

38
00:02:23,210 --> 00:02:25,670
Logs are your detailed forensic trial.

39
00:02:26,465 --> 00:02:30,960
So the traces show to end-to-end request
flows across the distributed systems.

40
00:02:31,320 --> 00:02:36,180
The real service dependencies,
latency, bottlenecks, and errors

41
00:02:36,180 --> 00:02:37,800
propagate through your architecture.

42
00:02:38,460 --> 00:02:39,840
Here's the security challenge.

43
00:02:40,200 --> 00:02:44,760
Each of these pillars can become an
attack vector, if not properly secure.

44
00:02:45,210 --> 00:02:47,700
Your metrics can leak
architectural information.

45
00:02:47,730 --> 00:02:51,960
Your logs might contain install
data, and your traces can reveal

46
00:02:52,020 --> 00:02:54,060
business logic and the data flows.

47
00:02:54,560 --> 00:02:57,980
So coming to the security risks
in observability pipelines,

48
00:02:58,580 --> 00:03:02,810
now let's examine where the
vulnerabilities typically emerge.

49
00:03:02,810 --> 00:03:06,585
In observability pipelines, I want
you to think of your observability

50
00:03:06,590 --> 00:03:08,510
infrastructure as a three layer cake.

51
00:03:09,050 --> 00:03:13,730
Each layer represents un security
challenge at the collection points.

52
00:03:13,820 --> 00:03:18,470
Unsecured agents and collectors expose
entry points into your infrastructure.

53
00:03:19,070 --> 00:03:22,820
We see outdated agent software
running with excessive privileges.

54
00:03:23,360 --> 00:03:27,260
And transmitting data over
unencrypted challenge channels.

55
00:03:27,800 --> 00:03:33,920
So these agents often have deep access
to your systems to collect telemetry,

56
00:03:33,980 --> 00:03:36,080
making them attractive targets.

57
00:03:36,590 --> 00:03:41,780
The transport layer is where the data
is in transit, becomes vulnerable to

58
00:03:41,990 --> 00:03:46,820
interception, missing TLS encryption,
poor certificate management, and weak

59
00:03:46,820 --> 00:03:51,080
cipher suits create opportunities
for man in the middle attacks.

60
00:03:51,695 --> 00:03:55,415
Remember, this data is flowing
continuously across your network.

61
00:03:55,925 --> 00:03:59,975
Finally, storage systems create
centralized high value targets.

62
00:04:00,335 --> 00:04:05,615
Insufficient access controls means
that compromising that your monitoring

63
00:04:05,615 --> 00:04:10,235
system could expose your data from
across your enter infrastructure and

64
00:04:10,235 --> 00:04:14,495
patch vulnerabilities in time series
databases and improper data contingent

65
00:04:14,495 --> 00:04:16,925
policies compound these risks.

66
00:04:17,425 --> 00:04:22,635
Now moving to the threat actor
motivations, understand why attackers

67
00:04:22,635 --> 00:04:27,165
target observability systems
help us defend more effectively.

68
00:04:27,735 --> 00:04:32,395
Let me walk you through four
primary motivations, recognizance.

69
00:04:33,070 --> 00:04:34,540
Is often your first goal.

70
00:04:34,840 --> 00:04:38,290
Attackers leverage exposed metrics
to map your infrastructure.

71
00:04:38,800 --> 00:04:43,000
They can identify several locations,
software versions, and potential entry

72
00:04:43,000 --> 00:04:45,610
points through misconfigured dashboards.

73
00:04:46,030 --> 00:04:49,870
Your Grafana dashboard might betly
showing them exactly what they

74
00:04:49,870 --> 00:04:51,010
need to plan their attack in.

75
00:04:52,000 --> 00:04:52,485
The data.

76
00:04:52,485 --> 00:04:56,290
Exfiltration becomes possible
when sensitive information

77
00:04:56,290 --> 00:04:58,060
gets embedded in logs.

78
00:04:58,840 --> 00:05:02,140
PII secrets the access to
against accidentally logged

79
00:05:02,140 --> 00:05:05,170
to create both compliance
violations and security breaches.

80
00:05:05,710 --> 00:05:10,150
I've seen API keys database credentials,
and potential data flowing through

81
00:05:10,180 --> 00:05:16,780
log strings in plain text alert
actic in a particular indic tactic.

82
00:05:17,170 --> 00:05:21,940
Three T deliberately trigger the false
positives to overwhelm your alert systems.

83
00:05:22,600 --> 00:05:25,330
When your team is dealing with
hundreds of false arounds,

84
00:05:25,390 --> 00:05:29,140
they'll miss the one real security
incident happening simultaneously.

85
00:05:29,680 --> 00:05:33,100
Finally, leaving off the land attacks.

86
00:05:33,280 --> 00:05:37,420
Use your legitimate observability
tools as attack infrastructure.

87
00:05:37,990 --> 00:05:42,850
Monitoring systems with elevated
privileges becomes perfect

88
00:05:42,850 --> 00:05:44,195
vehicles for lateral moment.

89
00:05:44,735 --> 00:05:47,500
The attacker doesn't need
to bring their own tools.

90
00:05:47,740 --> 00:05:49,060
They use yours.

91
00:05:49,560 --> 00:05:54,140
So mapping the attack surfaces,
coming to the effective threat

92
00:05:54,140 --> 00:05:58,490
modeling requires systemic,
systematic attack surface mapping.

93
00:05:58,760 --> 00:06:00,440
This isn't a one time exercise.

94
00:06:00,740 --> 00:06:04,099
It's an ongoing process that
evolves with your infrastructure.

95
00:06:04,580 --> 00:06:06,110
Start by identifying assets.

96
00:06:06,110 --> 00:06:10,099
Document all observability
components in your architecture.

97
00:06:10,460 --> 00:06:14,570
Map the data flow between the collectors,
processors, and the visualization tools.

98
00:06:15,530 --> 00:06:19,640
Include a third party services cloud
monitoring tools and custom dashboards.

99
00:06:20,240 --> 00:06:22,220
Next, define the trust boundaries.

100
00:06:22,280 --> 00:06:27,370
Establish a very aware the data
crosses security domains, and

101
00:06:27,520 --> 00:06:31,360
determine which components have
privileged access to sensitive systems.

102
00:06:31,810 --> 00:06:35,575
Your Prometheus server might need
access to multiple environments.

103
00:06:35,875 --> 00:06:39,730
That's a trust boundary,
which worth scrutinizing.

104
00:06:40,230 --> 00:06:43,890
Enate entry points catalog
all the interfaces exposed

105
00:06:43,890 --> 00:06:45,270
to buy your monitoring tools.

106
00:06:45,600 --> 00:06:49,320
Consider the API endpoints
dashboards, agent communication

107
00:06:49,320 --> 00:06:51,090
channels, and web hook receivers.

108
00:06:51,450 --> 00:06:53,130
Each one is potential attack vector.

109
00:06:53,610 --> 00:06:58,380
Finally, prioritize the threats based
on the potential impact and likelihood

110
00:06:58,830 --> 00:07:03,000
focus your remediation efforts on
critical observability components.

111
00:07:03,000 --> 00:07:06,420
First, a compromised central
logging system has different

112
00:07:07,020 --> 00:07:09,660
implications than a compromised edge.

113
00:07:10,160 --> 00:07:11,830
Monitoring agent monitor.

114
00:07:11,830 --> 00:07:15,910
Now let's dive into this stride
for observability systems.

115
00:07:16,410 --> 00:07:19,470
Let's apply the Stride Threat
modeling framework specifically

116
00:07:19,470 --> 00:07:20,880
for observability systems.

117
00:07:21,060 --> 00:07:26,880
This table shows how each stride category
manifests in monitoring infrastructure and

118
00:07:26,880 --> 00:07:29,280
provide targeted mitigation strategies.

119
00:07:29,325 --> 00:07:32,525
Poofing in observability
means false metric injection.

120
00:07:32,975 --> 00:07:37,445
Attackers could send fabricated
metrics to SCU via monitoring

121
00:07:37,445 --> 00:07:39,305
data or hide their activities.

122
00:07:39,665 --> 00:07:43,685
Strong authentication for all agents
prevents unauthorized data submission.

123
00:07:44,050 --> 00:07:49,955
Tampering involves modify telemetry data
in transit or addressed cryptographic

124
00:07:50,015 --> 00:07:54,335
integrity checks, ensures data hasn't
been altered between collection and

125
00:07:54,335 --> 00:07:57,305
storage repudiation covers, or when.

126
00:07:57,805 --> 00:08:04,255
Audit logs are deleted or modified, so
the immutable logging pipelines prevent

127
00:08:04,255 --> 00:08:06,355
attackers from covering their attacks.

128
00:08:06,655 --> 00:08:09,835
Information disclosure happens
when sensitive metrics are

129
00:08:09,865 --> 00:08:12,565
exposed to the unauthorized users.

130
00:08:12,955 --> 00:08:16,825
Strict access controls on dashboards
and APIs prevent the data leakage.

131
00:08:17,335 --> 00:08:18,535
Denial of service.

132
00:08:18,850 --> 00:08:22,150
Targets your observability
infrastructure itself overloaded.

133
00:08:22,150 --> 00:08:25,240
Collectors can blind
you to actual attacks.

134
00:08:25,240 --> 00:08:26,980
Rate limiting and redundancy.

135
00:08:26,980 --> 00:08:28,900
Maintain monitoring availability.

136
00:08:29,400 --> 00:08:33,300
Elevation of privilege often involves
compromised monitoring agents

137
00:08:33,300 --> 00:08:35,610
that have excessive permissions.

138
00:08:35,640 --> 00:08:39,060
The least privileged principle
limits the damage from the agent.

139
00:08:39,060 --> 00:08:39,810
Compromise.

140
00:08:40,310 --> 00:08:41,930
Now, let's.

141
00:08:42,800 --> 00:08:45,200
Dive into real world attack scenarios.

142
00:08:45,440 --> 00:08:47,990
Let me walk you through a real
world attack scenario that

143
00:08:47,990 --> 00:08:52,370
demonstrates how observability
system can become the attack vector.

144
00:08:52,430 --> 00:08:56,840
And then rather than the defense
mechanism, the attack begins

145
00:08:56,840 --> 00:08:59,960
in initial access through an
outdated Grafana instance.

146
00:09:00,230 --> 00:09:04,520
The attacker exploits unknown
vulnerability and gains access

147
00:09:04,520 --> 00:09:08,300
to public dashboards that expose
internal infrastructure details.

148
00:09:09,215 --> 00:09:12,995
From those dashboards, they can
learn about your network topology

149
00:09:13,445 --> 00:09:16,445
and service dependencies, and
also the tech technology stack.

150
00:09:16,945 --> 00:09:18,925
Next comes the credential theft.

151
00:09:19,225 --> 00:09:22,435
The attacker discovers that API
keys are being logged in the plain

152
00:09:22,435 --> 00:09:24,415
text in your application logs.

153
00:09:24,865 --> 00:09:28,555
Because your monitoring service
accounts have excessive permissions,

154
00:09:28,825 --> 00:09:32,245
perhaps they were granted broad
access for easier configuration.

155
00:09:32,815 --> 00:09:35,455
These credentials provide
significant access.

156
00:09:35,995 --> 00:09:37,885
Prometheus server then becomes the.

157
00:09:38,200 --> 00:09:43,750
Private point for lateral moment
because it needs to scrape metrics from

158
00:09:43,750 --> 00:09:45,790
your, from across your infrastructure.

159
00:09:46,210 --> 00:09:48,610
It has network access to
multiple environments.

160
00:09:49,510 --> 00:09:54,580
This attackers uses the legitimate
access to move from your monitoring

161
00:09:54,580 --> 00:09:56,110
network into production systems.

162
00:09:56,680 --> 00:10:00,790
Finally, the data exfiltration
occurs through custom metric

163
00:10:00,790 --> 00:10:03,670
queries that extract sensitive data.

164
00:10:04,150 --> 00:10:05,320
The beauty of this.

165
00:10:05,820 --> 00:10:11,430
Attack from adversary perspective
is that the ex exfiltration blends

166
00:10:11,970 --> 00:10:14,130
perfectly with normal monitoring traffic.

167
00:10:15,090 --> 00:10:17,460
Your network monitoring tools
see legitimate Prometheus

168
00:10:18,270 --> 00:10:20,700
queries, not the data theft.

169
00:10:21,200 --> 00:10:25,145
Now the coming to the securing
observability pipelines.

170
00:10:25,645 --> 00:10:29,665
Now let's establish security
baselines for observability pipelines.

171
00:10:29,785 --> 00:10:31,015
These are in the suggestions.

172
00:10:31,165 --> 00:10:33,175
They're the requirements
for secure monitoring.

173
00:10:33,685 --> 00:10:35,844
100% encrypted telemetry.

174
00:10:36,415 --> 00:10:38,275
All the monitoring data must be used.

175
00:10:38,724 --> 00:10:41,844
Must use the TLS in
transit, no exceptions.

176
00:10:41,964 --> 00:10:46,224
I've seen too many environments where
metrics flow unencrypted because

177
00:10:46,224 --> 00:10:48,660
it's just internal monitoring data.

178
00:10:49,530 --> 00:10:51,599
Two-factor authentication
for dashboards access.

179
00:10:51,959 --> 00:10:56,729
Requires multi-factor authentication
for all the monitoring in interfaces.

180
00:10:57,209 --> 00:11:00,420
Your observability dashboard contains
as much as sensitive information

181
00:11:00,420 --> 00:11:01,859
as your production systems.

182
00:11:02,310 --> 00:11:07,689
So 30 day maximum rotation schedule
for monitoring credentials, service

183
00:11:07,689 --> 00:11:12,495
accounts, and the API case should
rotate regularly long-lived Credentials

184
00:11:12,515 --> 00:11:16,520
in monitoring systems are security
risks, zero secrets and logs.

185
00:11:16,939 --> 00:11:20,689
The tolerable number of credentials
in telemetry data is zero.

186
00:11:21,079 --> 00:11:25,299
Implement log scrubbing and the
secret detection to prevent the

187
00:11:25,299 --> 00:11:27,159
accidental credential exposure.

188
00:11:27,659 --> 00:11:31,679
Now let's dive into building
the alert resilience.

189
00:11:32,489 --> 00:11:36,569
Alert resilience is crucial because
attackers often target your notification

190
00:11:36,569 --> 00:11:38,669
system to hide their activities.

191
00:11:39,179 --> 00:11:43,289
Here's how to build robust alerting,
implement signal to noise filtering

192
00:11:43,379 --> 00:11:47,549
by developing correlation rules
that reduces false positives.

193
00:11:47,910 --> 00:11:50,009
Group related alerts to prevent the alert.

194
00:11:50,509 --> 00:11:55,069
And when your team stops trusting
alerts, attacker swings, establish

195
00:11:55,069 --> 00:12:00,739
alert tires with severity based
routing For notifications, critical

196
00:12:00,739 --> 00:12:05,179
security alerts mean bypassing
normal throttling mechanisms.

197
00:12:05,419 --> 00:12:10,039
Your security instance shouldn't get
lost in the queue of performing alerts,

198
00:12:10,099 --> 00:12:14,334
performance alerts, employ anomaly
detection in machine learning based.

199
00:12:14,944 --> 00:12:17,044
Detection in unusual patterns.

200
00:12:17,374 --> 00:12:20,944
Baseline normal behaviors
before deploying and alerting.

201
00:12:21,574 --> 00:12:25,894
The attackers often operate within
normal parameters to avoid detection.

202
00:12:26,344 --> 00:12:30,694
Most importantly, protect your
alert mechanism themselves.

203
00:12:31,174 --> 00:12:33,829
Treat notification system
as critical infrastructure.

204
00:12:34,409 --> 00:12:38,854
Secure your slack web books, email
servers, and paging systems with the

205
00:12:38,854 --> 00:12:42,094
same rigor as your public applications.

206
00:12:42,594 --> 00:12:47,804
Now let's dive into the action
plan from Blind Sports to insight.

207
00:12:48,014 --> 00:12:50,744
Let me leave you with a concrete
action plan to transform your

208
00:12:50,744 --> 00:12:54,854
observability from a potential
liability into a security asset.

209
00:12:55,364 --> 00:12:58,004
First, conduct an observability
threat assessment.

210
00:12:58,394 --> 00:13:02,144
Map your current monitoring architecture
using the frameworks we discussed today.

211
00:13:02,594 --> 00:13:05,954
Identify all the components, data
flows, and the trust boundaries.

212
00:13:06,764 --> 00:13:08,054
Secondly, the.

213
00:13:08,429 --> 00:13:12,749
To implement the security control
systematically secure the data at

214
00:13:12,749 --> 00:13:15,089
collection, transport, and storage phases.

215
00:13:15,209 --> 00:13:18,129
Don't try to do everything at once.

216
00:13:18,189 --> 00:13:19,479
Prioritize based on risk.

217
00:13:20,139 --> 00:13:22,979
Third, integrate with security operations.

218
00:13:23,040 --> 00:13:25,019
Align your monitoring and security teams.

219
00:13:25,079 --> 00:13:28,680
Your observability data should feed
your security operation center, and

220
00:13:28,680 --> 00:13:32,430
your security team should help secure
your monitoring infrastructure.

221
00:13:32,984 --> 00:13:35,504
Finally measure your
security effectiveness.

222
00:13:35,864 --> 00:13:39,644
Track security metrics for continuous
improvement, monitor failed

223
00:13:39,644 --> 00:13:44,624
authentication, attempts on dashboards,
credential rotation for compliance, and

224
00:13:45,104 --> 00:13:47,594
the time to detect your security events.

225
00:13:48,314 --> 00:13:50,175
The goal is transformation.

226
00:13:50,175 --> 00:13:52,904
Turn your observability
infrastructure from a blind spot

227
00:13:52,904 --> 00:13:55,564
into a security force multiplier.

228
00:13:56,064 --> 00:13:58,165
So thank you for your attention.

229
00:13:58,314 --> 00:14:02,814
Remember, secure Observability isn't
just of protecting your monitoring tools.

230
00:14:03,175 --> 00:14:08,785
It's about ensuring that your ability
to detect and respond to threat remains

231
00:14:08,785 --> 00:14:11,665
intact when you are needed it the most.

232
00:14:12,625 --> 00:14:14,874
Thank you all for paying
attention to this.

