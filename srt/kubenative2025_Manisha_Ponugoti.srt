1
00:00:00,500 --> 00:00:01,219
Hi everyone.

2
00:00:01,470 --> 00:00:02,700
I'm Manisha Otti.

3
00:00:03,310 --> 00:00:08,140
I'm so glad you're joining me
virtually today I work on designing

4
00:00:08,140 --> 00:00:12,280
modern cloud-based systems that blend
artificial intelligence with strict

5
00:00:12,280 --> 00:00:17,830
regulatory needs, especially in
healthcare, banking, and insurance.

6
00:00:18,520 --> 00:00:24,000
Today I'll share how we can build,
aI systems that are fast, scalable,

7
00:00:24,210 --> 00:00:26,750
and still safe and compliant.

8
00:00:27,250 --> 00:00:32,709
We will explore how Kubernetes helps
us automate compliance, cut manual

9
00:00:32,709 --> 00:00:35,140
work, and build a trust in ai.

10
00:00:35,739 --> 00:00:39,595
Let's start with the real world
problem we are trying to solve.

11
00:00:40,095 --> 00:00:45,315
In almost every organization I
have worked with, AI is everywhere.

12
00:00:45,565 --> 00:00:51,145
Predicting risks, automating
tasks, personalizing services.

13
00:00:51,865 --> 00:00:56,954
But in industries where lives or money
are at stake, AI has to be responsible.

14
00:00:57,495 --> 00:01:00,074
Let me give you a few examples.

15
00:01:00,704 --> 00:01:03,225
In healthcare, we can't just predict.

16
00:01:03,715 --> 00:01:04,945
Patient outcomes.

17
00:01:05,215 --> 00:01:08,695
We must show why the model
made that prediction.

18
00:01:09,295 --> 00:01:15,625
In banking, fraud detection has to be
fast, but also explainable to regulators.

19
00:01:16,285 --> 00:01:22,645
In insurance, every automated claim
decision must have a trial that says

20
00:01:22,645 --> 00:01:25,225
who change it, what, when, and why.

21
00:01:25,725 --> 00:01:27,135
So the paradox is simple.

22
00:01:27,495 --> 00:01:28,935
AI wants speed.

23
00:01:29,385 --> 00:01:31,215
But regulators want control.

24
00:01:31,715 --> 00:01:34,835
So how do we innovate
without breaking the rules?

25
00:01:35,675 --> 00:01:37,805
That's where Kubernetes comes in.

26
00:01:38,305 --> 00:01:44,765
So think of Kubernetes, like Canada, a
traffic controller for your applications.

27
00:01:45,265 --> 00:01:50,160
It tells each plane, your
AI model, where to go.

28
00:01:50,830 --> 00:01:54,010
When to take off and how to land safely.

29
00:01:54,510 --> 00:01:58,400
So this brings four big
advantages, self-healing.

30
00:01:59,130 --> 00:02:03,550
If a model crashes Kubernetes
restarts it automatically.

31
00:02:04,050 --> 00:02:08,460
Automation, you define the
desired state and the system

32
00:02:08,460 --> 00:02:11,240
keeps it that way and security.

33
00:02:11,740 --> 00:02:13,270
Workloads are isolated.

34
00:02:13,600 --> 00:02:15,970
So sensitive data, stay safe.

35
00:02:16,840 --> 00:02:21,710
Cloud independence run everywhere
on premises or in the cloud.

36
00:02:22,210 --> 00:02:27,670
For example, in one of our projects,
a healthcare data matching service

37
00:02:27,670 --> 00:02:31,819
used to take engineers hovers
to redeploy if something failed.

38
00:02:32,479 --> 00:02:37,295
After moving to Kubernetes, failures
fix it themselves within minutes.

39
00:02:37,795 --> 00:02:38,904
Zero human action.

40
00:02:39,404 --> 00:02:44,214
Let's ground this in three sectors
where compliance truly matters.

41
00:02:44,714 --> 00:02:45,285
Healthcare.

42
00:02:45,855 --> 00:02:51,225
Imagine a global clinical trial
platform analyzing the patient data.

43
00:02:51,225 --> 00:02:57,524
Daily rules require full privacy
encryption and also the audit trials.

44
00:02:58,024 --> 00:03:04,545
Also for banking, a fraud detection
model flags suspicious transactions

45
00:03:04,545 --> 00:03:11,225
in milliseconds, but it must also
store why each flag was raised Also

46
00:03:11,225 --> 00:03:14,045
for insurance and underwriting.

47
00:03:14,174 --> 00:03:18,494
Engine predicts risk, but must
explain its reasoning to both

48
00:03:18,494 --> 00:03:21,405
regulators and also to the customers.

49
00:03:21,905 --> 00:03:27,935
In all this, Kubernetes helps maintain
isolation, separating the sensitive

50
00:03:27,935 --> 00:03:30,994
data and applying security rules.

51
00:03:30,994 --> 00:03:36,554
And also on top of it, keeping the
deployment history for every version.

52
00:03:37,054 --> 00:03:40,605
Here is a simplified, look at
the architecture, like how we

53
00:03:40,605 --> 00:03:45,994
use each AI model is packaged as
a container, like a neat little

54
00:03:45,994 --> 00:03:48,314
box holding everything it needs.

55
00:03:49,035 --> 00:03:56,625
Kubernetes, deploy, deploys these boxes
managing version upgrades automatically

56
00:03:57,125 --> 00:03:59,805
and state full sets like which.

57
00:04:00,525 --> 00:04:05,835
Makes sure models that store data can
roll back safely if something breaks.

58
00:04:06,335 --> 00:04:10,124
Then comes key tops where
every configuration and model

59
00:04:10,124 --> 00:04:11,444
change is stored in kit.

60
00:04:11,944 --> 00:04:16,144
That means when an auditor
asks, who approved this change,

61
00:04:16,144 --> 00:04:17,824
you can show them instantly.

62
00:04:18,324 --> 00:04:23,814
We once had a regulator request
the exact deployment history for

63
00:04:23,814 --> 00:04:25,974
a patient data matching model.

64
00:04:26,474 --> 00:04:30,195
Because of GitHubs, it took
us seconds to show, not days.

65
00:04:30,695 --> 00:04:36,030
With Kubernetes complaints is in intent
afterthought, but it's part of the design.

66
00:04:36,530 --> 00:04:43,274
The main is a. Security rules like force
containers to run in safe read-only mode.

67
00:04:43,774 --> 00:04:48,664
Network policies, block any
communication, not explicitly allowed.

68
00:04:49,474 --> 00:04:55,329
Admission controllers reject anything
that violates policy before it ever runs.

69
00:04:55,829 --> 00:05:02,684
And also the persistent logs automatically
stores the Uneditable audit trials.

70
00:05:03,184 --> 00:05:07,474
So instead of humans manually verifying
every release, the system does it.

71
00:05:07,974 --> 00:05:13,644
For example, when one developer tried to
deploy a model that wasn't code reviewed,

72
00:05:14,184 --> 00:05:16,494
the controller blocked it automatically.

73
00:05:16,974 --> 00:05:19,404
So that saved us from a compliance breach.

74
00:05:19,904 --> 00:05:22,709
Tops turns the compliance into automation.

75
00:05:23,209 --> 00:05:27,799
Every change starts as a pull
request and automated checks validate

76
00:05:27,829 --> 00:05:30,679
security fairness and data rules.

77
00:05:31,179 --> 00:05:35,939
Then once approved, Kubernetes
applies it safely and traceable.

78
00:05:36,439 --> 00:05:41,979
If something goes wrong, we can roll
back instantly in one bank's deployment.

79
00:05:42,759 --> 00:05:45,444
Updates that use two take five hours now.

80
00:05:46,329 --> 00:05:49,659
It's taking just 12 minutes
with zero manual steps.

81
00:05:50,159 --> 00:05:56,129
Every log, every version, every
approval is automatically captured.

82
00:05:56,629 --> 00:06:03,989
Visibility builds trust, so we use
service mesh technology to watch how

83
00:06:04,079 --> 00:06:08,324
each service talks to one another,
just like a traffic camera system.

84
00:06:08,824 --> 00:06:13,684
This lets us do gradual
rollouts and instant rollback.

85
00:06:13,714 --> 00:06:18,954
If something misbehaves for
explainability, we integrate simple

86
00:06:18,954 --> 00:06:25,284
model explanation tools that visualize
what influencer each prediction.

87
00:06:25,314 --> 00:06:32,034
So when a doc, when a doctor asks, why
was this patient flagged high risk, the

88
00:06:32,034 --> 00:06:34,074
system can actually show the reasons.

89
00:06:34,574 --> 00:06:39,614
Monitoring dashboards powered by
Grafana, and similar tools give live

90
00:06:39,614 --> 00:06:42,284
insights into a performance and cost.

91
00:06:42,554 --> 00:06:43,694
Everything is transparent.

92
00:06:44,194 --> 00:06:49,204
AI systems can burn money
fast, especially with the GPUs.

93
00:06:49,704 --> 00:06:54,544
Kubernetes helps by scaling
GPU, no notes when needed.

94
00:06:55,044 --> 00:06:57,354
Assigning GPUs to critical jobs.

95
00:06:57,354 --> 00:07:03,984
First, using cheaper preempt servers
for bragger background tasks.

96
00:07:04,484 --> 00:07:08,744
In one insurance project, we cut
compute costs by 40 percentage

97
00:07:08,744 --> 00:07:14,639
simply by letting Kubernetes decide
where to turn GPUs on or off.

98
00:07:15,139 --> 00:07:20,179
We built a global patient record matching
system before Kubernetes matching

99
00:07:20,179 --> 00:07:22,309
was slow and error prone as well.

100
00:07:23,059 --> 00:07:28,949
So after migration it handled 10
million requests daily and inference

101
00:07:28,949 --> 00:07:32,779
speed improved by 73% Compliance.

102
00:07:33,279 --> 00:07:34,449
It's fully automatic.

103
00:07:35,319 --> 00:07:39,489
The system enforced healthcare
privacy policies at the deployment

104
00:07:39,489 --> 00:07:42,309
and stored immutable logs for audits.

105
00:07:42,809 --> 00:07:46,979
It's a great example of performance
and compliance coexisting.

106
00:07:47,479 --> 00:07:50,869
A multinational bank used
manual deployments that took

107
00:07:50,869 --> 00:07:52,909
covers and were error prone.

108
00:07:53,409 --> 00:07:57,369
After moving to Kubernetes
pipelines, releases drop put

109
00:07:57,369 --> 00:07:59,229
from hovers to just minutes.

110
00:08:00,189 --> 00:08:06,590
Fraud detection became four times faster,
and traceability satisfied the payment

111
00:08:06,590 --> 00:08:08,539
industry regulators automatically.

112
00:08:09,039 --> 00:08:10,929
So speed and safety in harmony.

113
00:08:11,429 --> 00:08:16,049
For a larger insurer, running
models across regions, data

114
00:08:16,049 --> 00:08:17,789
isolation was the biggest concern.

115
00:08:18,289 --> 00:08:23,390
We used Kubernetes namespace to
separate clients auto-scaling, to

116
00:08:23,390 --> 00:08:28,760
handle claim traffic, and built in
explanations for every AI decision.

117
00:08:29,260 --> 00:08:32,040
The result is cost savings.

118
00:08:32,745 --> 00:08:36,015
Transparency and happier regulators.

119
00:08:36,515 --> 00:08:39,664
So these are the patents
we follow repeatedly.

120
00:08:40,164 --> 00:08:45,745
Complaints as code like policies
or return like code submissions,

121
00:08:45,745 --> 00:08:51,129
enforce them, immutable audit
trails, logs can be altered.

122
00:08:51,629 --> 00:08:52,739
Safe rollouts.

123
00:08:53,249 --> 00:08:56,489
New models start with 5% of traffic.

124
00:08:56,640 --> 00:08:58,369
Then scale layered.

125
00:08:58,369 --> 00:09:02,300
Security training and
serving are fully separated.

126
00:09:02,800 --> 00:09:07,094
Following This ensures consistent
success no matter the industry.

127
00:09:07,594 --> 00:09:10,359
After years of deploying these systems.

128
00:09:10,859 --> 00:09:12,510
Here is what stands out.

129
00:09:13,010 --> 00:09:14,660
Automate compliance early.

130
00:09:15,439 --> 00:09:17,089
Build visibility from day one.

131
00:09:17,589 --> 00:09:18,430
Scale smart.

132
00:09:19,060 --> 00:09:20,620
Avoid over provisioning.

133
00:09:21,120 --> 00:09:22,770
GIS is a cultural shift.

134
00:09:23,579 --> 00:09:27,750
It blends transparency and also the trust.

135
00:09:28,250 --> 00:09:31,790
These lessons came from real
teams, not just theories.

136
00:09:32,290 --> 00:09:33,220
What's next?

137
00:09:33,820 --> 00:09:37,570
We are moving toward policy
driven runtime compliance where

138
00:09:38,350 --> 00:09:40,150
systems self-correct instantly.

139
00:09:40,150 --> 00:09:45,630
If a rule breaks, we are exploring
serverless GPUs, pay per prediction

140
00:09:45,630 --> 00:09:51,650
instead of perha, and we are
testing federated learning training

141
00:09:51,650 --> 00:09:55,760
models in multiple locations
without moving the private data.

142
00:09:56,260 --> 00:10:01,180
The future is compliance that's
intelligent, automatic, and invisible.

143
00:10:01,680 --> 00:10:07,700
To wrap up, Kubernetes gives us
scale, compliance and efficiency.

144
00:10:08,200 --> 00:10:14,610
We have seen 90% faster deployments,
10 million daily requests, and

145
00:10:14,610 --> 00:10:17,100
four times faster detection.

146
00:10:17,835 --> 00:10:22,175
All in regulated environments,
compliance doesn't slow innovation.

147
00:10:22,415 --> 00:10:23,285
It strengthens it.

148
00:10:24,185 --> 00:10:27,755
When it's built in, it becomes
your greatest advantage.

149
00:10:28,255 --> 00:10:30,065
Thank you all for spending your time.

150
00:10:30,335 --> 00:10:33,485
I hope this session helped
you see that compliance and

151
00:10:33,485 --> 00:10:34,970
innovation can truly work together.

