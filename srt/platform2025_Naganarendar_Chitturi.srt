1
00:00:00,500 --> 00:00:05,310
Hello, and thanks for joining
my presentation on building

2
00:00:05,310 --> 00:00:09,660
agent AI platforms, lessons from
Autonomous mortgage processing.

3
00:00:10,160 --> 00:00:15,079
If you talk to someone who went
through getting a mortgage, they

4
00:00:15,079 --> 00:00:19,190
would typically say it was like being
stuck in a bureaucratic quicksand for

5
00:00:19,190 --> 00:00:23,870
about two months, but this is what
industry leaders are now thinking.

6
00:00:24,830 --> 00:00:26,660
What if this entire time.

7
00:00:27,335 --> 00:00:28,715
The process could run by itself.

8
00:00:29,674 --> 00:00:33,935
What if instead of humans shuffling
papers between departments, you

9
00:00:33,935 --> 00:00:37,685
had intelligent systems that could
actually think through problems and

10
00:00:37,685 --> 00:00:39,474
also coordinate with each other?

11
00:00:40,104 --> 00:00:42,774
Now this is exactly what I want
to talk to you about today.

12
00:00:43,274 --> 00:00:47,374
I am now gonna in the, and I have
spent over a decade providing solutions

13
00:00:47,374 --> 00:00:51,304
to various business functions across
the financial industry, and I've

14
00:00:51,304 --> 00:00:52,834
also spent the last few years.

15
00:00:53,254 --> 00:00:57,184
Watching this space evolve from
a real equal idea to something

16
00:00:57,184 --> 00:01:00,664
that's actually transforming how
complex business process work.

17
00:01:01,164 --> 00:01:05,124
Just to set the context, let me
give you a scenario that's happening

18
00:01:05,124 --> 00:01:06,505
right now in the mortgage industry.

19
00:01:07,005 --> 00:01:12,074
Let's say someone applies for a loan on
a Friday evening, and by Monday morning,

20
00:01:12,435 --> 00:01:16,395
the system could have already verified
their income through multiple sources.

21
00:01:16,895 --> 00:01:19,265
Ordered and reviewed property appraisals.

22
00:01:20,075 --> 00:01:24,125
Reviewed their flood zone data,
coordinate with insurance providers and

23
00:01:24,125 --> 00:01:26,015
flagged any potential compliance issues.

24
00:01:26,885 --> 00:01:31,205
All the weekend when everyone
was sleeping, AI agents could

25
00:01:31,205 --> 00:01:33,785
have been working together
like a well orchestrated team.

26
00:01:34,775 --> 00:01:36,455
This is not science fiction anymore.

27
00:01:36,815 --> 00:01:39,095
This is what Agentic systems can do today.

28
00:01:39,595 --> 00:01:44,545
So let's talk about what makes
these systems different, because

29
00:01:44,545 --> 00:01:48,475
I think there's a lot of confusion
out there, especially when people

30
00:01:48,475 --> 00:01:50,695
hear what agent AI actually means.

31
00:01:51,195 --> 00:01:53,054
Think about the AI tools you use today.

32
00:01:53,475 --> 00:01:56,234
Maybe charge GPD or some other
automation in your company.

33
00:01:56,285 --> 00:01:58,505
You ask it something,
it gives you an answer.

34
00:01:58,834 --> 00:02:03,519
You feed it data, it processes data, but
you're always the one driving it, right?

35
00:02:04,324 --> 00:02:08,314
You are the conductor and the AI is
just the instrument of your orchestra.

36
00:02:09,184 --> 00:02:13,534
Agent AI is now completely
flipping that perception.

37
00:02:14,034 --> 00:02:18,834
Imagine if your AI could actually
understand the bigger picture of what

38
00:02:18,834 --> 00:02:22,944
you are trying to accomplish, and then it
can go figure out how to make it happen.

39
00:02:23,424 --> 00:02:24,864
Should I talk to other systems?

40
00:02:25,285 --> 00:02:30,055
Should I make decisions when roadblocks
come up or learning something new?

41
00:02:30,325 --> 00:02:33,864
When old steps are predetermined,
actions are not working.

42
00:02:34,364 --> 00:02:36,224
Now here's a real world example.

43
00:02:36,724 --> 00:02:39,094
Traditional systems break
whenever they encounter something

44
00:02:39,094 --> 00:02:40,739
accepted, and that's a known fact.

45
00:02:41,239 --> 00:02:45,289
Let's say someone applies for a
mortgage and their primary incomes comes

46
00:02:45,289 --> 00:02:49,009
from, not from traditional sources of
income, but from cryptocurrency mining.

47
00:02:49,789 --> 00:02:53,179
Now, this is something the
system has not seen before.

48
00:02:53,679 --> 00:02:57,969
A traditional rule-based system would
just stop and then gives out, give out

49
00:02:57,969 --> 00:03:02,399
an error message and wait for manual
intervention to come and fix it.

50
00:03:03,209 --> 00:03:05,130
However, in an agent system.

51
00:03:05,630 --> 00:03:09,920
The agent would itself recognize that
this is an income verification challenge,

52
00:03:10,420 --> 00:03:13,149
research IRS guidelines on crypto income.

53
00:03:13,809 --> 00:03:16,899
Look for similar cases in historical data.

54
00:03:17,200 --> 00:03:20,230
Maybe it can even try consulting
external tax services.

55
00:03:20,949 --> 00:03:26,499
And then once it identifies all
the solution, it may create its own

56
00:03:26,499 --> 00:03:28,119
verification pathway on the flight.

57
00:03:29,079 --> 00:03:33,579
It can also document this new approach,
so future crypto income cases can get

58
00:03:33,579 --> 00:03:37,479
handled automatically without going
through all this identification process.

59
00:03:37,979 --> 00:03:38,699
That's the difference.

60
00:03:38,759 --> 00:03:42,599
It's not just about processing the
data, it's actually thinking through

61
00:03:42,599 --> 00:03:44,369
problems just like we humans do.

62
00:03:44,869 --> 00:03:48,134
Now, let's take the next few minutes.

63
00:03:48,634 --> 00:03:52,894
I, during this time, I want
to walk you through six areas

64
00:03:52,924 --> 00:03:54,484
that I think are crucial.

65
00:03:54,784 --> 00:03:58,534
If you're con seriously considering
building these kind of systems, and I'm

66
00:03:58,534 --> 00:04:04,564
going to be honest with you, I'm going
to talk about what doesn't work just as

67
00:04:04,564 --> 00:04:10,514
much as what works because the failures
are far more instructive than the

68
00:04:10,514 --> 00:04:12,614
successes in my own personal experience.

69
00:04:13,114 --> 00:04:19,444
Let's start by providing a sense of just
how complex these mortgage workflows are.

70
00:04:20,024 --> 00:04:25,034
I, over the years, I actually sat down
and mapped out a typical mortgage process.

71
00:04:25,395 --> 00:04:31,479
And a typical mortgage process has
47 separate and discrete steps.

72
00:04:31,979 --> 00:04:36,599
Yes, it is 47 and this is, and now
you know why your mortgage takes so

73
00:04:36,599 --> 00:04:38,310
much time to process, end-to-end.

74
00:04:39,240 --> 00:04:44,010
Each of these steps require human
judgment and they're all interconnected

75
00:04:44,070 --> 00:04:45,570
in the complex dependency chains.

76
00:04:46,349 --> 00:04:51,000
You got income verification talking to
employment verification, which feeds

77
00:04:51,000 --> 00:04:55,500
into credit analysis, which in turn
impacts risk assessment and which in

78
00:04:55,500 --> 00:04:59,719
turn affects the pricing, which again,
in turn, appliance compliance checks.

79
00:05:00,219 --> 00:05:04,810
Now all of this is happening across
multiple systems, and these systems

80
00:05:04,810 --> 00:05:09,310
were built years apart or sometimes
even decades apart, and they were

81
00:05:09,310 --> 00:05:11,349
not designed to work together.

82
00:05:11,849 --> 00:05:16,829
And here's a scenario that
plays perfectly, that captures

83
00:05:16,829 --> 00:05:17,969
the old way of doing things.

84
00:05:18,469 --> 00:05:22,580
Imagine an applicant whose employer
recently switched payroll companies

85
00:05:22,640 --> 00:05:25,819
and which happens, and we've been
through such situations as well.

86
00:05:26,659 --> 00:05:30,259
The new payroll systems outputs
data in a completely different

87
00:05:30,259 --> 00:05:35,419
format than what the company
expects in the traditional process.

88
00:05:35,749 --> 00:05:37,969
This application sits
in a queue for weeks.

89
00:05:38,495 --> 00:05:42,935
While the user or the agent behind
human agent behind the scenes will

90
00:05:42,935 --> 00:05:47,375
manually figure out on how to interpret
the new format, they make phone calls,

91
00:05:47,375 --> 00:05:50,585
they reach out to other teams or maybe
even vendors to get clarification,

92
00:05:50,885 --> 00:05:52,445
and eventually they build a solution.

93
00:05:52,945 --> 00:05:58,255
Meanwhile, dozens of other applications
from employees of the same company might

94
00:05:58,255 --> 00:06:01,550
be piling up behind the scenes and they
all will be having the same problem.

95
00:06:02,050 --> 00:06:06,969
Now with the Agen approach, instead,
when the income verification agent

96
00:06:06,969 --> 00:06:11,380
encounters this new format, it
automatically recognizes the pattern

97
00:06:12,070 --> 00:06:14,140
item, multiple verification pathways.

98
00:06:14,200 --> 00:06:17,890
And within our words, it has
established a new integration protocol.

99
00:06:18,609 --> 00:06:22,150
It then shares knowledge across
the systems so that all future

100
00:06:22,150 --> 00:06:23,650
applications from this employer.

101
00:06:24,460 --> 00:06:26,739
Get processed seamlessly and successfully.

102
00:06:27,310 --> 00:06:31,210
Now, if you look at compare
both scenarios, it is not about

103
00:06:31,270 --> 00:06:33,580
making older process faster.

104
00:06:34,090 --> 00:06:38,830
It is about reimagining how the
entire business workflow operates.

105
00:06:39,300 --> 00:06:44,280
It takes a lot of change, not just
from technology, but also from how we

106
00:06:44,280 --> 00:06:45,855
understand these processes going forward.

107
00:06:46,355 --> 00:06:51,665
Now I want to dive into the
technical side of the architecture.

108
00:06:52,505 --> 00:06:56,705
If you want to build one of these
systems, there are three architectural

109
00:06:56,705 --> 00:06:58,715
foundations that you have to get right.

110
00:06:59,525 --> 00:07:02,465
You miss any one of them and
the whole thing falls apart.

111
00:07:02,465 --> 00:07:06,015
So each and every part of
this architecture is crucial

112
00:07:06,135 --> 00:07:07,546
for the success of Agent TKI.

113
00:07:08,046 --> 00:07:11,046
Now component number one
is workflow orchestration.

114
00:07:11,595 --> 00:07:16,845
One mistake that I see everybody
make constantly is on this aspect.

115
00:07:17,415 --> 00:07:22,215
They start with a simple cubase system
because they feel the process very

116
00:07:22,215 --> 00:07:27,345
straightforward, like agent A finishes
since message to agent B. Agent B

117
00:07:27,345 --> 00:07:29,845
finishes then sends a message to agency.

118
00:07:30,235 --> 00:07:31,885
Straightforward sounds reasonable.

119
00:07:32,385 --> 00:07:36,825
But when you hit a scenario where,
again, going back to the example

120
00:07:36,825 --> 00:07:40,215
of a mortgage, you're processing
a mortgage for a property in a

121
00:07:40,215 --> 00:07:41,865
flood zone during hurricane season.

122
00:07:42,365 --> 00:07:44,765
Suddenly you need property inspection.

123
00:07:45,515 --> 00:07:49,546
Flood insurance verification,
evac evacuation route analysis,

124
00:07:49,575 --> 00:07:51,106
and updated property violations.

125
00:07:51,705 --> 00:07:54,195
All of them should be running
concurrently, and all of them

126
00:07:54,195 --> 00:07:55,546
are dependent on each other.

127
00:07:56,246 --> 00:08:01,886
And all of them have completely different
processing trendlines now in a simple

128
00:08:01,886 --> 00:08:06,376
queue system, everything will get locked
up because they're on all on different

129
00:08:06,376 --> 00:08:08,606
timelines and different, dependencies.

130
00:08:09,106 --> 00:08:13,336
You need an orchestration that can
handle dynamic dependencies, resource

131
00:08:13,336 --> 00:08:15,466
contention, and resource scenarios.

132
00:08:16,336 --> 00:08:21,216
It's like the difference between a traffic
light and an air traffic control system.

133
00:08:21,666 --> 00:08:24,966
One is straightforward,
rule-based, not complex.

134
00:08:24,996 --> 00:08:29,046
The other requires a lot of
intelligence behind the scenes.

135
00:08:29,546 --> 00:08:33,346
The second component is
event driven communication.

136
00:08:33,846 --> 00:08:37,266
Think of events as the nervous
system of these platforms.

137
00:08:37,956 --> 00:08:39,036
And here's how it works.

138
00:08:39,426 --> 00:08:43,566
When a credit score gets updated
during processing, the credit agent

139
00:08:43,806 --> 00:08:46,086
broadcasts a credit score updated event.

140
00:08:46,866 --> 00:08:52,536
Now, the risk assessment agent sees this
and immediately recalculates loan terms.

141
00:08:53,166 --> 00:08:55,656
The pricing agent then
adjusts interest rates.

142
00:08:56,106 --> 00:08:58,686
The compliance agents checks
regulatory boundaries.

143
00:08:59,346 --> 00:09:03,636
All of this happens automatically
in parallel and within milliseconds.

144
00:09:04,136 --> 00:09:09,266
The beauty of this architecture is that
none of these agents have to know about

145
00:09:09,326 --> 00:09:14,006
each other and what these each other,
what other agents actually are doing.

146
00:09:14,546 --> 00:09:16,796
They just respond to relevant systems.

147
00:09:17,296 --> 00:09:19,216
To their relevance events
in their own systems.

148
00:09:19,726 --> 00:09:23,626
It's like having a really
sophisticated gossip network where

149
00:09:23,626 --> 00:09:26,866
everyone pays attention to the
rumors that they only care about,

150
00:09:27,646 --> 00:09:29,266
and we all know how that works.

151
00:09:29,766 --> 00:09:32,976
The third component is
ML Pipeline integration.

152
00:09:33,786 --> 00:09:37,266
This isn't a typical machine learning
setup where you run models on

153
00:09:37,266 --> 00:09:39,336
historical data and generate reports.

154
00:09:40,026 --> 00:09:43,116
We are talking about
real time interference.

155
00:09:43,851 --> 00:09:46,581
That deeply integrates into
the business process itself.

156
00:09:47,271 --> 00:09:51,681
Think of a fraud detection model
that's analyzing every document that

157
00:09:51,681 --> 00:09:55,371
you upload, every phone call that
you made, or every API interaction

158
00:09:55,371 --> 00:09:56,511
that is happening within the system.

159
00:09:57,011 --> 00:10:01,301
The model maintains conference scores
that change dynamically, and whenever

160
00:10:01,301 --> 00:10:06,521
the confidence drops below a certain
threshold, it can automatically trigger

161
00:10:06,731 --> 00:10:12,011
additional verification steps without
human involvement, or it can involve

162
00:10:12,011 --> 00:10:16,091
a human, human until a verification
agent is brought up to speed.

163
00:10:16,591 --> 00:10:22,711
Now let's dive deeper into event driven
architecture, because this is where

164
00:10:22,801 --> 00:10:28,561
I see a lot of systems either succeed
brilliantly or fail spectacularly.

165
00:10:29,496 --> 00:10:35,206
Now picture a si situation, I think, which
we have been all which would've all been

166
00:10:35,206 --> 00:10:37,126
in at one point of time in our career.

167
00:10:37,636 --> 00:10:41,956
It's 2:00 AM on a Saturday, and
your property valuation service goes

168
00:10:41,956 --> 00:10:43,756
down, or any service for that matter.

169
00:10:44,536 --> 00:10:46,516
Maybe it's a data center power outage.

170
00:10:47,371 --> 00:10:48,631
Maybe it's a network issue.

171
00:10:49,021 --> 00:10:51,511
It doesn't matter for the
purpose of this conversation.

172
00:10:52,381 --> 00:10:57,571
In a traditional system, every single
mortgage application requiring property

173
00:10:57,571 --> 00:11:02,311
evaluation would fail immediately and
thereby causing a massive backlog,

174
00:11:02,671 --> 00:11:07,496
which would require, triaging and
teams looking into it on a Monday

175
00:11:07,496 --> 00:11:09,746
morning through a crisis response.

176
00:11:10,246 --> 00:11:14,506
In a well designed, event driven
system, those property valuation

177
00:11:14,506 --> 00:11:15,976
requests just queued gracefully.

178
00:11:16,726 --> 00:11:22,666
Whenever the issue is troubleshot and
the service comes back online, the entire

179
00:11:22,666 --> 00:11:24,256
backlog gets processed automatically.

180
00:11:24,676 --> 00:11:30,316
Now you have zero data loss and there is
zero manual intervention and no customers

181
00:11:30,316 --> 00:11:34,906
calling in angry on a Monday morning
because your system is well designed

182
00:11:35,086 --> 00:11:36,796
through an event driven architecture.

183
00:11:37,296 --> 00:11:37,896
Now.

184
00:11:38,601 --> 00:11:42,831
Is the trick is in getting the,
architecture and design, right?

185
00:11:43,331 --> 00:11:46,841
You need to design your events with
just the right amount of information.

186
00:11:47,126 --> 00:11:51,176
Too little context and your agents
can't make intelligent decisions.

187
00:11:51,476 --> 00:11:56,546
And if you provide too much context, you
create the problem of tight coupling that

188
00:11:56,546 --> 00:11:58,286
might kill your scalability in the future.

189
00:11:59,066 --> 00:12:04,046
And in a typical market system, you
might have 4,000 and even greater

190
00:12:04,046 --> 00:12:05,816
than 5,000 different event types.

191
00:12:06,326 --> 00:12:09,666
And each has to be
carefully crafted for every.

192
00:12:10,541 --> 00:12:13,421
In a significant event that occurs
during your mortgage process.

193
00:12:13,901 --> 00:12:18,401
For example, an income verification
completed event includes only the

194
00:12:18,401 --> 00:12:23,501
verified amount, confidence score,
verification method, and any other

195
00:12:23,501 --> 00:12:25,421
anomalies that it may have encountered.

196
00:12:25,721 --> 00:12:28,511
But it should not contain
the raw bank statements.

197
00:12:28,991 --> 00:12:33,731
This keeps the agent loosely cud while
enabling even smart coordination.

198
00:12:34,686 --> 00:12:38,736
Now one of the other benefits
of event driven architecture

199
00:12:39,066 --> 00:12:43,426
is that you essentially get a
flight recorder, or a black box

200
00:12:43,426 --> 00:12:45,136
for your entire business process.

201
00:12:45,466 --> 00:12:48,886
When something goes wrong and
something always goes wrong in it.

202
00:12:49,726 --> 00:12:54,616
You can replay the exact sequence
of events and see precisely why

203
00:12:54,676 --> 00:12:56,596
and where a decision went sideways.

204
00:12:57,196 --> 00:13:00,376
And for regulated industries,
especially financial industries,

205
00:13:00,646 --> 00:13:02,026
this is absolute good.

206
00:13:02,526 --> 00:13:04,866
I want to get a quick reality check.

207
00:13:05,766 --> 00:13:06,721
We need to talk about.

208
00:13:07,551 --> 00:13:11,481
All the ways the systems can break,
because if you're thinking about

209
00:13:11,481 --> 00:13:14,961
building one, you need to know what
you're getting into and what are the

210
00:13:14,961 --> 00:13:16,401
possibilities that it might break.

211
00:13:17,271 --> 00:13:22,431
One instance is every organization
has legacy integration, nightmares.

212
00:13:22,861 --> 00:13:26,881
For example, mainframe is something
that is still not dispensable

213
00:13:26,941 --> 00:13:28,081
in the financial industry.

214
00:13:28,531 --> 00:13:31,891
And I want to talk about the mainframe
legacy integration nightmare.

215
00:13:32,611 --> 00:13:36,701
That's a scenario where this is
scenario where most developers and even

216
00:13:36,701 --> 00:13:38,811
platform engineers, get nightmares.

217
00:13:39,726 --> 00:13:43,926
You are building this beautiful,
modern agent system, and then

218
00:13:43,926 --> 00:13:48,846
you discover that some loan data
or metadata lives on a mainframe

219
00:13:48,846 --> 00:13:51,216
system, which was built in the 1980s.

220
00:13:51,706 --> 00:13:52,876
And there are no APIs.

221
00:13:52,876 --> 00:13:57,616
You just get one batch file every day
that contains, the previous updated,

222
00:13:57,616 --> 00:13:58,846
the previous days updated data.

223
00:13:59,446 --> 00:14:04,186
And the data formats are in
such a way that even XMLs

224
00:14:04,186 --> 00:14:05,596
look like modern technology.

225
00:14:06,376 --> 00:14:10,786
You end up building, what can be
called as a legacy translation agent

226
00:14:11,456 --> 00:14:15,926
where an entire AI system whose job
is to just speak mainframe day to day.

227
00:14:16,426 --> 00:14:20,476
It converts modern event streams
into formats that would've been even

228
00:14:20,516 --> 00:14:24,566
cutting edge technology and translates
the responses back into something

229
00:14:24,626 --> 00:14:26,126
other agents also can understand.

230
00:14:26,816 --> 00:14:31,466
Now, this agent will act as a bridge
between your legacy systems and

231
00:14:31,466 --> 00:14:33,266
then the modern agent AI systems.

232
00:14:33,766 --> 00:14:37,576
Sometimes these translation agents
becomes the most sophisticated

233
00:14:37,576 --> 00:14:39,256
component in your entire component.

234
00:14:39,756 --> 00:14:42,486
The next one is state
management complexity.

235
00:14:42,876 --> 00:14:47,306
Now, here's a fun challenge where
in a distributed state management,

236
00:14:47,846 --> 00:14:52,406
you know long running process or a
problem, mortgage applications can

237
00:14:52,406 --> 00:14:54,476
stay active for 60 days or more.

238
00:14:55,206 --> 00:14:59,346
Sometimes your rate log may extend
even for 90 days or 180 days, or even

239
00:14:59,346 --> 00:15:03,276
360 days depending upon the contract
you hold with your mortgage provider.

240
00:15:03,906 --> 00:15:08,406
Now, during this time, applications
can change, applicants can change,

241
00:15:08,586 --> 00:15:12,426
property values can fluctuate,
interest rates can shift, and even

242
00:15:12,426 --> 00:15:14,286
new regulations can come into effect.

243
00:15:14,676 --> 00:15:19,626
Now, a dozens of autonomous agents
have to be synchronized because

244
00:15:19,836 --> 00:15:24,306
each of these aspects are handled
by different autonomous agents.

245
00:15:24,816 --> 00:15:27,516
Now the naive approach is to store.

246
00:15:28,476 --> 00:15:32,626
Every current state that you have in
a database somewhere so that when an

247
00:15:32,626 --> 00:15:38,596
agent crashes and restarts, especially
in a distributed systems, you will have

248
00:15:38,606 --> 00:15:40,616
context which you did not have before.

249
00:15:41,156 --> 00:15:44,546
You end up needing something
like even sourcing, where you

250
00:15:44,546 --> 00:15:48,086
store every single thing that
ever happened to an application.

251
00:15:48,596 --> 00:15:51,596
Any agent can rebuild its
complete understanding just

252
00:15:51,596 --> 00:15:52,826
by replaying the events team.

253
00:15:53,326 --> 00:15:56,026
The third challenge is
scalability optimization.

254
00:15:56,526 --> 00:16:00,996
Credit analysis for a standard W2
employee might take 30 seconds,

255
00:16:01,446 --> 00:16:05,406
but that is just one piece of
the pie of mortgage applicants.

256
00:16:05,976 --> 00:16:09,546
But when you throw in self-employed
applicants, you have multiple, they

257
00:16:09,546 --> 00:16:13,586
may have multiple, they have stock
income, they may have cryptocurrency

258
00:16:13,586 --> 00:16:17,996
income, and also international
assets, and suddenly you are looking

259
00:16:17,996 --> 00:16:19,796
at 20 minutes of processing time.

260
00:16:20,296 --> 00:16:24,076
But how do you plan for an infrastructure
with that kind of variability?

261
00:16:24,976 --> 00:16:30,046
You need adaptive resource allocation
that can monitor agent behavior patterns

262
00:16:30,436 --> 00:16:34,876
and automatically spin up capacity when
complex cases start hitting the system.

263
00:16:35,656 --> 00:16:39,541
Now during the tax season,
which also aligns with the,

264
00:16:39,716 --> 00:16:41,576
summer school of summer season.

265
00:16:42,236 --> 00:16:46,616
Mortgage applications spike and the
systems might actually scale your

266
00:16:46,616 --> 00:16:48,686
income verification capacity by 300%.

267
00:16:49,256 --> 00:16:54,056
And this is without anyone touching a
configuration file to scale up or scale

268
00:16:54,056 --> 00:16:58,231
down, and all happening intelligently
and automatically behind the scenes.

269
00:16:58,731 --> 00:17:02,781
Now in financial services and
really any regulated industry,

270
00:17:03,291 --> 00:17:05,216
you can't just say the AI did it.

271
00:17:05,716 --> 00:17:10,426
Every decision has to be explainable,
auditable, and legally defensible.

272
00:17:11,116 --> 00:17:16,296
And this is not only a nightmare
situation, but also a necessary situation

273
00:17:16,326 --> 00:17:17,796
for all these regulated industries.

274
00:17:18,786 --> 00:17:24,456
Now imagine a regulator walks in
and asks about why a loan denial

275
00:17:24,726 --> 00:17:29,586
that happened eight months ago, and
what was the reason In traditional

276
00:17:29,586 --> 00:17:32,976
systems, that's days of forensic work.

277
00:17:33,606 --> 00:17:36,966
Detective work going through
log files and database records,

278
00:17:37,446 --> 00:17:40,716
and there is no guarantee that
you'll actually find everything.

279
00:17:41,346 --> 00:17:46,776
But with proper decision provenance
architecture, you can pull up a complete

280
00:17:46,776 --> 00:17:52,206
decision tree in seconds, which agents
were involved, what data they accessed,

281
00:17:52,566 --> 00:17:56,556
and which algorithms ran, and what
business rules are fired, and even

282
00:17:56,556 --> 00:18:00,246
the exact model versions that were
active at the moment, which gives you

283
00:18:00,246 --> 00:18:02,796
a picture on why a decision was taken.

284
00:18:03,276 --> 00:18:04,836
At the moment, it was taken.

285
00:18:05,496 --> 00:18:11,166
This level of transparency the agents
provides is actually better than what

286
00:18:11,166 --> 00:18:13,386
most human driven processes can offer.

287
00:18:14,166 --> 00:18:18,036
Now, mortgage industry, like any other
financial industry, is very dynamic

288
00:18:18,036 --> 00:18:22,016
in nature, and the compliance side of
the industry is very dynamic as well.

289
00:18:22,496 --> 00:18:23,126
Now.

290
00:18:23,756 --> 00:18:27,086
Compliance and regulations
change constantly and often

291
00:18:27,116 --> 00:18:28,676
with very such short notice.

292
00:18:29,246 --> 00:18:33,056
New guidelines for cryptocurrency income
verification might come and they may

293
00:18:33,056 --> 00:18:34,886
require implementation within 30 days.

294
00:18:35,576 --> 00:18:40,496
Now instead of rushing code changes into
production, a well-designed compliance

295
00:18:40,496 --> 00:18:45,266
agent can monitor regulatory fees,
automatically adjust business rules,

296
00:18:45,626 --> 00:18:51,266
and even run impact simulation before
changes can take effect in production.

297
00:18:52,106 --> 00:18:55,196
Now data minimization
becomes very critical.

298
00:18:55,616 --> 00:18:59,486
Your credit scoring agent never needs
to full see full bank statements.

299
00:18:59,846 --> 00:19:04,316
They can just view aggregated spending
patterns and derive data from it.

300
00:19:04,886 --> 00:19:08,396
Your identity verification agent
confirms identity and then they can

301
00:19:08,396 --> 00:19:10,316
immediately discard your biometric data.

302
00:19:10,826 --> 00:19:14,306
This architecture not only
protects the privacy, but it also

303
00:19:14,306 --> 00:19:15,896
enables intelligent processing.

304
00:19:16,396 --> 00:19:19,606
Now I want to take a moment to
talk about the different types

305
00:19:19,606 --> 00:19:21,856
of monitoring and observability.

306
00:19:22,356 --> 00:19:26,556
Monitoring agent systems is like
monitoring a team of consultants

307
00:19:26,916 --> 00:19:28,476
rather than monitoring servers.

308
00:19:28,866 --> 00:19:35,686
This fundamental approach in our thinking
has to will play a critical role while

309
00:19:35,686 --> 00:19:38,236
implementing agent TK in our organization.

310
00:19:38,941 --> 00:19:42,871
You care less about CCP utilization
and more about decisions,

311
00:19:42,871 --> 00:19:44,101
quality and business outcomes.

312
00:19:44,461 --> 00:19:49,811
Just like human agent for example, you
might track agent confidence patterns.

313
00:19:50,261 --> 00:19:54,191
If your property evaluation agent
suddenly starts expressing low

314
00:19:54,191 --> 00:19:58,151
confidence in its decision, then you
would have to take it as a signal

315
00:19:58,571 --> 00:20:01,081
to either adjust market volatility.

316
00:20:01,676 --> 00:20:05,066
Or newer property types that
the data hasn't seen yet.

317
00:20:05,546 --> 00:20:11,626
Or data quality issues with vendor feeds,
which can offer open if vendor feeds

318
00:20:11,626 --> 00:20:13,456
actually change or vendor systems change.

319
00:20:14,246 --> 00:20:18,296
Now all of this gives you a early
warning before problems start

320
00:20:18,296 --> 00:20:20,066
hitting customer experience.

321
00:20:20,696 --> 00:20:22,321
The metrics that matter.

322
00:20:23,011 --> 00:20:28,021
Most are things like, are agents making
decisions that lead to successful ones?

323
00:20:28,351 --> 00:20:32,671
Are they catching risks that human
underwriters might miss, or even

324
00:20:32,701 --> 00:20:36,841
processing times improvement while
is the quality is staying high.

325
00:20:37,741 --> 00:20:41,491
One critical metric is
decision reversal rate.

326
00:20:41,941 --> 00:20:47,221
Now, how often your human agents
are disagreeing with the AI agents?

327
00:20:47,521 --> 00:20:51,866
Now when the disagreement rate or the
reversal rate is high, then you know.

328
00:20:52,801 --> 00:20:55,831
That one particular AI
agent requires attention.

329
00:20:56,101 --> 00:21:00,381
It may be a data training issue, or
there may be fundamentally some other

330
00:21:00,381 --> 00:21:01,581
issue that needs to be addressed.

331
00:21:01,881 --> 00:21:04,961
And then you can bring your
that particular AI agent offline

332
00:21:05,291 --> 00:21:09,571
while you work on bring, propping
it up to a required threshold.

333
00:21:10,071 --> 00:21:13,431
I would like to take a moment to
share some practical lessons about

334
00:21:13,431 --> 00:21:18,781
infrastructure that can save you, not
only money, but also, months of pain.

335
00:21:19,281 --> 00:21:23,661
In case of our deployment complexity
organizations still, most of them

336
00:21:23,661 --> 00:21:25,701
have a blue green deployment approach.

337
00:21:26,211 --> 00:21:27,981
In the case of a blue green deployment.

338
00:21:28,851 --> 00:21:33,411
It becomes incredibly tricky when
long running processes, especially in

339
00:21:33,411 --> 00:21:37,791
mortgage applications where application
can take 30 days into processing.

340
00:21:38,291 --> 00:21:42,251
Now when an application is taking
30 days of processing, how do you

341
00:21:42,281 --> 00:21:44,441
deploy a sec critical security update?

342
00:21:45,011 --> 00:21:49,721
And how do you update agent versions
without breaking the applications in

343
00:21:49,721 --> 00:21:51,191
process or applications in flight?

344
00:21:51,971 --> 00:21:55,391
Now this is where you need
versioned agent deployment.

345
00:21:55,931 --> 00:22:00,971
Where each agent version can handle
requests from older process versions,

346
00:22:01,541 --> 00:22:05,171
new applications get newer agents,
existing applications will continue,

347
00:22:05,171 --> 00:22:06,821
still continue with the older agents.

348
00:22:07,331 --> 00:22:13,721
Now this can be understood with an example
like think of a restaurant menu where

349
00:22:13,781 --> 00:22:18,641
meals, where your previous orders meals
are still getting prepared while you

350
00:22:18,641 --> 00:22:20,386
work on updating your restaurant panel.

351
00:22:20,886 --> 00:22:25,296
The next aspect is configuration,
and this is also configuration

352
00:22:25,296 --> 00:22:26,436
management is also key.

353
00:22:27,126 --> 00:22:31,386
Now, make your agents pull configuration
from external systems at runtime.

354
00:22:32,286 --> 00:22:37,776
This means you can adjust business
rules, update model parameters, or even

355
00:22:37,776 --> 00:22:42,456
modified decision thresholds without
deploying any code or any downtime.

356
00:22:42,456 --> 00:22:47,126
During the early pandemic lending
criteria almost changed daily.

357
00:22:47,696 --> 00:22:48,716
But ha without.

358
00:22:48,746 --> 00:22:54,416
But having runtime configuration
management was the key differentiator

359
00:22:54,446 --> 00:22:58,166
between organizations that
was able to adapt quickly and

360
00:22:58,166 --> 00:22:59,786
that was also falling behind.

361
00:23:00,286 --> 00:23:00,976
Now.

362
00:23:01,396 --> 00:23:02,836
This is the organization.

363
00:23:02,836 --> 00:23:08,026
Culture factors are equally and critically
important, just like a technical factors.

364
00:23:08,686 --> 00:23:12,346
This is where most technical
teams fail entirely.

365
00:23:12,406 --> 00:23:17,386
The technology is often the easy part
for a technologist, but getting people

366
00:23:17,386 --> 00:23:21,406
and the organization to adapt is
much harder and actually very harder.

367
00:23:22,186 --> 00:23:23,596
Picture a change management scenario.

368
00:23:24,256 --> 00:23:27,316
Your most experienced mortgage
Generat has been doing.

369
00:23:28,156 --> 00:23:31,966
Their job for 20 years now,
they can spot problems that are

370
00:23:31,966 --> 00:23:33,436
not captured in any rule book.

371
00:23:33,956 --> 00:23:36,986
They're, they know how to handle
end scenarios or they know

372
00:23:36,986 --> 00:23:38,576
how to handle new scenarios.

373
00:23:39,176 --> 00:23:42,086
Their initial reaction to
autonomous agents is probably

374
00:23:42,086 --> 00:23:46,206
going to be met with skepticism
or even challenged with hostility.

375
00:23:46,976 --> 00:23:49,136
The successful approach
is not to force adoption.

376
00:23:49,636 --> 00:23:54,466
But to involve them in every step of
the decision making process and also

377
00:23:54,466 --> 00:23:58,976
in every step of making the system
better turn them into agent trainers

378
00:23:59,366 --> 00:24:03,686
rather than a competitor, and then
they can help identify edge cases and

379
00:24:03,686 --> 00:24:08,906
also teach nuanced decision making
patterns to the AI when domain experts.

380
00:24:09,001 --> 00:24:13,501
Like an experienced underwriter become
invested in improving your system

381
00:24:13,861 --> 00:24:17,191
rather than competing everything,
it actually changes the whole

382
00:24:17,191 --> 00:24:18,361
landscape and changes everything.

383
00:24:18,861 --> 00:24:22,851
You also need people who understand
distributed systems and machine

384
00:24:22,851 --> 00:24:24,591
learning and mortgage underwriting.

385
00:24:25,371 --> 00:24:25,911
These.

386
00:24:26,451 --> 00:24:29,961
Unicorn skills don't exist in
traditional job descriptions.

387
00:24:30,441 --> 00:24:34,641
Cross training domain experts
often work better than trying to

388
00:24:34,641 --> 00:24:36,231
hire people who know everything.

389
00:24:37,011 --> 00:24:40,191
This helps with employee retention
within the organization as well.

390
00:24:41,171 --> 00:24:44,621
Third aspect is governance,
balance and oversight.

391
00:24:45,131 --> 00:24:49,931
Now, having a governance balance
and avoiding the extreme is also

392
00:24:49,961 --> 00:24:53,956
one of the important factors
micromanaging every agent decision.

393
00:24:54,456 --> 00:24:59,226
Kills the autonomy and the, and and it
defeats the purpose of having an agent

394
00:24:59,376 --> 00:25:01,506
AI in your organization, but zero.

395
00:25:01,506 --> 00:25:05,016
Our site also is unacceptable
and brings in a lot of risk.

396
00:25:05,796 --> 00:25:09,966
Exception based monitoring is where
you find the right balance agents

397
00:25:09,966 --> 00:25:14,706
operating independently, but they
alert humans when they hit a situation

398
00:25:14,736 --> 00:25:16,146
outside their confidence boundaries.

399
00:25:16,646 --> 00:25:20,996
The next topic is about future
directions and emerging patterns.

400
00:25:21,816 --> 00:25:24,006
The future will get even more indus.

401
00:25:24,366 --> 00:25:25,116
Interesting.

402
00:25:25,216 --> 00:25:29,356
We are starting to see emergent
behaviors where agents develop

403
00:25:29,356 --> 00:25:33,946
their own coordination strategy even
without explicit instructions or

404
00:25:33,946 --> 00:25:36,976
explicit programming, for instance.

405
00:25:37,476 --> 00:25:41,466
Fraud detection agent might learn
to tip off an income verification

406
00:25:41,466 --> 00:25:46,266
agent when it spots suspicious
patterns, or create collaborative

407
00:25:46,266 --> 00:25:51,276
investigation workflows where more
it is more effective for both agents

408
00:25:51,276 --> 00:25:53,111
to work together than working alone.

409
00:25:53,681 --> 00:25:57,991
These emergent behaviors often
surprise even the engineers who

410
00:25:57,991 --> 00:26:00,111
built the system, and this is where.

411
00:26:00,816 --> 00:26:05,596
The industry is actually heading
towards the next aspect is large

412
00:26:05,596 --> 00:26:07,066
language model integration.

413
00:26:07,456 --> 00:26:10,846
Now, large language models are
actually a game changer and

414
00:26:10,846 --> 00:26:12,016
have become a game changer.

415
00:26:12,556 --> 00:26:16,126
Imagine telling your system new
regulations require additional

416
00:26:16,126 --> 00:26:21,041
verification for properties in flood zone,
and having it automatically understand

417
00:26:21,101 --> 00:26:25,996
and implement the necessary changes
across all relevant agents is necessary.

418
00:26:26,656 --> 00:26:28,426
We are now moving towards.

419
00:26:29,371 --> 00:26:34,371
LLM interface for business where it
can automatically manage the rules,

420
00:26:34,871 --> 00:26:36,821
directing the business processes.

421
00:26:37,721 --> 00:26:41,021
Now the last aspect is
cross organizational agents.

422
00:26:41,591 --> 00:26:45,881
The next frontier is also agents
that work across company boundaries

423
00:26:46,391 --> 00:26:48,296
and not working within company silo.

424
00:26:48,796 --> 00:26:53,866
Imagine mortgage processing where your
agents coordinate directly with AI

425
00:26:53,866 --> 00:26:58,846
agents or human agents from external
vendors like title companies or insurance

426
00:26:58,846 --> 00:27:01,196
providers, or appraisal services.

427
00:27:01,856 --> 00:27:07,916
And they can all work together seamlessly
while maintaining security and privacy

428
00:27:07,916 --> 00:27:11,576
requirements and not compromising any
compliance and regulatory standards.

429
00:27:12,076 --> 00:27:18,106
Now the architecture patterns that we've
discussed right now is not limited to

430
00:27:18,106 --> 00:27:19,936
just mortgage or financial industry.

431
00:27:20,446 --> 00:27:24,856
The use case applies well
beyond the financial industry.

432
00:27:25,696 --> 00:27:29,326
For example, healthcare organizations
are using similar approaches

433
00:27:29,626 --> 00:27:30,916
for patient care coordination.

434
00:27:31,711 --> 00:27:34,951
Supply chain companies are also
building agent networks that

435
00:27:34,981 --> 00:27:36,481
automatically adapt to disruptions.

436
00:27:36,931 --> 00:27:43,171
Any complex multi-step processes with lots
of coordination requirement is actually

437
00:27:43,171 --> 00:27:45,091
a good candidate for agent automation.

438
00:27:45,841 --> 00:27:51,211
Now whether you are processing loans
or managing patient care, or even

439
00:27:51,211 --> 00:27:55,231
optimizing supply chains, the core
principle is going to be the same.

440
00:27:55,816 --> 00:27:56,596
For all of them.

441
00:27:57,076 --> 00:28:00,586
Autonomous agents, event driven
communication, comprehensive

442
00:28:00,586 --> 00:28:06,116
observability and adapt orchestration,
all pillars of a good architecture

443
00:28:06,116 --> 00:28:07,106
and governance framework.

444
00:28:07,606 --> 00:28:13,156
I want to leave everyone with four
lessons that can actually save

445
00:28:13,156 --> 00:28:14,986
you from most common failures.

446
00:28:15,886 --> 00:28:16,876
The first one is.

447
00:28:17,591 --> 00:28:18,251
Orchestration.

448
00:28:18,401 --> 00:28:19,811
Orchestration is everything.

449
00:28:20,471 --> 00:28:24,371
I would suggest not to underestimate
any coordination complexity.

450
00:28:24,851 --> 00:28:29,111
Simple cubase systems will break
when the real world scenario start.

451
00:28:29,531 --> 00:28:30,731
It may work well.

452
00:28:31,286 --> 00:28:36,296
During your, initial testing or initial
deployment, but as long for long-term

453
00:28:36,346 --> 00:28:38,716
usage, it's going to start breaking.

454
00:28:38,846 --> 00:28:43,106
For H case scenarios or for newer
scenarios, you need to invest in

455
00:28:43,286 --> 00:28:46,286
sophisticated orchestration from day one.

456
00:28:46,786 --> 00:28:51,526
The second one is you need to have
observability from the very beginning.

457
00:28:52,036 --> 00:28:53,356
Audit trails have to be built.

458
00:28:53,686 --> 00:28:58,636
You need to have decision transparency
and regulatory adaptations should be built

459
00:28:58,696 --> 00:29:00,736
directly into your system architecture.

460
00:29:01,246 --> 00:29:04,786
Compliance is not something
that you can add later.

461
00:29:05,026 --> 00:29:08,796
You it has to be incorrect
incorporated from day one.

462
00:29:09,296 --> 00:29:12,866
The third one is
compliance isn't optional.

463
00:29:13,366 --> 00:29:17,056
You need to you need, if you can't see
your agents, what they're doing, you

464
00:29:17,056 --> 00:29:19,126
can't trust them with critical processes.

465
00:29:19,396 --> 00:29:22,756
So you need to build comprehensive
monitoring into your architecture.

466
00:29:23,026 --> 00:29:27,556
And this comprehensive monitoring
should be any critical first

467
00:29:27,556 --> 00:29:31,546
step and not an afterthought
after building your applications.

468
00:29:32,266 --> 00:29:37,296
Now the final thought is we are at the
beginning of a very fundamental shift.

469
00:29:37,796 --> 00:29:41,211
How complex business
processes are working now.

470
00:29:41,271 --> 00:29:44,451
Agent DKI platforms aren't
just automating existing tasks.

471
00:29:45,021 --> 00:29:48,351
They are actually re-imagining
entire industries.

472
00:29:48,861 --> 00:29:53,091
The organizations who are figuring
or understanding and figuring this

473
00:29:53,091 --> 00:29:57,531
out first will have the significant
market competitive advantage.

474
00:29:58,031 --> 00:29:59,706
Actually thanks for
spending time with me today.

475
00:30:00,371 --> 00:30:04,171
I am hoping this presentation
gives you a practical foundation

476
00:30:04,621 --> 00:30:08,881
for thinking about how to build
agent ai and in your own context.

477
00:30:09,351 --> 00:30:13,671
If you're considering building
these kinds of systems, my advice

478
00:30:13,671 --> 00:30:18,801
is to start small and focus on
solid architectural foundations.

479
00:30:19,401 --> 00:30:23,811
And do not be afraid to fail fast
because it is only from these failures

480
00:30:23,811 --> 00:30:25,521
that you can build solid applications.

481
00:30:26,021 --> 00:30:30,191
The patterns I've shared with you today
should give you a roadmap for avoiding

482
00:30:30,341 --> 00:30:34,361
some of the most common pitfalls that
most organizations go through when

483
00:30:34,361 --> 00:30:36,681
they start on the Gent AI Road roadmap.

484
00:30:37,411 --> 00:30:43,141
My final thought is the future belongs
to those organizations that can actually

485
00:30:43,201 --> 00:30:47,731
successfully blend human expertise
with autonomous AI capabilities.

486
00:30:48,211 --> 00:30:52,111
The technical patterns we have discussed
here today is just going to provide you

487
00:30:52,111 --> 00:30:54,331
a blueprint for building that future.

488
00:30:54,961 --> 00:30:55,381
Thank you.

