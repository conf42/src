1
00:00:00,500 --> 00:00:04,430
Platform engineering meets
thought code management systems.

2
00:00:04,820 --> 00:00:10,490
Today's topic is going to be focused
on unified policies, access and

3
00:00:10,490 --> 00:00:13,850
automation across GIT based platforms.

4
00:00:14,350 --> 00:00:14,979
Who am I?

5
00:00:15,370 --> 00:00:17,580
I am, it's called me around here.

6
00:00:18,080 --> 00:00:20,209
I have an MBA and an MS Degrees.

7
00:00:20,659 --> 00:00:23,194
I'm a senior staff IT
engineer manager at Qualcomm.

8
00:00:23,694 --> 00:00:27,404
I lead a global team, spread
across various compo continents.

9
00:00:27,904 --> 00:00:32,825
I manage GI systems or the GI
platforms like GitHub, GitLab, Garrett.

10
00:00:33,325 --> 00:00:37,195
The user base is around
50,000 plus engineers.

11
00:00:37,585 --> 00:00:42,224
If we talk about bot accounts or service
accounts, I'm not surprised if it reaches

12
00:00:42,224 --> 00:00:44,114
around a hundred thousand accounts.

13
00:00:44,614 --> 00:00:49,054
The focus of my team is primarily
about developer first initiatives.

14
00:00:49,804 --> 00:00:52,384
We provide secure, scalable solutions.

15
00:00:53,295 --> 00:00:57,545
End of the day we want accelerated
software delivery on what

16
00:00:57,545 --> 00:00:59,135
we are doing at Qualcomm.

17
00:00:59,635 --> 00:01:04,535
At large, organizations like
Qualcomm we have various systems.

18
00:01:05,090 --> 00:01:09,500
Whether it is SCM systems or
other systems, we have a, we

19
00:01:09,500 --> 00:01:13,390
have, I'm not surprised if there
are around thousands plus, right?

20
00:01:14,290 --> 00:01:17,050
The policies accesses are all fragmented.

21
00:01:17,770 --> 00:01:21,070
How can we unify them
without unifying them?

22
00:01:21,070 --> 00:01:22,060
What is the impact?

23
00:01:22,180 --> 00:01:27,730
As we know, the impact would be developer
friction, time consuming activities.

24
00:01:27,820 --> 00:01:31,600
End of the day, the velocity will be huge.

25
00:01:32,100 --> 00:01:35,460
So let's dig into deeper
how we can fix the problem.

26
00:01:35,960 --> 00:01:39,680
SCM is considered as platform.

27
00:01:40,400 --> 00:01:46,990
It's not a tool if some organization is
considering GitLab or GitHub or Garrett

28
00:01:47,050 --> 00:01:52,830
or any SCM system as a tool, I sincerely
believe that they have a problem at hand.

29
00:01:53,330 --> 00:01:57,110
SCM is the backbone for developers, right?

30
00:01:57,439 --> 00:01:59,059
What developers, what do they do?

31
00:01:59,330 --> 00:02:01,130
They develop code, the write code.

32
00:02:01,249 --> 00:02:04,490
Where do they write code
and where do they push?

33
00:02:04,640 --> 00:02:06,140
It is all around SCM.

34
00:02:06,640 --> 00:02:10,529
So the utmost importance should be
given should be given to that system.

35
00:02:11,029 --> 00:02:13,369
It, if you're considering it as infra, no.

36
00:02:13,579 --> 00:02:17,829
If it is just an application,
no, it, because it is a platform.

37
00:02:18,189 --> 00:02:24,029
It is integrated with lot of
other systems, so we need to treat

38
00:02:24,029 --> 00:02:29,249
it as a platform and build in
governance should be considered.

39
00:02:29,749 --> 00:02:33,320
Now let's talk about develop
initiative or the experience.

40
00:02:33,470 --> 00:02:36,519
In the past, user
management was a struggle.

41
00:02:37,369 --> 00:02:39,109
What do you, what do I mean by that?

42
00:02:39,469 --> 00:02:44,209
Developer starts developing his
code once he gets a license from

43
00:02:44,209 --> 00:02:45,799
one of their CM systems, right?

44
00:02:45,920 --> 00:02:47,150
Say GitHub, right?

45
00:02:47,210 --> 00:02:48,620
You need a license, right?

46
00:02:49,190 --> 00:02:54,920
So if there is a manual process tied
with it, if the user management is

47
00:02:54,920 --> 00:02:59,619
not seamless, if it is not selfer,
then we have a problem at hand, right?

48
00:03:00,119 --> 00:03:03,769
So activation should be seamless
and then comes a deactivation

49
00:03:04,159 --> 00:03:07,189
because the business side of things,
Hey, your activation is seamless.

50
00:03:07,249 --> 00:03:12,409
Everyone is getting a license nowadays,
and it is incurring opex for us, right?

51
00:03:12,589 --> 00:03:16,760
So there should be a deactivation
process, which is also seamless.

52
00:03:17,260 --> 00:03:18,520
Then comes a reactivation.

53
00:03:18,520 --> 00:03:19,299
What do you mean by that?

54
00:03:19,400 --> 00:03:23,690
Hey, now you deactivated my account,
but I'm back into the project.

55
00:03:23,750 --> 00:03:25,390
I need to activate my license.

56
00:03:25,890 --> 00:03:27,810
Show me an automated way to reactivate.

57
00:03:27,960 --> 00:03:31,859
So all these things tied together
brings in the user management.

58
00:03:32,460 --> 00:03:37,770
The most important thing is you should
think about all the cases and automate

59
00:03:37,770 --> 00:03:43,980
the system and make it self serve so that
the productivity of the developer or the

60
00:03:43,980 --> 00:03:46,710
engineer will be increased significantly.

61
00:03:47,210 --> 00:03:51,740
Then comes the required
systems to provide.

62
00:03:52,175 --> 00:03:55,835
A place to develop because we are
talking about GI systems, which

63
00:03:55,895 --> 00:04:00,065
I'll consider a repository to begin
with, Hey, I have the license.

64
00:04:00,155 --> 00:04:02,035
What repository should I interact with?

65
00:04:02,965 --> 00:04:06,415
If that sort of information is
not provided a automatically.

66
00:04:06,915 --> 00:04:09,225
And what sort of hacks do I need?

67
00:04:09,285 --> 00:04:11,715
Hey I need the read read
permissions to read the code.

68
00:04:11,715 --> 00:04:14,085
Now I need the push permissions
to push the code so that,

69
00:04:14,405 --> 00:04:16,144
people can consume my code.

70
00:04:16,265 --> 00:04:21,255
All these things should be
automated so that the onboarding

71
00:04:21,255 --> 00:04:23,445
process is as seamless as possible.

72
00:04:23,445 --> 00:04:27,164
So you need to be when you are
managing the platform, developer

73
00:04:27,164 --> 00:04:31,635
first experience should be back of
your mind so that everything will.

74
00:04:32,135 --> 00:04:32,735
Seamless.

75
00:04:33,235 --> 00:04:35,245
So now I have the repository.

76
00:04:35,245 --> 00:04:37,225
I have the SI can push the code.

77
00:04:37,975 --> 00:04:39,115
What af after that?

78
00:04:39,115 --> 00:04:41,365
What are there ci cd pipelines integrated?

79
00:04:41,725 --> 00:04:43,765
Is there a template which I can leverage?

80
00:04:44,265 --> 00:04:46,485
How is gittel objects are managed?

81
00:04:47,265 --> 00:04:51,140
All these should be either documented
or clearly communicated to the

82
00:04:51,140 --> 00:04:55,190
developer community so that they
won't scramble behind the scenes.

83
00:04:55,690 --> 00:04:59,740
We initiate, we have an initiative
where there are some public repositories

84
00:04:59,740 --> 00:05:05,250
designed so that the pages or the
Read me articles are published

85
00:05:05,550 --> 00:05:07,380
for the end users to consume them.

86
00:05:08,070 --> 00:05:11,760
In that way, we are, we always have
the developer first experience of

87
00:05:11,790 --> 00:05:16,820
the initiative in our perspective
and deliver it in a seamless fashion.

88
00:05:17,320 --> 00:05:18,070
Then comes what?

89
00:05:18,670 --> 00:05:20,050
How the code reviews are happening.

90
00:05:20,140 --> 00:05:25,380
As a developer, I need someone to develop
to review my code that's given, right?

91
00:05:26,160 --> 00:05:29,550
With AI nowadays, is there a
platform which we can build

92
00:05:29,640 --> 00:05:31,350
for automated code reviews?

93
00:05:32,010 --> 00:05:33,870
GitHub has GitHub copilot.

94
00:05:34,370 --> 00:05:38,680
GitLab has dual, but there is
a license associated with it.

95
00:05:38,680 --> 00:05:41,320
Then it goes back to the
license management, how

96
00:05:41,320 --> 00:05:42,640
seamless the activation is.

97
00:05:42,740 --> 00:05:47,510
Are there any other internal AI systems
that you guys developed, which can be

98
00:05:47,510 --> 00:05:49,640
integrated for automated code reviews?

99
00:05:49,940 --> 00:05:55,100
Eventually, when an automated
code review happens it, it helps

100
00:05:55,100 --> 00:05:56,510
the whole developer community.

101
00:05:57,080 --> 00:06:00,140
As a developer, I push the code,
it is automatically code reviewed.

102
00:06:00,500 --> 00:06:04,580
I can address the code review comments,
and once it is ready to go, I can take

103
00:06:04,580 --> 00:06:07,460
that change to the lead for the review.

104
00:06:07,620 --> 00:06:08,760
Everything is automated.

105
00:06:09,260 --> 00:06:13,970
The time to market has
improved a lot, right?

106
00:06:14,150 --> 00:06:15,170
Our end goal should be that.

107
00:06:15,670 --> 00:06:18,190
Now let's talk about unified
accesses and policies.

108
00:06:18,190 --> 00:06:18,670
Yes.

109
00:06:18,700 --> 00:06:23,020
We need the unified accesses
and the policies, right?

110
00:06:23,050 --> 00:06:23,980
How do you achieve that?

111
00:06:24,700 --> 00:06:31,025
So the service providers or the platform
owners should be cross-checking on how,

112
00:06:31,085 --> 00:06:33,245
what is the scheme provisioning going on?

113
00:06:33,745 --> 00:06:39,240
Can I integrate the skin provisioning
across all the systems is self is SSO

114
00:06:39,240 --> 00:06:43,350
enabled so that if I log into one system,
I can easily interact with other system

115
00:06:43,350 --> 00:06:45,570
as well with a click off button, right?

116
00:06:46,110 --> 00:06:47,070
Think in those lines.

117
00:06:47,850 --> 00:06:53,075
Then comes a classification as I'm
working on project A the, what sort of

118
00:06:53,075 --> 00:06:54,485
classification are we talking about?

119
00:06:54,695 --> 00:06:56,305
Is it proprietary?

120
00:06:56,975 --> 00:07:01,695
How complicate how complicated this
project is when compared to project B?

121
00:07:02,235 --> 00:07:04,275
What sort of sensitivity
I need to deal with?

122
00:07:04,815 --> 00:07:09,605
Can I clone the repository locally and
start developing, or they, should I

123
00:07:09,605 --> 00:07:12,875
be interacting with a different system
to interact this piece of software?

124
00:07:13,595 --> 00:07:18,185
All these should be considered and the
information should be given in a seamless

125
00:07:18,185 --> 00:07:20,845
way for addressing the developer needs.

126
00:07:21,345 --> 00:07:23,805
Then comes the external collab, right?

127
00:07:24,045 --> 00:07:24,285
Yeah.

128
00:07:24,285 --> 00:07:28,335
I'm working on project A and project B.
All, everything is internal, so I'm good.

129
00:07:28,635 --> 00:07:35,125
Now, let me I'm working on project C where
I need to interact with external users.

130
00:07:35,725 --> 00:07:38,845
That means Google for
Qualcomm probably, right?

131
00:07:39,385 --> 00:07:43,525
So watch collaboration controls
I need to be enabling, right?

132
00:07:43,825 --> 00:07:45,565
How is the service
provider providing that?

133
00:07:46,435 --> 00:07:51,345
All these should be vetted properly,
is guest collaborated In GitHub

134
00:07:51,345 --> 00:07:54,615
world, there is a pro concept
of guest collaboration, right?

135
00:07:54,825 --> 00:07:59,955
Should I be integrating that so that
the, and the external user won't be

136
00:08:00,315 --> 00:08:04,155
accessing the repositories, which
they're not supposed to, right?

137
00:08:04,485 --> 00:08:08,025
These things should be considered,
and the policies are designed so

138
00:08:08,025 --> 00:08:10,875
that the compliance is achieved.

139
00:08:11,820 --> 00:08:16,460
And any anomalies can be
controlled or detected in a

140
00:08:16,460 --> 00:08:18,170
proactive way than a reactive way.

141
00:08:18,670 --> 00:08:20,290
Automation is the backbone, right?

142
00:08:20,380 --> 00:08:25,925
They said we can streamline the
processes by automating end to end.

143
00:08:26,425 --> 00:08:28,800
I know it's a term where, hey,
I will automate everything.

144
00:08:29,310 --> 00:08:30,765
But what do you really mean by that?

145
00:08:31,095 --> 00:08:36,250
Right now, our focus primarily
is analyzing the logs.

146
00:08:36,640 --> 00:08:42,060
We have a event based listener and we
created some runbooks for each event.

147
00:08:42,090 --> 00:08:45,800
What sort of action we can take this?

148
00:08:45,800 --> 00:08:50,100
The platform is designed so that,
end-to-end everything is automated.

149
00:08:50,220 --> 00:08:51,720
Let me give you an example, right?

150
00:08:52,220 --> 00:08:56,000
A create action for a user
is created on an SCM system.

151
00:08:56,500 --> 00:09:02,140
The event listener, listening to
that event, that means in that

152
00:09:02,140 --> 00:09:06,220
means the user just got created.

153
00:09:06,400 --> 00:09:09,280
What sort of action I can take for him?

154
00:09:09,640 --> 00:09:13,570
Can I send all the required
documentation for the user?

155
00:09:14,440 --> 00:09:15,550
Because he's trying.

156
00:09:15,580 --> 00:09:16,930
He just got created.

157
00:09:17,080 --> 00:09:17,590
Yes.

158
00:09:17,650 --> 00:09:22,020
That's an actionable runbook that we
can create and send it across while,

159
00:09:22,230 --> 00:09:28,830
in another example, I just created a
fork for a repository, which may not

160
00:09:28,830 --> 00:09:32,115
be needed because of X, Y, Z reasons.

161
00:09:32,295 --> 00:09:34,545
So the event based listener,
listen to that event.

162
00:09:35,045 --> 00:09:40,955
Communicating that proactively to the end
user saying, Hey, you created a fork, but

163
00:09:41,855 --> 00:09:44,075
you may not need this fork in this area.

164
00:09:44,195 --> 00:09:46,645
Why don't you consider
the fork in this area?

165
00:09:47,005 --> 00:09:50,415
I'll give you one more example,
which could be interesting because

166
00:09:50,954 --> 00:09:54,944
nowadays with cybersecurity coming
into picture this could be critical.

167
00:09:55,935 --> 00:09:57,365
So this.

168
00:09:57,865 --> 00:10:02,925
In GitHub or a repository in GitHub
is configured to have a low listing.

169
00:10:03,225 --> 00:10:08,835
That means certain section of ips can
only access this particular repository.

170
00:10:09,335 --> 00:10:12,815
The even listener, even basic
listener, listening to that events

171
00:10:13,415 --> 00:10:18,024
and somehow it came to know that, oh,
someone actually changed that allow

172
00:10:18,024 --> 00:10:21,324
list by removing some of these ips.

173
00:10:21,865 --> 00:10:27,745
So the event base listener caught that
and sent a reminder or sent a notification

174
00:10:27,745 --> 00:10:34,495
to the security team or Goor, as well as
service providers so that they understand

175
00:10:34,495 --> 00:10:39,999
that and take an actionable, a could
be an action taking an action, right?

176
00:10:39,999 --> 00:10:44,439
That action could be asking a question,
Hey, why did you make this change?

177
00:10:44,529 --> 00:10:47,139
Why are you removing
this IP yellow listing?

178
00:10:47,829 --> 00:10:52,150
Or if there is integrating another ip,
that's another event for a security

179
00:10:52,150 --> 00:10:55,010
team checking for, why this IP is added.

180
00:10:55,100 --> 00:10:57,710
Now all these things are critical.

181
00:10:58,400 --> 00:11:00,050
So automation is the backbone.

182
00:11:00,550 --> 00:11:02,140
Now comes the enterprise governance.

183
00:11:02,640 --> 00:11:06,990
I'll most likely talking about
MSP primarily MSB is minimum

184
00:11:06,990 --> 00:11:08,400
security baseline, right?

185
00:11:08,900 --> 00:11:11,985
What sort of minimum
security you need to create.

186
00:11:12,635 --> 00:11:14,825
For your application, that is the key.

187
00:11:15,725 --> 00:11:17,505
What sort of I'll give you an example.

188
00:11:18,005 --> 00:11:25,615
So for every org created in GitHub, I do
not want any public repositories under it.

189
00:11:26,115 --> 00:11:28,935
That is a policy that is a
minimum security baseline,

190
00:11:29,505 --> 00:11:30,405
which you could consider.

191
00:11:30,975 --> 00:11:35,325
That means only the
internal repositories and.

192
00:11:36,045 --> 00:11:37,725
Private repositories can be created.

193
00:11:38,205 --> 00:11:41,685
That is a policy change, which
you can enforce why this matters.

194
00:11:42,435 --> 00:11:47,740
Some cases you don't want to expose
your code to non-authentic users.

195
00:11:48,240 --> 00:11:53,010
Public repositories have a
tendency that it can be accessible

196
00:11:53,010 --> 00:11:55,670
by everyone, including guest.

197
00:11:56,170 --> 00:11:57,150
Including the guest, right?

198
00:11:58,130 --> 00:11:59,030
Could be a problem.

199
00:11:59,240 --> 00:12:00,350
So consider that, right?

200
00:12:00,410 --> 00:12:05,000
What sort of minimum security
baselines you need as a platform

201
00:12:05,000 --> 00:12:06,860
owner or a service provider.

202
00:12:07,010 --> 00:12:13,040
You need to work with your security team
to understand what this MSB means and

203
00:12:13,040 --> 00:12:15,110
what sort of policy should be enforced.

204
00:12:15,610 --> 00:12:16,900
Code secret scanning, right?

205
00:12:16,930 --> 00:12:21,640
Nowadays, scanning is becoming the
shift left initiative where when

206
00:12:21,640 --> 00:12:23,170
a developer pushes the change.

207
00:12:23,920 --> 00:12:28,150
Immediately these scanning tools should
get triggered if there is a need for

208
00:12:28,150 --> 00:12:33,580
CICD platform design that, but some of
the CM systems already have a mechanism

209
00:12:33,940 --> 00:12:38,805
out of the box solution where it it
scans the code, which code QL or gas,

210
00:12:38,805 --> 00:12:40,485
which is GitHub, advanced Security.

211
00:12:40,485 --> 00:12:45,005
All these are designed so that, once
the change is pushed, all these scanning

212
00:12:45,005 --> 00:12:49,715
will happen immediately so that it
can be fixed right at the beginning.

213
00:12:50,555 --> 00:12:55,595
The problem in the past was if it is
not fixed at the beginning stage itself,

214
00:12:55,715 --> 00:13:01,295
then these buggy code somehow gets
released and integrated into the product.

215
00:13:01,385 --> 00:13:03,875
It's too late then fixing that.

216
00:13:04,415 --> 00:13:08,985
Product and coming back to the
coming back to the developer

217
00:13:08,985 --> 00:13:10,305
community to fix that bug.

218
00:13:10,365 --> 00:13:11,295
It's very costly.

219
00:13:11,745 --> 00:13:15,975
So addressing all of that with the
shift left initiatives, particularly

220
00:13:15,975 --> 00:13:20,795
on the advanced CM Systems,
is critical audit dashboards.

221
00:13:20,885 --> 00:13:24,365
This is centralizing, the audit
dashboard is critical because there

222
00:13:24,365 --> 00:13:29,245
could be multiple teams in your
enterprise are interested in auditing.

223
00:13:30,100 --> 00:13:31,210
Their needs.

224
00:13:31,510 --> 00:13:37,240
Security team needs one thing, DevOps
community needs another thing, developer

225
00:13:37,240 --> 00:13:39,310
community needs some other thing.

226
00:13:39,700 --> 00:13:41,770
Product management needs
some other thing, right?

227
00:13:41,830 --> 00:13:46,190
All these should be integrated so that
the dashboards are created for the

228
00:13:46,220 --> 00:13:49,910
right use cases and all of them are
centralized, so we don't, it's not

229
00:13:49,910 --> 00:13:51,590
going to be a sprawl across the board.

230
00:13:52,090 --> 00:13:55,900
Balancing dev experience and dev
developer experience and security.

231
00:13:56,110 --> 00:13:58,360
Developer friction is the
highlight here, right?

232
00:13:58,450 --> 00:14:02,990
As we know hey, I'm doing all of these
to make sure our environment is secured.

233
00:14:03,620 --> 00:14:06,650
I'm doing all of this to
make sure the product will be

234
00:14:06,650 --> 00:14:07,880
launched at the right time.

235
00:14:08,600 --> 00:14:10,640
I'm integrating this
because of that reason.

236
00:14:10,670 --> 00:14:14,990
This reason, everything is there
is a reason, but developer all,

237
00:14:15,320 --> 00:14:16,995
most of the developers care about.

238
00:14:17,495 --> 00:14:19,535
Can I develop my software and push it in?

239
00:14:19,835 --> 00:14:22,595
So you have to balance what you're doing.

240
00:14:23,225 --> 00:14:26,615
I'll take you another, I'll take
another example as we are discussing

241
00:14:26,615 --> 00:14:28,325
about AI based code reviews, right?

242
00:14:28,825 --> 00:14:32,425
From the developer community, they believe
that this code is written this way.

243
00:14:32,515 --> 00:14:36,175
It doesn't need a refactor, but the AI
based code review is coming under the

244
00:14:36,175 --> 00:14:40,595
picture and with the policies which we
designed, it is checking for a lot of

245
00:14:40,595 --> 00:14:42,635
things and it is giving left and right.

246
00:14:42,635 --> 00:14:43,865
So many code review comments.

247
00:14:44,165 --> 00:14:46,115
There will be a developer friction, right?

248
00:14:46,565 --> 00:14:50,075
So adapt the policies accordingly.

249
00:14:50,795 --> 00:14:57,535
By embedding the configs in our ci
cd pipeline accordingly for a project

250
00:14:57,535 --> 00:15:04,055
or a repo based, don't make it like
a generalized policy so that every

251
00:15:04,055 --> 00:15:06,510
developer will follow the policy, right?

252
00:15:06,540 --> 00:15:09,314
There will be a friction if you go,
if you design your systems like that.

253
00:15:09,814 --> 00:15:14,225
So always consider the developer
input or the leads input and design

254
00:15:14,225 --> 00:15:16,745
your policies accordingly, if needed.

255
00:15:16,745 --> 00:15:19,775
At the repo level or the org
level or at the enterprise level.

256
00:15:20,255 --> 00:15:24,275
That is most important thing
because we, happy developer, happy

257
00:15:24,275 --> 00:15:28,324
engineering community end of the
day, deliver the best product.

258
00:15:28,824 --> 00:15:30,834
We implemented all of this in Qualcomm.

259
00:15:31,014 --> 00:15:34,374
We have seen best results I would say.

260
00:15:34,874 --> 00:15:39,805
Access sprawl reduced by 46% which
is tied with the user management and

261
00:15:39,805 --> 00:15:41,634
the access controls as we discussed.

262
00:15:42,564 --> 00:15:46,705
There is no more confusion on
where to go to get a license or

263
00:15:46,705 --> 00:15:49,314
where to go to access a repo.

264
00:15:49,735 --> 00:15:51,414
Everything is streamlined in that way.

265
00:15:51,914 --> 00:15:57,074
User onboarding has significant earlier
it took hours and hours, probably

266
00:15:57,074 --> 00:16:02,014
days in some cases where one user,
one operations guy is out of office.

267
00:16:02,104 --> 00:16:05,434
No one has known how to do
the user onboarding process.

268
00:16:05,434 --> 00:16:10,914
All of these evolved to a streamline
approach Nowadays every user should

269
00:16:10,914 --> 00:16:12,864
be onboarded in less than 30 minutes.

270
00:16:13,364 --> 00:16:17,434
Instance response times
has lowered by 73%.

271
00:16:17,434 --> 00:16:25,484
That means, we are resolving the incidents
faster, way faster because this automation

272
00:16:25,484 --> 00:16:31,225
processes with the chat bots, with the AI
based chat bots we know the KB articles.

273
00:16:31,225 --> 00:16:33,985
We are inputting the KB
articles to the AI systems.

274
00:16:34,015 --> 00:16:37,765
And the operations, the support
team knows how to fix the incidents.

275
00:16:37,825 --> 00:16:42,185
So the response rates has, has evolved.

276
00:16:42,199 --> 00:16:43,874
Finally what are we looking ahead?

277
00:16:43,959 --> 00:16:47,410
We're looking at ai ai, right?

278
00:16:47,890 --> 00:16:54,079
How can we improve in every angle possible
for platform engineering through ai?

279
00:16:54,579 --> 00:17:00,604
How can we predict we how can we predict
the user activities upcoming next

280
00:17:00,604 --> 00:17:06,474
activities, what sort of security cons
analytics we can come up with what sort of

281
00:17:06,584 --> 00:17:09,674
user load be it all these are predictive.

282
00:17:09,854 --> 00:17:13,334
We are predicting by analyzing
the logs through the Log

283
00:17:13,904 --> 00:17:15,204
analyzer tools, which we built.

284
00:17:15,704 --> 00:17:21,784
Coming up to the conclusion saying,
oh a BC day x, y, z days from

285
00:17:21,784 --> 00:17:24,844
this geolocation, the number of
hits will be significantly high.

286
00:17:25,264 --> 00:17:30,124
We are predicting that these nowadays
with the AI techniques, which we adapted

287
00:17:30,694 --> 00:17:34,434
which we designed some tools around
it, and we are taking, we are we are

288
00:17:34,434 --> 00:17:36,994
looking at how we can improve it further.

289
00:17:37,494 --> 00:17:41,624
The, we are improving, we are trying, we
are finding ways to improve the developer

290
00:17:41,624 --> 00:17:44,094
productivity with the compliance harmony.

291
00:17:44,594 --> 00:17:46,154
Thank you everyone, your time.

