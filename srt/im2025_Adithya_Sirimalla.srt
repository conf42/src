1
00:00:00,500 --> 00:00:07,690
Hey, this is ala from Technologies, and
I'm thrilled to be here at Conference 42.

2
00:00:08,190 --> 00:00:11,790
Today I'm going to present how
we can achieve mastering of

3
00:00:11,790 --> 00:00:13,530
multi-cloud database resilience.

4
00:00:14,030 --> 00:00:18,500
Today we are diving into problem that
keeps a lot of us awake at night.

5
00:00:19,410 --> 00:00:24,210
Keeping our database resilient in
multi-cloud world, if your organization

6
00:00:24,210 --> 00:00:30,310
uses more than one cloud provider,
AWS Azure, Oracle Cloud, you know

7
00:00:30,310 --> 00:00:32,470
exactly how complex things have become.

8
00:00:33,460 --> 00:00:38,190
And if you are not doing multi-cloud
yet, trust me, you will be database

9
00:00:38,190 --> 00:00:43,740
administrator, face a completely different
world than they did few years ago.

10
00:00:44,240 --> 00:00:46,405
We are no longer limited
to single cloud strategy.

11
00:00:46,905 --> 00:00:52,095
Most of our organization now run
hybrid or multi-cloud environments.

12
00:00:52,905 --> 00:00:58,455
Let's talk about how to make that
complexity manageable with resilience,

13
00:00:58,575 --> 00:00:59,535
automation, and observability.

14
00:01:00,035 --> 00:01:03,669
In this session, I'm going
to walk through four things.

15
00:01:04,239 --> 00:01:06,729
First, we'll compare the major platforms.

16
00:01:07,229 --> 00:01:13,739
Like autonomous database, Azure scale
database, and Amazon RDS for a scale

17
00:01:13,739 --> 00:01:20,029
server to see how they stack up in terms
of capabilities, scalability, and cost.

18
00:01:20,529 --> 00:01:26,469
Then we will look at strategies for
resilience, backup, failover, compliance.

19
00:01:27,160 --> 00:01:32,199
After that, I will talk about
automation, how tools like Terraform.

20
00:01:32,634 --> 00:01:36,865
Cloud providers, CLI and scripting
can make life much easier.

21
00:01:37,854 --> 00:01:43,225
Finally, we'll explore monitoring and
observability so we can stay ahead of

22
00:01:43,225 --> 00:01:45,864
issues rather than reacting to them

23
00:01:46,364 --> 00:01:47,114
in this journey.

24
00:01:47,384 --> 00:01:50,354
We'll first go to Oracle
Autonomous Database.

25
00:01:50,854 --> 00:01:52,954
Let's start with Oracle Autonom Database.

26
00:01:53,014 --> 00:01:58,834
This platform really shines with itself,
managing ties like automated patching,

27
00:01:59,164 --> 00:02:05,824
upgrades, tuning building, ma machine
learning for performance optimization, and

28
00:02:05,914 --> 00:02:07,894
automatic scaling for workload changes.

29
00:02:07,894 --> 00:02:10,944
Yes, you can run in it a serverless mode.

30
00:02:10,944 --> 00:02:15,764
Also for variable workloads,
or if you want to decide.

31
00:02:16,619 --> 00:02:21,709
Infrastructure for pre predict,
pre predictable strategy, state

32
00:02:21,709 --> 00:02:27,189
workload and paper use pricing you
can be very costly, cost effective.

33
00:02:27,689 --> 00:02:29,954
Next, we'll go to Azure S SCALE database.

34
00:02:30,454 --> 00:02:34,144
Azure database takes slightly
different approach focusing

35
00:02:34,144 --> 00:02:35,464
on intelligent performance.

36
00:02:35,779 --> 00:02:40,609
It uses AI to provide recommendations
and automatic tuning, and the

37
00:02:40,609 --> 00:02:44,419
hyperscale architecture allows database
to grow up to a hundred terabytes.

38
00:02:44,919 --> 00:02:50,019
Security is very strong with features
like transparent data encryption

39
00:02:50,139 --> 00:02:51,879
and Azure rating integration.

40
00:02:52,809 --> 00:02:57,339
This also has flexible pricing
models, so you can choose DTU

41
00:02:57,414 --> 00:03:01,254
based, eco based, or serverless,
depends upon your workload needs.

42
00:03:01,754 --> 00:03:07,054
Next we'll go to Amazon RDS
for S Scale server, Amazon RDS.

43
00:03:07,054 --> 00:03:10,325
For S Scale server is more about
enterprise grade reliability.

44
00:03:10,825 --> 00:03:15,204
It offers automated backups, pointing
time recovery, and multi easy

45
00:03:15,204 --> 00:03:19,245
deployments for high availability and
read replicas for better performance.

46
00:03:19,995 --> 00:03:23,535
It supports enterprise
features like always on.

47
00:03:24,180 --> 00:03:25,650
Availability groups.

48
00:03:26,310 --> 00:03:33,390
S-S-I-S-S-S-R-S, and let's use save
cost through reserve instances or

49
00:03:33,630 --> 00:03:36,810
stay flexible with on demand pricing.

50
00:03:37,310 --> 00:03:41,500
So we've gone through all the
capabilities of different cloud platforms.

51
00:03:42,010 --> 00:03:47,520
Now let's compare, when we compare all
these three platforms, you can see.

52
00:03:48,075 --> 00:03:51,645
They each have their own
strength and capabilities.

53
00:03:52,145 --> 00:03:54,485
Rack is excellent for self-management.

54
00:03:54,985 --> 00:04:00,115
Azure is great for intelligent
performance, and RDS provides

55
00:04:00,175 --> 00:04:02,005
reliable enterprise grade service.

56
00:04:02,505 --> 00:04:03,855
So Ally, everything.

57
00:04:03,975 --> 00:04:08,085
The key is to pick the right platform
for right workload rather than sticking

58
00:04:08,085 --> 00:04:10,060
to a single vendor out for habit.

59
00:04:10,560 --> 00:04:14,910
So in with this, we completed
comparing three cloud offerings.

60
00:04:15,240 --> 00:04:22,360
Now we'll see the resilient strategies,
how we make this cloud strategies workable

61
00:04:22,360 --> 00:04:27,530
for our real time and environments
resilience strategies in that we'll first

62
00:04:27,530 --> 00:04:29,660
cover multi-cloud backup strategies.

63
00:04:29,710 --> 00:04:32,230
Platform choice is just one piece.

64
00:04:32,230 --> 00:04:37,110
In pail actually, to achieve real
resilience, we need multi-cloud backup

65
00:04:37,110 --> 00:04:40,170
strategies and cross-cloud replication.

66
00:04:40,670 --> 00:04:45,820
And the backup should be taken
when to avoid performance impact.

67
00:04:46,320 --> 00:04:50,820
And we have to also validate
our backups frequently, whether

68
00:04:51,210 --> 00:04:52,075
we have, we should know.

69
00:04:52,725 --> 00:04:55,305
The backups actually
works when we restore it.

70
00:04:55,805 --> 00:04:59,275
Next, we'll cover failover, and
high availability for failover.

71
00:04:59,545 --> 00:05:05,605
We can design active passive steps setups
with the automated health checks and

72
00:05:05,605 --> 00:05:10,570
DNS based routing, or even we can set up
active architectures for zero downtime.

73
00:05:11,070 --> 00:05:15,310
Next we'll cover regulator
compliance across clouds.

74
00:05:15,810 --> 00:05:17,770
Resiliency doesn't end up with uptime.

75
00:05:18,270 --> 00:05:20,130
We also need to be compliant.

76
00:05:20,630 --> 00:05:22,570
So compliant is very critical.

77
00:05:23,070 --> 00:05:27,850
We have to respect data residency
rules, enforce encryption standards,

78
00:05:28,040 --> 00:05:33,330
centralized audit, logging, and consistent
across the controls across the cloud.

79
00:05:33,830 --> 00:05:37,160
This consistency across clouds
avoid regulatory headaches

80
00:05:37,850 --> 00:05:39,650
and keeps auditors happy.

81
00:05:40,150 --> 00:05:43,090
So by this we'll complete
we complete resiliency.

82
00:05:43,900 --> 00:05:45,490
Next major topic is automation.

83
00:05:45,990 --> 00:05:50,340
Automation is one of the key
features in all the cloud offerings.

84
00:05:50,840 --> 00:05:53,360
So how we achieve automation.

85
00:05:53,570 --> 00:05:58,610
This is using Terraforms
Automation is very things vary

86
00:05:58,670 --> 00:06:00,050
depends upon our requirement.

87
00:06:00,680 --> 00:06:02,810
Currently we focus on the terraforms.

88
00:06:03,530 --> 00:06:06,500
For Terraform, we can define
the infrastructure as a code,

89
00:06:07,000 --> 00:06:10,420
keeping everything version
controlled and reproducible with

90
00:06:11,140 --> 00:06:14,303
Terraforms and with A-W-S-C-L-I.

91
00:06:15,185 --> 00:06:20,375
We A-W-S-C-L-I operations, we can
automate backups, scaling, maintenance,

92
00:06:20,915 --> 00:06:27,600
all the regular activities, combining
terraforms with the tools A-W-S-C-L-I

93
00:06:27,840 --> 00:06:29,815
or Azure C-L-I-O-C-S-C-L-I.

94
00:06:30,360 --> 00:06:34,980
We can script snapshot or scaling,
patching everything, and we can

95
00:06:34,980 --> 00:06:36,210
also do the performance check.

96
00:06:36,710 --> 00:06:39,650
Automat automation is
not just about speed.

97
00:06:40,430 --> 00:06:43,880
It's about reducing human error
and avoiding re repeatability.

98
00:06:44,380 --> 00:06:48,060
Let's come to the final
topic of our presentation.

99
00:06:48,690 --> 00:06:52,760
That is monitoring and
observability, so no matter how

100
00:06:52,760 --> 00:06:54,635
well we plan things will break.

101
00:06:55,135 --> 00:06:59,215
The question is, will you know
about it before your customer do?

102
00:07:00,085 --> 00:07:02,905
That's a question we have to
ask for any, every monitoring.

103
00:07:03,405 --> 00:07:07,365
So monitoring and observability
tied together, we need to track

104
00:07:07,365 --> 00:07:13,505
CPU, memory IO availability and
response time, and also security.

105
00:07:13,955 --> 00:07:18,365
We have, we should have a threat
detection system and alerts should be

106
00:07:18,365 --> 00:07:21,175
triggered sensibly and meaningfully.

107
00:07:21,865 --> 00:07:26,915
When there is an issue and it cannot
be a weakness, so tools like AWS

108
00:07:26,945 --> 00:07:33,365
CloudWatch, Azure Monitor, Prometheus,
graph, Datadog, or Splunk, we can

109
00:07:33,365 --> 00:07:35,825
build a unified view of our system.

110
00:07:36,215 --> 00:07:39,660
Even we can use artificial
inter intelligence to predict

111
00:07:39,660 --> 00:07:40,920
issues before they occur.

112
00:07:41,420 --> 00:07:41,990
Finally.

113
00:07:42,650 --> 00:07:45,350
Performance tuning also can be automated.

114
00:07:46,130 --> 00:07:51,770
We can establish we can establish
baselines and using machine learning

115
00:07:51,930 --> 00:07:56,910
learning and trigger, pre trigger,
pre predefined responses for common

116
00:07:56,910 --> 00:07:58,970
issues and continuously optimize.

117
00:07:58,970 --> 00:08:01,190
So the database always performs best.

118
00:08:01,690 --> 00:08:06,310
By automating baseline collection,
using machine learning based anomaly

119
00:08:06,310 --> 00:08:12,100
detection and automated remediation, we
can fix issues before the impact users.

120
00:08:12,600 --> 00:08:19,020
The goal is to shorten MTTR means meantime
to resolution, to point to the point

121
00:08:19,020 --> 00:08:21,810
where incidents are barely noticeable.

122
00:08:22,310 --> 00:08:22,730
Finally.

123
00:08:23,230 --> 00:08:29,440
The takeaways for this presentation
is how we choose best cloud offerings,

124
00:08:29,860 --> 00:08:33,880
how we distribute our workloads
in different cloud platforms.

125
00:08:34,660 --> 00:08:38,320
First thing is pick your database
platform based on workload

126
00:08:38,320 --> 00:08:40,120
requirements, not vendor loyalty.

127
00:08:40,620 --> 00:08:45,270
Second, embrace automation like
infrastructure as code scripting.

128
00:08:45,300 --> 00:08:49,115
Monitoring pipelines will save
you time and reduce mistakes.

129
00:08:49,615 --> 00:08:49,965
Third.

130
00:08:50,465 --> 00:08:52,385
Build for resilience.

131
00:08:52,925 --> 00:08:58,125
Make sure you have cross cloud
backups tested, failover and

132
00:08:58,125 --> 00:09:03,215
compliance build from the start,
start, finally monitor everything.

133
00:09:04,055 --> 00:09:08,195
Observability is what keeps
system healthy and users happy.

134
00:09:08,695 --> 00:09:15,205
The future database management is ably,
multi-cloud and automated and resilient.

135
00:09:15,705 --> 00:09:19,985
The organization that embrace
these principles will be once the

136
00:09:19,985 --> 00:09:22,505
best prepared for what's ahead.

137
00:09:23,005 --> 00:09:24,205
Thank you so much.

