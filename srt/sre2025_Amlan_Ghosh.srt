1
00:00:01,410 --> 00:00:02,310
Hello everyone.

2
00:00:02,760 --> 00:00:08,250
Welcome to our session on Resilient by
Design, a data-driven migration from

3
00:00:08,250 --> 00:00:10,950
monoliths to event driven microservices.

4
00:00:11,520 --> 00:00:13,440
Hello, I'm Amlin Go.

5
00:00:13,710 --> 00:00:18,090
I have over two decades of experience
in architecting software solutions

6
00:00:18,450 --> 00:00:25,470
with a focus on modernization from
monolithic applications to microservices

7
00:00:25,470 --> 00:00:27,420
based event driven architecture.

8
00:00:29,325 --> 00:00:33,855
So today we are tackling one of the most
pressing challenges in modern system

9
00:00:33,855 --> 00:00:39,315
architecture, the transition from monolith
system to event driven microservices.

10
00:00:40,394 --> 00:00:44,835
This transformation while promising
unparalleled scalability and

11
00:00:44,835 --> 00:00:50,415
agility demands meticulous planning
and execution to maintain system

12
00:00:50,415 --> 00:00:52,390
stability Throughout the journey.

13
00:00:53,410 --> 00:00:56,535
In this talk, we will explore
a data-driven framework.

14
00:00:57,105 --> 00:01:04,035
Designed to address these challenges head
on from understanding system domains to

15
00:01:04,035 --> 00:01:09,795
designing robust schemas and implementing
progressive migration techniques.

16
00:01:10,485 --> 00:01:14,354
We will highlight strategies
to ensure resilience, fall

17
00:01:14,354 --> 00:01:17,205
tolerance, and seamless operations.

18
00:01:18,405 --> 00:01:24,255
So let's dive in and discover how
resilience is engineered by design.

19
00:01:26,685 --> 00:01:32,995
While microservice offer undeniable
benefits like modularity, scalability,

20
00:01:33,025 --> 00:01:39,895
and fault isolations, the road to adopting
this architecture is far straightforward.

21
00:01:39,895 --> 00:01:44,230
I. Transitioning from a monolithic
system to an even driven

22
00:01:44,230 --> 00:01:48,130
microservices architecture comes
with its own set of challenges.

23
00:01:49,130 --> 00:01:56,750
This include handling data consistency,
managing distributed systems, and ensuring

24
00:01:56,750 --> 00:01:58,940
system resilience during the migration.

25
00:02:00,109 --> 00:02:05,300
This is where SRE principles and
data-driven strategies play a crucial

26
00:02:05,359 --> 00:02:08,750
role in overcoming these challenges.

27
00:02:09,300 --> 00:02:10,485
Okay, migrating.

28
00:02:10,845 --> 00:02:12,765
Let's get into some facts.

29
00:02:12,805 --> 00:02:17,015
Migrating to a new architecture
is no small fit and the numbers

30
00:02:17,015 --> 00:02:20,915
speak for themselves about the
challenges enterprise encounter.

31
00:02:21,695 --> 00:02:25,660
68% of enterprise identifies
stability concerns.

32
00:02:26,425 --> 00:02:32,335
As their primary migration
challenge, downtime or disruptions

33
00:02:32,335 --> 00:02:37,375
during this process can severely
impact business operations making

34
00:02:37,375 --> 00:02:39,265
reliability a top priority.

35
00:02:40,345 --> 00:02:46,885
43% of migration fail on the first
end due to insufficient architecture.

36
00:02:46,945 --> 00:02:51,895
Planning a rushed or poorly
designed approach often leads to

37
00:02:51,925 --> 00:02:54,445
incomplete transition or disruptions.

38
00:02:55,430 --> 00:02:58,390
37% of the project face cost overruns.

39
00:02:58,730 --> 00:03:03,260
Traditional migration methods
often underestimate the complexity

40
00:03:03,320 --> 00:03:05,840
leading to unplanned expenditure

41
00:03:07,940 --> 00:03:13,970
with stability concerns, first time
migration failures, and cost overruns

42
00:03:14,300 --> 00:03:16,070
posing significant challenges.

43
00:03:17,150 --> 00:03:21,590
It's clear that traditional migration
methods often fail, fall short.

44
00:03:22,490 --> 00:03:27,140
So how can we overcome these hurdles
and ensure a smooth transition?

45
00:03:28,140 --> 00:03:32,700
So the answer lies in adopting a
well-defined data-driven approach.

46
00:03:34,585 --> 00:03:37,470
So enter our event driven
migration framework.

47
00:03:38,445 --> 00:03:42,585
This framework is designed to guide
enterprise through the complexities of

48
00:03:42,615 --> 00:03:47,385
migration from monolithic to resilient,
scalable, and event driven microservices.

49
00:03:48,165 --> 00:03:52,275
It addresses these challenges head
on by combining robust architecture

50
00:03:52,275 --> 00:03:55,725
principles while real-time data insights.

51
00:03:56,715 --> 00:04:01,035
So let's explore how this
framework can pave the way for

52
00:04:01,035 --> 00:04:04,155
successful future-proof migrations.

53
00:04:04,785 --> 00:04:06,645
So let's start at the base.

54
00:04:08,310 --> 00:04:10,200
The domain driven design.

55
00:04:11,160 --> 00:04:15,540
So the domain driven design is a
strategic methodology for monolithic

56
00:04:15,540 --> 00:04:21,270
complex systems by aligning software
architecture with business needs, it

57
00:04:21,270 --> 00:04:26,850
emphasizes the use of ED context to
create clear service boundaries that

58
00:04:27,120 --> 00:04:31,830
encapsulate specific business logic,
ensuring modularity and scalability

59
00:04:32,700 --> 00:04:34,740
essential for microservices migration.

60
00:04:35,370 --> 00:04:36,030
Additionally.

61
00:04:36,885 --> 00:04:42,705
Ubiquitous language, foster seamless
communication between developers and

62
00:04:42,705 --> 00:04:49,575
domain experts, reducing misunderstanding
and improving collaboration by leveraging

63
00:04:49,575 --> 00:04:56,145
tools like context mapping and even
storming domain event design simplifies

64
00:04:56,145 --> 00:05:01,515
identifying sub-domains and their
interactions enabling a structured

65
00:05:01,575 --> 00:05:05,745
approach to managing complexity
and building resilient systems.

66
00:05:06,855 --> 00:05:13,905
This makes domain driven design of
vital framework for transitioning to a

67
00:05:13,905 --> 00:05:16,185
event driven microservices architecture.

68
00:05:17,505 --> 00:05:19,175
Next comes event sourcing.

69
00:05:21,035 --> 00:05:25,055
So event sourcing is again, a
technique that preserves the entire

70
00:05:25,055 --> 00:05:30,785
system history through immutable
event logs, allowing every change

71
00:05:32,785 --> 00:05:33,535
to be logged.

72
00:05:34,885 --> 00:05:40,945
And recorded these logs are invaluable
for reliable state reconstruction

73
00:05:41,575 --> 00:05:46,675
making system robust and fall tolerant
by enabling precise recovery of the

74
00:05:46,675 --> 00:05:49,015
system state at any point in time.

75
00:05:50,125 --> 00:05:56,515
Key use cases include debugging issues
auditing for compliance replaying events

76
00:05:56,515 --> 00:05:59,095
to recover from failures or errors.

77
00:06:00,130 --> 00:06:06,800
Tools and frameworks like Apache Kafka,
even store Exxon framework, provide the

78
00:06:06,800 --> 00:06:11,710
necessary infrastructure to implement
event sourcing efficiently, ensuring a

79
00:06:11,710 --> 00:06:13,360
resilient and auditable architecture.

80
00:06:15,250 --> 00:06:18,010
Next is our event driven patterns.

81
00:06:19,655 --> 00:06:23,050
So even driven architecture is
a design approach that ensures

82
00:06:23,110 --> 00:06:28,060
responsive and reliable in dis in
reliability in distributed system.

83
00:06:28,420 --> 00:06:34,270
By enabling components to communicate
through events, it fosters decoupling

84
00:06:35,080 --> 00:06:37,480
making system more scalable and adaptive.

85
00:06:38,890 --> 00:06:43,660
Architectural safeguards like
circuit breaker pattern prevents

86
00:06:43,660 --> 00:06:49,220
cascading failures by isolating
problematic services while bulkhead

87
00:06:49,220 --> 00:06:51,740
com compartmentalization workloads.

88
00:06:52,100 --> 00:06:54,770
To protect critical resources.

89
00:06:55,190 --> 00:07:00,530
Additionally, fault isolation
mechanism ensures failure in one

90
00:07:00,530 --> 00:07:04,010
microservice don't get impacts others.

91
00:07:04,370 --> 00:07:06,770
Maintaining overall system stability.

92
00:07:07,700 --> 00:07:12,055
These patterns not only enhance
resilience, but also aligned with SRE

93
00:07:12,055 --> 00:07:16,730
principle of reliability, fault tolerance,
and proactive problem mitigation.

94
00:07:17,930 --> 00:07:20,150
Next is our continuous delivery.

95
00:07:21,095 --> 00:07:22,205
Continuous delivery.

96
00:07:22,745 --> 00:07:28,275
As it's essential in the resilience,
but also it aligns with SRE principles

97
00:07:28,275 --> 00:07:31,845
of reliability, fault tolerance,
and proactive problem mitigation.

98
00:07:33,195 --> 00:07:36,465
Reducing time to market for updates.

99
00:07:36,825 --> 00:07:41,535
Automated testing serves as the
foundation of safe deployments,

100
00:07:41,775 --> 00:07:47,355
ensuring high code quality and catching
issues early in the development cycle.

101
00:07:48,075 --> 00:07:52,665
Rollback capabilities further ensure
quick restoration of system functionality

102
00:07:53,085 --> 00:08:00,710
in case of deployment failures, tools
like Jenkins, GitLab AWS code pipeline.

103
00:08:01,820 --> 00:08:07,100
Are widely used to implement these
practices effectively driving stability

104
00:08:07,100 --> 00:08:09,920
and innovation in development processes.

105
00:08:11,930 --> 00:08:18,140
So distributor systems are the backbone
of modern applications, but they come

106
00:08:18,140 --> 00:08:20,750
with their own share of complexities.

107
00:08:21,020 --> 00:08:24,170
Complexities that often
challenge site reliability.

108
00:08:24,170 --> 00:08:28,280
Engineers tasked with ensuring
stability and reliability.

109
00:08:29,000 --> 00:08:33,800
From managing state changes to debugging
issues and ensuring fault tolerance,

110
00:08:34,220 --> 00:08:38,510
maintaining uptime in such systems
requires robust tool and approaches.

111
00:08:39,170 --> 00:08:45,740
This is where event sourcing shines
as an alternative pattern that not

112
00:08:45,740 --> 00:08:51,530
only reduces complexity, but also
aligns perfectly with SRA principles.

113
00:08:52,040 --> 00:08:57,110
Today we'll explore how event sourcing can
transform the way we manage system states.

114
00:08:57,485 --> 00:09:01,625
And reliability, focusing on
capturing events, building

115
00:09:01,625 --> 00:09:08,405
event logs, reconstructing,
state, and enabling projections.

116
00:09:09,405 --> 00:09:15,710
So even searching align seamlessly the
the event sourcing align seamlessly

117
00:09:15,710 --> 00:09:21,440
with SRE principles by reducing system
complexity and enhancing reliability.

118
00:09:22,100 --> 00:09:28,280
It begins with capturing events
recording all state changes as

119
00:09:28,280 --> 00:09:34,160
immutable timestamped objects to ensure
accurate tracking and observability.

120
00:09:35,030 --> 00:09:39,100
This is followed by building
an append only event log.

121
00:09:40,464 --> 00:09:46,615
Which serves as the system's definitive
source of truth, providing resiliency and

122
00:09:46,615 --> 00:09:51,175
auditability through state recognition.

123
00:09:51,204 --> 00:09:56,604
The current application state is derived
by sequential processing of the event

124
00:09:56,604 --> 00:10:01,194
streams, enabling swift debugging
and efficient incident response,

125
00:10:02,140 --> 00:10:04,285
critical for mentoring upline uptime.

126
00:10:05,155 --> 00:10:07,135
Lastly, projections.

127
00:10:07,735 --> 00:10:14,724
Allow tailored data model to be generated
from the same event sequence, improving

128
00:10:14,724 --> 00:10:21,175
operational insights and empowering SREs
with actionable metrics to proactively

129
00:10:21,175 --> 00:10:23,125
manage reliability and performance.

130
00:10:25,015 --> 00:10:29,425
Together this practices create a
robust fall tolerant architecture

131
00:10:29,545 --> 00:10:32,410
well suited to SRE goals.

132
00:10:34,015 --> 00:10:39,074
So we explored how event sourcing reduces
complexity and enhances reliability

133
00:10:39,074 --> 00:10:42,675
by aligning with the core principles
of site reliability engineering.

134
00:10:43,274 --> 00:10:49,334
But how does this play out in practice
to truly understand its impact?

135
00:10:49,874 --> 00:10:55,124
Let's dive into a real world example, the
migration of a Fortune five, 500 retail

136
00:10:55,124 --> 00:11:01,425
companies system with a monolithic to
event driven microservices architecture.

137
00:11:02,425 --> 00:11:07,135
So this case study highlights
the practical application of even

138
00:11:07,135 --> 00:11:10,944
sourcing in solving challenges
related to system downtime,

139
00:11:11,214 --> 00:11:13,135
scalability, and incident response.

140
00:11:13,780 --> 00:11:21,040
It showcases the SRE practices, combined
with event driven patterns enabled

141
00:11:21,100 --> 00:11:26,160
the company to achieve an operational
exp excellence, reduce complexity, and

142
00:11:26,160 --> 00:11:30,720
build up system resilient enough to
handle millions of daily transactions.

143
00:11:31,589 --> 00:11:38,640
Let's look at the challenge we faced,
the solution we implemented and the

144
00:11:38,640 --> 00:11:41,430
key outcomes from this migration.

145
00:11:43,439 --> 00:11:46,930
So let's delve into the practical
application of event sourcing and

146
00:11:46,930 --> 00:11:51,370
microservice migration through
the journey of of this use case.

147
00:11:51,850 --> 00:11:54,880
So this migration illustrates
the principle of SRE.

148
00:11:56,170 --> 00:12:00,220
So now let's take a closure look at how
site reliability engineering principle

149
00:12:00,220 --> 00:12:04,150
guided the migration journey from a
monolithic to event driven architecture.

150
00:12:05,975 --> 00:12:09,885
This migration, this transformation
was carried out into four phases.

151
00:12:09,975 --> 00:12:15,655
So now let's take a closer look at
how this the principles guided us.

152
00:12:15,715 --> 00:12:19,045
The SRA principles guided
us in the migration journey.

153
00:12:21,040 --> 00:12:25,880
So the first phase is during the
assessment phase the team model domains,

154
00:12:26,030 --> 00:12:28,100
and identify service boundaries.

155
00:12:28,820 --> 00:12:32,810
This strategic effort not only broke down
the monolithic system into manageable

156
00:12:32,810 --> 00:12:38,630
components, but also ensured modularity,
a critical factor for minimizing risk

157
00:12:38,720 --> 00:12:40,935
and maintaining operational stability.

158
00:12:42,020 --> 00:12:47,390
Second, the focus shifted to even
schema design, where the team

159
00:12:47,630 --> 00:12:52,370
created 47 distinct event types,
along with a versioning strategy.

160
00:12:53,420 --> 00:12:57,770
By structuring event data with
clarity, we laid the foundation

161
00:12:58,370 --> 00:13:03,680
for precise tracking and debugging,
empowering SREs with enhanced

162
00:13:03,710 --> 00:13:07,430
observability for issue re resolution.

163
00:13:08,780 --> 00:13:10,490
The third phase that ran parallel.

164
00:13:11,400 --> 00:13:16,410
Saw a development of Macroservices
alongside the legacy monolithic

165
00:13:16,920 --> 00:13:22,290
application, ensuring the existing system
remained functional during the transition.

166
00:13:22,860 --> 00:13:27,150
This dual approach aligned with
the SRA principles of minimizing

167
00:13:27,150 --> 00:13:31,165
disruption and maintaining uptime
while introducing new components.

168
00:13:32,145 --> 00:13:37,694
Finally, the progressive migration phase
enabled incremental traffic shifting to

169
00:13:37,694 --> 00:13:39,915
the new architecture with zero downtime.

170
00:13:40,694 --> 00:13:47,054
This gradual rollout shared stability,
allowing SRE to monitor performance

171
00:13:47,414 --> 00:13:52,749
and address any issues proactively
while keeping reliability intact.

172
00:13:53,939 --> 00:13:58,289
These four phases demonstrate the power
of combining event driven architecture

173
00:13:58,289 --> 00:14:03,329
with SRE practices to create a system that
is both scale, scalable and resilient.

174
00:14:03,989 --> 00:14:09,179
So now let's explore the measurable
outcomes of this migration and

175
00:14:09,179 --> 00:14:11,274
the tools that made it possible.

176
00:14:12,274 --> 00:14:19,204
Even schema design is crucial for
ensuring reliability and scalability

177
00:14:19,354 --> 00:14:20,789
in an event driven architecture.

178
00:14:21,424 --> 00:14:27,784
Key base practices includes exp explicit
versioning, which incorporates schema

179
00:14:27,784 --> 00:14:34,174
versions in event metadata to maintain
compatibility during updates, domain

180
00:14:34,204 --> 00:14:40,594
aligned events, leverage ubiquitous
language from the business domain

181
00:14:40,954 --> 00:14:46,229
for naming events, ensuring clarity
and alignment with domain logic.

182
00:14:48,604 --> 00:14:53,234
Temporal con context embeds
creation of timestamps and casual

183
00:14:53,234 --> 00:14:57,704
metadata within the events, enabling
accurate tracking and sequencing.

184
00:14:58,334 --> 00:15:04,334
Lastly, even should be self-contained,
including all necessary context within

185
00:15:04,814 --> 00:15:09,434
the payload to minimize the dependency
and streamlining the process processing.

186
00:15:11,294 --> 00:15:15,584
This practice collectively enhance
observability, fall tolerance,

187
00:15:15,644 --> 00:15:16,964
and operational efficiency.

188
00:15:18,344 --> 00:15:23,214
So having established the importance
of an well-designed event schemas,

189
00:15:23,274 --> 00:15:26,874
the next step is to explore how
to enhance system reliability.

190
00:15:26,874 --> 00:15:31,119
I. With resilience patterns
implementation, right?

191
00:15:32,049 --> 00:15:38,460
So resilient patterns such as circuit
breaker bulkheads and fault isolation

192
00:15:38,730 --> 00:15:45,150
mechanisms are integral to building
robust, even driven systems for SREs.

193
00:15:46,555 --> 00:15:49,800
These patterns not only
help in mitigating failures.

194
00:15:50,175 --> 00:15:54,765
But also aligned with the core
principles of uptime, observability,

195
00:15:54,795 --> 00:15:56,325
and proactive incident management.

196
00:15:56,985 --> 00:16:01,095
So let's now dive into the resilience
pattern, discussing the role and

197
00:16:01,095 --> 00:16:05,595
ensuring high availability and how
they can be effectively implemented

198
00:16:05,745 --> 00:16:07,485
in a distributed architecture.

199
00:16:08,485 --> 00:16:13,555
So resilience patterns are essential
for maintaining system ability

200
00:16:13,605 --> 00:16:16,605
reliability and fall tolerance
in distributed architecture.

201
00:16:17,905 --> 00:16:23,784
This circuit breaker pattern prevent
system overload by f failing fast

202
00:16:24,324 --> 00:16:29,994
when dependencies are unhealthy,
reducing cascading failure by 85%.

203
00:16:30,834 --> 00:16:36,444
And enabling automatic recovery with
configurable threshold for each service.

204
00:16:37,284 --> 00:16:43,464
The bulkhead pattern that isolates
components to contain failures

205
00:16:43,494 --> 00:16:49,554
within bounded context, utilizing
resource pool isolation, trade pool

206
00:16:49,554 --> 00:16:55,044
segregation, and requested limiting
to protect critical services.

207
00:16:56,004 --> 00:16:59,664
Meanwhile, retry with backup handles.

208
00:17:00,415 --> 00:17:07,104
Transient failures through intelligent
retry mechanism, leveraging exponential

209
00:17:07,734 --> 00:17:15,655
back of algorithms, jitter for load
disruptions, and dead letter cues to

210
00:17:15,655 --> 00:17:18,354
manage unprocessed events effectively.

211
00:17:19,014 --> 00:17:22,079
Together this patterns
align with SRE principles.

212
00:17:22,990 --> 00:17:29,100
By improving this system, stability,
scalability, and operational

213
00:17:29,100 --> 00:17:33,870
efficiency, again, with the
resilience pattern in place.

214
00:17:33,870 --> 00:17:39,870
The next critical step for ensuring system
reliability is real time monitoring.

215
00:17:41,250 --> 00:17:45,360
In event of architecture, event driven
architecture, real-time monitoring

216
00:17:45,360 --> 00:17:49,440
provides the visibility required
to maintain operational excellence.

217
00:17:50,040 --> 00:17:57,120
And proactively address issues before they
impact the users from SRE Perspectives.

218
00:17:57,120 --> 00:18:03,690
This strategy provides pivotal in
tech tracking key metricses detecting

219
00:18:03,690 --> 00:18:08,010
anomalies and ensuring adherence
to service level objectives.

220
00:18:08,940 --> 00:18:13,210
So let's delve into how realtime
monitoring implementation.

221
00:18:14,000 --> 00:18:17,620
Monitoring compliments resilience
patterns and supports a proactive

222
00:18:17,620 --> 00:18:19,570
approach to system reliability.

223
00:18:20,570 --> 00:18:24,200
So realtime monitoring strategies
align with SRA principles by

224
00:18:24,200 --> 00:18:25,700
enhancing visibility and enabling.

225
00:18:26,585 --> 00:18:34,475
Proactive Reliability management, so
aggregation, centralizes matrices while

226
00:18:34,505 --> 00:18:40,685
preserving context Through correlation
IDs, ensuring accurate analysis across

227
00:18:40,685 --> 00:18:46,360
service, alerting tri alerts, the
alerting triggers notification in

228
00:18:46,365 --> 00:18:48,480
response to service level objectives.

229
00:18:49,125 --> 00:18:54,405
Violation enabling rapid intervention
before issue gets escalated,

230
00:18:55,125 --> 00:18:56,685
then comes your investigation.

231
00:18:56,685 --> 00:19:02,145
Investigation fate facilitates your
tracing request flows across distributed

232
00:19:02,145 --> 00:19:07,455
services, helping pinpoint failures
and streamline debugging efforts.

233
00:19:08,070 --> 00:19:14,310
Lastly, instrumentation that embeds
telemetry in every service and event

234
00:19:14,310 --> 00:19:19,980
flow, providing continuous insights
into system performance and help

235
00:19:20,700 --> 00:19:24,810
together these practices ensure
effective monitoring and operational

236
00:19:24,870 --> 00:19:27,330
excellence in complex architectures.

237
00:19:29,010 --> 00:19:32,430
So now that we have explored the
strategies for real-time monitoring,

238
00:19:32,430 --> 00:19:36,640
let's, IM it's important to
evaluate how different migration

239
00:19:36,640 --> 00:19:41,080
methodologies stack up in the context
of reliability and scalability.

240
00:19:42,010 --> 00:19:46,060
From SRA perspectives, selecting the
right migration approach is crucial.

241
00:19:46,870 --> 00:19:50,770
To minimizing downtime, maintaining
system stability, and meeting

242
00:19:50,770 --> 00:19:52,030
service level objectives.

243
00:19:52,450 --> 00:19:56,250
In the next section, we will compare
popular migration methodologies,

244
00:19:56,250 --> 00:20:01,320
analyzing their strengths, limitations,
and alignment with SRE principles

245
00:20:01,860 --> 00:20:05,610
to help determine the best fit
for the resilient architecture.

246
00:20:06,610 --> 00:20:11,140
So when evaluating migration methodologies
through the lens of reliability

247
00:20:11,140 --> 00:20:15,580
and scalability, it's clear that
traditional approach and event driven

248
00:20:15,580 --> 00:20:19,480
strategies often vastly differ outcomes.

249
00:20:21,730 --> 00:20:26,530
The traditional approach often
relies on big bang cutover strategy,

250
00:20:26,740 --> 00:20:28,660
which involves extended downtime.

251
00:20:29,785 --> 00:20:35,530
Windows mi downtime windows migrating
monolithic database, and relying on

252
00:20:35,530 --> 00:20:38,570
mutual and manual verification process.

253
00:20:39,050 --> 00:20:42,860
While this method can work, in
some cases, it has limited rollback

254
00:20:42,860 --> 00:20:47,710
capabilities posing significant
risk to system stability.

255
00:20:49,030 --> 00:20:53,410
On the other hand, our event approach
prioritizes incremental service migration.

256
00:20:54,160 --> 00:20:59,290
Enabling zero downtime deployment
and ensuring system availability

257
00:20:59,290 --> 00:21:04,030
throughout the transition with data
synchronization, powered by events,

258
00:21:04,720 --> 00:21:12,020
automated cannery analysis for gradual
testing and instant rollback mechanism.

259
00:21:12,230 --> 00:21:17,720
So this methodologist aligns with
our SRE principles and delivers.

260
00:21:18,170 --> 00:21:22,610
The required results by adopting
this event driven migration strategy,

261
00:21:22,610 --> 00:21:27,380
organized, can minimize risk,
maintain, uptime, and achieve a more

262
00:21:27,380 --> 00:21:29,870
scalable and reliable architecture.

263
00:21:31,760 --> 00:21:35,930
With the migration methodologist
compared, the next step is to outline

264
00:21:35,960 --> 00:21:40,010
a clear path of execution through an
implemented implementation roadmap.

265
00:21:40,940 --> 00:21:44,360
A well-defined roadmap ensures
a structured transition.

266
00:21:45,485 --> 00:21:49,935
So with the migration methodologist
compared next step is to

267
00:21:50,415 --> 00:21:53,145
outline the clear path, right?

268
00:21:53,535 --> 00:21:54,105
A roadmap.

269
00:21:55,105 --> 00:21:58,315
So now that we have established the
importance of the structured migration

270
00:21:58,315 --> 00:22:03,235
process, let's walk through the key stages
of our implementation roadmap, and that

271
00:22:03,235 --> 00:22:08,095
is designed to ensure reliability and
scalability while aing to SR principles.

272
00:22:09,505 --> 00:22:12,905
So number one that we should discuss
is about the domain analysis, right?

273
00:22:12,935 --> 00:22:16,865
We begin by mapping business
domain to bounded context and

274
00:22:16,865 --> 00:22:18,305
identifying clear service.

275
00:22:19,160 --> 00:22:19,850
Boundaries.

276
00:22:20,390 --> 00:22:24,950
This ensures modularity and lays
a solid foundation for decomposing

277
00:22:24,950 --> 00:22:30,680
the monolithic into microservice
microservices, then comes event storming.

278
00:22:31,220 --> 00:22:35,090
The next step involves close
collaboration with domain expert to

279
00:22:35,090 --> 00:22:37,310
document core events and commands.

280
00:22:37,730 --> 00:22:42,410
This phase ensures that the architecture
aligns with real world business processes,

281
00:22:42,830 --> 00:22:45,680
enabling payer system behavior modeling.

282
00:22:47,240 --> 00:22:49,070
Next is our schema design.

283
00:22:50,600 --> 00:22:55,970
Here we define even schemas and
implement a compatibility strategy with

284
00:22:56,000 --> 00:22:58,250
versioning to handle future changes.

285
00:22:58,640 --> 00:23:02,930
This step is crucial for maintaining
system integrity and ensuring

286
00:23:02,930 --> 00:23:08,060
consistent communication between
services infrastructure setup.

287
00:23:08,970 --> 00:23:13,620
With Schema ready, we deploy our
event broker, set up observability

288
00:23:13,980 --> 00:23:15,660
platform and create robust.

289
00:23:16,215 --> 00:23:19,215
Continuous integration and
continuous deployment pipelines.

290
00:23:19,875 --> 00:23:23,235
These elements form the backbone
of the reliable and scalable event

291
00:23:23,235 --> 00:23:26,985
driven architecture, and then
is our incremental migration.

292
00:23:27,345 --> 00:23:32,985
Finally, we migrate one bounded context
at a time using progressive delivery.

293
00:23:33,255 --> 00:23:37,275
This approach allows us to
validate each step, ensuring zero

294
00:23:37,275 --> 00:23:42,915
downtime while maintaining system
stability, and that is what we.

295
00:23:43,560 --> 00:23:46,740
Are doing as a systems
site reliability engineers.

296
00:23:46,790 --> 00:23:47,270
Thank you.

297
00:23:47,750 --> 00:23:48,680
Thank you everyone.

298
00:23:49,400 --> 00:23:50,570
Thank you for joining today.

299
00:23:50,620 --> 00:23:54,580
In conclusion, we have explored the
transition to event-driven architecture,

300
00:23:54,640 --> 00:23:59,140
emphasizing the importance of SRE
principles in ensuring reliability.

301
00:24:01,450 --> 00:24:03,510
And scalability and resilience.

302
00:24:03,900 --> 00:24:07,680
From implementation to roadmaps,
to migration methodologies and

303
00:24:07,680 --> 00:24:11,370
resilience patterns, these strategies
collectively paved the way for

304
00:24:11,370 --> 00:24:13,350
modern high performing systems.

305
00:24:14,340 --> 00:24:16,620
Thank you for your time
today and your attention.

306
00:24:16,740 --> 00:24:21,600
It's been a pleasure discussing this
impactful practices with you, wishing

307
00:24:21,600 --> 00:24:27,210
you continued success in driving
innovation and reliability in your system.

308
00:24:28,035 --> 00:24:28,605
Thank you.

