1
00:00:00,210 --> 00:00:00,900
Hello.

2
00:00:01,400 --> 00:00:05,619
So we are going to talk about,
innovative tools to supercharge

3
00:00:05,619 --> 00:00:07,329
your Spring boot applications.

4
00:00:07,829 --> 00:00:12,785
So here, so the Spring boot, It is
a, the revolutionary Java application

5
00:00:12,785 --> 00:00:18,355
development because nowadays most of the,
enterprise developers are going to use

6
00:00:18,355 --> 00:00:23,025
this, spring boot applications because
this is the, and the more, most vis,

7
00:00:23,215 --> 00:00:28,544
framework and, So here we are going to
examine tools that, how to set up the

8
00:00:28,544 --> 00:00:34,275
project and how to eliminate the, boil
bread code and, improve the monitoring

9
00:00:34,335 --> 00:00:37,055
and, solving the, development challenges.

10
00:00:37,505 --> 00:00:38,825
And we'll go by one.

11
00:00:38,885 --> 00:00:39,955
each, tools, whatever.

12
00:00:39,970 --> 00:00:40,720
we use that.

13
00:00:41,220 --> 00:00:43,490
So first of all, here, the spring install.

14
00:00:44,180 --> 00:00:46,520
So how are you going
to start your project?

15
00:00:47,060 --> 00:00:52,650
So the easy way is, like you
have a spring.io install website

16
00:00:52,710 --> 00:00:56,655
that, like you can, start, you
can create a. Your new project.

17
00:00:57,255 --> 00:01:00,515
So there, you can get all the
dependencies which are needed, like all

18
00:01:00,515 --> 00:01:05,244
the starters, like a Tomcat starters
or spin data, GPS starters, and, you'll

19
00:01:05,244 --> 00:01:06,715
be whatever the starters you need.

20
00:01:06,715 --> 00:01:08,785
So you'll get all the starters from there.

21
00:01:09,205 --> 00:01:13,245
And, You can configure the, packages
however you want, dot jar and

22
00:01:13,745 --> 00:01:17,435
however you want there, in the
spring dot I, so you can see that

23
00:01:18,155 --> 00:01:21,604
and after that you can download the
project and, wherever you want to

24
00:01:21,604 --> 00:01:24,024
use that, any id, you can use that.

25
00:01:24,524 --> 00:01:27,475
So this is, how these being
board start our projects.

26
00:01:27,554 --> 00:01:28,975
and mainly the dev tools.

27
00:01:29,475 --> 00:01:36,625
So how the, the dev tools, will help
on our development cycles because here,

28
00:01:36,675 --> 00:01:41,384
the dev tool, dev tools mainly, so what
will happens, it'll monitor your class

29
00:01:41,384 --> 00:01:43,425
path whenever you made any changes.

30
00:01:43,454 --> 00:01:47,649
So automatically it'll repress,
your, class files and, it'll be

31
00:01:47,649 --> 00:01:50,479
reflecting, with your latest code
whenever you start the server.

32
00:01:50,979 --> 00:01:53,609
And, the reloading, so
what's happening here?

33
00:01:53,699 --> 00:01:58,169
So whenever you make changes on the front
end, so the browser, which automatically

34
00:01:58,169 --> 00:02:03,080
will be, uploaded with the latest changes
and, it'll reflect into the backend and,

35
00:02:03,130 --> 00:02:04,689
the property defaults here at Oregon.

36
00:02:04,689 --> 00:02:05,340
Say Here.

37
00:02:05,439 --> 00:02:09,169
we can say we have the many properties
like, application and application,

38
00:02:09,389 --> 00:02:12,570
like SIT and, you have application
data pro, the different properties

39
00:02:12,570 --> 00:02:15,740
is there and, so we can use the
properties wherever you want.

40
00:02:15,740 --> 00:02:19,280
get it based on the, at the rate value
properties, which is there in the,

41
00:02:19,330 --> 00:02:20,980
which is there in the fingerprint work.

42
00:02:21,480 --> 00:02:25,990
And, next we are going to do that,
how the Spring Boot interacting

43
00:02:25,990 --> 00:02:27,370
with the docker containers.

44
00:02:27,870 --> 00:02:32,050
So basically here, we have how the
self contain applications will work

45
00:02:32,050 --> 00:02:35,750
and, simplified the Docker file
and, consistency across environments

46
00:02:35,750 --> 00:02:39,050
and, spring boot profiles, we're
going to code that in this.

47
00:02:39,830 --> 00:02:42,160
So basically, the self
contain applications.

48
00:02:42,170 --> 00:02:43,610
so what happens means.

49
00:02:44,110 --> 00:02:48,610
So when you create these channel
applications, so it'll include the bred

50
00:02:48,610 --> 00:02:53,490
server and Tomcat, like kind of the,
so all the necessary, like a jar or

51
00:02:53,490 --> 00:02:55,640
wire file will be, will be replaced.

52
00:02:55,770 --> 00:02:57,600
will be going to add into that.

53
00:02:58,100 --> 00:03:04,360
and, the simpler docker files here from,
so what happens here when they open JDK?

54
00:03:04,660 --> 00:03:08,770
If we have the open JDK there, we
are going to replace our jar into the

55
00:03:08,770 --> 00:03:13,060
path and we can tell two documents.

56
00:03:13,120 --> 00:03:17,510
So where, we are keeping our jar
file in the specific locations.

57
00:03:17,810 --> 00:03:22,830
So the docker will be going to, take that,
the wall and will be going to, start your

58
00:03:22,950 --> 00:03:24,965
applications based on your configurations.

59
00:03:25,465 --> 00:03:30,355
And the con and consistency across
environments like, so here, the

60
00:03:30,355 --> 00:03:35,255
dockets, it'll help you to run on, your
local, environment can be run, CADC

61
00:03:35,255 --> 00:03:39,525
with the CD, CD pipelines and testing
environments and production servers.

62
00:03:39,605 --> 00:03:44,265
it'll run on the, different in months
where like wherever you, you install that.

63
00:03:44,765 --> 00:03:47,455
And finally the springboard,
profiles and dockets.

64
00:03:48,055 --> 00:03:50,725
So basically this profiles,
so you are going to use that.

65
00:03:51,225 --> 00:03:54,375
So whenever you want, so
let's say you have a different

66
00:03:54,375 --> 00:03:57,415
environments, SAT environment and
dev environment and productions.

67
00:03:57,535 --> 00:04:00,415
So you have a different, the
properties based on the ment.

68
00:04:00,445 --> 00:04:05,435
So if you are using the profiles, so based
on the profile, the profile name, it's

69
00:04:05,435 --> 00:04:11,115
Dev, SATR, The products in, the prop, the
propel name, it'll take the respective

70
00:04:11,115 --> 00:04:15,450
property and, will be, it'll be placed
into the, the, in the, into the, that

71
00:04:15,450 --> 00:04:19,870
respective docker image and docker, the
respective job file, wherever you need it.

72
00:04:20,370 --> 00:04:21,960
So the next is.

73
00:04:22,460 --> 00:04:28,420
How the spring, boot aware of your
intelligent, like kind of the, IDs here.

74
00:04:28,420 --> 00:04:30,670
I'm going to tell about
how the intelligent.

75
00:04:31,170 --> 00:04:35,860
So basically here, so the in inte
will help you to the, like kind of

76
00:04:35,860 --> 00:04:37,810
the automatic suggestions, the code.

77
00:04:37,910 --> 00:04:41,250
so whenever you write the codes,
so it'll help you the, some code

78
00:04:41,250 --> 00:04:43,250
snip at, and, for debugging.

79
00:04:43,250 --> 00:04:44,990
so the spring boot applications.

80
00:04:45,020 --> 00:04:47,540
so it's usually you can
debug the applications.

81
00:04:47,640 --> 00:04:50,930
and if you want to, run
the any, Your test cases.

82
00:04:51,030 --> 00:04:55,620
so the, so it's like you can do that
like method level or, like kind of

83
00:04:55,620 --> 00:04:57,730
the, class level wherever you want.

84
00:04:57,730 --> 00:05:02,190
You can in the, in this, in the
inte you can do that and basically

85
00:05:02,190 --> 00:05:05,780
here, In this, in the inte id.

86
00:05:06,080 --> 00:05:11,660
So this is a user friendly, id and,
whenever you trying to write the code

87
00:05:11,840 --> 00:05:13,830
and, it'll, help you that where you are.

88
00:05:14,820 --> 00:05:18,090
Where you are calling that method
and where you are going to call that

89
00:05:18,090 --> 00:05:19,710
means, so it'll help you on that.

90
00:05:20,310 --> 00:05:21,630
this is, the spring.

91
00:05:21,630 --> 00:05:24,870
like Springboard, is helping
for the, intelligent id.

92
00:05:25,370 --> 00:05:29,860
And when it comes to the, eliminate
boiler plate code, so basically here,

93
00:05:29,910 --> 00:05:31,680
the boiler plate code is nothing bad.

94
00:05:31,740 --> 00:05:34,185
So let's say like you are
writing some PO classes.

95
00:05:34,890 --> 00:05:38,630
So in the project classes you are, so
you have to write many, set and get it

96
00:05:38,990 --> 00:05:43,490
and like kind of the two string methods
and the yes score and equals method.

97
00:05:44,120 --> 00:05:48,890
So this, like the springboard will help
you to reduce all the barrel plate code.

98
00:05:49,280 --> 00:05:52,490
So with the help up, there is a
feature, there is a, there is annotation

99
00:05:52,490 --> 00:05:57,280
called, and get its, and, no augments
are, like now nowadays we have the

100
00:05:57,280 --> 00:05:59,570
data, data, which is one annotations.

101
00:05:59,960 --> 00:06:03,415
We, it'll help you to, it, it
reduce the, your boiler bread code.

102
00:06:03,915 --> 00:06:08,395
This bottle pit code, mainly in the
runtime you won't get many pin pits.

103
00:06:08,455 --> 00:06:13,285
So when only the developer perspective,
you'll get, the less code I can say you

104
00:06:13,285 --> 00:06:18,415
can, the code will be reduced and the
button on the developers will be reduced.

105
00:06:18,475 --> 00:06:22,435
So that is the main object on the
eliminating the boiler pit code.

106
00:06:22,935 --> 00:06:29,355
And, how the spring boat interacting,
with the, integrating with the

107
00:06:29,355 --> 00:06:29,715
microservices architectures.

108
00:06:30,215 --> 00:06:35,455
So basically here, the spring boot mainly,
you know how it'll start the Spring boot?

109
00:06:35,545 --> 00:06:40,105
Basically like there is a one
spring boot main applications.

110
00:06:40,625 --> 00:06:43,205
which will help you to
start your applications.

111
00:06:43,445 --> 00:06:46,175
So what will be there in the
spring boot main applications?

112
00:06:46,205 --> 00:06:49,835
So there is a, the static, main
method will be there, which is,

113
00:06:49,935 --> 00:06:54,635
Which is going to load all the
classes under the, the same package,

114
00:06:54,935 --> 00:06:56,965
what you define in the main class.

115
00:06:57,415 --> 00:06:59,905
So how it'll be going to start that.

116
00:06:59,905 --> 00:07:03,855
So there is a there is an annotation
call at the Red Spring boot applications.

117
00:07:04,510 --> 00:07:09,900
So that will help you to, load all your,
classes, which you are, created, which

118
00:07:09,900 --> 00:07:11,910
you are developed under the same package.

119
00:07:12,150 --> 00:07:16,310
So it'll be, loaded runtimes
whenever you start your servers.

120
00:07:16,810 --> 00:07:21,960
so mainly here how the, so my Spring
Boot applications are going to interact,

121
00:07:21,960 --> 00:07:23,900
in integrating with them, microservice.

122
00:07:24,440 --> 00:07:29,240
So basically here when you write away
any service like, restful services, or

123
00:07:29,240 --> 00:07:31,070
anything like web services, anything.

124
00:07:31,570 --> 00:07:35,800
So when you develop one respirable
services, that is, you are going to,

125
00:07:35,850 --> 00:07:38,935
create the, at the rate rest control
load, which is, which is nothing but

126
00:07:39,475 --> 00:07:41,575
the respirable services after that.

127
00:07:41,675 --> 00:07:46,725
when you write the microservices, the
micro is, like it is the, part up.

128
00:07:46,725 --> 00:07:47,175
when you.

129
00:07:47,315 --> 00:07:50,105
When you develop the Spring boot
applications, which is having

130
00:07:50,105 --> 00:07:53,385
the dashboard service, and at the
same times, you, if you want to

131
00:07:53,385 --> 00:07:56,205
interact with the other services,
you can do with, rest templates.

132
00:07:56,705 --> 00:08:02,510
So here, these Spring Boot is interact,
integrating with the, microservices

133
00:08:02,540 --> 00:08:06,570
because due to the Spring boot, features
mainly at their spring boot, boot

134
00:08:06,570 --> 00:08:12,710
application and starters and, how the,
your, spring Boot will help you to the

135
00:08:12,710 --> 00:08:17,480
microservices because microservices
nothing, but it's the, when you're writing

136
00:08:17,480 --> 00:08:21,610
the applications, it's Many d let's say
like I have the one applications, I have

137
00:08:21,610 --> 00:08:23,310
the, like different models that date.

138
00:08:23,310 --> 00:08:27,900
So now I want to write each model
one application, one microservices.

139
00:08:27,990 --> 00:08:33,455
Then, so what happens means each model
will be going to run in once, one service.

140
00:08:33,610 --> 00:08:38,170
That means like you're going to write
one, like I can say one service per that.

141
00:08:38,500 --> 00:08:41,890
And so that will be, that
each model will be running on

142
00:08:41,890 --> 00:08:44,170
one database and one servers.

143
00:08:44,170 --> 00:08:47,380
So the, so what happens means when
you integrating all the services,

144
00:08:47,890 --> 00:08:51,450
so it'll be, the performance will be
increased compared to the, compared

145
00:08:51,450 --> 00:08:53,280
to the like monolithic applications.

146
00:08:53,580 --> 00:08:56,480
Because let's say I
have one microservices.

147
00:08:56,540 --> 00:08:57,690
I have, two microservices.

148
00:08:57,690 --> 00:09:01,040
One is, employee microservices,
and another one is develop,

149
00:09:01,225 --> 00:09:02,545
department microservices.

150
00:09:03,025 --> 00:09:07,155
So when I interacting with
my applications, even my,

151
00:09:07,205 --> 00:09:10,025
department applications, my
department micro switch is down.

152
00:09:10,835 --> 00:09:15,835
Even also I can interact with the, my
employee, microservices because that is

153
00:09:15,835 --> 00:09:22,055
the advantage there, here because both are
running on their, like individual servers.

154
00:09:22,555 --> 00:09:24,325
That is the service independence here.

155
00:09:24,355 --> 00:09:28,615
And Interservice Communications,
suppose if you want to interact with

156
00:09:28,615 --> 00:09:30,235
the one service to another services.

157
00:09:30,325 --> 00:09:34,625
So here, so the Spring Boot will help you.

158
00:09:35,025 --> 00:09:38,865
On the how to interact with,
so basically in the testable

159
00:09:38,865 --> 00:09:40,675
services you have, desk template.

160
00:09:40,675 --> 00:09:42,325
There is a template called desk templates.

161
00:09:42,325 --> 00:09:47,195
So it'll help you how to, in how
to interact with other services.

162
00:09:47,245 --> 00:09:49,075
So there you have different methods.

163
00:09:49,075 --> 00:09:52,340
Like I know, you can, inbook
the GET method or put methods.

164
00:09:52,400 --> 00:09:53,990
You have different HTP methods.

165
00:09:54,620 --> 00:09:57,860
So with these methods, like you
can invoke the, other service,

166
00:09:57,860 --> 00:10:00,890
and here you can interact with
the one service to, the service.

167
00:10:01,390 --> 00:10:03,300
And, so service discovery.

168
00:10:03,800 --> 00:10:08,610
So I was telling about, Let's say
I have more than, five services.

169
00:10:08,640 --> 00:10:10,575
How are you going to,
interact with each other?

170
00:10:11,075 --> 00:10:14,855
So first of all, you need to register
with the one, like one registry.

171
00:10:15,095 --> 00:10:20,115
Then, so you, then you like, you can be,
in integrating with the other services.

172
00:10:20,165 --> 00:10:22,805
the Ika, it's I can say
one is Ika registry there.

173
00:10:23,105 --> 00:10:27,155
So this will help you to interact with the
one service to another service based on

174
00:10:27,155 --> 00:10:29,855
the, so in the registry you are going to.

175
00:10:29,990 --> 00:10:31,940
provide the, what are thes are there?

176
00:10:31,990 --> 00:10:35,170
like you, you are going to provide
the, all the service s you are

177
00:10:35,170 --> 00:10:36,430
going to interact with each other.

178
00:10:36,820 --> 00:10:40,805
So the registry will help you to
what is the next, service you want

179
00:10:40,805 --> 00:10:44,465
to interact based on the, your key,
whatever you're going to provide,

180
00:10:44,475 --> 00:10:45,915
from one service to another service.

181
00:10:46,415 --> 00:10:47,615
And Gateway is there.

182
00:10:47,885 --> 00:10:49,835
So Gateway is here.

183
00:10:50,335 --> 00:10:53,985
This is the, a centralized entry
point for the, interacting with

184
00:10:53,985 --> 00:10:55,485
one service, another service.

185
00:10:55,485 --> 00:11:00,265
So it'll, it'll help you on the load
balancing for each, all these services

186
00:11:00,775 --> 00:11:06,005
and, so it provides security and Security
and mainly like when you, whenever

187
00:11:06,005 --> 00:11:08,015
you're going to create a API gateway.

188
00:11:08,105 --> 00:11:12,515
So what happens means when the request
comes for the a p gateway, so it'll

189
00:11:12,515 --> 00:11:17,725
look, it'll, it'll, provide the, the
request, the service, which is coming to

190
00:11:17,725 --> 00:11:19,765
there, which service you have to invoke.

191
00:11:19,765 --> 00:11:24,045
It'll probably the respective, so the
a p get you will help you on that.

192
00:11:24,545 --> 00:11:27,065
So now, automated database migrations.

193
00:11:27,565 --> 00:11:30,465
So here, Western control for databases.

194
00:11:30,555 --> 00:11:34,005
and, here we can do like a track
and manage scheme changes as

195
00:11:34,005 --> 00:11:35,955
code alongside your application.

196
00:11:36,375 --> 00:11:39,935
And, suppose if you've made any
change in the database, so it'll

197
00:11:39,935 --> 00:11:43,190
help you to the validate, your,
database query or, whatever it may be.

198
00:11:43,905 --> 00:11:45,435
And, repeatable migrations.

199
00:11:45,435 --> 00:11:49,755
So suppose so if you're writing, many
database scripts, so it'll help you on

200
00:11:49,755 --> 00:11:55,675
that and, and speak, but mainly it's
automatically detecting and, applying the

201
00:11:55,675 --> 00:12:00,755
migrations while starting, while, starting
the servers because this, elements,

202
00:12:00,805 --> 00:12:05,065
the traditional disconnect between the
application code and the schema changes

203
00:12:05,095 --> 00:12:06,905
whenever, you deploy the service.

204
00:12:07,405 --> 00:12:10,975
So the next one is the real
services for the testing.

205
00:12:11,875 --> 00:12:15,655
So whenever you try to test the
spring boot applications, you don't

206
00:12:15,655 --> 00:12:17,665
need to worry about the, your mocks.

207
00:12:17,755 --> 00:12:20,775
So it'll be going to run
with the, there own services.

208
00:12:20,835 --> 00:12:25,115
So there is a, there is boot
test, so it'll help you on that.

209
00:12:25,625 --> 00:12:31,170
And, So whenever you run that, any, test
case, so you can do that first screen

210
00:12:31,170 --> 00:12:36,500
instance for the every test run and, and
even you can, you can run the, like you,

211
00:12:36,550 --> 00:12:40,280
you can test the, your database queries
and, you can test the, or the database,

212
00:12:40,310 --> 00:12:44,390
repositories whenever you were trying
to, integrated with the database, with

213
00:12:44,390 --> 00:12:46,570
the, the repositories and services.

214
00:12:47,070 --> 00:12:50,220
So the last one is circuit
breaking and fault tolerance.

215
00:12:50,720 --> 00:12:53,420
So the circuit breaking will help you to.

216
00:12:53,920 --> 00:12:58,680
Whenever any, failures happen, your
service, so it'll catch the circuit

217
00:12:58,680 --> 00:13:03,880
breaker, for your failure, and it'll help
you to the, provide the, the problems.

218
00:13:03,880 --> 00:13:04,765
when the circuit opens.

219
00:13:05,265 --> 00:13:07,340
So it's ki on it to look for the failures.

220
00:13:07,345 --> 00:13:10,835
if the failures exceed the maximums,
maximum of, times, what happens

221
00:13:10,835 --> 00:13:12,795
means it'll, it'll, report to you.

222
00:13:12,945 --> 00:13:16,315
So immediately it'll stop the
sequential requests, which is

223
00:13:16,315 --> 00:13:17,230
coming up for the circuit breaker.

224
00:13:17,730 --> 00:13:23,190
So that is the main, advantage in the
circuit breaker here, and rate limited the

225
00:13:23,190 --> 00:13:27,540
product services from the being who harmed
by the, constrain the rate of the request.

226
00:13:27,570 --> 00:13:33,660
This ensures system stability during TRO
spikes and the province research adjust.

227
00:13:34,160 --> 00:13:34,700
So here.

228
00:13:35,200 --> 00:13:38,990
It'll be producting the services
whenever you trying to, when,

229
00:13:39,620 --> 00:13:42,830
whenever you got the fault tolerance,
when you turn your services.

230
00:13:43,010 --> 00:13:46,150
and, it'll show the, what is
the topic is coming to the,

231
00:13:46,150 --> 00:13:48,070
your request and your services.

232
00:13:48,795 --> 00:13:53,615
And where the like the maximum, the topic
is coming and, based on that, so you can

233
00:13:53,615 --> 00:13:57,755
go and you can analyze the, your issues
suppose if you have any issues on that.

234
00:13:58,255 --> 00:13:58,795
Thank you.

235
00:13:58,855 --> 00:13:59,335
Thank very much.

236
00:13:59,335 --> 00:14:00,710
That's it.

237
00:14:00,790 --> 00:14:00,990
It.

