1
00:00:00,130 --> 00:00:05,100
Hello, I'm Parth and I lead Mobile Storage
Infra on Android for Meta's products.

2
00:00:05,600 --> 00:00:08,770
Today, I'm here to share the journey
I went through while working in the

3
00:00:08,799 --> 00:00:11,000
R& D department at SAP Labs India.

4
00:00:11,500 --> 00:00:16,469
The topic is regarding the solution
we built for crisis management during

5
00:00:16,499 --> 00:00:21,340
COVID using contact tracing to identify,
notify, and support SAP employees.

6
00:00:21,840 --> 00:00:23,890
Who might be at risk of infection.

7
00:00:24,390 --> 00:00:26,370
So what is contact tracing?

8
00:00:26,760 --> 00:00:31,440
Contact tracing is the method of
identifying and managing people who may

9
00:00:31,440 --> 00:00:33,839
have been exposed to a contagious disease.

10
00:00:34,680 --> 00:00:38,879
During 2020 and 2021, this was
a big problem for businesses.

11
00:00:39,540 --> 00:00:45,160
If even a single employee was exposed
to COVID, it could infect everyone and

12
00:00:45,160 --> 00:00:47,050
anyone else who might be in the vicinity.

13
00:00:47,550 --> 00:00:52,115
Contact tracing involves identifying
people who might be infectious, Notifying

14
00:00:52,125 --> 00:00:56,775
them to quarantine themselves, notifying
others who may have come into contact

15
00:00:56,824 --> 00:01:01,185
with this person, and then monitoring
and providing support and treatment.

16
00:01:02,055 --> 00:01:07,795
During 2020 and early 2021, as businesses
were slowly opening up, keeping

17
00:01:07,795 --> 00:01:12,405
a track of employees who might be
exposed to COVID became a major issue.

18
00:01:13,095 --> 00:01:17,775
A single person could end up infecting
everyone else on campus and cause

19
00:01:17,775 --> 00:01:19,535
a complete shutdown of operations.

20
00:01:20,035 --> 00:01:24,315
SAP had a manual signup sheet for tracking
employees who are visiting office.

21
00:01:24,765 --> 00:01:29,095
If someone called in sick, staff
would go through the sheet, figure

22
00:01:29,195 --> 00:01:33,244
out everyone else who has come
into contact and call them to get

23
00:01:33,244 --> 00:01:35,064
tested or quarantine themselves.

24
00:01:35,564 --> 00:01:39,635
It was a lot of manual effort and
notifying employees took a couple of days.

25
00:01:40,075 --> 00:01:42,845
during which the infection
could spread even more and

26
00:01:42,845 --> 00:01:44,315
this process was not scalable.

27
00:01:44,815 --> 00:01:49,745
This also introduced a lot of false
positives as employees who might be

28
00:01:49,745 --> 00:01:53,984
on opposite sides of the campus would
also be part of the same signup sheet.

29
00:01:54,484 --> 00:01:59,264
From a business perspective, SAP
wanted automation to reduce manual

30
00:01:59,264 --> 00:02:04,394
effort and delay and they wanted to
minimize cost, especially of hardware,

31
00:02:04,474 --> 00:02:06,204
as they believe COVID to be temporary.

32
00:02:06,704 --> 00:02:12,234
We realized the best way forward would be
to use smartphones already on employees.

33
00:02:12,824 --> 00:02:16,934
Everyone had a phone that they
carry with them everywhere, and no

34
00:02:16,934 --> 00:02:19,924
one would share their phones with
each other, especially at office.

35
00:02:20,424 --> 00:02:24,614
We looked into possible solutions,
and the tech we came to use was to

36
00:02:24,614 --> 00:02:27,884
use Bluetooth low energy or BLE.

37
00:02:28,684 --> 00:02:32,824
BLE as its name suggests, consumes
low energy from the device.

38
00:02:32,874 --> 00:02:38,224
It provides a lightweight signal that
does not have extremely high range,

39
00:02:38,294 --> 00:02:40,154
which is perfect for contact tracing.

40
00:02:40,844 --> 00:02:44,014
And it can be used to send small
amounts of data between devices.

41
00:02:44,514 --> 00:02:48,364
BLE technology exists on both
Android and iOS, and it provides a

42
00:02:48,364 --> 00:02:52,894
framework called Generic Attribute
Profile, or GATT for short.

43
00:02:53,574 --> 00:02:57,754
GATT can be used to send and
receive short pieces of data known

44
00:02:57,754 --> 00:02:59,904
as attributes over a BLE link.

45
00:03:00,404 --> 00:03:05,784
Device A can act as a server, also
called an advertiser, and that broadcasts

46
00:03:05,874 --> 00:03:08,304
a unique ID called a scan record.

47
00:03:08,864 --> 00:03:14,774
This ID Is of the service itself,
the contact tracing service device B

48
00:03:14,824 --> 00:03:16,974
will scan for all nearby advertisers.

49
00:03:17,574 --> 00:03:21,394
It will collect all the devices
which have this unique ID, connect to

50
00:03:21,394 --> 00:03:23,784
them, and then read a scan response.

51
00:03:24,274 --> 00:03:28,584
And the scan response can have an
another ID that can be used to uniquely

52
00:03:28,624 --> 00:03:30,104
identify the device or the user.

53
00:03:30,794 --> 00:03:32,724
So every device will act as.

54
00:03:33,139 --> 00:03:39,769
An advertiser and a scanner and basically
will be responsible of sending data of all

55
00:03:39,769 --> 00:03:41,769
other nearby devices that we discovered.

56
00:03:42,269 --> 00:03:44,499
Now let's get to the
limitations of this technology.

57
00:03:44,999 --> 00:03:49,109
On Android, multiple clients
can connect to a single server,

58
00:03:49,529 --> 00:03:53,519
but as soon as a client tries to
connect to a second server, the

59
00:03:53,519 --> 00:03:55,039
first connection is terminated.

60
00:03:55,979 --> 00:03:59,059
This, since connections are
asynchronous, we will have to

61
00:03:59,059 --> 00:04:04,219
queue them, and this can result to
potential loss of nearby devices.

62
00:04:04,959 --> 00:04:09,969
But, Android can broadcast two
IDs as part of the scan record.

63
00:04:10,469 --> 00:04:14,999
Even when the app is backgrounded or
screen is locked and the scan response

64
00:04:15,089 --> 00:04:18,795
will also work properly when the app
is backgrounded or screen is locked.

65
00:04:18,795 --> 00:04:22,069
On iOS, it's a little different.

66
00:04:22,359 --> 00:04:25,689
The scanner API can queue
connections, so we don't need to

67
00:04:25,689 --> 00:04:32,089
queue them ourselves, but it can only
broadcast a single ID for a service.

68
00:04:32,839 --> 00:04:36,409
Also, when the app is backgrounded,
the scan response will return a

69
00:04:36,409 --> 00:04:39,219
null value, making it impossible
to identify the device.

70
00:04:39,719 --> 00:04:44,419
The basis of our contact tracing
solution is that each device tells

71
00:04:44,559 --> 00:04:48,589
our internal servers what other
device it came into contact with.

72
00:04:49,059 --> 00:04:53,779
This helps us build basically a
graph of employees and then notify

73
00:04:53,789 --> 00:04:55,419
them of potential infections.

74
00:04:55,919 --> 00:04:58,629
Our architecture uses three
independent methods of tracing.

75
00:04:59,549 --> 00:05:03,259
Android to Android is done using
only the advertiser and the scanner.

76
00:05:03,549 --> 00:05:06,029
The advertiser will broadcast two IDs.

77
00:05:06,394 --> 00:05:10,614
One for the service and the other,
which represents the device or the user,

78
00:05:11,474 --> 00:05:16,784
the scanner will then scan these IDs,
recognize that it is part of the contact

79
00:05:16,784 --> 00:05:20,844
tracing service, and then register
the second ID as the other device or

80
00:05:20,844 --> 00:05:25,304
the other user, the Android device
will then communicate to our internal

81
00:05:25,304 --> 00:05:30,079
servers in regular intervals with all
the devices it came into contact with.

82
00:05:30,799 --> 00:05:35,749
An example would be if A, B, and C are
Android devices and A is the scanner.

83
00:05:36,329 --> 00:05:40,609
It finds B and C and then
it'll send an edge from A to

84
00:05:40,609 --> 00:05:42,389
B and A to C to our servers.

85
00:05:42,889 --> 00:05:46,529
iOS tracing is done using
GAT server and client.

86
00:05:47,289 --> 00:05:52,609
Every iOS device will advertise the
same ID to all other iOS devices.

87
00:05:53,429 --> 00:05:57,479
And all of the iOS devices will scan
this record that contains a temporary

88
00:05:57,479 --> 00:05:59,499
MAC address of the Gatsby server.

89
00:05:59,999 --> 00:06:03,919
Now, it will use this temporary
MAC address, connect to these

90
00:06:03,919 --> 00:06:08,069
devices, read a property called a
characteristic, which contains the

91
00:06:08,069 --> 00:06:09,469
device identifier and the response.

92
00:06:09,969 --> 00:06:14,519
And same as Android, iOS devices
will upload all of these edges to our

93
00:06:14,869 --> 00:06:16,919
internal servers at regular intervals.

94
00:06:17,479 --> 00:06:21,979
So if X, Y, and Z are three iOS
devices, There'll be an edge saying X

95
00:06:21,979 --> 00:06:25,919
to Y and X to Z from X to our servers.

96
00:06:26,859 --> 00:06:32,399
This means now with these two individual
architectures running, we have Android

97
00:06:32,399 --> 00:06:36,699
devices, which can identify all other
Android devices and iOS devices, which

98
00:06:36,699 --> 00:06:38,739
can identify all other iOS devices.

99
00:06:39,239 --> 00:06:43,159
When it comes to iOS to Android
or Android to iOS detection, the

100
00:06:43,159 --> 00:06:45,754
tracing is done by the iOS device.

101
00:06:46,494 --> 00:06:50,354
Each Android device will also
run a GAT server, which the

102
00:06:50,394 --> 00:06:52,264
iOS device will connect to.

103
00:06:52,714 --> 00:06:54,824
Similar to how it does
with iOS GAT servers.

104
00:06:55,424 --> 00:07:01,584
It will connect to it and it will read
the scan response from the Android device.

105
00:07:01,704 --> 00:07:06,074
If for example, X is an iOS device
and A is an Android device, the iOS

106
00:07:06,224 --> 00:07:09,324
device is responsible for both edges.

107
00:07:09,749 --> 00:07:11,999
Only in the case of
Android to iOS detection.

108
00:07:12,499 --> 00:07:16,039
This removes the limitation that
iOS devices cannot send a separate

109
00:07:16,049 --> 00:07:20,179
scan response while running in the
background, as well as the limitation

110
00:07:20,189 --> 00:07:23,169
that Android GATT clients can't queue.

111
00:07:23,669 --> 00:07:25,669
The results spoke for themselves.

112
00:07:25,739 --> 00:07:28,519
The architecture resolved
platform limitations.

113
00:07:28,579 --> 00:07:32,829
We had 7, 000 plus employees
install and use the app, and

114
00:07:32,829 --> 00:07:34,279
they used it to visit the office.

115
00:07:34,769 --> 00:07:38,439
We also use geo fencing to ensure the
app does not run in the background

116
00:07:38,459 --> 00:07:39,669
when employees are not at work.

117
00:07:40,119 --> 00:07:41,859
So that we do not invade their privacy.

118
00:07:42,359 --> 00:07:48,249
Other technologies that we looked into are
Wi Fi, RFID, NFC, and normal Bluetooth.

119
00:07:48,749 --> 00:07:53,659
Wi Fi had a significantly higher
battery drain, and it was a little

120
00:07:53,659 --> 00:07:59,129
more complicated to work with than
Bluetooth low energy, especially on iOS.

121
00:07:59,919 --> 00:08:03,629
RFID would require higher
hardware investment and NFC

122
00:08:03,759 --> 00:08:05,149
had the issue of low range.

123
00:08:05,649 --> 00:08:09,269
Traditional Bluetooth had changed
their APIs so that the MAC address

124
00:08:09,299 --> 00:08:13,959
being broadcasted by the Bluetooth
device is a temporary MAC address.

125
00:08:14,439 --> 00:08:18,629
This was done so that advertising
companies and malls do not uniquely

126
00:08:18,629 --> 00:08:22,729
identify devices or users based
on their Bluetooth MAC address.

127
00:08:22,809 --> 00:08:27,299
But because of this change, we couldn't
use them for the same thing, identifying

128
00:08:27,299 --> 00:08:28,519
users based on the MAC address.

129
00:08:29,019 --> 00:08:32,319
So we had to go with Bluetooth
low energy because of these

130
00:08:32,359 --> 00:08:34,099
limitations on other technologies.

131
00:08:34,599 --> 00:08:39,249
We have a patent for this as part of SAP
and it's published on Google Scholar.

132
00:08:39,279 --> 00:08:42,049
If anyone is interested, please reach
out to me and I can send more details.

133
00:08:42,549 --> 00:08:46,469
That's all for my presentation
and thank you for your time.

134
00:08:47,059 --> 00:08:48,619
Have a good rest of the conference.

