1
00:00:00,690 --> 00:00:03,239
Hi everyone, and I hope
you all are doing well.

2
00:00:03,890 --> 00:00:08,649
So today my session is all about GitOps
Dynamics navigating the new era of DevOps.

3
00:00:09,260 --> 00:00:13,440
so we all know that DevOps
is really important in any

4
00:00:13,709 --> 00:00:15,930
IT company or any IT domain.

5
00:00:16,089 --> 00:00:19,680
That is what we're going to discover,
but we're also going to see how GitOps

6
00:00:19,680 --> 00:00:22,419
is going to enhance our DevOps process.

7
00:00:22,760 --> 00:00:26,280
So before starting, let me give you
a bit introduction about myself.

8
00:00:26,280 --> 00:00:26,880
who am I?

9
00:00:27,690 --> 00:00:30,450
So my name is Megha Ghatur
and I'm working as a DevOps

10
00:00:30,490 --> 00:00:32,710
engineer at Barracuda Networks.

11
00:00:33,070 --> 00:00:34,620
Also, I am a YouTuber.

12
00:00:34,669 --> 00:00:39,330
I like creating YouTube videos
on cloud native and DevOps topic.

13
00:00:39,350 --> 00:00:41,909
So you can reach out to me there
and also have a look around.

14
00:00:42,270 --> 00:00:44,270
Some of the YouTube
videos that I've created.

15
00:00:44,530 --> 00:00:45,900
I'm also a content creator.

16
00:00:45,900 --> 00:00:48,400
Like I like, writing, writing articles.

17
00:00:48,400 --> 00:00:49,970
So you can reach out to me on LinkedIn.

18
00:00:49,980 --> 00:00:51,389
You can read my articles there.

19
00:00:51,819 --> 00:00:56,099
And yes, I'm also, providing
mentorship where anyone who is new

20
00:00:56,100 --> 00:00:59,079
to DevOps or anyone who wants to
explore their career in DevOps,

21
00:00:59,109 --> 00:01:00,720
they can reach out to me on TopMed.

22
00:01:01,130 --> 00:01:05,200
So you can scan this and, this will lead
you to some of the details about me.

23
00:01:05,700 --> 00:01:08,280
So we will directly go
into our today's session.

24
00:01:08,280 --> 00:01:11,280
That is GitOps dynamic
navigating the new era of DevOps.

25
00:01:11,780 --> 00:01:15,770
Now, coming to the agenda, what we're
going to see is we'll see what DevOps

26
00:01:15,770 --> 00:01:20,060
is, what GitOps is, and finally, we
understand its architecture, its concepts.

27
00:01:20,090 --> 00:01:23,584
And at the end, we'll have a demo
that will showcase us like how to.

28
00:01:23,645 --> 00:01:26,414
How GitOps is actually helping us, right?

29
00:01:27,115 --> 00:01:31,044
So before moving further on understanding
what GitOps is, we need to have an

30
00:01:31,074 --> 00:01:33,274
understanding about what DevOps is.

31
00:01:33,715 --> 00:01:37,855
And I think most of us who are here
will have an idea that what DevOps is.

32
00:01:38,134 --> 00:01:41,165
So if you search in Google, like
what is DevOps, you'll get a

33
00:01:41,165 --> 00:01:44,645
definition that states as DevOps is
something that is trying to bridge

34
00:01:44,645 --> 00:01:46,315
the gap between Dev and Ops team.

35
00:01:47,165 --> 00:01:49,625
This is what the definition
that we usually see.

36
00:01:50,085 --> 00:01:54,305
So it's nothing, it's a way to
automate your existing process

37
00:01:54,475 --> 00:01:58,345
by making use of various DevOps
tools at this various stages.

38
00:01:58,355 --> 00:02:04,824
These stages are plan, code, build, test,
and finally deploy, operate, and release.

39
00:02:05,014 --> 00:02:09,705
So all these stages will be making use
of DevOps tool in order to automate

40
00:02:09,715 --> 00:02:11,665
your process and deliver the feature.

41
00:02:12,305 --> 00:02:16,905
Now, how GitOps is actually
enhancing your existing DevOps

42
00:02:16,905 --> 00:02:18,175
process that we're going to see.

43
00:02:18,675 --> 00:02:22,195
So same way, if you search about
GitOps, you'll get a definition that

44
00:02:22,205 --> 00:02:25,784
GitOps is a way to perform continuous
delivery process by leveraging

45
00:02:25,784 --> 00:02:28,325
Git as single source of truth.

46
00:02:28,634 --> 00:02:31,945
Now, what do you mean by
single source of truth?

47
00:02:32,295 --> 00:02:35,895
So single source of truth
means the way you store your.

48
00:02:36,395 --> 00:02:39,335
The developers are the one who
are responsible for writing the

49
00:02:39,375 --> 00:02:41,285
code and where do we store it?

50
00:02:41,465 --> 00:02:45,060
We store it in any git repository,
git repositories, right?

51
00:02:45,060 --> 00:02:48,784
Some of the famous are like,
GitHub, GitLab, Bitbucket, Azure

52
00:02:48,824 --> 00:02:50,404
Repository, and many other.

53
00:02:50,754 --> 00:02:55,794
The way you store your code, GitOps is
also telling on leveraging that feature

54
00:02:55,804 --> 00:02:58,104
for storing your configuration files.

55
00:02:58,164 --> 00:02:59,924
We'll see that in the next slides.

56
00:03:00,424 --> 00:03:02,994
GitOps works on basically
two major concepts.

57
00:03:03,309 --> 00:03:08,509
One is that it wants to store your
application repository, the way you

58
00:03:08,509 --> 00:03:12,729
store your application repository,
like the code that is written by the

59
00:03:12,729 --> 00:03:18,449
developer and the code may be written
in any language like Java, Go or C Sharp

60
00:03:18,459 --> 00:03:20,549
or any language and we store it in Git.

61
00:03:20,869 --> 00:03:24,509
So we know that this is where we
need to look out and this is where

62
00:03:24,509 --> 00:03:28,649
we need to get in touch or see
the files if we have any issues.

63
00:03:28,954 --> 00:03:34,264
Same way GitHub's concept is telling us
to store the configuration files also.

64
00:03:35,144 --> 00:03:36,984
Now what are these configuration files?

65
00:03:37,334 --> 00:03:41,444
These configuration files will
represent how your application will

66
00:03:41,454 --> 00:03:45,264
behave in the live environment, like
that is your production environment.

67
00:03:45,764 --> 00:03:50,204
Some of the examples of configuration
files or repository, you can see that.

68
00:03:50,564 --> 00:03:53,174
Some are like your Kubernetes YAML files.

69
00:03:53,174 --> 00:03:56,244
Like we write pod YAML files,
deployment YAML files, service

70
00:03:56,244 --> 00:03:58,894
YAML file, ingress YAML file.

71
00:03:59,034 --> 00:04:03,134
And your docker, file, all this will
actually depict how your application will

72
00:04:03,144 --> 00:04:05,254
be behaving in the production environment.

73
00:04:05,624 --> 00:04:09,124
So GitOps is telling not only store
your code repository, but also

74
00:04:09,124 --> 00:04:10,994
store your configuration files.

75
00:04:11,494 --> 00:04:14,794
So basically there are four major
principles on which GitOps works.

76
00:04:15,024 --> 00:04:18,754
So they are declarative, version
and immutable, pulled automatically

77
00:04:18,774 --> 00:04:20,154
and continuously reconciled.

78
00:04:20,764 --> 00:04:23,844
Now we'll try to understand these
principles Because on the basis

79
00:04:23,844 --> 00:04:27,214
of this, we will be, we will be
going through the demo, right?

80
00:04:27,714 --> 00:04:27,934
Okay.

81
00:04:27,934 --> 00:04:32,194
The first principle is saying that
declarative, the word itself is

82
00:04:32,234 --> 00:04:34,104
telling us to declare something.

83
00:04:34,364 --> 00:04:37,674
Now what you need to declare the
declarative word is telling us

84
00:04:37,704 --> 00:04:39,314
to declare your desired state.

85
00:04:39,334 --> 00:04:41,624
Now, how do you, declare
your desired state?

86
00:04:41,664 --> 00:04:43,344
configuration files.

87
00:04:44,019 --> 00:04:46,929
YAML files or deployment YAML file.

88
00:04:46,939 --> 00:04:52,089
These are all your configuration
YAML files that needs to be declared.

89
00:04:52,559 --> 00:04:57,459
Second principle is telling us that
it states as version and immutable.

90
00:04:57,959 --> 00:05:02,729
Now, GitOps is telling us that
declaring is not the only one thing

91
00:05:02,729 --> 00:05:06,349
that you need to do, but also it
needs to be version and immutable.

92
00:05:06,389 --> 00:05:07,709
And how are you going to do it?

93
00:05:07,919 --> 00:05:11,859
You're going to store it in some of the
Git repositories where you can have,

94
00:05:11,909 --> 00:05:15,589
we can have a history and we can know
that this is the place where we need

95
00:05:15,619 --> 00:05:17,559
to identify our configuration files.

96
00:05:17,559 --> 00:05:21,169
And those can be versioned and
we'll have a history of it the

97
00:05:21,169 --> 00:05:22,789
same way as we have for our work.

98
00:05:23,024 --> 00:05:24,274
source code repository.

99
00:05:24,774 --> 00:05:27,564
Third principle is telling
us pulled automatically.

100
00:05:27,624 --> 00:05:29,114
Now what is pulled automatically.

101
00:05:29,554 --> 00:05:32,544
So in the upcoming slides, I
will be showing you the GitOps

102
00:05:32,544 --> 00:05:35,504
architecture just in order to make
you understand this principle.

103
00:05:36,014 --> 00:05:38,084
I'll tell you a few points
of the architecture.

104
00:05:38,464 --> 00:05:40,954
So what happens is there will be an agent.

105
00:05:40,964 --> 00:05:44,824
You can call it as GitOps agent that
will be constantly or you will be

106
00:05:44,824 --> 00:05:46,844
installing it in your Kubernetes cluster.

107
00:05:47,339 --> 00:05:53,179
So that GitOps agent or that software
agent will be, constantly looking and

108
00:05:53,179 --> 00:05:57,959
it will be constantly Trying to make
your actual state to be equal to your

109
00:05:57,959 --> 00:06:04,129
desired state So if any changes is done
in your desired state Those changes

110
00:06:04,169 --> 00:06:08,439
will be pulled by that agent and it will
be applied to your live environment.

111
00:06:08,449 --> 00:06:10,939
How we will be seeing that
in the upcoming slides.

112
00:06:11,579 --> 00:06:14,689
Fourth principle is telling
us continuously reconcile.

113
00:06:14,939 --> 00:06:18,769
So that agent that I talked about, which
is sitting in your Kubernetes cluster,

114
00:06:19,069 --> 00:06:21,439
where all your applications are deployed.

115
00:06:21,709 --> 00:06:25,399
It not only sits there,
it constantly observes.

116
00:06:25,619 --> 00:06:27,819
It's like a continuous circular motion.

117
00:06:27,819 --> 00:06:30,144
I hope you've enjoyed the video
Like it will observe some changes.

118
00:06:30,364 --> 00:06:33,594
If it gets the changes, it will pull
those changes and it will apply it.

119
00:06:33,614 --> 00:06:37,244
Once it is applied, then it
comes back to the first, rotation

120
00:06:37,254 --> 00:06:38,934
that is observe the changes.

121
00:06:39,724 --> 00:06:43,914
So the main task is to make sure
your actual state is your desired is

122
00:06:43,964 --> 00:06:45,544
always equal to your desired state.

123
00:06:46,144 --> 00:06:50,084
What is your desired state is
whatever you have declared in your

124
00:06:50,084 --> 00:06:54,074
configuration files And what is
your actual state is what is you are

125
00:06:54,104 --> 00:06:55,964
seeing in your production environment?

126
00:06:56,464 --> 00:07:00,204
Okay now coming to the deployment
which is very much useful as github's

127
00:07:00,204 --> 00:07:04,154
is something that is closely related
to your kubernetes Clusters or you

128
00:07:04,154 --> 00:07:07,804
can say where the deployment takes
place that is and you know The cicd is

129
00:07:07,804 --> 00:07:09,394
the heart right heart of the devops.

130
00:07:09,414 --> 00:07:14,399
So github's is something that comes in
your deployment process You So there are

131
00:07:14,399 --> 00:07:16,309
basically two major types of deployment.

132
00:07:16,669 --> 00:07:21,419
One is your push based deployment and the
other one is your pull based deployment.

133
00:07:21,449 --> 00:07:24,369
Now we'll try to understand what
is the difference and how GitOps

134
00:07:24,379 --> 00:07:29,119
is actually helping us to eradicate
all those issues that we face.

135
00:07:29,634 --> 00:07:34,184
So here you can see that there is a
developer who is writing the code and

136
00:07:34,184 --> 00:07:37,294
then we are pushing it to some git
repository and then finally we are

137
00:07:37,294 --> 00:07:41,304
testing it and doing the build and
finally we are generating some artifacts.

138
00:07:41,614 --> 00:07:43,504
So this is your CI process.

139
00:07:44,234 --> 00:07:45,814
Then comes the CD process.

140
00:07:46,164 --> 00:07:50,034
In the CD process, what we are doing
is for this particular example, I'm

141
00:07:50,044 --> 00:07:51,974
taking Docker image as my template.

142
00:07:52,099 --> 00:07:53,389
output from the build.

143
00:07:53,699 --> 00:07:57,419
So I'm generating a Docker, I'm
building the Docker image and I'm

144
00:07:57,539 --> 00:08:00,149
generating like a containerizing it.

145
00:08:00,189 --> 00:08:03,569
And, we are pushing the image to
some of the container registry.

146
00:08:03,719 --> 00:08:07,699
So once we push it to the container
registry, then what we do, if you're

147
00:08:07,709 --> 00:08:12,709
using a Kubernetes, What you'll do,
you'll log into a cluster and type

148
00:08:12,749 --> 00:08:15,149
kubectl apply to push the changes.

149
00:08:15,429 --> 00:08:18,359
And if you're using Terraform,
you'll do Terraform apply.

150
00:08:18,599 --> 00:08:21,699
Same way if you're using Ansible, there
are certain commands that you're doing.

151
00:08:22,039 --> 00:08:26,859
So in this CI CD process, that is push
based deployment, what do you see?

152
00:08:27,309 --> 00:08:32,724
One of the major issues that we
see here is that your CI process is

153
00:08:32,824 --> 00:08:35,244
tightly coupled with your CD process.

154
00:08:35,614 --> 00:08:39,464
Say, for example, if tomorrow
your company does key, okay, fine.

155
00:08:39,804 --> 00:08:44,784
We want to migrate a CI process from
existing tools to some other tool.

156
00:08:45,574 --> 00:08:48,534
In that case, it will be
very difficult for you.

157
00:08:48,869 --> 00:08:52,649
to, work on it because your
CI is tightly coupled with CD.

158
00:08:52,759 --> 00:08:57,459
Any changes you make in CI will
automatically reflect in CD.

159
00:08:57,629 --> 00:08:59,279
So it's like a double work you're doing.

160
00:08:59,439 --> 00:09:02,739
You have to make changes in
CI also, as well as in CD.

161
00:09:03,329 --> 00:09:05,649
Other issues we can see
that you need to expect.

162
00:09:05,664 --> 00:09:07,524
Expose your Kubernetes cluster.

163
00:09:07,734 --> 00:09:11,604
Unless and until you expose your
Kubernetes cluster, you won't be able to

164
00:09:11,604 --> 00:09:16,254
apply the changes or the new features to
be applied in your production environment.

165
00:09:16,464 --> 00:09:20,464
So these are some, issues or you
can say some security concerns that

166
00:09:20,464 --> 00:09:22,084
we see in push based deployment.

167
00:09:22,324 --> 00:09:25,054
And yeah, there is one more like we
need to give, read, write access.

168
00:09:25,294 --> 00:09:29,554
Say for example, in a team, you are
around 10 to 15 people working together.

169
00:09:29,554 --> 00:09:31,144
So each and every member required, sir.

170
00:09:31,644 --> 00:09:34,594
Access they need to have a read
write access that is how they

171
00:09:34,594 --> 00:09:37,824
can apply the changes to your
different environments, right?

172
00:09:37,994 --> 00:09:43,884
So some of these issues we can eradicate
with the help of pull based deployment.

173
00:09:43,894 --> 00:09:46,064
Now, what do you mean by
pull based deployment?

174
00:09:46,694 --> 00:09:50,884
So in pull based deployment,
The CI process will remain same.

175
00:09:50,924 --> 00:09:55,084
That is a developer writing the code,
pushing it to Git repository, doing

176
00:09:55,084 --> 00:09:58,354
the build, and finally generating
some artifacts and pushing your

177
00:09:58,374 --> 00:09:59,954
image to your container registry.

178
00:10:00,464 --> 00:10:03,874
Now the change that you see
here comes in the CD process.

179
00:10:04,684 --> 00:10:08,554
As you can see here, in your
Kubernetes cluster, there will

180
00:10:08,584 --> 00:10:10,264
be an agent will be sitting.

181
00:10:10,334 --> 00:10:15,554
in the earlier slide, I talked about
some agent that agent will be constantly

182
00:10:15,574 --> 00:10:19,704
it will be installed in your clusters
where all your applications are running.

183
00:10:19,994 --> 00:10:24,044
And what this agent will be doing
is it will be constantly monitoring.

184
00:10:24,719 --> 00:10:28,409
for the changes happening in
your configuration files and your

185
00:10:28,409 --> 00:10:32,269
configuration files are what they
will represent how your application

186
00:10:32,299 --> 00:10:33,649
to behave in your cluster.

187
00:10:34,179 --> 00:10:39,219
So when, as soon as the CI process is
completed, you will, you can add these

188
00:10:39,659 --> 00:10:44,209
processes like updating the manifest and
any changes to be pushed to the branch.

189
00:10:44,209 --> 00:10:49,219
And finally, you can have raising a PR
and pushing it to your GitHub repository.

190
00:10:49,409 --> 00:10:51,229
So as soon as a new change comes.

191
00:10:51,514 --> 00:10:55,774
This Argo CD will get to know,
okay, the, this is not what I want.

192
00:10:55,944 --> 00:10:59,484
My actual state is not matching
with the desired state.

193
00:10:59,794 --> 00:11:01,744
So I think I need to pull those changes.

194
00:11:01,744 --> 00:11:06,374
So it will automatically pull that,
apply the changes and your new updated

195
00:11:06,374 --> 00:11:10,204
code or new feature that you want
to showcase is already available in

196
00:11:10,204 --> 00:11:11,814
your production and live environment.

197
00:11:12,194 --> 00:11:16,224
So here, what you saw is one of
the issues like CI is tightly

198
00:11:16,224 --> 00:11:18,804
coupled with CD is eradicated.

199
00:11:18,954 --> 00:11:21,944
If you want to make any changes
in your CI process, you can go

200
00:11:21,944 --> 00:11:23,324
ahead and do it very easily.

201
00:11:23,594 --> 00:11:25,174
You don't have to touch your CD.

202
00:11:25,334 --> 00:11:28,954
Your CD will still work the same
way as it was working earlier.

203
00:11:29,734 --> 00:11:34,264
Now here, you don't want to expose
any Kubernetes clusters, secrets, or

204
00:11:34,264 --> 00:11:39,519
anything because The Argo CD is a tool
that is representing the GitOps concept.

205
00:11:39,719 --> 00:11:42,969
So any changes you want to do, you
don't have to expose your Kubernetes

206
00:11:42,999 --> 00:11:46,339
cluster or give read, write, access,
somewhat kind of things, because

207
00:11:46,339 --> 00:11:49,799
it is already in your cluster where
your applications are present.

208
00:11:49,979 --> 00:11:52,969
So you don't have to again,
give an exposure of your secrets

209
00:11:52,969 --> 00:11:54,139
or usernames of password.

210
00:11:54,414 --> 00:12:00,004
So these are some of the benefits
that actually helps us to, make your

211
00:12:00,004 --> 00:12:04,474
deployment much more faster and much
more secured coming to the features.

212
00:12:04,514 --> 00:12:08,574
So here you can see that some of these are
some of the features that are highlighted.

213
00:12:08,924 --> 00:12:11,174
So one is single source of truth.

214
00:12:11,174 --> 00:12:15,154
So as you can see, as we talked about,
that GitOps works in the concept of

215
00:12:15,354 --> 00:12:16,754
Git being your single source of truth.

216
00:12:17,324 --> 00:12:20,474
So we know that if any issue comes
up, we know where we need to look,

217
00:12:20,494 --> 00:12:24,454
we'll go back to our git repository
and we know this is the file

218
00:12:24,494 --> 00:12:26,124
where we need to make the changes.

219
00:12:26,624 --> 00:12:28,214
Then we have application rollbacks.

220
00:12:28,864 --> 00:12:32,254
So when we talk about application
rollbacks, say for example, if

221
00:12:32,254 --> 00:12:35,884
something happened, you push some
changes in your production environment.

222
00:12:36,264 --> 00:12:41,464
And for some reason, That change
or that new feature has failed your

223
00:12:41,714 --> 00:12:46,054
infrastructure or failed your production
and now it's causing some issue and

224
00:12:46,054 --> 00:12:47,724
you're not able to see your application.

225
00:12:47,724 --> 00:12:51,254
In such cases, application
rollbacks becomes very easy.

226
00:12:51,654 --> 00:12:57,494
In case of GitOps, GitOps offers a,
a various way to roll back easily,

227
00:12:57,704 --> 00:13:01,534
where you can just switch back
to your older version, bring your

228
00:13:01,534 --> 00:13:03,894
application back to your older version.

229
00:13:03,934 --> 00:13:07,264
And on the other hand, you can
start working and debugging why

230
00:13:07,264 --> 00:13:08,874
the new feature was not working.

231
00:13:09,834 --> 00:13:14,854
So this is one of the major feature and
is, and the other one is CICD automation.

232
00:13:14,854 --> 00:13:18,844
Your CICD is completely
automated, continuous deployment.

233
00:13:18,884 --> 00:13:23,179
As I said, GitOps is something that is
closely related with your deployment

234
00:13:23,179 --> 00:13:25,809
side of section and configuration drifts.

235
00:13:26,009 --> 00:13:29,389
So we know that, configuration
drifts are something that happens

236
00:13:29,409 --> 00:13:32,869
when there is a change in some
file or change in some particular

237
00:13:32,869 --> 00:13:35,539
related deployments related features.

238
00:13:35,599 --> 00:13:40,279
Now, in such cases, if those things
happen, it becomes very difficult to

239
00:13:40,279 --> 00:13:42,259
identify, okay, what is the issue?

240
00:13:42,269 --> 00:13:43,139
Why it is happening?

241
00:13:43,529 --> 00:13:47,799
So we know that if any issue comes up,
where we need to look back, we need to

242
00:13:47,819 --> 00:13:51,099
look into the Git repository because
that is a single source of truth.

243
00:13:51,139 --> 00:13:55,419
So there are very less chances of
configuration drifts to be happening.

244
00:13:55,919 --> 00:14:00,969
So this is similar kind of example, say if
it's a Friday evening and we all know that

245
00:14:00,969 --> 00:14:02,699
Friday evening, it's we are very hurry.

246
00:14:03,049 --> 00:14:06,289
We want to go back to the home
because the next day is Saturday,

247
00:14:06,309 --> 00:14:07,559
Sunday holiday and enjoy.

248
00:14:07,819 --> 00:14:09,409
So what if some issue comes up?

249
00:14:09,909 --> 00:14:12,099
And the only architect
who was there, okay.

250
00:14:12,839 --> 00:14:15,009
He made some changes in
the configuration file.

251
00:14:15,159 --> 00:14:19,679
He logged into the cluster, made those
changes and brought back the application.

252
00:14:19,989 --> 00:14:23,869
The next day, the Monday when you
come to the office or try to access

253
00:14:23,869 --> 00:14:26,999
the application, you will see there
is some changes and it becomes very

254
00:14:26,999 --> 00:14:30,609
difficult for you to track back or to
do reverse engineering because there is

255
00:14:30,609 --> 00:14:33,789
no history or no, what do you can say?

256
00:14:34,289 --> 00:14:39,219
A backup like what changes was done
because in such cases you have to

257
00:14:39,219 --> 00:14:43,739
go to your files, log into different
repository clusters, all sort of thing.

258
00:14:43,739 --> 00:14:45,169
It's a time consuming process.

259
00:14:45,479 --> 00:14:49,649
So in order to remove these kind of
issues, you can make use of GitOps.

260
00:14:50,149 --> 00:14:53,949
This is how the architecture look
like you need to install Argo CDN

261
00:14:53,969 --> 00:14:55,859
menu in any one of your cluster.

262
00:14:55,889 --> 00:14:59,179
If you're using multiple Kubernetes
cluster, install it in one

263
00:14:59,179 --> 00:15:03,449
cluster and automatically you can
guide the other clusters also.

264
00:15:03,449 --> 00:15:06,609
It's not necessary that you have to
install in each and every cluster.

265
00:15:06,619 --> 00:15:07,279
One cluster.

266
00:15:07,279 --> 00:15:12,229
It is done and you can access
GitOps using UI, CLI, you can

267
00:15:12,259 --> 00:15:16,009
configure webhook events also and
notifications with the teams and Gmail.

268
00:15:16,509 --> 00:15:19,559
So these are some, GitOps tools
that are most popular like

269
00:15:19,559 --> 00:15:21,309
Jenkins X Flux and Argo CD.

270
00:15:21,309 --> 00:15:25,199
But if we talk about the most popular one,
the most popular one is the Argo CD too.

271
00:15:26,094 --> 00:15:28,714
And, the finally, I'm there on top med.

272
00:15:28,784 --> 00:15:31,884
I'm there on YouTube and
I'm there on LinkedIn.

273
00:15:31,894 --> 00:15:33,064
You can reach out to me there.

274
00:15:33,104 --> 00:15:37,084
And if you want any kind of sessions,
or if you want to explore your career

275
00:15:37,084 --> 00:15:40,844
in DevOps, or if you want interview
preps and tips, you can book a session

276
00:15:40,854 --> 00:15:43,024
with me on top med, I'm available there.

277
00:15:43,424 --> 00:15:45,964
And I will be happy to help you all.

278
00:15:46,704 --> 00:15:46,984
okay.

279
00:15:46,984 --> 00:15:48,994
So we'll directly head
into the demo section.

280
00:15:49,044 --> 00:15:52,194
And this is how the Argo CD UI looks like.

281
00:15:52,224 --> 00:15:56,684
I'm using Argo CD, which is a tool and
that is representing the GitOps concept.

282
00:15:57,134 --> 00:16:01,764
and I'm using GitHub actions
for my CI process, and I'm

283
00:16:01,764 --> 00:16:04,394
using Argo CD for my CD process.

284
00:16:04,894 --> 00:16:07,864
So what we've been doing here
is that, this is my repository

285
00:16:07,864 --> 00:16:09,454
where I have all my code written.

286
00:16:09,454 --> 00:16:12,494
It's just a simple PHP application
as a sample application.

287
00:16:13,129 --> 00:16:15,719
To demonstrate majorly the GitOps feature.

288
00:16:16,089 --> 00:16:19,759
So right now I'll show you the CI
process, what it is actually doing

289
00:16:19,909 --> 00:16:21,799
coming back to the CI YAML file.

290
00:16:22,289 --> 00:16:26,049
So this is nothing but the major section
where the main section where we write,

291
00:16:26,079 --> 00:16:30,379
which branch changes it needs to fix
and and we have jobs section here where

292
00:16:30,419 --> 00:16:35,299
I will be building my latest image
and, pushing my image to my Docker Hub.

293
00:16:35,299 --> 00:16:38,559
So in my case, for the
example, I'm using Docker Hub.

294
00:16:38,639 --> 00:16:41,819
So in company, people might
be using JFrog artifactory.

295
00:16:42,439 --> 00:16:46,059
Another cloud provider, cloud providers
that provides container registry.

296
00:16:46,509 --> 00:16:50,299
So getting back to the CI
pipeline and I'm pushing it.

297
00:16:50,339 --> 00:16:52,969
I'm logging into Docker Hub,
then pushing the pushing it.

298
00:16:53,099 --> 00:16:58,149
This is something that I'm trying to
scan, some of the, you can say versions

299
00:16:58,169 --> 00:17:00,119
or third party tools that we use, right?

300
00:17:00,314 --> 00:17:02,074
So I want to scan it with the help of SBM.

301
00:17:02,074 --> 00:17:04,524
SBM stands for software build of material.

302
00:17:04,704 --> 00:17:08,364
That will give me a detail about what are
the versions that are getting scanned?

303
00:17:08,364 --> 00:17:10,734
What are the versions that
I'm using in my project?

304
00:17:10,734 --> 00:17:14,824
So later on, if I come across some issues
and I get to know that this version is

305
00:17:14,834 --> 00:17:19,224
not compatible with my project, I can
get a list of it and I can identify that.

306
00:17:19,584 --> 00:17:22,384
Finally, the last action is
like modifying the changes.

307
00:17:22,679 --> 00:17:30,039
So as I said, GitOps works on constantly
looking to your configuration files.

308
00:17:30,359 --> 00:17:34,674
So if I make any change in my
configuration file, This ergo CD

309
00:17:34,724 --> 00:17:38,354
will get to know that there is
some change that I need to pull.

310
00:17:39,244 --> 00:17:41,624
Now, if I go back, this is my CA process.

311
00:17:41,624 --> 00:17:44,784
I'm making some changes and as
soon as I make some changes,

312
00:17:44,794 --> 00:17:46,054
those changes will be updated.

313
00:17:46,714 --> 00:17:49,784
Now, let's go back to my
application and here you can see.

314
00:17:49,799 --> 00:17:51,439
This is the name of my application.

315
00:17:51,439 --> 00:17:52,369
So it's healthy.

316
00:17:52,399 --> 00:17:53,569
It's synced properly.

317
00:17:53,569 --> 00:17:54,429
There's no issue.

318
00:17:54,859 --> 00:17:59,639
And I have made my tool to constantly
monitor or constantly keep an eye

319
00:17:59,909 --> 00:18:04,559
24 by seven on this particular
repository that is Git automate.

320
00:18:04,559 --> 00:18:07,119
So any change that you do here
will automatically get put

321
00:18:07,619 --> 00:18:09,159
going back to the application.

322
00:18:09,159 --> 00:18:14,889
So here you can see that the
latest code that is deployed is.

323
00:18:15,389 --> 00:18:15,959
the name is 1.

324
00:18:15,959 --> 00:18:18,089
0 release 127.

325
00:18:18,139 --> 00:18:21,649
If you go to Docker Hub
and if you go to the name.

326
00:18:22,539 --> 00:18:23,189
Let's see.

327
00:18:23,689 --> 00:18:23,979
Okay.

328
00:18:24,189 --> 00:18:28,179
So you can see the latest at present,
the change or the latest feature,

329
00:18:28,209 --> 00:18:31,649
the latest code is 127 and it's
completely matching with this.

330
00:18:31,959 --> 00:18:34,949
Now we're going to make some change
and we're going to see how it works.

331
00:18:34,959 --> 00:18:38,449
So let's go back to here and what I'll do.

332
00:18:38,979 --> 00:18:42,749
I'll just edit this one,
just some random changes.

333
00:18:42,769 --> 00:18:46,109
Like I'll remove some
spaces and I'll commit it.

334
00:18:46,229 --> 00:18:49,789
So let me commit my changes.

335
00:18:50,099 --> 00:18:52,289
Updated and I'll commit it.

336
00:18:52,789 --> 00:18:56,489
So as soon as I committed,
going back to the actions, it

337
00:18:56,489 --> 00:18:58,029
will automatically get started.

338
00:18:58,509 --> 00:19:02,329
Let me just cancel one of the,
it's I think two runs started.

339
00:19:02,469 --> 00:19:03,359
We'll see that later.

340
00:19:04,079 --> 00:19:04,399
Okay.

341
00:19:04,599 --> 00:19:09,429
So as you can see here that as soon as
I make some changes in my repository, I

342
00:19:09,529 --> 00:19:13,189
have configured in such a way that the CI
pipeline should automatically get started.

343
00:19:13,509 --> 00:19:14,889
That is what is happening here.

344
00:19:15,279 --> 00:19:16,609
It's automatically started.

345
00:19:17,109 --> 00:19:19,239
And we'll wait for this to get completed.

346
00:19:19,319 --> 00:19:20,399
It won't take much time.

347
00:19:20,679 --> 00:19:21,889
Meanwhile, this is running.

348
00:19:22,129 --> 00:19:27,209
I want to show you some of, so
yeah, so I'm using, so I'm using

349
00:19:27,379 --> 00:19:32,619
a mini cube as my cluster where I
have all my things running here.

350
00:19:33,314 --> 00:19:37,814
yeah, my Minikube is running and also
I want to show you one more thing that

351
00:19:37,844 --> 00:19:41,494
I have put forwarded for my Argo CD
so that I would be able to show you.

352
00:19:41,534 --> 00:19:42,934
So these are the two things.

353
00:19:43,414 --> 00:19:48,154
Okay, so the build stage is
completed and the modify git

354
00:19:48,184 --> 00:19:50,544
stages started, has started.

355
00:19:51,214 --> 00:19:53,009
Let us wait for this to get completed.

356
00:19:53,509 --> 00:19:54,959
So this is also completed.

357
00:19:55,429 --> 00:20:00,749
Let us go to our Docker hub and we'll see
what is the latest change that got pushed.

358
00:20:00,819 --> 00:20:01,969
I'm refreshing it.

359
00:20:02,769 --> 00:20:02,989
okay.

360
00:20:02,999 --> 00:20:07,419
As you can see here, the latest code
or the latest feature is release 23.

361
00:20:07,449 --> 00:20:12,439
If you go to our, GitOps, you can
say Argo CD tool, you can just

362
00:20:12,609 --> 00:20:16,999
click on refresh so you can see
for a second, it went out of sync.

363
00:20:16,999 --> 00:20:20,729
Why it happened because Argo CD
got to know that there is some

364
00:20:20,739 --> 00:20:24,279
change and its actual state
is not equal to desired state.

365
00:20:24,309 --> 00:20:27,369
So what it does is it is
automatically pulling the changes.

366
00:20:27,804 --> 00:20:31,644
It is deleting the older feature,
bringing back the new one here.

367
00:20:31,644 --> 00:20:35,924
Also, you can configure one thing that
if you want to put a manual intervention,

368
00:20:35,924 --> 00:20:40,634
you can configure that the changes should
only be applied when there is a approval,

369
00:20:40,694 --> 00:20:42,984
or you can see any approval is provided.

370
00:20:42,994 --> 00:20:46,114
You can also configure that here
instead of automatically syncing it.

371
00:20:46,504 --> 00:20:47,984
That feature is also available.

372
00:20:48,684 --> 00:20:50,234
So let us see what it is happening.

373
00:20:50,244 --> 00:20:55,674
It is trying to remove 127 and
it is bringing back the new one.

374
00:20:55,684 --> 00:20:56,174
That is.

375
00:20:56,674 --> 00:20:57,224
23.

376
00:20:57,474 --> 00:21:00,984
So this is the new feature or the new
code that is written by the developer

377
00:21:00,984 --> 00:21:02,354
and it is automatically post here.

378
00:21:02,674 --> 00:21:08,044
This is a better way, much more secured
way to deploy your application and

379
00:21:08,184 --> 00:21:11,884
keep a test, do a testing for your
developers also as well as for the

380
00:21:11,884 --> 00:21:13,714
production also to deploy replication.

381
00:21:13,714 --> 00:21:19,334
So this is how you can utilize Argo CD
in your complete CI CD DevOps pipeline.

382
00:21:19,644 --> 00:21:20,044
Thank you.

