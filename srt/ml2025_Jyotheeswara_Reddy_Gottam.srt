1
00:00:01,000 --> 00:00:03,490
Hey everyone, this is Ish Ra Gotham.

2
00:00:03,969 --> 00:00:06,740
I have been in software
development and quality engineering

3
00:00:06,740 --> 00:00:08,270
space from last 13 years.

4
00:00:08,790 --> 00:00:12,260
Today I will be discussing a little bit
on converge and quality engineering,

5
00:00:12,710 --> 00:00:16,250
where we are talking about integrating
a shift left and shift right testing.

6
00:00:16,680 --> 00:00:18,840
Basically unifying the shift
left and shift right for

7
00:00:18,840 --> 00:00:20,189
end hand software residency.

8
00:00:20,790 --> 00:00:22,440
Let's get into the next slide.

9
00:00:24,000 --> 00:00:27,080
So to talk about today's quality
challenges first thing is obviously

10
00:00:27,080 --> 00:00:31,180
you have the development silos
where you have all the, development

11
00:00:31,180 --> 00:00:34,090
and your, functional testing and
everything happening in one place.

12
00:00:34,690 --> 00:00:37,720
And and then you have other side
is the operation excellence and

13
00:00:37,720 --> 00:00:41,380
operation disconnect rate where
production feedback loops separated

14
00:00:41,380 --> 00:00:42,670
from the developer life cycles.

15
00:00:43,210 --> 00:00:46,380
And let's say you have the,
something missed in the development.

16
00:00:46,840 --> 00:00:50,460
If the bug is not detected in development
or functional testing phase it'll

17
00:00:50,460 --> 00:00:51,960
be too late for the late detection.

18
00:00:52,010 --> 00:00:55,130
You are finding it in either
production or even in UAT, right?

19
00:00:55,590 --> 00:00:59,270
The time to, fix the same bug
when you find in development is

20
00:00:59,270 --> 00:01:02,360
going to be much less compared
to the same bug found in either.

21
00:01:02,880 --> 00:01:06,110
UATR production, it's going
to be very costly to fix it.

22
00:01:06,590 --> 00:01:09,050
And obviously the fourth
one is market delays, right?

23
00:01:09,380 --> 00:01:13,170
The slower release cycles due to this
fragmented quality process, it's going

24
00:01:13,170 --> 00:01:17,890
to be take, it's going to take longer
time to market and in this fast paced

25
00:01:17,940 --> 00:01:19,720
software development era, right?

26
00:01:20,140 --> 00:01:25,030
You want to market your software as soon
as you know you can to the customers or,

27
00:01:25,030 --> 00:01:26,470
whoever is adopting your software, right?

28
00:01:27,470 --> 00:01:30,860
So what we're talking about is
having that continuous quality loop.

29
00:01:30,890 --> 00:01:32,240
The shift left testing.

30
00:01:32,600 --> 00:01:35,030
You have the preventive quality
measures during the development

31
00:01:35,370 --> 00:01:36,810
whatever it may be, unit testing.

32
00:01:36,865 --> 00:01:41,085
You have the integration testing
different, pre-commit hooks or

33
00:01:41,085 --> 00:01:43,244
even some tests running on the ci.

34
00:01:43,755 --> 00:01:46,934
Or you have the continuous monitoring
where you have real time quality metrics

35
00:01:46,934 --> 00:01:51,045
through the deployment or shift rate
validations where you have a reactive

36
00:01:51,045 --> 00:01:54,494
residency testing in production and you
have that feedback integration, right?

37
00:01:54,494 --> 00:01:58,184
Insights from production informing
the development priorities, right?

38
00:01:58,564 --> 00:01:59,164
Right now.

39
00:01:59,280 --> 00:02:02,369
As of today in this era where
what's happening is each of these

40
00:02:02,470 --> 00:02:04,580
working as of each one silo, right?

41
00:02:04,940 --> 00:02:06,820
Where you have four
different aspects, right?

42
00:02:07,300 --> 00:02:11,020
And what we are talking about, how we
can decrease this time between these

43
00:02:11,050 --> 00:02:15,160
loops so that, you, you can have better
software development and resiliency.

44
00:02:16,160 --> 00:02:18,855
So to talk about a little bit of
a shift lift pathology, right?

45
00:02:18,855 --> 00:02:21,945
What we have is obviously developer
testing, where you have, they're writing

46
00:02:21,945 --> 00:02:25,820
the static unit tests and and then maybe
a little bit of integration testing,

47
00:02:25,880 --> 00:02:27,674
and you have automated ca validations.

48
00:02:28,479 --> 00:02:31,739
It may be part of your git commit
hooks, or it's running part of

49
00:02:31,739 --> 00:02:34,429
the, CSCD when you merge the prs.

50
00:02:34,859 --> 00:02:38,269
And then you have the augmented testing
with a, behavior driven development.

51
00:02:38,299 --> 00:02:41,149
Maybe the cucumber test or web driver
test or whatever you have, right?

52
00:02:41,179 --> 00:02:43,309
Playwright or different functional tests.

53
00:02:43,359 --> 00:02:46,429
You have you can think in
the same thing in inverse.

54
00:02:46,599 --> 00:02:48,939
Pyramid where you have the
developer testing should

55
00:02:48,939 --> 00:02:50,879
contribute to more than 50%.

56
00:02:51,269 --> 00:02:53,964
And then you have the automated
ca validations are running

57
00:02:53,964 --> 00:02:55,045
different integration tests.

58
00:02:55,075 --> 00:02:58,804
We will go into, 30% and then you
have functional testing for 15%.

59
00:02:59,174 --> 00:03:01,894
At the end where you have a
end-to-end testing is for 5%.

60
00:03:02,894 --> 00:03:05,074
So when it come to shift
right tech techniques, right?

61
00:03:05,079 --> 00:03:06,814
Where you have the advanced
observability, right?

62
00:03:06,814 --> 00:03:09,544
Where you have a granular insights
into the production behavior patterns,

63
00:03:09,844 --> 00:03:13,459
you have so many different tools
like, Dynatrace or, Splunk or Grafana.

64
00:03:13,594 --> 00:03:16,714
All these tools are available in
the market and you have, again,

65
00:03:16,714 --> 00:03:19,594
the Ks engineering where you have
intentional system disruption, right?

66
00:03:20,044 --> 00:03:24,634
Every cloud provider have their own
tools aWS has the AWS Fault injection

67
00:03:24,634 --> 00:03:28,884
simulator, our Google Cloud, chaos
Engineering, our Azure Chaos Studio,

68
00:03:29,064 --> 00:03:33,194
or even you have standalone tools like
Lin or Chaos Mesh or Litus, right?

69
00:03:33,754 --> 00:03:37,044
And then you have a the third thing
is the candid deployments where you

70
00:03:37,104 --> 00:03:38,754
don't deploy to the a hundred percent.

71
00:03:38,914 --> 00:03:41,104
You start with the very small
rollout like the one two.

72
00:03:41,104 --> 00:03:44,609
2% are like a start with the
AB test or CCM switches, right?

73
00:03:44,609 --> 00:03:49,199
Where you start to minimal users
and if you find any bugs or fix the

74
00:03:49,199 --> 00:03:51,569
bugs and then do the incremental
rollout to the more users.

75
00:03:51,569 --> 00:03:55,919
That way you are, you are introducing
the bugs to the smaller smaller customers

76
00:03:56,289 --> 00:03:59,649
smaller set of customers, and then
fix it to do the incremental rollout

77
00:03:59,649 --> 00:04:02,809
instead of, rolling out a hundred
percent and then the damage will be more.

78
00:04:03,379 --> 00:04:05,419
Obviously last one is the
performance monitoring, right?

79
00:04:05,479 --> 00:04:08,449
A real time analysis of the
system performance metrics, right?

80
00:04:08,779 --> 00:04:11,539
You have a posis with
a Grafana or Inflex db.

81
00:04:11,939 --> 00:04:14,419
Even the cloud providers have
their own native tools, right?

82
00:04:14,479 --> 00:04:18,899
AWS CloudWatch or Google Cloud
Monitoring or Azure Monitor, right?

83
00:04:19,899 --> 00:04:23,359
So what we are trying to do is like
whatever the tools I was mentioned

84
00:04:23,359 --> 00:04:24,959
in the shift left or shift right?

85
00:04:25,009 --> 00:04:29,309
How we can have a co cohesive
unifying orchestration where each

86
00:04:29,309 --> 00:04:33,199
of these tool work as one agent
where you have the agent approach

87
00:04:33,249 --> 00:04:34,809
each agent is solving one problem.

88
00:04:35,149 --> 00:04:37,689
At the same time how they can
interact with each other to have

89
00:04:37,689 --> 00:04:41,019
a better communication and, the
faster development life cycles.

90
00:04:41,269 --> 00:04:44,299
Let's talk about a little bit of
that let's talk about first is the

91
00:04:44,299 --> 00:04:46,729
implementation challenge where you
have a cultural transformation, right?

92
00:04:46,759 --> 00:04:50,599
This is a obviously shifting mindset from
testing to quality engineering, right?

93
00:04:51,049 --> 00:04:54,369
Where you need, you used to have
like where the testing is a separate

94
00:04:54,369 --> 00:04:57,719
domain to where you want to come
to the point where the quality

95
00:04:57,719 --> 00:04:59,579
engineering or quality is owned by.

96
00:04:59,894 --> 00:05:03,324
Each person in the team from, you're
talking about from product to program

97
00:05:03,324 --> 00:05:08,574
to development to the SRE or DevOps
person, whoever it is, everybody

98
00:05:08,574 --> 00:05:12,344
have that, they, they have their
quality engineering hat on their head.

99
00:05:12,824 --> 00:05:15,674
And the second thing is having
the tool chain integration, right?

100
00:05:15,674 --> 00:05:19,124
Connecting this disparate quality
systems across the lifecycle, right?

101
00:05:19,554 --> 00:05:21,374
If to give you example
what I'm talking about.

102
00:05:21,904 --> 00:05:25,129
Is if you talk about a unit test
for example, unit testing is a one

103
00:05:25,129 --> 00:05:28,189
agent or your integration testing
is one agent, or your functional

104
00:05:28,189 --> 00:05:31,729
testing is one agent or your DevOps
checks or git checks is one agent.

105
00:05:31,999 --> 00:05:35,179
And then you have the observability
or operation excellence side, right?

106
00:05:35,459 --> 00:05:38,619
All the performance or K os engineering
observability tools, what we talk,

107
00:05:38,709 --> 00:05:43,959
talked about each one, think as a one
agent and each one performs one diligent

108
00:05:43,959 --> 00:05:47,029
task and a specific targeted task.

109
00:05:47,059 --> 00:05:48,169
So it can give you the result.

110
00:05:48,494 --> 00:05:51,284
But what you're talking about,
having that agent to agent protocol

111
00:05:51,284 --> 00:05:55,734
where each of these systems, our
agents can talk to each other more

112
00:05:55,734 --> 00:05:57,564
cohesively in one orchestration.

113
00:05:58,134 --> 00:06:01,344
That way any, anywhere the
fall tolerance you have.

114
00:06:01,974 --> 00:06:06,414
It'll communicate it to the developer
more faster, and the fix is done in

115
00:06:06,414 --> 00:06:10,684
more faster way to, release the rollout
or fix the customer more faster.

116
00:06:12,484 --> 00:06:15,094
To accomplish that, obviously you
need to have the skill development.

117
00:06:15,454 --> 00:06:17,764
We are talking about building
a T-shaped quality professional

118
00:06:17,764 --> 00:06:19,024
with a cross domain expertise.

119
00:06:19,364 --> 00:06:21,134
What is a T-shaped quality professional?

120
00:06:21,194 --> 00:06:24,434
Basically T-shaped quality
professional is the one who has a

121
00:06:24,464 --> 00:06:26,414
depth in one area, but they're aware.

122
00:06:26,484 --> 00:06:30,084
With mean to say they have the jack
of all trade in all other areas.

123
00:06:30,444 --> 00:06:32,424
To give you example, in
quality engineering, right?

124
00:06:32,454 --> 00:06:36,094
Somebody might be like their depth
may be in like a quality engineering,

125
00:06:36,484 --> 00:06:40,114
their expertise in test automation
or code review EX or a PA testing or

126
00:06:40,114 --> 00:06:41,464
CACD, pipeline building knowledge.

127
00:06:41,784 --> 00:06:43,674
Maybe that is their core
competence or depth.

128
00:06:44,154 --> 00:06:48,304
But what we are talking about with that,
if somebody can have the width right, from

129
00:06:48,304 --> 00:06:52,564
operation excellence standpoint or site
reliability standpoint or observability

130
00:06:52,774 --> 00:06:56,284
standpoint, on the other side, they have
the, all the tools available in the market

131
00:06:56,644 --> 00:06:59,574
and what specific task or, target problem.

132
00:06:59,574 --> 00:07:02,874
They're solving the same thing
on the development side, right?

133
00:07:02,934 --> 00:07:04,074
What are the tools available?

134
00:07:04,414 --> 00:07:05,974
What are the things we can be done?

135
00:07:06,464 --> 00:07:07,844
For the quality side of things, right?

136
00:07:08,094 --> 00:07:11,574
If you talk the same thing here, if you
see the core quality competence, right?

137
00:07:11,574 --> 00:07:15,594
They have quality risk assessment or test
strategy development or defect analysis,

138
00:07:15,594 --> 00:07:19,974
or quality metrics design, or from
operation skill side, like observability

139
00:07:20,004 --> 00:07:21,504
tooling or performance analysis.

140
00:07:21,804 --> 00:07:23,784
R Ks, engineering and
production monitoring, right?

141
00:07:24,784 --> 00:07:27,574
So if you have that kind of a
resource available, then you can have

142
00:07:27,574 --> 00:07:28,834
this phased adoption model, right?

143
00:07:28,834 --> 00:07:32,744
Obviously, anything new you want to
implement, even for a small software

144
00:07:32,744 --> 00:07:34,404
team it's big ship to tier, right?

145
00:07:35,059 --> 00:07:38,259
So if you want to, move the ship
or make a turn, it's going to

146
00:07:38,259 --> 00:07:39,789
take us a large amount of time.

147
00:07:39,789 --> 00:07:43,059
But when you make the turn properly
to the right direction, it's going

148
00:07:43,059 --> 00:07:44,409
to give you the better results.

149
00:07:44,689 --> 00:07:46,309
To talk about the, the foundation, right?

150
00:07:46,429 --> 00:07:49,699
The established core metrics and
baseline current quality performance

151
00:07:50,039 --> 00:07:53,094
what, where we stand today and
what we are trying to accomplish.

152
00:07:53,714 --> 00:07:56,914
And then obviously the second thing is
how the connecting these development

153
00:07:56,914 --> 00:08:00,184
and production quality tool inside
that I was talking about, different

154
00:08:00,184 --> 00:08:03,584
agents and orchestration, how you can
have these cohesive systems built.

155
00:08:04,004 --> 00:08:08,774
You can do the POCs and see what all the
off shelf tools available are, any of

156
00:08:08,774 --> 00:08:10,214
these cloud provider tools available.

157
00:08:10,704 --> 00:08:13,644
And see how they can fit into your
ecosystem, because everybody has

158
00:08:13,644 --> 00:08:16,134
different ecosystem, different
set of, cloud tools they're using.

159
00:08:16,554 --> 00:08:20,094
And obviously use a lot of automation
with the, in this automation era, right?

160
00:08:20,364 --> 00:08:24,044
Implement a augmented testing or
automation tools to get the better

161
00:08:24,044 --> 00:08:26,354
results and obviously the maturity, right?

162
00:08:26,354 --> 00:08:29,765
Achieve self improving quality ecosystem
with the predictive capabilities, right?

163
00:08:30,365 --> 00:08:31,475
End of the day, obviously.

164
00:08:31,740 --> 00:08:34,760
Even if you do the POC and implement
certain things will work out the way

165
00:08:34,760 --> 00:08:37,090
you want it to, or you will have the
positive results and you have, you

166
00:08:37,090 --> 00:08:40,420
will have a negative results and see
the, whatever the learnings from that

167
00:08:40,420 --> 00:08:43,660
negative results how we can make it
as an opportunity to, learn more and

168
00:08:43,840 --> 00:08:45,430
implement and have a better results.

169
00:08:46,430 --> 00:08:47,840
This is some empirical results.

170
00:08:47,870 --> 00:08:51,925
From this some of the published papers
from the, the teams that are implemented,

171
00:08:51,925 --> 00:08:55,464
these t-shaped professionals with jack
of alt trades, knowledge in all the

172
00:08:55,464 --> 00:09:00,725
areas they're able to, accomplish that
78% of defect reduction and 63% of

173
00:09:00,725 --> 00:09:06,395
faster detection of the bugs, and 42%
of insulin declines, and 3.2% of RI.

174
00:09:07,595 --> 00:09:09,095
And that is a very good results.

175
00:09:09,125 --> 00:09:12,214
Whatever the investment you are making,
if you can get in this fast waste

176
00:09:12,214 --> 00:09:13,675
software development a era, right?

177
00:09:16,119 --> 00:09:19,829
And this is one of the case studies
obviously from financial services side,

178
00:09:20,099 --> 00:09:22,949
the deployments are like, normally
release cycles are very, bigger.

179
00:09:23,279 --> 00:09:26,269
But if you see at this the starting
point, they used to have a 12 week

180
00:09:26,269 --> 00:09:31,469
release cycles and 85% manual testing
and siloed QA and SRE teams when they're

181
00:09:31,469 --> 00:09:34,979
transformed into this agentic approach
where they have unified quality metrics,

182
00:09:34,979 --> 00:09:39,159
cross-functional quality guides and
production telemetry in test environments.

183
00:09:39,474 --> 00:09:41,724
All these things, they're able
to achieve that two weeks release

184
00:09:41,724 --> 00:09:46,164
cycles, 73% automated coverage and
58% reduction in incident as one time.

185
00:09:46,464 --> 00:09:49,914
I know compared to a lot of these big
tech companies where you have like

186
00:09:49,944 --> 00:09:52,194
everydays, this might look like, very far.

187
00:09:52,554 --> 00:09:55,864
But if you think about financial
services any, bad move you make,

188
00:09:55,864 --> 00:09:59,795
it's going to cost you a, a lot in
customer and even the financial damage.

189
00:10:00,094 --> 00:10:02,770
So you need so this is a really good
results if you think about financial

190
00:10:02,770 --> 00:10:04,610
services business perspective.

191
00:10:05,610 --> 00:10:07,920
And obviously the AI augmented
quality tools, right?

192
00:10:07,970 --> 00:10:12,620
In today you have like for every
problem that you're facing in

193
00:10:12,620 --> 00:10:13,460
quality engineering, right?

194
00:10:13,460 --> 00:10:16,810
You have tools available for self
healing tests, even for the machine

195
00:10:16,810 --> 00:10:19,239
learning algorithms automatically
repair your broken test scripts

196
00:10:19,239 --> 00:10:20,564
without human intervention, right?

197
00:10:20,890 --> 00:10:22,449
You can give your figma changes.

198
00:10:22,685 --> 00:10:24,075
To your yay agent.

199
00:10:24,465 --> 00:10:28,714
It can go and fix your automation
tests and get the, results and

200
00:10:28,714 --> 00:10:30,334
intelligent test selection, right?

201
00:10:30,604 --> 00:10:31,265
The same thing.

202
00:10:31,295 --> 00:10:34,455
You can give your, your product
designs and your product or

203
00:10:34,455 --> 00:10:35,895
business documents and everything.

204
00:10:35,895 --> 00:10:42,074
You can come up with the proper
test cases, excuse me, and

205
00:10:42,074 --> 00:10:45,135
obviously that The third one I'm
talking about is anomaly detection.

206
00:10:45,454 --> 00:10:47,504
And fourth one is a
code quality prediction.

207
00:10:47,804 --> 00:10:50,574
So all these things can be
achieved with the augmented quality

208
00:10:50,574 --> 00:10:51,805
tools available in the market.

209
00:10:51,904 --> 00:10:55,314
There is so many different tools like
a Test Sigma or Rapid Tools, everybody

210
00:10:55,374 --> 00:10:58,624
on top of the game with all these
tools you can definitely explore more.

211
00:10:59,624 --> 00:11:02,444
To come to the conclusion the key
takeaways from what I'm talking about

212
00:11:02,444 --> 00:11:04,314
here is the integrate quality loops.

213
00:11:04,624 --> 00:11:07,324
Connect that shift lift
prevention with a shift rate

214
00:11:07,324 --> 00:11:08,794
validation for complete coverage.

215
00:11:09,124 --> 00:11:12,934
So you have complete pipeline built
where each of the agent communicating

216
00:11:13,264 --> 00:11:17,014
each other with more cohesively, and
that way your development lifecycle

217
00:11:17,014 --> 00:11:19,354
time is less and you have less bugs.

218
00:11:19,714 --> 00:11:20,704
And even if you have a bug.

219
00:11:20,984 --> 00:11:26,144
The faster time to fix and market it
and leverage a capabilities as much as

220
00:11:26,144 --> 00:11:29,684
you can implement intelligence driven
testing to reduce maintenance burdens,

221
00:11:30,044 --> 00:11:34,274
and obviously develop ship teams where
you have all the, any resource, right?

222
00:11:34,454 --> 00:11:38,864
Somebody who has a width and also
they have the jack alter width and

223
00:11:38,864 --> 00:11:43,874
depth in certain area of, their
proficiency and measure holistically.

224
00:11:43,924 --> 00:11:47,244
See see where you stand today
and where you want to reach and

225
00:11:47,244 --> 00:11:48,564
how you can reach your goals.

226
00:11:48,874 --> 00:11:50,134
I think that with that, I'm done.

227
00:11:50,134 --> 00:11:50,914
Thank you very much.

