1
00:00:00,500 --> 00:00:00,950
Hi everyone.

2
00:00:00,950 --> 00:00:01,699
My name is Alex Hang.

3
00:00:01,699 --> 00:00:02,750
I'm welcome to Comfort two.

4
00:00:03,679 --> 00:00:06,020
I'll talking today about using
the activity logs to predict user

5
00:00:06,020 --> 00:00:07,640
behavior and improve experience.

6
00:00:07,730 --> 00:00:09,620
So what are we talking about?

7
00:00:09,770 --> 00:00:11,719
How can you use it to
predict the user activity?

8
00:00:12,319 --> 00:00:14,959
I try to predict the next activity
of a user based on his previous

9
00:00:14,959 --> 00:00:17,480
activity logs and see how can
you optimize the application?

10
00:00:17,930 --> 00:00:19,400
Why am I doing this well?

11
00:00:19,404 --> 00:00:21,770
Because I want to optimize the
applications to make sure that the

12
00:00:21,770 --> 00:00:25,369
server has resources and to make sure
that the user has the best experience.

13
00:00:25,369 --> 00:00:27,349
I. How am I going to do it?

14
00:00:27,470 --> 00:00:31,220
By adding machine learning in the
application machine learning that

15
00:00:31,220 --> 00:00:35,720
will analyze the activity logs and
some examples to see why you are here.

16
00:00:36,379 --> 00:00:37,610
That'll be the most important part.

17
00:00:37,610 --> 00:00:38,569
But first, a bit of theory.

18
00:00:39,080 --> 00:00:39,530
What's ai?

19
00:00:39,530 --> 00:00:40,310
What's machine learning?

20
00:00:40,459 --> 00:00:41,360
Are those fancy names?

21
00:00:41,390 --> 00:00:42,289
What do they do for you?

22
00:00:42,620 --> 00:00:45,695
We know that activity logs are stored
past active, past actions for users.

23
00:00:45,755 --> 00:00:47,824
Machine learning models are
trained on historical data.

24
00:00:47,824 --> 00:00:51,245
I think you heard about machine
learning about AI in the past few.

25
00:00:51,745 --> 00:00:54,625
Months, years maybe heard of ai.

26
00:00:55,125 --> 00:00:58,785
And you know that there are a lot of
models such as neur networks, long short

27
00:00:58,785 --> 00:01:02,415
term memory, transformers, some other
things can be used to predict activities,

28
00:01:02,415 --> 00:01:06,225
to predict tasks, to predict numbers
and sequences and some other things.

29
00:01:07,015 --> 00:01:08,275
How much machine learning model works?

30
00:01:08,785 --> 00:01:11,080
They let's say they want to
build a system to classify.

31
00:01:11,690 --> 00:01:13,340
An image and say it's a cat or a dog.

32
00:01:13,610 --> 00:01:13,910
How?

33
00:01:14,630 --> 00:01:17,570
I give him 10,000 images of dogs
and that has images of cats.

34
00:01:18,380 --> 00:01:19,520
I'm gonna ask you something right now.

35
00:01:20,270 --> 00:01:21,110
Which one's a cat?

36
00:01:21,110 --> 00:01:22,039
Which one's a dog here?

37
00:01:22,289 --> 00:01:23,100
That's a stupid question.

38
00:01:23,100 --> 00:01:25,289
Of course everybody knows,
which is a dog, which is a cat.

39
00:01:25,789 --> 00:01:26,929
Now he comes a hard question.

40
00:01:26,929 --> 00:01:27,859
How do you know that?

41
00:01:28,359 --> 00:01:30,490
How do you know which is
a cat and which is a dog?

42
00:01:31,449 --> 00:01:32,169
I'm just curious.

43
00:01:32,349 --> 00:01:34,359
I'll give you 10 seconds
to think a bit about it.

44
00:01:34,859 --> 00:01:37,049
The point is a dog, obviously,
but how do you know that?

45
00:01:37,549 --> 00:01:39,229
Did you took the image and analyze it?

46
00:01:39,299 --> 00:01:41,679
Does it have small eyes or big eyes?

47
00:01:41,709 --> 00:01:43,779
Does it have big teeth or small teeth?

48
00:01:43,839 --> 00:01:47,149
Does it have white
skin, white, fall black?

49
00:01:47,359 --> 00:01:48,439
No, you didn't do that.

50
00:01:48,469 --> 00:01:48,979
Okay, come on.

51
00:01:49,039 --> 00:01:50,299
You just saw the image and it's a dog.

52
00:01:50,419 --> 00:01:52,989
How do you know that this one is
more tweaky than you might think?

53
00:01:53,589 --> 00:01:56,350
Actually, you know it because you saw.

54
00:01:56,710 --> 00:01:58,120
Thousands of dogs in your life.

55
00:01:58,150 --> 00:01:58,509
Okay?

56
00:01:59,380 --> 00:02:03,039
You know how a dog looks like,
but you don't spend time to

57
00:02:03,039 --> 00:02:04,840
say, how does it look like?

58
00:02:04,840 --> 00:02:05,769
How are it seals?

59
00:02:05,769 --> 00:02:06,910
How is it mud?

60
00:02:07,180 --> 00:02:08,019
How are his?

61
00:02:08,350 --> 00:02:09,340
How is his nose?

62
00:02:09,370 --> 00:02:09,970
Or whatever.

63
00:02:10,840 --> 00:02:13,950
You don't do that, so you just know.

64
00:02:14,684 --> 00:02:18,494
Your brain is trained to recognize
which is which, because you saw them.

65
00:02:18,554 --> 00:02:20,534
This is exactly how machine
learning models work.

66
00:02:21,135 --> 00:02:24,944
They're using training data to build
complex models in inside memory,

67
00:02:25,515 --> 00:02:29,834
and they're using those models
in order to recognize patterns.

68
00:02:30,194 --> 00:02:32,504
This is what they're doing and
they're doing, using them to predict,

69
00:02:32,534 --> 00:02:33,944
to classify some other things.

70
00:02:34,694 --> 00:02:37,515
So we gonna feed training data
to the machine learning model.

71
00:02:38,294 --> 00:02:42,134
And then once the training is done, you'll
see in a few seconds how training is done.

72
00:02:42,704 --> 00:02:43,664
We'll proceed to testing.

73
00:02:44,504 --> 00:02:48,464
We're gonna give him 100 images,
other images of cats and dogs.

74
00:02:49,454 --> 00:02:50,684
How do we know which is which?

75
00:02:50,714 --> 00:02:53,144
The model should already know,
which is which I'm going to ask

76
00:02:53,144 --> 00:02:54,314
him, which is a cat, which is a dog.

77
00:02:54,944 --> 00:02:58,214
Let's say the data of 100 images,
he managed to classify correctly,

78
00:02:58,304 --> 00:03:00,105
80 of them and 20 are wrong.

79
00:03:00,795 --> 00:03:02,894
In that case, the accuracy is 80%.

80
00:03:02,984 --> 00:03:05,475
The compute accuracy, I'll
say the accuracy is 80%.

81
00:03:05,475 --> 00:03:07,785
I'm happy, if not back to training.

82
00:03:08,390 --> 00:03:10,590
Okay, so how do I use it right now?

83
00:03:11,400 --> 00:03:12,990
I have a few machine
learning models to try.

84
00:03:13,490 --> 00:03:15,230
The first and most common
was linear regression.

85
00:03:15,230 --> 00:03:17,060
The linear regression is not
good for what I want here.

86
00:03:17,630 --> 00:03:22,010
I told you that I want to try to predict
the next action that the user would take.

87
00:03:22,469 --> 00:03:27,649
The linear regression is good for
predicting linear things, how well

88
00:03:27,679 --> 00:03:32,029
it'll take points, let's say the stock
market, the value that the stock market

89
00:03:32,029 --> 00:03:35,799
had in the past two 10 years, and to
try to predict the next value of the

90
00:03:35,799 --> 00:03:37,570
stock market based on historic data.

91
00:03:37,869 --> 00:03:39,304
That's what the integration is doing.

92
00:03:39,804 --> 00:03:42,564
The decision to be used to classify
things well, it'll be good for

93
00:03:42,564 --> 00:03:46,044
classification between cats and
dogs, actually, but not really.

94
00:03:46,164 --> 00:03:48,144
But it'll be good for other
types of classifications.

95
00:03:48,144 --> 00:03:49,044
More simple ones.

96
00:03:49,044 --> 00:03:52,859
Let's say that you want to classify
a text and say if it's English

97
00:03:52,859 --> 00:03:55,289
or French or other language.

98
00:03:55,769 --> 00:03:56,489
It'll take a look.

99
00:03:56,489 --> 00:04:00,119
It'll take a look at the verb,
so the pronouns that some things

100
00:04:00,119 --> 00:04:01,259
I need to try to classify it.

101
00:04:01,759 --> 00:04:02,089
Okay.

102
00:04:02,869 --> 00:04:04,969
The random four is a more
complex decision tree.

103
00:04:04,999 --> 00:04:06,589
It's a collection of decision trees.

104
00:04:07,279 --> 00:04:08,869
This also used for classifications.

105
00:04:09,019 --> 00:04:10,159
We're not going to use it today.

106
00:04:10,429 --> 00:04:12,499
And here comes tricky,
key part, newer network.

107
00:04:12,619 --> 00:04:13,789
This is what we're going to use today.

108
00:04:14,289 --> 00:04:16,749
Neur networks are very good
because they're adaptive.

109
00:04:17,139 --> 00:04:18,399
They can easily adapt to change.

110
00:04:18,399 --> 00:04:21,249
They can easily adapt to patterns,
that can recognize images, that can

111
00:04:21,249 --> 00:04:24,819
do a lot of things, and they're very
versatile, but they're a big black box.

112
00:04:25,029 --> 00:04:28,329
We don't really know from the
outside how they're building

113
00:04:28,329 --> 00:04:29,679
the models and other things.

114
00:04:30,179 --> 00:04:31,949
So now I'm going to ask
you a simple question.

115
00:04:31,979 --> 00:04:36,289
I asked you two slides ago, how did
you know if that is a cat or a dog?

116
00:04:36,379 --> 00:04:37,759
And you said, I just know it.

117
00:04:38,259 --> 00:04:40,059
What if I tell you it's
not really like that?

118
00:04:40,559 --> 00:04:41,639
Of course, for you it's like that.

119
00:04:41,669 --> 00:04:42,419
I just know it's a dog.

120
00:04:42,419 --> 00:04:44,369
Okay, but how do you know that?

121
00:04:45,189 --> 00:04:46,179
He comes a tricky part.

122
00:04:46,679 --> 00:04:48,749
Our brain is structured
like a neur network.

123
00:04:49,049 --> 00:04:50,459
Actually, let me put this right.

124
00:04:50,519 --> 00:04:52,979
The Neur network is
structured like our brain.

125
00:04:53,339 --> 00:04:58,279
The Neur network is built because the
computer scientist, which built it 20

126
00:04:58,279 --> 00:04:59,674
years ago or more than that, sorry.

127
00:05:00,174 --> 00:05:02,794
Ago, something like
this said you know what?

128
00:05:03,294 --> 00:05:04,674
Let's try to mimic the human brain.

129
00:05:04,914 --> 00:05:06,174
How does the human brain work?

130
00:05:06,304 --> 00:05:07,414
We have the input layer.

131
00:05:08,014 --> 00:05:09,964
What is the input in your brain?

132
00:05:10,064 --> 00:05:10,844
Your senses.

133
00:05:10,874 --> 00:05:15,374
You have your eyes, your ears, you
have the, you can touch things,

134
00:05:15,374 --> 00:05:16,635
you can feel things, whatever.

135
00:05:17,414 --> 00:05:18,164
This is the input.

136
00:05:18,664 --> 00:05:19,324
What's the output?

137
00:05:19,794 --> 00:05:20,604
You can do an action.

138
00:05:20,604 --> 00:05:24,204
You can move your hand, you can
speak, you can close your eyes.

139
00:05:24,204 --> 00:05:25,194
You can do whatever you want.

140
00:05:25,694 --> 00:05:27,754
What's the hidden layer then
where that your actual, your

141
00:05:27,754 --> 00:05:29,494
brain is built out of nuance.

142
00:05:29,914 --> 00:05:32,314
This is where the term neuro
network comes from nuances.

143
00:05:32,945 --> 00:05:34,804
Nuances are small cells inside your brain.

144
00:05:35,314 --> 00:05:41,124
You have billions or actually trillions of
them, and those nuances are communicating

145
00:05:41,124 --> 00:05:44,574
between each other, forming super
complex networks in which electrical

146
00:05:44,574 --> 00:05:48,659
currents are circulating and they're
communicating with them with each other.

147
00:05:49,554 --> 00:05:52,394
Millions of times per second,
to create your thought, your

148
00:05:52,394 --> 00:05:53,564
feelings, and other things.

149
00:05:54,064 --> 00:05:56,104
This is what Neuronets
are trying to replicate.

150
00:05:56,134 --> 00:05:59,374
But instead of using cells,
because we can build living cells,

151
00:05:59,374 --> 00:06:00,814
we're going to use functions.

152
00:06:01,054 --> 00:06:05,494
Some small objects functions, classes,
which have a function in them.

153
00:06:05,614 --> 00:06:07,774
It'll be called activation
functions in a second.

154
00:06:07,774 --> 00:06:11,064
What that means, because I wanna
explain right now, those are functions

155
00:06:11,124 --> 00:06:13,884
that are communicating with each
other, each one of them doing a

156
00:06:13,884 --> 00:06:16,524
specific task and showing the results.

157
00:06:17,199 --> 00:06:20,529
Then the final layer would filter
this and give you a final result.

158
00:06:21,029 --> 00:06:23,219
So it's basically like a human brain.

159
00:06:23,849 --> 00:06:25,859
So why do we try to do this?

160
00:06:26,009 --> 00:06:29,099
As I told you, I want to be able
to predict the next action of

161
00:06:29,099 --> 00:06:31,409
a user, but you're going to ask
me why do you want to do that?

162
00:06:31,919 --> 00:06:32,459
Good question.

163
00:06:33,029 --> 00:06:36,329
I want this because I want to personalize
app experience, how to optimize some

164
00:06:36,329 --> 00:06:38,819
common workflows and to identify
which are the common workflow for each

165
00:06:38,819 --> 00:06:42,269
user, and to optimize them, and how
to predict user actions to prepare for

166
00:06:42,269 --> 00:06:43,979
increased workload and specific services.

167
00:06:44,479 --> 00:06:45,499
How do I do this?

168
00:06:45,599 --> 00:06:46,319
Let's give the setup.

169
00:06:46,319 --> 00:06:48,359
Let's say that you have
a user activity logs.

170
00:06:48,449 --> 00:06:51,299
We predicting real time, which
tasks user perform so that we

171
00:06:51,299 --> 00:06:52,829
can predict some usage per task.

172
00:06:53,609 --> 00:06:57,809
We'll be this more new network to
predict the next action for user and some

173
00:06:57,809 --> 00:07:00,959
other alternatives can be a statistical
approach to not go into new net.

174
00:07:01,139 --> 00:07:06,539
To just go on statistics and say out of
100 users, 40 of them are going from home

175
00:07:06,539 --> 00:07:08,339
to newsfeed and from newsfeed to messages.

176
00:07:08,839 --> 00:07:11,509
Okay, that could work, but
it'll no longer be personalized.

177
00:07:11,559 --> 00:07:15,129
There will be some sign of some
sort of a generic optimization.

178
00:07:15,189 --> 00:07:16,449
I want to do something deeper.

179
00:07:16,449 --> 00:07:20,069
I want to do personalized
applications for each user and to

180
00:07:20,069 --> 00:07:21,539
predict for each user activity.

181
00:07:22,039 --> 00:07:24,649
So how I'm going to do this 10 flow.

182
00:07:25,609 --> 00:07:25,759
Okay.

183
00:07:25,999 --> 00:07:26,749
I'm going to say what?

184
00:07:26,959 --> 00:07:27,169
Yeah.

185
00:07:27,829 --> 00:07:32,889
Is a framework built by Google and
maintained by them for building and

186
00:07:32,889 --> 00:07:34,149
running machine learning models.

187
00:07:34,704 --> 00:07:36,474
Why do I, why did I choose 10 though?

188
00:07:37,434 --> 00:07:41,574
Because it can be used to, you can
use existing pre-train models, you

189
00:07:41,574 --> 00:07:45,204
can retrain existing models and can
develop new machine learning models.

190
00:07:45,894 --> 00:07:47,334
You can quickly train new models.

191
00:07:47,634 --> 00:07:50,514
You can adapt various models
that exist and can run it

192
00:07:50,514 --> 00:07:51,744
on server or in the browser.

193
00:07:51,804 --> 00:07:53,964
And this is the main thing why
I chose 10 Flow, because I have

194
00:07:53,964 --> 00:07:54,954
some other alternatives too.

195
00:07:55,494 --> 00:07:58,664
But I want TensorFlow because
they also provide us a browser

196
00:07:58,664 --> 00:08:00,434
solution, a JavaScript solution.

197
00:08:01,004 --> 00:08:03,704
So instead of putting more
pressure on the server.

198
00:08:03,944 --> 00:08:07,394
I try to transfer the workload on
the front end here because to be

199
00:08:07,394 --> 00:08:10,694
something per users, I told you
my task here is to do something

200
00:08:10,694 --> 00:08:12,434
per user to predict his workload.

201
00:08:13,214 --> 00:08:17,444
I want to see what the user will
do what actions he will take, and

202
00:08:17,444 --> 00:08:20,624
the most importantly, how is this?

203
00:08:20,654 --> 00:08:24,254
How should the system react if
I know the next action for user?

204
00:08:24,734 --> 00:08:27,254
I can pre, I can prefetch
some data for it.

205
00:08:27,404 --> 00:08:29,504
I can predict what data he will need.

206
00:08:30,074 --> 00:08:32,654
I can predict the server load for
that and some with other things.

207
00:08:33,194 --> 00:08:35,984
This is why I want TensorFlow,
because I have a TensorFlow JS

208
00:08:35,984 --> 00:08:39,275
JavaScript alternative, and one
more reason is that it's already

209
00:08:39,275 --> 00:08:41,375
used by hundreds of top companies.

210
00:08:41,375 --> 00:08:42,784
I won't even mention them.

211
00:08:43,205 --> 00:08:43,985
What I told you here.

212
00:08:44,225 --> 00:08:48,035
You might think that I'm repeating myself
when I said I can use existing Python

213
00:08:48,035 --> 00:08:49,985
models or I can retrain existing models.

214
00:08:50,030 --> 00:08:51,770
You say, isn't it the same?

215
00:08:51,819 --> 00:08:52,329
Not really.

216
00:08:52,829 --> 00:08:58,020
I can take an existing model already
built by Google, by Amazon, by Meta,

217
00:08:58,020 --> 00:09:02,550
by Adobe, by whatever other huge
company, and use it if it's free.

218
00:09:02,819 --> 00:09:03,780
They're usually published.

219
00:09:03,780 --> 00:09:05,729
Some gonna be published on Hugging Face.

220
00:09:05,939 --> 00:09:08,699
It's one of the most common
websites, hugging face.

221
00:09:09,540 --> 00:09:12,599
Or I can take that model and
simply put it in TensorFlow

222
00:09:12,630 --> 00:09:14,069
and use it for my application.

223
00:09:14,609 --> 00:09:18,060
If you go on TensorFlow website, you
can see that they're already using.

224
00:09:18,839 --> 00:09:19,139
Of them.

225
00:09:19,639 --> 00:09:21,709
But let's say that I have
a more specific use case.

226
00:09:22,279 --> 00:09:25,519
Let's say that Google built a
model to identify cats and dogs.

227
00:09:25,639 --> 00:09:27,859
I'll tell you again,
I'll give that example.

228
00:09:28,129 --> 00:09:29,869
Let's say that somebody built it.

229
00:09:30,199 --> 00:09:33,049
Somebody at a random university
or a random company built it.

230
00:09:33,139 --> 00:09:35,029
Okay, what am I doing with it?

231
00:09:35,389 --> 00:09:37,189
I want it, but I want
something more specific.

232
00:09:37,189 --> 00:09:42,729
I want to be able to identify
cats, dogs, and rabbits.

233
00:09:43,229 --> 00:09:45,989
I can't use that model because he
doesn't know what a rabbit looks like.

234
00:09:46,979 --> 00:09:47,939
So how can I do that?

235
00:09:48,629 --> 00:09:50,279
I take that model and I retrain it.

236
00:09:51,209 --> 00:09:56,519
I retrain the model that they built, and
I give him 10,000 images of rabbits, and I

237
00:09:56,519 --> 00:10:00,449
hope that I'll be able to get the accuracy
on all three classes and secure and

238
00:10:00,449 --> 00:10:02,759
identify catch docs and rabbit and so on.

239
00:10:02,909 --> 00:10:05,699
If that doesn't work, I will
develop my new model from scratch.

240
00:10:06,059 --> 00:10:09,449
I say, okay, leave aside what those guys
built and let me build my own model.

241
00:10:09,949 --> 00:10:13,159
So I will try to show you right
now something I told you about

242
00:10:13,159 --> 00:10:17,670
the models regression decision
three Random forest neur network.

243
00:10:18,170 --> 00:10:22,810
What if I tell you that a newer network
can be so adaptive that can do the

244
00:10:22,810 --> 00:10:24,160
things that the other ones can also do?

245
00:10:24,660 --> 00:10:25,560
Yeah, I'm serious.

246
00:10:26,400 --> 00:10:29,070
Linear regressions, I told you
are exam for approximating things.

247
00:10:29,450 --> 00:10:29,930
Guess what?

248
00:10:29,960 --> 00:10:30,380
You are not.

249
00:10:30,380 --> 00:10:31,940
Oxygen also approximating things.

250
00:10:32,750 --> 00:10:34,280
So how am I going to do that?

251
00:10:34,400 --> 00:10:37,130
I'm going to be the basic
regression example to approximate

252
00:10:37,130 --> 00:10:38,690
the next number in a function.

253
00:10:38,690 --> 00:10:42,680
Let's say have a function or two x
minus one or something like this.

254
00:10:43,490 --> 00:10:45,890
But I won't add the computer, which
is a function, and I'm going to

255
00:10:45,890 --> 00:10:47,209
approximate using a new network.

256
00:10:47,569 --> 00:10:51,230
Obviously the best example, building a
regression, but I'm trying to mimic a

257
00:10:51,380 --> 00:10:52,969
linear regression with an EO network.

258
00:10:53,020 --> 00:10:54,040
Exact exactly in a second.

259
00:10:54,040 --> 00:10:55,000
Why am I telling you this?

260
00:10:55,300 --> 00:10:56,109
I'm going to import it as.

261
00:10:56,609 --> 00:10:58,349
I'm to define the model,
which is sequential.

262
00:10:58,349 --> 00:10:58,649
Exactly.

263
00:10:58,649 --> 00:10:59,609
The data is sequential.

264
00:10:59,609 --> 00:11:01,529
I know all the numbers.

265
00:11:01,529 --> 00:11:02,909
0, 1, 2, 3, whatever.

266
00:11:03,409 --> 00:11:05,239
We're gonna add hidden
layers to the model.

267
00:11:05,389 --> 00:11:06,169
I told you earlier.

268
00:11:06,169 --> 00:11:07,159
This is basically the brain.

269
00:11:07,729 --> 00:11:09,199
The hidden layers are
the brain of the model.

270
00:11:09,199 --> 00:11:10,879
This is what's thinking
and taking decisions.

271
00:11:11,839 --> 00:11:13,099
I'm going to compile the model.

272
00:11:13,349 --> 00:11:16,709
In a few seconds what those things,
loss optimiz and other things mean.

273
00:11:16,754 --> 00:11:19,154
I'm going to define our
import training data.

274
00:11:19,234 --> 00:11:20,404
This is the tricky part.

275
00:11:20,464 --> 00:11:21,784
Now I'm going to define the data.

276
00:11:21,784 --> 00:11:25,564
I'm saying in value minus one, the
form function is minus three in value.

277
00:11:25,594 --> 00:11:28,954
Zero is minus one in one, it's
one in two, it's three, and so on.

278
00:11:29,454 --> 00:11:31,494
So now the question will
be, which is the function?

279
00:11:31,794 --> 00:11:35,994
It's pretty hard to find it out,
but once the model is trained, she

280
00:11:35,994 --> 00:11:39,374
can easily predict it and say, okay,
if in this point it's like this.

281
00:11:39,434 --> 00:11:39,704
Okay.

282
00:11:40,424 --> 00:11:41,384
And then I'll ask him.

283
00:11:41,834 --> 00:11:44,774
What would be the value of
the function in point 20?

284
00:11:45,464 --> 00:11:48,974
And the model will say, okay, based
on the function, it'll be whatever,

285
00:11:48,974 --> 00:11:51,014
it'll be 35 or something like this.

286
00:11:51,254 --> 00:11:52,394
I dunno, I'm not good at math.

287
00:11:52,604 --> 00:11:54,434
I didn't compute it, I just
showed you a random number.

288
00:11:55,124 --> 00:11:56,414
But this is how the model will work.

289
00:11:56,414 --> 00:11:59,414
You try to predict the value
of the function in point 20.

290
00:12:00,314 --> 00:12:01,514
So why do I show you this?

291
00:12:01,814 --> 00:12:03,944
'cause this stuff is not
what I want with the user.

292
00:12:03,944 --> 00:12:04,814
Let's say today.

293
00:12:04,964 --> 00:12:07,244
Let's say that in the second
the user is at page home.

294
00:12:07,919 --> 00:12:10,319
Then he's at newsfeed,
then he's at messages.

295
00:12:10,529 --> 00:12:14,069
Then where will he be in the
next two actions or two actions,

296
00:12:14,129 --> 00:12:15,419
or four actions or so on?

297
00:12:15,919 --> 00:12:19,309
So this is what we're going to do
today, our next price prediction system.

298
00:12:19,459 --> 00:12:23,659
Let's say the user goes from home to
newsfeed to messages to marketplace to

299
00:12:23,659 --> 00:12:25,489
newsfeed, and where does he go next?

300
00:12:25,739 --> 00:12:28,799
I can do a statistical approach
or I can use the newer network to

301
00:12:28,799 --> 00:12:32,369
say, okay, predict me the next page
in which the user will be, this

302
00:12:32,369 --> 00:12:33,359
is what I want to do right now.

303
00:12:33,539 --> 00:12:33,869
How.

304
00:12:34,169 --> 00:12:36,299
I'm going to gather required
data from activity logs because

305
00:12:36,299 --> 00:12:37,319
I know what the user is doing.

306
00:12:37,709 --> 00:12:39,569
I told you most of the
applications were destroyed.

307
00:12:40,079 --> 00:12:43,949
And to transform the data for training
and to initiate the model, train the

308
00:12:43,949 --> 00:12:47,099
model, and use it to predict how,
let me give the practical example.

309
00:12:47,099 --> 00:12:47,909
Let's start writing code.

310
00:12:47,999 --> 00:12:50,939
This is why we can Q Actually,
until now, this was all theory.

311
00:12:50,999 --> 00:12:51,809
Now let's start playing.

312
00:12:52,309 --> 00:12:54,799
So we have a lightweight now,
just application web around

313
00:12:54,799 --> 00:12:55,399
the machine learning app.

314
00:12:56,104 --> 00:12:58,654
We have 10 for model, wanting
to predict the next action,

315
00:12:58,744 --> 00:13:00,064
and we predict the actions.

316
00:13:00,484 --> 00:13:02,764
Then the predict actions will be
used to preload data when ensure

317
00:13:02,764 --> 00:13:03,754
several resources are available.

318
00:13:04,254 --> 00:13:05,724
So how do we get the data?

319
00:13:06,394 --> 00:13:08,704
Let's say that we just
write in memory right now.

320
00:13:08,794 --> 00:13:12,154
I don't want to stress the network
or something we, cause no, let's

321
00:13:12,154 --> 00:13:14,524
just have an array network, which
will mimic the activity log.

322
00:13:14,884 --> 00:13:16,929
So how do we train and run the model?

323
00:13:17,429 --> 00:13:22,649
This is pseudo code, basically three
us just to psdo code, and I give the

324
00:13:22,649 --> 00:13:24,659
actual code in the next five, six slides.

325
00:13:25,529 --> 00:13:27,299
First of all, we're going
to transform the data.

326
00:13:27,359 --> 00:13:31,079
We're going to initiate the model,
train the model, and then we're

327
00:13:31,079 --> 00:13:32,399
going to use it to predict the page.

328
00:13:32,399 --> 00:13:34,319
So how do we do each of those steps?

329
00:13:34,899 --> 00:13:35,949
How do we transform the data?

330
00:13:36,249 --> 00:13:39,579
You have the number of pages that the
application has, let's say 10 pages.

331
00:13:40,079 --> 00:13:41,549
Can I just pass to the model?

332
00:13:41,549 --> 00:13:44,569
Something like home newsfeed
messages shop contact.

333
00:13:44,569 --> 00:13:45,379
No, I can't.

334
00:13:45,499 --> 00:13:45,829
Why?

335
00:13:46,429 --> 00:13:50,719
Newer networks don't really
work to okay with strings.

336
00:13:51,219 --> 00:13:53,679
It just, they can't just
handle words or strings.

337
00:13:54,489 --> 00:13:57,159
We have other models which are
way too complex for us right now

338
00:13:57,159 --> 00:13:58,689
because we are not AI engineers.

339
00:13:58,689 --> 00:14:00,129
We're just software engineers right now.

340
00:14:00,879 --> 00:14:04,249
And, there are more complex
models, which are handling strings.

341
00:14:04,249 --> 00:14:06,379
Some of them are GPT transformers.

342
00:14:06,379 --> 00:14:09,469
Both might have heard of them
on the news, but that's way too

343
00:14:09,469 --> 00:14:10,429
complicated for us right now.

344
00:14:11,029 --> 00:14:13,219
So what we're going to focus on
right now is the Neur network.

345
00:14:13,399 --> 00:14:17,989
So in order to give the Neur network some
data that it can process, we're going

346
00:14:17,989 --> 00:14:19,969
to transform all the data to numbers.

347
00:14:20,359 --> 00:14:21,259
And here we go.

348
00:14:21,379 --> 00:14:23,389
This is what we do here by
transforming into numbers.

349
00:14:23,889 --> 00:14:25,329
We'll just say Page news.

350
00:14:25,329 --> 00:14:26,199
Suite is number one.

351
00:14:26,199 --> 00:14:27,609
Page home is number two.

352
00:14:27,669 --> 00:14:30,699
Page messages is number three,
and so on, and got transformed

353
00:14:30,699 --> 00:14:31,959
this to a vector to a 10.

354
00:14:32,459 --> 00:14:34,649
Basically what we're doing right now
is called the one hot ENC coding.

355
00:14:35,579 --> 00:14:36,604
That's what this is called.

356
00:14:37,529 --> 00:14:38,459
One hot encoding.

357
00:14:38,459 --> 00:14:40,409
This is how tensile flow accepts data.

358
00:14:40,619 --> 00:14:42,389
This is the best way to handle the data.

359
00:14:42,389 --> 00:14:43,139
Tensile flow.

360
00:14:43,349 --> 00:14:46,109
The name tensile means actually vector.

361
00:14:46,349 --> 00:14:47,219
It's some sort.

362
00:14:47,279 --> 00:14:49,109
The 10 is actually some sort of a vector.

363
00:14:49,769 --> 00:14:53,459
It's a more, it's a more powerful
vector using machine learning to

364
00:14:53,459 --> 00:14:56,189
pass data from one led to another.

365
00:14:56,189 --> 00:14:59,189
But basically it's a wrap
around the vector or in way.

366
00:14:59,689 --> 00:15:01,339
So now this is the most important one.

367
00:15:01,339 --> 00:15:04,219
This slide and the next one are
the ones where we came here.

368
00:15:04,219 --> 00:15:06,649
So this how we initiate the model.

369
00:15:07,309 --> 00:15:10,729
We say it's a sequential model, I told you
already, and we add layers to the model.

370
00:15:10,819 --> 00:15:11,659
What are those layers?

371
00:15:12,469 --> 00:15:15,949
I told you in the example we
have nuance, newer network.

372
00:15:16,099 --> 00:15:18,859
So why now add two layers of nuance.

373
00:15:19,359 --> 00:15:22,239
Both of are dance layers because
they have the nuance dance in

374
00:15:22,239 --> 00:15:25,389
general, and this is the tricky part.

375
00:15:25,629 --> 00:15:28,839
First we had the layer with
the activation function level.

376
00:15:29,589 --> 00:15:30,609
This activation level.

377
00:15:31,219 --> 00:15:31,849
What is this layer?

378
00:15:31,849 --> 00:15:33,049
It's rectified linear unit.

379
00:15:33,879 --> 00:15:38,979
This is something that is used in the
Neur network in the internal layers.

380
00:15:39,479 --> 00:15:41,249
I can give you material behind this.

381
00:15:41,729 --> 00:15:43,919
You should search online
for activation functions.

382
00:15:44,489 --> 00:15:45,059
There are.

383
00:15:45,559 --> 00:15:48,019
A lot of them, each one
with each pros and cons.

384
00:15:48,679 --> 00:15:52,909
The most common size are
value gel, and for the final

385
00:15:52,909 --> 00:15:54,409
layer you usually use softmax.

386
00:15:54,409 --> 00:15:55,624
In the last layer softmax.

387
00:15:56,574 --> 00:15:59,904
Softmax is the function that would
take the data from the previous

388
00:15:59,904 --> 00:16:03,444
layer and try to put it in a class
or in a result, we try to classify

389
00:16:03,444 --> 00:16:06,684
it basically, and this is how we're
going to obtain our final result.

390
00:16:06,954 --> 00:16:10,434
The first layer here, we try to act as.

391
00:16:11,109 --> 00:16:14,169
The email layer, which will calculate
things and stuff like this, and the final

392
00:16:14,169 --> 00:16:19,659
layer with Softmax, we try to basically
take the results, make them linear, and

393
00:16:19,659 --> 00:16:21,249
use them to predict the next action.

394
00:16:21,749 --> 00:16:25,619
And we're going to take this and compile
it now, compile the model and can use it.

395
00:16:25,769 --> 00:16:28,979
You can see on the slide here what
you can change here on your example.

396
00:16:29,039 --> 00:16:31,889
You can search online for of this,
how to change the activation,

397
00:16:31,889 --> 00:16:34,859
how to change the units to
optimize the loss and the metrics.

398
00:16:35,359 --> 00:16:36,379
So what do I have right now?

399
00:16:36,589 --> 00:16:37,249
I have the model.

400
00:16:37,579 --> 00:16:38,509
But what is this model?

401
00:16:38,509 --> 00:16:40,099
This is the brain of the system.

402
00:16:40,949 --> 00:16:41,459
Considerably.

403
00:16:41,459 --> 00:16:47,069
You just saw a newborn puppy or a
newborn cat, or a newborn animal.

404
00:16:47,569 --> 00:16:49,009
What can a newborn puppy do?

405
00:16:49,509 --> 00:16:49,839
Nothing.

406
00:16:49,839 --> 00:16:52,539
He can just breed and eat.

407
00:16:52,989 --> 00:16:53,889
And that's all.

408
00:16:54,159 --> 00:16:56,969
Other than that, he doesn't know
how to do anything, but he still

409
00:16:56,969 --> 00:16:59,879
has the brain in it, but the brain
doesn't know how to do anything.

410
00:16:59,879 --> 00:17:03,239
It's same for puppies,
for little cats, for.

411
00:17:04,229 --> 00:17:06,809
Kids for humans, for every,
for everyone with the brain.

412
00:17:07,439 --> 00:17:10,169
So right now we built the brain
of the system, but it's stupid.

413
00:17:10,259 --> 00:17:11,189
He doesn't know how to do anything.

414
00:17:11,189 --> 00:17:12,719
We need to teach him how to do stuff.

415
00:17:12,719 --> 00:17:14,699
So here comes the training part.

416
00:17:14,999 --> 00:17:18,689
We are training the model by
giving him data, using the

417
00:17:18,689 --> 00:17:20,129
fit function model that fit.

418
00:17:20,639 --> 00:17:26,089
We're giving the user the activity,
log the labels, which are the basic,

419
00:17:26,089 --> 00:17:31,939
which is the metrics, and we are
going to see if it can predict them.

420
00:17:32,374 --> 00:17:36,574
If you can predict the next action of a
user, so we're gonna specify 100 epoch.

421
00:17:36,574 --> 00:17:42,334
So try to train your model 100 times
and the batch sizes, how many items

422
00:17:42,334 --> 00:17:43,654
you take in each batch for training.

423
00:17:44,154 --> 00:17:48,144
And now that we are the finish, we
have the model, we have the brain.

424
00:17:48,174 --> 00:17:51,534
The brain has been trained, we can
actually use it to predict, we have

425
00:17:51,534 --> 00:17:52,824
the function model that predict.

426
00:17:53,124 --> 00:17:57,234
And again, to give the user the current
history and tell the model, Hey, this

427
00:17:57,234 --> 00:18:00,474
is the current history, which is the
next item that the user will access.

428
00:18:00,864 --> 00:18:03,374
Tell me and what I going
to do with this result.

429
00:18:03,944 --> 00:18:07,184
Whatever you want, you can pull
out the next assets based on this.

430
00:18:07,694 --> 00:18:10,904
Let's say that you know that the
user will now go to page messages.

431
00:18:11,354 --> 00:18:15,044
If you know that the next page is
messages, you can easily do the

432
00:18:15,044 --> 00:18:18,854
request the server while app is
idle and pull out the way the data

433
00:18:18,854 --> 00:18:22,934
so that when the user clicks on
messages, they approval instantly.

434
00:18:23,084 --> 00:18:24,674
'cause all the data is
already there in the memo.

435
00:18:25,334 --> 00:18:27,554
We can use it to detect
anomalies, user flows.

436
00:18:27,584 --> 00:18:31,364
We can use it to predict the server
workload or some other things.

437
00:18:31,864 --> 00:18:34,024
That was the tricky key part,
doing the actual prediction.

438
00:18:34,954 --> 00:18:37,744
If you're on the full code, you can see
it on a GitHub, I give you here also

439
00:18:37,744 --> 00:18:41,424
the source code, and you see the how to
initiate the model, how to navigate, how

440
00:18:41,424 --> 00:18:44,819
to process the data, how to train the
model, how to predict and how to print it.

441
00:18:45,119 --> 00:18:48,239
If you have any questions, please
feel free to contact me on my email,

442
00:18:48,239 --> 00:18:51,479
my website, my on the conference
website to whatever you want.

443
00:18:52,049 --> 00:18:55,409
And feel free to ask questions.

444
00:18:55,589 --> 00:18:59,339
And thank you very much for attending
Comfort Two, and have a nice day everyone.

