1
00:00:00,500 --> 00:00:01,290
Hello everyone.

2
00:00:01,749 --> 00:00:02,710
My name is Tapan.

3
00:00:03,210 --> 00:00:08,730
I have spent considerable time building
payment platforms and working with

4
00:00:08,730 --> 00:00:13,580
payment systems, and today I'm here to
share my learnings on what it takes to

5
00:00:13,580 --> 00:00:16,740
build a planet skill payment platform.

6
00:00:17,730 --> 00:00:22,230
One of the prime example of that
is global card payment ecosystems.

7
00:00:23,010 --> 00:00:25,560
The global card payment
ecosystem needs to process.

8
00:00:26,010 --> 00:00:30,000
Trillions of rolls annually
through one of the most complex

9
00:00:30,050 --> 00:00:31,340
distributed system ever built.

10
00:00:31,940 --> 00:00:35,430
The infrastructure need to maintain
five nines of reliability while

11
00:00:35,430 --> 00:00:39,990
handling billions of transactions
across continents, currencies, while

12
00:00:39,990 --> 00:00:44,670
dealing with a variety of regulatory
frameworks that is local to the countries.

13
00:00:45,450 --> 00:00:48,989
For platform engineers who are trying
to design these systems, they need to.

14
00:00:49,650 --> 00:00:52,019
Deal with unique convergence
of technical challenges.

15
00:00:52,200 --> 00:00:55,019
They need to build a system
that is extremely reliable.

16
00:00:55,680 --> 00:00:59,519
It can process transaction
in subsecond latency and have

17
00:00:59,519 --> 00:01:01,110
zero tolerance for data loss.

18
00:01:01,470 --> 00:01:06,050
All of these challenges makes designing
payment platform that can operate a

19
00:01:06,080 --> 00:01:08,990
platform p planet scale really hard.

20
00:01:09,490 --> 00:01:13,000
Let's dig deeper into what are the
scale and complexity challenges

21
00:01:13,000 --> 00:01:14,650
that comes with payment platform.

22
00:01:15,150 --> 00:01:18,360
When we think of payment platform,
especially processing car transactions,

23
00:01:18,360 --> 00:01:21,060
and especially even when we are
focusing on specific reason, we

24
00:01:21,060 --> 00:01:25,500
are looking at 150 billion car
transactions that is happening annually.

25
00:01:26,000 --> 00:01:29,120
And when we look at holiday period,
sometimes that transition could run

26
00:01:29,120 --> 00:01:32,420
into 65,000 transactions per second.

27
00:01:32,420 --> 00:01:36,960
And when you consider the downtime
speech scenarios, you're looking

28
00:01:36,960 --> 00:01:39,480
at $31,000 worth of, money lost.

29
00:01:39,480 --> 00:01:42,000
If you have a downside
downtime of one second.

30
00:01:42,500 --> 00:01:44,270
That becomes really hard.

31
00:01:44,270 --> 00:01:45,170
And you know what?

32
00:01:45,920 --> 00:01:48,020
When you are trying to process a
transaction, there are multiple

33
00:01:48,020 --> 00:01:51,230
party parties that are involved,
which makes a challenge much more

34
00:01:51,230 --> 00:01:53,300
unique and hard to solve for.

35
00:01:54,020 --> 00:01:57,350
For example, when we look at the
card ion, there is card holders

36
00:01:57,350 --> 00:01:58,490
who actually owns the card.

37
00:01:58,820 --> 00:02:01,940
There's merchant who's trying to
process the card there requires who are

38
00:02:01,940 --> 00:02:03,530
trying to settle the card transactions.

39
00:02:03,875 --> 00:02:07,475
The networks, there are payment
gateways, there are issuers, the bank

40
00:02:07,475 --> 00:02:10,565
who actually issued the card, and
they need to approve the transactions.

41
00:02:10,985 --> 00:02:14,795
When you look at all these parties, they
create a complex web of dependencies

42
00:02:14,795 --> 00:02:16,625
that needs to be orchestrated real time.

43
00:02:17,125 --> 00:02:19,825
When you look at single
card, swipe at a coffee shop.

44
00:02:19,920 --> 00:02:24,550
You're expecting the transition to go
through and that timeframe is roughly

45
00:02:24,550 --> 00:02:27,340
a hundred to 200 milliseconds, in
which case you want the transition to

46
00:02:27,340 --> 00:02:30,310
go through all the parties that are
involved in that real time flow and

47
00:02:30,310 --> 00:02:33,490
come back with an approval for you
to be able to buy that cup of coffee.

48
00:02:34,360 --> 00:02:38,390
That it requires serious distributor
system knowledge and actually

49
00:02:38,780 --> 00:02:40,835
planning as a platform engineer.

50
00:02:41,335 --> 00:02:42,535
Let's go deeper.

51
00:02:43,405 --> 00:02:47,065
When we look at the cart transactions,
somebody is trying to initiate a purchase.

52
00:02:47,305 --> 00:02:49,105
That purchase needs to be authorized.

53
00:02:50,015 --> 00:02:53,765
For that it has to be
processed through gateways.

54
00:02:53,885 --> 00:02:56,435
There are multiple gateways that
could be involved, and we need to

55
00:02:56,435 --> 00:02:58,055
find the right gateway to work with.

56
00:02:58,985 --> 00:03:02,345
At each party that is involved in a
payment transactions, they actually

57
00:03:02,345 --> 00:03:05,615
want to reduce liability on them, so
they run their own set of fraud checks.

58
00:03:05,615 --> 00:03:07,850
So you're looking at series of fraud
checks that needs to be performed.

59
00:03:08,405 --> 00:03:10,365
For a transition to be successful.

60
00:03:10,665 --> 00:03:13,635
And at the end when a transition
reaches an issuer, the issuer has to

61
00:03:13,635 --> 00:03:17,265
approve the transaction or who has
the final authority, and then it,

62
00:03:17,265 --> 00:03:21,545
all of that has to flow through you,
or flow back to you in real time for

63
00:03:21,545 --> 00:03:22,895
you to be able to see the results.

64
00:03:23,675 --> 00:03:27,425
So that brings its own complexity, like
when you look at it like it's a multi-step

65
00:03:27,425 --> 00:03:31,115
projection, and then you throw in the
complexity of like multiple parties.

66
00:03:31,355 --> 00:03:33,215
And then each party is
dealing with multiple data

67
00:03:33,215 --> 00:03:34,475
centers, multiple geographies.

68
00:03:34,975 --> 00:03:37,765
And then you're trying to do
this while being compliant to

69
00:03:37,795 --> 00:03:40,045
dozens of regulatory framework.

70
00:03:40,545 --> 00:03:43,645
And then on top of that, you
know the payment is sensitive.

71
00:03:43,805 --> 00:03:44,555
Business, right?

72
00:03:45,015 --> 00:03:46,185
Security is paramount.

73
00:03:46,185 --> 00:03:49,005
So you need a security to
be taken care at every hope.

74
00:03:49,545 --> 00:03:52,665
So in payment platform engineers,
when designing the system, they

75
00:03:52,755 --> 00:03:55,575
need to design it such that it
can handle hardware failures.

76
00:03:56,490 --> 00:04:01,810
It can be resilient to traffic spikes
without r dropping the transactions.

77
00:04:02,680 --> 00:04:06,670
It requires very sophisticated tendency,
redundant strategies, intelligent

78
00:04:06,670 --> 00:04:10,120
routing algorithms in real time,
you can detect the failures and read

79
00:04:10,120 --> 00:04:13,930
out the transactions and are able to
maintain a transaction consistency

80
00:04:13,930 --> 00:04:15,670
across globally distributed systems.

81
00:04:16,450 --> 00:04:19,780
When you look at it like you don't,
we don't want to run into a scenario

82
00:04:19,780 --> 00:04:21,610
when a transaction is successful.

83
00:04:22,355 --> 00:04:25,355
On the bank side, but at gateway
side it says it's failed, right?

84
00:04:25,355 --> 00:04:29,855
We need that to have a same set of
street in eventual consistency there.

85
00:04:30,355 --> 00:04:31,195
Let's go further.

86
00:04:31,975 --> 00:04:34,885
When we think about distributed
system architecture for P processing,

87
00:04:35,185 --> 00:04:38,065
I think one of the few of the key
concepts are very important, right?

88
00:04:38,065 --> 00:04:39,445
One is horizontal scalability.

89
00:04:39,945 --> 00:04:43,635
While, as much as we would like to upgrade
individual machines and push for more

90
00:04:43,635 --> 00:04:47,594
vertical stability, what really well works
well for payment system is the horizontal

91
00:04:47,594 --> 00:04:51,585
scalability, because that allows you to
scale for the number of projections that

92
00:04:51,590 --> 00:04:56,324
is, allows the system to scale for the
requirement of subsecond latencies while

93
00:04:56,324 --> 00:04:57,854
maintaining a consistent performance.

94
00:04:58,334 --> 00:05:02,904
You also want the system to be built
using service oriented architecture.

95
00:05:02,994 --> 00:05:06,474
You want the critical component to be
isolated that has multiple benefit.

96
00:05:07,084 --> 00:05:11,194
Of one that it allows you to upgrade
a smaller component versus actually

97
00:05:11,194 --> 00:05:12,634
bringing the entire system down.

98
00:05:13,334 --> 00:05:18,334
Second is actually, it allows
critical failures to be limited to

99
00:05:18,364 --> 00:05:21,454
the critical, the specific components
that they were designed for.

100
00:05:21,704 --> 00:05:26,034
The geographic distribution is equally
important because you are, you want the

101
00:05:26,034 --> 00:05:28,074
system to be having a good out time.

102
00:05:28,074 --> 00:05:29,514
You want to also prevent.

103
00:05:30,169 --> 00:05:33,399
Against catastrophic failures like,
earthquake, for example, or flood.

104
00:05:34,239 --> 00:05:39,189
You also essentially want to process
this transaction in subsecond latency,

105
00:05:39,189 --> 00:05:43,029
which means like you can't afford
to have, a continent intercontinent

106
00:05:43,129 --> 00:05:46,069
transaction travel in many cases
because that will add up to the

107
00:05:46,159 --> 00:05:47,539
overall latency of the transactions.

108
00:05:48,039 --> 00:05:48,969
Data consistency.

109
00:05:49,019 --> 00:05:51,149
That's one of the key part I
just hinted earlier, right?

110
00:05:51,149 --> 00:05:54,319
Data consistency in distributed
environments is very important.

111
00:05:54,319 --> 00:05:56,959
And all of us are familiar with
the cap theorum consistency,

112
00:05:56,959 --> 00:05:58,189
availability, and partition.

113
00:05:58,549 --> 00:06:02,299
I think one of the things that
stands out for PM platform is while

114
00:06:02,299 --> 00:06:06,169
most of the systems can operate and
tolerate with eventual consistency.

115
00:06:06,709 --> 00:06:11,899
Payment platforms actually need to see
the transition through or not at all.

116
00:06:12,799 --> 00:06:16,909
There is no room for ambiguity
here within a certain time bound.

117
00:06:16,909 --> 00:06:20,339
They need to have a very succinct
outcome of a transaction that

118
00:06:20,339 --> 00:06:21,639
makes the problem very interesting.

119
00:06:21,889 --> 00:06:26,449
The I attached upon the latency right card
authorization represents the most latency

120
00:06:26,449 --> 00:06:28,099
sensitive component of payment process.

121
00:06:28,819 --> 00:06:32,299
Merchants are expecting a response
within a hundred to two and milliseconds.

122
00:06:32,399 --> 00:06:36,519
That requires us to validate the cards,
check available funds on the card,

123
00:06:36,789 --> 00:06:40,389
check, assess the fraud risk with it,
apply any business logic that is there,

124
00:06:40,749 --> 00:06:45,039
re out route the transaction to the
right issuer and the gateways, while

125
00:06:45,039 --> 00:06:46,689
maintaining a sub secondary response time.

126
00:06:47,189 --> 00:06:50,264
That is difficult when you are running
through these, so many network sws.

127
00:06:50,514 --> 00:06:53,554
Payment authorization system
employs several optimization

128
00:06:53,554 --> 00:06:56,794
strategies like connection,
pooling, persistent connection.

129
00:06:57,304 --> 00:06:59,284
They want to eliminate
the TCP handshake times.

130
00:06:59,284 --> 00:07:04,184
They want to use a protocol that is less
data versus having, using an XML format.

131
00:07:04,844 --> 00:07:08,464
Definitely leveraging machine
learning or rule engine logic to

132
00:07:08,464 --> 00:07:12,564
optimize the relation to the places
which can offer better performance.

133
00:07:12,774 --> 00:07:15,039
All of that is needed to be able
to do this in the real time.

134
00:07:15,539 --> 00:07:18,209
Load balancing and traffic management
is another key aspect when you're

135
00:07:18,209 --> 00:07:21,509
designing a a distributed system
for payment platform, right?

136
00:07:22,049 --> 00:07:26,519
We need to be able to have adaptive
load balancing, like modern platforms

137
00:07:26,549 --> 00:07:31,029
need to load balance considering
the server health response times

138
00:07:31,029 --> 00:07:32,709
and Q depths when routing requests.

139
00:07:32,709 --> 00:07:33,104
We don't want.

140
00:07:33,789 --> 00:07:36,489
A backlog of request to be
accommodated at once server.

141
00:07:36,489 --> 00:07:40,789
We want that to be done in a manner
that can meet the latency requirements

142
00:07:40,879 --> 00:07:42,139
and availability requirements.

143
00:07:42,639 --> 00:07:43,899
We need circuit breaker patterns.

144
00:07:43,899 --> 00:07:48,549
When we see something is unhealthy we
should be able to detect that in real

145
00:07:48,549 --> 00:07:50,259
time and route the traffic elsewhere.

146
00:07:50,304 --> 00:07:53,814
We, all of that has to be part of
the designing of the distributed

147
00:07:53,814 --> 00:07:59,224
system so that we can minimize
the loss and availability issues.

148
00:07:59,724 --> 00:08:01,644
Caching is gonna be very
important as well, right?

149
00:08:01,644 --> 00:08:04,254
Like when we are trying to process
millions of transactions, there are

150
00:08:04,254 --> 00:08:07,794
a lot of static data that we use to
run the checks and the validations.

151
00:08:08,064 --> 00:08:12,464
All of that can actually be
cashed to be, to avoid that io

152
00:08:13,064 --> 00:08:16,094
cost so that we can maintain.

153
00:08:16,594 --> 00:08:20,224
SA for the latency by leveraging those
cache and that often those caches has

154
00:08:20,224 --> 00:08:23,194
to be distributed because your services
are deployed on distributed systems.

155
00:08:23,694 --> 00:08:26,704
All of this requires, for example,
when we go deeper into the cache

156
00:08:26,704 --> 00:08:30,334
itself when you are trying to have a
distributed cache, the invalidation

157
00:08:30,904 --> 00:08:32,434
requires a very careful orchestrations.

158
00:08:32,684 --> 00:08:36,974
You need to make sure the gates propagate
quickly, preventing any routing errors.

159
00:08:37,499 --> 00:08:41,339
But if you actually try to
aggressively invalidate, you can

160
00:08:41,339 --> 00:08:42,719
create a hundred herb problems.

161
00:08:43,589 --> 00:08:47,429
All of those requires more sophisticated
cache, cash warming strategy.

162
00:08:48,179 --> 00:08:51,629
You need to have a gradual rollout
mechanism and multi-level caching

163
00:08:51,759 --> 00:08:54,759
to ensure that you can offer
performance with consistency.

164
00:08:55,259 --> 00:08:55,829
Fraud detection.

165
00:08:55,829 --> 00:08:58,649
I touched upon this this is very
interesting and one of the things that

166
00:08:58,649 --> 00:09:02,619
is very common across starting from
your payment gateways to the networks,

167
00:09:02,669 --> 00:09:05,309
to the issuer, to the merchant.

168
00:09:05,654 --> 00:09:09,374
All of them are trying to
actually perform fraud checks and

169
00:09:09,374 --> 00:09:11,524
trying to mitigate risk, right?

170
00:09:11,524 --> 00:09:16,044
There is a card transaction, comes with
certain set of rules that are built by

171
00:09:16,044 --> 00:09:21,264
networks and if you do well, then you
can shift the liability to the other

172
00:09:21,264 --> 00:09:22,914
parties that is in the transaction.

173
00:09:22,914 --> 00:09:26,784
So that is one of the reason why,
you know, the fraud detection and

174
00:09:26,784 --> 00:09:27,954
risk management is very important.

175
00:09:28,454 --> 00:09:31,384
So modern fraud detection systems
needs to high analyze hundreds of

176
00:09:31,384 --> 00:09:34,144
parameters per transactions in real time.

177
00:09:35,104 --> 00:09:38,184
They need to leverage the technology
that is available around device

178
00:09:38,184 --> 00:09:43,074
fingerprinting for example device
identifications and behavioral patterns

179
00:09:43,074 --> 00:09:45,379
to velocity checks in geographic anoma.

180
00:09:45,879 --> 00:09:50,149
All of this has to be completed within
a tight latency pattern so that you can

181
00:09:50,639 --> 00:09:53,099
offer the end to end latency of subsecond.

182
00:09:53,129 --> 00:09:55,499
So all of this has to be done
in 10 to 20 milliseconds.

183
00:09:55,999 --> 00:09:58,549
Fraud detection models needs to
be deployed to multiple reasons.

184
00:09:58,549 --> 00:10:02,929
You can't just limit centralize all
the models and then have them pay the

185
00:10:02,929 --> 00:10:05,639
network cost of querying to get an answer.

186
00:10:05,639 --> 00:10:07,139
You need that to be deployed.

187
00:10:07,389 --> 00:10:10,839
It require, it, it creates its own
challenges because when you, again

188
00:10:10,839 --> 00:10:12,939
when we touch upon the distributed
catching, it's very similar.

189
00:10:12,939 --> 00:10:17,329
Like when you have distributed models
that are deployed, you need them to be,

190
00:10:17,329 --> 00:10:18,979
model versioning becomes a challenge.

191
00:10:19,099 --> 00:10:21,889
AB testing becomes a challenge,
and monitoring becomes a challenge.

192
00:10:22,589 --> 00:10:26,099
The platforms employ sophisticated
model serving infrastructure that can.

193
00:10:26,414 --> 00:10:29,204
Hot swap models without
disrupting traffic.

194
00:10:30,014 --> 00:10:31,214
Adaptive threat response.

195
00:10:31,724 --> 00:10:36,764
Again, another very important one, like
we need the platforms for payment to be

196
00:10:36,764 --> 00:10:38,774
able to adapt to the emerging threats.

197
00:10:38,834 --> 00:10:42,764
Like a lot of new things are happening,
there's when new attack pattern changes,

198
00:10:42,764 --> 00:10:44,504
platform need mechanism to detect.

199
00:10:45,004 --> 00:10:49,234
To update detection logic without code
employments we need that to be rule

200
00:10:49,234 --> 00:10:53,704
engine driven in, or ML driven in some
cases, to define the new fraud patterns

201
00:10:53,704 --> 00:10:55,264
using domain specific languages.

202
00:10:55,764 --> 00:10:59,484
The another important aspect
that that is not worth missing

203
00:10:59,484 --> 00:11:00,834
out is settlement and clearing.

204
00:11:00,884 --> 00:11:03,644
At the end transaction has to settle,
then the funds have to be transport

205
00:11:03,644 --> 00:11:07,374
and the transaction is called
as complete while authorization.

206
00:11:08,064 --> 00:11:09,354
This is part is slightly different.

207
00:11:09,354 --> 00:11:12,174
That authorization happens in
millisecond settlement actually

208
00:11:12,674 --> 00:11:14,474
happens at a different time scale.

209
00:11:14,974 --> 00:11:18,904
Many of the transition card networks
are looking, look to do the daily

210
00:11:18,904 --> 00:11:22,134
settlement, but sometimes, with the
new emerging realtime payment rates,

211
00:11:22,134 --> 00:11:25,134
they're looking for a more immediate
fund transfer and settlement.

212
00:11:25,794 --> 00:11:30,414
So that actually requires a very
sophisticated workflow or orchestration.

213
00:11:31,299 --> 00:11:34,149
Yes, transaction is processed
through multiple states.

214
00:11:34,159 --> 00:11:37,159
You need to do a sophisticated
state management to know at

215
00:11:37,159 --> 00:11:38,239
what state the transaction is.

216
00:11:38,239 --> 00:11:39,709
For example, we talked about it, right?

217
00:11:40,229 --> 00:11:41,639
The consistency that is important.

218
00:11:41,639 --> 00:11:45,029
We need the transition state
to be consistent across all

219
00:11:45,029 --> 00:11:47,489
the partners that you work with
and within our systems itself.

220
00:11:47,539 --> 00:11:49,609
So you need to maintain a
state, is it authorized, is it

221
00:11:49,609 --> 00:11:51,469
captured, is it batched submitted?

222
00:11:51,679 --> 00:11:52,144
Is it settled?

223
00:11:52,834 --> 00:11:56,014
And with different timing requirements
and need to understand the failure codes

224
00:11:56,044 --> 00:11:57,574
coming from the partners very well.

225
00:11:58,074 --> 00:12:00,789
The, another important and very
important aspect to be honest,

226
00:12:00,789 --> 00:12:02,229
is the cross-border complexity.

227
00:12:02,279 --> 00:12:04,959
When you are looking international
interaction then adds layers of

228
00:12:04,959 --> 00:12:09,159
complexity through currency conversion,
cross border fees, and it actually

229
00:12:09,159 --> 00:12:10,419
varies the settlement timelines.

230
00:12:10,959 --> 00:12:14,589
Platforms must integrate with
multiple currency exchanges, manage

231
00:12:14,589 --> 00:12:16,809
foreign, ex foreign exchange risk.

232
00:12:16,899 --> 00:12:19,209
Of course the foreign exchange
market moves really fast.

233
00:12:19,869 --> 00:12:23,529
The uninsured compliance with the
international money transfer regulations.

234
00:12:24,489 --> 00:12:27,669
Multicurrency settle requires
careful attention to timing.

235
00:12:27,769 --> 00:12:32,119
Exchange rate fluctuate continuously,
so transaction must lock in

236
00:12:32,119 --> 00:12:33,559
the rates as early as possible.

237
00:12:34,059 --> 00:12:37,329
That requires a very sophisticated
hedging strategies, especially when you're

238
00:12:37,329 --> 00:12:40,689
dealing with the currency movements and
maintain a relationship with liquidity

239
00:12:40,689 --> 00:12:43,329
providers, especially if you're trying
to process billions of transactions.

240
00:12:43,329 --> 00:12:46,389
You need that relationship with
multiple liquidity providers so that

241
00:12:46,389 --> 00:12:47,949
you can minimize the currency risk.

242
00:12:48,784 --> 00:12:52,064
Otherwise you are at the mercy of the
partners that you're working with and

243
00:12:52,064 --> 00:12:54,544
they could potentially charge you.

244
00:12:54,544 --> 00:12:57,254
And then you might actually be
looking at a very large bill.

245
00:12:57,754 --> 00:13:00,814
You need to be able to do the
reconciliation at scale, like millions of

246
00:13:00,814 --> 00:13:04,264
transactions or billions of transactions
flowing through multiple systems

247
00:13:04,264 --> 00:13:09,334
daily and rec reconciliation becomes
a very critical platform capability.

248
00:13:10,084 --> 00:13:13,654
Every transition must be tracked
through authorization to settlement.

249
00:13:14,224 --> 00:13:20,044
And with any discrepancy identified early
on and resolved quickly, that, and given

250
00:13:20,044 --> 00:13:22,854
the number of parties that are involved
in traction sometimes that requires

251
00:13:22,854 --> 00:13:26,484
quite a bit of work to walk through
each partners to ensure the traction

252
00:13:26,484 --> 00:13:28,254
is in good state across all partners.

253
00:13:28,504 --> 00:13:31,314
If the fund has been taken
out of a buyer's account.

254
00:13:31,814 --> 00:13:33,854
It needs to show in the same manner.

255
00:13:33,854 --> 00:13:36,254
And if it has not been, then
it should appear the same way.

256
00:13:36,254 --> 00:13:38,984
Otherwise, you are looking at a
series of work that can, that has

257
00:13:38,984 --> 00:13:42,104
to be done to, to actually try
to get the ion into a good state.

258
00:13:42,604 --> 00:13:46,434
So most system at this point aim for when
you're trying to deal with the planet.

259
00:13:46,434 --> 00:13:50,154
Scale size, is looking for a continuous
reconciliation versus traditional

260
00:13:50,154 --> 00:13:53,594
batch based reconciliation approach
that used to work work in past.

261
00:13:54,094 --> 00:13:54,724
Security.

262
00:13:54,774 --> 00:13:57,354
Another important aspect like like
I said, payment platform really

263
00:13:57,354 --> 00:14:00,594
pushes boundary in all aspect
of the, this distributed system.

264
00:14:01,204 --> 00:14:03,764
Security is one of the
most critical aspect of it.

265
00:14:04,714 --> 00:14:08,274
Payment platform represent high
value targets for cyber animals.

266
00:14:08,274 --> 00:14:09,264
This is money, right?

267
00:14:09,264 --> 00:14:12,354
We are talking about people are
looking for ways to steal money or

268
00:14:12,714 --> 00:14:15,684
trying to purchase things on behalf
of you so that they can enjoy the

269
00:14:15,684 --> 00:14:20,374
benefit while you bear the burnt of
the cost of the item that they bought.

270
00:14:21,154 --> 00:14:25,054
So it requires a very comprehensive
security architecture.

271
00:14:25,554 --> 00:14:29,244
Defense in depth strategies layer
multiple security controls that you

272
00:14:29,244 --> 00:14:30,534
need to be established and steering.

273
00:14:30,534 --> 00:14:33,474
The compromise of any single component
does not expose sensitive data.

274
00:14:33,974 --> 00:14:38,574
So that requires multiple things to
be achieved and done to ensure that

275
00:14:38,574 --> 00:14:39,954
we can offer in two end security.

276
00:14:39,954 --> 00:14:43,694
Here example is you need to be like,
we touched upon this earlier, like

277
00:14:43,694 --> 00:14:46,634
with service oriented architecture,
one of the key thing we can achieve

278
00:14:46,634 --> 00:14:48,374
is we can isolate critical systems.

279
00:14:48,874 --> 00:14:52,504
That actually ensures that when one system
is compromised, rest of the system is not.

280
00:14:53,104 --> 00:14:54,274
That becomes very important.

281
00:14:54,274 --> 00:14:59,634
Like when you're trying to, while
we, we had an attack if we are able

282
00:14:59,634 --> 00:15:03,744
to preserve the large part of the
components, we can recover the transaction

283
00:15:04,054 --> 00:15:05,374
because we have the data elsewhere.

284
00:15:05,404 --> 00:15:09,454
If everything is exposed then,
we are looking at something that

285
00:15:09,844 --> 00:15:11,074
cannot be potentially recovered.

286
00:15:11,574 --> 00:15:14,994
Hardware security modules, like
we need the sistant key storage

287
00:15:14,994 --> 00:15:16,734
and cryptographic operations.

288
00:15:16,734 --> 00:15:19,824
That becomes very important versus
a racial way of storing keys.

289
00:15:20,814 --> 00:15:25,554
We need every request to be authenticated
regardless of where it came from.

290
00:15:25,554 --> 00:15:30,084
Like we need to build components with
the principle in mind that it is a zero

291
00:15:30,084 --> 00:15:34,254
trust architecture, so everything has to
go through a proper security exchange.

292
00:15:34,914 --> 00:15:35,634
Tokenization.

293
00:15:35,684 --> 00:15:38,515
It's something that has started to
come out in the last five years.

294
00:15:38,515 --> 00:15:42,404
The networks are pushing for it, where
they want to move away from sensitive

295
00:15:42,404 --> 00:15:46,394
card numbers to a non sensitive tokens,
which, which can expire after some time.

296
00:15:46,894 --> 00:15:48,965
Key management like we
talked about it, right?

297
00:15:48,965 --> 00:15:51,664
I think because when there are multiple
third parties that are involved, you

298
00:15:51,664 --> 00:15:56,694
need to be able to communicate with
them by sharing your private keys

299
00:15:56,694 --> 00:15:57,984
and accessing their public keys.

300
00:15:58,284 --> 00:16:01,104
Managing cryptographic keys
across global platforms, that

301
00:16:01,104 --> 00:16:03,264
becomes quite a unique challenge.

302
00:16:03,654 --> 00:16:05,985
Keys need to be regulated
rotated regularly.

303
00:16:06,584 --> 00:16:10,035
It has to be distributed securely and made
available to thousands of servers without

304
00:16:10,035 --> 00:16:10,884
creating a single point of failures.

305
00:16:11,384 --> 00:16:14,384
They need to be able to handle
millions of key operations per

306
00:16:14,384 --> 00:16:17,535
second while maintaining audit trails
and enforcing security policies.

307
00:16:17,834 --> 00:16:20,414
Now this is very interesting,
not just this is for outside,

308
00:16:20,414 --> 00:16:21,584
but also for internally.

309
00:16:21,584 --> 00:16:27,125
Like when you're building a platform
you also don't want your internal

310
00:16:27,485 --> 00:16:33,275
users to be able to facilitate a
transition that was never authorized.

311
00:16:33,975 --> 00:16:38,435
We want a critical audit,
legs audit logs for them.

312
00:16:38,795 --> 00:16:42,335
We also want to ensure that, there is
enough checks and balances in place

313
00:16:42,335 --> 00:16:46,584
and controls in place so that we can
detect when there is an unauthorized

314
00:16:46,584 --> 00:16:49,465
activity even within the company, right?

315
00:16:49,469 --> 00:16:52,214
Even within this company that is
trying to build the payment platform.

316
00:16:53,114 --> 00:16:55,134
So modern sales platforms
employ hierarchical.

317
00:16:55,634 --> 00:16:59,774
Key management systems were master key
in hardware security module encrypt data

318
00:16:59,774 --> 00:17:01,634
encryption keys stored with the data.

319
00:17:02,384 --> 00:17:07,274
That approach has works very well because
it enables efficient key rotation only.

320
00:17:07,274 --> 00:17:10,994
Key encryption keys need updating rather
than re-encrypt vast amount of data.

321
00:17:11,494 --> 00:17:15,484
So sophisticated key derivation schemes
enable platforms to generate transition

322
00:17:15,484 --> 00:17:16,984
specific keys without storing them.

323
00:17:17,824 --> 00:17:20,524
It reduces the overall key
management, all that while maintaining

324
00:17:20,524 --> 00:17:21,994
strong security guarantees.

325
00:17:22,294 --> 00:17:26,424
The most important part again, as part
of any distributed system, but much

326
00:17:26,424 --> 00:17:31,514
more important for payment platform is
observability and monitoring at scale.

327
00:17:32,014 --> 00:17:35,704
Like observability is, payment
platforms extends beyond traditional

328
00:17:35,704 --> 00:17:37,444
metrics like, CPU and memory usage.

329
00:17:37,444 --> 00:17:40,774
You need to look at the business
metrics like authorization rates or like

330
00:17:40,774 --> 00:17:44,494
settlement success, rate for detection
accuracy, and you need to provide

331
00:17:44,494 --> 00:17:46,264
critical insights into the platform.

332
00:17:46,264 --> 00:17:51,244
Health platform must correlate technical
and business metrics to identify

333
00:17:51,244 --> 00:17:52,744
shoes before the impact projections.

334
00:17:52,744 --> 00:18:00,044
You need your system to be very,
very much set up in a way that it

335
00:18:00,044 --> 00:18:06,354
can detect issues very early on and
can pro proactively warn the users.

336
00:18:06,854 --> 00:18:10,154
Distributed tracing enables
engineers to follow individual

337
00:18:10,154 --> 00:18:12,104
projections across dozens of devices.

338
00:18:12,604 --> 00:18:14,644
Sampling becomes very critical at scale.

339
00:18:14,644 --> 00:18:18,364
Tracing every transactions would
overwhelm the monitoring system, so

340
00:18:18,364 --> 00:18:21,034
you need to be able to reject the
pattern and then highlight them.

341
00:18:21,884 --> 00:18:24,074
Adaptive sampling strategies
captured in updated identify

342
00:18:24,074 --> 00:18:25,424
issues while managing overhead

343
00:18:25,924 --> 00:18:28,564
incident response and zero down time.

344
00:18:28,564 --> 00:18:30,634
Operations when issues
occur in the payment system.

345
00:18:30,634 --> 00:18:32,284
Response time is very critical.

346
00:18:32,824 --> 00:18:35,974
We don't, because that's when
we look at it like, we touched

347
00:18:35,974 --> 00:18:37,054
upon this very early on.

348
00:18:37,054 --> 00:18:41,754
Each second is about $31,000
of money loss, right?

349
00:18:41,754 --> 00:18:44,624
For some of the business, if you
are down for five seconds or if

350
00:18:44,624 --> 00:18:45,794
you're down for five minutes.

351
00:18:46,584 --> 00:18:50,384
And if you're a payment gateway, for
example you are it could be for one

352
00:18:50,384 --> 00:18:51,974
nurse, for buyer who's trying to.

353
00:18:52,529 --> 00:18:54,629
Make a purchase, which can be critical.

354
00:18:54,629 --> 00:18:57,959
For example, if they're trying to pay
a medical bill to approve a medical,

355
00:18:58,209 --> 00:19:00,609
surgery can be very critical for them.

356
00:19:00,609 --> 00:19:05,259
Similarly, for merchants who are trying to
make money, it's possible that this was a

357
00:19:05,259 --> 00:19:10,149
holiday period, and then they want as much
revenue to be coming out in that period.

358
00:19:10,149 --> 00:19:12,969
And if you're down for five minutes,
you're actually looking for a very

359
00:19:12,969 --> 00:19:14,920
significant revenue loss for them.

360
00:19:15,420 --> 00:19:18,420
So if you issues happen, you
need to respond in a very,

361
00:19:19,155 --> 00:19:21,490
in, in a very timely manner.

362
00:19:21,990 --> 00:19:26,280
Incident response projects must
enable rapid diagnosis and remediation

363
00:19:26,280 --> 00:19:29,870
while ensuring that security and
compliance can be maintained.

364
00:19:30,860 --> 00:19:34,545
Unfortunately, chaos Engineering
ca is becoming a practice for.

365
00:19:34,945 --> 00:19:39,625
For payment platform because, you
need that muscle in engineers to be

366
00:19:39,625 --> 00:19:41,955
able to deal with with such scenarios.

367
00:19:42,215 --> 00:19:47,465
Often the payment platform actually
test themselves by intern Internation,

368
00:19:47,524 --> 00:19:52,235
intentionally introducing failures
in controlled environments so that

369
00:19:52,235 --> 00:19:55,445
we can identify the weakness ahead
of time and before they start

370
00:19:55,445 --> 00:19:56,285
to show up in the production.

371
00:19:56,785 --> 00:20:00,775
When we look at the future, like the car
processing has been around it's growing

372
00:20:00,775 --> 00:20:04,385
well, but we are seeing a lot of change,
future directions and emerging challenges.

373
00:20:04,745 --> 00:20:07,765
We are seeing an emergent
of realtime payment rails.

374
00:20:07,845 --> 00:20:11,385
Shifting from the batch to realtime
settlement fundamentally changes the

375
00:20:11,385 --> 00:20:12,825
platform architecture requirements.

376
00:20:13,325 --> 00:20:16,845
System designed for daily, which must
need to evolve to handle continuous

377
00:20:16,845 --> 00:20:19,515
settlement while maintaining
the same reliability guarantees

378
00:20:19,515 --> 00:20:20,895
that is a hard problem to solve.

379
00:20:21,395 --> 00:20:26,900
Other one is that, with the open banking
regulations platforms are forced to expose

380
00:20:26,900 --> 00:20:28,820
their APIs, which were earlier internal.

381
00:20:29,090 --> 00:20:33,110
That creates another storing scary
scaling challenges is third party or

382
00:20:33,110 --> 00:20:36,410
developers build application that can
generate unpredictable traffic patterns.

383
00:20:36,470 --> 00:20:38,030
That also exposes overall risk.

384
00:20:38,530 --> 00:20:39,460
Cryptocurrency integration.

385
00:20:39,460 --> 00:20:41,230
Of course the cryptocurrency is rising.

386
00:20:41,230 --> 00:20:42,310
Everybody's aware of it.

387
00:20:42,310 --> 00:20:46,770
There's more and more traction that
is happening through stable coins now

388
00:20:46,820 --> 00:20:48,470
and then typical cryptocurrencies.

389
00:20:48,920 --> 00:20:52,730
So as they gain mainstream adoption
and central banks explore these digital

390
00:20:52,820 --> 00:20:56,300
currencies, payment platform needs to
evolve to these new payment methods

391
00:20:56,360 --> 00:20:58,305
to operate on different principal
than traditional payment rails.

392
00:20:58,555 --> 00:21:01,885
Overall platform engineers must
design system that can bridge between

393
00:21:01,885 --> 00:21:04,675
the traditional and blockchain
based systems while maintaining

394
00:21:04,675 --> 00:21:05,935
consistent user experience.

395
00:21:05,935 --> 00:21:08,785
Because at the end, like for
user, all of these are currencies.

396
00:21:08,785 --> 00:21:11,745
They don't differentiate they don't
expect a different experience when you're

397
00:21:11,745 --> 00:21:16,815
trying to buy, using a cryptocurrency or a
stable coin or digital currency or using a

398
00:21:16,815 --> 00:21:21,305
traditional currencies they expect a very
similar outcome in a very similar manner.

399
00:21:21,805 --> 00:21:25,495
With crypto becomes harder
because you need to handle the

400
00:21:25,495 --> 00:21:27,055
volatility of cryptocurrencies.

401
00:21:27,715 --> 00:21:31,385
You have a very different wallet
infrastructure and then you need to deal

402
00:21:31,385 --> 00:21:33,875
with the evolving compliance regulations.

403
00:21:34,375 --> 00:21:36,265
I think those were all the things.

404
00:21:36,265 --> 00:21:40,615
Let me conclude building plan scale
payment platforms requires, mastering

405
00:21:40,615 --> 00:21:45,235
numerous technical disciplines
while maintaining a focus on

406
00:21:45,235 --> 00:21:47,065
reliability, security and performance.

407
00:21:47,815 --> 00:21:48,955
Reliability is paramount.

408
00:21:48,955 --> 00:21:49,975
Security is paramount.

409
00:21:49,975 --> 00:21:51,295
Performance is very important.

410
00:21:52,135 --> 00:21:54,835
The architectures and
patterns discussed represents.

411
00:21:55,335 --> 00:21:56,745
Years of evolution, right?

412
00:21:56,785 --> 00:21:59,365
The card system had been around for
some time, even before the traditional

413
00:21:59,365 --> 00:22:00,535
payment system had been around.

414
00:22:00,805 --> 00:22:03,415
They evolved, like security
probably came first.

415
00:22:03,970 --> 00:22:06,820
Reliability came second, and then
performance keeps getting better where

416
00:22:06,820 --> 00:22:11,490
we are, moving from, typical time of
taking a couple of days or three days

417
00:22:11,490 --> 00:22:16,370
or a week for a traction to settle to
settle the traction within a second.

418
00:22:16,620 --> 00:22:19,330
The platform engineers who are actually
trying to work in this space, I would

419
00:22:19,330 --> 00:22:23,350
say the challenges are immense, but
then they come as an opportunities.

420
00:22:23,979 --> 00:22:26,709
As payment methods continue to
evolve, transactions volume, grow,

421
00:22:26,770 --> 00:22:29,499
the need of innovative solutions
becomes even more critical.

422
00:22:29,499 --> 00:22:31,599
That, that, that is where
the engineers shine.

423
00:22:32,329 --> 00:22:36,169
The next generation of payment platform
will need even more resilient, scalable,

424
00:22:36,169 --> 00:22:37,759
and adaptable than today systems.

425
00:22:38,239 --> 00:22:40,549
Especially when we look at
the emergence of ai, right?

426
00:22:40,549 --> 00:22:41,929
I think AI in the hand of.

427
00:22:42,464 --> 00:22:45,854
The people who are trying to create
chaos in the payment system, especially

428
00:22:45,854 --> 00:22:50,564
trying to create vulnera, look at
the vulnerabilities that security,

429
00:22:51,104 --> 00:22:56,814
reliability, performance, all the aspect
will be challenged in this evolving world.

430
00:22:57,314 --> 00:23:00,584
The payment industry is, stands at an
inflection point, like real time payment

431
00:23:00,584 --> 00:23:02,804
systems, open banking, digital currencies.

432
00:23:02,855 --> 00:23:06,004
They promise to transform how
moves money moves globally.

433
00:23:06,875 --> 00:23:11,905
So platform engineers who understand
both what has worked well so far in

434
00:23:11,905 --> 00:23:15,505
the payment platform or mini movement
platform and understand the emerging

435
00:23:15,505 --> 00:23:19,625
trends will be in a best position to
build the financial infrastructure

436
00:23:19,625 --> 00:23:20,675
that is needed for tomorrow.

437
00:23:21,425 --> 00:23:24,365
The challenges are significant and,
for those who are willing to tackle

438
00:23:24,365 --> 00:23:28,534
them, opportunity to impact global
commerce has never been greater.

439
00:23:29,034 --> 00:23:31,314
With that all, I want to thank
you all for listening to me.

440
00:23:31,364 --> 00:23:32,354
Appreciate the time.

441
00:23:32,925 --> 00:23:33,495
Thank you.

442
00:23:33,495 --> 00:23:33,975
Bye.

