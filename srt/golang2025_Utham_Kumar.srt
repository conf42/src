1
00:00:00,630 --> 00:00:05,010
Hello everyone, and welcome to my
presentation on building robust

2
00:00:05,070 --> 00:00:08,400
V two X communication networks
in go scaling connected vehicle

3
00:00:08,400 --> 00:00:09,690
systems for urban mobility.

4
00:00:10,320 --> 00:00:14,040
My name is Otam Kumar and I'm
excited to show how Golan often

5
00:00:14,040 --> 00:00:18,300
called go with its concurrency model
and cloud native microservices as

6
00:00:18,300 --> 00:00:22,470
pioneering safe, intelligent, and
high throughput urban mobility.

7
00:00:22,970 --> 00:00:26,599
Over the next few minutes, we'll explore
how connected vehicle systems leverage

8
00:00:26,599 --> 00:00:30,560
go to enhance vehicle to everything
communication, leading to more efficient

9
00:00:30,590 --> 00:00:35,510
traffic flow, improved safety, and truly
transformative results for modern cities.

10
00:00:36,010 --> 00:00:39,430
Before we jump onto the technical
deep dive, here is a quick

11
00:00:39,430 --> 00:00:40,870
introduction to my background.

12
00:00:41,370 --> 00:00:45,300
I spent over 20 years working on
program and product management as well

13
00:00:45,300 --> 00:00:47,130
as end-to-end technology solutions.

14
00:00:47,310 --> 00:00:52,770
My master's in engineering comes from
technological university and I'm also

15
00:00:53,040 --> 00:00:58,500
a project management professional with
advanced sales scale Agile certifications.

16
00:00:59,000 --> 00:01:04,879
In my role at major enterprises like
Visa, T-Mobile, Verizon, Lenovo, and IBM,

17
00:01:04,879 --> 00:01:06,440
I have seen how crucial innovation is.

18
00:01:07,324 --> 00:01:11,495
For scaling global platforms, especially
in the realm of connected vehicle systems.

19
00:01:11,995 --> 00:01:16,075
Recently, I've also been leveraging
generative AI to accelerate product

20
00:01:16,075 --> 00:01:17,905
delivery and optimize operations.

21
00:01:18,145 --> 00:01:22,895
My global experience across the us,
India, Japan, Singapore, has shaped

22
00:01:22,895 --> 00:01:25,715
my approach to building robust,
scalable solutions that meet the

23
00:01:25,715 --> 00:01:27,575
unique challenges of different markets.

24
00:01:28,075 --> 00:01:33,175
Now let's talk about our focus
for this section focusing on

25
00:01:33,175 --> 00:01:35,395
how go Powers V two X solutions.

26
00:01:35,935 --> 00:01:40,735
Firstly, we'll explore ghost
concurrency model and perform suit

27
00:01:41,005 --> 00:01:44,815
performance suit the high throughput
demands of connected vehicle systems.

28
00:01:45,145 --> 00:01:48,595
Next, we'll discuss how pilot deployments
of go based collision provision services

29
00:01:48,595 --> 00:01:55,425
have shown up to and, shown up to
reduce up to 40% in crash reduction.

30
00:01:56,265 --> 00:02:00,195
We'll then examine scalable intersection
management in the cloud, processing

31
00:02:00,315 --> 00:02:04,515
thousands of vehicle interactions per
second to cut conditions and emissions.

32
00:02:05,025 --> 00:02:06,435
Finally, we'll discuss DevOps.

33
00:02:06,435 --> 00:02:11,445
Best practice on how ghost concurrency
patterns ensure fault tolerant

34
00:02:11,475 --> 00:02:13,155
continuously deploy services at scale.

35
00:02:13,655 --> 00:02:17,435
Let's start by defining
V two X communication.

36
00:02:18,005 --> 00:02:22,535
Now, V two X, like everyone knows,
stands for vehicle to everything.

37
00:02:22,595 --> 00:02:25,965
It compasses, vehicle to vehicle to
infrastructure, vehicle to pedestrian

38
00:02:26,415 --> 00:02:27,765
everything, vehicle to everything.

39
00:02:27,765 --> 00:02:28,395
Communication.

40
00:02:29,235 --> 00:02:32,475
Essentially, it's about creating
a unified network where vehicles,

41
00:02:32,660 --> 00:02:36,795
road infrastructure, and even
pedestrians can communicate seamlessly.

42
00:02:37,665 --> 00:02:39,165
Now the impact is significant.

43
00:02:39,195 --> 00:02:42,615
V two X can reduce collections about
a 40 percentage, improve traffic

44
00:02:42,615 --> 00:02:46,785
flow by 30 percentage and even more
in certain markets, and accelerate

45
00:02:46,845 --> 00:02:49,575
emerging response times by 40
percentage, which is very crucial.

46
00:02:50,075 --> 00:02:52,775
As for market growth, we
are seeing around at least.

47
00:02:53,225 --> 00:02:56,945
Around 18 percentage of CAGR globally
with predictions that over half a

48
00:02:56,945 --> 00:03:00,635
new half of all the new vehicles will
have V two X capabilities by 2030.

49
00:03:01,415 --> 00:03:03,905
Now that's a massive opportunity
for anyone building or

50
00:03:03,905 --> 00:03:05,405
adopting V two X solutions.

51
00:03:05,905 --> 00:03:11,485
Now let's look at why go Language
is such a powerful choice for

52
00:03:11,515 --> 00:03:14,140
V two X. Communication systems.

53
00:03:14,800 --> 00:03:19,570
Now GOs concurrency model is built
around go routines, lightweight threads

54
00:03:19,570 --> 00:03:22,750
that can handle thousands or even
millions of simultaneous connections

55
00:03:23,140 --> 00:03:25,990
with minimal overhead channels.

56
00:03:25,990 --> 00:03:29,440
Provide a safe mechanism to pass
data between these core routines,

57
00:03:29,590 --> 00:03:33,160
preventing race conditions, which
is critical when multiple vehicles

58
00:03:33,160 --> 00:03:34,690
share the time sensitive data.

59
00:03:35,530 --> 00:03:39,610
This leads to a highly parallel
event processing perfect for reading

60
00:03:39,610 --> 00:03:43,270
sensor data from numerous vehicles
in real time, whether for collision

61
00:03:43,270 --> 00:03:47,535
avoidance or dynamic routing, so
on and In addition to concurrency

62
00:03:47,535 --> 00:03:50,595
go brings us topnotch performance.

63
00:03:51,075 --> 00:03:54,135
Oh, let me dive into a
little bit depth there.

64
00:03:54,615 --> 00:04:00,195
Low latency go's runtime is optimized for
near instance startup times and minimal

65
00:04:00,195 --> 00:04:04,155
latency, which is vital when dealing with
such kind of a safety related vehicle

66
00:04:04,155 --> 00:04:05,986
operations, which is very important.

67
00:04:06,895 --> 00:04:12,595
Now memory footprint, go routines use far
less memory than traditional OS threats.

68
00:04:13,165 --> 00:04:15,864
Making them ideal for high
connection counts in edge

69
00:04:15,864 --> 00:04:17,245
devices or embedded systems.

70
00:04:17,274 --> 00:04:22,015
Now it's obvious why we'll need that
profiling and optimization tools,

71
00:04:22,135 --> 00:04:26,275
those like PP prof and tracing healthy,
constantly fine tuned performance,

72
00:04:26,275 --> 00:04:30,865
identifying bottlenecks in real time
so that you can deliver the fastest

73
00:04:30,865 --> 00:04:32,875
possible response for V two X events.

74
00:04:33,205 --> 00:04:34,525
And everyone understands why.

75
00:04:35,025 --> 00:04:38,534
Further to that, just on my
previous, slide, let's look at some

76
00:04:38,534 --> 00:04:42,405
performance benchmarks now, under
a hundred million tron a hundred

77
00:04:42,405 --> 00:04:45,645
milliseconds, end-to-end latency is
critical for collision avoidance.

78
00:04:46,395 --> 00:04:50,025
Now you need this because you
need a near instant reaction time.

79
00:04:50,525 --> 00:04:55,145
And sustainability sustained
500,000 plus messages per second.

80
00:04:55,145 --> 00:04:59,554
Throughput handles the highest volume
of data from sensors like GPS modules,

81
00:04:59,554 --> 00:05:01,385
traffic signals, so on and so forth.

82
00:05:01,804 --> 00:05:05,765
99.99% uptime achieved via
circuit breakers and fall tolerant

83
00:05:05,765 --> 00:05:07,624
architecture and safety critical apps.

84
00:05:07,655 --> 00:05:10,715
High availability is a run mandatory must.

85
00:05:11,195 --> 00:05:14,314
25 percentage of personal performance
gain was achieved through iterative

86
00:05:14,314 --> 00:05:18,275
tuning with goals, profiling tools showing
how continuous optimization pays off.

87
00:05:18,775 --> 00:05:22,765
These figures demonstrate go's
ability to deliver on the rigorous

88
00:05:22,765 --> 00:05:27,614
demands of V two X. Now, let's
go on to some more advantages.

89
00:05:27,974 --> 00:05:33,354
Another key advantage that is go's robust
standard library now networking and

90
00:05:33,354 --> 00:05:36,925
cryptography, inbuilt packages making
soccer programming straightforward, and

91
00:05:36,925 --> 00:05:40,224
the crypto libraries handle encrypted,
authenticated directions between vehicles.

92
00:05:40,724 --> 00:05:43,770
Crucial for V two security,
http, json, et cetera.

93
00:05:43,950 --> 00:05:44,160
Go.

94
00:05:44,160 --> 00:05:48,960
Standard library supports common web
protocols and data encoding outta the box.

95
00:05:49,200 --> 00:05:52,620
This is essential for over the
air updates, telemetry, APIs, or

96
00:05:52,680 --> 00:05:54,360
communication with cloud services.

97
00:05:55,080 --> 00:05:58,320
Now, this out of the box supports
speeds up development timelines

98
00:05:59,070 --> 00:06:02,490
and ensures consistent secure data
handling across V two X networks.

99
00:06:03,120 --> 00:06:06,960
That's one of the major things in
current vehicle to vehicle communication.

100
00:06:07,460 --> 00:06:09,890
Let's see what these
features mean in practice.

101
00:06:09,890 --> 00:06:13,760
go's, real world capabilities,
high throughput concurrency, go's

102
00:06:13,760 --> 00:06:17,120
go routines handle thousands of
vehicle interactions in real time.

103
00:06:17,180 --> 00:06:19,010
Crucial for traffic optimization.

104
00:06:19,400 --> 00:06:23,180
Mission critical microservices
pilot deployment show up to 40%

105
00:06:23,180 --> 00:06:26,345
crash reductions in collision
prevention systems built with Go.

106
00:06:27,200 --> 00:06:30,919
Cloud native scalability goes
lightweight threads and network

107
00:06:30,919 --> 00:06:35,240
libraries scale horizontally on container
orchestration platforms like Kubernetes,

108
00:06:35,740 --> 00:06:38,110
DevOps, and resilience goes fast.

109
00:06:38,110 --> 00:06:42,880
Built-in foster continuous delivery,
ensuring quick rollouts of new safety

110
00:06:42,880 --> 00:06:45,670
features, IOT and edge compatibility.

111
00:06:46,090 --> 00:06:49,540
This is very crucial because minimal
overhead means core runs efficiently on

112
00:06:49,540 --> 00:06:53,590
distributed edge nodes, which is critical
for real-time data processing in vehicles.

113
00:06:54,090 --> 00:06:57,090
Now it's very clear why these
capabilities combine to create a powerful

114
00:06:57,090 --> 00:06:59,160
foundation for any V two X installation.

115
00:06:59,660 --> 00:07:00,440
Let me move on.

116
00:07:00,940 --> 00:07:04,420
Here's a high level view of how go
fits into the V two X architecture.

117
00:07:04,990 --> 00:07:08,740
You have key components, like for example,
you have the API Gateways for secure

118
00:07:08,740 --> 00:07:14,020
vehicle telemetry, ingestion, real-time
messaging, example, NAS Kafka, MQTT

119
00:07:14,410 --> 00:07:18,550
to handle data streams and specialized
analyticals and decision services for

120
00:07:18,550 --> 00:07:20,105
collision detection or root optimization.

121
00:07:20,605 --> 00:07:23,035
Scalability patterns
deployed on Kubernetes.

122
00:07:23,035 --> 00:07:25,495
These go microservices
can scale elastically.

123
00:07:25,795 --> 00:07:29,215
Automated CI ICD pipelines and Canada
releases ensure zero downtime when

124
00:07:29,215 --> 00:07:33,085
rolling out updates, data flows,
vehicles send data to an H stone

125
00:07:33,085 --> 00:07:36,025
running on goal-based processing, which
communicates with cloud microservices.

126
00:07:36,325 --> 00:07:38,665
The system then aggregates,
analyzes, and sends back.

127
00:07:38,665 --> 00:07:39,775
The instructions are used in order.

128
00:07:40,275 --> 00:07:42,735
We are talking about horizontal
scaling that can handle up to

129
00:07:42,735 --> 00:07:44,715
600,000 messages per second.

130
00:07:44,715 --> 00:07:48,285
Delivering the real time
responsiveness demanded by modern

131
00:07:48,285 --> 00:07:50,355
cities, that's pretty huge.

132
00:07:50,855 --> 00:07:55,235
Moving on beyond raw performance,
developer productive results, a

133
00:07:55,235 --> 00:07:57,670
major benefit, and if we can see why.

134
00:07:57,970 --> 00:08:01,870
Simple syntax goes minimalistic
approach and built in GO FMT

135
00:08:01,870 --> 00:08:05,200
results in uniform code style,
fewer errors and quicker onboarding.

136
00:08:05,800 --> 00:08:06,850
Now that's very important.

137
00:08:07,210 --> 00:08:08,020
Static typing.

138
00:08:08,020 --> 00:08:13,090
Scopic collection balances type safety
with modern memory management, making

139
00:08:13,090 --> 00:08:15,550
code more robust for large projects.

140
00:08:16,395 --> 00:08:17,235
Fast compilation.

141
00:08:17,265 --> 00:08:21,105
GoPro uses small binary quickly,
which is invaluable when deploying to

142
00:08:21,105 --> 00:08:23,325
vehicles or resource country edge nodes.

143
00:08:23,825 --> 00:08:27,785
Now this means fast ations, fewer
bugs, and a more efficient development

144
00:08:27,785 --> 00:08:31,595
cycle overall, which is a dream for
any software development company.

145
00:08:32,095 --> 00:08:32,965
Let me move on.

146
00:08:33,465 --> 00:08:35,175
Security and privacy.

147
00:08:35,745 --> 00:08:38,865
No security is non-negotiable
in connected vehicles.

148
00:08:38,985 --> 00:08:39,375
And go.

149
00:08:39,435 --> 00:08:41,865
As you covered multi-layer encryption.

150
00:08:41,865 --> 00:08:45,795
Go steel LS, tax, secures,
transmissions, ephemeral key rotation,

151
00:08:45,795 --> 00:08:49,845
proven replay attacks, advanced
cryptography, elliptic curve, and.

152
00:08:49,905 --> 00:08:52,455
Post Quantum protocols are
actively developed in the GO

153
00:08:52,455 --> 00:08:54,915
Community simplified concurrency.

154
00:08:54,915 --> 00:08:59,115
Because Go concurrency is built in, you're
less likely to introduce multi-threaded

155
00:08:59,115 --> 00:09:04,755
security flaws ensures go crypto libraries
and concurrency model aligned with

156
00:09:04,755 --> 00:09:08,715
the high security standards required
for connected automotive ecosystems.

157
00:09:09,215 --> 00:09:13,025
Another huge place is grows
growing community and ecosystem.

158
00:09:13,460 --> 00:09:17,210
Now you'll find abundant open source
libraries for realtime streaming messages,

159
00:09:17,210 --> 00:09:21,440
queues and IOD integration Frameworks
now accelerate that AC accelerates

160
00:09:21,440 --> 00:09:22,850
your video X development process.

161
00:09:23,270 --> 00:09:26,480
The active developer support means
security patches new libraries

162
00:09:26,480 --> 00:09:29,450
when best practice are updated
regularly, ensuring the ecosystem

163
00:09:29,450 --> 00:09:31,040
stays healthy and future proof.

164
00:09:31,540 --> 00:09:34,960
Now this collaborative environment can
significantly cut down on development

165
00:09:34,960 --> 00:09:38,800
time and risk, which is very important
for any B two X communication systems

166
00:09:38,920 --> 00:09:41,650
just like any other high priority systems.

167
00:09:42,150 --> 00:09:45,990
Now let's see some ideal vehicle to
vehicle or way two x communication

168
00:09:45,990 --> 00:09:50,010
use cases where go really shines
real time data ingestion, handling

169
00:09:50,010 --> 00:09:53,185
sensor streams from and GPS data
from multiple vehicle simultaneously

170
00:09:53,495 --> 00:09:55,225
with no bottleneck whatsoever.

171
00:09:56,085 --> 00:09:59,355
Collision prevent and safety
distributor algorithms running in

172
00:09:59,355 --> 00:10:02,445
parallel to exchange situational
awareness and trigger avoidance,

173
00:10:02,445 --> 00:10:04,935
manual telemetry and diagnostics.

174
00:10:05,235 --> 00:10:07,785
Collect engine hardware,
software metrics, and security.

175
00:10:07,785 --> 00:10:10,170
Transport them to cloud or
IT service for analysis.

176
00:10:11,010 --> 00:10:12,175
Which is very crucial.

177
00:10:12,685 --> 00:10:16,285
Integration with infrastructure seamlessly
connected through roadside units.

178
00:10:16,285 --> 00:10:18,745
Our traffic management centers
enabling advanced traffic

179
00:10:18,745 --> 00:10:20,515
optimizations and coordinated driving.

180
00:10:21,015 --> 00:10:21,915
These scenarios.

181
00:10:21,975 --> 00:10:24,675
Highlight goals, high concurrency,
security, and lightweight

182
00:10:24,675 --> 00:10:28,440
approach exactly what you need
for a perfect V two X system.

183
00:10:28,940 --> 00:10:32,040
Moving on, here are the key takeaways.

184
00:10:32,060 --> 00:10:34,240
If you're considering go for
your B two X communication.

185
00:10:34,965 --> 00:10:40,185
One High concurrency for realtime
data processing simplicity that leads

186
00:10:40,185 --> 00:10:42,405
to rapid development and fewer bugs.

187
00:10:43,065 --> 00:10:43,545
Security.

188
00:10:44,055 --> 00:10:47,205
Security stands why integrated
cryptographic libraries.

189
00:10:47,655 --> 00:10:49,785
Exceptional performance under heavy load.

190
00:10:50,145 --> 00:10:52,245
Ideal for safety critical systems.

191
00:10:52,745 --> 00:10:58,205
These four points, some Y go stands out
as a top contender for building robust,

192
00:10:58,295 --> 00:11:00,965
scalable, and secure V two X networks.

193
00:11:01,465 --> 00:11:05,305
Now that wraps up our journey
into building robust V two X

194
00:11:05,305 --> 00:11:06,715
communication networks in Go.

195
00:11:07,215 --> 00:11:08,655
Thank you so much for joining me today.

196
00:11:08,775 --> 00:11:11,385
I hope this session gives you
a clear picture of how ghost

197
00:11:11,385 --> 00:11:14,745
concurrency model and cloud native
approach can elevate connected

198
00:11:14,955 --> 00:11:16,695
vehicle systems for urban mobility.

199
00:11:17,195 --> 00:11:20,045
If you have any questions about
implementing goin V two X or you'd

200
00:11:20,045 --> 00:11:23,525
like more in-depth technical resources,
please feel free to reach out.

201
00:11:24,485 --> 00:11:26,795
Thank you once again for your
time and I look forward to

202
00:11:26,795 --> 00:11:27,935
continuing the conversation.

203
00:11:28,745 --> 00:11:29,615
Thank you very much.

