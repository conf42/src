1
00:00:00,340 --> 00:00:04,950
Hi, my name is Daniel and I'm glad
to introduce you my talk on how to

2
00:00:04,980 --> 00:00:10,440
migrate from monolith to microservices,
a guide to seamless transitions.

3
00:00:10,940 --> 00:00:14,980
Today we're going to
talk through five parts.

4
00:00:15,940 --> 00:00:19,050
The first one is the
architecture of the overview.

5
00:00:19,430 --> 00:00:26,340
We're going to briefly describe,
the benefits, of microservices

6
00:00:26,390 --> 00:00:30,760
architecture and disadvantages
of the monolith architecture.

7
00:00:31,020 --> 00:00:37,320
We will talk on how to choose
the best architecture for

8
00:00:37,320 --> 00:00:39,000
your system, for your case.

9
00:00:39,890 --> 00:00:47,215
Then we're going to discuss on how
it is related to high loads and how

10
00:00:47,215 --> 00:00:53,605
to connect microservices and high
loads and how to split a large system

11
00:00:53,675 --> 00:00:57,575
into separate smaller microservices.

12
00:00:58,265 --> 00:01:04,265
Then, when we know how it is related
to high loads and, we will going to

13
00:01:05,140 --> 00:01:08,110
design to talk about design for failure.

14
00:01:08,550 --> 00:01:13,240
we're going to discuss what it is
and how it's useful for our purpose.

15
00:01:13,740 --> 00:01:20,930
After that, we will go through main
challenges and we'll also talk about the

16
00:01:20,940 --> 00:01:22,920
solution for this, for these challenges.

17
00:01:23,420 --> 00:01:29,020
We'll describe the problems that can
occur during your transition and what

18
00:01:29,020 --> 00:01:31,990
are the main approaches for them.

19
00:01:32,840 --> 00:01:33,760
to handle them.

20
00:01:34,700 --> 00:01:41,630
And in the end, we will take everything
all together and, see how we can apply

21
00:01:41,720 --> 00:01:44,880
our knowledge on real practical examples.

22
00:01:45,380 --> 00:01:49,670
the first thing is, what
is a software architecture?

23
00:01:50,170 --> 00:01:56,120
you can go through many books and
websites and find many different

24
00:01:56,180 --> 00:01:58,150
definitions for software architecture.

25
00:01:58,600 --> 00:02:03,340
But the one that I'd like to, share
with others and stick with me is,

26
00:02:03,790 --> 00:02:09,460
It is a method for documenting
decisions made for the implementation

27
00:02:09,560 --> 00:02:10,940
of an information system.

28
00:02:11,440 --> 00:02:16,940
decisions are presented as a
connection between several components.

29
00:02:17,890 --> 00:02:23,590
And one of the most important thing
is that architecture is always

30
00:02:23,590 --> 00:02:25,510
considered from different perspectives.

31
00:02:25,710 --> 00:02:31,840
You can, come up with different
frameworks, for example, UML, when

32
00:02:31,840 --> 00:02:36,270
you can, look or describe software
architecture from different perspective.

33
00:02:36,280 --> 00:02:41,820
For example, you can create sequence
diagrams to describe the behavior of

34
00:02:41,820 --> 00:02:49,310
your system, or you can create use case
diagrams to show which, in which way

35
00:02:49,310 --> 00:02:52,020
your system can be used and et cetera.

36
00:02:52,520 --> 00:03:00,070
as a separate type of architecture,
we can, name monolithic architecture.

37
00:03:01,070 --> 00:03:07,770
And of course, there are many other
types, but we're not going to, look

38
00:03:07,770 --> 00:03:13,980
at them today because it's a very,
large topic and, we're not going

39
00:03:13,980 --> 00:03:16,950
to cover In our talk and, okay.

40
00:03:17,090 --> 00:03:18,720
Talking about monolithic architecture.

41
00:03:19,700 --> 00:03:23,230
as many of you already know,
monolithic architecture is when

42
00:03:23,230 --> 00:03:26,560
you have a large piece of software.

43
00:03:27,140 --> 00:03:30,610
And of course, it's simpler
for your development.

44
00:03:31,120 --> 00:03:34,390
It's very easy to deploy on servers.

45
00:03:34,890 --> 00:03:38,750
And usually it has great performance.

46
00:03:39,455 --> 00:03:43,405
And, it's easy to manage
from all perspectives.

47
00:03:44,275 --> 00:03:50,535
But when I was working at the world's
largest social network, my domain,

48
00:03:50,555 --> 00:03:54,905
my main domain was the authentication
and the authorization systems.

49
00:03:55,445 --> 00:04:03,795
And when the, amount and when We
have more than 500 developers.

50
00:04:04,305 --> 00:04:13,985
Then it was almost impossible to,
deploy some fixes, new code, and you

51
00:04:13,985 --> 00:04:20,945
have, I had to wait for more than
several days to have my code deployed.

52
00:04:21,935 --> 00:04:26,235
So of course it presents
different scalability issues.

53
00:04:26,635 --> 00:04:32,435
You cannot like simply copy,
one, large piece of software,

54
00:04:32,865 --> 00:04:39,235
because if one component fails,
then the whole system fails.

55
00:04:39,625 --> 00:04:45,595
So it is tightly related to
coupling between your components.

56
00:04:46,095 --> 00:04:52,105
of course, deployment risks, as I've
mentioned before, we had more than

57
00:04:52,105 --> 00:05:03,145
500 developers and when one of them,
had an error or some bug in, in his

58
00:05:03,145 --> 00:05:09,445
code, then, the whole, we call them
so called trains, with comets, the

59
00:05:09,445 --> 00:05:13,245
whole train was a total failure.

60
00:05:13,255 --> 00:05:14,825
So we had to roll back it.

61
00:05:15,325 --> 00:05:15,795
Okay.

62
00:05:16,295 --> 00:05:21,070
I'm going to a much better approach
microservices architecture.

63
00:05:21,570 --> 00:05:28,020
It divides your large piece
of software into smaller and

64
00:05:28,050 --> 00:05:32,460
loosely coupled microservices
that are deployed independently.

65
00:05:33,280 --> 00:05:41,530
And of course, when you talk about its
benefits, you don't have such problem as,

66
00:05:42,090 --> 00:05:49,020
complex deployment or, tightly
coupled components, you have

67
00:05:49,090 --> 00:05:53,820
other problems that come up when
you use Microsoft's architecture.

68
00:05:53,840 --> 00:05:59,350
For example, the whole
system costs more for you.

69
00:05:59,700 --> 00:06:02,650
It's, it is more complex.

70
00:06:02,700 --> 00:06:11,430
So you have to find, more SRE engineers
for your company, for your team to handle

71
00:06:11,520 --> 00:06:13,610
the infrastructure for your microservices.

72
00:06:13,610 --> 00:06:21,720
The software you use is more complex.

73
00:06:21,720 --> 00:06:28,100
For example, in almost every
microservices architecture that

74
00:06:28,100 --> 00:06:30,770
I've worked with, we had Kubernetes.

75
00:06:31,270 --> 00:06:37,350
And, it's if team is not ready for
to work with such tools, it will be

76
00:06:37,360 --> 00:06:40,250
a bit painful for you to migrate.

77
00:06:40,750 --> 00:06:48,239
So we know the benefits and disadvantages
of both types of architecture.

78
00:06:48,239 --> 00:06:49,749
so let's.

79
00:06:50,230 --> 00:06:55,430
describe the use cases when microservices
architecture might be a better choice.

80
00:06:56,400 --> 00:07:01,510
So when you have to scale your
system, when your system is becoming

81
00:07:01,510 --> 00:07:08,280
more complex and always evolving,
as an example, a social network, it

82
00:07:08,280 --> 00:07:11,370
is all, it always receives updates.

83
00:07:12,075 --> 00:07:18,535
when you have to deploy and develop,
some applications independently,

84
00:07:19,315 --> 00:07:21,025
microservices is a great choice.

85
00:07:21,525 --> 00:07:25,735
Also, it is tightly connected
with the team structure and

86
00:07:25,735 --> 00:07:28,675
ownership in monolith applications.

87
00:07:29,085 --> 00:07:35,905
It is usually hard to, separate one
component from another and to divide it.

88
00:07:35,925 --> 00:07:41,835
for different teams to use the other
use cases when you have a, when you

89
00:07:41,845 --> 00:07:46,465
have technology diversity, for example,
you have one microservices written

90
00:07:46,515 --> 00:07:49,635
in Golang and the other in Java.

91
00:07:50,065 --> 00:07:52,275
So microservices.

92
00:07:52,775 --> 00:07:56,825
architecture handles this case great.

93
00:07:57,325 --> 00:08:01,175
the other thing is the full
tolerance and isolation.

94
00:08:02,005 --> 00:08:09,105
when you want one part of the
system to fail and not have

95
00:08:09,175 --> 00:08:10,865
other part of the system to fail.

96
00:08:11,365 --> 00:08:18,545
The other use cases when you have your
application distributed across different

97
00:08:18,585 --> 00:08:23,145
countries or different parts of the world.

98
00:08:23,645 --> 00:08:26,885
the other use case is integration
with third party services.

99
00:08:27,385 --> 00:08:31,725
And when you have to speed up
the development process or the

100
00:08:31,725 --> 00:08:35,935
simplest case, when you just want
to modernize your legacy system.

101
00:08:35,985 --> 00:08:37,505
we also have to mention.

102
00:08:38,140 --> 00:08:46,710
Use cases when microservices will not
suit well for example when your rps is

103
00:08:46,770 --> 00:08:55,230
are Not too big for example down two
to four rps or When your application is

104
00:08:55,260 --> 00:09:03,490
very small Or team expertise is limited
Or maybe you have limited resources this

105
00:09:03,550 --> 00:09:09,455
is a use case when you don't want to
use microservices and better stick to

106
00:09:09,455 --> 00:09:12,195
your old technologies and architecture.

107
00:09:12,695 --> 00:09:19,785
Uh, as I mentioned in the beginning,
we'll briefly discuss on how

108
00:09:19,915 --> 00:09:21,825
microservices are related to high loads.

109
00:09:22,675 --> 00:09:30,785
I would say that high load is almost
impossible when you are creating, It's

110
00:09:30,795 --> 00:09:39,555
using monolithic architecture, but I
would not be 100 percent sincere with

111
00:09:39,555 --> 00:09:45,595
you because the world's largest social
networks, such as Facebook or pk.

112
00:09:45,865 --> 00:09:53,765
com, they are, they, historically were
built using monolithic architecture

113
00:09:54,125 --> 00:09:59,535
and developers had to invent
different solutions to handle this.

114
00:10:00,135 --> 00:10:09,245
For example, to create transpilers
to translate PHP code into C code or

115
00:10:09,765 --> 00:10:18,455
developers had to create more, more
performant perform the software, like

116
00:10:18,465 --> 00:10:21,435
databases, with much better performance.

117
00:10:21,935 --> 00:10:27,875
Because high load is where the
bottleneck is the CPU, and the main

118
00:10:27,875 --> 00:10:33,425
challenges are the volume of data,
the quality of data, the high rate of

119
00:10:33,425 --> 00:10:35,685
change, and high level of complexity.

120
00:10:36,185 --> 00:10:39,035
There is no clear definition of high load.

121
00:10:39,205 --> 00:10:41,815
We can only name some signs of it.

122
00:10:41,905 --> 00:10:49,225
For example, the system can no
longer handle the current load or

123
00:10:49,325 --> 00:10:55,385
common approaches are insufficient or
there's an urgent need to scale the

124
00:10:55,385 --> 00:11:00,075
infrastructure or a single server is
not enough to serve your customers.

125
00:11:00,075 --> 00:11:00,135
Thank you.

126
00:11:00,635 --> 00:11:04,815
And also when hardware can't cope
with increased loads and existing

127
00:11:04,815 --> 00:11:07,905
tools are, cannot solve your problems.

128
00:11:08,405 --> 00:11:14,935
And when you are in such situation,
when you have a very high RPSs, the

129
00:11:14,935 --> 00:11:21,355
main questions that you should consider
are reliability, two, scalability,

130
00:11:21,425 --> 00:11:22,965
and three, ease of maintenance.

131
00:11:23,435 --> 00:11:23,495
Thank you.

132
00:11:23,995 --> 00:11:30,725
I want you, from the all, points that I
will mention today, these three are the

133
00:11:31,015 --> 00:11:34,055
key ones, so I want you to remember them.

134
00:11:34,555 --> 00:11:35,765
Designed for failure.

135
00:11:36,685 --> 00:11:40,915
Some of you may know such
person as Edward Murphy.

136
00:11:41,750 --> 00:11:45,150
And he said that anything that
can go wrong will go wrong.

137
00:11:45,740 --> 00:11:52,300
And this is the principle that you should
keep in mind when developing microservice

138
00:11:52,300 --> 00:11:54,640
architecture and high load systems.

139
00:11:55,140 --> 00:11:57,280
Let's see a small example of it.

140
00:11:57,730 --> 00:12:04,850
For example, you have an order service
which stores its orders in a database.

141
00:12:05,350 --> 00:12:13,470
and sends an email when it
receives a creation request.

142
00:12:13,970 --> 00:12:15,960
So everything is pretty simple, right?

143
00:12:16,460 --> 00:12:24,970
Then let's say that your email provider
unexpectedly fails, but you still have to

144
00:12:25,190 --> 00:12:28,610
deliver your messages to the customers.

145
00:12:29,485 --> 00:12:36,545
So the great choice for you would be to
add a fallback email service that you're

146
00:12:36,545 --> 00:12:39,785
going to use in case your main one fails.

147
00:12:40,285 --> 00:12:45,115
In the case of a service failure,
external or internal to the system,

148
00:12:45,975 --> 00:12:47,445
it must be properly handled.

149
00:12:47,945 --> 00:12:54,045
And another good option for handling
degradation is to use a cache

150
00:12:54,045 --> 00:12:55,755
service for your data storage.

151
00:12:56,445 --> 00:13:04,005
For example, your database cannot
handle the load and, Sorry.

152
00:13:04,505 --> 00:13:10,585
But you still have to serve your
customers with, many pages that

153
00:13:10,695 --> 00:13:13,645
they can watch your, their orders.

154
00:13:14,545 --> 00:13:19,885
And, of course, the, they're
going to face some problems when

155
00:13:19,895 --> 00:13:22,975
they want to create a new order.

156
00:13:22,975 --> 00:13:30,885
But, for example, just to watch them or
just to, list them, the cache is enough.

157
00:13:31,385 --> 00:13:36,945
The other thing is, that's
slightly patches microservices

158
00:13:37,025 --> 00:13:40,795
patterns is transactional outbox.

159
00:13:41,465 --> 00:13:48,305
when you have some messages in your
system, when you have messages queue,

160
00:13:49,125 --> 00:13:55,940
you want to implement delivery,
grant some guaranteed deliveries.

161
00:13:56,370 --> 00:14:01,740
And for that purpose, the
transactional box pattern is the best.

162
00:14:02,210 --> 00:14:09,740
And if you're working with very important
data, maybe with finances or personal

163
00:14:09,840 --> 00:14:19,525
infos, personal data, this is the kind of
pattern that must be used, otherwise you

164
00:14:19,525 --> 00:14:23,325
will face some unpleasant consequences.

165
00:14:23,825 --> 00:14:31,005
And we are moving to challenges
that you are going to face when

166
00:14:31,005 --> 00:14:34,825
you are migrating your system
from monolith to microservices.

167
00:14:35,325 --> 00:14:38,255
And the first one is code complexity.

168
00:14:38,755 --> 00:14:42,625
As you see on the screenshot, This
is a real screenshot that I was

169
00:14:42,625 --> 00:14:47,755
taking, when I was working on the
code base of the social network.

170
00:14:48,115 --> 00:14:54,555
And I've just clicked the button
to find the usages of ID function.

171
00:14:55,015 --> 00:15:03,215
And as you can see, we have more than
30, 000 results, which is mind blowing.

172
00:15:03,715 --> 00:15:07,445
And apart from it, the
code is tightly coupled.

173
00:15:08,145 --> 00:15:15,825
It's usually hard to understand and you
spend days to understand how one component

174
00:15:15,835 --> 00:15:22,855
work And of course The development
is slow and you're you cannot deploy

175
00:15:22,855 --> 00:15:29,295
your code very fast when you have Many
developers working on the same parts Of

176
00:15:29,295 --> 00:15:32,005
course, it's limited in its flexibility.

177
00:15:32,275 --> 00:15:34,225
It has high risks of bugs.

178
00:15:34,725 --> 00:15:41,545
It's almost impossible to cover with
tests, unit tests or integration tests,

179
00:15:42,025 --> 00:15:49,705
because you have the problem when you
do not have interfaces and basically

180
00:15:49,715 --> 00:15:51,955
your test environment cannot use this.

181
00:15:52,425 --> 00:15:58,835
production databases, so you cannot
write your test code in such cases.

182
00:15:58,835 --> 00:16:07,915
You have, firstly, you have to
disconnect the data that is used

183
00:16:07,915 --> 00:16:10,175
in production from the code.

184
00:16:10,675 --> 00:16:16,485
The other thing that I think is the most
important, it is a high entry barrier.

185
00:16:17,415 --> 00:16:23,255
It is very hard to find new
developers, especially if you use

186
00:16:23,605 --> 00:16:29,205
some old technologies like PHP and
maybe Perl or other stuff like this.

187
00:16:29,705 --> 00:16:33,845
But what's more importantly is
that even if you find one, it will

188
00:16:33,905 --> 00:16:39,525
take more than a year, two years
for them to adapt to the code, but

189
00:16:39,695 --> 00:16:43,855
code base to understand processes.

190
00:16:43,945 --> 00:16:51,975
And then developer works more
than two years on such project.

191
00:16:52,835 --> 00:17:00,825
it is very hard to, not lose him
because, usually developer gets tired

192
00:17:00,865 --> 00:17:03,865
working on such, bad quality code.

193
00:17:04,435 --> 00:17:07,555
So that introduces recruitment challenges.

194
00:17:07,555 --> 00:17:08,550
for listening.

195
00:17:09,050 --> 00:17:12,950
The second thing is data
management and decoupling.

196
00:17:13,870 --> 00:17:18,200
we've mentioned this thing before,
so we'll go through solutions.

197
00:17:19,120 --> 00:17:24,640
first one is database per service
pattern, when you use one, exactly

198
00:17:24,660 --> 00:17:27,250
one database for your microservice.

199
00:17:27,750 --> 00:17:36,760
And, You use event sourcing or change data
capture to, let the other microservices

200
00:17:36,780 --> 00:17:40,520
know that some data has changed.

201
00:17:41,020 --> 00:17:46,430
You may also use data replication and
shared databases as temporary solutions.

202
00:17:46,930 --> 00:17:53,520
For example, you have module one,
module two, and et cetera that, that

203
00:17:53,520 --> 00:17:55,930
are working with the users table.

204
00:17:56,500 --> 00:17:59,460
And the first module was
working with username field.

205
00:17:59,720 --> 00:18:02,600
The second module is working
with a password field.

206
00:18:03,100 --> 00:18:05,910
so how do we handle such situations?

207
00:18:06,410 --> 00:18:11,960
We can create, let's say, two
microservices and divide our

208
00:18:11,990 --> 00:18:14,540
data into two separate tables.

209
00:18:14,790 --> 00:18:18,140
The first one is for users and
the second one is for addresses.

210
00:18:19,010 --> 00:18:26,720
And if our personal data service
needs some user info, any user

211
00:18:26,720 --> 00:18:33,690
info, then it can just, Make a
get request to the ALF service

212
00:18:34,190 --> 00:18:39,590
The next thing is the multi layered
caches It is a on the slide.

213
00:18:39,590 --> 00:18:45,420
You can see a real example of how
the caching Could be implemented.

214
00:18:46,390 --> 00:18:51,770
I Would not say that it is a great
approach, but it's how it is in big

215
00:18:52,610 --> 00:18:58,160
systems that Handle a lot of requests.

216
00:18:58,660 --> 00:19:04,150
You have your app, usually monolithic
app, and you have your local caches,

217
00:19:04,190 --> 00:19:12,500
maybe memory caches, and then you have
a chain of caches, multi layered caches,

218
00:19:13,160 --> 00:19:19,380
and one question could come to your
mind, You can pause and try to answer

219
00:19:19,390 --> 00:19:28,950
it by yourself, but the answer is, when
you want to, simplify such systems, you

220
00:19:28,950 --> 00:19:36,720
have to, go through all the complexity
of the code that works with this

221
00:19:37,060 --> 00:19:40,850
chain, and usually it's mind blowing.

222
00:19:41,350 --> 00:19:46,590
microservices rely on communication
between services, and it

223
00:19:46,640 --> 00:19:51,000
introduces latency, failure
points, and complex dependencies.

224
00:19:51,790 --> 00:19:58,030
For such cases, you better use
message queues, service discovery

225
00:19:58,030 --> 00:20:06,485
tools, and circuit breakers,
to not allow cascade failures.

226
00:20:06,985 --> 00:20:13,335
And usually for this, you have different
libraries in your programming languages.

227
00:20:13,835 --> 00:20:16,475
we're going to talk about security.

228
00:20:17,245 --> 00:20:22,155
Microservices, of course,
they increase the numbers.

229
00:20:23,050 --> 00:20:28,770
of communication endpoints exposing,
the system to vulner vulnerabilities.

230
00:20:29,370 --> 00:20:36,020
And, to handle this, you can use API
gateways to centralize authentication,

231
00:20:36,020 --> 00:20:38,270
authorization, and request validation.

232
00:20:38,770 --> 00:20:45,880
for example, you can use Istio Gateway if
you're using Kubernetes, or you can use.

233
00:20:46,880 --> 00:20:52,990
Many proxies like NGINX
or Envoy or Help Proxy.

234
00:20:53,490 --> 00:20:59,390
The other thing that you can use is of two
protocol and token based authentication

235
00:20:59,400 --> 00:21:02,710
like JVTs for secure access control.

236
00:21:03,210 --> 00:21:12,635
And if you have a separate team or
specialist, which is, Which responsi

237
00:21:12,635 --> 00:21:18,410
Which responsibilities are connected with
information security, you can implement

238
00:21:18,420 --> 00:21:20,840
penetration testing, and all that.

239
00:21:21,340 --> 00:21:26,590
Of course, it is very hard to
deploy decentralized systems.

240
00:21:27,540 --> 00:21:28,910
Distributed systems, sorry.

241
00:21:29,410 --> 00:21:33,190
So usually, you want to
have a separate server.

242
00:21:33,495 --> 00:21:39,465
team member, maybe DevOps engineer
that will handle all these tasks.

243
00:21:40,275 --> 00:21:46,095
and usually in his responsibilities,
you can expect counterization and

244
00:21:46,095 --> 00:21:51,905
orchestration tools, CI CD pipelines
in GitLab or GitHub actions.

245
00:21:52,615 --> 00:21:59,675
And of course, GitOps for infrastructure
as a code, maybe, such things as, Argo

246
00:21:59,685 --> 00:22:02,775
CD and other stuff, maybe Ansible.

247
00:22:03,275 --> 00:22:09,785
To monitor a monolithic system,
you can use maybe the things like,

248
00:22:09,885 --> 00:22:16,515
Sentry or, things like that, but
to monitor many small applications.

249
00:22:17,205 --> 00:22:23,705
You'll have to use more complex
approaches like logging, tools like ALK

250
00:22:23,705 --> 00:22:27,085
stack, distributing tracing solutions.

251
00:22:27,845 --> 00:22:33,375
You can also implement distribution
tracing by yourself, but if you

252
00:22:33,815 --> 00:22:38,315
are limited in your resources
or doesn't want to, you can use

253
00:22:39,105 --> 00:22:42,645
um, ready solutions like Zipkin.

254
00:22:43,145 --> 00:22:47,545
Also, it's a great choice to
use service meshes like Istio.

255
00:22:47,845 --> 00:22:50,975
It's great for Kubernetes.

256
00:22:51,815 --> 00:22:57,335
And it also helps to, for, to increase
the observability of your system.

257
00:22:57,835 --> 00:23:05,155
I've mentioned before that microservices
introduce some, HR problems.

258
00:23:05,475 --> 00:23:06,465
So teams.

259
00:23:06,820 --> 00:23:08,970
and organizational
resistance and skill gaps.

260
00:23:09,760 --> 00:23:14,580
teams may resist, change due to lack
of familiarity with microservices

261
00:23:14,620 --> 00:23:16,840
or fear of increased workload.

262
00:23:17,600 --> 00:23:25,030
And you probably will have to organize
training programs and workshops and maybe

263
00:23:25,100 --> 00:23:31,340
transition your responsibilities between
team members and groups of developers.

264
00:23:31,840 --> 00:23:38,000
And to demonstrate that microservices
approach can work with your system,

265
00:23:38,410 --> 00:23:44,850
you can create, let's go, an MVP for
your system, for your microservice,

266
00:23:44,900 --> 00:23:50,820
and then the team will understand
the benefits, and you'll more likely

267
00:23:50,890 --> 00:23:57,290
continue to migrate to microservices
your other components of your system.

268
00:23:57,790 --> 00:24:01,990
of course, working with
legacy monoliths is hard.

269
00:24:02,610 --> 00:24:08,140
and the parts that are going to help
you are strangler, facets, adapters,

270
00:24:08,190 --> 00:24:11,680
bridges, and, different others.

271
00:24:12,640 --> 00:24:16,770
Also, you'll have to maintain
some compatibility layers.

272
00:24:17,270 --> 00:24:24,990
The main concern that I have faced with
when I was working with the, when I was

273
00:24:24,990 --> 00:24:32,540
migrating authentication part of the
social network to microservices is that

274
00:24:32,820 --> 00:24:40,350
authentication is under a very high
load, hundreds of thousands of RPSs.

275
00:24:40,830 --> 00:24:50,560
And, It was unacceptable to, increase
latency even by one or two microseconds.

276
00:24:50,780 --> 00:24:59,360
So I had to think about how to, increase
performance of my microservices or of

277
00:24:59,370 --> 00:25:04,685
my, networking of my infrastructure.

278
00:25:05,415 --> 00:25:10,725
for example, I've used, for
interconnection, I've used

279
00:25:10,965 --> 00:25:13,455
gRPC protocol made by Google.

280
00:25:13,955 --> 00:25:20,955
we've also used Kubernetes to
scale horizontally our system.

281
00:25:21,455 --> 00:25:27,395
And to measure the impact of the
migration, we've used performance testing.

282
00:25:27,895 --> 00:25:33,705
It was very hard in the beginning to
manage dependencies, but, there are

283
00:25:33,705 --> 00:25:37,295
great solutions for such problems,
such as event driven architectures.

284
00:25:37,810 --> 00:25:44,240
or API versioning with service contracts,
a great tool Swagger and OpenAI are

285
00:25:44,750 --> 00:25:50,000
a great choice for you to document
your APIs and share it between teams.

286
00:25:50,500 --> 00:25:58,940
So we've covered almost every significant
problem, and we've mentioned the

287
00:25:58,940 --> 00:26:02,300
solutions that can solve these problems.

288
00:26:02,600 --> 00:26:09,650
So let's go to the practical example,
and we will try to create a token

289
00:26:09,650 --> 00:26:17,990
management service by moving, code parts
from one monolithic data, code base.

290
00:26:18,490 --> 00:26:22,920
And the system itself just
generates and checks APIX tokens.

291
00:26:23,420 --> 00:26:30,230
So we have our user, which provides
session token like any string.

292
00:26:30,730 --> 00:26:33,330
And we have our legacy monolith system.

293
00:26:33,830 --> 00:26:38,890
We have our web server, where
our users send requests to.

294
00:26:39,390 --> 00:26:42,530
And our web server just sends.

295
00:26:43,030 --> 00:26:50,470
user's token to parse session
function, which returns ID, IP and

296
00:26:50,640 --> 00:26:53,280
expires date, taken from database.

297
00:26:53,780 --> 00:26:54,640
Everything is simple.

298
00:26:55,140 --> 00:26:59,810
We want to migrate gradually.

299
00:27:00,160 --> 00:27:07,550
So the first thing we do is we take, we
create new microservices, let's call it.

300
00:27:07,975 --> 00:27:16,305
token microservice and we just copy our
parse function and we send two requests

301
00:27:16,425 --> 00:27:22,485
simultaneously one to the monolith
version of this function and the other two

302
00:27:22,485 --> 00:27:29,605
microservice version of this function both
of them are temporarily using sessions

303
00:27:29,605 --> 00:27:38,255
database so they're sharing it and if
we compare our ID and IP and other data.

304
00:27:38,905 --> 00:27:48,955
And if it's equal, then we can gradually
decrease the traffic from the monolithic

305
00:27:49,135 --> 00:27:51,545
function to microservice function.

306
00:27:52,045 --> 00:27:57,245
And we'll have something like this,
where parse function is transferred

307
00:27:57,275 --> 00:28:04,325
to token microservice But what if some
other module uses Session's database?

308
00:28:04,825 --> 00:28:06,885
We have to migrate it as well.

309
00:28:07,765 --> 00:28:08,745
How do we do it?

310
00:28:09,245 --> 00:28:13,825
And the problem could be even
worse if we have different caches

311
00:28:14,195 --> 00:28:16,145
between database and monolith.

312
00:28:16,645 --> 00:28:25,445
here's A solution for this problem,
we add a consumer to the monolith

313
00:28:26,345 --> 00:28:32,775
and we add a producer to the
microservice and use patterns that we

314
00:28:32,785 --> 00:28:35,685
have mentioned earlier, CDC pattern.

315
00:28:36,165 --> 00:28:44,675
So when our sessions database
changes, then we capture changes and

316
00:28:45,385 --> 00:28:46,985
we're producing message patterns.

317
00:28:47,485 --> 00:28:48,575
into the message queue.

318
00:28:49,075 --> 00:28:55,615
the consumer will take the message
from the message queue and update

319
00:28:55,685 --> 00:28:58,445
its local state in some other DB.

320
00:28:58,945 --> 00:29:03,585
And our other module will use
data for not from sessions

321
00:29:03,585 --> 00:29:05,635
database, but from other database.

322
00:29:06,135 --> 00:29:10,485
So we have decoupled two
modules, one from another.

323
00:29:10,985 --> 00:29:20,275
And to make everything more, more
concise, to keep it simpler, to make

324
00:29:20,275 --> 00:29:26,295
everything beautiful, we can transfer
the logic from monolith to the second

325
00:29:26,295 --> 00:29:32,745
microservice and let everything
other, everything else untouched.

326
00:29:33,245 --> 00:29:34,805
That was it for today.

327
00:29:35,305 --> 00:29:41,535
In the end, I want to recommendate, give
you some recommendations on books that you

328
00:29:41,535 --> 00:29:45,995
can read and take useful information from.

329
00:29:46,985 --> 00:29:51,505
So the first one is Designing Data
Intensive Applications by Martin Klapman.

330
00:29:52,005 --> 00:29:55,825
And the second one is the
website called microsoft.

331
00:29:55,825 --> 00:30:04,445
io These two will probably be enough to
cover the main aspects of microservices.

332
00:30:04,835 --> 00:30:09,545
But if you want to go deeper,
you can use distributed systems.

333
00:30:10,045 --> 00:30:13,945
It's free and could be found
on the URL that I provided.

334
00:30:14,445 --> 00:30:19,940
And if you are familiar
with Go, you can go there.

335
00:30:20,440 --> 00:30:23,980
take a look at the book by Nick Jackson.

336
00:30:24,480 --> 00:30:30,940
So thank you for your attention and
I'm looking forward for your feedback.

337
00:30:31,050 --> 00:30:40,610
You can send me questions if you have,
in telegram or you can write me an email.

338
00:30:40,870 --> 00:30:44,700
So thank you once again
and have a nice day.

339
00:30:45,350 --> 00:30:45,760
Goodbye.

