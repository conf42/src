1
00:00:00,180 --> 00:00:04,750
Hello, hello, hello to all the brilliant
souls on the another side of the screen.

2
00:00:05,319 --> 00:00:06,609
I hope you're doing great.

3
00:00:07,319 --> 00:00:09,520
At first, let me introduce myself.

4
00:00:09,559 --> 00:00:11,200
My name is Denis.

5
00:00:11,700 --> 00:00:15,660
So, as you can see, I've been
in this field for quite a while.

6
00:00:16,160 --> 00:00:19,389
Long enough to have caught
HTML for an escape navigator.

7
00:00:19,469 --> 00:00:22,020
I imagine some of you might
not even know what this is.

8
00:00:22,360 --> 00:00:23,740
And it's perfectly fine.

9
00:00:24,240 --> 00:00:25,139
no worries here.

10
00:00:25,380 --> 00:00:28,419
there have been many interesting
developments in those days.

11
00:00:29,100 --> 00:00:32,970
I've worked in numerous roles
here and there, but always

12
00:00:33,010 --> 00:00:34,240
within the tech industry.

13
00:00:34,740 --> 00:00:39,770
Along the way, I earned some badges
I found really handy and fancy, like

14
00:00:40,070 --> 00:00:44,260
Associate Coach from the International
Coaching Federation and Professional

15
00:00:44,260 --> 00:00:48,060
Scrum from Ken Schwaber's Scrum.

16
00:00:48,070 --> 00:00:48,410
org.

17
00:00:49,410 --> 00:00:54,070
And, long story short, I'm currently a
contributing engineer at a tech startup.

18
00:00:54,140 --> 00:00:57,300
We're developing project portfolio
and program management software.

19
00:00:57,300 --> 00:00:57,379
So, yeah.

20
00:00:58,030 --> 00:00:59,450
for the banking industry.

21
00:00:59,990 --> 00:01:03,810
And, today I'm going to bring
out some insights I found

22
00:01:03,820 --> 00:01:05,240
available to share with you.

23
00:01:05,880 --> 00:01:09,170
when considering sustainable
software development.

24
00:01:09,950 --> 00:01:11,760
So, let's go ahead.

25
00:01:12,260 --> 00:01:16,560
You know, whatever is suffering,
as Buddha said, but, I suspect

26
00:01:16,570 --> 00:01:20,569
software engi software development
is the real cause of the problem.

27
00:01:21,420 --> 00:01:27,439
I see that, coding is actually a
relentless choice between bad and worse.

28
00:01:27,939 --> 00:01:33,229
you know, many of these delays,
microservices, or monolith service side

29
00:01:33,229 --> 00:01:38,249
render, or client side render, space
complexity, or time complexity, making

30
00:01:38,249 --> 00:01:43,329
a call, or sending an email, and so on
and so on, thousands of them every day.

31
00:01:43,829 --> 00:01:45,289
Let me simplify here.

32
00:01:45,819 --> 00:01:51,839
Imagine the code you write every day
is just a set of words translating

33
00:01:51,959 --> 00:01:54,139
business requirements into machine code.

34
00:01:54,859 --> 00:01:59,979
So, here I suppose coding
is simply communication.

35
00:02:00,479 --> 00:02:02,759
Communication causes a lot of issues.

36
00:02:03,259 --> 00:02:04,723
I didn't get it.

37
00:02:04,723 --> 00:02:05,634
I forgot it.

38
00:02:05,974 --> 00:02:07,044
I didn't hear it.

39
00:02:07,594 --> 00:02:08,824
maybe I don't like it.

40
00:02:09,224 --> 00:02:10,864
Familiar situation, innit?

41
00:02:11,364 --> 00:02:16,224
If we agree on the idea that coding
is communication, then corollary

42
00:02:16,224 --> 00:02:19,644
one is the best code is no code.

43
00:02:20,144 --> 00:02:27,474
And I would like to show you how
complexity arises from absolutely nothing.

44
00:02:27,974 --> 00:02:29,944
So, have a look at this.

45
00:02:30,234 --> 00:02:31,944
It's quite an ordinary situation.

46
00:02:32,014 --> 00:02:33,544
We have a page with a footer.

47
00:02:34,044 --> 00:02:34,554
It's here.

48
00:02:35,054 --> 00:02:35,664
Footer.

49
00:02:36,054 --> 00:02:40,584
And, we want to add some copyrights,
some copyright block here.

50
00:02:41,084 --> 00:02:41,894
With dates.

51
00:02:42,434 --> 00:02:43,074
Let's do it.

52
00:02:43,954 --> 00:02:45,994
Like, 2024.

53
00:02:46,494 --> 00:02:47,334
Denis

54
00:02:47,834 --> 00:02:48,582
Ermakov.

55
00:02:48,582 --> 00:02:50,779
All rights reserved.

56
00:02:51,279 --> 00:02:53,009
Let's check in the browser.

57
00:02:53,509 --> 00:02:54,139
Refresh.

58
00:02:54,639 --> 00:02:55,479
Something goes wrong.

59
00:02:55,979 --> 00:02:56,429
Perfect.

60
00:02:56,479 --> 00:02:57,019
it's here.

61
00:02:57,109 --> 00:02:59,789
We, we can see a photo.

62
00:03:00,289 --> 00:03:01,349
We can see a photo here.

63
00:03:02,099 --> 00:03:04,679
but, what if the new year comes?

64
00:03:05,539 --> 00:03:07,299
May wonder a newbie engineer.

65
00:03:07,799 --> 00:03:09,099
we need some automation here.

66
00:03:09,599 --> 00:03:10,989
So, let's do it.

67
00:03:11,489 --> 00:03:13,699
New Year comes, like that.

68
00:03:14,199 --> 00:03:17,939
Let's say New Year is current year.

69
00:03:18,439 --> 00:03:19,829
New Year is current year.

70
00:03:19,939 --> 00:03:22,379
Let's define the current year.

71
00:03:22,879 --> 00:03:23,499
Let's check.

72
00:03:23,999 --> 00:03:24,829
Let's check.

73
00:03:25,329 --> 00:03:26,609
Yeah, it works.

74
00:03:27,179 --> 00:03:27,859
It works.

75
00:03:27,889 --> 00:03:28,589
It works.

76
00:03:29,009 --> 00:03:30,539
So, that looks great.

77
00:03:31,029 --> 00:03:34,829
But, wait, what if someone else,
will use our great solution?

78
00:03:35,329 --> 00:03:38,359
and it might happen another
year and we don't know.

79
00:03:38,769 --> 00:03:39,889
What's here exactly?

80
00:03:39,969 --> 00:03:41,189
So let's help them.

81
00:03:41,689 --> 00:03:43,009
let's say they started it.

82
00:03:43,509 --> 00:03:48,324
Started using it at the start year.

83
00:03:48,824 --> 00:03:50,034
Let's define start year.

84
00:03:50,534 --> 00:03:53,714
Let's say it started the same year.

85
00:03:54,214 --> 00:03:54,684
Let's check.

86
00:03:55,184 --> 00:03:56,404
Oh, something goes wrong.

87
00:03:56,964 --> 00:03:59,994
we can see 2025 twice.

88
00:04:00,694 --> 00:04:01,644
That's a problem.

89
00:04:01,724 --> 00:04:03,344
we must fix it.

90
00:04:03,844 --> 00:04:04,684
Let's check.

91
00:04:05,184 --> 00:04:08,114
I did it before to save our time.

92
00:04:08,614 --> 00:04:09,474
There is solution.

93
00:04:09,974 --> 00:04:11,914
Let's check in the browser.

94
00:04:12,414 --> 00:04:14,524
Perfectly, it works.

95
00:04:14,894 --> 00:04:16,444
Let's check another case.

96
00:04:16,944 --> 00:04:20,264
Let's start with 2023, fresh.

97
00:04:20,764 --> 00:04:22,524
Yeah, it looks great.

98
00:04:23,054 --> 00:04:24,734
We fixed the problem.

99
00:04:25,264 --> 00:04:28,924
But wait, there was no
problem to begin with.

100
00:04:29,424 --> 00:04:33,214
We add some code, conserved a
problem, and then we fix it.

101
00:04:33,714 --> 00:04:38,204
That's absolutely,
absolutely no, no sense.

102
00:04:38,894 --> 00:04:42,554
Imagine, nobody dies if
there is no code at all.

103
00:04:43,204 --> 00:04:46,964
Nobody loses their fortune
if there is no code at all.

104
00:04:47,464 --> 00:04:50,024
Absolutely nothing happens.

105
00:04:50,524 --> 00:04:52,414
No code, no problem guys.

106
00:04:53,314 --> 00:04:54,094
Let's fix it.

107
00:04:54,594 --> 00:04:55,594
Let's fix it.

108
00:04:56,094 --> 00:04:57,114
Let's fix it.

109
00:04:57,614 --> 00:05:00,174
Yeah, we did it great again.

110
00:05:00,674 --> 00:05:01,364
Fantastic.

111
00:05:01,864 --> 00:05:03,604
Let's go back to the slides.

112
00:05:04,104 --> 00:05:05,444
Go back to the slides.

113
00:05:05,944 --> 00:05:07,684
so, here is another example.

114
00:05:07,804 --> 00:05:09,534
there is a simple GitHub flow.

115
00:05:10,034 --> 00:05:11,614
Someone pushes to a repository.

116
00:05:12,529 --> 00:05:16,999
which triggers a linter to
run, and then build runs, and

117
00:05:17,009 --> 00:05:18,819
finally the deployment happens.

118
00:05:19,319 --> 00:05:24,459
So, let's, let's see, let's
see, what do we have here?

119
00:05:24,959 --> 00:05:30,499
That's, that's a GitHub action
described in YAML format.

120
00:05:31,179 --> 00:05:36,269
So, we have, push to stage,
and then we run some lints.

121
00:05:36,939 --> 00:05:41,479
When we run build, if everything
okay, if everything okay.

122
00:05:42,199 --> 00:05:47,119
here, everything okay on success,
we'll send message to Telegram channel,

123
00:05:48,059 --> 00:05:54,349
and if something goes wrong, if
something fails, we'll send a warning

124
00:05:54,369 --> 00:05:56,469
message to the Telegram channel.

125
00:05:57,379 --> 00:06:01,959
Looks fine, good enough, not really
a newbie engineer might reply,

126
00:06:02,459 --> 00:06:06,779
they don't want broken code in the
staging branch, they want to revert

127
00:06:06,799 --> 00:06:09,489
the broken code, hmm, let's check.

128
00:06:09,989 --> 00:06:13,369
There is, adjusted GitHub action.

129
00:06:14,299 --> 00:06:20,559
It, does the same thing, but there
is a reversion, a reversion on fail.

130
00:06:21,169 --> 00:06:26,369
So we added one step to robot
comment, and then if everything

131
00:06:26,369 --> 00:06:28,679
okay, we'll send message to telegram.

132
00:06:29,449 --> 00:06:29,719
Fine.

133
00:06:30,219 --> 00:06:31,779
We fix the problem.

134
00:06:32,279 --> 00:06:33,569
Yeah, we fix the problem.

135
00:06:33,749 --> 00:06:35,809
But wait, what?

136
00:06:36,349 --> 00:06:37,824
The previous committee is also broken.

137
00:06:38,324 --> 00:06:43,524
Let's, run linter and run build one
more time to check if it's okay.

138
00:06:44,024 --> 00:06:49,324
So, the same extended or adjusted action.

139
00:06:49,824 --> 00:06:51,684
So, we revert last commit.

140
00:06:52,294 --> 00:06:56,214
And then we run, we run lint and build.

141
00:06:57,144 --> 00:06:59,404
So, and then we send telegram message.

142
00:06:59,994 --> 00:07:00,434
Fine.

143
00:07:00,934 --> 00:07:01,224
Hmm.

144
00:07:02,204 --> 00:07:06,284
Wait, but, What is, the
comet before that comet?

145
00:07:06,314 --> 00:07:07,334
Is it also broken?

146
00:07:07,834 --> 00:07:10,444
We need to find the last healthy comet.

147
00:07:10,944 --> 00:07:13,594
We'll say in UBIngineer.

148
00:07:14,094 --> 00:07:14,814
Let's do it.

149
00:07:15,124 --> 00:07:15,624
It's easy.

150
00:07:16,124 --> 00:07:18,004
So, so here we are.

151
00:07:18,504 --> 00:07:20,594
There is a recursive revert and rebuild.

152
00:07:20,594 --> 00:07:30,154
So, we have, the cycle whileJune, where
we, run reversion, and then we run lint

153
00:07:30,654 --> 00:07:38,724
build, and if everything is okay, we'll
exit from the loop, and it looks perfectly

154
00:07:38,734 --> 00:07:46,004
fine, but, but, guys, are you ready to
bet against GitHub, and, are you ready to

155
00:07:46,004 --> 00:07:48,214
bet against, possibly an infinite loop?

156
00:07:48,714 --> 00:07:53,704
You know, I've played this game
before, and I lost, so I can't advise.

157
00:07:54,204 --> 00:07:58,014
the idea that we really don't
need to cover each cases here.

158
00:07:58,864 --> 00:08:01,894
bro, just go and fix the
problem in the comment.

159
00:08:02,274 --> 00:08:02,844
It's easy.

160
00:08:03,344 --> 00:08:06,594
So, let's get back to slides.

161
00:08:07,094 --> 00:08:13,144
What is going here and here
we have the corollary to The

162
00:08:13,154 --> 00:08:15,974
best library is no library.

163
00:08:16,624 --> 00:08:18,024
So let's have a look.

164
00:08:18,524 --> 00:08:23,384
Let's have a look Best
library is no library.

165
00:08:23,884 --> 00:08:28,644
So, you know, take a look on this
piece of code Here imagine we have

166
00:08:28,644 --> 00:08:33,734
a duration in milliseconds Like the
time a ticket has been in progress.

167
00:08:34,374 --> 00:08:38,114
We want to format the duration
in a human readable style.

168
00:08:38,614 --> 00:08:42,954
So, if it's too long,
we'll print out days.

169
00:08:43,454 --> 00:08:47,964
Otherwise, we'll show hours,
minutes, or even seconds.

170
00:08:48,464 --> 00:08:50,854
So, what will the newbie engineers say?

171
00:08:51,754 --> 00:08:54,894
they could say that date
objects are really awkward.

172
00:08:55,364 --> 00:08:58,534
Wait milliseconds that normal
people never deal with.

173
00:08:58,589 --> 00:09:03,109
The 29th of February only
happens once every four years.

174
00:09:03,679 --> 00:09:10,999
The 2038 problem is looming,
endless division by 60 and 24.

175
00:09:11,579 --> 00:09:17,119
Let's use a handy library like moment
to handle days like normal people made.

176
00:09:17,119 --> 00:09:17,539
Bro.

177
00:09:18,229 --> 00:09:19,009
It's a trap.

178
00:09:19,429 --> 00:09:20,209
It's a trap.

179
00:09:20,939 --> 00:09:21,659
Let's see.

180
00:09:22,159 --> 00:09:27,339
So we have, what we have
here, we have milliseconds.

181
00:09:27,339 --> 00:09:29,259
We have, function for duration.

182
00:09:29,259 --> 00:09:29,649
We have.

183
00:09:30,319 --> 00:09:32,449
milliseconds as a, an argument.

184
00:09:33,089 --> 00:09:41,639
So we are, we're going to use moment
here to convert, in human readable format

185
00:09:42,179 --> 00:09:45,059
using human readable methods as second.

186
00:09:45,559 --> 00:09:51,039
We, we get milliseconds and,
apply the method eight seconds.

187
00:09:51,809 --> 00:09:56,929
And we then we took milliseconds
and, converted to minutes.

188
00:09:57,229 --> 00:10:00,409
We took milliseconds
and, converted to hours.

189
00:10:00,924 --> 00:10:05,484
And so on, and so on, milliseconds,
two days, great, great enough,

190
00:10:05,514 --> 00:10:10,384
but, let's have a look, let's have
a look, the next piece of code.

191
00:10:11,164 --> 00:10:16,114
So, let me, let me do this one.

192
00:10:17,104 --> 00:10:20,694
Oh, something goes
wrong, let me check, huh.

193
00:10:21,424 --> 00:10:23,024
Okay, what's going here?

194
00:10:23,424 --> 00:10:27,394
we can achieve the same result, same
result, the same function, yeah?

195
00:10:27,404 --> 00:10:27,434
Okay.

196
00:10:28,234 --> 00:10:29,174
Formal duration.

197
00:10:29,754 --> 00:10:33,074
We can achieve the same
result with proper naming.

198
00:10:33,634 --> 00:10:37,414
We don't need to use
library with proper naming.

199
00:10:37,574 --> 00:10:41,714
We can just use proper
naming in our variables.

200
00:10:42,074 --> 00:10:48,674
So we took milliseconds
and divided first on 1000.

201
00:10:49,324 --> 00:10:51,954
So we got seconds.

202
00:10:52,104 --> 00:10:53,744
Next, we divide seconds.

203
00:10:54,359 --> 00:10:56,179
And, got means, and so on.

204
00:10:56,369 --> 00:11:01,899
Hours, days, the same number
of, the same number of lines.

205
00:11:02,379 --> 00:11:04,299
The same result.

206
00:11:05,229 --> 00:11:11,079
And we have saved 145
kilobytes of collateral code.

207
00:11:11,579 --> 00:11:12,489
Amazing.

208
00:11:12,819 --> 00:11:13,689
How does it work?

209
00:11:14,189 --> 00:11:15,029
I didn't show you.

210
00:11:15,879 --> 00:11:17,639
Yeah, here it is.

211
00:11:18,599 --> 00:11:21,779
Duration, days, like that.

212
00:11:22,279 --> 00:11:28,199
Yeah, so, let's back to, let's
back to deck with lights.

213
00:11:28,699 --> 00:11:29,159
What's here?

214
00:11:29,659 --> 00:11:30,839
Corollary 3.

215
00:11:31,299 --> 00:11:35,399
Well, if you still need words
to communicate, then code them.

216
00:11:35,899 --> 00:11:38,709
There is no need to write
long stories in your readme.

217
00:11:38,749 --> 00:11:43,579
md or in your wiki or
Confluence or whenever.

218
00:11:44,079 --> 00:11:47,039
do you have your own unique
code style in agreements?

219
00:11:47,039 --> 00:11:47,089
Yes.

220
00:11:48,074 --> 00:11:53,644
Good, code them into linters and let
them run on every command s after saving.

221
00:11:54,144 --> 00:11:55,034
let's have a look.

222
00:11:55,534 --> 00:11:57,574
So, what's here?

223
00:11:58,074 --> 00:12:00,704
Yeah, what, what, what's here?

224
00:12:01,274 --> 00:12:05,774
Yeah, there is printer,
and there is this lint.

225
00:12:06,274 --> 00:12:08,284
So, it's quite easy.

226
00:12:08,794 --> 00:12:09,974
what actually happens?

227
00:12:10,474 --> 00:12:14,174
you actually don't need to write
the number of spaces for your tabs.

228
00:12:14,974 --> 00:12:22,564
In Confluence, it's described here in
Pre TRC, so you, you can just put them

229
00:12:23,254 --> 00:12:28,764
in, in your repository, let them be
part of your repository, and, relax.

230
00:12:29,724 --> 00:12:32,644
So, it's quite easy, you
don't need any words.

231
00:12:33,144 --> 00:12:36,504
Add some code and put
it in your repository.

232
00:12:37,224 --> 00:12:38,074
That's great.

233
00:12:38,844 --> 00:12:40,824
So, back to slides again.

234
00:12:41,324 --> 00:12:45,244
Corollary 4 is foster
your team's dictionary.

235
00:12:46,064 --> 00:12:47,154
So, what does it mean?

236
00:12:47,714 --> 00:12:50,874
foster your team's dictionary
and keep it in your readme.

237
00:12:50,924 --> 00:12:51,434
ind.

238
00:12:52,344 --> 00:12:54,374
and I suggest to start with done.

239
00:12:54,874 --> 00:12:56,704
What does that mean to the team?

240
00:12:56,984 --> 00:13:01,774
do you know I sure everyone is
aligned on what does, what done means.

241
00:13:02,074 --> 00:13:06,489
Let's write it down to make sure
what's what, what does done means.

242
00:13:07,239 --> 00:13:08,249
What does done mean?

243
00:13:08,899 --> 00:13:10,669
So, let's write it.

244
00:13:11,169 --> 00:13:12,269
Yeah, readme.

245
00:13:12,999 --> 00:13:14,349
What does done mean?

246
00:13:15,269 --> 00:13:16,609
So, here is readme.

247
00:13:17,509 --> 00:13:20,699
And I want to start with dictionary.

248
00:13:21,199 --> 00:13:23,889
Dictionary or glossary.

249
00:13:24,389 --> 00:13:28,369
Okay, let's start with
done, as I suggested.

250
00:13:28,869 --> 00:13:30,289
Done.

251
00:13:30,789 --> 00:13:36,649
So, I suppose there are a
lot of work items you deal

252
00:13:36,649 --> 00:13:38,679
with every day, like rechart.

253
00:13:39,179 --> 00:13:45,199
Like, maybe a user story,
or maybe task, or even bug.

254
00:13:45,699 --> 00:13:50,469
So, let's define, let's
define dan for user story.

255
00:13:51,419 --> 00:13:57,874
When I said, When I say, then I say
a done for user storage, that's mean.

256
00:13:58,384 --> 00:14:09,864
for example, the re the Ram Unit tests,
unit tests and the coverage, I say 70%.

257
00:14:10,364 --> 00:14:17,224
So when I say done, that means there, that
means, there, Integration, integration

258
00:14:17,624 --> 00:14:22,654
tests and coverage say, I don't know, 50%.

259
00:14:23,154 --> 00:14:29,524
When I say user story done,
that means there are end to

260
00:14:29,524 --> 00:14:32,754
end tests, end to end tests.

261
00:14:33,254 --> 00:14:37,624
And say coverage, I don't know, 30%.

262
00:14:38,524 --> 00:14:39,614
Okay, what else?

263
00:14:39,654 --> 00:14:44,324
When I say done That mean,
product, documentation.

264
00:14:44,324 --> 00:14:44,654
Done.

265
00:14:45,194 --> 00:14:46,334
Yeah, documentation.

266
00:14:46,664 --> 00:14:50,864
If I say, if I say done,
that means, there is

267
00:14:51,364 --> 00:14:52,204
documentation.

268
00:14:52,704 --> 00:15:00,219
If I say done, that mean
product owner got a video link.

269
00:15:00,719 --> 00:15:03,999
With end to end test.

270
00:15:04,499 --> 00:15:13,479
And if I say done for user story, that
mean that Pure said amazing, guys.

271
00:15:13,829 --> 00:15:20,429
So, if Pure said amazing, we are
ready to ship the user story.

272
00:15:21,039 --> 00:15:22,889
So, we did it.

273
00:15:23,269 --> 00:15:28,449
Now everyone knows what does done mean.

274
00:15:28,949 --> 00:15:29,549
Means.

275
00:15:29,759 --> 00:15:31,499
So, let's, go ahead.

276
00:15:31,889 --> 00:15:34,349
let's go ahead two slides.

277
00:15:34,849 --> 00:15:35,239
yeah.

278
00:15:35,299 --> 00:15:38,579
Remember corollary three,
it said, code, code.

279
00:15:38,729 --> 00:15:41,069
If you have words, it's
better to code them.

280
00:15:41,309 --> 00:15:43,654
So let's let, let's, let's do it.

281
00:15:44,564 --> 00:15:45,644
Let's code the words.

282
00:15:46,044 --> 00:15:47,224
There are a lot of words.

283
00:15:47,804 --> 00:15:50,464
something about unit tests.

284
00:15:50,474 --> 00:15:54,314
So, let's imagine we
already have unit tests.

285
00:15:54,814 --> 00:15:56,954
And, we want to run it.

286
00:15:57,204 --> 00:15:58,944
And see the coverage.

287
00:15:59,444 --> 00:16:00,184
Let's run.

288
00:16:00,684 --> 00:16:01,964
Something goes on.

289
00:16:02,464 --> 00:16:03,144
Going on.

290
00:16:03,644 --> 00:16:04,244
Yeah.

291
00:16:04,744 --> 00:16:05,474
Look at that.

292
00:16:05,974 --> 00:16:06,699
Come on.

293
00:16:07,199 --> 00:16:07,629
Come on.

294
00:16:08,129 --> 00:16:08,749
Yeah.

295
00:16:08,769 --> 00:16:09,209
Great.

296
00:16:09,349 --> 00:16:10,059
We are green.

297
00:16:10,069 --> 00:16:11,339
We are totally green.

298
00:16:12,109 --> 00:16:12,859
At first.

299
00:16:13,494 --> 00:16:14,594
We have coverage.

300
00:16:15,094 --> 00:16:17,534
So, fantastic.

301
00:16:17,754 --> 00:16:23,244
We can, we can, we can
check that it's done.

302
00:16:23,934 --> 00:16:29,234
So, next, imagine we are done with
integration and end to end tests.

303
00:16:29,604 --> 00:16:31,294
So, what about documentation?

304
00:16:31,584 --> 00:16:32,064
Yeah?

305
00:16:32,814 --> 00:16:34,904
what about documentation here?

306
00:16:35,404 --> 00:16:36,294
I need a code.

307
00:16:36,724 --> 00:16:39,594
Let's make some documentation.

308
00:16:40,094 --> 00:16:50,404
So, I would use I will use robot for that,
let's ironman walk, works, give me a type

309
00:16:50,414 --> 00:16:59,754
doc, I use type doc, comment, for function
format duration, yeah ironman is walking,

310
00:17:00,254 --> 00:17:05,514
yeah we have some description, let's
save it, and next we need to generate

311
00:17:06,004 --> 00:17:08,374
some documents, I use tab doc,

312
00:17:08,874 --> 00:17:11,104
The generation is in progress.

313
00:17:11,604 --> 00:17:12,164
Yeah.

314
00:17:12,664 --> 00:17:14,164
Generation is in progress.

315
00:17:14,664 --> 00:17:15,574
Something goes wrong.

316
00:17:15,964 --> 00:17:16,454
What?

317
00:17:16,954 --> 00:17:17,294
Yeah.

318
00:17:17,384 --> 00:17:18,444
Everything is done.

319
00:17:18,944 --> 00:17:19,454
Everything is done.

320
00:17:19,774 --> 00:17:20,374
Let's check.

321
00:17:20,874 --> 00:17:21,824
Let's check here.

322
00:17:22,114 --> 00:17:22,434
Yeah.

323
00:17:22,934 --> 00:17:29,174
Here is a documentation for our
function with comments from Copilot.

324
00:17:29,674 --> 00:17:37,664
So, We are done with this function, this
item, this item of done, we are done.

325
00:17:38,374 --> 00:17:40,594
So, and and so on and so on.

326
00:17:40,694 --> 00:17:47,044
there are, there could be any items,
any items in your done definition.

327
00:17:47,654 --> 00:17:49,784
So, it's your choice.

328
00:17:50,494 --> 00:17:55,214
But, what is important about here,
now you can easily make this choice a

329
00:17:55,214 --> 00:17:56,984
part of your GitHub action, you know.

330
00:17:57,544 --> 00:18:00,764
And to save time, I'm
going to skip this part.

331
00:18:01,264 --> 00:18:06,864
And, what's important here, by the
way, speaking of testing, there, you

332
00:18:06,864 --> 00:18:10,784
know, there is a mass load pyramid
for normal people, and there is

333
00:18:10,784 --> 00:18:13,024
a testing pyramid for engineers.

334
00:18:13,604 --> 00:18:17,304
And, the Pyramid suggests
writing a lot of unit tests,

335
00:18:17,364 --> 00:18:19,804
and just a few end to end tests.

336
00:18:20,444 --> 00:18:23,524
But, I'm afraid, I'm, I'm
afraid we are mistaken.

337
00:18:24,144 --> 00:18:28,614
I suspect, it's really telling
us, one end to end test is worth

338
00:18:28,614 --> 00:18:30,804
a billion unit tests and mocks.

339
00:18:31,344 --> 00:18:36,904
So, I prefer one end to
end, one end to end test.

340
00:18:37,224 --> 00:18:45,084
and, that, is what I Can advise
so let's go father We called it.

341
00:18:45,604 --> 00:18:46,304
We called it.

342
00:18:46,384 --> 00:18:47,564
We called it some words.

343
00:18:48,064 --> 00:18:49,604
Yeah, we are here.

344
00:18:50,394 --> 00:18:53,274
So We still talking about communication.

345
00:18:53,304 --> 00:18:59,254
And if you still have to communicate
then Just short shorten the feedback

346
00:18:59,254 --> 00:19:04,994
loops you have I Suppose there is the
smartest guy in the room Who reviews

347
00:19:04,994 --> 00:19:09,314
your pull request once a day And,
well, that's good enough, but, what's,

348
00:19:09,314 --> 00:19:15,364
about an hour of peer coding session
or an hour of mob coding session each

349
00:19:15,364 --> 00:19:17,904
day with ongoing peer to peer reviews?

350
00:19:18,764 --> 00:19:22,934
that shortens feedback loops and
forced sharing of knowledge, you know?

351
00:19:23,274 --> 00:19:28,264
So, try to shorten your feedback
loops, any, any feedback

352
00:19:28,264 --> 00:19:29,694
loops you have in your team.

353
00:19:30,194 --> 00:19:32,364
And, you will be wondered.

354
00:19:32,864 --> 00:19:37,524
So, about communication, most people
feel uncomfortable in uncertainty.

355
00:19:38,024 --> 00:19:40,744
Feeling uncomfortable
leads to wrong decision.

356
00:19:41,704 --> 00:19:44,564
And wrong decision lead to messy codebase.

357
00:19:45,034 --> 00:19:48,144
So, how can, how do we handle it?

358
00:19:48,594 --> 00:19:49,204
Let's see.

359
00:19:49,789 --> 00:19:50,249
Let's see.

360
00:19:50,749 --> 00:19:54,569
As a software engineer, you spend
most of time, most of your time

361
00:19:54,799 --> 00:19:56,989
operating within this triangle.

362
00:19:57,909 --> 00:20:01,719
I call it the Manager Sensara Triangle.

363
00:20:02,039 --> 00:20:07,039
So, that's a, that's a triangle
about money, time, and requirements.

364
00:20:07,829 --> 00:20:12,559
So, your decisions are restricted
by boundaries of this triangle.

365
00:20:13,089 --> 00:20:14,489
But, say me, does it make sense?

366
00:20:14,999 --> 00:20:16,649
Make you feel any better?

367
00:20:17,139 --> 00:20:18,949
I bet not, very much actually.

368
00:20:18,949 --> 00:20:24,759
So how can you, how, how, how
can we empower our re resilience?

369
00:20:25,209 --> 00:20:26,309
It's, simple.

370
00:20:26,369 --> 00:20:28,589
Follow your principles,
share them with your team.

371
00:20:28,589 --> 00:20:29,099
Enjoy.

372
00:20:29,639 --> 00:20:32,269
Sounds simple because that's simple.

373
00:20:32,269 --> 00:20:35,989
Principles are something you
always carry in your pocket.

374
00:20:36,619 --> 00:20:39,559
So, they are always with you.

375
00:20:40,059 --> 00:20:43,309
And you can say, what
even are principles, dude?

376
00:20:43,349 --> 00:20:45,684
What's it, what are you talking about?

377
00:20:46,184 --> 00:20:51,014
There are plenty to choose from, and
you can pick something from above.

378
00:20:51,754 --> 00:20:56,274
You can take some from
Scrum, or Java, or Kanban.

379
00:20:56,694 --> 00:21:00,964
Or you can ever take something from
Prince, if you are a votes for guy.

380
00:21:01,489 --> 00:21:08,459
So, just go with the 10 commandments,
I've heard they work pretty well, indeed.

381
00:21:09,159 --> 00:21:13,939
So, you can pick any system of
principles and values, but you

382
00:21:13,939 --> 00:21:15,319
should embrace them entirely.

383
00:21:15,569 --> 00:21:16,339
That's the key.

384
00:21:16,819 --> 00:21:22,739
You cannot deliver 10 times a day and only
meet business people once a fortnight.

385
00:21:23,239 --> 00:21:26,969
Yeah, that's agile principles,
if you're familiar with.

386
00:21:27,469 --> 00:21:27,899
Yeah.

387
00:21:28,399 --> 00:21:29,539
So, what else?

388
00:21:30,039 --> 00:21:32,069
Build your daily routine step by step.

389
00:21:32,459 --> 00:21:36,419
Have you ever heard that small,
small kids tend to develop attention

390
00:21:36,449 --> 00:21:38,339
deficit hyperactivity disorder?

391
00:21:38,779 --> 00:21:41,459
If they are, if they
aren't properly routinized.

392
00:21:41,959 --> 00:21:46,039
That's exactly what you would
expect as a software engineer.

393
00:21:46,539 --> 00:21:51,409
So, I suggest, fill your day
or week with simple routines.

394
00:21:51,439 --> 00:21:56,049
Every short day, briefing,
paid programming session, maybe

395
00:21:56,049 --> 00:22:00,099
mobbing session, refactoring
session, whatever works for you.

396
00:22:00,729 --> 00:22:05,169
Maybe retrospective or
sprint reviews, whatever.

397
00:22:05,969 --> 00:22:07,279
And just stick to them.

398
00:22:07,779 --> 00:22:13,809
So, few words about bad news, you've
already been out if you choose comfortable

399
00:22:13,809 --> 00:22:19,239
task or those that truly matter, you
spend time trying to figure out the best

400
00:22:19,239 --> 00:22:27,839
solution instead of focusing on workable
one, or you are simply tired, so I suggest

401
00:22:27,929 --> 00:22:33,479
next best action for you, remove one
library from your app today, eliminate

402
00:22:33,519 --> 00:22:35,679
one item from your backlog next sprint.

403
00:22:36,179 --> 00:22:39,589
And, define you're done
and automate it, please.

404
00:22:40,089 --> 00:22:42,929
So, at least get some
rest if you're tired.

405
00:22:43,059 --> 00:22:47,019
but, That's the end actually, around
the end, don't hesitate to reach me,

406
00:22:47,319 --> 00:22:51,909
to reach out to me, all my contact
details are on my website, which you

407
00:22:51,909 --> 00:22:53,939
can find on the second slide above.

408
00:22:54,629 --> 00:23:01,359
And, guys, always remember, syntactic
sugar causes cancer of semicolons.

409
00:23:01,859 --> 00:23:02,759
Bye bye here.

