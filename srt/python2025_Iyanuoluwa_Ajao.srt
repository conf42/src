1
00:00:00,200 --> 00:00:04,409
So I, the three Python concursive patterns

2
00:00:04,909 --> 00:00:06,989
introduction, this is my name.

3
00:00:07,019 --> 00:00:09,899
My name is Ian Oluwajao, I'm from Nigeria.

4
00:00:10,620 --> 00:00:17,189
This is my Twitter account, my GitHub
account, my technical blog, and

5
00:00:17,419 --> 00:00:22,429
my AI related substat newsletter.

6
00:00:22,910 --> 00:00:25,300
I'm a software engineer and AI engineer.

7
00:00:25,800 --> 00:00:28,729
So what is concurrency?

8
00:00:28,730 --> 00:00:33,770
Concurrency is when two or more
tags run in an overlapping manner.

9
00:00:34,270 --> 00:00:38,960
So I have an analogy to
explain what concurrency means.

10
00:00:39,460 --> 00:00:49,294
Imagine you have two YouTube, you have two
You are playing two videos with YouTube.

11
00:00:49,294 --> 00:00:57,529
So there is a YouTube video
account 1 and the second video 2.

12
00:00:57,939 --> 00:00:59,400
Now you are trying to play the two.

13
00:00:59,699 --> 00:01:05,574
Now, but the difference is You play
the first one After it has loaded to

14
00:01:05,574 --> 00:01:12,794
our next point to a point and then the
second one is post So the first one the

15
00:01:12,804 --> 00:01:20,125
first video You are playing it because
There's enough and it has loaded already

16
00:01:20,834 --> 00:01:26,894
Then the second video you pause While
it is loading basically, so basically

17
00:01:26,905 --> 00:01:34,464
the way it works is There's a pause and
play For it to overlap basically, so the

18
00:01:34,464 --> 00:01:39,884
first video is paused While the second
one is plain and then the second one

19
00:01:39,935 --> 00:01:41,975
is paused while the first one is plain.

20
00:01:42,055 --> 00:01:46,865
So that's concurrency So that's the
analogy I used to explain concurrency now

21
00:01:46,875 --> 00:01:52,615
for Parallelism is when two or more tags
run at the same time So the analogy is

22
00:01:52,985 --> 00:01:56,615
now you're playing the first video and
the second video, the YouTube video, the

23
00:01:56,615 --> 00:01:58,558
first YouTube video, and the second video.

24
00:01:58,558 --> 00:02:00,415
Now you're playing simultaneously.

25
00:02:00,505 --> 00:02:02,385
So there's no need for overlap.

26
00:02:02,445 --> 00:02:04,135
So you're not pausing and playing.

27
00:02:04,265 --> 00:02:06,845
So the two are playing simultaneously.

28
00:02:07,235 --> 00:02:08,875
So that's parallelism.

29
00:02:09,665 --> 00:02:15,100
So like I said, the first one, the
first YouTube video, is playing while

30
00:02:15,100 --> 00:02:17,160
the second YouTube video pauses.

31
00:02:17,870 --> 00:02:22,550
The second YouTube video plays while
the first YouTube video pauses.

32
00:02:22,790 --> 00:02:23,920
So that's concurrency.

33
00:02:24,210 --> 00:02:30,980
And then for parallelism is when the two
YouTube videos are played simultaneously.

34
00:02:31,070 --> 00:02:32,410
So that's parallelism.

35
00:02:32,910 --> 00:02:35,925
So Now, this is my definition.

36
00:02:35,925 --> 00:02:40,015
Now this, works because now
for parallelism it works

37
00:02:40,015 --> 00:02:43,585
because there is multiple CPUs.

38
00:02:43,825 --> 00:02:47,965
So because there are multiple
CPUs they can run simultaneously.

39
00:02:48,465 --> 00:02:49,545
That's parallelism.

40
00:02:49,545 --> 00:02:51,855
So that's when you can use parallelism.

41
00:02:52,370 --> 00:02:58,375
Now for concurrency, it is
one CPU, but there are tools.

42
00:02:59,075 --> 00:03:02,700
in, in place for it to run.

43
00:03:02,700 --> 00:03:07,640
So here you create where, explain more
about how they work for Concur, basically.

44
00:03:08,140 --> 00:03:12,040
So now when do you need Concur
and when do you need parallelism?

45
00:03:12,250 --> 00:03:14,800
So you need concurrency when.

46
00:03:15,300 --> 00:03:17,670
It requires CPU bound problems.

47
00:03:17,850 --> 00:03:20,190
So for example, mathematical problems.

48
00:03:20,400 --> 00:03:21,330
So it makes sense.

49
00:03:21,360 --> 00:03:27,260
That's when you need CPU and
then you need multiple CPUs.

50
00:03:28,250 --> 00:03:33,550
Now, for IO bound is when maybe
most, when you need, concurrency,

51
00:03:33,670 --> 00:03:35,950
when there are IO bound problems.

52
00:03:36,190 --> 00:03:38,420
So maybe for example is a network call.

53
00:03:38,750 --> 00:03:39,740
So you need.

54
00:03:40,240 --> 00:03:46,170
Concurrency, so an example was the
YouTube video Yeah, there are two YouTube

55
00:03:46,170 --> 00:03:50,758
videos, of course, and then there is
network call problem So because so the

56
00:03:50,758 --> 00:03:55,180
first one plays while the second one
is pausing No, the reason it is pausing

57
00:03:55,210 --> 00:03:57,970
is because there's a it is waiting.

58
00:03:58,110 --> 00:04:02,060
So it's buffering basically So
it's pausing And then, the first

59
00:04:02,060 --> 00:04:06,470
one you play, the second one you
pause, or the first one you pause,

60
00:04:06,580 --> 00:04:08,160
the second one you play, basically.

61
00:04:08,560 --> 00:04:10,540
So that's when you need concurrency.

62
00:04:10,660 --> 00:04:16,280
to be able to manage the
two YouTube videos playing.

63
00:04:16,780 --> 00:04:22,130
Now, so this is normally when
you want to run a code for this

64
00:04:22,130 --> 00:04:25,135
particular example I'm using.

65
00:04:25,135 --> 00:04:27,389
It is synchronously.

66
00:04:27,570 --> 00:04:32,090
So because it is synchronously,
it will work one after the other.

67
00:04:32,740 --> 00:04:35,600
So when the first one completes,
then the second one too.

68
00:04:35,760 --> 00:04:39,040
An example is, so because we
have the two YouTube videos.

69
00:04:39,545 --> 00:04:44,670
Now you need to complete the first video
before you move to the second video.

70
00:04:45,420 --> 00:04:52,080
So the first one, even while it's waiting,
you have to wait and then it pauses.

71
00:04:52,290 --> 00:04:53,700
It continues basically.

72
00:04:53,940 --> 00:04:58,380
So then when you finish the first
video, then you move to the next video.

73
00:04:58,710 --> 00:05:00,780
So that's synchronously basically.

74
00:05:01,280 --> 00:05:05,490
And then in that scenario, you
use the Python request library.

75
00:05:06,130 --> 00:05:09,270
So the Python request library
is what you use, basically.

76
00:05:09,410 --> 00:05:11,780
So it processes on its own.

77
00:05:12,160 --> 00:05:13,210
It plays on its own.

78
00:05:13,350 --> 00:05:19,760
And you just continue until the total
number of tags has performed, basically.

79
00:05:20,230 --> 00:05:23,900
So in this scenario, it is,
you have two YouTube videos.

80
00:05:24,220 --> 00:05:24,620
Now.

81
00:05:25,090 --> 00:05:29,910
You need to, so after the first video, it
is out on the, after you finish the first

82
00:05:29,910 --> 00:05:31,890
video, then you move to the next video.

83
00:05:32,390 --> 00:05:34,080
So it is one after the other, basically.

84
00:05:34,610 --> 00:05:36,760
you use the request library.

85
00:05:37,260 --> 00:05:40,340
Now, when do we need trading?

86
00:05:41,140 --> 00:05:46,620
Now, this is the code for trading to
explain how trading works in Python.

87
00:05:47,170 --> 00:05:49,174
we use the trading method.

88
00:05:49,175 --> 00:05:52,725
library in the standard library in Python.

89
00:05:53,225 --> 00:05:56,445
So a thread is a different
flow of execution.

90
00:05:57,135 --> 00:05:59,445
The threads are not
executed at the same time.

91
00:05:59,445 --> 00:06:03,905
There are two major differences
from the first program.

92
00:06:04,505 --> 00:06:07,995
in that now, we now have
a thread pool executor.

93
00:06:08,995 --> 00:06:14,895
So this creates a thread, a pool of
threads that run concurrently and an

94
00:06:14,925 --> 00:06:17,915
executor that manages how the threads run.

95
00:06:18,025 --> 00:06:21,805
So in this scenario about
the YouTube example.

96
00:06:22,355 --> 00:06:28,415
each YouTube video is a thread, and
then myself, I'm the executor, so I

97
00:06:28,455 --> 00:06:33,475
decide when it pauses and when it plays,
and it pauses and plays when there

98
00:06:33,475 --> 00:06:35,665
is network, when there is buffering.

99
00:06:36,375 --> 00:06:42,135
it pauses or it plays, depending on
the network happening, basically, but

100
00:06:42,135 --> 00:06:45,875
the threads are the two YouTube videos.

101
00:06:46,375 --> 00:06:51,055
Now, the disadvantage of it is that it
is the operating system that determines

102
00:06:51,075 --> 00:06:55,163
when a tax is passed and another is paid.

103
00:06:55,163 --> 00:06:59,045
data shared between
trades must be protected.

104
00:06:59,045 --> 00:07:02,345
now, for the example, the analogy
I used, which is the YouTube video.

105
00:07:03,125 --> 00:07:07,235
So the operating system determined
when the tax is forced and the

106
00:07:07,235 --> 00:07:08,795
operating system in this scenario now.

107
00:07:09,015 --> 00:07:13,995
and then I decide when it's forced
and when it's split now, and if there

108
00:07:13,995 --> 00:07:20,405
is the need to get to share data
between the two trades, it's risky.

109
00:07:20,525 --> 00:07:25,330
So you need to protect the trade
so that it becomes trade safe.

110
00:07:25,830 --> 00:07:31,080
Now, the next is concurrency is asyncIO.

111
00:07:31,430 --> 00:07:35,500
So like I mentioned, there is concurrency
and then there is parallelism.

112
00:07:35,810 --> 00:07:38,560
Now for concurrency, there are
two libraries that you can use

113
00:07:39,060 --> 00:07:41,180
to perform a concurrent stack.

114
00:07:41,340 --> 00:07:44,510
So it's the first, like I
mentioned, was shredding.

115
00:07:44,690 --> 00:07:48,690
Now the second is now
concurrency and is now asyncIO.

116
00:07:49,080 --> 00:07:50,980
So this is the asyncIO library.

117
00:07:51,425 --> 00:07:57,155
In the standard library, and then
it has a specific keyword for async.

118
00:07:57,195 --> 00:07:59,615
io, which is the async.

119
00:07:59,655 --> 00:08:02,715
And then you can see the async
here, and then you can see the

120
00:08:03,705 --> 00:08:07,443
await keyword in the async.

121
00:08:07,443 --> 00:08:07,450
io.

122
00:08:07,450 --> 00:08:13,960
Now, so now the different, now one
major difference between async.

123
00:08:14,000 --> 00:08:20,060
io and trading is that you
need the specific keywords,

124
00:08:20,090 --> 00:08:21,350
which is async and await.

125
00:08:21,850 --> 00:08:25,593
That is why in that scenario,
we don't use requests.

126
00:08:25,593 --> 00:08:26,710
We use async.

127
00:08:26,890 --> 00:08:29,260
I-A-I-O-H-T-T-P.

128
00:08:29,760 --> 00:08:34,336
So the reason is because request
doesn't have async awai and

129
00:08:34,576 --> 00:08:35,926
we've been waiting for long.

130
00:08:36,136 --> 00:08:39,436
So for now we just use A-I-O-H-T-T-P,

131
00:08:39,936 --> 00:08:44,106
so that's for trading and
async io and concurrency.

132
00:08:44,226 --> 00:08:44,676
Basically.

133
00:08:44,856 --> 00:08:46,236
Now the next, we now go to.

134
00:08:46,541 --> 00:08:47,351
Parallelism.

135
00:08:47,531 --> 00:08:53,361
So here we use the music multi
processing standard library in

136
00:08:53,361 --> 00:08:54,601
the standard library basically.

137
00:08:54,711 --> 00:08:57,161
So can you see this is the code.

138
00:08:57,241 --> 00:09:00,841
This is an example of
running multi processing.

139
00:09:01,341 --> 00:09:04,721
So now in this scenario, it
creates and can determine the

140
00:09:04,721 --> 00:09:06,061
number of pools to create.

141
00:09:06,421 --> 00:09:11,201
So in that same scenario, but now
in this scenario, it is based on the

142
00:09:11,201 --> 00:09:13,511
number of CPUs that you have available.

143
00:09:14,386 --> 00:09:19,956
Now by default it creates the equivalent
of the number of CPUs in your computer So

144
00:09:20,246 --> 00:09:25,636
it is by default because it is based on
the number of CPUs on your computer So now

145
00:09:25,916 --> 00:09:31,206
you might not ask What's the difference
between threading and asyncio because

146
00:09:31,226 --> 00:09:35,896
initially we've already differentiated the
different we have separated the difference

147
00:09:35,916 --> 00:09:40,216
between The concurrency and parallelism.

148
00:09:40,321 --> 00:09:47,086
So where the parallelism is for multiple
processing and concurrency is for

149
00:09:47,296 --> 00:09:50,626
trading and async io now for concurrency.

150
00:09:50,626 --> 00:09:54,256
Now, how do you differentiate
between trading and Async io?

151
00:09:54,286 --> 00:09:58,426
I Or when to use threading or async
type, most of them, it just makes

152
00:09:58,426 --> 00:10:00,746
sense to use, okay, it depends.

153
00:10:00,986 --> 00:10:01,746
It depends.

154
00:10:01,926 --> 00:10:07,776
So if the, if there are
libraries that implemented async

155
00:10:08,356 --> 00:10:10,366
await, it makes sense to use.

156
00:10:10,461 --> 00:10:12,811
The reason is because async.

157
00:10:13,151 --> 00:10:13,941
io is faster.

158
00:10:14,581 --> 00:10:18,861
Not just that, it is less
resourceful compared with trading.

159
00:10:19,361 --> 00:10:20,271
And that is it basically.

160
00:10:20,271 --> 00:10:22,001
So the benefit is faster.

161
00:10:22,391 --> 00:10:27,601
But the problem is that you need to find
libraries that have implemented async.

162
00:10:27,791 --> 00:10:27,921
io.

163
00:10:28,606 --> 00:10:33,916
So is why when we use the A IOH
TT P Library, we needed to use

164
00:10:33,916 --> 00:10:37,156
A-I-O-H-T-T-P for Async to work.

165
00:10:37,396 --> 00:10:38,776
If it doesn't, it'll fail.

166
00:10:39,276 --> 00:10:43,031
Now when they are now in, in a
scenario, they, a scenario like

167
00:10:43,031 --> 00:10:48,546
bottle three in as from AWS, now
we, they implemented a weight.

168
00:10:48,816 --> 00:10:51,666
That's when you might now
need to use trading too.

169
00:10:52,166 --> 00:10:57,606
The first time to use if you make a
decision on when to use it The first is to

170
00:10:57,606 --> 00:11:04,376
ask is there is a library for async await
In that particular tags if there is just

171
00:11:04,376 --> 00:11:10,806
use async io Now if there are no libraries
for that then just use threading basically

172
00:11:11,306 --> 00:11:17,016
So now this is that's one of the problems
with thread 2 is expensive it requires

173
00:11:17,016 --> 00:11:22,986
ram memory it makes sense to just start
with asyncio if there are libraries

174
00:11:23,166 --> 00:11:25,126
that have implemented asyncio already.

175
00:11:26,096 --> 00:11:28,436
If not, then you use threading.

176
00:11:28,986 --> 00:11:32,876
what are the differences between the
multiprocessing asyncio or threading?

177
00:11:33,571 --> 00:11:40,311
So for concurrency tax or IO bound
tax, you use async io and trading.

178
00:11:41,301 --> 00:11:45,981
For CPU tax Bound tax,
you use multi processing.

179
00:11:46,221 --> 00:11:48,891
So that's how you differentiate
when to use multiple process,

180
00:11:48,966 --> 00:11:50,751
multiple processing, or when to use.

181
00:11:50,891 --> 00:11:55,733
thank you for this talk,
have a blessed day.

