1
00:00:01,530 --> 00:00:02,880
Hello everyone, and welcome.

2
00:00:03,870 --> 00:00:07,095
My name is Ani and I'm the
founding member at Cloud.

3
00:00:09,180 --> 00:00:12,960
First of all, I would like to thank
Mark and the team for providing

4
00:00:12,960 --> 00:00:18,155
me with the opportunity to talk
about observability in S 2025

5
00:00:20,910 --> 00:00:24,060
as a name of the topic, suggest
whether to observe or not.

6
00:00:25,050 --> 00:00:26,220
I don't think that's a question.

7
00:00:27,150 --> 00:00:28,950
Everybody is deep down into observability.

8
00:00:30,195 --> 00:00:36,375
The real question is whether it's giving
me the output that I'm expecting, whether

9
00:00:36,375 --> 00:00:40,815
I'm running organiz systems correctly
and looking at the data correctly.

10
00:00:42,075 --> 00:00:48,165
So when we deep dive into the word
observability, we need to look at not

11
00:00:48,170 --> 00:00:53,295
what just it is, but how it plays into
different context across my organization.

12
00:00:54,435 --> 00:00:54,855
Whether I.

13
00:00:59,144 --> 00:01:01,875
Security or work in
compliance or something else.

14
00:01:02,504 --> 00:01:08,325
Observ has something for me, but
what did it, so before we deep dive

15
00:01:08,325 --> 00:01:11,715
into observability and its different
context, let's start with the basics.

16
00:01:13,215 --> 00:01:16,574
Observability is the ability to
understand what's happening inside your

17
00:01:16,574 --> 00:01:18,465
system just by looking at the outputs.

18
00:01:19,365 --> 00:01:23,535
The outputs in this context
are called signals like logs.

19
00:01:27,539 --> 00:01:34,350
It's about answering the question
why something is happening and not

20
00:01:34,890 --> 00:01:38,477
just what went into my application,
but what do I do about it.

21
00:01:40,590 --> 00:01:46,620
So when we look at it has a very
broad spectrum or different context

22
00:01:46,860 --> 00:01:51,390
into organization and let's deep
dive into different context of.

23
00:01:57,885 --> 00:02:03,135
First and foremost is about the technical
context, which revolves around the

24
00:02:03,135 --> 00:02:05,235
core data and tools that send the data.

25
00:02:07,155 --> 00:02:08,865
This is the heart of observability.

26
00:02:09,705 --> 00:02:13,215
This is where you collect all the
telemetry data, like metrics, log

27
00:02:13,215 --> 00:02:18,555
stresses, and you define how to use that
data, how to track, which is simple.

28
00:02:18,555 --> 00:02:19,575
Test sending the data.

29
00:02:24,990 --> 00:02:25,230
Example.

30
00:02:25,230 --> 00:02:31,410
Example, when you look at the technical
data, will for an application recently

31
00:02:31,410 --> 00:02:33,690
deployed, we'll look at the A spikes.

32
00:02:35,040 --> 00:02:37,350
You might want to check
request duration metrics.

33
00:02:37,470 --> 00:02:42,570
You might want to check logs, and you
might want to look at specific process

34
00:02:42,750 --> 00:02:44,520
for the service that are failing.

35
00:02:46,080 --> 00:02:48,945
So this is the core data and
critical for observability.

36
00:02:50,310 --> 00:02:54,120
This defines the basics on
which the system are built on.

37
00:02:55,140 --> 00:02:58,710
But beyond this technical context,
there are specific use cases.

38
00:02:59,640 --> 00:03:04,020
Not all users want to use the depth of all
the data that you're sending in, but they

39
00:03:04,020 --> 00:03:05,760
want to look at dashboards and alerts.

40
00:03:06,810 --> 00:03:11,580
So one of that team is your operational
teams, and they have a very defined

41
00:03:11,580 --> 00:03:14,040
operational context for your system that.

42
00:03:16,560 --> 00:03:20,820
The live and breathe on the data that
is sent by these observability tools,

43
00:03:21,480 --> 00:03:26,339
and they look at system reliability,
incident response, and objectives.

44
00:03:27,299 --> 00:03:31,709
They want to define different
SLA SLOs, SLIs error budgets, or

45
00:03:31,709 --> 00:03:35,850
application, and track those for
the reliability of the system.

46
00:03:37,679 --> 00:03:42,720
For instance, let's say you have an
operational dashboard that shows spike.

47
00:03:45,390 --> 00:03:52,950
Or define different errors at different
service levels, can the ops teams want

48
00:03:52,950 --> 00:03:57,720
to understand how the system degradation
is based on these errors they want?

49
00:03:57,810 --> 00:04:01,530
They not only want to detect these
errors, but want to understand the

50
00:04:01,925 --> 00:04:04,170
impact on of time of the system.

51
00:04:06,630 --> 00:04:09,600
This directly goes hand in
hand with developer experience.

52
00:04:10,770 --> 00:04:16,470
The major outcome of an observer system
is the feedback loop that operation

53
00:04:16,470 --> 00:04:17,940
teams can provide to the development.

54
00:04:20,010 --> 00:04:27,510
So the development context has wherein
the developers understand how it's

55
00:04:28,320 --> 00:04:33,510
from writing and shipping code to
running it in production, how different

56
00:04:33,510 --> 00:04:37,380
tests are perform for my application,
how my C pipeline is working and.

57
00:04:40,410 --> 00:04:43,230
A feature flag, how it
performs in different stages

58
00:04:43,260 --> 00:04:45,030
and how different services.

59
00:04:46,980 --> 00:04:52,020
This helps users to define the
production performance of a certain

60
00:04:52,080 --> 00:04:54,810
application, its features and tune them.

61
00:04:55,680 --> 00:05:00,090
It also helps to understand each
cases for different feature flags that

62
00:05:00,090 --> 00:05:07,440
have been created, so the development
context and DevOps go hand in hand.

63
00:05:08,250 --> 00:05:09,450
But that doesn't stop here.

64
00:05:10,950 --> 00:05:14,460
A user facing application is of no
use with a hundred percent working

65
00:05:14,460 --> 00:05:18,900
backing system and no user experience
that works for the customers.

66
00:05:20,040 --> 00:05:27,270
So from a business perspective, a
hundred percent backend, uh, has no use.

67
00:05:27,270 --> 00:05:33,270
So the define different observative
response observability requirements

68
00:05:33,630 --> 00:05:34,830
for user facing application.

69
00:05:36,285 --> 00:05:39,915
And that is basically goes into
the UX context, how the user is

70
00:05:39,915 --> 00:05:45,105
experiencing the product, how you
monitor, how your funded behaves, and

71
00:05:45,345 --> 00:05:47,475
how your resource flows are working.

72
00:05:49,245 --> 00:05:54,465
They use tools like real monitoring
s checks to help answer different

73
00:05:55,575 --> 00:05:58,005
challenges into user experience.

74
00:05:59,205 --> 00:06:01,650
Is, is.

75
00:06:03,645 --> 00:06:09,525
Are my customers abandoning cars
because frontend timeouts does my site

76
00:06:09,525 --> 00:06:11,174
load in five seconds instead of two?

77
00:06:12,465 --> 00:06:17,895
How is my bounce rate and different red
flags that affects different user loads?

78
00:06:19,395 --> 00:06:25,635
The frontend monitoring it help improve
the user interactions with the system.

79
00:06:32,849 --> 00:06:37,140
Business users are concerned about the
user observability and its outcomes.

80
00:06:38,490 --> 00:06:39,090
If the,

81
00:06:41,520 --> 00:06:45,719
uh, technical details that you're getting
are not helping business context, then

82
00:06:45,900 --> 00:06:48,120
this is a huge drawback to your system.

83
00:06:49,710 --> 00:06:55,620
The system needs to bridge the gap between
technical health and the business impact.

84
00:06:57,210 --> 00:06:57,780
If you.

85
00:07:01,050 --> 00:07:05,790
You need to able to correlate that with
five x error in the checkout service

86
00:07:06,210 --> 00:07:09,600
or in some of backend service, which
is not able to work with the database.

87
00:07:10,680 --> 00:07:16,890
So if you can determine what is
causing the revenue loss because of

88
00:07:16,890 --> 00:07:22,260
the application issues, then business
can get very good insight into.

89
00:07:32,370 --> 00:07:37,020
Piggyback on security and compliance
for your application health.

90
00:07:39,030 --> 00:07:44,700
When you talk about security, it,
the users of the system, the security

91
00:07:44,705 --> 00:07:50,730
user system needs to ingest the logs
and traces that detect anomalies or

92
00:07:50,730 --> 00:07:56,430
detections and, and investigate any
breaches into the application in, uh, use.

93
00:07:57,719 --> 00:08:02,280
For example, example, a spike in login
attempts from a single IP can range

94
00:08:03,120 --> 00:08:05,070
or can be spotted into tive data.

95
00:08:07,049 --> 00:08:13,620
So it also can help you look at the
different, uh, pricing for applications

96
00:08:14,099 --> 00:08:18,025
or different services within the
application and find out user compromise.

97
00:08:19,200 --> 00:08:19,590
So these.

98
00:08:26,205 --> 00:08:27,105
Security incident.

99
00:08:27,105 --> 00:08:28,905
It's just not application downtime.

100
00:08:29,565 --> 00:08:36,225
It basically costs, uh, business and have
different penalties at different regions.

101
00:08:37,245 --> 00:08:42,105
So to avoid this, different teams
use different compliance methods.

102
00:08:43,185 --> 00:08:48,915
Think of GDPR, hipaa, SOC two that you
eventually hear about compliances and.

103
00:08:53,700 --> 00:08:59,010
System also helps to maintain audit data,
access logs, and track consideration

104
00:08:59,010 --> 00:09:03,930
changes all times that are essential for
this compliance and audit requirements.

105
00:09:05,400 --> 00:09:11,550
It also helps to define policies like
longer retention, uh, than authenticated

106
00:09:11,820 --> 00:09:13,385
access to the sensitive data.

107
00:09:20,280 --> 00:09:24,270
Enhancing observability in different
contexts helps user look at

108
00:09:24,270 --> 00:09:25,500
the data in different contexts.

109
00:09:26,010 --> 00:09:28,410
But what is the use of this context

110
00:09:30,630 --> 00:09:33,210
when you wanna utilize the data?

111
00:09:33,240 --> 00:09:38,490
Correlation is the key application
teams might be generating and

112
00:09:38,670 --> 00:09:43,050
utilizing infrastructure metrics
for sending the software, uh,

113
00:09:43,080 --> 00:09:44,700
details how, how it is performing.

114
00:09:45,690 --> 00:09:49,650
It's helpful to monitor this
performance and resource usage.

115
00:09:50,115 --> 00:09:51,075
For the applications.

116
00:09:51,210 --> 00:09:52,010
Applications.

117
00:09:52,015 --> 00:09:56,115
But for businesses, the data
needs to be domain specific.

118
00:09:57,135 --> 00:10:01,305
What is my user experience, whether it
helps me to achieve the business goals.

119
00:10:01,845 --> 00:10:04,575
So correlations of this metrics help

120
00:10:06,675 --> 00:10:11,505
the business leaders and the,
uh, other users to use of the.

121
00:10:15,540 --> 00:10:20,339
If you track the latency to number
of active users, if you track the,

122
00:10:21,060 --> 00:10:28,739
uh, through, uh, block signups or
checkouts right, then this is more

123
00:10:28,739 --> 00:10:31,530
helpful to the users than just
looking at the different dashboards.

124
00:10:33,390 --> 00:10:37,199
The key differences between application
metrics and business metrics is that they

125
00:10:39,569 --> 00:10:43,349
need to go beyond system performance
to define the business performance.

126
00:10:44,115 --> 00:10:48,255
They need to go beyond latency, CPN
error rates to define the convergence,

127
00:10:48,285 --> 00:10:53,474
churn, and error research they need
to provide what is affecting the

128
00:10:53,474 --> 00:10:56,834
system of time to what is affecting
the revenue and product decisions.

129
00:10:58,185 --> 00:11:00,885
So correlating the application
business metrics is the key.

130
00:11:01,515 --> 00:11:08,115
Apart from isolating the technical issues,
you need to be able to satisfaction so.

131
00:11:09,240 --> 00:11:12,540
If I'm getting a drop-in checkout, I
need to be able to find out which is

132
00:11:12,540 --> 00:11:17,460
the find error that is causing this,
and that needs to be defined with

133
00:11:17,550 --> 00:11:19,590
different tools that businesses can use.

134
00:11:21,030 --> 00:11:27,390
So if you want to look at different,
uh, uh, business outcomes, we need

135
00:11:27,390 --> 00:11:30,330
to have a visual correlation between
the matters that we're ingesting

136
00:11:30,480 --> 00:11:34,080
and based on the we're consistent.

137
00:11:38,850 --> 00:11:44,370
And give the fine access to the issues
that you're getting into application.

138
00:11:44,850 --> 00:11:49,890
For example, I'm able to track which
user is getting the checkout, uh, bad

139
00:11:49,890 --> 00:11:55,230
checkout experiences, which region
is having the most latency, which

140
00:11:55,230 --> 00:12:00,360
region is having different plans for
mobile and let's say browser users,

141
00:12:01,500 --> 00:12:03,330
which users are getting feature.

142
00:12:04,575 --> 00:12:08,565
Which product our ID are getting, uh,
lower checkouts and whatnot, right?

143
00:12:08,865 --> 00:12:14,145
So this is very granular filter
that businesses can look at.

144
00:12:15,135 --> 00:12:25,515
And essentially this goes into providing
alerts for specific things when we only

145
00:12:25,515 --> 00:12:27,315
monitor the infrastructure application.

146
00:12:31,350 --> 00:12:34,170
Business and application,
we give composite alerts.

147
00:12:34,860 --> 00:12:42,900
For example, if an error rate spike
is giving issues into conversion stop,

148
00:12:43,410 --> 00:12:48,330
or is giving issues into purchase
checkouts, or is giving issues into

149
00:12:48,330 --> 00:12:51,660
user signups, this is the alert
that businesses want to look at.

150
00:12:51,990 --> 00:12:57,270
Rather than just, okay, I got an
500, or I got 50% error rate into

151
00:12:57,270 --> 00:12:58,560
application for last five minutes.

152
00:13:00,375 --> 00:13:06,645
The SO for that is should be a mix
of system health and user experience.

153
00:13:09,165 --> 00:13:16,395
So going beyond when we are
using an system, this needs to

154
00:13:16,395 --> 00:13:17,834
have a unified system inside.

155
00:13:19,155 --> 00:13:20,745
That's where the coordination helps.

156
00:13:21,285 --> 00:13:24,510
That's where you can correlate
business metrics to applications.

157
00:13:25,469 --> 00:13:30,270
That's where when you look at certain
logs for 500, you can look at the time

158
00:13:30,270 --> 00:13:33,569
series of it at the same time, see
the events which are causing this.

159
00:13:34,739 --> 00:13:40,739
If a system does not have a unified view
of different data that it is ingesting

160
00:13:40,979 --> 00:13:46,199
and provide you with a capability to
use that view to better utilize the uh,

161
00:13:50,714 --> 00:13:50,935
so.

162
00:13:53,430 --> 00:13:55,680
Application metrics are
primarily technical.

163
00:13:56,250 --> 00:13:59,280
It talks about things like
latency, error rate usage,

164
00:13:59,340 --> 00:14:01,740
database query time and whatnot.

165
00:14:02,280 --> 00:14:04,260
But business metrics
are more product driven.

166
00:14:05,040 --> 00:14:09,750
Whether I'm able to retain my
daily active users, what is the

167
00:14:09,750 --> 00:14:11,070
adoption of my new features?

168
00:14:12,030 --> 00:14:13,500
What is my revenue for transaction?

169
00:14:14,160 --> 00:14:19,020
What is my PCO for total
infrastructure that I'm investing in?

170
00:14:19,500 --> 00:14:22,710
These are different things that different
roles in the system are looking at.

171
00:14:23,160 --> 00:14:25,800
And they're critical for everyone.

172
00:14:26,910 --> 00:14:32,970
So business metrics will tell you where
the business is based on details that

173
00:14:32,970 --> 00:14:34,500
you provide with the application metrics.

174
00:14:35,880 --> 00:14:41,790
Correlating the two is very essential
and it turns the, from a mere backend

175
00:14:41,790 --> 00:14:43,410
system into a full stack superpower.

176
00:14:44,700 --> 00:14:45,420
Let give you very real time.

177
00:14:47,805 --> 00:14:47,925
I.

178
00:14:54,314 --> 00:14:55,635
Standard payment processing.

179
00:14:57,165 --> 00:15:01,905
The payment processing works across
multiple regions, but I'm getting five

180
00:15:01,905 --> 00:15:04,694
xx and which is affecting my overall SLO.

181
00:15:06,045 --> 00:15:13,785
When I look at this, I see that it
can be at different places, but if I

182
00:15:13,785 --> 00:15:20,325
have a custom label that gives metrics
about success, signups, or purchase.

183
00:15:22,770 --> 00:15:28,770
Detailed granularity with user type,
region plan, or feature flags for that

184
00:15:29,100 --> 00:15:39,240
thing, I can, uh, kind of aggregate based
on that and get the details about, so if

185
00:15:39,240 --> 00:15:44,339
a user can get for this region and for
this device type, I'm getting my users

186
00:15:44,339 --> 00:15:47,520
affected, they can easily change that and.

187
00:15:53,040 --> 00:15:55,290
So correlating that is very key.

188
00:15:56,250 --> 00:15:59,640
But at the same time, the
upgrade system needs to have the

189
00:15:59,640 --> 00:16:01,265
capability to correlate that.

190
00:16:02,665 --> 00:16:08,070
An observed system with the
correlation can give you more, uh,

191
00:16:09,060 --> 00:16:11,580
output than one, which without it.

192
00:16:12,870 --> 00:16:20,130
So the, at the end of it, the
system has a defined cycle.

193
00:16:21,405 --> 00:16:24,555
It'll gather application and
business metrics based on

194
00:16:24,555 --> 00:16:25,905
the tools that you're using.

195
00:16:26,175 --> 00:16:33,285
They can be at different granularity,
but when you ingest the metrics, how

196
00:16:33,285 --> 00:16:39,915
the system is correlating that, create
relationships and visualize the data in a

197
00:16:39,915 --> 00:16:45,255
way that any user of the system based on
its role can define different data sets,

198
00:16:45,975 --> 00:16:47,715
define different dashboards and alerts.

199
00:16:48,765 --> 00:16:53,625
Generate insights from the,
uh, ingested data is the key.

200
00:16:56,325 --> 00:17:01,455
So to sum it up, observability
has many contexts.

201
00:17:02,115 --> 00:17:05,444
Technical, operational, user experience,
business security, and compliance.

202
00:17:06,495 --> 00:17:10,700
They all are necessary or they might not
be necessary for different enterprise.

203
00:17:17,310 --> 00:17:18,450
Application and business.

204
00:17:18,630 --> 00:17:20,280
It brings observative life.

205
00:17:21,030 --> 00:17:25,560
It turns the raw data into
real insight, real insight.

206
00:17:29,850 --> 00:17:31,080
Thank you for listening in.

207
00:17:32,070 --> 00:17:37,080
I'm happy to answer any questions offline
or deep dive into specific things.

208
00:17:38,370 --> 00:17:39,210
Thank you very much.

