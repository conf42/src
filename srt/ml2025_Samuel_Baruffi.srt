1
00:00:00,510 --> 00:00:01,350
Hello everyone.

2
00:00:01,380 --> 00:00:02,550
Welcome to my session.

3
00:00:02,550 --> 00:00:07,650
My name is Samuel bfi and I am a
principle solutions architect with AWS.

4
00:00:08,130 --> 00:00:12,330
On today's presentation, I'm gonna be
talking about Amazon Bedrock Agents,

5
00:00:12,570 --> 00:00:16,440
and the goal of this presentation
is to show you how really we have

6
00:00:16,470 --> 00:00:21,669
enter an agent ecosystem and we
have entered the Gentech era.

7
00:00:22,210 --> 00:00:27,190
So actually, when we talked about
agents it can be confusing because

8
00:00:27,370 --> 00:00:28,960
that terminology can be quite.

9
00:00:29,525 --> 00:00:33,845
Overuse and for different companies
and can mean different things.

10
00:00:33,845 --> 00:00:37,984
So let's just set the level of
understanding of what we're gonna be.

11
00:00:38,114 --> 00:00:42,734
Ma you know what we mean here on this
presentation, when we talk about the

12
00:00:42,734 --> 00:00:50,234
Gentech AI at the very high level,
eight AI agents are autonomous systems

13
00:00:50,564 --> 00:00:56,624
that can reason, plan and complete
multi-step tasks on behalf of humans.

14
00:00:57,464 --> 00:00:58,694
So how do they do that?

15
00:00:59,474 --> 00:01:04,874
Agents will break down high level
objectives into executable tasks

16
00:01:04,994 --> 00:01:06,615
That's also known as planning.

17
00:01:07,244 --> 00:01:10,914
Once they have those tasks, they'll
try to accomplish those tasks

18
00:01:10,914 --> 00:01:12,984
using tools and informations.

19
00:01:13,194 --> 00:01:16,914
Information can be knowledge, for example,
from knowledge base that from your

20
00:01:17,514 --> 00:01:20,974
specific proprietary enterprise data sets.

21
00:01:21,214 --> 00:01:24,934
And those tools and knowledges are
gonna be made available to them,

22
00:01:25,144 --> 00:01:26,854
and that's what we call actions.

23
00:01:27,649 --> 00:01:32,989
More importantly, these systems are
actually capable of observing the

24
00:01:32,989 --> 00:01:39,199
results and that updating the plan
in real time until the defined goal

25
00:01:39,199 --> 00:01:41,479
set by the human is accomplished.

26
00:01:41,689 --> 00:01:43,759
And that's what we mean by reasoning.

27
00:01:44,539 --> 00:01:49,454
So I'll give you an example instead,
if you have an an example of trying

28
00:01:49,454 --> 00:01:54,374
to check availability of a meeting
room, rather than just checking the

29
00:01:54,374 --> 00:01:58,634
availability of the meeting room,
an AI agent can actually access your

30
00:01:58,634 --> 00:02:01,364
calendar, check everyone's availability.

31
00:02:01,364 --> 00:02:03,319
That should be on that specific meeting.

32
00:02:03,734 --> 00:02:06,074
It can send, invite to
that specific meeting.

33
00:02:06,284 --> 00:02:10,874
It can then monitor for responses
on that specific meeting.

34
00:02:11,054 --> 00:02:16,154
And if some of the critical persons people
actually respond with a no, it can follow

35
00:02:16,154 --> 00:02:20,935
up asking for potentially times that
would work for them and that do that work.

36
00:02:21,265 --> 00:02:24,904
So be a multi-step and
driven autonomous solution.

37
00:02:24,954 --> 00:02:30,024
So why is now the era for AI agents right?

38
00:02:31,060 --> 00:02:35,630
Multiple research organizations in
the world last year and this year.

39
00:02:35,720 --> 00:02:41,270
These two numbers I'm gonna show here
are actually from Garner from, trends

40
00:02:41,270 --> 00:02:44,930
that they expect to see in the next
couple of years is starting this year.

41
00:02:45,170 --> 00:02:50,210
So the first one is 33% of enterprise
software applications will include

42
00:02:50,210 --> 00:02:57,470
some sort of a ent AI by 2028, which
is upfront less than 1% in 2024.

43
00:02:58,010 --> 00:03:02,810
And then 15% of the day-to-day
work decisions will be made

44
00:03:02,990 --> 00:03:06,470
autonomously through Agent AI by 2028.

45
00:03:06,980 --> 00:03:13,170
So you can see, about three years, a
very significant chunk of the work is

46
00:03:13,170 --> 00:03:16,650
expected to be handled by AI agents.

47
00:03:17,250 --> 00:03:22,659
So it's very important that companies
start to realizing the prospect and

48
00:03:22,659 --> 00:03:25,690
the opportunity that lie ahead, but.

49
00:03:26,275 --> 00:03:30,114
There is a evolution of agents
that have happened in the

50
00:03:30,114 --> 00:03:32,215
industry in the last year or so.

51
00:03:33,535 --> 00:03:37,584
As large language models became
more and more intelligent and

52
00:03:37,584 --> 00:03:42,805
more and more powerful, it has
unlocked different use cases.

53
00:03:42,894 --> 00:03:46,644
So in the beginning, you'd have maybe
a simple assistant, would you be able

54
00:03:46,644 --> 00:03:51,475
to ask basic queries and you get a
response and maybe it will be like.

55
00:03:51,999 --> 00:03:55,899
Using a single tool use, maybe
you were gonna connect with your

56
00:03:56,179 --> 00:03:59,390
rag system with your knowledge
base and you use that, right?

57
00:03:59,390 --> 00:04:02,329
It would be a simple, a single step test.

58
00:04:03,140 --> 00:04:04,129
Then, companies.

59
00:04:04,849 --> 00:04:08,809
Using the power of these
large language models created

60
00:04:08,809 --> 00:04:10,489
deterministic agents, right?

61
00:04:10,489 --> 00:04:14,809
So it's a very street strict
procedure within AWS we call the,

62
00:04:14,809 --> 00:04:17,329
or we call those more like flows.

63
00:04:17,360 --> 00:04:21,980
So be a flow of steps that are
predetermined and you just have a router

64
00:04:21,980 --> 00:04:26,510
asking After that, a lot of companies.

65
00:04:27,050 --> 00:04:32,310
Like Amazon and AWS have enabled
organizations to create autonomous agents.

66
00:04:32,580 --> 00:04:37,290
So you can actually have the planning
aspect that I meant before where it can

67
00:04:37,290 --> 00:04:43,050
go and understanding the objective and
monitor for the outputs that the model

68
00:04:43,050 --> 00:04:46,200
is putting into a multi-step tasks.

69
00:04:46,230 --> 00:04:50,740
But there'll be a single agent in this
case, which is, it might be expanding

70
00:04:50,740 --> 00:04:52,450
the two sets to multiple tools.

71
00:04:52,450 --> 00:04:55,180
Maybe you have a calculator, maybe you
have a browser access, maybe you have.

72
00:04:55,510 --> 00:05:00,040
Web search access, maybe have some
sort of proprietary API that you're

73
00:05:00,040 --> 00:05:06,640
connecting and enabling that agent
to use, but it's just a single agent.

74
00:05:06,670 --> 00:05:12,460
Right now, what has become more and
more popular and what we believe is the

75
00:05:12,460 --> 00:05:15,490
future is this agent, virtual workers.

76
00:05:16,015 --> 00:05:20,905
Rather than just having a single agent
that has the capability of running

77
00:05:21,145 --> 00:05:25,915
the planning and multi-step tasks, now
you can have a combination of powerful

78
00:05:26,365 --> 00:05:32,065
experience and expert agents on a
specific areas that will work together

79
00:05:32,215 --> 00:05:34,555
to achieve a much higher level task.

80
00:05:34,735 --> 00:05:38,155
So you can think about long
running systems that you actually

81
00:05:38,155 --> 00:05:41,485
mimic human things rather
than just mimic human actions.

82
00:05:41,725 --> 00:05:44,125
And it can be cross
organizational boundaries.

83
00:05:44,875 --> 00:05:50,365
And the more you see on this slide that
you see on the right, the more autonomy in

84
00:05:50,365 --> 00:05:52,585
business impact we will actually provide.

85
00:05:53,875 --> 00:06:00,205
So with that said, how do we at AWS
offer services and capabilities for

86
00:06:00,205 --> 00:06:06,385
our customers to innovate and really
jump into this agent tech award?

87
00:06:06,835 --> 00:06:10,825
We have what we call the AWS
Generative AI stack, which is

88
00:06:10,825 --> 00:06:12,655
divided by three different layers.

89
00:06:13,360 --> 00:06:17,680
The first layer, which is the bottom
one, is the infrastructure that AWS

90
00:06:17,680 --> 00:06:20,290
provides to build and train models.

91
00:06:20,650 --> 00:06:25,930
So we have Amazon SageMaker, ai,
which is this huge ecosystem for,

92
00:06:26,060 --> 00:06:30,620
cleaning data, training your model,
influencing your model, and you actually

93
00:06:30,620 --> 00:06:32,690
be the whole managed infrastructure.

94
00:06:33,080 --> 00:06:37,915
But on top of that, we also have our
own hardware or partners for GPU and.

95
00:06:38,315 --> 00:06:43,835
AI acceleration like Nvidia, and we have
our own hardware called AWS Training and

96
00:06:43,835 --> 00:06:49,225
NWS information that provides the best
price performance into the AWS Cloud.

97
00:06:50,305 --> 00:06:52,825
The second level of our AWS generative.

98
00:06:53,395 --> 00:06:58,975
AI stack is the ability for you
to use models and tools so you can

99
00:06:58,975 --> 00:07:04,165
think about building blocks to build
your generative AI applications.

100
00:07:04,225 --> 00:07:08,245
And that's our very popular
service, Amazon Bedrock.

101
00:07:08,305 --> 00:07:11,605
And we're gonna be talking today
in the next couple of slides.

102
00:07:11,605 --> 00:07:14,685
And the demo that I want to
show you is gonna be building

103
00:07:14,685 --> 00:07:17,175
on top of Bedrock, but our.

104
00:07:17,490 --> 00:07:21,400
Highest layer is more on the
application to boost productivity.

105
00:07:21,670 --> 00:07:25,125
We have a suite of services
called Amazon Queue, and Amazon

106
00:07:25,125 --> 00:07:26,985
Queue has different flavors.

107
00:07:26,985 --> 00:07:31,125
In this slide, this is presenting two of
them, which is the Amazon Queue business,

108
00:07:31,155 --> 00:07:36,265
which is this assistant that can actually
provide a chat interface, but also

109
00:07:36,265 --> 00:07:41,345
automate a lot of tasks and connecting to
your very common applications like your.

110
00:07:41,750 --> 00:07:46,550
Office 365, your Google Drive, your
Salesforce, your Zoom, and it can

111
00:07:46,670 --> 00:07:50,870
put all that into a single pane of
class with a lot of the guardrails

112
00:07:50,870 --> 00:07:53,090
and security that enterprise requires.

113
00:07:53,330 --> 00:07:58,349
And on the other spectrum is Amazon
Queue developer that provides developers

114
00:07:58,390 --> 00:08:04,810
the capability of using ai, powerful
AI models to boost their productivity

115
00:08:05,350 --> 00:08:07,150
while developing applications.

116
00:08:08,080 --> 00:08:12,570
So that is the AWS generative
AI stack that we offer at

117
00:08:12,570 --> 00:08:14,190
AWS at the very high level.

118
00:08:15,090 --> 00:08:18,960
What we are gonna talk today is about
Amazon Bedrock, very specifically

119
00:08:18,960 --> 00:08:22,870
Amazon Bedrock agents, because
this presentation is for agents

120
00:08:22,870 --> 00:08:25,690
itself, but Bedrock is a suite.

121
00:08:26,290 --> 00:08:31,800
Of building blocks that allows you to
build very quickly and very with a lot

122
00:08:31,800 --> 00:08:34,700
of the scale in mind and also security.

123
00:08:34,910 --> 00:08:36,380
Your generative a application.

124
00:08:36,380 --> 00:08:37,760
So you have a lot of tools here.

125
00:08:38,090 --> 00:08:41,240
Tools could be your knowledge base,
which is the manage, retrieve,

126
00:08:41,240 --> 00:08:43,540
augmented generation system.

127
00:08:43,720 --> 00:08:47,920
You can have, data automation that you
can upload PDFs and you can extract

128
00:08:47,920 --> 00:08:49,630
all those PDFs with the location.

129
00:08:49,810 --> 00:08:51,340
You can fine tune your model.

130
00:08:51,340 --> 00:08:52,660
You can do model distillation.

131
00:08:53,385 --> 00:08:54,885
We are gonna talk about agents.

132
00:08:54,915 --> 00:08:58,845
So agents will be a very important
part of this capability that is native.

133
00:08:59,085 --> 00:09:00,855
But you also have developer experience.

134
00:09:00,855 --> 00:09:02,265
You have prompt management.

135
00:09:02,265 --> 00:09:03,165
You can create prompts.

136
00:09:03,165 --> 00:09:05,055
You can create variables
within those prompts.

137
00:09:05,235 --> 00:09:09,645
You can store them on AWS, you have
a whole suite of ID capabilities

138
00:09:09,645 --> 00:09:14,375
for you to really experiment and
do POCs and test different ideas.

139
00:09:14,675 --> 00:09:17,765
Through the id you have
prompt optimization.

140
00:09:17,825 --> 00:09:18,995
That is pretty cool.

141
00:09:18,995 --> 00:09:20,465
Functionality on Bedrock.

142
00:09:20,985 --> 00:09:26,955
The core functionality on Bedrock
is really making models, AI models,

143
00:09:26,955 --> 00:09:32,875
foundational models from Amazon and
other third party like Tropic AI 21

144
00:09:32,875 --> 00:09:36,115
Cohere, mistro Yama, and many more.

145
00:09:36,900 --> 00:09:40,800
Manage for you in a fully
serverless capability, right?

146
00:09:40,800 --> 00:09:43,680
So you don't need to, you don't
need to spin any instance.

147
00:09:43,860 --> 00:09:45,690
You don't need to pay for any GPU.

148
00:09:45,810 --> 00:09:49,880
You just pay for the consumption
that you have, in input tokens.

149
00:09:50,210 --> 00:09:53,630
Output tokens and you know that
is what you're gonna be paying.

150
00:09:54,140 --> 00:09:56,780
You can also explore different models.

151
00:09:56,780 --> 00:10:01,640
You can maybe train a model from another
outside bedrock, and you can import

152
00:10:01,640 --> 00:10:03,890
the model to be hosted on bedrock.

153
00:10:04,070 --> 00:10:08,390
You can use the bedrock marketplaces that
actually expand the capability of models.

154
00:10:08,700 --> 00:10:12,870
Much further than just what is
available via serverless on demand

155
00:10:12,870 --> 00:10:17,250
capability, there is a whole suite
of evaluation metrics, right?

156
00:10:17,580 --> 00:10:19,260
Applications are very powerful.

157
00:10:19,320 --> 00:10:22,080
AI applications are very powerful,
but they're really important

158
00:10:22,080 --> 00:10:23,610
for you to run evaluations.

159
00:10:23,610 --> 00:10:28,680
So a Amazon bedrock also provides you
with a suite of tooling and capabilities

160
00:10:28,680 --> 00:10:30,390
to do programmatic evaluation.

161
00:10:30,690 --> 00:10:33,780
A rag evaluation, human
in the loop evaluation.

162
00:10:33,810 --> 00:10:37,050
And just recently we announced the
large language model as a judge.

163
00:10:37,050 --> 00:10:41,380
So you can have another judge you can
have another large language model judging

164
00:10:41,380 --> 00:10:43,600
the response from your AI application.

165
00:10:43,780 --> 00:10:47,040
And then, you can collect those
metrics and have dashboards and,

166
00:10:47,240 --> 00:10:50,120
improve as you see the those results.

167
00:10:50,540 --> 00:10:52,610
And then of course, you can
have inference at scale.

168
00:10:52,610 --> 00:10:53,450
You can have different.

169
00:10:53,715 --> 00:10:56,895
Flexibility of options on
how you consume those models.

170
00:10:57,045 --> 00:10:58,635
You can have optimized inference.

171
00:10:58,635 --> 00:11:02,025
By prompt caching, you can have
intelligent prompt routing, so

172
00:11:02,025 --> 00:11:05,535
depending on the question that you
are sending to bedrock, bedrock can

173
00:11:05,535 --> 00:11:08,055
automatically redirect to the right model.

174
00:11:08,345 --> 00:11:14,435
That will be the best suited to answer and
execute that specific task or question.

175
00:11:14,525 --> 00:11:15,875
And it's global reach.

176
00:11:15,875 --> 00:11:17,345
Amazon Bedrock's, global reach.

177
00:11:17,345 --> 00:11:21,585
There are many regions on AWS
cloud that have bedrock enable,

178
00:11:21,645 --> 00:11:25,455
and you can also have cross region
inference for a specific model.

179
00:11:25,455 --> 00:11:28,850
So you can actually utilize the
capacity across different regions

180
00:11:28,850 --> 00:11:32,180
with a single endpoint, and that
makes your life much easier, right?

181
00:11:32,570 --> 00:11:34,520
At the very high level and very quickly.

182
00:11:34,850 --> 00:11:40,250
That is what Bedrock is and bedrock just
becoming bigger and providing you more

183
00:11:40,420 --> 00:11:45,430
flexibility and building blocks to build
your generative a applications with the

184
00:11:45,430 --> 00:11:50,320
whole experience that you are, if you are
already using AWS, you are familiar with.

185
00:11:53,140 --> 00:11:56,380
It's very important to mention
it's secure and responsible.

186
00:11:56,380 --> 00:12:00,040
So you can use VPC private
link, you can use encryption.

187
00:12:00,220 --> 00:12:04,330
No customer data to any model
provider including AWS or third

188
00:12:04,330 --> 00:12:06,610
party are collected and store.

189
00:12:06,740 --> 00:12:09,890
You can use guardrails, so you can
set different restrictions from what

190
00:12:09,890 --> 00:12:13,640
your application might be able to
respond and the things you don't

191
00:12:13,640 --> 00:12:15,350
want the application to respond.

192
00:12:15,350 --> 00:12:17,970
There is a lot of
compliance regulation that.

193
00:12:18,330 --> 00:12:21,270
Bedrock has passed and has the stamp.

194
00:12:21,520 --> 00:12:25,540
But also there is a lot of open source
integration you can integrate to Lang Chan

195
00:12:25,840 --> 00:12:29,180
Graph Lamb Index through ai and many more.

196
00:12:29,390 --> 00:12:33,560
Open source integration
frameworks can tie into the vast

197
00:12:33,940 --> 00:12:35,770
service, which is Amazon Bank.

198
00:12:37,240 --> 00:12:41,110
But because we are talking
about agents AWS offers a broad

199
00:12:41,110 --> 00:12:42,700
choice for deploying agents.

200
00:12:43,175 --> 00:12:45,070
And here are just three
examples, but these.

201
00:12:45,350 --> 00:12:46,310
Could be way bigger.

202
00:12:46,310 --> 00:12:49,610
If you want to run agents that
are specialized, you can use the Q

203
00:12:49,610 --> 00:12:54,380
agents on the Q4 business or even Q
developer and you can automate your

204
00:12:54,380 --> 00:12:56,390
enterprise productivity and workflow.

205
00:12:56,510 --> 00:12:59,580
We are not gonna talk about those
agents, and then on the right

206
00:12:59,580 --> 00:13:01,620
side, you can do it yourself.

207
00:13:01,620 --> 00:13:04,230
You can, for expert
developers potentially using.

208
00:13:04,555 --> 00:13:09,175
Open source frameworks you can see,
build that on AWS, use our compute,

209
00:13:09,175 --> 00:13:13,955
use bedrock models, use our serverless
capabilities like lambda step functions

210
00:13:13,985 --> 00:13:16,265
and automate and create your application.

211
00:13:16,685 --> 00:13:23,205
What we'll talk today from the remaining
of the session today is using Amazon

212
00:13:23,205 --> 00:13:31,005
Bedrock agents, which are manage service
that has all the scaling and capability.

213
00:13:31,400 --> 00:13:34,100
An orchestration that
will be foundational.

214
00:13:34,310 --> 00:13:37,430
The foundational model will
power those agents, right?

215
00:13:37,490 --> 00:13:43,370
So this is our fully managed solution
for building and deploy agents.

216
00:13:43,670 --> 00:13:48,530
What sets actually Amazon Bedrock Agents
apart is the building foundational

217
00:13:48,530 --> 00:13:50,690
models, powerful orchestration.

218
00:13:50,720 --> 00:13:54,670
So the orchestration and the
flexibility on how you decide to

219
00:13:54,970 --> 00:13:58,700
build those agents are something
that was taught from the ground up.

220
00:13:59,255 --> 00:14:01,655
This means you are not
starting from scratch.

221
00:14:01,925 --> 00:14:06,125
You're leveraging sophisticated AI
capabilities right out of the box that

222
00:14:06,125 --> 00:14:08,045
AWS has made it available for you.

223
00:14:08,465 --> 00:14:12,365
So if you don't have a large data
science team, or you're small startup

224
00:14:12,365 --> 00:14:15,485
and you just want to start using
agents that have the capability of

225
00:14:15,515 --> 00:14:22,275
orchestrating complex tasks at scale,
Amazon Bedrock Agents is a great fit.

226
00:14:22,800 --> 00:14:28,080
So you can think about Amazon Bedrock
agents as like having a team of AI experts

227
00:14:28,080 --> 00:14:32,670
working alongside your developers that
can handle complex orchestration, while

228
00:14:32,670 --> 00:14:36,785
your team will actually focus on the
unique aspects of your business logic.

229
00:14:37,610 --> 00:14:41,840
What this approach allows you to
do is to dramatically reduces the

230
00:14:41,840 --> 00:14:46,790
time and expertise needed to get
production ready agents up and running.

231
00:14:46,820 --> 00:14:50,840
And that is the important thing, is we
are not just talking about POCs anymore.

232
00:14:50,840 --> 00:14:56,210
We want to go to production and actually
provide the value both the economic and

233
00:14:56,210 --> 00:15:00,860
business value that our organizations
are expecting into this new era.

234
00:15:02,640 --> 00:15:07,110
While the potential of agents are
exciting, we keep hearing from customers

235
00:15:07,290 --> 00:15:11,855
that they face several challenges when
they try to build production ready agents.

236
00:15:12,750 --> 00:15:16,500
Developer teams struggles
with complex technology stacks

237
00:15:16,500 --> 00:15:17,670
and infrastructure setup.

238
00:15:18,180 --> 00:15:23,250
This is a very fast pacing ecosystem
and new frameworks keeping merging.

239
00:15:23,590 --> 00:15:27,790
Maybe they're open source, maybe
they are different partners, and that

240
00:15:27,790 --> 00:15:31,960
it becomes such a huge ask for the
development team to keep adopting.

241
00:15:33,010 --> 00:15:36,280
The other area that is challenging
is the operational complexity.

242
00:15:36,895 --> 00:15:41,455
Managing multiple agents and orchestrating
complex workflows is challenging.

243
00:15:41,755 --> 00:15:43,315
How do you scale those?

244
00:15:43,435 --> 00:15:46,615
How do you actually provide
the right sets of tools?

245
00:15:46,915 --> 00:15:51,655
How do you make sure entitlements
and data are not actually being

246
00:15:51,925 --> 00:15:53,635
widely distributed when they should?

247
00:15:54,850 --> 00:15:57,910
Another one is, you know that
I already mentioned a couple of

248
00:15:57,910 --> 00:16:00,280
aspects is agent ops requirements.

249
00:16:00,460 --> 00:16:03,640
What are the governance required
for you to manage those agents?

250
00:16:03,820 --> 00:16:08,590
What are the security and compliance that
your business will require you to have?

251
00:16:08,710 --> 00:16:13,030
And mostly important, which is one
thing that when a lot of companies

252
00:16:13,030 --> 00:16:17,080
are doing POC with the agents, they
potentially fail to realize this.

253
00:16:17,440 --> 00:16:19,480
What is the observability stack?

254
00:16:19,510 --> 00:16:23,890
How do you trace each step that
this agent tech system is doing?

255
00:16:24,100 --> 00:16:27,820
How do you log those and how do
you run evaluations to actually

256
00:16:27,820 --> 00:16:31,180
improve the capability and the
performance of those agents?

257
00:16:31,180 --> 00:16:36,040
Right and rapidly evolving technology
landscape makes it hard to stay

258
00:16:36,040 --> 00:16:38,050
current while maintain production seed.

259
00:16:38,050 --> 00:16:38,605
Systems.

260
00:16:39,145 --> 00:16:43,195
So the important thing here with all
these challenges is Amazon Bedrock

261
00:16:43,195 --> 00:16:46,825
agents, because it's a managed
service and AWS will take the heavy

262
00:16:46,825 --> 00:16:51,185
lifting away from you so you can
focus on your business values and the

263
00:16:51,185 --> 00:16:53,585
outputs that you are expecting to do.

264
00:16:54,965 --> 00:16:57,455
You will make your life way easier.

265
00:16:57,510 --> 00:17:00,300
You still need to put a lot of
work, but it'll be easier than

266
00:17:00,330 --> 00:17:01,800
potentially building on your own.

267
00:17:03,825 --> 00:17:06,915
So before we talked about
what different types of agents

268
00:17:06,915 --> 00:17:08,715
does bedrock agents provide?

269
00:17:08,955 --> 00:17:11,145
How does an agent existing looks?

270
00:17:11,195 --> 00:17:13,445
So you might have a user input.

271
00:17:13,505 --> 00:17:16,805
That user input might have an,
we will be talking to an agent

272
00:17:16,805 --> 00:17:19,105
application and you expect a response.

273
00:17:19,375 --> 00:17:22,885
But what happens behind the scenes
is much more complex than just this

274
00:17:23,185 --> 00:17:25,435
flow that the user sees, right?

275
00:17:26,305 --> 00:17:31,975
The agent components that your agent
application will potentially build, you're

276
00:17:31,975 --> 00:17:33,505
gonna talk about the foundational models.

277
00:17:33,505 --> 00:17:36,055
So different tasks might be
using different foundational

278
00:17:36,055 --> 00:17:37,435
models from different partners.

279
00:17:37,675 --> 00:17:40,255
Maybe you're gonna use some of the
tropic models, maybe you're gonna use

280
00:17:40,255 --> 00:17:42,295
some of the Amazon Nova models, right?

281
00:17:42,715 --> 00:17:45,745
But also now that you have
those foundational models, those

282
00:17:45,745 --> 00:17:49,645
models, because they were not
trained within your proprietary.

283
00:17:49,855 --> 00:17:54,625
Enterprise data needs access to your
knowledge base using vector databases.

284
00:17:54,625 --> 00:17:59,005
So Amazon Bedrock also provides
a managed re solution, which

285
00:17:59,005 --> 00:18:00,555
is known as knowledge base.

286
00:18:01,605 --> 00:18:06,105
On top of that, enterprises, we will make,
wanna make sure that the responses that

287
00:18:06,345 --> 00:18:10,245
are provided to potentially our external
users or internal users, depending on the

288
00:18:10,245 --> 00:18:14,535
type of application you're building, have
some safeguards in terms of the response

289
00:18:14,535 --> 00:18:16,005
and the outputs that you're trying to.

290
00:18:16,420 --> 00:18:19,570
Respond that, and receive, and
Guard Rails allows you to do that.

291
00:18:20,080 --> 00:18:23,140
You can create a lot of the
tooling within Bedrock as well.

292
00:18:23,140 --> 00:18:26,680
You can connect with your own
APIs by building action groups

293
00:18:26,680 --> 00:18:28,150
within the Bedrock agents.

294
00:18:28,240 --> 00:18:31,650
You can have memory built in,
you don't need to ma manage

295
00:18:31,650 --> 00:18:33,120
the memory of those agents.

296
00:18:33,120 --> 00:18:37,410
You can have memory being managed
store and maintained by bedrock, and

297
00:18:37,410 --> 00:18:41,760
you can just provide the ID and ask
conversations for specific users.

298
00:18:42,000 --> 00:18:42,720
Keep growing.

299
00:18:42,720 --> 00:18:45,720
You still can maintain the memory,
which is very important because

300
00:18:45,720 --> 00:18:47,340
it's context from the users.

301
00:18:47,700 --> 00:18:50,340
Requests, previous requests and responses.

302
00:18:50,580 --> 00:18:54,040
You can connect to other agents,
but you can also have, deterministic

303
00:18:54,040 --> 00:18:56,140
flows which are, more like.

304
00:18:56,550 --> 00:19:03,270
Static steps that your agent
can take, but all that, right?

305
00:19:03,660 --> 00:19:06,510
One of the things we see more and
more in production is you wanna

306
00:19:06,510 --> 00:19:09,630
make sure that you have a continuous
evaluation framework, right?

307
00:19:09,810 --> 00:19:14,190
So as your agents are potentially
being consumed in the ward, once

308
00:19:14,190 --> 00:19:16,955
you go to production, you wanna
log the valuation of those.

309
00:19:18,195 --> 00:19:22,485
Of those steps and you wanna make sure you
have test cases that you keep evaluating.

310
00:19:22,485 --> 00:19:26,205
Once you make changes, you wanna make
sure you have metrics and grading prompts.

311
00:19:26,355 --> 00:19:30,255
And you can use being used judges as
foundational models that I mentioned.

312
00:19:30,585 --> 00:19:34,785
So you can log all that into analytical
database or a vector database.

313
00:19:35,055 --> 00:19:39,385
And then the last step is you can
have this dashboard where, add

314
00:19:39,415 --> 00:19:42,295
your experts on whatever agent.

315
00:19:42,650 --> 00:19:45,830
Output or agent task is created.

316
00:19:46,010 --> 00:19:47,480
What is your business value?

317
00:19:47,720 --> 00:19:52,550
You can have those humans evaluation to
analyze what's working well, what's not

318
00:19:52,550 --> 00:19:56,900
working well, and you can update and
optimize to make sure your agents are

319
00:19:56,900 --> 00:19:59,210
actually getting better with time, right?

320
00:19:59,430 --> 00:20:04,860
So users will provide feedback and agent
application get updated, and as they get

321
00:20:04,860 --> 00:20:07,470
updated, they'll get way better, but.

322
00:20:09,080 --> 00:20:12,915
Okay, let's talk about what
is Amazon Bedrock Agents?

323
00:20:12,965 --> 00:20:17,945
So Amazon Bedrock Agents provides you
with a managed capability for actually

324
00:20:18,425 --> 00:20:21,335
managing and running agents at scale.

325
00:20:21,605 --> 00:20:27,785
So if we think about the different tasks
that you and your development team would

326
00:20:27,785 --> 00:20:33,555
be required to run by creating agents,
you probably will know that you need

327
00:20:33,555 --> 00:20:35,595
to provide some tool capabilities for.

328
00:20:35,910 --> 00:20:36,960
Your agents, right?

329
00:20:37,470 --> 00:20:41,590
Within Bedrock agents, you have
the ability to create tools

330
00:20:41,590 --> 00:20:44,740
with action groups, which can
call potentially your own APIs.

331
00:20:44,890 --> 00:20:49,090
You can integrate with knowledge basis,
you can actually have code interpreters,

332
00:20:49,090 --> 00:20:51,370
so your agents can generate code.

333
00:20:51,700 --> 00:20:56,440
They can run those codes in a sandbox
environment that Bedrock provides

334
00:20:56,440 --> 00:21:00,190
to your agents, and the output of
that code can then be consumed for.

335
00:21:00,770 --> 00:21:05,660
Potentially as a response to your user or
later on collaboration with other agents.

336
00:21:05,710 --> 00:21:07,510
I already mentioned about memory.

337
00:21:07,790 --> 00:21:10,010
But one interesting thing that
we're gonna do with them, which

338
00:21:10,010 --> 00:21:14,030
today is this idea of multi-agent
collaboration for complex workflows.

339
00:21:14,080 --> 00:21:18,810
It's important to say that the less
one before last item, the comprehensive

340
00:21:18,810 --> 00:21:23,340
trace debug and observability is
very important and critical for bad.

341
00:21:23,595 --> 00:21:23,625
Okay.

342
00:21:25,155 --> 00:21:32,665
By default using these capabilities of
bedrock agent, you get comprehensive tra

343
00:21:32,695 --> 00:21:38,935
trace and debugging logs and metrics that
you can look and analyze each stage and

344
00:21:38,935 --> 00:21:41,095
each step that your agents are taking.

345
00:21:41,485 --> 00:21:45,985
And, there is building word rails for
security and compliance control which

346
00:21:45,985 --> 00:21:49,200
you know, will provide a peace of mind.

347
00:21:49,675 --> 00:21:53,455
For you and your enterprise as you're
building new capabilities with ai.

348
00:21:54,115 --> 00:21:58,375
So think about Amazon Bedrock agents
as a powerful foundational model that

349
00:21:58,375 --> 00:22:03,355
becomes even stronger when combined
with the full suite of bedrock agent

350
00:22:03,355 --> 00:22:08,245
capabilities, from knowledge base to
flows, to guard rails, all working

351
00:22:08,245 --> 00:22:14,095
together to create a more capable,
secure, and reliable agent application.

352
00:22:15,895 --> 00:22:19,315
I just wanna, I apologize, I just wanna.

353
00:22:19,750 --> 00:22:23,740
Drill down a little bit more on the
new capability that we release late

354
00:22:23,770 --> 00:22:29,110
in 2024, which is the Amazon Bedrock
agent's multi-agent collaboration.

355
00:22:30,250 --> 00:22:34,720
One of the most powerful capabilities
is the moody agent collaboration.

356
00:22:34,750 --> 00:22:37,070
Let me walk you through how this works.

357
00:22:37,190 --> 00:22:39,525
First, you can easily assemble agents.

358
00:22:40,400 --> 00:22:43,880
And connect e each of those
specific agents with their

359
00:22:43,880 --> 00:22:45,620
own specific knowledge base.

360
00:22:45,620 --> 00:22:49,580
You can give access to
specific tools specific APIs.

361
00:22:50,240 --> 00:22:56,720
These agents on its own can plan, execute
and comple complex tests togethers.

362
00:22:57,095 --> 00:23:01,755
Think of, multi-agent collaboration
as a team of specialists that

363
00:23:01,755 --> 00:23:03,405
are working coordination.

364
00:23:03,585 --> 00:23:08,175
For example, one agent might handle
data analysis while another manages

365
00:23:08,175 --> 00:23:09,945
customer communication, right?

366
00:23:10,005 --> 00:23:14,355
And they can all report into a
specific supervisor that is planning

367
00:23:14,595 --> 00:23:18,435
and delegating different tasks
and aggregating the results for

368
00:23:18,465 --> 00:23:20,795
these coordinator agents, right?

369
00:23:21,295 --> 00:23:26,335
Amazon Bedrock have built intent
classification to help unify conversation

370
00:23:26,545 --> 00:23:30,115
across agents, ensuring that is smooth.

371
00:23:30,115 --> 00:23:34,405
Handoffs and consistent user
experience across agents are kept.

372
00:23:35,095 --> 00:23:40,315
As your need grows, you can scale
those agent experience efficiently

373
00:23:40,915 --> 00:23:42,100
because it has built team.

374
00:23:42,845 --> 00:23:47,645
Observability that lets you monitor
how each agent are performing

375
00:23:47,675 --> 00:23:49,265
and interacting with your user.

376
00:23:49,475 --> 00:23:53,585
And of course, all of these runs
on Amazon, bedrock Guardrails,

377
00:23:53,585 --> 00:23:57,895
and AWS enterprise security
and privacy control by default.

378
00:23:59,605 --> 00:24:05,155
So to summarize a little bit
here, what Amazon Bedrock Agents

379
00:24:05,155 --> 00:24:11,395
allows you to do is to provide the
Lego blocks, the building blocks.

380
00:24:11,770 --> 00:24:17,950
For you to create a powerful agent AI
solution for your own organization.

381
00:24:18,520 --> 00:24:21,960
I already talked about some of these
configurations, some of these features

382
00:24:21,960 --> 00:24:23,670
I haven't mentioned session handling.

383
00:24:23,670 --> 00:24:26,190
So you can have session, then
you can have memory management.

384
00:24:26,820 --> 00:24:31,380
All of these are secure within
the Amazon Bedrock ecosystem.

385
00:24:32,100 --> 00:24:35,100
So this becomes even stronger capability.

386
00:24:36,735 --> 00:24:40,725
Because the point I mentioned before
that development teams can get very

387
00:24:40,725 --> 00:24:44,505
overwhelming with this very fast
paced environment of agent tech

388
00:24:44,775 --> 00:24:47,925
solutions with Amazon Bedrock agents.

389
00:24:48,135 --> 00:24:52,395
You can expect more and more
capabilities are gonna be added in

390
00:24:52,395 --> 00:24:58,165
the future that will follow the same
approach of managing that for you

391
00:24:58,165 --> 00:25:00,820
while you focus on your business needs.

392
00:25:01,495 --> 00:25:07,595
I'll give an example of something that
Amazon have been very invested and started

393
00:25:07,595 --> 00:25:10,445
releasing some of these capabilities,
and hopefully you see more and more

394
00:25:10,445 --> 00:25:14,850
coming the next few months and a year,
which is the model context protocol.

395
00:25:15,330 --> 00:25:18,575
I. You probably have already
heard about MCP, which stands

396
00:25:18,575 --> 00:25:20,195
for Modello Context Protocol.

397
00:25:20,465 --> 00:25:22,625
MCP was created by Tropic.

398
00:25:22,625 --> 00:25:27,215
It's an open source protocol that
is standardized the way models

399
00:25:27,245 --> 00:25:32,225
share and understand context to
each other and connect to external

400
00:25:32,225 --> 00:25:34,595
data sources such as tools, right?

401
00:25:34,925 --> 00:25:39,095
M making your application context aware
of what tools are available for them.

402
00:25:39,125 --> 00:25:44,015
Okay, currently Amazon bedrock
inline agent, which is a way for

403
00:25:44,015 --> 00:25:49,485
you to create agents with code
inline already support MCP servers

404
00:25:49,725 --> 00:25:51,785
because, you can build clients.

405
00:25:51,975 --> 00:25:52,660
The agent.

406
00:25:54,090 --> 00:25:57,480
Agent is an MCP client that
can connect to MCP servers.

407
00:25:57,840 --> 00:26:03,090
So you can have your MCP servers as action
groups in Amazon Bedrock age, the same

408
00:26:03,090 --> 00:26:07,140
way you do when you're building a single
agent, or when potentially building a

409
00:26:07,140 --> 00:26:12,240
multi agent collaboration that allows you
to enable connecting agents to external

410
00:26:12,240 --> 00:26:14,730
tools and data sources via MCP servers.

411
00:26:15,360 --> 00:26:20,010
You'll support passing information between
models and tools in a multi step workflow.

412
00:26:20,820 --> 00:26:25,950
You can expect more capabilities, not
only within the bedrock inline agent, are

413
00:26:25,950 --> 00:26:31,380
gonna potentially become more and more
native to this offering on Amazon Bedrock.

414
00:26:32,880 --> 00:26:38,020
Now, before I do my demo, what I
wanna pause here for a few seconds

415
00:26:38,020 --> 00:26:43,780
is if you have found so far that
Amazon Bedrock agents is interesting

416
00:26:43,780 --> 00:26:45,100
and you wanna know more, please.

417
00:26:45,420 --> 00:26:50,010
Scandi secure code to potentially
go to our Bedrock agents page.

418
00:26:50,250 --> 00:26:54,750
Or if you wanna run a workshop and
you're already an AWS customer, you

419
00:26:54,750 --> 00:27:00,300
can request a customized workshop
where we, as part of the AWS team will,

420
00:27:00,510 --> 00:27:05,480
potentially virtually host a workshop
for you, for agents, or potentially your

421
00:27:05,480 --> 00:27:11,270
account team might fly or meet you in
your office with your team and actually

422
00:27:11,450 --> 00:27:16,160
host these specific workshop where
you're gonna be able to create agents

423
00:27:16,160 --> 00:27:17,930
and play around with Amazon Bedrock.

424
00:27:18,080 --> 00:27:21,320
And of course, there are free courses
that you can do on your own pace.

425
00:27:21,320 --> 00:27:25,730
Just to scan the last Cure code here now.

426
00:27:26,810 --> 00:27:31,365
Before I I'll talk about my demo, but
I just wanna show a diagram of what,

427
00:27:31,365 --> 00:27:38,565
how my demo works because what I'm
gonna show you on the demo is a web

428
00:27:38,565 --> 00:27:45,050
UI that is abstracting all these very
powerful investment research and agent,

429
00:27:45,260 --> 00:27:49,825
which is actually using behind the
scenes, the moody agent collaboration

430
00:27:49,825 --> 00:27:51,685
capability of Amazon bedroom.

431
00:27:52,510 --> 00:27:57,790
So I have created three different
agents that are collaborators from

432
00:27:57,790 --> 00:28:01,930
my supervisor agent, which is called
Investment Research Assistant.

433
00:28:02,470 --> 00:28:09,890
The goal of this assistant is to help,
analyst, investors to do research

434
00:28:09,950 --> 00:28:11,930
about the specific investments, right?

435
00:28:11,930 --> 00:28:13,350
About the investment work.

436
00:28:14,250 --> 00:28:18,990
I first have one agent that is
specialized on analyzing you.

437
00:28:19,395 --> 00:28:26,775
News, very specific agent is tasked with a
different set of tools available for you.

438
00:28:27,345 --> 00:28:34,065
The first tool that is available is the
ability to call an API to do web search.

439
00:28:34,155 --> 00:28:40,985
So if I ask about Amazon News Amazon Stock
News this agent will be invo and they'll

440
00:28:40,985 --> 00:28:43,445
be actually calling web search APIs.

441
00:28:43,775 --> 00:28:46,805
And retrieving information
about a specific requests.

442
00:28:46,805 --> 00:28:49,055
In this case that I said Amazon News.

443
00:28:50,015 --> 00:28:55,725
The other tool that this actually
model has, sorry, this agent

444
00:28:55,725 --> 00:29:01,155
has, is the connection with
proprietary financial data.

445
00:29:01,155 --> 00:29:06,375
In this case, for the demo is just
Amazon earning reports, 10 Qs and

446
00:29:06,375 --> 00:29:11,685
10 Ks that have been uploaded and
prepared by bedrock data automation.

447
00:29:11,985 --> 00:29:16,515
And what happened here, I have created
the Amazon bedroom knowledge base that

448
00:29:16,515 --> 00:29:22,635
ingest in, embed, and creates vectors
into my open search serverless index.

449
00:29:22,905 --> 00:29:27,775
And then my agent can actually query using
natural language to actually retrieve

450
00:29:27,775 --> 00:29:32,650
a specific chunks or of specific asks
for example, Amazon earning reports.

451
00:29:33,100 --> 00:29:34,210
So that is one agent.

452
00:29:34,900 --> 00:29:38,350
The second agent is
quantitative analysis agent.

453
00:29:38,710 --> 00:29:43,720
What this agent does, it has a action
group that has tools capability to

454
00:29:43,720 --> 00:29:46,870
actually call a Yahoo Finance API.

455
00:29:47,350 --> 00:29:51,710
So you can call different APIs
to check, different prices,

456
00:29:51,710 --> 00:29:56,100
different stocks, different date
range, and that can be real time.

457
00:29:56,100 --> 00:29:59,220
And you return to the
model to the age of top.

458
00:30:00,345 --> 00:30:04,005
Now the last agent is the
smart summarized agent.

459
00:30:04,305 --> 00:30:11,435
This agent is prompt and capable of
summarizing a specific set of informations

460
00:30:11,435 --> 00:30:15,545
potentially to give the response
back to the main supervisor agent.

461
00:30:15,965 --> 00:30:21,455
The cool thing here is I've provided
a specific guidance for each of those

462
00:30:21,455 --> 00:30:23,345
agents on how they should behave.

463
00:30:23,855 --> 00:30:27,845
But because Amazon Bedrock
multi-agent collaboration has a lot

464
00:30:27,845 --> 00:30:33,435
of the orchestrating intelligence
using, years and decades of machine

465
00:30:33,435 --> 00:30:37,875
learning experience of Amazon, a
lot of that intent classification

466
00:30:37,875 --> 00:30:39,885
is handled automatically for me.

467
00:30:40,455 --> 00:30:44,545
And everything that I'm gonna do here
is gonna I'm gonna show in the demo.

468
00:30:44,895 --> 00:30:49,226
I'll ask a prompt here to do
something that can retrieve data and

469
00:30:49,231 --> 00:30:51,475
give a complex investment analysis.

470
00:30:51,535 --> 00:30:52,405
And you see that.

471
00:30:52,650 --> 00:30:56,700
Each step will be traced, and
you'll be orchestrated by the

472
00:30:56,700 --> 00:31:00,570
supervisor agent with, which is
this agent that you see here, right?

473
00:31:00,840 --> 00:31:02,460
The investment research assistant.

474
00:31:02,730 --> 00:31:07,320
And as needed, you actually call
this collaborator agents, right?

475
00:31:07,320 --> 00:31:11,250
And each step will be able to see
the input and the output for those

476
00:31:11,250 --> 00:31:15,540
agents until we finally, once it's
satisfied because the planning.

477
00:31:15,830 --> 00:31:16,670
And reasoning.

478
00:31:16,760 --> 00:31:20,180
Once it's satisfied with the answer
and the data that is collected, you

479
00:31:20,180 --> 00:31:21,890
get the response back to the user.

480
00:31:22,310 --> 00:31:26,420
So you can think, you can see that
this is just more than just a simple

481
00:31:26,420 --> 00:31:28,670
agent, a simple chat bot, right?

482
00:31:28,670 --> 00:31:32,540
Even though this is a natural language
conversation with the bot behind the

483
00:31:32,540 --> 00:31:36,260
scenes, you're using the power of
connecting different data sources,

484
00:31:36,260 --> 00:31:40,940
different actions that a foundational
model on its own has no capability.

485
00:31:41,405 --> 00:31:45,665
And everything you're gonna see on this
demo, I send a single, after I've created

486
00:31:45,665 --> 00:31:52,445
all these agents, either by A-P-I-S-D-K,
cloud formation, or the console, I

487
00:31:52,445 --> 00:31:57,995
can just re, I can just send AVO agent
API, and I can use this capability.

488
00:31:58,325 --> 00:32:03,125
And because this is all managed on
AWS, all the scaling, all the security,

489
00:32:03,125 --> 00:32:07,835
all the logging, all the valuation is
taken care for me by Amazon Bedrock.

490
00:32:08,135 --> 00:32:09,455
So this is really powerful.

491
00:32:09,845 --> 00:32:13,995
So what you're gonna do now is we
are gonna jump into the, into the a

492
00:32:14,025 --> 00:32:18,445
web browser and I'm gonna show you
the demo on how this agent works and

493
00:32:18,445 --> 00:32:21,625
hopefully we're gonna get excited and
potentially start building some of

494
00:32:21,625 --> 00:32:23,515
these capabilities on your own as well.

495
00:32:24,655 --> 00:32:25,270
We'll see you in a moment.

496
00:32:27,130 --> 00:32:28,510
Okay, welcome back.

497
00:32:28,550 --> 00:32:29,990
Here is just a very simple ui.

498
00:32:30,470 --> 00:32:35,000
Right behind the scenes I have already
created the agent, the multiagent

499
00:32:35,000 --> 00:32:36,530
collaboration that I showed you.

500
00:32:36,830 --> 00:32:38,960
So here is me as the user.

501
00:32:39,030 --> 00:32:41,640
We are gonna send a prompt
through this very simple ui.

502
00:32:42,470 --> 00:32:45,620
With investment research
assistant, which is a supervisor.

503
00:32:45,830 --> 00:32:49,340
And then I'm gonna show you the
traces based on my question.

504
00:32:49,670 --> 00:32:53,780
What type of the different agency
requests to collaborate with, how

505
00:32:53,780 --> 00:32:55,490
does he actually get the data back?

506
00:32:55,700 --> 00:32:57,320
How does he keep integrating?

507
00:32:57,610 --> 00:33:01,780
Iterating until it gets to a
final stage where it satisfy and

508
00:33:01,780 --> 00:33:03,550
actually returns the response.

509
00:33:03,730 --> 00:33:07,780
So this is like a, it can take, a minute
or two, three minutes to actually get

510
00:33:07,780 --> 00:33:11,620
some of this response back because
it's doing a lot of different steps.

511
00:33:11,800 --> 00:33:13,720
It's taking a lot of different action.

512
00:33:13,975 --> 00:33:18,265
Given the planning that the
supervisor agent that is part of a

513
00:33:18,265 --> 00:33:21,865
Moody agent collaboration on Amazon
Bedrock is actually doing right.

514
00:33:21,865 --> 00:33:25,285
So this is again, it's an
investment research system.

515
00:33:25,525 --> 00:33:32,060
The question I'm gonna ask here is given
the recent Amazon 10 Q, sorry, 10 K,

516
00:33:32,465 --> 00:33:36,125
what are the, some, what are some of
the growth opportunities highlighted?

517
00:33:36,620 --> 00:33:41,150
Then I want you to search the news related
to those opportunities, and I want you to

518
00:33:41,150 --> 00:33:43,610
list competitors for each of those areas.

519
00:33:44,225 --> 00:33:49,295
Finally give me a stock price range
expected within the next 12 months, right?

520
00:33:49,295 --> 00:33:51,245
I wanna learn the growth opportunities.

521
00:33:51,455 --> 00:33:55,925
I wanna see what the market's saying
in terms of expected price range from

522
00:33:55,925 --> 00:33:59,985
different sources and then search the
current stock price and how much has

523
00:33:59,985 --> 00:34:02,205
fluctuated in the last 30 days, right?

524
00:34:02,415 --> 00:34:06,015
So in order for me to do this as
part, as a human, or if as an analyst,

525
00:34:06,015 --> 00:34:07,725
you take me quite a lot of time.

526
00:34:07,805 --> 00:34:13,295
As I send this request behind the
scenes, it's actually invoking my agent.

527
00:34:13,295 --> 00:34:17,105
So the first thing it does here
invokes the investment research

528
00:34:17,105 --> 00:34:18,815
assistant, which is a supervisor.

529
00:34:19,055 --> 00:34:21,425
And then we are gonna see
now multiple different steps.

530
00:34:21,425 --> 00:34:23,105
So the first step is the orchestration.

531
00:34:23,285 --> 00:34:26,165
I'm, and I'm gonna try to now go
through all them because it'll be a

532
00:34:26,165 --> 00:34:28,145
lot, but I'm gonna show some of them.

533
00:34:28,445 --> 00:34:31,655
So the first one is just, you
can expand here and you can see.

534
00:34:31,920 --> 00:34:35,220
You are an investment research
assistant responsible for overseeing

535
00:34:35,220 --> 00:34:39,210
and synthesizing, synthesizing financial
research for a specialized agent.

536
00:34:39,210 --> 00:34:41,730
You're always to coordinate
the subagent to produce.

537
00:34:42,090 --> 00:34:47,320
Anyway, it's a very prompt, fine tuned
prompt here for my supervisor agent, but

538
00:34:47,320 --> 00:34:51,550
what it does here is the supervisor agent
will actually do the first reasoning.

539
00:34:51,870 --> 00:34:55,260
And the Asian reason is saying
first what I need to do is get

540
00:34:55,260 --> 00:34:56,880
growth opportunities from Amazon.

541
00:34:56,880 --> 00:35:01,350
10 K. 10 K. Then I need to find
recent news about these opportunities.

542
00:35:01,350 --> 00:35:06,180
I need to identify the competitors from
different from these opportunities I need.

543
00:35:06,180 --> 00:35:10,440
I need to get analyst price targets,
and then I need to get the current

544
00:35:10,440 --> 00:35:13,020
stock data and recent volatility.

545
00:35:13,200 --> 00:35:17,970
What he has done is, okay, now that is
the plan that I need to take and I need

546
00:35:17,970 --> 00:35:20,250
to take multiple steps to get the plan.

547
00:35:20,670 --> 00:35:24,720
So in the step four, what I realize is
okay, I need to request the collaborator

548
00:35:24,720 --> 00:35:29,220
agent, which is the financial use agent,
to go and retrieve some data, right?

549
00:35:29,400 --> 00:35:32,850
So the first one is go fetch
from the knowledge base.

550
00:35:33,000 --> 00:35:35,730
Then if needed, fetch
latest relevant news from.

551
00:35:36,105 --> 00:35:37,455
From a given stock base.

552
00:35:37,455 --> 00:35:39,705
So you would try to do the knowledge base.

553
00:35:39,705 --> 00:35:43,485
My knowledge base in this example
only has Amazon on your reports, like

554
00:35:43,485 --> 00:35:45,525
the 10 K that you're talking here.

555
00:35:45,575 --> 00:35:48,005
So you can see here that the
financial year is okay, I'll

556
00:35:48,005 --> 00:35:49,265
first search the knowledge base.

557
00:35:49,655 --> 00:35:50,615
From growth opportunities.

558
00:35:50,615 --> 00:35:55,535
So he has hand off the task from
the supervisor into the financial

559
00:35:55,535 --> 00:35:58,835
news agent and to say okay, I'll
search the knowledge base for growth

560
00:35:58,835 --> 00:36:02,255
opportunities matching in Amazon
recent 10 k and related information.

561
00:36:02,585 --> 00:36:06,515
So he goes, queries the knowledge
base on Amazon Bedrock knowledge base.

562
00:36:06,935 --> 00:36:09,275
He gets some of the chunks, right?

563
00:36:09,275 --> 00:36:14,375
Using the vector database here
he then he orchestrates the

564
00:36:14,375 --> 00:36:18,905
response back to my supervisor, so
orchestrates back my response to

565
00:36:18,905 --> 00:36:21,395
the supervisor, but now it's okay.

566
00:36:21,395 --> 00:36:22,745
I need to get more data.

567
00:36:22,745 --> 00:36:27,365
So it's like you're saying, okay, let
me now get the recent news about Amazon

568
00:36:27,365 --> 00:36:29,045
growth initiatives and competitors.

569
00:36:29,045 --> 00:36:32,105
So he collected the information
and the growth opportunities that

570
00:36:32,105 --> 00:36:35,645
are listed on 10 K, and now it's
actually going and getting the.

571
00:36:36,045 --> 00:36:39,375
Growth Initiatives and
competitors from Neils, right?

572
00:36:39,435 --> 00:36:41,625
So you can see here it's actually running.

573
00:36:41,745 --> 00:36:45,885
It's now finally doing something
that is called the tool use, which is

574
00:36:45,885 --> 00:36:49,815
using the action group functionality
on Amazon Bedrock, and is doing a

575
00:36:49,815 --> 00:36:53,805
search query using an API saying
Amazon Growth Initiatives, AI Cloud.

576
00:36:54,125 --> 00:36:58,325
Retail healthcare competitive strategy
plans because that's what probably

577
00:36:58,385 --> 00:37:00,185
was listed on than 10 K, right?

578
00:37:00,575 --> 00:37:06,085
It has returned that, returned some of
those specific news and now it's saying,

579
00:37:06,085 --> 00:37:09,925
let me search specific for analyst price
targets and competitor information.

580
00:37:09,925 --> 00:37:13,199
So you can see that it's taking it step
as that is thinking is step at us at each

581
00:37:13,199 --> 00:37:19,690
step adds each step in order to obtain my
final request, which was multiple, tasks,

582
00:37:19,720 --> 00:37:21,310
which prosecutions at the same time.

583
00:37:21,700 --> 00:37:24,910
So now he's saying, okay get
the news about the price target

584
00:37:24,910 --> 00:37:28,570
and competitor market share for
cloud retail, AI and healthcare.

585
00:37:29,090 --> 00:37:31,900
So he has gotten into that and it's
based on the knowledge based information

586
00:37:31,900 --> 00:37:35,350
in the news, I can now provide a
comprehensive update on Amazon's

587
00:37:35,350 --> 00:37:36,820
growth opportunity related development.

588
00:37:37,060 --> 00:37:43,150
So the financial news agent has now
done within itself, has now done

589
00:37:43,180 --> 00:37:46,060
take multiple steps to finally.

590
00:37:46,720 --> 00:37:50,950
Achieve the single goal that the
supervisor agent requested, right?

591
00:37:50,950 --> 00:37:52,960
So you can see how this
becomes very complex.

592
00:37:53,260 --> 00:37:55,390
Remember the multiagent
collaboration here?

593
00:37:55,570 --> 00:37:59,650
The good analogy is have a team of
specialists working together, and

594
00:37:59,650 --> 00:38:02,620
this is one of the specialists just
taking a lot of the actions, right?

595
00:38:03,040 --> 00:38:07,150
So the final response from the final
news agents okay, key growth areas from

596
00:38:07,150 --> 00:38:10,140
the CEO recent communication is ai.

597
00:38:10,375 --> 00:38:12,985
Core focus is shopping
code, personal assistant.

598
00:38:13,265 --> 00:38:17,555
The growth opportunities will be major
infrastructure, AI infuse Alexa, voice

599
00:38:17,555 --> 00:38:21,845
assistant healthcare service expansion,
showing positive customer sentiment.

600
00:38:22,175 --> 00:38:26,525
You can see some of the competitors here,
and then you can see the analyst coverage.

601
00:38:26,525 --> 00:38:28,915
What are the, the price
target that it has?

602
00:38:28,915 --> 00:38:30,235
Share that, that they have.

603
00:38:30,585 --> 00:38:34,875
Decided to put each of different kind
of companies and research institutions.

604
00:38:35,215 --> 00:38:38,785
So it goes back to the supervisor and be
like, okay, here's the data supervisor.

605
00:38:38,785 --> 00:38:39,685
What do I need to do?

606
00:38:39,735 --> 00:38:44,065
And the supervisor decides some
information here and we could reel down,

607
00:38:44,065 --> 00:38:47,245
but I don't wanna take too much time
and says, okay, now we need to actually

608
00:38:47,275 --> 00:38:53,225
get another collaborator here, the
quantitative analyst agent to go and see.

609
00:38:53,645 --> 00:38:55,955
And you can see here, you'll
try to, if you go here, the.

610
00:38:57,215 --> 00:39:00,935
Agent reasoning now for the quantitative
analyst agent to be like, I'll retrieve

611
00:39:00,935 --> 00:39:04,835
Amazon stock data and analyze the
recent price movements and patterns.

612
00:39:05,105 --> 00:39:09,515
So it goes and makes a stock data
lookup API, using the tool function

613
00:39:09,585 --> 00:39:14,745
to use on the action group so it gets
the data right, and then it's okay,

614
00:39:14,745 --> 00:39:18,135
analyze the current price range and
key pattern over the past month.

615
00:39:18,765 --> 00:39:22,815
It gets all the data so it
gets from current stock.

616
00:39:23,565 --> 00:39:25,335
A price for today, 30 days.

617
00:39:25,335 --> 00:39:27,585
Price lines, volatility,
and the pre price.

618
00:39:27,585 --> 00:39:28,695
11 trading partners.

619
00:39:28,695 --> 00:39:32,535
So it talks about some of the resistance
and some more like the, terminology

620
00:39:32,535 --> 00:39:34,995
fundamental understanding of stock itself.

621
00:39:35,475 --> 00:39:37,335
It goes back to the agent, right?

622
00:39:38,115 --> 00:39:42,225
And the agent says, okay, let me
synthesize this information to a

623
00:39:42,225 --> 00:39:46,035
comprehensive analysis of Amazon
growth opportunities and Mark lookup.

624
00:39:46,545 --> 00:39:53,295
And then finally, if you see here on step
43, so this multi-agent collaboration

625
00:39:53,295 --> 00:39:57,915
has taken 43 different steps using
different agents, using different

626
00:39:57,915 --> 00:39:59,625
tools, using different knowledge base.

627
00:39:59,985 --> 00:40:01,185
To achieve the response.

628
00:40:01,185 --> 00:40:06,075
So you can see that based on my prompt
says here is the detail analysis of Amazon

629
00:40:06,075 --> 00:40:08,445
growth initiatives and market outlook.

630
00:40:08,745 --> 00:40:10,245
So the create growth opportunities.

631
00:40:10,245 --> 00:40:15,525
One is artificial intelligence scale,
1000 generative AI applications

632
00:40:15,525 --> 00:40:16,875
in developments within Amazon.

633
00:40:16,965 --> 00:40:18,285
These are the focus areas.

634
00:40:18,345 --> 00:40:19,305
Here's the competitors.

635
00:40:19,545 --> 00:40:22,065
Now it's cloud service,
current growth opportunity.

636
00:40:22,065 --> 00:40:26,295
Current growth is 25 year over year
AI contribution, three to 5% now.

637
00:40:26,295 --> 00:40:28,035
Expected to be 10% this year.

638
00:40:28,035 --> 00:40:28,185
Year.

639
00:40:28,485 --> 00:40:30,465
Remember the 10 Ks from 2024?

640
00:40:30,675 --> 00:40:34,635
That's site 2025 is the expectation
now, infrastructure, metadata, center

641
00:40:34,635 --> 00:40:36,255
expansion, some of the competitors.

642
00:40:36,945 --> 00:40:41,125
Third growth opportunity is healthcare
Talks about Amazon Pharmacy.

643
00:40:41,125 --> 00:40:44,425
One medical integration showing
positive customer adoption.

644
00:40:44,665 --> 00:40:49,925
Then it goes to Project ky, which is the
satellite internet service for Amazon.

645
00:40:50,795 --> 00:40:53,885
Then it talks about different
competitors and finally goes

646
00:40:53,885 --> 00:40:55,385
into the current trading metrics.

647
00:40:55,385 --> 00:40:56,255
What is the price?

648
00:40:56,540 --> 00:40:58,340
What has been the 30 day range?

649
00:40:58,490 --> 00:40:59,780
What is the support level?

650
00:40:59,780 --> 00:41:01,160
What is the resistance level?

651
00:41:01,340 --> 00:41:03,410
And here is the analyst projection.

652
00:41:03,560 --> 00:41:07,820
So some of analyst projections are saying,
okay, like Wolf research saying it's

653
00:41:07,820 --> 00:41:13,560
200 notable j JP Morgan saying it's two
10 and recent trading partner has been.

654
00:41:14,070 --> 00:41:16,320
Higher lows since April 24th.

655
00:41:16,320 --> 00:41:20,970
Five consecutive days of gain, harvest
rate trading was April four to nine.

656
00:41:21,310 --> 00:41:27,400
So it seems the wide ranging analyst
targets 200 to $261, reflects

657
00:41:27,400 --> 00:41:31,720
varying opinions of AI initiative,
distribution success, AI AWS growth,

658
00:41:31,720 --> 00:41:36,040
sustainability, healthcare expansion
potential, a competitive ion impact.

659
00:41:36,460 --> 00:41:39,280
So I know it was a lot and I was
getting more into the response.

660
00:41:39,700 --> 00:41:44,305
But this is the answer for this
specific prompt that is sent.

661
00:41:44,695 --> 00:41:47,815
And if you were just to prompt
a model without having these

662
00:41:47,815 --> 00:41:50,095
tools, it'll be way, way hard.

663
00:41:50,125 --> 00:41:54,625
Again, these only run for three minutes,
but how about if you have a very complex

664
00:41:54,625 --> 00:41:58,245
task that involves, dozens of agents
and you'll be running for hours, right?

665
00:41:58,245 --> 00:41:59,955
To do a very in-depth research.

666
00:41:59,985 --> 00:42:02,745
You could do that during your use case.

667
00:42:02,745 --> 00:42:05,055
And I just called a single API.

668
00:42:05,205 --> 00:42:07,665
This was just a single
API call that I made.

669
00:42:08,285 --> 00:42:11,705
And that API call had all the
infrastructure managed for me, all

670
00:42:11,705 --> 00:42:16,815
the foundational models using the
power of the AWS generative AI stack.

671
00:42:17,565 --> 00:42:19,785
So again, my name is Sam bfi.

672
00:42:19,785 --> 00:42:23,245
If you work curious or wanna talk
to me, please reach out on LinkedIn.

673
00:42:23,515 --> 00:42:25,405
Could just search by my name Sam bfi.

674
00:42:25,555 --> 00:42:26,485
Hopefully this demo was useful.

675
00:42:27,365 --> 00:42:30,994
Thank you so much for taking the time and
watching and I'll hope you see you soon.

676
00:42:31,324 --> 00:42:32,704
Have a great one.

677
00:42:32,704 --> 00:42:32,974
Great one everyone.

678
00:42:33,034 --> 00:42:33,394
Bye bye.

