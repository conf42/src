1
00:00:00,150 --> 00:00:04,019
In today's fast paced digital
world, applications need to handle

2
00:00:04,050 --> 00:00:08,940
massive amounts of data, scale
dynamically, and respond in real time.

3
00:00:09,910 --> 00:00:13,750
Directional architectures
often struggle under demands.

4
00:00:14,370 --> 00:00:18,180
This is where Event Driven
Architecture, EDA, steps in.

5
00:00:19,040 --> 00:00:24,490
Today, I'll walk you through
how EDA enables a scalable,

6
00:00:24,790 --> 00:00:26,680
resilient, and responsive system.

7
00:00:27,230 --> 00:00:28,370
let's dive in.

8
00:00:28,370 --> 00:00:28,679
In

9
00:00:29,179 --> 00:00:35,449
this talk, We will explore the
core principles of EDA, discuss its

10
00:00:35,459 --> 00:00:41,529
benefits and challenges, and examine
real world applications in areas

11
00:00:41,559 --> 00:00:47,489
like vehicle tracking and messaging
platforms, showcasing how EDA enhances

12
00:00:47,489 --> 00:00:49,879
system performance and agility.

13
00:00:50,379 --> 00:00:52,539
Now, before we dive deeper.

14
00:00:53,204 --> 00:00:59,044
Let me introduce myself before we
go further a little bit about me.

15
00:00:59,544 --> 00:01:03,514
I am Mohammed Rizwan, a
passionate software engineer with

16
00:01:03,514 --> 00:01:08,144
experience in designing scalable
and high performance systems.

17
00:01:09,099 --> 00:01:13,869
One of my biggest achievements was
developing a real time vehicle tracking

18
00:01:13,869 --> 00:01:19,819
system that provides instant geolocation
updates, driving behavior analysis,

19
00:01:19,949 --> 00:01:22,609
and real time SMS and call alerts.

20
00:01:23,089 --> 00:01:28,979
This has significantly improved user
experience and operational efficiency.

21
00:01:29,759 --> 00:01:36,009
Beyond that, I specialize in performance
optimization and cost effective scaling.

22
00:01:36,629 --> 00:01:43,089
Helping businesses ensure their
applications run smoothly and efficiently.

23
00:01:44,029 --> 00:01:48,069
Now, let's talk about the
key components of EDA.

24
00:01:48,569 --> 00:01:55,239
Event Driven Architecture, EDA, is a
software design pattern that enables

25
00:01:55,249 --> 00:02:00,959
systems to communicate asynchronously
through events instead of direct requests.

26
00:02:01,709 --> 00:02:06,399
This approach is particularly
useful for building scalable,

27
00:02:06,469 --> 00:02:08,729
decoupled, and real time systems.

28
00:02:09,279 --> 00:02:12,219
EDA consists of three key components.

29
00:02:12,564 --> 00:02:14,744
He number one is event producers.

30
00:02:15,324 --> 00:02:20,314
These are components that generate
events when something happens for

31
00:02:20,314 --> 00:02:25,624
example in an e commerce system and
Event producer could be a user clicking

32
00:02:25,844 --> 00:02:31,214
the buy now button That may trigger an
event Number two is the event brokers.

33
00:02:31,844 --> 00:02:37,664
These act as intermediaries that
manage, that manage and route events

34
00:02:37,684 --> 00:02:39,374
between producers and consumers.

35
00:02:39,914 --> 00:02:44,614
Example include, message queues
like Apache Kafka or cloud based

36
00:02:44,614 --> 00:02:46,814
solutions like Azure Event Grid.

37
00:02:47,314 --> 00:02:49,504
Number three are the event consumers.

38
00:02:50,249 --> 00:02:56,149
These components listen for and respond
to events by triggering actions For

39
00:02:56,149 --> 00:03:01,869
example in a notification system an event
consumer might send an email or push

40
00:03:01,869 --> 00:03:04,559
notification When a new order is placed.

41
00:03:05,059 --> 00:03:10,009
So the primary advantage of EDA
over traditional synchronous

42
00:03:10,059 --> 00:03:14,979
architecture is that it allows for
better scalability and resilience.

43
00:03:15,459 --> 00:03:20,099
Since components are loosely coupled,
they can function independently,

44
00:03:20,199 --> 00:03:24,459
reducing bottlenecks and improving
performance in high demand systems.

45
00:03:24,959 --> 00:03:27,639
Understanding the core principle of.

46
00:03:28,174 --> 00:03:34,054
EDA helps us see why it's so
effective for modern applications.

47
00:03:34,714 --> 00:03:38,084
Let's go through the
three main principles.

48
00:03:38,694 --> 00:03:42,694
The first principle is
decoupling components.

49
00:03:43,194 --> 00:03:48,524
In traditional system, components are
tightly integrated, meaning that if one

50
00:03:48,584 --> 00:03:50,724
fails, it can impact the entire system.

51
00:03:51,224 --> 00:03:57,494
EDA however decouple services allowing
them to operate independently.

52
00:03:58,254 --> 00:04:01,764
This reduces system failures
and prevents bottleneck.

53
00:04:02,264 --> 00:04:06,864
For example, in an e commerce
platform, the payment service and

54
00:04:07,154 --> 00:04:14,949
order fulfillment service can operate
independently, improving The second

55
00:04:14,989 --> 00:04:18,269
principle is asynchronous communication.

56
00:04:18,819 --> 00:04:23,969
unlike request response models, where
components must wait for a response,

57
00:04:24,069 --> 00:04:26,599
EDA processes events asynchronously.

58
00:04:27,099 --> 00:04:31,409
This ensures non blocking operations,
meaning services don't have

59
00:04:31,409 --> 00:04:35,039
to wait for others to complete
their task before proceeding.

60
00:04:35,539 --> 00:04:40,459
A great example is a stock trading
platform where price updates are

61
00:04:40,459 --> 00:04:44,649
processed instantly without waiting
for each individual trade to complete.

62
00:04:45,149 --> 00:04:47,989
The third principle is the
real time responsiveness.

63
00:04:48,549 --> 00:04:53,879
One of the biggest advantages of EDA
is the ability to react instantly.

64
00:04:54,809 --> 00:05:00,019
two changes in data systems built
with E. D. A. Provide a better user

65
00:05:00,019 --> 00:05:04,919
experience by responding in real time
to events such as sending notifications

66
00:05:04,949 --> 00:05:10,389
when an item is back in stock or
updating dashboards with live analytics.

67
00:05:11,209 --> 00:05:16,009
This is crucial for industries like
finance, healthcare and logistics

68
00:05:16,189 --> 00:05:18,569
where real time updates are essential.

69
00:05:19,069 --> 00:05:25,344
So by following these principles, EDA
enable businesses to build more scalable,

70
00:05:25,434 --> 00:05:28,604
responsive, and resilient applications.

71
00:05:29,104 --> 00:05:33,474
Now that we have covered the
principle, let's look at the key

72
00:05:33,504 --> 00:05:35,494
benefits of event driven architecture.

73
00:05:35,994 --> 00:05:37,984
The first benefit is the scalability.

74
00:05:38,484 --> 00:05:44,584
EDA allows systems to handle growing
workloads dynamically by distributing

75
00:05:44,634 --> 00:05:47,254
event processing across multiple services.

76
00:05:47,754 --> 00:05:52,189
Unlike monolithic architectures,
where scaling requires Upgrading the

77
00:05:52,189 --> 00:05:58,169
entire system, EDA enable horizontal
scaling, meaning new instances of the

78
00:05:58,169 --> 00:06:01,499
services can be added if required.

79
00:06:02,369 --> 00:06:07,189
For example, in a streaming service
like Netflix, multiple microservices

80
00:06:07,209 --> 00:06:11,449
process different types of user
interactions in parallel, improving

81
00:06:11,469 --> 00:06:13,349
performance under high traffic loads.

82
00:06:13,349 --> 00:06:17,913
The second benefit is the
flexibility and modularity.

83
00:06:17,913 --> 00:06:19,054
An EDA.

84
00:06:19,554 --> 00:06:24,664
Individual services can be modified,
deployed, or scaled independently

85
00:06:24,774 --> 00:06:26,824
without affecting the entire system.

86
00:06:27,524 --> 00:06:32,464
This makes it easier to introduce new
features or fix issues with the system.

87
00:06:32,864 --> 00:06:33,874
Without downtime.

88
00:06:34,374 --> 00:06:38,844
A good example is e commerce
platform where order processing,

89
00:06:39,044 --> 00:06:43,414
inventory management, and customer
notifications can be updated separately.

90
00:06:43,914 --> 00:06:47,314
The third benefit is the
improved fault tolerance.

91
00:06:48,314 --> 00:06:53,004
One of the major advantages of
EDA is that components don't

92
00:06:53,014 --> 00:06:54,594
directly depend on each other.

93
00:06:54,974 --> 00:06:59,364
This means that if one service fails,
it won't crash the entire system.

94
00:06:59,894 --> 00:07:06,464
Other services can continue functioning
as usual for example in an airline booking

95
00:07:06,464 --> 00:07:12,024
system Even if the payment service is
experiencing issues user can still browse

96
00:07:12,024 --> 00:07:14,234
flights and add items To their car.

97
00:07:14,974 --> 00:07:20,804
So in summary eda helps businesses build
systems that are scalable resilient

98
00:07:21,164 --> 00:07:26,154
and adaptable, making it a crucial
architecture for modern applications.

99
00:07:26,654 --> 00:07:32,654
While event driven architecture offers
many advantages, its implementation

100
00:07:32,694 --> 00:07:34,424
comes with several challenges.

101
00:07:35,074 --> 00:07:40,614
Let's go through some key difficulties
organizations face when adapting EDA.

102
00:07:41,114 --> 00:07:43,984
The first challenge is the
complex event orchestration.

103
00:07:44,639 --> 00:07:49,749
managing the dependencies between
events can be challenging, especially

104
00:07:49,779 --> 00:07:54,739
in large scale, distributed systems,
since events are asynchronous.

105
00:07:55,029 --> 00:08:00,089
Ensuring the correct sequence of execution
and, handling dependencies between

106
00:08:00,099 --> 00:08:05,379
multiple events can require sophisticated
orchestration tools and techniques, such

107
00:08:05,379 --> 00:08:08,169
as event choreography or saga patrons.

108
00:08:08,669 --> 00:08:12,199
The second challenge is the
debugging and the tracing issues.

109
00:08:12,654 --> 00:08:17,374
So unlike traditional synchronous
architectures where tracing

110
00:08:17,694 --> 00:08:22,594
a request is straightforward,
debugging in EDA is more complex.

111
00:08:23,004 --> 00:08:27,754
events can be processed at different
times and across multiple service,

112
00:08:27,934 --> 00:08:31,234
services, making it difficult
to track the flow of data.

113
00:08:31,234 --> 00:08:36,444
To address this, organizations
need, distributed tracing tools

114
00:08:36,444 --> 00:08:42,098
like OpenTelemetry or To monitor
event flows and detect failures.

115
00:08:42,208 --> 00:08:49,208
The third challenge is ensuring data
consistency traditional data based

116
00:08:49,218 --> 00:08:54,678
transactions followed acid automacy
consistency isolation and durability

117
00:08:54,728 --> 00:09:02,598
principles But eda often requires eventual
consistencies instead This means that

118
00:09:02,638 --> 00:09:08,103
data across different services may not
be immediately consistent You leading to

119
00:09:08,103 --> 00:09:10,643
potential issues if not properly handled.

120
00:09:11,193 --> 00:09:16,273
techniques like idempotent, event
processing, event sourcing, and

121
00:09:16,273 --> 00:09:21,023
compensating transactions help
maintain consistency in an event driven

122
00:09:21,033 --> 00:09:23,313
system, despite these challenges.

123
00:09:23,733 --> 00:09:29,403
EDA remains a powerful approach for
building scalable and resilient systems.

124
00:09:30,003 --> 00:09:35,483
Organizations that successfully navigate
these complexities unlock significant

125
00:09:35,493 --> 00:09:37,703
performance and agility benefits.

126
00:09:38,203 --> 00:09:40,553
So the mitigation strategies.

127
00:09:41,053 --> 00:09:45,753
Use even choreography and even
sourcing to manage workflows.

128
00:09:46,253 --> 00:09:50,433
Implement distributed tracing
with tools like OpenTelemetry.

129
00:09:50,453 --> 00:09:57,123
Use idempotent event handlers to
prevent duplicate events processing.

130
00:09:57,623 --> 00:10:00,893
Let's see a real world
example of EDA in action.

131
00:10:01,563 --> 00:10:04,273
Imagine, a real time
vehicle tracking system.

132
00:10:04,913 --> 00:10:08,303
The vehicle sends location
updates as events.

133
00:10:08,803 --> 00:10:14,143
the event broker process the data
and sends it to relevant consumer.

134
00:10:14,643 --> 00:10:19,983
If critical conditions are met, alerts
are sent via SMS or phone calls.

135
00:10:20,483 --> 00:10:25,703
Thanks to EDA, everything happens
instantly, improving safety,

136
00:10:25,843 --> 00:10:28,263
compliance, and customer engagement.

137
00:10:28,763 --> 00:10:35,723
The NET ecosystem offers strong support
for event driven solutions through a

138
00:10:35,723 --> 00:10:38,153
range of powerful tools and services.

139
00:10:38,653 --> 00:10:44,373
Microsoft Azure provides cloud native,
event driven services that streamline

140
00:10:44,463 --> 00:10:46,623
event processing and communication.

141
00:10:47,463 --> 00:10:53,308
Key tools in the NET ecosystem
include Azure Event Grid, An

142
00:10:53,418 --> 00:10:56,768
event, event routing service that
simplifies event distribution.

143
00:10:57,368 --> 00:11:00,998
Azure Service Bus, a reliable
message drawing system for handling

144
00:11:01,048 --> 00:11:02,378
asynchronous communication.

145
00:11:02,928 --> 00:11:07,618
And Mass Transit, a distributed
messaging framework designed

146
00:11:07,708 --> 00:11:09,848
specifically for NET applications.

147
00:11:10,478 --> 00:11:15,928
These tools enable developers to
build scalable, responsive, and

148
00:11:15,978 --> 00:11:18,128
efficient event driven architectures.

149
00:11:18,628 --> 00:11:23,988
To successfully implement event driven
architecture in NET applications,

150
00:11:24,238 --> 00:11:28,968
we need the right tools to handle
event routing, message delivery,

151
00:11:29,108 --> 00:11:30,838
and high throughput event streaming.

152
00:11:31,578 --> 00:11:35,463
Here are Some key tools widely
used in dot net ecosystem.

153
00:11:35,973 --> 00:11:41,913
The first one is azure event grid it's
a cloud based event routing service that

154
00:11:41,923 --> 00:11:48,103
helps manage event driven workflows at
a scale it enables seamless integration

155
00:11:48,103 --> 00:11:53,383
between different azure services And third
party applications by routing events to

156
00:11:53,663 --> 00:12:00,943
the right subscribers The second is the
azure service bus it's a mess Messaging

157
00:12:01,273 --> 00:12:07,038
service that ensures reliable message
delivery between distributed components

158
00:12:07,448 --> 00:12:14,258
support like it support features like
message queues topics and subscriptions

159
00:12:14,498 --> 00:12:19,838
making it an ideal choice for decoupling
services and improving fault tolerance

160
00:12:20,628 --> 00:12:25,893
Third is the kafka or the rapid mq
is the open source alternatives So

161
00:12:25,893 --> 00:12:31,693
apache kafka, it's a distributed even
streaming platform that handles real

162
00:12:31,713 --> 00:12:37,723
time even processing at a high scale It
is widely used in big data applications

163
00:12:38,553 --> 00:12:41,123
and the other one is was the rabbit nq.

164
00:12:41,123 --> 00:12:45,433
It's a lightweight message broker
that supports various messaging

165
00:12:45,573 --> 00:12:51,123
patterns Making it a good choice
for microservices communication So

166
00:12:51,163 --> 00:12:55,748
by using these tools developers can
easily efficiently implement event

167
00:12:55,748 --> 00:13:01,568
driven architectures while ensuring
scalability, reliability, and real

168
00:13:01,588 --> 00:13:03,588
time processing in their applications.

169
00:13:04,088 --> 00:13:09,178
So implementing event driven
architecture effectively requires

170
00:13:09,238 --> 00:13:15,108
adopting best practices, to ensure
system reliability and efficiency.

171
00:13:15,608 --> 00:13:18,748
So here are the three key best practices.

172
00:13:19,228 --> 00:13:22,008
The first best practice
is the event sourcing.

173
00:13:22,073 --> 00:13:28,873
Store all event, all changes as
events rather than the current state.

174
00:13:29,373 --> 00:13:33,273
This makes it easier to roll
back changes and provides a full

175
00:13:33,303 --> 00:13:35,463
history for auditing and debugging.

176
00:13:36,373 --> 00:13:41,503
it is particularly useful in
financial and transactional systems.

177
00:13:42,003 --> 00:13:44,523
The second is the eventual consistency.

178
00:13:45,343 --> 00:13:50,383
Unlike traditional databases with
ACID transactions, EDA systems often

179
00:13:50,693 --> 00:13:54,743
operate under eventual consistency
rather than immediate consistency.

180
00:13:55,173 --> 00:13:59,563
This means that some delays in
data synchronization may occur,

181
00:13:59,623 --> 00:14:03,613
but systems should be designed to
handle these delays gracefully.

182
00:14:04,113 --> 00:14:09,443
Techniques like compensating
transactions and saga pattern help manage

183
00:14:09,463 --> 00:14:11,823
consistency in distributed systems.

184
00:14:12,163 --> 00:14:14,883
The third is the
observability and monitoring.

185
00:14:15,383 --> 00:14:21,183
So debugging in EDA can be a complex
thing since events are asynchronous

186
00:14:21,943 --> 00:14:24,063
and flow through multiple services.

187
00:14:25,033 --> 00:14:30,043
Use tracing tools like OpenTelemetry
or Jaeger to visualize event

188
00:14:30,043 --> 00:14:32,923
flows and detect failures early.

189
00:14:33,748 --> 00:14:38,998
Logs, metrics, and distributed
tracing should be integrated into

190
00:14:38,998 --> 00:14:40,978
the system for better visibility.

191
00:14:41,718 --> 00:14:45,868
By following all these best
practices, organizations can

192
00:14:45,868 --> 00:14:49,468
improve system resilience,
maintainability, and scalability

193
00:14:49,778 --> 00:14:51,698
in their event driven applications.

194
00:14:53,053 --> 00:14:58,523
While EDA offers numerous advantages,
cost and performance optimization is

195
00:14:58,523 --> 00:15:01,203
crucial for maintaining efficiency.

196
00:15:01,893 --> 00:15:04,203
Here are three key strategies.

197
00:15:04,973 --> 00:15:10,743
The first is optimize infrastructure
by batch processing events when real

198
00:15:10,773 --> 00:15:12,683
time responses are not required.

199
00:15:13,243 --> 00:15:16,093
Not all events need to
be processed instantly.

200
00:15:16,443 --> 00:15:22,143
So by patching non critical events,
systems can reduce compute resource

201
00:15:22,143 --> 00:15:24,573
usage and improve cost efficiency.

202
00:15:25,073 --> 00:15:29,723
For example, analytics data
collection can be processed in

203
00:15:29,763 --> 00:15:30,943
batches instead of real time.

204
00:15:31,443 --> 00:15:35,863
Number two is the implement auto scaling
strategies to ensure efficient resource

205
00:15:35,863 --> 00:15:42,583
usage So auto scaling allows event driven
services to adjust based on demand, right?

206
00:15:43,203 --> 00:15:48,873
Cloud platforms like azure functions
or aws lambda enable serverless auto

207
00:15:48,873 --> 00:15:56,513
scaling ensuring Resources are used
optimally this thing Helps handle traffic

208
00:15:56,523 --> 00:16:02,593
spikes efficiently while keeping the
cost low and the third is the reduce

209
00:16:02,593 --> 00:16:06,983
cost by filtering Unnecessary events
before they reach event consumers.

210
00:16:07,923 --> 00:16:12,003
So not all events need to be
processed filter out redundant

211
00:16:12,403 --> 00:16:16,723
Duplicate or the events that are
not needed in the pipeline early.

212
00:16:17,493 --> 00:16:22,293
So even filtering at the broker
level, for example using kafka topic

213
00:16:22,553 --> 00:16:28,208
partitionary partitioning or azure event
rate filters can reduce unnecessary

214
00:16:28,208 --> 00:16:30,808
processing and improve system performance.

215
00:16:31,308 --> 00:16:35,918
By implementing, all these
optimizations, businesses can maximize

216
00:16:35,918 --> 00:16:40,478
the benefits of EDA while keeping
operational costs under control.

217
00:16:40,978 --> 00:16:48,078
EDA is continuously evolving and
several trends will shape its future.

218
00:16:48,078 --> 00:16:52,178
The first is the AI driven processing.

219
00:16:52,678 --> 00:16:58,328
AI and machine learning will play a
bigger role in event driven systems.

220
00:16:59,178 --> 00:17:04,858
Automated event processing will allow
systems to make complex decisions in

221
00:17:04,948 --> 00:17:07,628
real time without human intervention.

222
00:17:08,108 --> 00:17:12,638
For example, AI powered fraud
detection can instantly flag

223
00:17:12,638 --> 00:17:14,148
suspicious transactions.

224
00:17:14,478 --> 00:17:19,218
Number two is serverless EDA for
reduced infrastructure overhead.

225
00:17:19,718 --> 00:17:24,238
Serverless computing, for example,
Azure Functions or AWS Lambda,

226
00:17:24,238 --> 00:17:27,558
will further reduce the need
for managing infrastructure.

227
00:17:27,858 --> 00:17:32,268
This enables businesses to focus
on event driven logic without

228
00:17:32,298 --> 00:17:33,898
worrying about the server management.

229
00:17:34,398 --> 00:17:39,148
It will improve scalability, cost
efficiency, and rapid deployment.

230
00:17:39,648 --> 00:17:43,838
Number third, the stronger governance
models to manage event sprawl.

231
00:17:44,708 --> 00:17:50,958
as organizations adopt EDA, they will need
better event management and governance.

232
00:17:51,518 --> 00:17:55,878
Without proper governance, uncontrolled
event sprawl can lead to performance

233
00:17:55,908 --> 00:17:59,048
issues, security risk, and complexity.

234
00:17:59,548 --> 00:18:04,368
Event catalogs, schema registries and
monitoring tools will be essential for

235
00:18:04,378 --> 00:18:06,738
managing large scale event driven systems.

236
00:18:08,028 --> 00:18:13,598
ADA is set to redefine how applications
handle real time data and will

237
00:18:13,598 --> 00:18:18,580
continue to do to be a key enabler
for, of automation, scalability,

238
00:18:18,650 --> 00:18:20,840
and intelligence in modern systems.

239
00:18:21,340 --> 00:18:26,280
To summarize, let's review the
key takeaways from our discussion

240
00:18:26,330 --> 00:18:28,070
on event driven architecture.

241
00:18:28,620 --> 00:18:34,250
first is the EDA enables real time,
scalable, and resilient applications

242
00:18:34,290 --> 00:18:38,330
by allowing systems to process
and respond to events efficiently.

243
00:18:38,830 --> 00:18:43,830
Number two is decoupling services and
leveraging asynchronous processing

244
00:18:43,840 --> 00:18:50,390
enhance agility and ensure independent
evolution of components with key tools

245
00:18:50,390 --> 00:18:57,070
like Azure Event Grid, Azure Service
Bus, Kafka and RabbitMQ, streamline

246
00:18:57,120 --> 00:19:01,030
event routing, message handling
and real time event processing.

247
00:19:01,530 --> 00:19:07,035
Best practices such as event
sourcing eventually Eventual

248
00:19:07,075 --> 00:19:11,135
consistency and distributed tracing
help maintain data integrity,

249
00:19:11,145 --> 00:19:12,615
observability, and ease of debugging.

250
00:19:12,615 --> 00:19:19,925
Optimizing cost and performance through
batch processing, order scaling, and

251
00:19:19,935 --> 00:19:24,935
event filtering ensures that event drivens
remain cost effective and efficient.

252
00:19:25,715 --> 00:19:30,560
By following these principles and
best practices, Businesses can

253
00:19:30,560 --> 00:19:35,870
successfully implement EDA to build next
generation event driven applications.

254
00:19:36,370 --> 00:19:42,140
So mastering event driven architecture
is about more than just scalability.

255
00:19:42,480 --> 00:19:46,400
It's about building future ready
applications that can handle

256
00:19:46,450 --> 00:19:48,200
real time events effectively.

257
00:19:48,660 --> 00:19:53,860
So whether it's real time payment, IoT
sensors, vehicle tracking, or fraud

258
00:19:53,860 --> 00:19:58,470
detection, EDA ensures that systems remain
responsive, fault tolerant, and efficient.

259
00:19:58,800 --> 00:20:00,020
and cost effective.

260
00:20:00,630 --> 00:20:06,560
and as technology evolves, companies
that embrace EDA stay ahead

261
00:20:06,840 --> 00:20:08,090
in innovation and performance.

262
00:20:08,590 --> 00:20:14,100
the combination of AI, serverless
computing, and governance model will drive

263
00:20:14,110 --> 00:20:16,550
the future of event driven applications.

264
00:20:16,680 --> 00:20:22,900
By adopting EDA, businesses can future
proof their architectures, improve user

265
00:20:22,900 --> 00:20:27,600
experiences, And unlock new opportunities
for automation and intelligence

266
00:20:28,100 --> 00:20:30,950
Finally, thank you for joining me today.

267
00:20:31,290 --> 00:20:36,600
I hope this presentation has given you a
clear understanding of How event driven

268
00:20:36,710 --> 00:20:41,490
architecture can transform your systems
if you have any questions feel free

269
00:20:41,490 --> 00:20:46,590
to ask Let's build scalable responsive
and feature ready systems together

