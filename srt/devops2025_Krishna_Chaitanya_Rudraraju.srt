1
00:00:00,470 --> 00:00:04,090
Hello everyone, this is Krishna
Chaitanya and welcome to my talk

2
00:00:04,090 --> 00:00:05,550
on Threat Modeling in DevOps.

3
00:00:06,300 --> 00:00:09,040
Today we are going to go over
what is Threat Modeling and how

4
00:00:09,040 --> 00:00:12,229
it can be integrated into DevOps
and what are the benefits of

5
00:00:12,739 --> 00:00:14,569
this Threat Modeling in DevOps.

6
00:00:15,069 --> 00:00:18,890
Before we go into details of what is
Threat Modeling, let's try to understand

7
00:00:18,940 --> 00:00:21,030
why Threat Modeling in DevOps is needed.

8
00:00:21,530 --> 00:00:25,810
DevOps gives us the benefit of integrating
development and operations and hence

9
00:00:25,870 --> 00:00:27,800
it prioritizes speed and integration.

10
00:00:28,300 --> 00:00:31,339
But if we talk about security
in this scenario, it might

11
00:00:31,339 --> 00:00:32,940
seem like a blocker sometimes.

12
00:00:33,650 --> 00:00:37,009
But if we look at the benefits
and the integration mechanisms,

13
00:00:37,599 --> 00:00:38,970
it is clearly not a blocker.

14
00:00:39,020 --> 00:00:42,600
In fact, it basically powers
the whole integration.

15
00:00:43,100 --> 00:00:46,959
Threat modeling can be seamlessly
integrated into DevOps workflows with

16
00:00:46,959 --> 00:00:48,609
the available tools and technologies.

17
00:00:49,439 --> 00:00:52,839
This will help us identify
vulnerabilities early, which reduces

18
00:00:52,839 --> 00:00:56,954
the remediation costs, And this
enhances the overall security posture.

19
00:00:57,454 --> 00:00:59,524
Now, what is threat modeling?

20
00:01:00,054 --> 00:01:04,104
Threat modeling is a structured
process to identify risks and

21
00:01:04,364 --> 00:01:06,044
mitigate them in earlier stages.

22
00:01:07,004 --> 00:01:10,614
This is a cycle, and it is similar
to any agile development cycle.

23
00:01:10,954 --> 00:01:14,664
We first define the security
requirements of our product, such

24
00:01:14,664 --> 00:01:17,014
as does it require data encryption?

25
00:01:17,524 --> 00:01:21,074
Does it require data, persistence
in a particular region?

26
00:01:21,084 --> 00:01:21,144
Thank you.

27
00:01:21,644 --> 00:01:26,084
And once we define the security
requirements, now we use a threat

28
00:01:26,084 --> 00:01:29,254
modeling tool, which we're going
to talk about in later, slides.

29
00:01:30,034 --> 00:01:33,334
We use this tool to, visually
represent the whole, system

30
00:01:33,334 --> 00:01:36,204
architecture with various boundaries.

31
00:01:36,384 --> 00:01:40,284
By boundaries, I mean where, like
what are the components inside

32
00:01:40,284 --> 00:01:42,284
internet, inside the scope of internet?

33
00:01:42,704 --> 00:01:45,374
What are the components
inside the scope of on-prem?

34
00:01:45,584 --> 00:01:47,884
What are the components
inside the scope of, cloud?

35
00:01:48,384 --> 00:01:53,734
And, once we have that diagram, now we
go and identify based on the diagram,

36
00:01:53,784 --> 00:01:57,714
we identify what are the possible
security, risks for our components.

37
00:01:58,414 --> 00:02:03,464
For example, if there's a possibility
of SQL injection, is there a

38
00:02:03,464 --> 00:02:07,444
possibility of a session hijacking,
et cetera, depending on the various

39
00:02:07,445 --> 00:02:09,124
components and our, architecture.

40
00:02:10,004 --> 00:02:12,514
Once we identify, the risks.

41
00:02:12,904 --> 00:02:14,984
Now, we look into the
mitigation strategies.

42
00:02:15,804 --> 00:02:19,464
Once we, once we look into, once we
implement the mitigation strategies,

43
00:02:19,994 --> 00:02:24,384
we use different testing mechanisms to
validate the whole, mitigation strategies.

44
00:02:24,704 --> 00:02:28,884
Is the solution, susceptible
to risk even after we apply the

45
00:02:28,894 --> 00:02:30,374
necessary mitigation strategies?

46
00:02:30,874 --> 00:02:36,024
And, during this whole process, the
key, thing is identifying the risks.

47
00:02:36,849 --> 00:02:40,089
And what helps us identify risk
is the right set of questions.

48
00:02:40,679 --> 00:02:42,189
For example, what are we building?

49
00:02:42,459 --> 00:02:43,599
What can go wrong?

50
00:02:44,499 --> 00:02:46,099
And what are we going to do about it?

51
00:02:46,779 --> 00:02:49,939
So asking the right questions will
help improve the threat model.

52
00:02:50,439 --> 00:02:54,210
The key benefits of, threat modeling
are, because we are integrating into

53
00:02:54,210 --> 00:02:58,679
DevOps in the earlier stages of the
development lifecycle, we are able to

54
00:02:58,730 --> 00:03:00,549
catch any potential, threats early.

55
00:03:01,270 --> 00:03:06,940
the, the mic, the mitigation parts are
also integrated into CI ICD pipelines.

56
00:03:07,420 --> 00:03:11,530
Example, if you think of that SQL
injection is a PO is a possible

57
00:03:12,160 --> 00:03:15,640
threat to your replication, we can,
we are able to catch that in earlier

58
00:03:15,640 --> 00:03:19,520
stages using, code scanning tools,
vulnerable vulnerability scanning tools.

59
00:03:20,120 --> 00:03:23,090
These, tools can be integrated
not only into your local build,

60
00:03:23,120 --> 00:03:24,655
but also your, CICD build.

61
00:03:25,600 --> 00:03:31,040
This helps us, catch the risks and
threats early, which eventually reduces

62
00:03:31,040 --> 00:03:32,450
the vulnerabilities in production.

63
00:03:32,950 --> 00:03:37,770
And because, threat modeling involves
a lot of collaboration, because we

64
00:03:37,770 --> 00:03:42,270
need to try, ask, the right questions,
understand, and do research, work with

65
00:03:42,279 --> 00:03:48,050
the security folks to add it to what
you mitigation strategies are right.

66
00:03:48,430 --> 00:03:50,950
This improve, improves the
collaboration among developers.

67
00:03:51,450 --> 00:03:55,230
So, as we discussed, before, asking
the right questions will help us

68
00:03:55,320 --> 00:03:57,510
improve, the overall security posture.

69
00:03:58,039 --> 00:04:00,060
And this is a part of threat modeling.

70
00:04:00,560 --> 00:04:05,859
To facilitate the, thought process,
there's a framework called STRITE, and

71
00:04:06,369 --> 00:04:08,090
this helps us ask the right questions.

72
00:04:08,750 --> 00:04:12,110
And, in the STRITE framework,
S stands for spoofing.

73
00:04:12,110 --> 00:04:12,370
Okay.

74
00:04:12,750 --> 00:04:15,930
Is there, is there a possibility
for identity spoofing?

75
00:04:16,140 --> 00:04:17,380
Are we using MFA?

76
00:04:18,010 --> 00:04:19,330
Are we using OAuth2?

77
00:04:19,600 --> 00:04:22,130
These are the questions that
we need to ask for spoofing.

78
00:04:22,730 --> 00:04:24,110
Next comes T, tampering.

79
00:04:24,800 --> 00:04:27,340
This involves malicious
modifications of data.

80
00:04:27,740 --> 00:04:31,860
Example, is there a possibility
of unauthorized changes being

81
00:04:31,860 --> 00:04:35,520
made to persistent data, which,
which involves data modifications.

82
00:04:36,230 --> 00:04:36,890
Next, repudiation.

83
00:04:37,390 --> 00:04:41,750
Is there a possibility of user denying
any changes he has made to the state?

84
00:04:42,250 --> 00:04:43,990
What do we do to mitigate that?

85
00:04:44,390 --> 00:04:48,190
Next comes information disclosure,
which is nothing but data leak.

86
00:04:48,790 --> 00:04:51,640
Is the user able to see data
that he's not supposed to?

87
00:04:51,830 --> 00:04:53,320
Like, is there authorizations?

88
00:04:54,230 --> 00:04:56,280
And is there, authentications
in all the place?

89
00:04:57,240 --> 00:04:59,010
Next comes the denial of service.

90
00:04:59,550 --> 00:05:05,520
Are we protecting our systems against
any possible Disruptions or DOS attacks.

91
00:05:06,290 --> 00:05:08,250
For example, are we using load balancers?

92
00:05:08,750 --> 00:05:09,800
Are we using front gate?

93
00:05:10,300 --> 00:05:13,210
There are various cloud
solutions available for that.

94
00:05:13,910 --> 00:05:16,460
The last one is E, elevation of privilege.

95
00:05:17,240 --> 00:05:21,100
Is there a possibility for any
user to gain unauthorized access by

96
00:05:21,150 --> 00:05:22,870
parallelly moving inside our system?

97
00:05:23,610 --> 00:05:26,250
Do we have, are we using
managed identities?

98
00:05:26,860 --> 00:05:29,720
Which is a way of, way to
avoid any unauthorized access.

99
00:05:30,220 --> 00:05:34,880
So all these, using this, stride
framework, we are able to ask questions

100
00:05:34,880 --> 00:05:37,570
that cover the breadth of security issues.

101
00:05:38,070 --> 00:05:41,850
Next, let's talk about threat modeling,
integration into a DevOps workflow.

102
00:05:42,350 --> 00:05:46,410
Because we are going to involve
threat modeling in the initial phases,

103
00:05:46,450 --> 00:05:50,380
which is planning phase, we need
to identify potential risks based

104
00:05:50,380 --> 00:05:54,290
on our solution and then account
that into the feature, planning.

105
00:05:54,790 --> 00:05:57,930
Because without accounting, we are
unable to allocate that necessary

106
00:05:57,930 --> 00:06:02,620
time and in, in, in there's a risk
of skipping this threat modeling.

107
00:06:03,490 --> 00:06:08,310
So hence, identify the potential risks,
add that work into your planning phase.

108
00:06:08,520 --> 00:06:09,420
Next, development.

109
00:06:10,400 --> 00:06:14,120
So, wherever possible, we need to
automate that and there are a bunch

110
00:06:14,130 --> 00:06:17,540
of code analysis and dependency
check tools that are available.

111
00:06:17,540 --> 00:06:22,210
So, And the two places where we can
integrate that is both in the local

112
00:06:22,260 --> 00:06:28,380
development and which come, which come as
extensions to our ID, as well as into the

113
00:06:28,390 --> 00:06:33,530
build itself, inside the CI CD pipeline,
for example, are the artifact sign.

114
00:06:33,760 --> 00:06:38,080
What this helps us achieve is any
new developer who joins the team,

115
00:06:38,340 --> 00:06:40,400
he's able to, he or she is able to.

116
00:06:41,245 --> 00:06:45,115
Just focus on development because the
necessary tools and checks are in place.

117
00:06:45,175 --> 00:06:49,355
And they basically, let you
know that whether, your code is

118
00:06:49,365 --> 00:06:51,125
susceptible to any vulnerabilities.

119
00:06:51,625 --> 00:06:55,985
And, the, the, in the release phase,
we run the integration test to validate

120
00:06:55,985 --> 00:06:58,025
if mitigations are working as expected.

121
00:06:58,855 --> 00:07:01,405
Once we deploy, now comes the key thing.

122
00:07:01,805 --> 00:07:05,315
We need to ensure that we have
full monitoring, of the environment

123
00:07:05,315 --> 00:07:06,605
and as well as the solution.

124
00:07:07,570 --> 00:07:10,070
The last thing is, continuous, monitoring.

125
00:07:10,940 --> 00:07:12,100
The threats keep changing.

126
00:07:12,180 --> 00:07:16,170
There are no, we can definitely say
that the threats are not finite.

127
00:07:16,840 --> 00:07:21,600
And as a part of monitoring, we should,
be able to pull in the vulnerability data,

128
00:07:21,630 --> 00:07:28,080
data sets in real time so that we are
able to, catch threats as they emerge.

129
00:07:28,580 --> 00:07:33,010
So now let's look at an application,
a sample application and see How we

130
00:07:33,010 --> 00:07:36,580
can identify threats and what are the
kinds of mitigations for this scenario.

131
00:07:37,140 --> 00:07:40,540
So let's consider an e commerce
application, which is a full

132
00:07:40,550 --> 00:07:43,780
stack application with a front
end React, back end Node.

133
00:07:43,790 --> 00:07:45,610
js, and then there's a database.

134
00:07:46,120 --> 00:07:49,460
And as a part of the development
and deployment, we use GitHub

135
00:07:49,460 --> 00:07:51,740
Actions and DevOps for CICB.

136
00:07:52,240 --> 00:07:55,910
So because it's a full stack web
application, let's talk about the threats.

137
00:07:56,580 --> 00:07:59,520
First thing is, and let's use
the STRIDE framework for this.

138
00:08:00,270 --> 00:08:02,030
STRIDE, wherein S stands for spoofing.

139
00:08:02,520 --> 00:08:05,980
Because the user is able to log
in, there's a possibility of,

140
00:08:06,030 --> 00:08:07,740
fake tokens and session hijacking.

141
00:08:08,390 --> 00:08:13,500
So, in order to mitigate this, threat,
are we using, OAuth2 for authentication?

142
00:08:14,450 --> 00:08:15,930
Next comes, T, tampering.

143
00:08:16,430 --> 00:08:21,645
The, the, possibility of tampering can
be when somebody, There's a bad actor

144
00:08:21,655 --> 00:08:25,865
who is going to alter the Docker images
or any code that we are deploying.

145
00:08:26,175 --> 00:08:29,455
So in order to mitigate this risk,
we need to make sure that any code

146
00:08:29,455 --> 00:08:34,155
that is getting deployed is signed
as the Docker images as well.

147
00:08:34,825 --> 00:08:39,105
Then the third thing is DOS because
it's a full stack web application

148
00:08:39,145 --> 00:08:40,765
and, and it's open to internet.

149
00:08:41,025 --> 00:08:44,875
there's a possibility of API
flooding and DDoS attacks.

150
00:08:44,875 --> 00:08:45,035
Thanks.

151
00:08:45,495 --> 00:08:48,715
So what are the kinds of, then we
need to think about mitigations

152
00:08:48,725 --> 00:08:50,715
for this potential threat.

153
00:08:51,325 --> 00:08:55,845
Are we having a rate limiting,
throttling, auto scaling available

154
00:08:55,875 --> 00:08:57,295
for the, inside our system?

155
00:08:57,665 --> 00:08:59,105
If not, we need to implement that.

156
00:08:59,705 --> 00:09:03,475
So using this example, we have,
we have, walked through like how

157
00:09:03,525 --> 00:09:07,035
to identify the threats and how,
how do we talk about mitigations?

158
00:09:07,535 --> 00:09:11,035
now let's talk about what are
the tools for threat modeling.

159
00:09:11,535 --> 00:09:12,555
So threat modeling.

160
00:09:13,055 --> 00:09:16,805
is, as I told in the beginning,
it can be integrated seamlessly

161
00:09:16,805 --> 00:09:19,715
because there are a wide variety of
tools and technologies available.

162
00:09:20,125 --> 00:09:24,975
One of the famous tool is Microsoft Threat
Modeling tool because it, it has the power

163
00:09:24,975 --> 00:09:31,515
to visualize, all the components and also
the data flow between those components and

164
00:09:31,515 --> 00:09:34,665
also the boundaries among the components.

165
00:09:34,675 --> 00:09:37,665
For example, what components are
inside the internet boundary?

166
00:09:37,665 --> 00:09:38,755
What are inside the cloud?

167
00:09:38,755 --> 00:09:40,395
What's are, what are inside the on prem?

168
00:09:40,895 --> 00:09:44,955
This helps us ask the right questions
because visualization is important.

169
00:09:45,695 --> 00:09:48,824
There's also an open source
modeling tool called ThreadDragon,

170
00:09:48,825 --> 00:09:50,655
you can even check out that tool.

171
00:09:51,495 --> 00:09:56,465
Now, once we identify the threats,
now we need to talk about mitigations.

172
00:09:57,125 --> 00:10:01,855
So there are tools like Sync and
Checkmarks that are code analysis tools.

173
00:10:01,925 --> 00:10:05,565
You can use that to scan your
code for any vulnerabilities.

174
00:10:06,065 --> 00:10:09,785
Or as you can even develop
your own data streams with the

175
00:10:09,785 --> 00:10:11,185
open source vulnerability data.

176
00:10:11,685 --> 00:10:16,005
And the last thing as we, identified
is monitoring and alerting.

177
00:10:16,225 --> 00:10:20,185
So once we have the right, threat
modeling complete and we are able

178
00:10:20,205 --> 00:10:23,335
to deploy that, we need to also
monitor for real time threats.

179
00:10:24,045 --> 00:10:27,465
So we can use tools like Azure Monitor
and Sentinel to identify those.

180
00:10:27,965 --> 00:10:31,805
So what are the best practices to
succeed in the integrating threat

181
00:10:31,805 --> 00:10:33,445
modeling into our DevOps pipeline?

182
00:10:33,945 --> 00:10:36,595
Because, we need to ask the
right questions, we need to

183
00:10:36,595 --> 00:10:38,075
understand the security posture.

184
00:10:38,115 --> 00:10:42,505
This involves a lot of collaboration,
not only among the team and also outside

185
00:10:42,505 --> 00:10:43,945
the team with security researchers.

186
00:10:44,235 --> 00:10:45,775
So collaboration is the first thing.

187
00:10:46,315 --> 00:10:51,335
Second thing is, as we spoke in the
previous slide, Wherever automation is

188
00:10:51,365 --> 00:10:53,545
possible, we need to add automation.

189
00:10:53,565 --> 00:10:56,895
For example, are we having
the right code analysis tools?

190
00:10:57,805 --> 00:11:01,495
What this, enables us is seamless
integration because any new,

191
00:11:01,585 --> 00:11:04,875
developer on the team is, able
to like leverage that power and

192
00:11:04,875 --> 00:11:06,745
then add, concentrate on features.

193
00:11:07,245 --> 00:11:10,035
Next, as we know, threats are not finite.

194
00:11:10,075 --> 00:11:10,965
They keep emerging.

195
00:11:10,965 --> 00:11:15,070
So do we have the right, systems
in place to, make sure that As the

196
00:11:15,070 --> 00:11:18,940
new threats, threats emerge, we
are able to, modify our threat, our

197
00:11:18,990 --> 00:11:21,650
model and then, react based on that.

198
00:11:22,270 --> 00:11:26,650
And, because these threats, keep
emerging, we need to constantly learn

199
00:11:26,770 --> 00:11:29,740
what are the security principles,
what are the latest threats.

200
00:11:29,750 --> 00:11:31,850
So improve our security knowledge.

201
00:11:32,410 --> 00:11:33,810
And the last thing is monitoring.

202
00:11:34,010 --> 00:11:36,900
We need to, ensure that we have
all the right monitorings in

203
00:11:36,900 --> 00:11:38,590
place and the security measures.

204
00:11:39,090 --> 00:11:42,810
this, all the, like, threat, talking
about threat modeling in DevOps might be

205
00:11:42,810 --> 00:11:47,730
overwhelming because, our applications
tend to be like pretty complex.

206
00:11:48,120 --> 00:11:52,860
So way to, the best, way to achieve,
success is way to start small

207
00:11:53,500 --> 00:11:55,260
by focusing on critical areas.

208
00:11:55,700 --> 00:12:01,550
And as we identify critical areas
and we succeed in those areas, way

209
00:12:01,550 --> 00:12:03,920
to incrementally improve our, poster.

210
00:12:04,405 --> 00:12:06,745
by slowly, increasing the boundary.

211
00:12:07,665 --> 00:12:12,765
And this helps us, securing, and
building resilient applications at the

212
00:12:12,765 --> 00:12:14,685
same time not compromising on speed.

213
00:12:15,185 --> 00:12:18,375
I hope you enjoyed the talk, and
I would like to learn about your,

214
00:12:18,525 --> 00:12:23,805
scenarios and see how we can, fit threat
modeling into your DevOps, workflows.

215
00:12:24,315 --> 00:12:27,525
And if you have any questions,
feel free to, contact me.

216
00:12:28,025 --> 00:12:29,555
And this is my LinkedIn, profile.

217
00:12:30,055 --> 00:12:30,455
Thank you.

