1
00:00:00,500 --> 00:00:03,200
Good morning everyone, and
thank you for being here.

2
00:00:03,330 --> 00:00:07,580
My name is Sunil and I have an
experience for almost like a f 16

3
00:00:07,580 --> 00:00:11,750
years of experience in the networking
domain and in the security domain

4
00:00:11,870 --> 00:00:14,120
and also in the automation side.

5
00:00:14,900 --> 00:00:18,409
So today we are here to discuss
about the topic called bridging the

6
00:00:18,409 --> 00:00:21,500
layers in the platform engineering
in the modern network stack.

7
00:00:22,000 --> 00:00:25,210
So in the next 15 minutes, I
will take you through why this

8
00:00:25,210 --> 00:00:26,740
topic is so important to us.

9
00:00:26,770 --> 00:00:30,010
The challenges we face in today's
environment, the tools that help

10
00:00:30,010 --> 00:00:34,360
us to improve our security and the
deployment and everything else, right?

11
00:00:34,360 --> 00:00:38,440
And then finally, some real world
strategies and lessons we can apply.

12
00:00:38,860 --> 00:00:39,280
Okay?

13
00:00:40,030 --> 00:00:43,270
Coming to this matter, why this
is so important for us, right?

14
00:00:43,330 --> 00:00:44,230
Why this matters for us.

15
00:00:44,574 --> 00:00:49,495
Let's begin why this matters, because
applications today are no longer

16
00:00:49,495 --> 00:00:51,864
built as chain monoliths, right?

17
00:00:52,165 --> 00:00:57,995
So they are distributed across different
regions and different locations and in

18
00:00:57,995 --> 00:00:59,635
different cloud environments, right?

19
00:01:00,055 --> 00:01:03,740
Some of them might host the applications
in AWS, some of them might host the

20
00:01:03,745 --> 00:01:06,535
applications in Azure, and some of
them might host the applications

21
00:01:06,535 --> 00:01:07,975
in their on-prem data centers.

22
00:01:08,425 --> 00:01:11,755
And there are scenarios where they want
to host the applications in multiple.

23
00:01:12,660 --> 00:01:16,460
Cloud environments and also in the
on-prem depends upon the needs of the

24
00:01:16,530 --> 00:01:18,390
business and all those things, right?

25
00:01:19,295 --> 00:01:23,195
That makes all clear lines
between infrastructure, the

26
00:01:23,195 --> 00:01:26,825
networking and applications,
but to blood together, right?

27
00:01:27,035 --> 00:01:31,144
Because the requirements have been
changing every day and we have to

28
00:01:31,144 --> 00:01:33,335
see how we can make these things.

29
00:01:33,644 --> 00:01:36,944
Align together and make it in a
better way to deploy the things.

30
00:01:37,904 --> 00:01:40,244
Today, the developers are
expecting something different.

31
00:01:40,394 --> 00:01:45,734
They want the platforms that are fast,
secure, and self-service without needing

32
00:01:45,734 --> 00:01:47,864
to worry about the plumbing underneath.

33
00:01:47,864 --> 00:01:50,564
So why they want, they don't
need to worry about how that.

34
00:01:50,634 --> 00:01:54,354
Network is built at the downstream
where they don't have any knowledge on

35
00:01:54,654 --> 00:01:59,164
how the things are deployed and also
the security of the deployments, right?

36
00:01:59,254 --> 00:02:06,214
So the shift is focusing to rethink the
how infrastructure platforms and networks

37
00:02:06,214 --> 00:02:11,370
come together, and that is where the
platform engineering enters the picture.

38
00:02:12,209 --> 00:02:12,599
Okay.

39
00:02:13,079 --> 00:02:16,799
The key challenges, of course,
that is not easy, right?

40
00:02:17,289 --> 00:02:21,299
The first challenge is complexity
with the hybrid deployments, right?

41
00:02:21,399 --> 00:02:26,469
Where we have the the applications
being deployed in multiple clouds.

42
00:02:26,949 --> 00:02:30,829
And I would say deploying
the things in the on-prem.

43
00:02:31,209 --> 00:02:36,409
And, most probably the how the, all the
things are being deployed and they're

44
00:02:36,409 --> 00:02:38,259
very tough to analyze for a developer.

45
00:02:38,499 --> 00:02:40,809
And the second thing is the
challenge of the security.

46
00:02:40,809 --> 00:02:43,659
The world is moving so fast
with the zero trust mindset.

47
00:02:44,169 --> 00:02:47,379
That means that we have to
identify, verify our required

48
00:02:47,379 --> 00:02:48,639
across each and every layer.

49
00:02:48,639 --> 00:02:53,649
We are deploying the things now, not
just at the at the where the is deployed.

50
00:02:54,149 --> 00:02:54,569
We have to.

51
00:02:55,069 --> 00:02:59,899
We deploy the things more securely for the
business owners and for the applications,

52
00:02:59,899 --> 00:03:01,819
and also for the businesses, right?

53
00:03:02,389 --> 00:03:04,309
And also the last, but not least, right?

54
00:03:04,359 --> 00:03:08,439
The performance of the applications
because the applications being deployed

55
00:03:08,639 --> 00:03:14,099
in a multiple cloud environment and also
in a different geographical locations.

56
00:03:14,519 --> 00:03:17,699
So the third thing is very important
is like the performance, right?

57
00:03:17,789 --> 00:03:19,444
And the way we are deploying the modern.

58
00:03:20,244 --> 00:03:21,054
Applications.

59
00:03:21,114 --> 00:03:24,714
They're very sensitive to the
latencies and they want the things

60
00:03:24,714 --> 00:03:29,904
to be very fast because some of the
financial transactions, gaming and

61
00:03:29,904 --> 00:03:34,054
also the apps, everyone is not ready
to wait for a minute also, right?

62
00:03:34,054 --> 00:03:36,514
Today everyone wants the things
to be happening in a millisecond.

63
00:03:37,114 --> 00:03:40,084
So the performance very mad, is
really very important for the

64
00:03:40,084 --> 00:03:41,964
applications to function seamlessly.

65
00:03:42,764 --> 00:03:44,354
Finally the developer's experience, right?

66
00:03:44,354 --> 00:03:47,714
Reducing the friction for
developers is very critical.

67
00:03:47,774 --> 00:03:50,924
Otherwise, they will bypass the
security controls or build shadow

68
00:03:50,924 --> 00:03:54,374
infrastructures just to move faster
because everyone wants the things to be

69
00:03:54,374 --> 00:03:57,214
deployed in in a days now, not in months.

70
00:03:57,274 --> 00:04:00,214
Earlier we used to take years even for
developing an application, but things

71
00:04:00,454 --> 00:04:05,104
have changed so fast and everyone wants
the things to be done very faster, right?

72
00:04:05,464 --> 00:04:06,545
And in order to.

73
00:04:06,899 --> 00:04:09,059
Deploy the things faster and securely.

74
00:04:09,480 --> 00:04:13,620
We have to think about entering into
the platform engineering, right?

75
00:04:14,060 --> 00:04:17,730
This is where the platform engineering
comes into the picture, right?

76
00:04:18,090 --> 00:04:20,880
Things of all, its glue
between infrastructure,

77
00:04:20,880 --> 00:04:21,875
networking, and applications.

78
00:04:22,200 --> 00:04:26,469
Everyone has to understand how the things
are deployed at each and every layer.

79
00:04:26,469 --> 00:04:29,919
And it's very different, difficult for
everyone to understand those, right?

80
00:04:30,499 --> 00:04:34,579
The main objective of the platform
engineering is abstracts, complexity,

81
00:04:34,669 --> 00:04:37,729
automates the repeat to the
operations, and also provide the

82
00:04:37,729 --> 00:04:39,799
secure self-service platforms.

83
00:04:40,219 --> 00:04:44,289
It creates this foundation that
bridges the developers and operations

84
00:04:44,289 --> 00:04:46,239
teams and also security, right?

85
00:04:46,729 --> 00:04:47,419
In other words.

86
00:04:47,479 --> 00:04:50,839
It lets developers move quickly
while keeping, while still

87
00:04:50,839 --> 00:04:54,169
keeping the network and infras
infrastructure stable and secure.

88
00:04:55,009 --> 00:04:57,799
So if they deploy the things
faster without thinking about

89
00:04:57,799 --> 00:05:01,309
the security aspects of the
applications, that's where the real

90
00:05:01,309 --> 00:05:03,139
challenge of issue realize, right?

91
00:05:03,139 --> 00:05:05,819
Like where people will struggle
in deploying the things securely.

92
00:05:05,819 --> 00:05:09,789
And there is a chance of people trying to
use that loopholes and getting into the

93
00:05:09,789 --> 00:05:12,089
networks or exploiting the applications.

94
00:05:12,784 --> 00:05:17,614
So this is where we have to start
thinking about how do we use, actually

95
00:05:17,614 --> 00:05:21,274
enable the platform engineering and
what are the tools which we can use

96
00:05:21,324 --> 00:05:26,064
today in order to use this kind of a
platform engineering where we can think,

97
00:05:26,064 --> 00:05:27,969
deploy the things faster and securely.

98
00:05:28,269 --> 00:05:29,499
There are four key tool sets.

99
00:05:29,529 --> 00:05:33,169
We'll talk today, the service mess
which eng, which manages the service

100
00:05:33,169 --> 00:05:37,399
to service com communication,
observability, and also policies.

101
00:05:37,459 --> 00:05:40,579
And the next one is the API Gateway
is that's where the security

102
00:05:40,579 --> 00:05:44,659
of ingress, authentications and
developer friendly access is needed.

103
00:05:45,579 --> 00:05:49,779
And the next one is the zero trust
models, which makes sure security

104
00:05:49,779 --> 00:05:51,789
is identity driven and continuous.

105
00:05:52,479 --> 00:05:55,509
And also the finally, the
programmable infrastructure.

106
00:05:55,809 --> 00:05:59,169
Things like infrastructure as code
and GI tops, which allow us to

107
00:05:59,169 --> 00:06:03,699
conti consistently deploy and manage
across the environments, right?

108
00:06:03,969 --> 00:06:08,329
Because as I said like earlier
things we are deploying the things in

109
00:06:08,329 --> 00:06:10,129
multiple cloud environments, right?

110
00:06:11,059 --> 00:06:15,919
And they should be a unique way
of deploying the things faster and

111
00:06:15,919 --> 00:06:17,609
within same set of configuration.

112
00:06:17,669 --> 00:06:20,279
I mean to they say at the security
level or whatever that is, right?

113
00:06:20,579 --> 00:06:24,349
So they have to be unique and we have
to see how programmable we can deploy

114
00:06:24,349 --> 00:06:26,059
the things and automate the stuff.

115
00:06:26,559 --> 00:06:27,879
Service mesh practice.

116
00:06:27,879 --> 00:06:32,139
Let's start with the service mesh
examples include sst, o and linkard.

117
00:06:32,259 --> 00:06:38,259
These tools sit inside the cluster and
manages the east west traffic and retries.

118
00:06:38,259 --> 00:06:38,784
And the observability.

119
00:06:38,949 --> 00:06:42,409
I'm not here to advertise for any kind
of a product or anything like that.

120
00:06:42,409 --> 00:06:44,929
So I'm just bringing up a couple
of examples for the people who

121
00:06:44,929 --> 00:06:46,249
can understand the things, right?

122
00:06:46,639 --> 00:06:50,709
So now we have many other, applications
of the tools in the system are in

123
00:06:50,709 --> 00:06:54,039
the environments now where we can
go ahead and pick whichever is

124
00:06:54,039 --> 00:06:55,759
more relevant to the businesses.

125
00:06:56,599 --> 00:06:59,209
They also bring in MTLS encryption, right?

126
00:06:59,209 --> 00:07:02,859
That these tools can bring encryption
things, which critically for securing

127
00:07:02,859 --> 00:07:04,659
the communications between the services.

128
00:07:05,019 --> 00:07:09,579
The key benefit is that developers don't
need to build these features themselves.

129
00:07:10,359 --> 00:07:14,499
The mesh uploads that complexity,
given them a clean, secure

130
00:07:14,499 --> 00:07:15,639
way to connect the services.

131
00:07:16,139 --> 00:07:19,379
And the next thing is the API
Gateway and Developer's experience.

132
00:07:19,499 --> 00:07:24,789
The the examples of the API gateways are
nothing but like an NGINX like an a PGE

133
00:07:24,879 --> 00:07:29,359
Kong, and there are some kind of an open
source API gateways as well which are

134
00:07:29,359 --> 00:07:31,579
very, user friendly applications as well.

135
00:07:31,609 --> 00:07:36,119
Gateways, which are being used now because
everyone wants, don't want to go on with

136
00:07:36,119 --> 00:07:40,359
some kind of an like an tools which are
not ready to be like an open source.

137
00:07:40,359 --> 00:07:43,169
And it's very hard to manipulate
those configurations, right?

138
00:07:43,169 --> 00:07:45,209
Everyone is looking at
some of the open source.

139
00:07:45,594 --> 00:07:49,434
Tools nowadays because that way we
can enhance the tools and deploy

140
00:07:49,434 --> 00:07:52,734
the things on our own, and also
we can increase the security of

141
00:07:52,734 --> 00:07:54,024
that if there is anything on that.

142
00:07:54,024 --> 00:07:57,954
So some of the people are really looking
at some of the open source tools nowadays.

143
00:07:57,954 --> 00:08:01,474
We have to think about all these things
and for the future deployments and

144
00:08:01,474 --> 00:08:04,804
all those things in practice, they
act as this API gateway, us act as a

145
00:08:04,804 --> 00:08:09,569
bridge connecting the external users
to the platform and then to services.

146
00:08:09,889 --> 00:08:10,939
Behind it, right?

147
00:08:10,939 --> 00:08:13,729
For developers, it makes access
simple, controlled, and secure.

148
00:08:13,729 --> 00:08:16,249
Because of these tools, the
a p gateways takes it of that

149
00:08:16,249 --> 00:08:18,279
kind of an ingress security.

150
00:08:18,779 --> 00:08:21,939
And the next thing is
the zero trust security.

151
00:08:22,039 --> 00:08:23,509
What do you mean by zero Trust?

152
00:08:23,509 --> 00:08:26,839
Security has to be everywhere
nowadays, not just as at the perimeter.

153
00:08:26,849 --> 00:08:28,369
That's where zero trust comes in.

154
00:08:29,029 --> 00:08:31,919
So earlier people used to think there
is an firewall, which is sitting in

155
00:08:31,969 --> 00:08:35,569
in the entry of our network is the
one which gonna secure the things.

156
00:08:35,959 --> 00:08:36,894
It's all over now, just.

157
00:08:37,409 --> 00:08:41,119
Securing at the at the entry or
the perimeter level is all gone.

158
00:08:41,149 --> 00:08:45,229
We have to be thinking about more
more ways of securing this stuff.

159
00:08:45,419 --> 00:08:47,759
So this is where the zero
trust comes in, right?

160
00:08:48,389 --> 00:08:51,389
Instead of assuming that once
you are inside the network,

161
00:08:51,389 --> 00:08:52,649
you are not safe everywhere.

162
00:08:53,009 --> 00:08:55,679
It's, every request is
verified continuously.

163
00:08:56,009 --> 00:09:01,199
This is enabled by I identity aware
proxies and policy driven access.

164
00:09:02,054 --> 00:09:07,324
Examples include the pfi S-P-I-R-E for
service identity for and Google Beyond

165
00:09:07,324 --> 00:09:09,914
Corp models for enterprise access, right?

166
00:09:09,944 --> 00:09:13,874
This approach ensures that both
users and services are verified

167
00:09:14,174 --> 00:09:16,154
before they can touch any resources.

168
00:09:16,154 --> 00:09:18,464
Next comes to the
programmable infrastructure.

169
00:09:18,464 --> 00:09:20,954
Now let's talk about the
programmable infrastructure, right?

170
00:09:20,954 --> 00:09:25,114
With tools like Terraform, combined
with GitHubs tools such as Argo CD

171
00:09:25,114 --> 00:09:29,424
and Flux, we can make infrastructure
reproducible and version controlled.

172
00:09:29,664 --> 00:09:33,294
So someone else let's say that you have
a code on your system and someone else

173
00:09:33,294 --> 00:09:34,884
is also having a code on their system.

174
00:09:35,184 --> 00:09:39,264
We don't want them to be pushing the
codes individually and have a different

175
00:09:39,294 --> 00:09:40,734
ways of deploying the things, right?

176
00:09:41,094 --> 00:09:44,784
So there should be an version controlled
way of doing the things with the GitHubs

177
00:09:44,784 --> 00:09:46,554
and all those things where people know.

178
00:09:47,359 --> 00:09:51,049
Like what the changes have been made
by the other developers so that they

179
00:09:51,169 --> 00:09:54,439
can think about it and someone reviews
and approves the changes with this

180
00:09:54,589 --> 00:09:58,439
tops and all those tools so that
they don't make any unwanted changes

181
00:09:58,439 --> 00:10:01,439
into the environment, which is well
structurally built by someone else.

182
00:10:01,539 --> 00:10:06,059
So this version control thinks,
makes the things streamlined and

183
00:10:06,059 --> 00:10:10,959
also lets the developers to do
it in in a well fashioned way.

184
00:10:11,459 --> 00:10:16,030
This is a powerful because it
enables trust self-service because

185
00:10:16,060 --> 00:10:19,459
you don't need to do this repetitive
task again and again with this

186
00:10:19,459 --> 00:10:20,869
infrastructure as a core platforms.

187
00:10:20,869 --> 00:10:24,529
Right now, developers can request
infrastructure and the file system spins

188
00:10:24,529 --> 00:10:26,779
up it automatically in a consistent way.

189
00:10:26,810 --> 00:10:28,310
No more manual tickets, right?

190
00:10:28,675 --> 00:10:31,314
So with these tools, we are
making everything automated.

191
00:10:31,314 --> 00:10:34,525
People doesn't have to go through that
entire process when they're starting

192
00:10:34,525 --> 00:10:35,844
to build the first application.

193
00:10:36,235 --> 00:10:38,964
So now they know the process,
like whatever they wanted, right?

194
00:10:39,004 --> 00:10:42,104
For any application to be built
let's say that you want an IP address

195
00:10:42,104 --> 00:10:45,134
for the other server or a DNS name
and all those things, these are all

196
00:10:45,134 --> 00:10:48,854
incorporated into the code so that they
all can be happen at the same time.

197
00:10:49,185 --> 00:10:53,204
You don't need to, worry about these
repetitive tasks again and again so

198
00:10:53,204 --> 00:10:56,554
that there are chances then when you
go for this kind of and repetitive

199
00:10:56,554 --> 00:11:00,904
task, there are chances, like people
might miss one step in the deployment.

200
00:11:00,904 --> 00:11:04,884
And there is a chance that people when
they go for a production deployment,

201
00:11:04,884 --> 00:11:05,994
they worry about what happened?

202
00:11:05,994 --> 00:11:06,654
Where did I miss?

203
00:11:06,654 --> 00:11:07,644
And what happened over there?

204
00:11:07,694 --> 00:11:12,104
So instead of that these things,
these tools really helps us a lot

205
00:11:12,134 --> 00:11:14,009
in order to automate this stuff.

206
00:11:14,674 --> 00:11:19,204
And make it like avoid doing any kind
of manual mistakes, which people do.

207
00:11:19,294 --> 00:11:22,874
And this repeatable task being
performed by this programmable

208
00:11:23,004 --> 00:11:24,439
staff makes the things faster.

209
00:11:25,409 --> 00:11:28,979
Also in a more secure way might be
some people might forgot to deploy

210
00:11:28,979 --> 00:11:32,109
in firewall configuration or a
security configuration over there.

211
00:11:32,589 --> 00:11:35,629
And it becomes a problem for the
security of that application.

212
00:11:35,629 --> 00:11:40,419
So this repetitive task should be be
performed by some kind of an programmable

213
00:11:40,479 --> 00:11:43,729
infrastructure so that we don't run
into any kind of an issue when the

214
00:11:43,729 --> 00:11:45,025
applications goes into the deployment.

215
00:11:45,525 --> 00:11:48,135
And the next thing is the
design strategies, right?

216
00:11:48,165 --> 00:11:48,765
Of course.

217
00:11:48,815 --> 00:11:52,485
How we design this platform is
really matters because you cannot

218
00:11:52,485 --> 00:11:54,165
just blindly deploy anything.

219
00:11:54,305 --> 00:11:57,485
And then without knowing how the
underlying things are working

220
00:11:57,485 --> 00:12:01,415
and all those things first layer
abstraction without holding too much,

221
00:12:01,445 --> 00:12:05,375
we want to shield developers from
unnecessary complexities, but still

222
00:12:05,375 --> 00:12:07,895
allow them to visibly and control.

223
00:12:08,115 --> 00:12:11,865
Where needed second, consistently
across environments, whether be

224
00:12:11,865 --> 00:12:16,395
running it in on-prem or in the
cloud or at the edge, the platform

225
00:12:16,395 --> 00:12:18,585
should look and feel the same.

226
00:12:18,705 --> 00:12:21,585
They cannot have a different
base of deploying the stuff when

227
00:12:21,585 --> 00:12:24,135
they host it in AWS or when they
host it in Google, or when they

228
00:12:24,135 --> 00:12:25,545
host it in somewhere else, right?

229
00:12:25,785 --> 00:12:26,835
Or even at the on-prem.

230
00:12:26,885 --> 00:12:31,055
So the things has to be very u same
for the user field and also for the

231
00:12:31,055 --> 00:12:32,400
security and all for the other things.

232
00:12:33,385 --> 00:12:35,395
And the third one is a secure by design.

233
00:12:35,425 --> 00:12:38,635
That means that integrating policies
from the start and continuously

234
00:12:38,635 --> 00:12:42,510
measuring so we know that what's
working and what needs the improvement.

235
00:12:43,010 --> 00:12:48,130
Let's jump into the real world examples,
to make this concrete, let me share

236
00:12:48,130 --> 00:12:50,070
a couple of real world scenarios.

237
00:12:50,070 --> 00:12:52,680
One organization was running
a multi-cloud microservice.

238
00:12:52,680 --> 00:12:56,880
They were struggling with both
the performance and security.

239
00:12:57,120 --> 00:13:01,920
They decided to adopt a service mesh for
secure service to service communication,

240
00:13:01,920 --> 00:13:06,780
and a PA gateway for external access and
infrastructure as code for consistency.

241
00:13:06,840 --> 00:13:07,320
The result.

242
00:13:07,815 --> 00:13:12,765
The reduced meantime dis recovery
to 40%, and also perhaps more

243
00:13:12,765 --> 00:13:17,505
importantly, develops adoption to the
platform increased like dramatically.

244
00:13:18,015 --> 00:13:21,195
So that's the power of platform
engineering when applied effectively.

245
00:13:21,695 --> 00:13:22,655
Let me wrap up.

246
00:13:22,705 --> 00:13:26,445
The te the key takeaways from this
one is platform engineering is gonna

247
00:13:26,445 --> 00:13:31,315
bridge the infrastructures, networking
and the developers, the service mesh

248
00:13:31,315 --> 00:13:34,975
gateways, zero trust infrastructure
as a code, as a core enablers.

249
00:13:35,335 --> 00:13:38,065
The balance is always between
the developer's experience,

250
00:13:38,095 --> 00:13:39,595
scalability and security.

251
00:13:39,595 --> 00:13:44,635
And the best way forward is to
start small, automate incrementally

252
00:13:44,665 --> 00:13:45,925
and measure continuously.

253
00:13:46,425 --> 00:13:50,315
And I would like to close it today for
with saying thank you for everyone for

254
00:13:50,315 --> 00:13:51,905
joining this session with me today.

255
00:13:52,055 --> 00:13:55,685
And platform engineering is not
just a technology trend, it's an

256
00:13:55,685 --> 00:13:59,045
shift in how we design, operate,
and secure modern applications.

257
00:13:59,435 --> 00:14:02,745
If there is one thing I would like
to leave with, it's a Bridging.

258
00:14:02,745 --> 00:14:05,025
The layers is about more than tools.

259
00:14:05,085 --> 00:14:08,655
It's about enabling developers,
operations, and security teams

260
00:14:08,655 --> 00:14:11,655
to work together seamlessly
in modern network stack.

261
00:14:12,345 --> 00:14:12,855
Thank you everyone.

