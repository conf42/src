1
00:00:00,390 --> 00:00:01,010
Hello, everyone.

2
00:00:01,250 --> 00:00:03,409
How is it going today?

3
00:00:03,579 --> 00:00:07,450
We are here for the talk on
serverless workflow orchestration

4
00:00:07,500 --> 00:00:10,719
on AWS or Amazon Web Services.

5
00:00:10,829 --> 00:00:11,550
As we know it.

6
00:00:12,330 --> 00:00:15,990
Before I begin, let's start with
a small introduction about myself.

7
00:00:16,360 --> 00:00:20,850
I am Bharat Vishal Tiwari,
currently an SD2 at Amazon.

8
00:00:21,700 --> 00:00:26,529
I have over 12 years of experience
in software development industry and

9
00:00:26,580 --> 00:00:30,539
two master's degrees in electrical
engineering and computer science

10
00:00:30,539 --> 00:00:31,670
from Arizona State University.

11
00:00:32,170 --> 00:00:34,860
I recently published an
article on techtimes.

12
00:00:34,890 --> 00:00:37,000
com on a related topic.

13
00:00:37,740 --> 00:00:40,060
The link is at the bottom of the slide.

14
00:00:40,300 --> 00:00:43,590
So do feel free to take a
look when you get a chance.

15
00:00:44,559 --> 00:00:48,880
I am someone who likes to stay
updated with the latest tech trends.

16
00:00:49,660 --> 00:00:55,710
talk about microservices, DevOps,
machine learning, Gen AI, you name it.

17
00:00:56,440 --> 00:01:01,750
If you are someone who likes to talk
about these subjects, Definitely

18
00:01:01,750 --> 00:01:04,660
feel free to reach out to me
and connect to me on LinkedIn.

19
00:01:05,610 --> 00:01:09,480
And I would love to discuss
more on these topics with you.

20
00:01:09,980 --> 00:01:11,890
Let's get started with the talk then.

21
00:01:12,520 --> 00:01:16,520
Serverless Workflow Orchestration
on Amazon Web Services.

22
00:01:17,020 --> 00:01:19,600
Let's start with a quote,
like many other talks.

23
00:01:20,100 --> 00:01:26,530
By orchestrating services, businesses
can unlock agility, quickly adapt to

24
00:01:26,530 --> 00:01:29,280
changing customer needs, and deliver.

25
00:01:29,750 --> 00:01:33,320
innovative solutions
faster than ever before.

26
00:01:33,820 --> 00:01:34,720
How you say?

27
00:01:35,220 --> 00:01:39,380
I'm sure after this talk, you will
be in a position to answer that

28
00:01:39,410 --> 00:01:42,550
question much better than you are now.

29
00:01:43,050 --> 00:01:44,890
So let's start with today's agenda.

30
00:01:45,390 --> 00:01:51,310
We start with looking at some
of the concepts about the, and

31
00:01:51,320 --> 00:01:56,530
we break the title word by word
and look into it individually.

32
00:01:57,030 --> 00:02:04,690
Then we move on to talking about
orchestration in AWS, how it's done and

33
00:02:04,720 --> 00:02:08,000
understand the current services available.

34
00:02:08,500 --> 00:02:14,375
Finally, we conclude the talk with best
practices that We should keep in mind

35
00:02:14,775 --> 00:02:23,145
when orchestrating on AWS and these are
the things that will help us design a

36
00:02:23,185 --> 00:02:27,035
resilient system and shape the future.

37
00:02:27,715 --> 00:02:31,965
So let's get started with
some of the concepts.

38
00:02:32,885 --> 00:02:36,300
So what's serverless
workflow orchestration?

39
00:02:36,615 --> 00:02:41,085
Let's break it down word by word
and look at what is serverless.

40
00:02:41,865 --> 00:02:47,275
Serverless Serverless is where
we build and run applications

41
00:02:47,875 --> 00:02:50,375
without thinking about serverless.

42
00:02:50,875 --> 00:02:54,765
But what is serverless
and why do we need it?

43
00:02:54,765 --> 00:02:59,565
Serverless computing is a cloud computing
execution model where the cloud provider

44
00:02:59,615 --> 00:03:03,005
dynamically manages all server resources.

45
00:03:03,515 --> 00:03:07,575
What that means is less worry for you.

46
00:03:08,110 --> 00:03:11,740
about how to provision a
server and maintain it.

47
00:03:12,240 --> 00:03:14,170
The physical servers are still used.

48
00:03:14,360 --> 00:03:17,230
It's not like we are getting
rid of servers, but they are

49
00:03:17,230 --> 00:03:19,670
abstracted away from the developers.

50
00:03:20,170 --> 00:03:26,660
Unlike earlier times where people used
to estimate, order hardware, and deploy

51
00:03:26,660 --> 00:03:32,090
their services on that, scale them as per
the peak time or customer traffic needs,

52
00:03:32,590 --> 00:03:36,809
these things are abstracted away from
you, so you can focus more on development.

53
00:03:37,170 --> 00:03:42,750
The main value proposition is focusing
on business outcomes while abstracting

54
00:03:42,750 --> 00:03:44,470
away the mechanism of computing.

55
00:03:44,970 --> 00:03:48,120
You don't need to worry about
where this code is running

56
00:03:48,190 --> 00:03:50,000
or how this code is running.

57
00:03:50,790 --> 00:03:56,990
You can just say, I want a
certain compute and you give

58
00:03:57,050 --> 00:03:59,000
them a code to run and it's done.

59
00:03:59,500 --> 00:04:01,200
What are the benefits?

60
00:04:01,700 --> 00:04:04,350
Benefits include pay per use.

61
00:04:04,850 --> 00:04:08,720
You pay for what you use, you pay
for the compute, you pay for the

62
00:04:08,850 --> 00:04:11,170
execution time of your function.

63
00:04:11,670 --> 00:04:14,810
You get automatic scaling out of the box.

64
00:04:15,045 --> 00:04:19,590
So you don't have to worry about
those peak times, those times

65
00:04:20,200 --> 00:04:24,880
where customer traffic can increase
or the spikes that can come in.

66
00:04:25,380 --> 00:04:29,920
There is automatic scaling, you can
configure it beforehand and it takes

67
00:04:29,920 --> 00:04:32,259
care of scaling your hardware for you.

68
00:04:32,759 --> 00:04:38,279
What that means is reduced operation
and infrastructure cost, less worrying

69
00:04:38,429 --> 00:04:43,109
about operation and infrastructure,
less money required to spend there

70
00:04:43,109 --> 00:04:45,959
because we pay for what we use.

71
00:04:46,459 --> 00:04:51,860
It also means for startups or new ideas,
faster time to market because you don't

72
00:04:51,869 --> 00:04:57,739
have to wait for that provisioning
of server, the ordering of hardware,

73
00:04:57,779 --> 00:04:59,169
the time it arrives, and so on.

74
00:04:59,629 --> 00:05:01,319
Making it ready for your software.

75
00:05:01,339 --> 00:05:04,629
You worry about what
functions you want to put in.

76
00:05:05,179 --> 00:05:07,279
You worry about the features
you are going to launch.

77
00:05:07,289 --> 00:05:10,659
You worry about the solution you
want to give the problem you want to

78
00:05:10,659 --> 00:05:13,359
solve and you are enabled serverless.

79
00:05:13,859 --> 00:05:15,469
to reach the market faster.

80
00:05:15,969 --> 00:05:20,829
Let's look at some of the AWS serverless
services that are available today.

81
00:05:21,269 --> 00:05:22,839
I have a link at the bottom.

82
00:05:23,119 --> 00:05:27,759
If you want to go to the official
documentation and look at those, but

83
00:05:27,759 --> 00:05:30,059
some of the common ones are cloudfrench.

84
00:05:30,924 --> 00:05:34,344
CloudFront, the CDN network
from Amazon Web Services.

85
00:05:35,094 --> 00:05:38,864
Route 53, the DNS hosting service.

86
00:05:39,504 --> 00:05:42,914
API Gateway, which is the entry
point for your application on cloud.

87
00:05:43,474 --> 00:05:49,524
VPC, your personal piece of cloud cut
out for you in which your systems reside.

88
00:05:50,024 --> 00:05:54,954
There are services for application
mobile development like Amplify, AppSync.

89
00:05:55,864 --> 00:06:02,839
There are services which help you
orchestrate or choreograph your logic

90
00:06:03,119 --> 00:06:10,719
step functions, event bridge, sqs, sns,
you have database, dynamo, you have s3.

91
00:06:11,589 --> 00:06:15,999
These are some of the most
famous names in serverless world.

92
00:06:16,499 --> 00:06:20,409
Then you have compute in the form
of lambda, where you can give your

93
00:06:20,409 --> 00:06:21,899
code and run them as functions.

94
00:06:22,499 --> 00:06:27,179
You have Fargate where you can run
your containerized application without

95
00:06:27,209 --> 00:06:28,559
worrying about the infrastructure.

96
00:06:29,219 --> 00:06:35,059
You have identity management services,
Cognito, where you can store your

97
00:06:35,069 --> 00:06:38,679
users data, and authenticate them.

98
00:06:39,179 --> 00:06:44,619
You have other operational and
development tools, related services.

99
00:06:45,119 --> 00:06:50,169
It's a lot on one slide, but if you have
any questions about any of these services

100
00:06:50,199 --> 00:06:56,359
or would like to need to discuss them
in detail, do feel free to reach out and

101
00:06:56,359 --> 00:06:58,659
I'll be happy to talk about them to you.

102
00:06:59,159 --> 00:07:01,869
Next, let's look at what are workflows.

103
00:07:02,369 --> 00:07:07,209
A workflow is a sequence of tasks that
are part of a larger process or goal.

104
00:07:07,709 --> 00:07:12,049
A workflow is a series of actions
that accomplish a particular task,

105
00:07:12,499 --> 00:07:15,209
serving as a fundamental unit of work.

106
00:07:16,129 --> 00:07:17,679
So let's take an example.

107
00:07:18,159 --> 00:07:19,969
Let's think about making coffee.

108
00:07:20,799 --> 00:07:27,719
you take the coffee powder, brew
the coffee, You heat milk, add

109
00:07:27,739 --> 00:07:31,289
milk to your coffee, maybe add
some sugar and have the coffee.

110
00:07:31,789 --> 00:07:36,389
So this process of making coffee is a
workflow and the different steps you took,

111
00:07:36,749 --> 00:07:40,389
like taking the coffee powder, brewing
the coffee powder, heating the milk.

112
00:07:41,339 --> 00:07:44,529
These are the different tasks
or steps in your workflow.

113
00:07:45,029 --> 00:07:49,739
Workflows are designed to simplify and
automate tasks by combining multiple

114
00:07:49,739 --> 00:07:52,049
actions into a coherent sequence.

115
00:07:52,549 --> 00:07:57,319
In various contexts, workflows
serve, different purposes.

116
00:07:57,819 --> 00:08:04,229
They can be either manual or automated and
are dynamic in nature with different parts

117
00:08:04,429 --> 00:08:07,219
taken based on previous steps or results.

118
00:08:07,719 --> 00:08:10,529
In various contexts, they
serve different purposes.

119
00:08:10,589 --> 00:08:14,169
They can be, for an ETL job.

120
00:08:14,999 --> 00:08:21,299
They can be used for CICD automation
or for maybe implementing a function

121
00:08:21,479 --> 00:08:24,389
for an e commerce website and so on.

122
00:08:24,889 --> 00:08:27,529
Next, let's look at
what are microservices.

123
00:08:28,119 --> 00:08:34,169
Microservices is an architecture
in which software is composed of

124
00:08:34,189 --> 00:08:39,459
small independent services that
communicate over well defined APIs.

125
00:08:39,959 --> 00:08:45,179
It's a software architectural approach
that structures applications as a

126
00:08:45,179 --> 00:08:51,119
collection of small, independent services
that communicate over well defined APIs.

127
00:08:51,619 --> 00:08:57,659
Each service runs on its own process
and focuses on doing one thing well,

128
00:08:58,269 --> 00:09:00,439
making them simple and granular.

129
00:09:00,939 --> 00:09:03,569
What are the key characteristics
of microservices?

130
00:09:04,069 --> 00:09:09,789
Microservices allow autonomous
operation, technology diversity.

131
00:09:10,499 --> 00:09:14,049
Each microservices can be built
in using different technology.

132
00:09:14,549 --> 00:09:17,829
They all have their own
independent databases.

133
00:09:18,329 --> 00:09:23,999
What it means is teams can
operate independently using the

134
00:09:24,529 --> 00:09:27,159
YouBuild, YouRunIt DevOps model.

135
00:09:27,659 --> 00:09:33,249
There are common scenarios where you
might have to enable communications

136
00:09:33,629 --> 00:09:36,149
between different microservices.

137
00:09:36,919 --> 00:09:38,969
And if you think about it.

138
00:09:39,469 --> 00:09:43,999
It, each microservices talking
to each microservices means

139
00:09:44,299 --> 00:09:45,389
a lot of communication.

140
00:09:45,909 --> 00:09:52,919
So to put some order in the chaos,
there are two common patterns that

141
00:09:52,919 --> 00:09:54,849
is followed for microservices.

142
00:09:55,349 --> 00:09:56,089
One is called orchestration.

143
00:09:56,589 --> 00:09:58,359
The other one is called communication.

144
00:09:58,859 --> 00:10:06,344
Orchestration is where a central service
acts as a brain to coordinate the logic.

145
00:10:06,844 --> 00:10:11,054
So let's say we talk
about ordering scenario.

146
00:10:11,554 --> 00:10:15,864
If a customer places an order,
we need to notify the customer.

147
00:10:16,124 --> 00:10:20,004
We need to prepare the order and maybe
we need to generate some metrics.

148
00:10:20,899 --> 00:10:25,640
So there are different
approaches we can take for that.

149
00:10:25,640 --> 00:10:30,759
Orchestration approach is Where a
central service takes care of calling

150
00:10:30,759 --> 00:10:36,289
a notification service to, to the
notification calling a different

151
00:10:36,789 --> 00:10:42,019
peak service maybe to prepare
the order and analytic service to

152
00:10:42,019 --> 00:10:43,779
generate the metrics regarding that.

153
00:10:44,739 --> 00:10:48,699
Then we have choreography, where
each service acts autonomously.

154
00:10:49,199 --> 00:10:53,879
In this kind of pattern, we
have an event broker in between

155
00:10:53,959 --> 00:10:59,609
the event and the different
microservices acting on the event.

156
00:11:00,109 --> 00:11:05,854
This is often known as event
driven, event driven design as well.

157
00:11:06,354 --> 00:11:10,154
Let's compare these two and
see what are the differences.

158
00:11:10,654 --> 00:11:18,044
Orchestration is where we, the control is
explicit and managed by the orchestrator.

159
00:11:18,544 --> 00:11:22,794
Think about an orchestra where
different music instruments are playing

160
00:11:22,854 --> 00:11:26,694
and there's a person standing in
front of it who is directing it on.

161
00:11:27,464 --> 00:11:29,084
That person is orchestrated.

162
00:11:29,584 --> 00:11:31,644
And the model is known as orchestration.

163
00:11:32,144 --> 00:11:37,424
Choreography is implicit, implicit
and managed by individual services.

164
00:11:37,924 --> 00:11:41,134
All the services in orchestration
communicate directly with the

165
00:11:41,344 --> 00:11:43,484
orchestrating service, the central brain.

166
00:11:43,984 --> 00:11:47,824
While in choreography, it's
more event based communication.

167
00:11:48,324 --> 00:11:51,674
Orchestration is simpler
for defining workflows.

168
00:11:52,174 --> 00:11:57,114
Choreography has more
complex interactions, but

169
00:11:57,144 --> 00:11:59,074
simpler service autonomy.

170
00:11:59,574 --> 00:12:04,554
Orchestration allows centralized
error handling, whereas choreography

171
00:12:05,214 --> 00:12:07,424
requires distributed error handling.

172
00:12:07,924 --> 00:12:12,304
Orchestration can be considered
less flexible due to central

173
00:12:12,334 --> 00:12:16,454
control, whereas choreography
is highly flexible and active.

174
00:12:16,954 --> 00:12:20,484
But there are certain scenarios
where either of these are useful,

175
00:12:20,984 --> 00:12:27,664
especially orchestration is when
you want a clear view of what

176
00:12:27,684 --> 00:12:30,614
happened, what, when it happened.

177
00:12:31,164 --> 00:12:36,464
and you have a clear view of
the flow of things happening.

178
00:12:36,964 --> 00:12:40,964
In choreography also it's
possible, but you have to adapt

179
00:12:41,054 --> 00:12:44,244
to complex monitoring for that.

180
00:12:45,234 --> 00:12:51,504
so today's talk is about orchestration
and let's move on and see what

181
00:12:51,504 --> 00:12:53,064
are the different use cases.

182
00:12:53,564 --> 00:12:58,824
Whenever, whenever you can think of a
workflow, you can think of orchestration.

183
00:12:59,354 --> 00:13:04,024
So for example, you raise an IT service
request, There's someone who approves the

184
00:13:04,024 --> 00:13:08,964
request, and then you, the software is
installed or the service is delivered.

185
00:13:09,464 --> 00:13:13,444
This is an example of where
orchestration can be used.

186
00:13:13,944 --> 00:13:19,764
In compliance, you have, many industries
have rigorous legal compliance.

187
00:13:19,934 --> 00:13:24,254
Orchestration can automate needed data
collection from multiple departments,

188
00:13:24,624 --> 00:13:28,284
generate templated reports, and ensure
that the right people get filled.

189
00:13:28,784 --> 00:13:33,554
Similarly, we can use, we can
imagine orchestration in employee

190
00:13:33,554 --> 00:13:36,634
onboarding, offboarding, and
software development as well.

191
00:13:37,134 --> 00:13:40,274
This brings us to the second
part of the talk, orchestration

192
00:13:40,274 --> 00:13:44,364
in AWS, AWS step functions.

193
00:13:44,864 --> 00:13:50,554
Before we move on to step functions,
let's look at the top orchestration tools.

194
00:13:51,464 --> 00:13:52,424
used in the market today.

195
00:13:53,164 --> 00:13:55,174
So there is Apache Airflow.

196
00:13:55,704 --> 00:14:00,004
Apache Airflow is an open source
tool for scheduling and monitoring

197
00:14:00,104 --> 00:14:02,824
workflows developed by Airbnb.

198
00:14:03,824 --> 00:14:10,204
It uses directed acyclic graphs to manage
complex data pipelines effectively.

199
00:14:11,074 --> 00:14:14,844
Then we have AWS step functions
which we will be looking

200
00:14:14,844 --> 00:14:16,964
into, from the next slides.

201
00:14:17,779 --> 00:14:20,819
AWS Step Function is a serverless
orchestration service that

202
00:14:20,819 --> 00:14:24,699
lets you combine AWS services
to build to scale distributed

203
00:14:24,799 --> 00:14:26,869
applications using state machines.

204
00:14:27,369 --> 00:14:31,129
We have Google Workflows, which
is a powerful orchestration

205
00:14:31,129 --> 00:14:32,619
service from Google Cloud.

206
00:14:33,239 --> 00:14:40,274
We have Microsoft Power Automate,
which is another offering from Azure.

207
00:14:40,774 --> 00:14:46,914
Then we have some other ones
like Daxter, Argo, which are also

208
00:14:47,744 --> 00:14:50,174
very useful in their own fields.

209
00:14:50,674 --> 00:14:57,624
So let's move on and talk about why
we should use AWS step functions.

210
00:14:58,124 --> 00:15:02,024
Step functions allow low
code or no code to be used.

211
00:15:02,524 --> 00:15:09,134
Workflows to be created using the
workflow studio in the console, which,

212
00:15:09,354 --> 00:15:11,294
which we'll look into, in the next slide.

213
00:15:11,794 --> 00:15:13,124
It is highly scalable.

214
00:15:13,594 --> 00:15:18,124
The solution can easily scale
to meet the demand of enterprise

215
00:15:18,164 --> 00:15:20,344
level applications and workflows.

216
00:15:21,184 --> 00:15:26,954
It's reliable, built on dependable
infrastructure of AWS, which

217
00:15:26,964 --> 00:15:31,304
has been battle tested and
is being used widely today.

218
00:15:31,884 --> 00:15:36,594
It provides high availability and fault
tolerance for orchestrated workflows.

219
00:15:37,094 --> 00:15:38,444
It offers flexibility.

220
00:15:38,544 --> 00:15:42,244
Developers can create workflow
logic using familiar programming

221
00:15:42,294 --> 00:15:48,044
patterns and seamlessly integrate
with various AWS tools and services

222
00:15:48,074 --> 00:15:50,024
that they are already used to using.

223
00:15:50,524 --> 00:15:53,024
It's a cost effective solution.

224
00:15:53,894 --> 00:15:57,774
by carefully choosing the type
of state function workflow, it

225
00:15:57,774 --> 00:15:59,154
can be pretty cost effective.

226
00:15:59,654 --> 00:16:03,744
And another benefit that
comes with it is AWS CDK.

227
00:16:03,744 --> 00:16:11,829
With AWS CDK, the deployment can be made
much simpler by writing the infrastructure

228
00:16:11,879 --> 00:16:19,119
code, linting tool, and generating cloud
formation template with easy validation.

229
00:16:19,729 --> 00:16:20,659
before deployment.

230
00:16:21,159 --> 00:16:24,774
So how does an AWS tech function look?

231
00:16:25,524 --> 00:16:31,014
On the right you see an example
of how a AWS graph looks like.

232
00:16:31,514 --> 00:16:37,654
It's basically, create workflows
to build distributed applications.

233
00:16:38,184 --> 00:16:42,064
automate processes, orchestrate
microservices, and create data

234
00:16:42,154 --> 00:16:43,754
and machine learning pipelines.

235
00:16:44,254 --> 00:16:51,034
Few key concepts from AWS step functions
are execution tasks and activities.

236
00:16:51,614 --> 00:16:58,574
Every instance of the workflow which
is executed as well as executions.

237
00:16:59,004 --> 00:17:04,449
We have tasks and different
activities in step functions.

238
00:17:04,949 --> 00:17:09,209
In the step function console,
you can visualize, edit and debug

239
00:17:09,229 --> 00:17:10,449
your application's workflow.

240
00:17:11,059 --> 00:17:14,909
You can examine the state of each
step in your workflow to make sure

241
00:17:14,909 --> 00:17:17,079
your application runs in order.

242
00:17:17,499 --> 00:17:22,419
And as expected, you can retry
the workflow from the state

243
00:17:22,819 --> 00:17:24,699
where it failed for any reason.

244
00:17:25,199 --> 00:17:26,469
and A lot more.

245
00:17:26,969 --> 00:17:30,499
So what are the components of,
AWS step function workflow?

246
00:17:30,999 --> 00:17:37,499
There is a basic one where there
is a request response required.

247
00:17:37,999 --> 00:17:41,904
so, so we say call service B and
expects a response from there.

248
00:17:42,404 --> 00:17:47,424
There are decision components
where you need to make decision

249
00:17:47,434 --> 00:17:50,424
where to go to state C or state D.

250
00:17:50,924 --> 00:17:57,754
There is a retry task where, for
example, if there is a retryable

251
00:17:58,294 --> 00:18:03,594
failure, you might want your workflow
to automatically retry the task.

252
00:18:04,409 --> 00:18:09,389
Maybe immediately, maybe with
a back off, but that's where

253
00:18:09,389 --> 00:18:10,809
you use retry task component.

254
00:18:11,309 --> 00:18:14,429
There can be requirement
to add a human in loop.

255
00:18:14,914 --> 00:18:20,449
For example, we talked about the IT
services use case between raising a

256
00:18:20,459 --> 00:18:22,869
request to getting the request fulfilled.

257
00:18:23,239 --> 00:18:26,689
There might be a need to add a
human who approves the request.

258
00:18:27,189 --> 00:18:29,979
There is a need to
process data in parallel.

259
00:18:30,479 --> 00:18:34,909
There we have a component which
allows us to achieve that.

260
00:18:35,899 --> 00:18:40,899
And then finally we can also do
dynamic, we can also dynamically

261
00:18:40,899 --> 00:18:43,599
process with map kind of operations.

262
00:18:44,009 --> 00:18:47,629
So all these components put
together gives us a AWS.

263
00:18:48,129 --> 00:18:52,269
step function workflow, which can
help us achieve our business logic.

264
00:18:52,769 --> 00:18:55,679
So how do you develop one
step on step functions?

265
00:18:56,029 --> 00:18:57,589
There are two options available.

266
00:18:58,079 --> 00:19:05,539
Then no code or no code option is
going to the AWS console and using the

267
00:19:05,599 --> 00:19:08,539
easy to use dropdown workflow studio.

268
00:19:09,484 --> 00:19:12,514
where you can just track the
different components that you

269
00:19:12,514 --> 00:19:15,914
need for your workflow, integrate
with the different services you

270
00:19:15,914 --> 00:19:18,374
need and you get the workflow.

271
00:19:18,874 --> 00:19:24,734
The other option for more techy
kind of users is to use Amazon state

272
00:19:24,734 --> 00:19:29,944
language, where you can basically
use a JSON like syntax to define the

273
00:19:29,964 --> 00:19:35,744
states, define the inputs, output, the
behavior, and control the flow of logic.

274
00:19:36,244 --> 00:19:37,379
What are some of the.

275
00:19:37,639 --> 00:19:39,959
use cases for the AWS step functions.

276
00:19:40,459 --> 00:19:44,859
As we are discussing in this talk, we
can use it to orchestrate microservices,

277
00:19:45,359 --> 00:19:49,649
allowing breakdown of complex
application into smaller independent

278
00:19:49,659 --> 00:19:50,939
services that can be deployed.

279
00:19:51,479 --> 00:19:54,009
developed, tested and
deployed independently can

280
00:19:54,009 --> 00:19:55,309
be used for data processing.

281
00:19:55,639 --> 00:19:59,849
Step functions can be used to process
large volume of data or perform tasks

282
00:20:00,139 --> 00:20:02,189
that needs to be done periodically.

283
00:20:02,639 --> 00:20:05,039
It offers easy integration with AWS glue.

284
00:20:05,039 --> 00:20:09,439
For example, we can use it
for machine learning use case.

285
00:20:09,479 --> 00:20:13,129
Step functions can be used to
build and manage data pipelines,

286
00:20:13,529 --> 00:20:14,749
allowing you to move data.

287
00:20:15,289 --> 00:20:19,849
between different sources and destination
in a reliable and scalable manner.

288
00:20:20,389 --> 00:20:23,609
It has integration with AWS Bedrock.

289
00:20:24,569 --> 00:20:28,929
and you can use that to build
machine learning use cases.

290
00:20:29,429 --> 00:20:31,479
You can build event driven architecture.

291
00:20:31,769 --> 00:20:39,329
You have features in AWS step function
to perform async steps, which can be

292
00:20:39,329 --> 00:20:42,309
useful to build event driven architecture.

293
00:20:42,809 --> 00:20:47,479
There are multiple happy
customers of AWS Step Functions.

294
00:20:47,959 --> 00:20:50,489
I have named a few here.

295
00:20:50,989 --> 00:20:56,509
You can find the information on
how they use it and what they were

296
00:20:56,509 --> 00:21:00,669
able to achieve and how highly
they speak about it by going to

297
00:21:00,669 --> 00:21:03,829
the website for AWS Step Functions.

298
00:21:04,329 --> 00:21:09,619
This brings us to the final part of
today's talk, best practices that we need

299
00:21:09,619 --> 00:21:11,939
to keep in mind when designing systems.

300
00:21:12,384 --> 00:21:13,864
on AWS step functions.

301
00:21:14,854 --> 00:21:18,384
Let's look at how we can design
for scale and performance.

302
00:21:19,384 --> 00:21:22,654
The first thing we need to decide
on whether we want to use standard

303
00:21:22,674 --> 00:21:25,534
workflows or express workflows.

304
00:21:26,034 --> 00:21:31,014
Standard workflows are workflows
that can run up to a year.

305
00:21:31,514 --> 00:21:34,654
These guarantee exactly once execution.

306
00:21:35,154 --> 00:21:38,014
These are charged on number
of state transitions.

307
00:21:38,934 --> 00:21:43,944
and are better suited for non
idempotent, long running workflows.

308
00:21:44,444 --> 00:21:49,304
For instance, think about long
running, executions, where there's

309
00:21:49,304 --> 00:21:50,984
a human loop approval required.

310
00:21:51,484 --> 00:21:54,634
It can be approved today, tomorrow,
maybe three days down the line.

311
00:21:55,154 --> 00:21:57,654
So you would like to use
standard workflow there.

312
00:21:58,154 --> 00:22:01,184
Also, think about idempotency.

313
00:22:01,684 --> 00:22:04,744
Is it okay if the same
step is executed twice?

314
00:22:05,244 --> 00:22:06,544
Maybe, maybe not.

315
00:22:07,294 --> 00:22:09,574
Think about, Maybe a payment workflow.

316
00:22:10,074 --> 00:22:17,034
You want to make sure that you can track
the payment made and what all happened

317
00:22:17,054 --> 00:22:21,724
with that transaction and you don't want
to run it again without your knowledge.

318
00:22:22,214 --> 00:22:25,234
So that's something where you
would use standard workflow.

319
00:22:25,734 --> 00:22:27,064
Then we have express workflow.

320
00:22:27,704 --> 00:22:31,154
These are comparatively
newer options available.

321
00:22:31,654 --> 00:22:36,214
And these work, these workflows
are limited to five minutes.

322
00:22:36,714 --> 00:22:43,574
Guarantee at least once execution for
async and at most once for sync workflows.

323
00:22:44,074 --> 00:22:48,954
The cost is pretty low, 1
for a million executions.

324
00:22:49,594 --> 00:22:54,609
And It can be used to perform
high volume processing workload

325
00:22:54,609 --> 00:22:57,809
with DPS allowed in thousands.

326
00:22:58,309 --> 00:23:06,279
Think about using these when you have
something that is item potent and

327
00:23:06,779 --> 00:23:10,419
can be executed and finished quickly.

328
00:23:10,919 --> 00:23:11,839
Or maybe use both.

329
00:23:12,339 --> 00:23:16,889
Standard workflows can act
as parent workflows to invoke

330
00:23:17,079 --> 00:23:18,309
express workflows synchronously.

331
00:23:18,809 --> 00:23:20,509
Keep in mind, the reverse is not true.

332
00:23:21,009 --> 00:23:27,579
The standard workflows can be banned for
express, but not the other way around.

333
00:23:28,079 --> 00:23:33,099
This method of designing the workflow
combines the strength of both workflow

334
00:23:33,099 --> 00:23:39,109
types, it offers a reliable workflow
while maintaining cost efficiency

335
00:23:39,889 --> 00:23:40,829
and performance optimization.

336
00:23:41,329 --> 00:23:45,109
Next thing for performance and scale is.

337
00:23:45,679 --> 00:23:47,629
doing the right service integration.

338
00:23:48,129 --> 00:23:53,659
Consider Lambda when you have
to run a large number of tasks

339
00:23:53,729 --> 00:23:56,199
in parallel or concurrently.

340
00:23:56,699 --> 00:24:00,089
But think about Fargate when
you have something that runs

341
00:24:00,099 --> 00:24:01,519
for more than 15 minutes.

342
00:24:02,019 --> 00:24:07,699
Think about containerized solutions
like ECS or EKS if you want

343
00:24:07,709 --> 00:24:09,689
more control on the containers.

344
00:24:10,189 --> 00:24:14,959
All lambda functions in step function
must be designed to be idempotent.

345
00:24:15,459 --> 00:24:19,689
Lambda function names should
not be specified explicitly.

346
00:24:20,189 --> 00:24:26,579
The names can have some prefix assigned
to them when CloudFormation deploys them.

347
00:24:26,809 --> 00:24:29,119
So you need to be aware of that.

348
00:24:29,619 --> 00:24:35,339
Version control is crucial for both
lambdas and step function definitions.

349
00:24:35,839 --> 00:24:39,609
For DynamoDB interactions,
use optimistic locking.

350
00:24:40,109 --> 00:24:44,559
transactions or conditional
write to handle race conditions.

351
00:24:45,059 --> 00:24:45,619
Moving on.

352
00:24:46,039 --> 00:24:47,369
Beware of timeouts.

353
00:24:47,869 --> 00:24:52,429
Amazon state language doesn't specify
timeout for state machine definition,

354
00:24:52,929 --> 00:24:58,499
which means you can, or the workflow
that you develop can be waiting in the

355
00:24:58,499 --> 00:25:05,739
same state for indefinite time without
the knowledge of, without failing or

356
00:25:05,949 --> 00:25:07,149
without giving any notification to you.

357
00:25:07,649 --> 00:25:09,559
For callbacks with a trust token.

358
00:25:10,269 --> 00:25:10,769
The.

359
00:25:11,269 --> 00:25:14,559
the method that is used
for async allocations.

360
00:25:15,529 --> 00:25:21,149
Use hard bits and add the hard bit
second field in task state definition.

361
00:25:21,649 --> 00:25:23,169
Retry is an error handling option.

362
00:25:24,084 --> 00:25:28,554
Exceptions should be categorized
into retriable exceptions like, SQS

363
00:25:28,614 --> 00:25:34,674
dependency exception and non retriable
exceptions like null pointer exception

364
00:25:35,084 --> 00:25:37,474
to simplify the step function graph.

365
00:25:37,974 --> 00:25:43,084
When configuring dependencies, always
set timeout and retry policies,

366
00:25:43,654 --> 00:25:48,634
especially when connecting to
other services like CloudWatch.

367
00:25:49,134 --> 00:25:54,514
Proactively handle transient Lambda
exceptions in your state machine

368
00:25:55,064 --> 00:26:00,114
to retry invoking your Lambda
functions or to catch the error.

369
00:26:00,614 --> 00:26:02,134
Monitor and optimize.

370
00:26:02,514 --> 00:26:09,224
The key to scale and performance
is to monitor your systems

371
00:26:09,714 --> 00:26:11,544
and AWS CloudWatch service.

372
00:26:12,364 --> 00:26:15,734
is used to monitor the performance
of step function workflows.

373
00:26:15,734 --> 00:26:22,159
This will help you identify any
bottlenecks or issues that may be

374
00:26:22,159 --> 00:26:27,579
impacting performance and allow you
to take corrective actions as needed.

375
00:26:28,079 --> 00:26:30,699
We'll look at some of the
CloudWatch metrics down the line.

376
00:26:31,199 --> 00:26:34,799
The next best practice is about security.

377
00:26:35,299 --> 00:26:41,479
For ensuring security of your step
functions, use IAM roles for tasks.

378
00:26:41,979 --> 00:26:47,629
Encrypt sensitive data, both at
rest and when they are transient.

379
00:26:47,629 --> 00:26:51,059
Use CloudTrail to monitor step functions.

380
00:26:51,559 --> 00:26:53,669
Use resource level permissions.

381
00:26:54,169 --> 00:26:59,129
to make sure the right services
have access to right resources.

382
00:26:59,629 --> 00:27:06,549
Enable CloudWatch logging to debug
the step functions and identify What

383
00:27:06,549 --> 00:27:09,149
went wrong or what can be made better

384
00:27:09,649 --> 00:27:15,509
next in best practices, we'll talk
about operation excellence best practice

385
00:27:16,009 --> 00:27:20,899
when you have to pass a large load
to your step function, think about

386
00:27:20,899 --> 00:27:26,619
using S3 as storage and passing the
S3 ARNs instead of passing the large

387
00:27:26,779 --> 00:27:28,699
payloads directly in the step functions

388
00:27:29,199 --> 00:27:31,169
use cloud watch for monitoring.

389
00:27:31,669 --> 00:27:35,009
There are few key metrics that are.

390
00:27:35,539 --> 00:27:41,179
Available in CloudWatch that can help
you monitor your step functions better

391
00:27:41,419 --> 00:27:47,509
and use them to even tune the performance
and performance of your step functions.

392
00:27:48,329 --> 00:27:54,129
So these are state transition, throttled
state transitions, execution duration,

393
00:27:54,329 --> 00:27:57,969
especially the execution duration
can be used to tune the performance

394
00:27:57,969 --> 00:28:02,179
of the step functions, throttled
execution starts, and task failures.

395
00:28:02,679 --> 00:28:05,799
Next, let's look at
reliability best practices.

396
00:28:06,299 --> 00:28:10,589
Some of the best practices for
reliability is handle timeouts gracefully.

397
00:28:11,089 --> 00:28:13,479
Beware of event history quota.

398
00:28:13,979 --> 00:28:19,344
If you, there is a limit
to how many events can be

399
00:28:20,084 --> 00:28:21,784
invoked in the step function.

400
00:28:22,114 --> 00:28:26,834
And if you are going about to go
over the quota, start a new workflow.

401
00:28:27,334 --> 00:28:31,464
Use retries and error handling wherever
possible, like we talked about.

402
00:28:32,264 --> 00:28:34,064
Use idempotent tasks.

403
00:28:34,984 --> 00:28:39,314
Use CloudWatch alarms to monitor your
load and find new step functions.

404
00:28:39,754 --> 00:28:41,794
Use CloudTrail for logging.

405
00:28:42,294 --> 00:28:44,114
And finally, test your workflows.

406
00:28:44,614 --> 00:28:49,914
There is a great feature available
where you can test each step in your

407
00:28:49,924 --> 00:28:53,564
step function individually with ease.

408
00:28:54,214 --> 00:28:55,404
Make use of those features.

409
00:28:55,904 --> 00:28:59,314
Next, we'll talk about some of the
cost optimization best practices.

410
00:28:59,964 --> 00:29:03,444
Like we talked about earlier,
standard versus express workflow.

411
00:29:03,744 --> 00:29:05,384
Think about the business use case.

412
00:29:05,414 --> 00:29:10,754
Think about whether it is long running,
non idempotent or short running, needs

413
00:29:10,754 --> 00:29:13,214
high throughput or maybe a mix of both.

414
00:29:13,714 --> 00:29:20,024
Carefully organizing the workflow
properly will help you save cost.

415
00:29:20,524 --> 00:29:22,934
Monitor and optimize the usage.

416
00:29:23,434 --> 00:29:26,389
This will also help you improve on cost.

417
00:29:27,219 --> 00:29:29,049
Use tagging for cost allocation.

418
00:29:29,549 --> 00:29:35,299
Tagging is another way of keeping
track of who is using the resource,

419
00:29:35,999 --> 00:29:37,799
how much resource is being used.

420
00:29:38,299 --> 00:29:40,799
With that, I conclude this talk.

421
00:29:41,299 --> 00:29:44,619
If you agree with what
I said, that's great.

422
00:29:44,749 --> 00:29:49,499
If you don't agree, feel free to
connect with me or reach out to

423
00:29:49,499 --> 00:29:52,119
me and we can discuss further.

424
00:29:52,619 --> 00:29:57,089
Ping me if you want to have a
chat over coffee or discuss over

425
00:29:57,379 --> 00:29:59,239
something related to technology.

426
00:29:59,739 --> 00:30:04,429
You can email me at the email
provided here or you can

427
00:30:04,429 --> 00:30:05,959
reach out to me on LinkedIn.

428
00:30:06,459 --> 00:30:10,649
Looking forward to hear from
some of you, maybe more of you.

429
00:30:11,149 --> 00:30:16,559
Thank you for staying with me
and listening to me and helping

430
00:30:16,559 --> 00:30:17,759
me deliver this great talk.

431
00:30:18,259 --> 00:30:19,839
This, I will end this talk.

432
00:30:19,949 --> 00:30:20,339
Thank you.

