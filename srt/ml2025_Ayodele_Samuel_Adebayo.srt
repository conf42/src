1
00:00:00,000 --> 00:00:00,840
Hi everyone.

2
00:00:00,900 --> 00:00:03,810
My name is Uncle Big B. I'm
a software engineer at Ash

3
00:00:04,050 --> 00:00:05,670
o and a technical educator.

4
00:00:06,360 --> 00:00:10,980
Today I'm really excited to be talking
to you about AI powered productivity,

5
00:00:11,220 --> 00:00:16,920
which involves boosting productivity for
software engineers using open source lms.

6
00:00:17,250 --> 00:00:18,330
So let's get into it.

7
00:00:20,115 --> 00:00:22,365
This is going to be our agenda for today.

8
00:00:22,455 --> 00:00:26,474
We are going to begin by understanding
why developer productivity matters,

9
00:00:26,775 --> 00:00:31,244
and then take a look at what if
coding wasn't the bottleneck anymore

10
00:00:31,244 --> 00:00:36,345
in our workflow, and then dive
into AI adoption among developers.

11
00:00:36,705 --> 00:00:41,695
And we are also going to take a look
at why open source lms and then.

12
00:00:41,765 --> 00:00:44,975
What you can actually do with these lms.

13
00:00:45,155 --> 00:00:49,295
And then we'll explore architectural
overview of how things work

14
00:00:49,385 --> 00:00:51,665
locally in our LMS development.

15
00:00:51,995 --> 00:00:57,245
And then we are going to take a look
at some use cases of these LMS as well.

16
00:00:57,455 --> 00:01:01,235
And then we are going to take
a look at AI tools that you

17
00:01:01,235 --> 00:01:03,305
can use that are beyond charge.

18
00:01:04,114 --> 00:01:08,644
We are also going to take it at
setting up an open source AI dev tool

19
00:01:08,704 --> 00:01:14,164
locally, and we'll take a look at the
performance and caution of using open

20
00:01:14,164 --> 00:01:16,475
source LLMs on your local machine.

21
00:01:16,744 --> 00:01:21,454
And we are going to end it with best
practices for productive AI usage.

22
00:01:21,664 --> 00:01:23,524
So let's begin with the first one.

23
00:01:24,064 --> 00:01:26,644
Why developer productivity matters.

24
00:01:26,945 --> 00:01:32,104
Developer productivity isn't just
about writing more code faster,

25
00:01:32,404 --> 00:01:37,264
but then it is about building high
quality software with less friction

26
00:01:37,475 --> 00:01:42,004
shipping features faster, and spending
more time solving reward problems.

27
00:01:42,554 --> 00:01:48,764
Rather than getting stock on repetitive
tax, and the first point on why developer

28
00:01:48,764 --> 00:01:55,124
productivity matters is faster shipping
of high quality software, because as

29
00:01:55,124 --> 00:02:00,379
teams scale and product demands grow,
engineers are expected to deliver more.

30
00:02:01,249 --> 00:02:05,240
Collaborate better and
maintain quality all at once.

31
00:02:05,360 --> 00:02:10,439
And with this developers are going
to be able to spend less time on

32
00:02:10,439 --> 00:02:12,629
boiler plate and repetitive work.

33
00:02:12,869 --> 00:02:17,499
And with an effective productivity
approach, developers are also

34
00:02:17,499 --> 00:02:22,034
going to be able to focus their
energy on solving reward problems.

35
00:02:22,549 --> 00:02:27,469
Rather than spending a lot of times
on bola code and repetitive work.

36
00:02:27,769 --> 00:02:33,949
And with this point, this proves that AI
is going to help amplify developers that

37
00:02:33,949 --> 00:02:37,019
leverage ai rather than replacing us.

38
00:02:37,079 --> 00:02:41,489
So when you leverage ai, it's
going to amplify your skill and

39
00:02:41,489 --> 00:02:43,749
not immediately replace you.

40
00:02:43,929 --> 00:02:47,049
So with this, I'm going to
leave you with this false quote,

41
00:02:47,079 --> 00:02:50,019
which says, AI is not a threat.

42
00:02:50,294 --> 00:02:55,544
It's a productivity amplifier, so
AI is not coming for your job, but

43
00:02:55,634 --> 00:03:00,884
if you leverage on AI and position
yourself rightly with ai, AI is

44
00:03:00,884 --> 00:03:02,864
going to amplify your productivity.

45
00:03:03,224 --> 00:03:05,054
I'm also going to leave
you with this question.

46
00:03:05,414 --> 00:03:08,534
What if coding wasn't
the bottleneck anymore?

47
00:03:08,984 --> 00:03:10,154
Let me ask you something.

48
00:03:10,754 --> 00:03:13,124
What slows you down the
most in your workflow?

49
00:03:13,979 --> 00:03:18,629
Is it the boiler code or
repetitive boring stuff?

50
00:03:18,929 --> 00:03:23,899
It is not always the hardest part of the
code that slows us down, but basically

51
00:03:24,049 --> 00:03:28,289
the repetitive, the boiler played
the setting up of state management

52
00:03:28,289 --> 00:03:30,549
by redox or things along that line.

53
00:03:30,759 --> 00:03:36,609
What if we could move past that friction
and focus more on the real business

54
00:03:36,739 --> 00:03:38,839
side of things that solve real problems.

55
00:03:39,199 --> 00:03:43,589
And that is where AI comes in,
especially the open source lms,

56
00:03:43,739 --> 00:03:47,799
where they can do all this repetitive
work for us in a very short time.

57
00:03:48,159 --> 00:03:49,779
And they're not here to replace us.

58
00:03:49,779 --> 00:03:54,399
Like I said, they're here to remove
that bottleneck from our workflow.

59
00:03:55,704 --> 00:04:01,804
So according to the chart put from the
2024 Stack Overflow Developer Survey

60
00:04:02,144 --> 00:04:07,584
ai has been becoming deeply integrated
into the way we build software today.

61
00:04:07,944 --> 00:04:11,054
And this survey shows
that about a year ahead.

62
00:04:11,824 --> 00:04:18,264
Most developers agreed that AI
tools be more integrated into the

63
00:04:18,264 --> 00:04:22,714
key part of their workflow, which
is coming into existence in 2025.

64
00:04:23,014 --> 00:04:28,664
More companies, more developers are
leveraging more on AI for documenting,

65
00:04:28,664 --> 00:04:32,864
for testing, for generating UIs,
for generating designs as well.

66
00:04:33,164 --> 00:04:37,784
Even designers are also using this to
generate a lot of things there as well.

67
00:04:37,984 --> 00:04:42,814
These are not basically side tax
but then AI is already building the

68
00:04:42,814 --> 00:04:45,424
backbone of a lot of engineering effort.

69
00:04:45,674 --> 00:04:50,414
This shows that in 20 24, 20
23, a lot of people are already

70
00:04:50,414 --> 00:04:53,084
adapting it and 2025, a lot of.

71
00:04:53,404 --> 00:04:56,164
More people are already
making use of this.

72
00:04:56,294 --> 00:05:01,924
This shows that AI is not the future
to come, but then it is the future

73
00:05:02,164 --> 00:05:03,724
that we are currently living in.

74
00:05:03,904 --> 00:05:08,254
Now let's talk about AI
adoptions among developer and.

75
00:05:08,474 --> 00:05:13,514
AI is no longer an experiment in the,
like the previous years, but then it

76
00:05:13,514 --> 00:05:15,344
is already becoming the mainstream.

77
00:05:15,554 --> 00:05:17,934
It is already becoming the normal team.

78
00:05:17,964 --> 00:05:19,874
Just the way we use Git and GitHub.

79
00:05:20,564 --> 00:05:26,054
And now in AI adoption among
developers, we have 76.

80
00:05:26,069 --> 00:05:31,109
Percent of developers who are already
using or planning to use AI tools in

81
00:05:31,109 --> 00:05:33,479
their development process in 2024.

82
00:05:33,689 --> 00:05:35,219
So you can see the numbers.

83
00:05:35,339 --> 00:05:40,199
The percentage of developers are already
using it or planning to use it in 2024

84
00:05:40,529 --> 00:05:45,419
compared to the numbers of developers
that are already using it in 2025.

85
00:05:45,659 --> 00:05:47,819
So the number is already increasing.

86
00:05:48,029 --> 00:05:50,849
So the question is you ask yourself
is what is holding you back

87
00:05:51,059 --> 00:05:54,209
to leverage most of these lms?

88
00:05:54,489 --> 00:05:56,559
Either open source or not open source.

89
00:05:56,979 --> 00:06:02,349
And also based on the survey as
well, 62% were using AI tools

90
00:06:02,379 --> 00:06:06,519
in 2024 are up from 44% in 2023.

91
00:06:06,699 --> 00:06:12,289
So now imagine the numbers that we have
in 2025 where the survey is run again.

92
00:06:12,559 --> 00:06:17,069
So this shows an increasing numbers
of adoptions among developers.

93
00:06:17,309 --> 00:06:19,559
And you should also get on the train.

94
00:06:19,829 --> 00:06:21,549
And then we also have.

95
00:06:21,894 --> 00:06:27,534
On the same survey that 81%
sites increase productivity as

96
00:06:27,534 --> 00:06:29,754
the top benefit of AI tools.

97
00:06:30,054 --> 00:06:34,174
So this also shows effectiveness
amongst the developers.

98
00:06:34,474 --> 00:06:37,204
And like I said, these
are not just small tasks.

99
00:06:37,474 --> 00:06:40,144
They're critical part of
shipping quality softwares.

100
00:06:40,354 --> 00:06:43,594
So AI is already writing
like back backend, the full

101
00:06:43,594 --> 00:06:45,094
front end of applications.

102
00:06:45,374 --> 00:06:49,514
And developers are realizing
that using AI isn't optional.

103
00:06:49,854 --> 00:06:51,324
If you want to stay efficient.

104
00:06:51,354 --> 00:06:55,254
So in this age that we are now,
our reality is that if you want

105
00:06:55,254 --> 00:06:58,824
to move fast, if you want to
get things done faster, you.

106
00:06:59,014 --> 00:07:01,144
Have to leverage AI in some ways.

107
00:07:01,264 --> 00:07:04,614
Since you already know what you
want to do, you can just leverage

108
00:07:04,854 --> 00:07:06,444
AI to achieve that faster.

109
00:07:06,804 --> 00:07:12,744
And AI is quietly becoming a different
layer in the modern developer

110
00:07:12,744 --> 00:07:17,634
workflow, just like the way we have
GI and we once have stack overflow

111
00:07:17,844 --> 00:07:20,994
in our mainstream of our workflow.

112
00:07:21,254 --> 00:07:24,074
Now let's discuss about why open source.

113
00:07:24,424 --> 00:07:28,574
LMS when it comes to using AI
in developer workflows open

114
00:07:28,574 --> 00:07:30,749
source LMS are a game changer.

115
00:07:31,089 --> 00:07:32,309
And here it's right.

116
00:07:33,699 --> 00:07:36,519
First you get full
control over the models.

117
00:07:36,579 --> 00:07:40,479
You are not limited by API,
quotas, written means, or vendor

118
00:07:40,479 --> 00:07:46,669
decision because they are basically
running on your own luer server.

119
00:07:46,729 --> 00:07:51,919
And then you can also save host this
and opensource LLM also provides

120
00:07:51,949 --> 00:07:57,409
us with flexibility to customize
pipelines, which you can run locally.

121
00:07:57,649 --> 00:08:00,529
And it is also great for speed cost.

122
00:08:00,919 --> 00:08:06,109
Data privacy, you can also fine tune
them for your specific use cases.

123
00:08:06,379 --> 00:08:11,489
And that's basically incredible
powerful in engineering teams, right?

124
00:08:11,699 --> 00:08:15,449
So that you can basically customize
them to your own use case.

125
00:08:15,809 --> 00:08:19,374
And lastly, you can deploy
this open source LMM.

126
00:08:19,964 --> 00:08:24,644
Anywhere with less or no API cost,
you can also deploy them on your

127
00:08:24,704 --> 00:08:28,744
Looker hardware without having
to pay for any cloud charges.

128
00:08:28,934 --> 00:08:35,504
Examples of these LMS are and LM Studio
among others, which you can basically.

129
00:08:35,754 --> 00:08:39,594
Download them on your system and
then run them locally without

130
00:08:39,594 --> 00:08:41,974
having to pay any extra charges.

131
00:08:42,494 --> 00:08:48,344
So let's talk about what you can actually
do with Open Source LMS as a developer.

132
00:08:48,974 --> 00:08:52,304
These modules are not
just for charge bot with.

133
00:08:52,699 --> 00:08:55,919
Gone beyond being impressed
with chatting with lms.

134
00:08:56,229 --> 00:08:59,979
They can also help us across
multiple parts of your workflow.

135
00:09:00,359 --> 00:09:03,000
They can help with code generation.

136
00:09:03,370 --> 00:09:08,570
You can use them for refactoring functions
writing unit test and validating of

137
00:09:08,570 --> 00:09:11,700
logic which is what is our reality now.

138
00:09:11,965 --> 00:09:13,345
AI can do most of these things.

139
00:09:13,525 --> 00:09:15,355
They can talk to database.

140
00:09:15,355 --> 00:09:19,525
They can leverage integrations
with super base using MCP.

141
00:09:19,705 --> 00:09:24,595
They can leverage with any other
application using their A API or MCP.

142
00:09:24,875 --> 00:09:27,245
Then this makes things a lot faster.

143
00:09:27,665 --> 00:09:32,795
And also AI is already helping with the
bogging like we see in the use case of

144
00:09:32,885 --> 00:09:36,125
Chrome Console ai, which helps you to.

145
00:09:36,375 --> 00:09:41,535
Deb Bug Network is used, which epi
to debug errors in your console, and

146
00:09:41,535 --> 00:09:46,925
you don't have to switch between your
development browser and LLM, so it's

147
00:09:46,925 --> 00:09:49,895
already integrated into your console.

148
00:09:49,955 --> 00:09:51,005
And this is very helpful.

149
00:09:51,035 --> 00:09:55,725
So another one is that you can
leverage LMS to basically learn

150
00:09:55,755 --> 00:09:57,715
about an open source project.

151
00:09:57,715 --> 00:09:58,705
You can learn about.

152
00:09:59,340 --> 00:10:02,880
The GitHub repository, you
can learn about the structure.

153
00:10:03,330 --> 00:10:07,470
The Wes are being done on the
repository, just like for onboarding.

154
00:10:07,680 --> 00:10:12,330
So LMS make things very easier
for you when it comes to like code

155
00:10:12,330 --> 00:10:14,220
base, question and answer as well.

156
00:10:14,430 --> 00:10:19,710
So another great thing that these LMS are
great at is for documenting your code.

157
00:10:20,010 --> 00:10:23,550
You can leverage the local
lms, you can fine tune them for

158
00:10:23,550 --> 00:10:25,170
your own use case, and then.

159
00:10:25,865 --> 00:10:27,605
Use them to document your code.

160
00:10:27,845 --> 00:10:32,225
And because you are using them
locally or via open infrastructure,

161
00:10:32,435 --> 00:10:37,885
you can, build your own dev agent or
even plug them into your id like via

162
00:10:38,005 --> 00:10:41,515
code or know them or three editor.

163
00:10:42,115 --> 00:10:43,255
And it's not just about.

164
00:10:43,825 --> 00:10:45,355
Answering que questions.

165
00:10:45,515 --> 00:10:49,765
It's about automating workflow as
well, so you can plug these LMS

166
00:10:49,765 --> 00:10:54,815
into your workflow directly through
documentation support for your developers

167
00:10:54,815 --> 00:10:57,005
and for your consumers as well.

168
00:10:57,455 --> 00:10:57,665
So now.

169
00:10:58,140 --> 00:11:04,270
Let's break down how local LLMs actually
fit into your development workflow.

170
00:11:04,480 --> 00:11:09,100
So we'll take a look at the architectural
overview of LLMs in local development.

171
00:11:09,460 --> 00:11:14,320
Now, imagine you are coding in via
code, and instead of rea relying on

172
00:11:14,320 --> 00:11:17,230
a cloud service like open ais, API.

173
00:11:17,440 --> 00:11:21,790
Which has rate limit, you can
basically run your own LLM locally.

174
00:11:22,060 --> 00:11:28,360
And this is all thanks to Ola Man, LM
Studio or VLLM which you can explore.

175
00:11:28,640 --> 00:11:34,100
What you just need to do is to basically
pair them with extensions like Continue

176
00:11:34,310 --> 00:11:38,390
Dev, which is greeted by the way, which
you can basically use to integrate

177
00:11:38,450 --> 00:11:44,300
these LMS directly into your id giving
you the co-pilot like suggestions.

178
00:11:44,545 --> 00:11:46,465
But powered by your local model.

179
00:11:46,675 --> 00:11:51,605
So these tools allows you to basically
fine tune things into your own use

180
00:11:51,605 --> 00:11:55,995
case into your own preference so that
they can do what you want directly,

181
00:11:55,995 --> 00:11:57,765
and that is what they will focus on.

182
00:11:58,035 --> 00:12:01,305
And this also gives you
control over the prompts.

183
00:12:01,465 --> 00:12:04,525
You can control the prompts,
the models, and the context

184
00:12:04,705 --> 00:12:07,255
that are available to these lms.

185
00:12:07,470 --> 00:12:11,620
Only for your own use case and
your own data your own code base.

186
00:12:11,920 --> 00:12:16,690
So the LLM is going to basically run
on your machine it's going to respect

187
00:12:16,690 --> 00:12:21,430
your memory and keeps your code base
private as well based on how you want

188
00:12:21,430 --> 00:12:25,580
it, since it's already running on
your looker infrastructure or your

189
00:12:25,580 --> 00:12:27,620
own cloud infrastructure as well.

190
00:12:27,870 --> 00:12:30,750
And these architecture are
usually very fast, right?

191
00:12:30,900 --> 00:12:31,560
So they're very.

192
00:12:31,580 --> 00:12:35,910
Fast, they're cost effective
and gives you the flexibility to

193
00:12:35,910 --> 00:12:40,510
build intelligent features without
leaving your local dev environment.

194
00:12:40,840 --> 00:12:45,780
And then let me introduce you to a
few tools that brings Open source

195
00:12:45,780 --> 00:12:48,270
LMS right into your workflow.

196
00:12:48,570 --> 00:12:52,260
And the first one here is
the Ola Man for Loam model.

197
00:12:53,025 --> 00:12:56,485
Serving so you can explore this,
you can visit their website.

198
00:12:56,645 --> 00:13:01,105
It is a very great tool to run lms
locally for your local development.

199
00:13:01,405 --> 00:13:06,315
And another one that you can pair with
the Allman is the continued the dev

200
00:13:06,535 --> 00:13:11,945
which is a vs code copilot alternative
that allows you to run and, AI native.

201
00:13:12,580 --> 00:13:18,340
LMS are directly from your VS code, and
the next one is A-V-L-L-M for optimized.

202
00:13:18,720 --> 00:13:20,790
Serving and scaling of LLMs.

203
00:13:20,970 --> 00:13:26,620
So if you want to run and optimize LLMs
locally, you can also exploit these tools

204
00:13:26,780 --> 00:13:28,970
as we've discussed in the previous slide.

205
00:13:29,390 --> 00:13:34,680
Now that we've have an idea of the
LLMs and the tools that we can exploit

206
00:13:34,860 --> 00:13:38,760
and now we can exploit them and
what we can achieve from using them.

207
00:13:38,880 --> 00:13:42,760
Now let's take a look
at the use cases of ai.

208
00:13:42,920 --> 00:13:44,720
Boosted developer tax.

209
00:13:45,000 --> 00:13:45,210
Yeah.

210
00:13:45,210 --> 00:13:48,130
These are the things we are
probably doing every day.

211
00:13:48,130 --> 00:13:52,900
Not totally different, but then
this is going to help you to see

212
00:13:52,900 --> 00:13:57,980
how you can leverage AI or integrate
AI into most of these use cases.

213
00:13:58,070 --> 00:14:02,420
So the first one is good generation and
you can make use of continu to death.

214
00:14:02,710 --> 00:14:07,380
To for this and AI can help
you in writing repetitive code.

215
00:14:07,660 --> 00:14:10,910
Think of good endpoints or UI components.

216
00:14:10,940 --> 00:14:13,190
They can do it for you effectively.

217
00:14:13,460 --> 00:14:16,450
And writing of UI test is also.

218
00:14:17,335 --> 00:14:20,585
Something they're very good
at writing prompt templates.

219
00:14:20,615 --> 00:14:23,855
And then they can help you
to write this unit test in a

220
00:14:23,855 --> 00:14:25,805
particular language that you want.

221
00:14:26,045 --> 00:14:32,585
And they are also very good in generating
Aries and commit, which are going to be

222
00:14:32,585 --> 00:14:36,115
auto-generated and much more organized.

223
00:14:36,355 --> 00:14:39,475
And you can also learn from
these as an engineer as well.

224
00:14:39,770 --> 00:14:42,860
And they also helps you
to generate architectural

225
00:14:42,860 --> 00:14:45,080
diagrams for other developers.

226
00:14:45,260 --> 00:14:49,290
If it is an open source project, it can
help you to generate the architectural

227
00:14:49,290 --> 00:14:51,840
for your read me for the documentation.

228
00:14:52,110 --> 00:14:55,320
And all of these things
are basically not Turing.

229
00:14:55,440 --> 00:15:00,410
They are our re live use cases and
that our teams are already using.

230
00:15:00,410 --> 00:15:04,510
So all of these use cases are already,
being used in real life project.

231
00:15:04,810 --> 00:15:06,460
And then you can basically.

232
00:15:07,610 --> 00:15:11,930
Build these workflows using tools
that we've already mentioned from

233
00:15:11,930 --> 00:15:16,940
continue Dev to long chain with local
hosted models like we've been saying.

234
00:15:17,100 --> 00:15:22,910
Ai, is already becoming our sidekick
and it's part of our pack of today.

235
00:15:23,120 --> 00:15:25,855
So now let's talk about
open source AI tools.

236
00:15:26,335 --> 00:15:29,965
That you can basically use
if you are excited about

237
00:15:29,965 --> 00:15:32,155
integrating AI into your workflow.

238
00:15:32,525 --> 00:15:37,055
The good news is you don't need
expensive subscription or closed API.

239
00:15:37,385 --> 00:15:42,725
There's a growing ecosystem of open source
tools built for developers like you, like

240
00:15:42,725 --> 00:15:45,605
me, and they are designed to run locally.

241
00:15:45,725 --> 00:15:48,275
It can be customized and you can.

242
00:15:48,580 --> 00:15:51,980
Keep you can keep the
control of how things works.

243
00:15:52,200 --> 00:15:56,910
So here are some of the best open source
AI tools that you can start using today.

244
00:15:57,240 --> 00:16:00,950
And you can basically just mix them
together like we've been saying.

245
00:16:01,130 --> 00:16:03,170
So the first one is the continuum.

246
00:16:03,350 --> 00:16:09,340
Do dev which you can basically pair
with your editor such as via school

247
00:16:09,340 --> 00:16:11,920
trade and any other editor that.

248
00:16:12,070 --> 00:16:13,390
Support lms.

249
00:16:13,750 --> 00:16:18,210
And another one that is more
popular is the causal and it is a

250
00:16:18,210 --> 00:16:21,980
VS code for built ally around ai.

251
00:16:21,980 --> 00:16:24,580
So you can also leverage this one as well.

252
00:16:24,820 --> 00:16:29,980
And you can also leverage the Tabby ml,
which is basically a lightweight open

253
00:16:29,980 --> 00:16:32,260
source auto complete for developer.

254
00:16:32,995 --> 00:16:33,385
Two.

255
00:16:33,655 --> 00:16:38,455
And you can also take a look at the LM
studio, which also run local module,

256
00:16:38,665 --> 00:16:40,885
and it makes your work very smooth.

257
00:16:41,245 --> 00:16:45,685
So the last two I have here is the
open deving, which is very good

258
00:16:45,685 --> 00:16:47,875
for building autonomous dev agent.

259
00:16:48,055 --> 00:16:52,385
So if you want to build your own
custom dev agents that can do specific

260
00:16:52,385 --> 00:16:55,625
things for you the way you want
it, with your own prompting, with

261
00:16:55,625 --> 00:16:57,755
your own rules, with your own data.

262
00:16:57,925 --> 00:16:59,605
Then you can also leverage this.

263
00:16:59,795 --> 00:17:03,315
This is a table that list
the tools and compares them

264
00:17:03,315 --> 00:17:04,905
based on their own use cases.

265
00:17:05,095 --> 00:17:09,335
If you don't know what tool to
use for what here is a table that

266
00:17:09,385 --> 00:17:10,975
basically give you a summary of that.

267
00:17:11,295 --> 00:17:16,565
You can check out older man if you want
to work if you want to manage your local.

268
00:17:17,000 --> 00:17:17,330
Model.

269
00:17:17,690 --> 00:17:22,550
You can also check out LM Studio
which is a UI driven local lms

270
00:17:22,650 --> 00:17:24,910
basically for frontend engineers.

271
00:17:25,150 --> 00:17:29,510
And then you can also check out
continue the dev which is a vs.

272
00:17:29,510 --> 00:17:30,770
Code AI assistance.

273
00:17:30,770 --> 00:17:32,240
So you're already using VS code.

274
00:17:32,360 --> 00:17:34,550
You can plug this in as an extension.

275
00:17:34,820 --> 00:17:39,410
And then we have the 30 ml, which
is a code completion alternative.

276
00:17:39,650 --> 00:17:41,240
That you can also leverage on.

277
00:17:41,510 --> 00:17:45,860
And we have the VLLM which
solves LLMs effectively.

278
00:17:46,040 --> 00:17:51,410
So if you want to run your LLM
locally, you can also leverage

279
00:17:51,485 --> 00:17:53,795
the VLLM implementation.

280
00:17:53,975 --> 00:17:56,705
So we have the launch chain as
well, which is basically used

281
00:17:56,705 --> 00:17:58,745
to build intelligent apps.

282
00:17:58,785 --> 00:18:00,755
Yeah, so that's basically all these tools.

283
00:18:00,995 --> 00:18:03,535
Now let's take a brief look at setting up.

284
00:18:03,900 --> 00:18:06,000
An open source AI dev.

285
00:18:06,645 --> 00:18:07,215
Workflow.

286
00:18:07,245 --> 00:18:11,745
So far we've talked about why AI
matters and what you can do with it

287
00:18:11,805 --> 00:18:17,175
now let's take a deep look into how
all of this actually works with the

288
00:18:17,175 --> 00:18:19,795
open source AI workflow for developers.

289
00:18:19,885 --> 00:18:23,275
And the beauty of it is that you
don't need a cloud subscription to

290
00:18:23,335 --> 00:18:25,345
get started, like I've been saying.

291
00:18:25,405 --> 00:18:29,635
So first, you are going
to choose a runner.

292
00:18:29,885 --> 00:18:31,535
So it can be an old LA man.

293
00:18:31,830 --> 00:18:34,400
And LM Studio they're basically great.

294
00:18:34,400 --> 00:18:40,480
So you can pick this, and then you can
then integrate them with an id using

295
00:18:40,480 --> 00:18:46,230
tools like Continue Dev or tab ml.
And then from there you can expand.

296
00:18:46,545 --> 00:18:50,415
To configure this to match,
your local model endpoints.

297
00:18:50,595 --> 00:18:54,215
And then you can also fine tune
these for your own use case.

298
00:18:54,375 --> 00:18:58,980
Then you can have a prompt template
basically for your stack if you're

299
00:18:59,010 --> 00:19:00,630
making use of next G'S view.

300
00:19:00,890 --> 00:19:05,430
Or any other stack or just
be it like H-M-S-C-S-S.

301
00:19:05,430 --> 00:19:09,690
So depending on what you want to use this
for, maybe for backend, for front end,

302
00:19:09,900 --> 00:19:12,940
you can basically craft this effectively.

303
00:19:13,220 --> 00:19:17,060
All of these runs on your machine, so
you don't really have to like host it

304
00:19:17,390 --> 00:19:21,350
and then even make more sense if you are
a solo developer working on a project.

305
00:19:21,530 --> 00:19:25,110
So you don't really have to
worry about the downtime.

306
00:19:25,305 --> 00:19:27,765
Or the slow or the limit.

307
00:19:27,985 --> 00:19:31,685
So you basically own the environment
and you can customize it to

308
00:19:31,685 --> 00:19:35,575
suit your workflow with prompts,
template for any of your tasks.

309
00:19:35,755 --> 00:19:40,345
So now let's take a look at the
performance and caution, because

310
00:19:40,345 --> 00:19:45,365
why open source LMS offer a
lot of power and flexibility.

311
00:19:45,615 --> 00:19:52,375
It's also important to understand both
the performance you can expect and then

312
00:19:52,375 --> 00:19:54,115
the cautions you need to keep in mind.

313
00:19:54,385 --> 00:19:58,385
So there's a table on
the performance side.

314
00:19:58,605 --> 00:20:02,935
Majority of the models are,
surprisingly fast and accurate already.

315
00:20:03,685 --> 00:20:08,285
And especially when you run them
locally using optimized tools

316
00:20:08,285 --> 00:20:13,285
like VLL VLLM or like we've
mentioned in the previous slide.

317
00:20:13,675 --> 00:20:17,565
And for most developer
productivity tasks writing code.

318
00:20:17,815 --> 00:20:22,955
Writing tests, summarizing or generating
docs, they are more than enough, right?

319
00:20:22,955 --> 00:20:24,425
So these tools are more than enough.

320
00:20:24,675 --> 00:20:27,705
And they are great tools for
everyday day of workflow.

321
00:20:28,035 --> 00:20:30,205
And there's no vendor locked in.

322
00:20:30,205 --> 00:20:31,975
You can basically own these.

323
00:20:31,975 --> 00:20:33,445
You can also it whenever you want.

324
00:20:33,625 --> 00:20:35,605
It can live on your machine locally.

325
00:20:35,695 --> 00:20:35,875
Yeah.

326
00:20:35,875 --> 00:20:40,505
So some of the questions that you should
take note is that AI can hallucinate

327
00:20:40,785 --> 00:20:42,375
which means that it can generate.

328
00:20:42,850 --> 00:20:45,970
Wrong or misleading
outputs with confidence.

329
00:20:46,130 --> 00:20:49,830
So it might be blind to
its own mistake basically.

330
00:20:50,010 --> 00:20:53,880
So that is why you must
validate its suggestions.

331
00:20:53,940 --> 00:20:55,380
You must always review it.

332
00:20:55,740 --> 00:20:59,220
And then especially when you
are working on sensitive logic,

333
00:20:59,580 --> 00:21:00,895
and you should remember that.

334
00:21:01,395 --> 00:21:06,015
If you are using tools or even
local logs, you should be consigned

335
00:21:06,015 --> 00:21:08,015
and mindful of data privacy.

336
00:21:08,155 --> 00:21:13,265
Be mindful of sharing sensitive data,
input like production API, keys, all

337
00:21:13,265 --> 00:21:17,995
this basically your own responsibility
of taking care of data privacy.

338
00:21:18,205 --> 00:21:22,515
So don't just paste in API
keys or internal code basis vs

339
00:21:22,665 --> 00:21:24,345
without understanding the risk.

340
00:21:24,525 --> 00:21:28,095
Take some time to learn how
this LLM works, like what their

341
00:21:28,095 --> 00:21:30,795
code base looks like, what the
community is saying about them.

342
00:21:30,975 --> 00:21:35,075
So this will help you to better
understand how things works as well.

343
00:21:35,315 --> 00:21:39,905
So now that we've gone through the
performance and caution of these

344
00:21:39,935 --> 00:21:43,955
lms, now let's take a look at best
practices for productive AI usage.

345
00:21:45,115 --> 00:21:50,625
So before you jump in and wire LLMs
into everything into your code base,

346
00:21:50,625 --> 00:21:52,575
because it can definitely be exciting.

347
00:21:52,855 --> 00:21:57,165
Here I feel best practices
to get the most out of ai,

348
00:21:57,375 --> 00:21:59,115
especially as a software engineer.

349
00:21:59,115 --> 00:22:01,820
I. Which ones to run things locally.

350
00:22:02,040 --> 00:22:06,710
But first I would recommend that you start
with re bottlenecks in your workflow.

351
00:22:06,990 --> 00:22:10,230
Don't just use AI just because it is cool.

352
00:22:10,450 --> 00:22:15,270
Identify the places the gap that
AI can fill in your workflow.

353
00:22:15,550 --> 00:22:19,630
Use it where you are wasting the
most time, like maybe every time.

354
00:22:19,800 --> 00:22:24,070
You want to set a new project, you
need to set up some bullet plate or

355
00:22:24,070 --> 00:22:28,020
to develop a feature or ui component.

356
00:22:28,020 --> 00:22:33,470
You need to do some repetitive work
see if AI can come in or if it is

357
00:22:33,470 --> 00:22:38,100
something you can optimize yourself
even without using ai, but then identify

358
00:22:38,100 --> 00:22:39,990
where to use AI and where not to.

359
00:22:40,320 --> 00:22:43,110
So one of the best
practices is to basically.

360
00:22:43,830 --> 00:22:48,550
Remember to prompt, thoughtfully
write clear, intentional, prompt.

361
00:22:48,770 --> 00:22:51,950
You are pairing with a machine,
so you have to be specific.

362
00:22:52,220 --> 00:22:54,620
AI shines when they have the right data.

363
00:22:54,830 --> 00:22:58,920
So if they don't have enough data
through your prompt, then they

364
00:22:59,040 --> 00:23:01,390
might not give you an effective.

365
00:23:02,165 --> 00:23:04,485
Results or output that you expected.

366
00:23:04,485 --> 00:23:08,795
You basically get better results when
you give better context, when you

367
00:23:08,795 --> 00:23:14,835
give good context samples clarity,
and basically treating your prompting.

368
00:23:14,845 --> 00:23:15,355
Skip.

369
00:23:15,455 --> 00:23:20,255
This is going to assist you to
make use of this LLM effectively

370
00:23:20,435 --> 00:23:22,515
and also validate everything.

371
00:23:22,515 --> 00:23:23,715
So this is very important.

372
00:23:23,745 --> 00:23:25,305
Always review the output.

373
00:23:25,575 --> 00:23:28,245
AI might be confident and
still be wrong, right?

374
00:23:28,375 --> 00:23:33,080
You just want to ensure that you are also
in the process and not blindly accepting.

375
00:23:33,750 --> 00:23:34,350
The changes.

376
00:23:34,660 --> 00:23:38,600
So always read and test
before trusting the changes.

377
00:23:38,990 --> 00:23:41,180
And now don't share sensitive code.

378
00:23:41,400 --> 00:23:43,110
Be smart about privacy.

379
00:23:43,110 --> 00:23:47,220
We've discussed it earlier as well
in the caution, so you want to

380
00:23:47,220 --> 00:23:48,300
ensure that you're not sharing.

381
00:23:49,010 --> 00:23:54,080
Sensitive data in the L lms because
it can be exploited at some point.

382
00:23:54,080 --> 00:23:57,660
So you just have to basically
be careful with the data that

383
00:23:57,660 --> 00:23:59,190
you are sharing with it as well.

384
00:23:59,530 --> 00:24:01,990
The next one is to basically pick two.

385
00:24:02,585 --> 00:24:03,425
Match your stack.

386
00:24:03,815 --> 00:24:09,105
And you have to think long term because
the base developers are not just using

387
00:24:09,105 --> 00:24:11,025
tools, they're building systems around it.

388
00:24:11,265 --> 00:24:15,625
So you want to build a system that
works for your stack in a very

389
00:24:15,625 --> 00:24:19,375
long time as a Python developer
or as a JavaScript developer.

390
00:24:19,375 --> 00:24:23,775
So you want to ensure that your usage
of AI is not for just short time,

391
00:24:23,775 --> 00:24:26,175
but it is for long-term use as well.

392
00:24:26,225 --> 00:24:28,965
With that to wrap this
up, I will leave you with.

393
00:24:29,065 --> 00:24:34,235
This code, which says that AI is your
turbo charger and not your brain.

394
00:24:34,665 --> 00:24:37,835
This means that AI is not
just a cool tool anymore.

395
00:24:37,895 --> 00:24:42,445
It's fast becoming essential which
is becoming a foundational part of

396
00:24:42,475 --> 00:24:47,805
how than engineers work smarter, ship
faster and right more reliable code.

397
00:24:47,875 --> 00:24:50,615
We already having augmented engineers.

398
00:24:51,050 --> 00:24:57,230
So if you haven't already started using
AI to support every one of these area in

399
00:24:57,230 --> 00:25:02,360
your workflow, even if it's just one, I
think now is a perfect time to experiment

400
00:25:02,360 --> 00:25:04,690
with all of these open source lms.

401
00:25:04,900 --> 00:25:09,880
And the more we understand our AI
fits into our workflow, the more

402
00:25:09,880 --> 00:25:15,270
strategic we can be about boosting
our efficiency not just with tools.

403
00:25:15,535 --> 00:25:16,855
But with intentions.

404
00:25:16,975 --> 00:25:21,735
So try to spend some time to
understand where these LMS can fit

405
00:25:21,735 --> 00:25:25,395
in, especially running it yourself
and tuning it for your own use case.

406
00:25:25,725 --> 00:25:32,420
And then let a AI a. You move from
idea to output faster, and now my

407
00:25:32,420 --> 00:25:39,350
challenge to you is to try just one
open source LLM two this week and

408
00:25:39,350 --> 00:25:41,120
see how it changes your workflow.

409
00:25:41,660 --> 00:25:46,490
Leverage it, think about what it can
solve for you, and then see how you

410
00:25:46,490 --> 00:25:48,830
can integrate this into your workflow.

411
00:25:48,980 --> 00:25:49,400
Okay?

412
00:25:49,520 --> 00:25:51,260
And that's it from me.

413
00:25:51,910 --> 00:25:54,520
Thank you so much for your
time and intention and for

414
00:25:54,520 --> 00:25:56,380
staying to the end of this talk.

415
00:25:56,620 --> 00:26:01,160
I hope this session spark a few ideas
and gave you something practical

416
00:26:01,160 --> 00:26:02,840
to take back into your workflow.

417
00:26:03,140 --> 00:26:05,420
I'm happy to chat more after this.

418
00:26:05,470 --> 00:26:10,540
Feel free to say hi or connect with
me on LinkedIn on X. You can check

419
00:26:10,540 --> 00:26:14,230
out my YouTube or check out my
blog and leave me a note as well.

420
00:26:14,590 --> 00:26:17,830
Until then, stay curious
and keep building smarter.

421
00:26:18,040 --> 00:26:18,880
Bye-bye for now.

