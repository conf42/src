1
00:00:00,070 --> 00:00:00,720
Hey everyone.

2
00:00:00,720 --> 00:00:04,330
Thanks for participating of
this conference to DevSecOps.

3
00:00:04,805 --> 00:00:07,545
2024 from, confi 42.

4
00:00:07,925 --> 00:00:11,295
And today I'm going to talk a
little bit about the improvement of,

5
00:00:11,684 --> 00:00:15,174
DevOps workflows with generative AA.

6
00:00:15,215 --> 00:00:16,474
So a little bit about me.

7
00:00:16,625 --> 00:00:22,215
I am Tulio Arruda, AI Impact Lead at
GFT Technologies, leading a global

8
00:00:22,224 --> 00:00:26,394
product, focused in a developer
productivity using generative AA.

9
00:00:26,395 --> 00:00:33,694
I am an 18 years Microsoft MVP
focused on DevOps areas, talking

10
00:00:33,715 --> 00:00:38,544
about Azure DevOps, talking about
GitHub, Kubernetes, productivity,

11
00:00:38,545 --> 00:00:40,554
career, and other contents like that.

12
00:00:41,144 --> 00:00:47,355
I'm a part of the GitHub Start Program
too, and I'm the first one from Brazil.

13
00:00:47,800 --> 00:00:52,849
And I'm more recently, I'm a part of the
Docker captain program as well, okay.

14
00:00:53,349 --> 00:00:55,309
I'm a speaker in technical
conference like that.

15
00:00:55,399 --> 00:01:00,569
I'm a YouTuber about DevOps, about career,
about productivity, about JNA, okay.

16
00:01:00,810 --> 00:01:03,810
you can find here the link
for my YouTube channel.

17
00:01:04,265 --> 00:01:05,205
Youtube.

18
00:01:05,205 --> 00:01:07,035
com slash at Julia Arruda.

19
00:01:07,255 --> 00:01:10,505
You can find here my
LinkedIn as well and my mail.

20
00:01:10,745 --> 00:01:14,595
If you need to talk about some content
about this presentation or about

21
00:01:14,595 --> 00:01:16,205
something else about my contents.

22
00:01:16,205 --> 00:01:16,515
Okay.

23
00:01:17,015 --> 00:01:21,325
So to start this talk, I think
that's an important point that

24
00:01:21,695 --> 00:01:27,739
we can explain our, your define
here is what is the generative AA?

25
00:01:28,090 --> 00:01:33,430
Basically, this is an approach
that you can use to generate a

26
00:01:33,430 --> 00:01:40,050
new content, such as tests, such a
text, images, music, or in our case,

27
00:01:40,060 --> 00:01:44,480
source codes, code documentations
or, unit testing, for example.

28
00:01:44,710 --> 00:01:45,870
I'm talking that it's an.

29
00:01:46,370 --> 00:01:53,090
Because we already have a lot of
contents and materials and usable, AI

30
00:01:53,330 --> 00:02:00,859
tools, AI, frameworks, AI algorithms
to, to provide us, many different tasks.

31
00:02:00,899 --> 00:02:06,349
And we, already using, artificial
intelligence for many years, for different

32
00:02:06,359 --> 00:02:11,749
tasks is like a classification information
or training, to support us to providing,

33
00:02:11,750 --> 00:02:16,010
Data classification to provide us,
tools like a chat, chat bots as well.

34
00:02:16,880 --> 00:02:18,020
We can do.

35
00:02:18,525 --> 00:02:23,335
A lot of things with artificial
intelligence from years ago, but, the

36
00:02:23,335 --> 00:02:29,955
general TVA provide this, easier way to
interact with the artificial intelligence

37
00:02:30,025 --> 00:02:37,094
at, before the general TVA to work with
artificial intelligence was, very hard

38
00:02:37,164 --> 00:02:40,325
and complex to do because we need to know.

39
00:02:40,815 --> 00:02:46,615
too much about the complex algorithms,
about data classifications, about

40
00:02:47,185 --> 00:02:53,005
we need to have a, so many hard
skills to work with, to work

41
00:02:53,005 --> 00:02:54,255
with artificial intelligence.

42
00:02:54,405 --> 00:03:00,595
But with gender TVA, all of us can
interact and use the artificial

43
00:03:00,695 --> 00:03:03,235
intelligence, the to transform it.

44
00:03:03,635 --> 00:03:06,865
The scenario with, the
easy way to interact.

45
00:03:06,905 --> 00:03:11,105
Basically, I can ask something
and generate TVA will be answer

46
00:03:11,605 --> 00:03:13,875
to generate a good answer to me.

47
00:03:14,615 --> 00:03:17,355
Basically, this new
approach changed everything.

48
00:03:17,355 --> 00:03:23,075
It's not only for software
development life cycle, but for all

49
00:03:23,135 --> 00:03:25,805
areas, that you can imagine here.

50
00:03:26,075 --> 00:03:26,395
Okay.

51
00:03:27,205 --> 00:03:30,325
And to work in with, this general TVA.

52
00:03:30,660 --> 00:03:37,130
A new thing appeared that it's a prompt
engineering to what is this properly?

53
00:03:37,310 --> 00:03:42,480
Basically, this is an art of
crafting effective instruction to

54
00:03:42,480 --> 00:03:46,180
get best response from AA models.

55
00:03:46,590 --> 00:03:47,600
I'm talking here.

56
00:03:47,600 --> 00:03:54,410
That's an art because we don't
have, exactly point or, exactly,

57
00:03:54,960 --> 00:03:59,540
exactly tutorial about how can
you create your best problem.

58
00:04:00,040 --> 00:04:01,360
We have techniques.

59
00:04:01,640 --> 00:04:03,320
We have a lot of techniques of that.

60
00:04:03,320 --> 00:04:09,160
But, imagine that if I tell you to
create a new prompting, for example,

61
00:04:09,660 --> 00:04:15,210
answer to me about, the vulnerability
in the code and show me the SQL

62
00:04:15,710 --> 00:04:18,919
injection or other points in the code.

63
00:04:19,350 --> 00:04:23,190
You probably have one specific result.

64
00:04:23,260 --> 00:04:27,790
And if I try to do the same,
the result will be so different,

65
00:04:27,800 --> 00:04:29,020
will be big different.

66
00:04:29,500 --> 00:04:33,360
Basically, the prompt engineering
is an art because, you need to

67
00:04:33,360 --> 00:04:36,890
improve your prompt to create
your prompt with your own ideas.

68
00:04:37,290 --> 00:04:40,500
I cannot tell you using
this specific word.

69
00:04:40,900 --> 00:04:46,920
Using this, using that, you need to try
to create something, to imagine, the

70
00:04:46,920 --> 00:04:51,940
results to test and test again, improve
and improve it again, because it's not a

71
00:04:52,660 --> 00:04:55,130
fixed point, about the creation of this.

72
00:04:55,420 --> 00:04:59,100
If you change one thing, one small
thing, if you include a comma in

73
00:04:59,100 --> 00:05:04,110
your prompt, your answer can be
changed, entirely changed, okay?

74
00:05:04,610 --> 00:05:06,620
Basically, you need to think
about that, to study about that.

75
00:05:06,650 --> 00:05:08,300
We have a lot of techniques.

76
00:05:08,300 --> 00:05:11,210
We have a different kind of
promptings like a chain of

77
00:05:11,210 --> 00:05:13,830
thoughts, or one shot promptings.

78
00:05:13,870 --> 00:05:18,560
We have a different kind of
this, but, the creation of this

79
00:05:18,570 --> 00:05:21,440
prompt is not a exacting point.

80
00:05:21,770 --> 00:05:24,330
It's a, basically an art to creating this.

81
00:05:24,830 --> 00:05:28,530
And, we can see here the
different of these prompts.

82
00:05:28,530 --> 00:05:35,810
I put this in a PPT, but I can show
you directly in, in my VS code.

83
00:05:35,810 --> 00:05:36,940
Let me open here.

84
00:05:37,590 --> 00:05:43,010
For example, let me try my first
prompting that I'm using, in this demo,

85
00:05:43,240 --> 00:05:48,880
basically I'm requesting for GitHub co
pilot, that building an application to

86
00:05:48,880 --> 00:05:54,290
display electrical vehicle, vehicle data
and I'm request to give some options

87
00:05:54,600 --> 00:05:56,650
for how can I structure this app?

88
00:05:57,400 --> 00:06:01,710
Okay, I will send this for copilot
and I will be, I will be received

89
00:06:01,720 --> 00:06:04,040
from this a good information.

90
00:06:04,140 --> 00:06:08,980
I will be receiving here, different
options about, what I can do this,

91
00:06:08,990 --> 00:06:11,680
for example, an MVC, architecture.

92
00:06:12,445 --> 00:06:18,854
NMVVM, Microservices Architecture,
Component Based Architecture, Serverless

93
00:06:18,855 --> 00:06:21,565
Architecture, Monolithic Architecture.

94
00:06:22,065 --> 00:06:24,825
And here I have one example.

95
00:06:25,235 --> 00:06:26,165
It's a good result.

96
00:06:26,255 --> 00:06:31,275
Yes, but, it's not properly that I
need because I have a lot of options

97
00:06:31,275 --> 00:06:36,525
here, but imagine that if I provide
more information, more context

98
00:06:36,925 --> 00:06:44,005
for, the co pilot, let me clear
my, shed here and let me using my.

99
00:06:44,955 --> 00:06:49,515
Second version off the same prompting
here in this version off this prompt.

100
00:06:49,595 --> 00:06:50,785
I request the same thing.

101
00:06:50,925 --> 00:06:55,505
I'm building an application to
display electric vehicle data, but

102
00:06:55,585 --> 00:06:57,225
I'm including more information here.

103
00:06:57,235 --> 00:07:01,135
For example, I went to use
express and typescript.

104
00:07:01,605 --> 00:07:05,115
Give me some options for
how to structure this app.

105
00:07:05,545 --> 00:07:10,945
I'm informed that's a large scale
project with more than 1000 users online.

106
00:07:11,495 --> 00:07:14,195
For authentication, I'm using
Key Cloak for front end.

107
00:07:14,555 --> 00:07:17,784
we'll be creating TypeScript and the
application will be deployed on Azure

108
00:07:17,785 --> 00:07:19,705
Kubernetes Services, for example.

109
00:07:20,305 --> 00:07:23,225
let me send this for my GitHub Copilot.

110
00:07:24,035 --> 00:07:30,509
And now, we can see that the
information is, a little different.

111
00:07:31,170 --> 00:07:37,080
For example, I have here a project
structure, a key components, information

112
00:07:37,090 --> 00:07:42,080
about key cloak integration, and
for example here, source codes, to

113
00:07:42,080 --> 00:07:48,440
implement my key cloak integration, to
implement my, route for vehicle data.

114
00:07:48,940 --> 00:07:54,100
Basically, I have more detailed, more
examples about what I can do here.

115
00:07:54,350 --> 00:07:58,950
and for example, the container code to
generate my, Kubernetes implementation,

116
00:07:59,940 --> 00:08:05,450
basically the point here is, if you
provide more information, more details

117
00:08:05,470 --> 00:08:10,830
about, your request, if you provide more
context or how many that they use, you

118
00:08:10,860 --> 00:08:12,860
provide in these, you will be received.

119
00:08:13,290 --> 00:08:14,440
best information.

120
00:08:14,940 --> 00:08:15,530
as possible.

121
00:08:16,080 --> 00:08:20,430
all the time when you need to use,
generate two, like a chat, TPT,

122
00:08:20,640 --> 00:08:23,610
Google Gemini, or get hub copilot.

123
00:08:23,610 --> 00:08:28,490
In this case, the important point
is providing more context, be

124
00:08:28,490 --> 00:08:33,925
clear about your request to prove
to receive the good Answers.

125
00:08:34,165 --> 00:08:40,655
Basically, good things in the prompting,
good things out in the answer.

126
00:08:40,775 --> 00:08:41,115
Okay.

127
00:08:41,235 --> 00:08:44,465
Basically, is that what happened here?

128
00:08:44,765 --> 00:08:49,055
And it's basically what happened
in all tools that you are using.

129
00:08:49,145 --> 00:08:51,165
All General TVA tools that you are using.

130
00:08:51,255 --> 00:08:55,195
Or in the tool, GNA tool that
you can develop in the future.

131
00:08:55,635 --> 00:08:57,045
Basically, the idea is the same.

132
00:08:57,735 --> 00:08:58,915
Context is important.

133
00:08:58,965 --> 00:09:05,385
The prompt is important and how many
details you provide is very important.

134
00:09:05,555 --> 00:09:05,905
Okay?

135
00:09:06,405 --> 00:09:11,435
And Only to understand how this
prompting, works on GitHub Copilot,

136
00:09:11,435 --> 00:09:13,645
but not only on GitHub Copilot.

137
00:09:14,175 --> 00:09:18,585
The idea, of this will be the
same, in other JNAA tools like

138
00:09:18,585 --> 00:09:23,815
a JDPT or in the tool that you
can be developing, using JNAA.

139
00:09:23,835 --> 00:09:27,910
Okay, the structure will be
Something like that, with the

140
00:09:27,920 --> 00:09:29,590
change, the necessary changes.

141
00:09:30,010 --> 00:09:32,890
Like you are using, other
techniques to interact with

142
00:09:32,910 --> 00:09:34,810
GenerateVA, but the core is that.

143
00:09:35,310 --> 00:09:38,770
The user will be making a request
for your tool, in this case

144
00:09:38,770 --> 00:09:43,810
GitHub Copilot, for example, to
create a web server in TypeScript.

145
00:09:44,310 --> 00:09:50,375
The GitHub Copilot will be understanding
this, and Append a system prompting.

146
00:09:50,375 --> 00:09:51,285
What is this?

147
00:09:51,755 --> 00:09:58,225
The idea of the system prompting basically
is a set of rules that you, provide

148
00:09:58,265 --> 00:10:01,295
for your system, for your, GNAA tool.

149
00:10:01,610 --> 00:10:04,750
In this case, for example,
the GitHub CodePilot have, two

150
00:10:04,750 --> 00:10:05,800
lines in the beginning here.

151
00:10:06,040 --> 00:10:10,050
You are a friendly code assistant
and probably have something

152
00:10:10,050 --> 00:10:13,910
like, you need to answer the
question about source code only.

153
00:10:14,210 --> 00:10:18,460
you need to guarantee that you are not
implementing vulnerabilities in the code.

154
00:10:18,870 --> 00:10:24,930
and you need to talk only about the code,
without for, and you do not have answers.

155
00:10:25,455 --> 00:10:31,065
I don't know for polyfix or other
contents without source code development.

156
00:10:31,565 --> 00:10:36,855
using the system tag with this
set of rules, your DNA will be,

157
00:10:37,005 --> 00:10:41,345
Follow these rules to answer
only the necessary information.

158
00:10:41,355 --> 00:10:46,105
For example, if I try to work to ask
about, for copilot, about politics,

159
00:10:46,125 --> 00:10:49,455
for example, to get help copilot to
be answered for me, something like,

160
00:10:49,485 --> 00:10:50,845
I was not able to answer about that.

161
00:10:51,045 --> 00:10:51,375
Okay.

162
00:10:51,485 --> 00:10:53,055
The idea is that of the system.

163
00:10:53,755 --> 00:10:55,555
area in the prompting.

164
00:10:55,695 --> 00:11:00,485
Basically now, I'm sending to GNA
the user section, create a web server

165
00:11:00,485 --> 00:11:05,735
script, and assist an area with the
set of rules from GitHub Compilator

166
00:11:05,735 --> 00:11:07,975
or from ChatPT or from your tool.

167
00:11:08,095 --> 00:11:08,425
Okay?

168
00:11:09,025 --> 00:11:14,290
And I send the both information
for GNA like, GPT 4 or cloudy 3.

169
00:11:14,290 --> 00:11:18,120
5 sonnet or Google Gemini pro.

170
00:11:18,510 --> 00:11:19,300
it's don't matter.

171
00:11:19,510 --> 00:11:23,870
I send this for my GNA and
GNA will be understanding.

172
00:11:23,870 --> 00:11:24,270
Okay.

173
00:11:24,340 --> 00:11:25,290
I have these rules.

174
00:11:25,400 --> 00:11:26,300
I have this answer.

175
00:11:26,580 --> 00:11:28,250
And now, I have this rule.

176
00:11:28,250 --> 00:11:31,270
I read this question and now I
need to answer this question.

177
00:11:31,890 --> 00:11:38,190
Basically now I have new, a new section
called assistant with the answer from GNA.

178
00:11:38,190 --> 00:11:38,204
Okay.

179
00:11:38,565 --> 00:11:42,075
that response for your tool and
your tool response for a user.

180
00:11:42,205 --> 00:11:48,015
Basically, it's that the workflow
about the prompting on GitHub

181
00:11:48,015 --> 00:11:50,145
Compilator and other GNA tool.

182
00:11:50,415 --> 00:11:50,765
Okay.

183
00:11:51,670 --> 00:11:56,961
I'm talking about this, but you
probably, asking for why we use Gene a

184
00:11:57,290 --> 00:12:05,120
in the SDLC, and I have here these four
key points, but we can include other

185
00:12:05,180 --> 00:12:11,880
because we have a lot of benefits to
using, JA in a DevOps workflow, but.

186
00:12:12,605 --> 00:12:16,005
These four key points are the most
important for now for me, okay?

187
00:12:16,575 --> 00:12:22,455
The first one is the enhanced developer
experience because, when I started to work

188
00:12:22,515 --> 00:12:30,085
as a software developer, I learned that
the user experience is the most important

189
00:12:30,095 --> 00:12:33,519
part of software development because
if the user don't like the experience,

190
00:12:33,570 --> 00:12:35,520
about don't like the user experience.

191
00:12:35,560 --> 00:12:38,130
The users will not use
your application anymore.

192
00:12:38,500 --> 00:12:40,430
but yes, it's important.

193
00:12:40,430 --> 00:12:43,870
But the other part is important as well.

194
00:12:44,030 --> 00:12:49,140
The developer part, it's very important
because if the developer have a good

195
00:12:49,300 --> 00:12:54,760
experience in the source code creation,
the product creation, we will have

196
00:12:54,780 --> 00:12:57,215
best results for product creation.

197
00:12:57,665 --> 00:13:02,535
The final user, not only in the user
experience, but we have a good back

198
00:13:02,565 --> 00:13:08,525
end, a good source code, improvement, in
the usability, in the higher viability

199
00:13:08,575 --> 00:13:11,705
of the application, we can have.

200
00:13:12,320 --> 00:13:17,700
a lot of benefits if you're focused
in a developer experience, okay?

201
00:13:18,190 --> 00:13:21,520
GNAA will be solving all points
of the developer experience.

202
00:13:21,560 --> 00:13:27,350
No, it's not the idea, but it's a
interesting point to start in this if

203
00:13:27,350 --> 00:13:32,190
you don't have, a developer experience
implemented in your process yet.

204
00:13:32,280 --> 00:13:38,175
Okay, only about developer experience,
you can have, One, another talk

205
00:13:38,185 --> 00:13:42,615
about that because we have a lot
of contents for this, but for now,

206
00:13:43,035 --> 00:13:49,145
keep in mind that, a GNA can be
support you on this to starting, To

207
00:13:49,145 --> 00:13:50,935
start to improve in this, but why?

208
00:13:50,955 --> 00:13:55,715
Because going to the second point,
it's increased the productivity because

209
00:13:55,735 --> 00:14:02,295
the DNA tools enables the developers
to work more smarter because we have,

210
00:14:02,435 --> 00:14:07,995
for example, GitHub Copilot, a code
assistant directly in my IDE, in this

211
00:14:07,995 --> 00:14:14,750
case, I do not need to go anymore for
forums on the internet or to Google to,

212
00:14:15,000 --> 00:14:16,780
understand how can I solve a problem.

213
00:14:17,190 --> 00:14:22,740
I remember in the past, before
GitHub for Pilot, I spent more time,

214
00:14:23,270 --> 00:14:26,890
looking in the internet, looking in
the forums, how to solve, specific

215
00:14:26,900 --> 00:14:29,940
problems in my source code, in my tasks.

216
00:14:30,340 --> 00:14:34,310
because, some, some errors
happens and I have no idea why.

217
00:14:34,655 --> 00:14:39,845
Or I need to specific implementation
that I have no idea how can I do and I

218
00:14:39,845 --> 00:14:45,255
need to made a lot of researches this
and this spend time, a precious time

219
00:14:45,655 --> 00:14:51,895
that you have, in the projects and now
with GitHub Copilot I can use this to

220
00:14:51,895 --> 00:14:56,695
support me on this part because GitHub
Copilot already suggests, implementation

221
00:14:56,695 --> 00:14:58,615
to me based, in, in what I'm writing.

222
00:14:59,450 --> 00:15:03,920
In my code, for example, if I'm
writing here a switch case, the

223
00:15:03,920 --> 00:15:08,080
GitHub copilot already suggests
me, how can I complete the section?

224
00:15:08,870 --> 00:15:12,780
I can use the copilot to suggest
to me improvements in this code.

225
00:15:13,090 --> 00:15:20,120
Or for example, if I don't remember, I
don't know, how can I do a SQL insert, in

226
00:15:20,120 --> 00:15:27,030
a SQL language on Oracle database, because
I don't use Oracle database so much here.

227
00:15:27,560 --> 00:15:29,140
I don't need to go to Google anymore.

228
00:15:29,260 --> 00:15:33,010
I can only ask for my chatbot in my IDE.

229
00:15:33,210 --> 00:15:38,440
And in a second, I have now an
implementation, an explanation if

230
00:15:38,480 --> 00:15:42,450
necessary, and the implementation
will follow my code standards

231
00:15:42,550 --> 00:15:44,220
that I'm already creating for.

232
00:15:44,230 --> 00:15:46,330
It's a very interesting point.

233
00:15:46,680 --> 00:15:47,080
Okay?

234
00:15:47,580 --> 00:15:50,760
And it's providing, so
many productivity for us.

235
00:15:51,585 --> 00:15:56,555
and going for the 13 point, it's,
providing us, increased learning because

236
00:15:56,555 --> 00:16:01,415
it's supporting me to understanding
more about my projects and not only

237
00:16:01,415 --> 00:16:06,345
about that, but imagine if you are
starting in a new project that you have

238
00:16:06,375 --> 00:16:11,125
no idea what this project does, you
need to see the documentation, right?

239
00:16:11,625 --> 00:16:14,175
Yeah, but we have a point here.

240
00:16:14,885 --> 00:16:18,115
It's very common that projects
don't have documentations, right?

241
00:16:18,625 --> 00:16:22,535
Or if have documentations, the
documentation is very outdated.

242
00:16:23,035 --> 00:16:28,565
And basically you need to check with
other teammates, how this project works,

243
00:16:28,565 --> 00:16:31,525
what this project does, to understand,
to understand what happened here.

244
00:16:31,865 --> 00:16:35,595
And you need to spend time for
other team members for this.

245
00:16:36,095 --> 00:16:41,325
Using Jinner TVAA like GitHub Copilot
or other tools like ChiefTAI Impact that

246
00:16:41,545 --> 00:16:47,415
I'm working for, you can increase this
because we can, for example, generate the

247
00:16:47,415 --> 00:16:52,465
documentation, about the project using
Jinner TVAA, having this documentation

248
00:16:52,475 --> 00:16:56,415
alive day by day, for example, or week
by week, it doesn't matter for now.

249
00:16:57,395 --> 00:17:02,415
You can have a live documentation
properly, or you can use a github

250
00:17:02,415 --> 00:17:05,955
compiler, for example, to explain,
in a real time for you what the

251
00:17:05,955 --> 00:17:10,235
project does, what class does, and
it will be, increase your learning.

252
00:17:10,585 --> 00:17:11,225
But it's.

253
00:17:11,420 --> 00:17:17,210
The increased learning is not only about
your project, but you can, increase

254
00:17:17,210 --> 00:17:20,370
the learning about other points,
about a new language, for example.

255
00:17:20,590 --> 00:17:25,220
If you have no idea what another
language does or how can you start

256
00:17:25,240 --> 00:17:29,660
programming in another language, you can
use IdentityVA to support you on this.

257
00:17:30,160 --> 00:17:33,350
For this specific point,
I have a personal example.

258
00:17:33,950 --> 00:17:35,430
a few months back.

259
00:17:36,090 --> 00:17:40,500
One month ago, I needed to create
here in my project, a new VS

260
00:17:40,510 --> 00:17:42,870
code extension, and TypeScript.

261
00:17:43,370 --> 00:17:46,910
But I never wrote a code
in TypeScript before.

262
00:17:47,510 --> 00:17:51,250
This is, this was my first
contact with, TypeScript.

263
00:17:51,430 --> 00:17:55,730
And then use it, a GitHub copilot
to support in me, to explain.

264
00:17:56,165 --> 00:18:00,305
more about TypeScript to support me
to create a hello world project on

265
00:18:00,335 --> 00:18:04,595
TypeScript to try to understand a little
bit more, to create more complex process.

266
00:18:05,005 --> 00:18:10,795
And I'm using GitHub Copilot to support
me to create this extension as well.

267
00:18:10,985 --> 00:18:18,335
And I have, I had a very good experience
on that because I created this extension.

268
00:18:18,335 --> 00:18:18,885
So there is that.

269
00:18:19,785 --> 00:18:23,475
It's not so complex extension,
but have a good complexity.

270
00:18:24,165 --> 00:18:29,645
but they created this in two days,
a new functional VS code extension.

271
00:18:30,145 --> 00:18:32,555
And I had no knowledge before.

272
00:18:33,265 --> 00:18:39,235
Now, I'm not a specialist on TypeScript,
but I have more knowledge on TypeScript.

273
00:18:39,235 --> 00:18:43,535
I know how can I write a code,
understand the problems, improve the

274
00:18:43,535 --> 00:18:45,955
code, but I had no knowledge before.

275
00:18:46,185 --> 00:18:49,135
I'm using only GitHub
compiled to teaching me.

276
00:18:49,415 --> 00:18:50,345
How can I do that?

277
00:18:50,535 --> 00:18:53,285
Supporting me in the
implementation and in two days.

278
00:18:53,965 --> 00:18:57,185
I implemented a new feature
with the things that I have

279
00:18:57,185 --> 00:18:58,755
no, I had no knowledge before.

280
00:18:59,015 --> 00:19:04,365
It's a very important and it's a very
interesting about the powers of the

281
00:19:04,365 --> 00:19:06,695
GNAA tools into developers productivity.

282
00:19:07,465 --> 00:19:11,575
And going then of these key points,
we can focus on the business

283
00:19:11,585 --> 00:19:17,955
properly because we don't have to,
to looking for, about, common things.

284
00:19:18,505 --> 00:19:23,965
FNL, switch and case or other simple
parts, of the software development

285
00:19:24,485 --> 00:19:28,785
that you cannot remember day by day
and you need to go to Google to search,

286
00:19:28,835 --> 00:19:34,105
about this because This will provide us
this information and you can focus to

287
00:19:34,105 --> 00:19:38,945
improve the application to understand
the business rules to improve the best

288
00:19:39,185 --> 00:19:44,315
ways of this business rules to create
the best implementation for all to have

289
00:19:44,675 --> 00:19:47,105
the best application for our users.

290
00:19:47,195 --> 00:19:51,565
Okay, basically, this is four key
points that you can, understand

291
00:19:51,565 --> 00:19:56,225
about why you can use GNA on SDLC.

292
00:19:56,695 --> 00:19:56,855
Okay.

293
00:19:57,355 --> 00:20:04,605
And how can GNA tools improve the
developer, the DevOps workflows for us?

294
00:20:05,415 --> 00:20:08,145
we can have here a lot of points.

295
00:20:08,195 --> 00:20:12,445
I sat in here, six, The first
one is the code creation.

296
00:20:12,445 --> 00:20:14,585
It's the most common, for all of you.

297
00:20:15,150 --> 00:20:20,960
Probably you are already using
a GitHub Copilot or Amazon Q or

298
00:20:21,020 --> 00:20:23,670
other, code, assistant in your IDE.

299
00:20:24,330 --> 00:20:28,660
And, it's can provide us, as
I mentioned before, a lot of

300
00:20:28,670 --> 00:20:33,740
suggestion, a lot of improvement
support us in so many tasks here.

301
00:20:33,950 --> 00:20:38,870
It's a very interesting and I'm
using this a lot and it's amazing.

302
00:20:39,370 --> 00:20:43,740
The second one is the code
reviewer process because we know

303
00:20:43,760 --> 00:20:46,990
that, the developers was not
providing information for us.

304
00:20:47,030 --> 00:20:50,860
But if you don't know what I'm
talking here, the code review

305
00:20:50,860 --> 00:20:55,100
and process basically is when a
developer made a new change in the

306
00:20:55,100 --> 00:20:57,620
source code and need to request.

307
00:20:58,480 --> 00:21:06,000
That this change is merged in a
production version of the application.

308
00:21:06,200 --> 00:21:11,640
Basically, the developer had a
new task, worked on this, created

309
00:21:11,640 --> 00:21:14,410
a new source code implementation
and needed to merge this code.

310
00:21:14,910 --> 00:21:20,260
The idea of this process is that the
developer creates a good description

311
00:21:20,270 --> 00:21:26,040
about the changes that he made to support
the approval to understand everything.

312
00:21:26,540 --> 00:21:31,040
happened here and decide if this
change can be approved or nothing,

313
00:21:31,300 --> 00:21:36,580
or if this change can be, need to be
improved before this merge happens.

314
00:21:37,060 --> 00:21:44,540
But we know that the developers do
not wrote this explanation properly

315
00:21:44,540 --> 00:21:50,890
in general, or developers wrote no
information or put update the code.

316
00:21:51,350 --> 00:21:51,910
And it's.

317
00:21:52,435 --> 00:21:54,835
Provide no information for us.

318
00:21:55,165 --> 00:21:55,405
Okay?

319
00:21:56,155 --> 00:22:00,265
And following this, the approval
need to go to the source code, read

320
00:22:00,265 --> 00:22:04,305
line by line to understand what's
good happening, or call for the

321
00:22:04,305 --> 00:22:09,075
developer, to request developers
to, to, to, explain the changes.

322
00:22:09,375 --> 00:22:14,505
And it's, spend a lot of time to,
to do this using generative a tools.

323
00:22:15,375 --> 00:22:21,175
like a GFG AI impact, for example, or
GitHub Compilator or other, tool for that.

324
00:22:22,045 --> 00:22:27,675
The GNA is supporting you to understanding
the change and explain everything for you.

325
00:22:28,225 --> 00:22:34,405
Basically, it can generate a good
description with a lot of details.

326
00:22:34,955 --> 00:22:38,015
Details, change by change,
implementation suggestion.

327
00:22:38,385 --> 00:22:40,415
We can do much more.

328
00:22:40,710 --> 00:22:45,230
with GNA2 in a code review,
making the approval job easier.

329
00:22:45,570 --> 00:22:45,840
Okay?

330
00:22:46,340 --> 00:22:48,260
The next one here is documentation.

331
00:22:48,310 --> 00:22:54,330
I already mentioned before because, in
general, the projects have two scenarios.

332
00:22:54,370 --> 00:22:55,430
It's the most common.

333
00:22:55,680 --> 00:23:00,710
Or the project don't have documentation,
and it's a problem that we know that.

334
00:23:01,470 --> 00:23:06,690
because no one have any idea about
what's project does, if the creators,

335
00:23:07,230 --> 00:23:10,900
go out of the company, no one,
will have a knowledge about that.

336
00:23:11,580 --> 00:23:17,850
Or, in general, we have a documentation,
but this documentation was created

337
00:23:17,980 --> 00:23:21,690
in the first version of the
application, the first implementation.

338
00:23:22,180 --> 00:23:23,590
And it's very outdated.

339
00:23:23,590 --> 00:23:24,322
And it's very outdated.

340
00:23:24,822 --> 00:23:28,732
In both case, we basically have
no documentation for the persons.

341
00:23:29,212 --> 00:23:29,502
Yeah.

342
00:23:30,282 --> 00:23:32,992
But using Jenny eight to
you have to impact as well.

343
00:23:33,512 --> 00:23:41,082
you can, Have an alive documentation
because we can use a GNA2 to scan

344
00:23:41,082 --> 00:23:45,572
your source codes automatically,
understanding the source code and

345
00:23:45,572 --> 00:23:47,512
creating a new markdown documentation.

346
00:23:47,542 --> 00:23:52,522
For example, a new PDF documentation or
in another format documentation and, store

347
00:23:52,522 --> 00:23:54,062
this in your documentation repository.

348
00:23:55,047 --> 00:23:58,177
To support your developers to
understand what happened here.

349
00:23:58,567 --> 00:24:01,537
To support your future developers
to understand what happened here.

350
00:24:01,897 --> 00:24:05,137
And, you can use this to generate
documentation change by change.

351
00:24:05,147 --> 00:24:07,957
If the code changes, the
documentation, changes too.

352
00:24:08,247 --> 00:24:10,257
And maintain real life.

353
00:24:10,357 --> 00:24:12,977
it's a great, improvement in our process.

354
00:24:13,477 --> 00:24:16,197
Another point that we can do
here is a test generation.

355
00:24:16,207 --> 00:24:20,197
For example, we can use a unit
test to support us in a unit

356
00:24:20,257 --> 00:24:24,567
test creation following your
standards, your company standards.

357
00:24:24,847 --> 00:24:28,537
you can use this to, to
generate functional testing, for

358
00:24:28,537 --> 00:24:30,237
example, using natural language.

359
00:24:30,527 --> 00:24:34,837
in general, you need to create a
functional test in mapping, HTML fields.

360
00:24:35,157 --> 00:24:40,437
Pass some information, making this process
a little bit difficult because if, the

361
00:24:40,437 --> 00:24:44,137
front end developers change everything,
change a component, your test will be

362
00:24:44,147 --> 00:24:49,737
broken, but you can use here, tools with
generative VA to write your tests in

363
00:24:49,737 --> 00:24:55,067
natural language, for example, requesting
only to make a login in a specific page,

364
00:24:55,287 --> 00:24:59,487
with specific username and password
and the DNA to will be identifying it.

365
00:25:00,352 --> 00:25:05,562
For example, your fields and components on
your screen, and you don't need to care,

366
00:25:05,902 --> 00:25:11,212
with how the field is called, is named
for, because it will be identified this

367
00:25:11,212 --> 00:25:13,412
for you and create this automatically.

368
00:25:13,912 --> 00:25:18,062
The other point that, I can mention
here is the code correction because we

369
00:25:18,062 --> 00:25:21,362
can use to understanding, what's wrong.

370
00:25:21,792 --> 00:25:26,852
With your source code or vulnerability
in your source code or bugs in your

371
00:25:26,852 --> 00:25:32,512
source code and request for GNI to
support us to improve, to correct, this

372
00:25:32,512 --> 00:25:38,532
implementation and we can do manually,
with chatbot tools or automatically

373
00:25:38,812 --> 00:25:44,112
with, batch tools like a GitHub code,
correct, GFTI impact code fixer as well.

374
00:25:44,612 --> 00:25:47,062
But we can do much more on this.

375
00:25:47,092 --> 00:25:52,432
I put these only five points here,
but you can, improve in this to

376
00:25:52,432 --> 00:25:57,022
creating, to support your creation,
DevOps workflows properly to support

377
00:25:57,022 --> 00:26:01,022
you to create a Kubernetes, scripts
properly, for example, or supporting

378
00:26:01,022 --> 00:26:03,182
you in a modernization process.

379
00:26:03,707 --> 00:26:09,087
For example, for, from an ODS language
for a newest one, from, I don't

380
00:26:09,087 --> 00:26:17,097
know, from CoWolf to Java or to Java
8 to Java 21 for, from C sharp 3.

381
00:26:17,097 --> 00:26:22,377
5 to C sharp 8, for example, you
can use this for a lot of tasks.

382
00:26:22,377 --> 00:26:26,827
And day by day, new tools
and new ideas, is appearing.

383
00:26:27,382 --> 00:26:30,242
to support us on this, improvements.

384
00:26:30,272 --> 00:26:32,142
And it's very interesting.

385
00:26:32,142 --> 00:26:34,062
If you're very amazing for us.

386
00:26:34,562 --> 00:26:38,312
And today I'm using this two tools.

387
00:26:38,342 --> 00:26:44,027
The first one It's the GitHub Copilot,
in general I'm using GitHub Copilot

388
00:26:44,037 --> 00:26:50,367
to support my things, to write code,
the VS Code extension and here with

389
00:26:50,377 --> 00:26:55,487
the chatbot experience, but I'm using
the other parts of the GitHub Copilot

390
00:26:55,667 --> 00:27:00,957
because GitHub Copilot today have So
many implementations like, another

391
00:27:00,957 --> 00:27:06,397
one that I like to like them what too
much is, GitHub co pilot to workspace.

392
00:27:06,407 --> 00:27:08,607
It's a very interesting implementation.

393
00:27:09,107 --> 00:27:12,247
And the next one that I'm
using is the GFTI impact.

394
00:27:12,297 --> 00:27:14,377
I'm working for in this tool.

395
00:27:14,377 --> 00:27:19,217
I'm, I'm one of the creators
of, this tool on GFTI and.

396
00:27:19,522 --> 00:27:25,242
The focus here is improve the software
development life cycle with generative

397
00:27:25,242 --> 00:27:30,882
VA focused on productivity again,
integrating this in a pipeline if, if

398
00:27:30,882 --> 00:27:36,462
it's possible, but have a user experience
to support other tasks like a user

399
00:27:36,462 --> 00:27:41,542
story creation, documentation creation,
create a unit testing, reviewing,

400
00:27:41,832 --> 00:27:43,602
code review and code correction test.

401
00:27:43,602 --> 00:27:47,622
We have so many tasks here
and I'd like to show a little

402
00:27:47,622 --> 00:27:49,437
bit about Both of them today.

403
00:27:49,767 --> 00:27:50,127
Okay.

404
00:27:50,557 --> 00:27:55,907
To support you to understand how
can GNA, can be supporting us in a

405
00:27:55,917 --> 00:27:59,767
software development life cycle in
a develop, devops workflows process.

406
00:28:00,067 --> 00:28:00,407
Okay.

407
00:28:00,907 --> 00:28:02,337
I have here two demos.

408
00:28:02,597 --> 00:28:09,947
The first one, it's more simple, because
it will be executed directly in my IDE.

409
00:28:10,627 --> 00:28:10,917
Okay.

410
00:28:11,417 --> 00:28:13,217
And what I will be do here.

411
00:28:14,022 --> 00:28:18,042
Basically, I received here this
scenario, I'm working in a new project

412
00:28:18,042 --> 00:28:22,152
that I have no much information
and I need to solve a vulnerability

413
00:28:22,262 --> 00:28:27,982
reported, by my SAS tool, document
the code and create, a unit test here.

414
00:28:28,422 --> 00:28:28,782
Okay.

415
00:28:29,282 --> 00:28:32,562
Basically, I received this
information from my SAS tool

416
00:28:32,562 --> 00:28:35,272
that I have a SQL injection.

417
00:28:35,842 --> 00:28:36,852
What I can do here.

418
00:28:36,852 --> 00:28:39,932
Let me open my, My VS
code here in this project.

419
00:28:40,002 --> 00:28:41,122
Let me check only.

420
00:28:41,252 --> 00:28:43,862
I'm still connected on my

421
00:28:44,362 --> 00:28:44,862
okay.

422
00:28:45,442 --> 00:28:47,062
I have connection with my JFJ.

423
00:28:47,062 --> 00:28:47,482
Impact.

424
00:28:47,862 --> 00:28:55,682
And here, I'm have my GitHub copilot
XC assistant here and the file with

425
00:28:55,722 --> 00:28:58,112
the vulnerability mentioned in my PPT.

426
00:28:58,122 --> 00:29:00,042
For example, here, if I'm back

427
00:29:00,542 --> 00:29:05,202
If I'm back here on my PPT, I have
here the information is the user.

428
00:29:05,462 --> 00:29:10,312
java and I have here this SQL injection.

429
00:29:10,812 --> 00:29:12,132
And what I can do here?

430
00:29:12,462 --> 00:29:18,752
Basically, I can request to GitHub
Copilot to explain me the code.

431
00:29:19,252 --> 00:29:25,012
And the GitHub Copilot is explaining
about this class, what class does.

432
00:29:25,512 --> 00:29:28,362
And supporting me to
understanding this easier.

433
00:29:28,722 --> 00:29:34,462
But I need to solve this SQL
injection and what I can do here.

434
00:29:35,042 --> 00:29:41,592
I will be request, for example, for
my github compiler to refactor this

435
00:29:41,622 --> 00:29:46,662
code and correct SQL injection.

436
00:29:47,162 --> 00:29:48,522
Let me see what happened here.

437
00:29:49,292 --> 00:29:54,942
Now, The GitHub Copilot will be
understanding here my request and

438
00:29:55,312 --> 00:30:00,752
basically it's generating to me a
refactored code and if you see here

439
00:30:01,512 --> 00:30:03,862
the SQL injection solved it for me.

440
00:30:04,362 --> 00:30:10,752
And this is explaining for us what the
change was made here, basically replaced

441
00:30:10,782 --> 00:30:16,772
the statement with prepared statement,
added a final here, moved the return.

442
00:30:17,377 --> 00:30:22,357
And I can copy this, for
example, and based on this to

443
00:30:22,357 --> 00:30:24,727
have a new, implementation.

444
00:30:25,207 --> 00:30:29,287
And I have here a correct
version of, the source code.

445
00:30:29,637 --> 00:30:33,707
an interesting point that we can
do here is using a different LLMs.

446
00:30:34,047 --> 00:30:36,247
I have here Cloud 3.

447
00:30:36,248 --> 00:30:37,737
5 Sonnet 01.

448
00:30:38,137 --> 00:30:43,337
Mini 01 preview as well, and we
can use all of them to generate

449
00:30:43,417 --> 00:30:45,397
our answers if it's necessary.

450
00:30:45,397 --> 00:30:50,167
But I already generate here with
Copilot, my new implementation.

451
00:30:50,667 --> 00:30:56,847
And now my request is generate
documentation and generate unit tests.

452
00:30:56,927 --> 00:30:58,047
How can I do that?

453
00:30:58,752 --> 00:31:03,622
Basically, if I'm going here in my
file explorer now, I already have

454
00:31:04,112 --> 00:31:10,592
my GFT AI Impact extension installed
here and I can click in the file and

455
00:31:10,592 --> 00:31:12,832
request to create the documentation.

456
00:31:13,332 --> 00:31:18,162
And here I can choose the prompts because
I have a different prompts on AI Impact.

457
00:31:18,163 --> 00:31:21,923
I need to choose the source code
language to have the standards.

458
00:31:22,508 --> 00:31:26,118
and the LLM that my GFTI
Impact is supporting today.

459
00:31:26,428 --> 00:31:31,533
We support the three principal
clods with AWS with clod 3.

460
00:31:31,533 --> 00:31:34,248
5, Sonnet, GMI and GPT 4.

461
00:31:34,298 --> 00:31:34,628
0.

462
00:31:34,928 --> 00:31:37,668
Okay, I will be using AWS clod.

463
00:31:38,168 --> 00:31:41,228
And we need to wait now,
the documentation process.

464
00:31:41,228 --> 00:31:46,678
But, for now, the AI Impact
is understanding the codes And

465
00:31:46,748 --> 00:31:51,878
applying a lot of, convention and
standards to generate a very good

466
00:31:51,878 --> 00:31:53,658
and detailed documentation for us.

467
00:31:54,178 --> 00:31:58,398
Okay, and the process generate a new
Markdown document for us like that.

468
00:31:59,128 --> 00:32:03,938
I will be open my Markdown
preview to see better here.

469
00:32:04,528 --> 00:32:10,998
And, okay, now I have here a documentation
with overview, process flow, insights,

470
00:32:11,048 --> 00:32:13,048
dependencies, data manipulation.

471
00:32:13,788 --> 00:32:18,088
We have here important information
about this person, but yes, we

472
00:32:18,088 --> 00:32:19,738
already have a new document here.

473
00:32:20,238 --> 00:32:22,958
Now to finish, you need
to create a unit tests.

474
00:32:23,228 --> 00:32:27,548
Let me right click again, create
unit tests for this class.

475
00:32:28,438 --> 00:32:30,878
And again, I need to choose my prompting.

476
00:32:31,658 --> 00:32:36,218
I need to choose my frameworks,
the source code language, the LLM.

477
00:32:36,718 --> 00:32:42,148
And here, The impact is asking to me if
I'd like to include existing test file.

478
00:32:42,508 --> 00:32:47,588
For example, if I try to create
a new test for a new class.

479
00:32:48,188 --> 00:32:55,598
Like that, I cannot include, I do not
include, existing test files, but if I

480
00:32:55,598 --> 00:33:01,618
already have unit tests for this, I can
put yes and point in this file to use

481
00:33:01,698 --> 00:33:07,788
extra context and the impact will be,
improve or correct the unit test for us.

482
00:33:07,908 --> 00:33:08,238
Okay.

483
00:33:08,738 --> 00:33:13,388
Basically now the process is working
for and the impact to be understanding

484
00:33:13,438 --> 00:33:15,008
the source code class for you.

485
00:33:15,598 --> 00:33:20,598
And, we are applying internally a
lot of standards, best practices

486
00:33:21,088 --> 00:33:22,728
to create the unit test for us.

487
00:33:23,038 --> 00:33:28,228
and we already have here the unit
tests we have here, the imports,

488
00:33:28,398 --> 00:33:33,268
the user test class with mock you
and a lot of unit tests to support

489
00:33:33,708 --> 00:33:35,818
this current implementation for us.

490
00:33:35,938 --> 00:33:36,298
Okay.

491
00:33:36,798 --> 00:33:41,448
Now, following this idea, we already
have the demo one implemented.

492
00:33:41,958 --> 00:33:42,348
Great!

493
00:33:42,788 --> 00:33:48,418
We used GitHub Copilot and AI
Impact inside the developer IDE to

494
00:33:48,438 --> 00:33:53,268
increase the productivity, explain
the project, support the code, in

495
00:33:53,268 --> 00:33:57,838
the code correction, documenting
the code, and creating a unit test.

496
00:33:57,838 --> 00:33:58,204
Okay?

497
00:33:58,204 --> 00:34:02,127
Let me open the presentation module.

498
00:34:02,127 --> 00:34:02,987
It's changed.

499
00:34:03,057 --> 00:34:03,407
Bye.

500
00:34:03,907 --> 00:34:09,547
And in the second demo, we have a
lot of, a little different process.

501
00:34:09,967 --> 00:34:17,117
I need to hear, the same, scenario,
but we need to run this directly in

502
00:34:17,187 --> 00:34:23,227
a pull request because the idea of
this, let me copy the corrected file.

503
00:34:23,937 --> 00:34:29,307
The idea of this project is
this process now is, Do the same

504
00:34:29,307 --> 00:34:30,847
job that the developer does.

505
00:34:31,277 --> 00:34:35,497
I will be creating a new change, submit
this change and waiting for approval.

506
00:34:36,107 --> 00:34:40,987
And basically I will be open my source
code file here in my repository.

507
00:34:41,487 --> 00:34:42,317
I'll be open the user.

508
00:34:42,507 --> 00:34:49,057
java, edit this file, and I will be
paste my corrected version of the code.

509
00:34:49,557 --> 00:34:51,477
Commit this, create a new branch.

510
00:34:51,477 --> 00:34:52,437
Okay.

511
00:34:52,937 --> 00:34:55,647
and create a new, pull request here.

512
00:34:56,147 --> 00:35:02,027
When I create the pull request, I'm using
here a GitHub in this case, but you can

513
00:35:02,027 --> 00:35:06,397
use Bitbucket, your other DevOps tool.

514
00:35:06,457 --> 00:35:07,417
It's not important.

515
00:35:07,917 --> 00:35:13,167
It is important that this DevOps tool
can be triggered a new pipeline when

516
00:35:13,167 --> 00:35:15,887
this pull request is created like that.

517
00:35:16,847 --> 00:35:22,647
Basically, if you see here, The
GitHub, actions, was triggered a

518
00:35:22,647 --> 00:35:28,027
new pipeline and this pipeline,
is triggering the GFTI impact.

519
00:35:28,147 --> 00:35:34,147
And what will be happening here,
basically, I'm creating a smart

520
00:35:34,317 --> 00:35:39,277
request process that I'm calling,
internally because I'm using

521
00:35:39,287 --> 00:35:41,547
different tools from AI impact.

522
00:35:41,548 --> 00:35:41,562
Okay.

523
00:35:42,152 --> 00:35:46,332
To support the pull request,
to improve the pull request.

524
00:35:46,572 --> 00:35:52,282
For example, we saw in the IDE that I
can create a documentation and create

525
00:35:52,752 --> 00:35:56,472
a unit test with, the, with the IMPACT.

526
00:35:56,522 --> 00:36:01,252
And I mentioned for you before that
you can use JNA to analyze, the

527
00:36:01,252 --> 00:36:02,892
changes to generate a code review.

528
00:36:03,112 --> 00:36:07,572
What I'm doing here, when the developer
create a new change, submit a new change,

529
00:36:07,972 --> 00:36:14,702
We know that, the documentation will be
outdated and in general, the developers

530
00:36:14,812 --> 00:36:20,062
do not create Unity tests properly or
forget to create a part of the Unity

531
00:36:20,222 --> 00:36:24,252
test, do not create implementation,
all implementation as possible.

532
00:36:24,752 --> 00:36:31,672
In this smart pull request, included, in
my action process, a calling from, for

533
00:36:31,732 --> 00:36:34,592
AI impact to run the Unity test creation.

534
00:36:34,977 --> 00:36:39,887
To create a unit test for this, a document
creation to create a new documentation.

535
00:36:39,907 --> 00:36:42,607
And after that, review this pull request.

536
00:36:42,777 --> 00:36:49,007
If you can see here, I already have this
test generated, documents generated.

537
00:36:49,527 --> 00:36:55,367
And if I click on files, change it, I
can see here in the first file, the user.

538
00:36:55,507 --> 00:36:57,567
java, the file that I changed.

539
00:36:58,087 --> 00:36:58,427
Okay.

540
00:36:58,467 --> 00:37:02,047
My chains, have here,
the user test dot Java.

541
00:37:02,717 --> 00:37:08,707
The red section is the existing tests
and the red is to change its tests

542
00:37:08,747 --> 00:37:10,957
because I changed the implementation.

543
00:37:11,087 --> 00:37:15,077
The impact understood that I
need to change the test class and

544
00:37:15,077 --> 00:37:17,027
you can see here what happens.

545
00:37:17,397 --> 00:37:19,287
some tests was removed.

546
00:37:19,957 --> 00:37:22,587
Other tests was be included or improved.

547
00:37:23,187 --> 00:37:23,587
Okay.

548
00:37:23,588 --> 00:37:24,897
Okay.

549
00:37:24,897 --> 00:37:25,377
And.

550
00:37:26,102 --> 00:37:31,352
In the final of that, I included
a new documentation in Markdown.

551
00:37:31,502 --> 00:37:35,032
Let me open in a display rich
GIF, it's be easier to see.

552
00:37:35,462 --> 00:37:40,082
But I have here a new documentation
with an overview, process flow, like

553
00:37:40,082 --> 00:37:46,532
we saw in TVS Code IDE, with insights,
dependencies, data manipulation, and here

554
00:37:46,842 --> 00:37:50,362
a vulnerability section, because we have a
lot of vulnerabilities in the source code.

555
00:37:50,552 --> 00:37:52,592
I do not solve all of them.

556
00:37:53,052 --> 00:37:55,452
I can do, but I didn't this.

557
00:37:56,227 --> 00:37:59,397
But, I can see here password
storage, exception handling,

558
00:37:59,727 --> 00:38:01,267
providing new information about that.

559
00:38:01,757 --> 00:38:07,677
And if I'm back in here to my
pull request description, I have

560
00:38:07,677 --> 00:38:13,977
now the revision created by, GFTI
Impact Bots, providing us a general

561
00:38:14,027 --> 00:38:16,277
description about the changes here.

562
00:38:16,972 --> 00:38:20,122
For example, to, this implementation,
improve the security and

563
00:38:20,122 --> 00:38:22,472
code quality include changes.

564
00:38:22,762 --> 00:38:28,012
And here I have summary file by
file explaining the changes in

565
00:38:28,012 --> 00:38:29,852
the class that I manually does.

566
00:38:30,352 --> 00:38:32,142
And in the usertest.

567
00:38:32,892 --> 00:38:35,402
java that AI impact does.

568
00:38:35,902 --> 00:38:36,612
And user.

569
00:38:36,812 --> 00:38:37,072
java.

570
00:38:37,072 --> 00:38:39,552
md that is documented, included.

571
00:38:40,052 --> 00:38:41,722
AI impact in the process.

572
00:38:42,222 --> 00:38:47,212
here we have recommendations for this
pull request related with this change.

573
00:38:47,262 --> 00:38:47,622
Okay.

574
00:38:47,832 --> 00:38:49,552
It's not a generic recommendation.

575
00:38:49,562 --> 00:38:51,002
It's a specific recommendation.

576
00:38:51,802 --> 00:38:55,862
And we have here explanation of
vulnerabilities if necessary.

577
00:38:56,052 --> 00:38:56,382
Okay.

578
00:38:56,382 --> 00:38:58,222
With examples, if necessary.

579
00:38:58,223 --> 00:38:58,695
Okay.

580
00:38:58,695 --> 00:39:06,767
Basically we are using the generative
AI to improve Our process to, improve

581
00:39:06,857 --> 00:39:10,897
our productivity day by day here
to improve the developer experience

582
00:39:10,897 --> 00:39:17,167
because, now, I can, support developers
to do the task is more easier.

583
00:39:17,287 --> 00:39:21,627
For example, with the reviewing
processing, supporting the description

584
00:39:21,627 --> 00:39:26,937
generation with a lot of details to
support the best creation automatically

585
00:39:26,967 --> 00:39:32,517
to create documentation automatically,
or using the ID to creating this

586
00:39:32,517 --> 00:39:38,667
directly in your, developer environment,
we can do a lot of different tasks

587
00:39:38,677 --> 00:39:44,307
in a different places here, but It's
provide us so many productivity here.

588
00:39:44,697 --> 00:39:48,907
I'm using this both to get hub
copilot and AI impact in my days.

589
00:39:48,907 --> 00:39:51,007
And it's very interesting to me.

590
00:39:51,297 --> 00:39:52,937
I'm getting a lot of productivity.

591
00:39:53,047 --> 00:39:58,617
I was talking with my boss recently
that, I'm using a lot the GNA tools

592
00:39:58,617 --> 00:40:02,947
like a GitHub copilot and Microsoft
probably is boring with me because I

593
00:40:02,987 --> 00:40:04,912
spent more money, than a GitHub copilot.

594
00:40:05,312 --> 00:40:09,102
Then the license provided in general
for GitHub code, but because I use

595
00:40:09,102 --> 00:40:13,542
it really a lot, Again, a lot of
productivity using this JNA tools.

596
00:40:13,662 --> 00:40:13,982
Okay?

597
00:40:14,482 --> 00:40:16,142
Thanks for participating for this talk.

598
00:40:16,252 --> 00:40:22,762
I think that Can be help you to have more
ideas, to have more insights about that.

599
00:40:23,062 --> 00:40:29,907
If you need to discuss About the GitHub
compiler to our impact, please send me

600
00:40:29,917 --> 00:40:36,392
an email or, look about me in, in, in
linkaginess and, me, a message, if you

601
00:40:36,392 --> 00:40:41,562
need to know more about, DevOps, Azure
DevOps, Career, GNA, Productivity.

602
00:40:41,912 --> 00:40:43,802
Follow me on my YouTube channel.

603
00:40:43,802 --> 00:40:44,182
Okay.

604
00:40:44,602 --> 00:40:49,242
most part of my content is in
Brazilian Portuguese, but, I have

605
00:40:49,352 --> 00:40:51,732
so many videos in English, as well.

606
00:40:51,922 --> 00:40:52,342
Okay.

607
00:40:52,842 --> 00:40:54,662
Again, thanks for participating.

608
00:40:54,662 --> 00:40:57,402
Don't forget to follow
me in my social networks.

609
00:40:57,742 --> 00:41:02,072
I hope to see you again in next,
sessions in next conference.

610
00:41:02,082 --> 00:41:02,642
Thank you.

611
00:41:02,702 --> 00:41:03,142
And bye bye.

