1
00:00:00,500 --> 00:00:00,790
Okay.

2
00:00:01,195 --> 00:00:01,795
Hello everyone.

3
00:00:02,035 --> 00:00:03,414
I'm Karti Gain ami.

4
00:00:03,685 --> 00:00:07,345
Today I'll be presenting my work
on Cloud Native Defense in depth

5
00:00:07,345 --> 00:00:11,065
security for mission critical
services in managed Kubernetes.

6
00:00:11,565 --> 00:00:16,215
This presentation focuses on how mission
critical services can be securely deployed

7
00:00:16,665 --> 00:00:18,525
in managed Kubernetes environments.

8
00:00:19,275 --> 00:00:22,335
Let me walk you through the key
topics I'll be covering today.

9
00:00:22,835 --> 00:00:24,605
Here's the roadmap for today's talk.

10
00:00:25,385 --> 00:00:30,245
I'll begin with an introduction that
sets the context for why BER security

11
00:00:30,245 --> 00:00:36,275
is important, especially in managed
services like a KS, EKS and GKE.

12
00:00:36,775 --> 00:00:40,495
Next, we will define mission
critical services and explore

13
00:00:40,945 --> 00:00:42,415
examples from industries like.

14
00:00:43,390 --> 00:00:46,330
Finance, healthcare,
defense, and supply chain.

15
00:00:46,830 --> 00:00:50,430
Then I will highlight the security
challenges in managed Kubernetes,

16
00:00:50,910 --> 00:00:54,870
such as insider threats, runtime
exploits, and misconfigurations.

17
00:00:55,370 --> 00:01:00,440
We will move on to the cloud native
securities forces cloud cluster

18
00:01:00,440 --> 00:01:03,920
container and code, which form
the layer, the defense model.

19
00:01:04,420 --> 00:01:08,020
We will then look at practical
security measures for each layer.

20
00:01:08,520 --> 00:01:13,090
First, the cloud boundary, then
cluster boundary, container boundary,

21
00:01:13,120 --> 00:01:14,860
and finally, the core boundary.

22
00:01:15,790 --> 00:01:18,490
At the end, I will wrap
up with key takeaways.

23
00:01:18,990 --> 00:01:22,530
Kubernetes has become the foundation
for modern cloud native infrastructure.

24
00:01:23,190 --> 00:01:26,970
It allows organization to deploy
and scale applications efficiently.

25
00:01:27,470 --> 00:01:32,600
Most enterprises today use managed
Kubernetes service such as EKS Azure,

26
00:01:32,600 --> 00:01:37,400
Kubernetes Services, EKS, Amazon
ela, elastic Kubernetes Service,

27
00:01:37,460 --> 00:01:40,020
and GKE Google Kubernetes Engine.

28
00:01:40,950 --> 00:01:47,100
While these managed services simplify
operations and use managed or management

29
00:01:47,100 --> 00:01:52,560
overhead, they also introduce new
security risks, especially for.

30
00:01:53,060 --> 00:01:58,480
Sensitive or mission critical workloads,
for example, control plane exposure,

31
00:01:59,440 --> 00:02:05,410
mis misconfigurations or insider threats
can have serious consequences in these

32
00:02:05,410 --> 00:02:08,550
environments to address these challenges.

33
00:02:09,130 --> 00:02:13,630
The work, this work proposes a
defense in depth security model based

34
00:02:13,630 --> 00:02:19,340
on four csof Cloud Native Security
Cloud cluster container and code.

35
00:02:19,840 --> 00:02:24,940
HC represents a layer of defense
that builds on the one below it.

36
00:02:25,440 --> 00:02:30,160
Creating a defense creating a comp,
sorry, creating a comprehensive

37
00:02:30,220 --> 00:02:31,600
layered protection strategy.

38
00:02:32,100 --> 00:02:34,609
It helps the system more secure.

39
00:02:35,109 --> 00:02:39,205
Now that we have set the context,
let's take a closer look at what I

40
00:02:39,205 --> 00:02:40,945
mean by mission critical services.

41
00:02:41,650 --> 00:02:45,580
And why securing them in Kubernetes
environments is so important.

42
00:02:46,080 --> 00:02:49,980
In this slide, I define what I
mean by mission critical services.

43
00:02:50,760 --> 00:02:54,300
These are software systems
that are absolutely essential

44
00:02:54,450 --> 00:02:56,130
to an organization operations.

45
00:02:56,970 --> 00:03:02,160
If they fail, the business
faces major financial safety

46
00:03:02,220 --> 00:03:03,805
or reputational consequences.

47
00:03:04,170 --> 00:03:09,780
For example, in finance, this includes
payment processing platforms or fraud

48
00:03:09,780 --> 00:03:14,810
detection systems that must operate
securely and continuously In healthcare,

49
00:03:14,930 --> 00:03:19,760
mission critical systems include
electronic health record platforms

50
00:03:19,790 --> 00:03:23,225
and medical monitoring software
that directly affect patient care.

51
00:03:23,725 --> 00:03:28,365
In different sector, we are talking about
secure communications and intelligence.

52
00:03:28,425 --> 00:03:33,515
Al systems that must remain confidential
and resilient, and in the supply

53
00:03:33,515 --> 00:03:38,405
chain examples include system
responsible for code signing, security

54
00:03:38,405 --> 00:03:40,205
scanning, and package verification.

55
00:03:40,705 --> 00:03:47,275
Each of these use cases handles sensitive
or regulated data, so deploying them in

56
00:03:47,275 --> 00:03:52,040
a managed Kubernetes environments demands
and extremely high level of security.

57
00:03:52,540 --> 00:03:55,870
Now we have understand what
mission critical services are.

58
00:03:56,380 --> 00:04:00,970
I will move on to discuss the security
challenges organizes organization

59
00:04:00,970 --> 00:04:04,510
faces when deploying them in
managed Kubernetes environments.

60
00:04:05,010 --> 00:04:09,240
Now let's look at some of the key security
challenges that we, that arise when

61
00:04:09,240 --> 00:04:13,409
deploying mission critical workloads
in managed Kubernetes environments.

62
00:04:14,370 --> 00:04:19,080
First, there are insider threats from
administrators, whether they are cloud

63
00:04:19,080 --> 00:04:21,480
admins, cluster admins, or tenant admins.

64
00:04:22,200 --> 00:04:27,000
Each level has privileged access, and
if any credentials are compromised,

65
00:04:27,090 --> 00:04:29,580
it can expose sensitive workloads.

66
00:04:30,080 --> 00:04:35,420
Second misconfigurations and weak
authentication, or very common simple

67
00:04:35,420 --> 00:04:39,350
mistakes like using overly PERCY rules.

68
00:04:40,145 --> 00:04:45,695
Public control plane endpoint or missing
encryption can open up large attack

69
00:04:45,695 --> 00:04:49,085
surfaces, the third attack attacker.

70
00:04:49,145 --> 00:04:53,484
The third attackers can inject
malware into containers.

71
00:04:53,994 --> 00:04:58,585
This can happen through vulnerable
base images, compromised registries

72
00:04:59,125 --> 00:05:01,285
or during the CACD pipeline.

73
00:05:01,785 --> 00:05:06,075
Next runtime exploits and
privilege escalation allow.

74
00:05:06,405 --> 00:05:11,115
Attackers to escape from
containers and game control over

75
00:05:11,115 --> 00:05:13,605
the host or cluster resources.

76
00:05:14,105 --> 00:05:19,135
Finally, supply chain compromises are
becoming more frequent adversaries,

77
00:05:19,225 --> 00:05:23,695
target build systems, image
registries, or dependencies to insert

78
00:05:24,295 --> 00:05:26,215
malicious code before deployment.

79
00:05:26,715 --> 00:05:31,315
These challenges highlight why managed
Bernet security requires more than just.

80
00:05:32,145 --> 00:05:34,965
The default protections
offered by cloud providers.

81
00:05:35,625 --> 00:05:38,955
We need a layered defense
in depth approach.

82
00:05:39,455 --> 00:05:44,345
Now let's talk about the defense in depth
of security architecture, which forms

83
00:05:44,375 --> 00:05:46,745
the core of my proposal proposed model.

84
00:05:47,245 --> 00:05:51,225
The idea here is simple but powerful,
rather than relying on a single

85
00:05:51,225 --> 00:05:52,965
layer of protection, we apply.

86
00:05:53,505 --> 00:05:59,295
Multi multiple layers of controls across
all four domains of cloud native security.

87
00:06:00,075 --> 00:06:02,475
The cloud cluster container, and code.

88
00:06:02,975 --> 00:06:08,175
Each of these layers reinforces
the others, creating a cumulative

89
00:06:08,175 --> 00:06:12,804
defense that significantly reduces
the chance of successful attack.

90
00:06:13,304 --> 00:06:18,704
This model also follows a zero
trust approach, which means.

91
00:06:19,334 --> 00:06:23,204
Every request user and workload
is verified regardless of

92
00:06:23,204 --> 00:06:26,654
whether it is originates inside
or outside the environment.

93
00:06:27,154 --> 00:06:31,414
By enforcing zero trust principles
at every layer, we can prevent

94
00:06:32,074 --> 00:06:35,269
unauthorized access and lateral movement
within the Kubernetes environment.

95
00:06:35,769 --> 00:06:40,059
This layered security design
helps mitigate key risks such

96
00:06:40,059 --> 00:06:44,439
as insider threats, supply chain
attacks, and runtime exploit.

97
00:06:44,939 --> 00:06:47,489
Which are common in managed
Kubernetes environments.

98
00:06:47,989 --> 00:06:52,489
What is also important is that this
model leverages built in security

99
00:06:52,489 --> 00:06:57,909
integrations available in managed
services, meaning organization can

100
00:06:58,059 --> 00:07:02,319
strengthen their security posture
without adding excessive complexity.

101
00:07:02,819 --> 00:07:05,999
Next, I will begin breaking
down this architecture by layer.

102
00:07:06,689 --> 00:07:09,719
Starting with how to secure the
cloud boundary, which is the

103
00:07:09,749 --> 00:07:12,299
outermost layer in the four Cs model,

104
00:07:12,799 --> 00:07:15,799
this section focuses on
securing the cloud layer.

105
00:07:16,759 --> 00:07:19,159
The first C in the cloud
native security model.

106
00:07:19,659 --> 00:07:24,999
The hubs spoke network technology,
sorry, network topology, provides

107
00:07:25,420 --> 00:07:26,889
centralized control and visibility.

108
00:07:27,389 --> 00:07:33,149
The hub Virtual network manages routing,
inspection and security policies.

109
00:07:33,929 --> 00:07:39,029
While spoke virtual networks
isolate workloads for stronger

110
00:07:39,329 --> 00:07:41,669
segmentation and reduce the risk.

111
00:07:42,169 --> 00:07:46,039
Strict firewall rules are
applied to restrict both inbound

112
00:07:46,039 --> 00:07:47,479
and outbound connections.

113
00:07:47,979 --> 00:07:53,169
Only authorized communication parts
are permitted, reducing exposure, and.

114
00:07:53,859 --> 00:07:55,659
Limiting potential attack vectors.

115
00:07:56,159 --> 00:08:01,049
Together these measures establish
strong perimeter production.

116
00:08:01,859 --> 00:08:07,739
They minimize external exposure, shrink
the attack surface, and enforce zero

117
00:08:07,744 --> 00:08:09,634
trust principles at the network boundary.

118
00:08:10,134 --> 00:08:13,134
Together these measures
establish strong pyramid.

119
00:08:13,634 --> 00:08:19,574
Using private clusters and endpoints
ensure that control planes and container

120
00:08:19,574 --> 00:08:24,154
registry communicate only through
internal IP address keeping sensitive

121
00:08:24,154 --> 00:08:26,284
management traffic of the public internet.

122
00:08:26,784 --> 00:08:29,634
With the cloud boundary secured,
the next layer of protection

123
00:08:29,634 --> 00:08:31,859
focuses on cluster boundary where.

124
00:08:32,724 --> 00:08:36,924
Access control and internal communication,
secure security become critical.

125
00:08:37,424 --> 00:08:42,974
Before we talk about the next c let's
quickly, recap, what security gaps

126
00:08:42,974 --> 00:08:45,134
still exist after the foresee Cloud?

127
00:08:45,634 --> 00:08:51,084
The cloud layer focuses primarily on
securing the external network boundary.

128
00:08:51,594 --> 00:08:56,124
It provides protection from internet
based threats through firewalls, network

129
00:08:56,124 --> 00:08:58,524
segmentation and control connectivity.

130
00:08:59,424 --> 00:09:03,084
At this stage, all inbound and
outbound communication is monitored

131
00:09:03,114 --> 00:09:07,189
and validated to ensure that
only trusted traffic flows into.

132
00:09:08,119 --> 00:09:10,759
Are out of the Kubernetes environment.

133
00:09:11,259 --> 00:09:14,469
However, this protection is
limited to the network perimeter.

134
00:09:15,069 --> 00:09:20,769
While it successfully reduces the exposure
from external lacs, it does not address

135
00:09:20,829 --> 00:09:22,929
risk that exist inside the environment.

136
00:09:23,499 --> 00:09:27,979
The next layers cluster container
code contain components that remain

137
00:09:27,979 --> 00:09:33,469
vulnerable to internal threats mis
privileged misuse, and time exploitation.

138
00:09:33,969 --> 00:09:38,369
Therefore deeper security measures
are required to harden these inner

139
00:09:38,699 --> 00:09:42,919
layers, which will be in the following
sections of the architecture.

140
00:09:43,419 --> 00:09:47,079
The next focus area is the cluster
boundary where the goal is to

141
00:09:47,079 --> 00:09:52,869
protect internal components such
as a PA server ETCD storage nodes,

142
00:09:52,929 --> 00:09:54,369
and interport communication.

143
00:09:54,869 --> 00:09:58,849
Securing cluster boundary represents
the second layer of defense in

144
00:09:58,849 --> 00:10:00,619
the cloud native security model.

145
00:10:01,609 --> 00:10:05,839
At this layer, the focus shifts
from external network production

146
00:10:05,839 --> 00:10:10,459
to securing internal Kubernetes
components such as AP server, ETCD,

147
00:10:10,459 --> 00:10:12,649
storage, qbl, and port communication.

148
00:10:13,149 --> 00:10:16,239
First, a private AP server combined with.

149
00:10:16,609 --> 00:10:22,640
Rback integration limits control plane
exposure by using private endpoints

150
00:10:22,699 --> 00:10:24,770
and enforcing strong authentication.

151
00:10:24,770 --> 00:10:29,329
With role-based access controls,
one, authorized users can interact

152
00:10:29,329 --> 00:10:34,290
with cluster resources following
the principle of least privilege.

153
00:10:34,790 --> 00:10:39,750
Next ETCD storage, which stores all
the cluster configurations on secret

154
00:10:39,840 --> 00:10:41,910
must be secrets must be protected.

155
00:10:42,410 --> 00:10:46,410
Encrypting ETCD data addressed
using key management service.

156
00:10:46,410 --> 00:10:52,350
KMS ensures that even if storage is
compromised, sensitive data remains

157
00:10:52,350 --> 00:10:56,030
inaccessible to protect and node access.

158
00:10:56,090 --> 00:11:00,700
Anonymous access should be disabled
ports restricted and network policy

159
00:11:00,700 --> 00:11:04,305
supplied to prevent unauthorized
interaction with lower level services.

160
00:11:04,805 --> 00:11:08,525
Implementing network segmentation
through Kubernetes network policies

161
00:11:08,585 --> 00:11:12,695
are cloud native firewall limits,
part to part and known space

162
00:11:12,695 --> 00:11:16,795
communication effectively reducing the
lateral movement within the cluster.

163
00:11:17,295 --> 00:11:22,765
Finally OPA gatekeeper admission
control controller enforces

164
00:11:23,225 --> 00:11:28,145
compliances compliance and policy
rules before workloads are admitted.

165
00:11:28,645 --> 00:11:33,965
Examples included blocking privileged
parts, ensuring image signatures or

166
00:11:33,965 --> 00:11:35,945
verifying configuration standards.

167
00:11:36,455 --> 00:11:41,095
Together these controls strengthen
the internal security posture

168
00:11:41,185 --> 00:11:45,545
of Kubernetes environment by
safeguarding its most critical

169
00:11:45,545 --> 00:11:47,495
management and operational components.

170
00:11:47,995 --> 00:11:51,715
With cluster layer secured
attention now shift to next layer.

171
00:11:52,215 --> 00:11:55,425
What security gap still exist
after the second C cluster?

172
00:11:55,925 --> 00:12:00,240
At this stage, both the cloud layer
and cluster layer have been secured.

173
00:12:00,990 --> 00:12:04,440
The network perimeter is protected
and strong controls, such as

174
00:12:04,440 --> 00:12:08,610
private endpoints or back encryption
admission policies are in place.

175
00:12:09,110 --> 00:12:13,490
However, these controls primarily
protect the infrastructure and

176
00:12:13,970 --> 00:12:17,960
management components of Kubernetes,
not the workload themselves.

177
00:12:18,620 --> 00:12:23,330
The next major security challenge
lies within container layer where

178
00:12:23,420 --> 00:12:28,315
vulnerabilities can still be exploited
even in a well secured cluster.

179
00:12:28,815 --> 00:12:33,990
Attackers may attempt container breakouts
exploiting kernel vulnerabilities,

180
00:12:33,990 --> 00:12:35,580
or injecting malicious code into.

181
00:12:36,080 --> 00:12:40,730
Running containers through compromised
images or runtime downloads.

182
00:12:41,230 --> 00:12:45,580
The following section explains how
confidential VMs confidential containers

183
00:12:45,580 --> 00:12:49,870
enhance container isolation and
prevent host or admin level tampering.

184
00:12:50,370 --> 00:12:51,960
Cut securing container boundary.

185
00:12:52,260 --> 00:12:55,140
This section focuses on
the container boundary.

186
00:12:55,665 --> 00:12:58,635
The third layer in the cloud
native defense in depth model.

187
00:12:59,595 --> 00:13:05,545
While the cloud and cluster layer layers
are addresses into external and control

188
00:13:05,605 --> 00:13:09,895
interest, the container layer deals
with risks inside the workload itself.

189
00:13:10,395 --> 00:13:15,390
Pos and containers or address of
breakout or kernel exploitation if,

190
00:13:15,490 --> 00:13:19,705
if a container is compromised, it
can potentially escape to the host,

191
00:13:20,245 --> 00:13:26,005
exploit kernel vulnerabilities, or move
laterally across workloads, threatening

192
00:13:26,005 --> 00:13:27,775
the integrity of entire cluster.

193
00:13:28,275 --> 00:13:32,895
To mitigate this confidential
virtual machines cvms or used

194
00:13:33,375 --> 00:13:35,160
to protect node level workload.

195
00:13:35,660 --> 00:13:40,270
C VM CVMS utilize hardware backed
trusted execution environments.

196
00:13:40,330 --> 00:13:47,080
These to encrypt memory and CPU to
isolate a virtual mission from hypervisor

197
00:13:47,170 --> 00:13:52,010
and host preventing unauthorized
access from infrastructure layers.

198
00:13:52,510 --> 00:13:56,710
Building on that confidential
container, extend this protection

199
00:13:56,710 --> 00:13:58,450
to individual containers.

200
00:13:59,200 --> 00:14:05,590
They run inside Secure enclaves ensuring
that application code and data in use

201
00:14:05,590 --> 00:14:10,960
remain protected even if the kernel
container runtime or host is compromised.

202
00:14:11,460 --> 00:14:16,140
Together, these confidential computing
technologies prevent host or admin

203
00:14:16,140 --> 00:14:21,955
tampering ensuring that even privileged
users, cloud operators, or compromised

204
00:14:21,955 --> 00:14:26,785
system components cannot access or
alter these sensitive workloads.

205
00:14:27,285 --> 00:14:32,015
This approach brings a new level
of assurance to running mission

206
00:14:32,015 --> 00:14:36,305
critical services by safeguarding
the runtime environment from both

207
00:14:36,335 --> 00:14:38,135
external and insider threats.

208
00:14:38,635 --> 00:14:42,655
With the container boundary secured,
the next focus is on the final layer.

209
00:14:42,775 --> 00:14:45,055
Before that let's recap.

210
00:14:45,555 --> 00:14:49,545
What security gaps still exist
after the third C container layer?

211
00:14:50,045 --> 00:14:53,435
At this point, most of the
external and infrastructure layer

212
00:14:53,435 --> 00:14:55,835
threats have been mitigated.

213
00:14:56,505 --> 00:15:01,205
As you see, as you can see in this
picture, protections from the hypervisor

214
00:15:01,205 --> 00:15:05,915
host, or guest agents and peer
ports or containers are already in

215
00:15:05,915 --> 00:15:10,235
place through confidential computing
and strong isolation controls.

216
00:15:10,735 --> 00:15:14,360
However, the remaining risk
lies within the code itself.

217
00:15:14,860 --> 00:15:19,500
The application logic running inside
the container, even with the strong

218
00:15:19,970 --> 00:15:24,650
TCB test computing base provided
by the confidential containers, the

219
00:15:24,650 --> 00:15:29,990
code that executes at runtime can
still introduce new vulnerabilities.

220
00:15:30,470 --> 00:15:35,060
Examples include code that
downloads external packages, bonds,

221
00:15:35,090 --> 00:15:38,680
unauthorized processes, or execute
unverified scripts at runtime.

222
00:15:39,180 --> 00:15:43,440
All of which can bypass
inte security boundaries.

223
00:15:43,940 --> 00:15:50,320
This residual risk highlights the need
for controls that protect not just the

224
00:15:50,320 --> 00:15:54,610
container environment, but also the
behavior of the code running inside it.

225
00:15:55,110 --> 00:16:01,275
The next and final layer, the fourth
C code, addresses this exact half gap

226
00:16:01,335 --> 00:16:04,155
by applying runtime integrity control.

227
00:16:04,655 --> 00:16:09,095
System called restrictions and
continuous monitoring to ensure

228
00:16:09,585 --> 00:16:11,835
security ensure secure execution.

229
00:16:12,335 --> 00:16:16,245
So the following section explains
how the code layer uses measures

230
00:16:16,245 --> 00:16:21,465
like trusted image signing immutable
containers sec com and fall code two

231
00:16:21,885 --> 00:16:24,495
completely mitigate the runtime threats.

232
00:16:24,995 --> 00:16:26,045
Securing code boundary.

233
00:16:26,675 --> 00:16:30,035
The code boundary represents
the fourth and final layer of

234
00:16:30,085 --> 00:16:31,465
of the defense in depth model.

235
00:16:32,335 --> 00:16:37,405
This layer focuses on securing the
code that executes inside containers

236
00:16:37,855 --> 00:16:41,000
to ensure that runtime behavior
remain controlled and trusted.

237
00:16:41,500 --> 00:16:47,200
First using tested image registries
and signing ensures that 1D verified

238
00:16:47,200 --> 00:16:50,380
and cryptographically signed
container images are deployed.

239
00:16:50,880 --> 00:16:55,530
This step significantly reduces
supply chain risks by preventing

240
00:16:56,040 --> 00:17:01,080
the use of unverified or tampered
images for Linux workloads.

241
00:17:01,440 --> 00:17:04,260
Aless image provide an
additional safeguard.

242
00:17:04,995 --> 00:17:10,815
These images do not contain shells
package managers or other utilities that

243
00:17:10,875 --> 00:17:15,245
attackers could exploit, reducing the
attack surface to one leak components

244
00:17:15,245 --> 00:17:16,895
required for the application to function.

245
00:17:17,395 --> 00:17:22,765
Next, immutable containers prevent
any modification after the deployment.

246
00:17:23,575 --> 00:17:27,330
If updates are needed, a new image
must be rebuilt and redeployed,

247
00:17:27,830 --> 00:17:31,390
ensuring that runtime, tampering, or
unauthorized changes cannot occur.

248
00:17:31,890 --> 00:17:35,700
The second security feature adds
another layer of protection by

249
00:17:35,700 --> 00:17:41,810
restricting system calls that processes
or mounting file systems et cetera.

250
00:17:42,380 --> 00:17:46,190
Secom helps block
malicious runtime actions.

251
00:17:46,690 --> 00:17:51,320
Finally, file Code Protect provides
a realtime runtime monitoring.

252
00:17:52,190 --> 00:17:55,070
It continuously observes
container and system activity.

253
00:17:55,570 --> 00:17:59,500
Detecting an anomalies such as
privilege, escalation attempts,

254
00:18:00,010 --> 00:18:03,640
unexpected file access, or the
execution of unknown processes.

255
00:18:04,390 --> 00:18:08,790
Alerts are generated whenever the
suspicious behaviors occurs together.

256
00:18:09,120 --> 00:18:15,090
These security controls ensure that the
code running inside containers remain

257
00:18:15,090 --> 00:18:19,125
verified, immutable, restricted in
behavior, and continuously monitored.

258
00:18:19,625 --> 00:18:25,615
Effectively closing the final security
gap in four Cs model with all four layers.

259
00:18:25,645 --> 00:18:29,915
Cloud, cluster, container,
and code secured the defense.

260
00:18:29,915 --> 00:18:34,055
In depth architecture now provides
comprehensive protection across

261
00:18:34,055 --> 00:18:35,585
the entire Kubernetes environment.

262
00:18:35,685 --> 00:18:39,375
What gaps, what security gap still
exist after the fourth C code?

263
00:18:39,875 --> 00:18:43,740
At this stage, the defense in
depth model has fully implemented.

264
00:18:44,580 --> 00:18:49,230
Every layer from cloud to code now
has its own set of protections.

265
00:18:50,010 --> 00:18:52,920
With immutable container system
called restriction and real time

266
00:18:52,920 --> 00:18:58,110
monitoring in place, the code layer
effectively closes the last known gap.

267
00:18:58,610 --> 00:19:02,810
At this point, there are no remaining
vulnerabilities within the defined layers.

268
00:19:03,200 --> 00:19:06,290
All the major attacks, surfaces
from the infrastructure to

269
00:19:06,290 --> 00:19:08,320
runtime have been addressed.

270
00:19:09,160 --> 00:19:13,450
The overall security posture becomes
significantly stronger because each

271
00:19:13,450 --> 00:19:18,120
sea reinforces the one below it
forming a continuous chain of trust.

272
00:19:18,990 --> 00:19:23,490
This means that even if an attacker
somehow breaches one layer, the remaining

273
00:19:23,490 --> 00:19:25,830
layers continue to protect the system.

274
00:19:26,330 --> 00:19:26,615
In other words.

275
00:19:27,115 --> 00:19:32,365
The combination of all four layers, cloud,
cluster, container, and code delivers

276
00:19:32,415 --> 00:19:36,645
a comprehensive end-to-end defense
model for mission critical workloads.

277
00:19:37,145 --> 00:19:41,405
Next, let's move on to the key takeaways
where I will summarize the benefits of

278
00:19:41,405 --> 00:19:46,175
this defense in depth approach and how
it enables strong protection without

279
00:19:46,180 --> 00:19:47,945
compromising the developer agility.

280
00:19:48,445 --> 00:19:48,985
Key takeaways.

281
00:19:49,345 --> 00:19:53,545
So to wrap things up, here are the
main points I want to leave you with.

282
00:19:54,205 --> 00:19:58,345
First, mission critical services,
whether it is payment system, healthcare

283
00:19:58,345 --> 00:20:02,575
applications, or defense workload
need more than basic protection.

284
00:20:03,145 --> 00:20:06,745
Their defense in depth approach
gives these workloads the level

285
00:20:06,745 --> 00:20:08,330
of security they truly require.

286
00:20:08,830 --> 00:20:09,120
Next.

287
00:20:09,890 --> 00:20:13,280
It's important to remember that
the default cloud provider, se,

288
00:20:13,340 --> 00:20:17,630
provider security, things like
IM firewalls, net and network

289
00:20:17,630 --> 00:20:19,340
rules is only part of the story.

290
00:20:20,030 --> 00:20:24,260
Those features are great, but they
don't fully address modern multi-layer

291
00:20:24,260 --> 00:20:27,920
attacks that target the supply
chain are runtime environments.

292
00:20:28,420 --> 00:20:31,890
That's where the real strength
of defense in depth comes in by

293
00:20:31,890 --> 00:20:36,780
layering controls across all forces,
cloud, cluster, container, and code.

294
00:20:37,650 --> 00:20:41,850
And combining that with zero trust,
confidential containers and runtime

295
00:20:41,850 --> 00:20:45,720
monitoring, you can close every gap
from infrastructure to application.

296
00:20:46,220 --> 00:20:51,110
In short, defense in depth gives us
a way to protect mission critical

297
00:20:51,110 --> 00:20:54,235
workloads without slowing down
innovation, that software today.

298
00:20:54,415 --> 00:20:55,225
Thank you for listening.

