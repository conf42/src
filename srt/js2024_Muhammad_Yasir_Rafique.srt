1
00:00:00,500 --> 00:00:01,190
Hello guys.

2
00:00:01,410 --> 00:00:06,270
I hope you all are well and
thank you for your time.

3
00:00:06,680 --> 00:00:14,189
today the topic on which I will be
talking, is the memory leaks in Node.

4
00:00:14,199 --> 00:00:14,739
js.

5
00:00:14,749 --> 00:00:20,919
So in this talk, we will deep
dive into the, diagnostic and its

6
00:00:21,029 --> 00:00:23,929
solutions, to fix these leaks.

7
00:00:24,319 --> 00:00:30,069
First of all, I would like to thank
Conf42, platform to, to give me this

8
00:00:30,069 --> 00:00:35,099
great opportunity to talk on this
most important topic in, JavaScript.

9
00:00:36,039 --> 00:00:38,239
so let me start by.

10
00:00:38,599 --> 00:00:39,709
Introducing myself.

11
00:00:39,799 --> 00:00:45,279
So my name is Mohamad Ya Rafik, and
I am working as a nodeJS backend

12
00:00:45,989 --> 00:00:48,959
developer at Find My Facility.

13
00:00:49,429 --> 00:00:51,649
And I am also happy to share that.

14
00:00:51,699 --> 00:00:57,249
I was a featured author on T-Zone
with an article which was titled

15
00:00:57,249 --> 00:01:01,094
as JavaScript Framework, the
Past, the Present, and the Future.

16
00:01:01,490 --> 00:01:05,669
I have around four plus
years of experience in JS

17
00:01:06,109 --> 00:01:08,069
and web backend, development.

18
00:01:08,079 --> 00:01:10,059
So let's dive into our topic.

19
00:01:10,559 --> 00:01:11,689
what is, Memory leak.

20
00:01:11,699 --> 00:01:13,899
So here is a brief introduction.

21
00:01:13,909 --> 00:01:20,699
Like the memory leak occurs when the,
program or function takes memory and

22
00:01:20,699 --> 00:01:25,329
keeps it if it's in no longer in.

23
00:01:26,269 --> 00:01:34,669
Use which results to the, the
creation of the system performance.

24
00:01:35,190 --> 00:01:40,449
So in this topic, we will explore,
like what would cause the memory to

25
00:01:40,450 --> 00:01:45,589
leak in this, in, not just application
and their impact on the system.

26
00:01:46,089 --> 00:01:48,989
so why, Memory leak, memory
leaks matter in Node.

27
00:01:49,189 --> 00:01:49,679
js.

28
00:01:50,209 --> 00:01:56,960
I would say the memory leak, is,
is, The memory leak matters in every

29
00:01:56,960 --> 00:02:02,680
language, if you are using Python
or C sharp or any other language

30
00:02:03,160 --> 00:02:10,580
memory, matters, but why most, matter
in this NodeJS, we will find it out.

31
00:02:11,030 --> 00:02:12,250
as we all know that NodeJS.

32
00:02:13,225 --> 00:02:16,185
relies on an event driven architecture.

33
00:02:16,585 --> 00:02:21,345
the event driven architecture includes,
some event loops and callbacks

34
00:02:21,645 --> 00:02:26,175
and functions, which executes at,
at the same time without blocking

35
00:02:26,215 --> 00:02:28,645
other functions, ease and objects.

36
00:02:29,035 --> 00:02:34,915
due to this feature, it becomes more,
more highly effective for input out

37
00:02:34,985 --> 00:02:37,515
for input, output heavy applications.

38
00:02:37,935 --> 00:02:41,775
So when we talk about even
driven architecture, it's mean.

39
00:02:41,870 --> 00:02:47,300
it means that, there are so much
function execution happening on the

40
00:02:47,300 --> 00:02:53,930
same time at the back end, so due
to which, if they are not properly

41
00:02:53,940 --> 00:02:58,060
handled, so the memory leaks can cause,

42
00:02:58,220 --> 00:03:04,220
server or our application
to crash the response time.

43
00:03:04,610 --> 00:03:09,610
I become slow and even sometime, the
worst happened is application failure.

44
00:03:10,120 --> 00:03:14,440
when, when we talk about the
long, running applications.

45
00:03:14,940 --> 00:03:18,070
so what are the symptoms of memory leak?

46
00:03:18,070 --> 00:03:24,980
Like how we identify that if the certain
problem is occurring again and again.

47
00:03:24,980 --> 00:03:30,670
so what is cause and, Will the
cause be the memory leak or not?

48
00:03:30,790 --> 00:03:35,260
So there are some signs, with the
help of which we can identify this.

49
00:03:35,260 --> 00:03:41,690
So some common size, science includes,
the increasing memory usage, with the

50
00:03:41,790 --> 00:03:44,600
passage of time, which includes the.

51
00:03:45,005 --> 00:03:50,805
application performance slow, and
frequently garbage collection pauses.

52
00:03:50,955 --> 00:03:57,915
So with the help of, with the help of
these signs, we can identify the leaks.

53
00:03:57,945 --> 00:04:02,235
And with the help of this set of
symptoms, we can early, identify

54
00:04:02,245 --> 00:04:07,495
this and we can maintain Our
application, stability on time.

55
00:04:07,995 --> 00:04:13,295
So I will share some like real type,
real life, applicant, examples for

56
00:04:13,295 --> 00:04:16,185
this memory leak in production, phase.

57
00:04:16,415 --> 00:04:20,625
So actually we were working, actually
we, as a team were working on a

58
00:04:20,625 --> 00:04:26,285
project where, we found some memory
leaks, like persistent memory leaks,

59
00:04:26,785 --> 00:04:31,255
it's, in the, Production phase in an
high traffic, no, just application

60
00:04:31,265 --> 00:04:36,575
like, like so much input, output and
processing at the back end, due to

61
00:04:36,605 --> 00:04:40,035
which our server starts again and again.

62
00:04:40,445 --> 00:04:44,975
so we start, debugging the
problem that what, causes the

63
00:04:44,975 --> 00:04:47,075
server to start again and again.

64
00:04:47,085 --> 00:04:48,785
So when we check.

65
00:04:49,415 --> 00:04:57,415
Down the issues, so it, it involves some
deep, analysis of the application memory.

66
00:04:57,915 --> 00:05:01,475
usage patterns over the time.

67
00:05:01,535 --> 00:05:05,715
so at first we were very confused
that from which side we should start

68
00:05:05,745 --> 00:05:11,525
and we should start doing debugging,
whether, it's the server issue or any

69
00:05:11,525 --> 00:05:14,065
function or any, controller issue.

70
00:05:14,075 --> 00:05:16,255
So at the first it was very, messed up.

71
00:05:16,755 --> 00:05:23,375
after that, so it, so as I explained, It
was a challenge for us to identify that

72
00:05:23,405 --> 00:05:30,565
what is the issue and from which point
we should start, debugging, our leak or

73
00:05:30,595 --> 00:05:33,655
the issue, on which we are facing it.

74
00:05:34,155 --> 00:05:38,715
With the help of the memory snapshots
and profiling tools, our team was

75
00:05:38,765 --> 00:05:43,485
able to pinpoint the exact issue
which causes the memory leaks.

76
00:05:43,825 --> 00:05:47,815
So I will explain further this
like snapshots and profiling tools,

77
00:05:48,215 --> 00:05:53,105
that how they work and how we can
identify the, issues, like that.

78
00:05:53,605 --> 00:05:55,215
memory leak inside our Node.

79
00:05:55,225 --> 00:05:56,085
js application.

80
00:05:56,585 --> 00:06:03,045
uh, there are a few common mistakes,
which causes the memory to leak in Node.

81
00:06:03,045 --> 00:06:03,525
js, Node.

82
00:06:03,565 --> 00:06:04,515
js applications.

83
00:06:04,965 --> 00:06:07,025
So these leaks can.

84
00:06:07,570 --> 00:06:14,340
Erased from, unintentional, global
variables assignment, which is a

85
00:06:14,340 --> 00:06:22,150
very common mistake from like from
the beginner, developers and, some

86
00:06:22,160 --> 00:06:27,960
improper, Closures are written,
references in event lister or callback.

87
00:06:28,010 --> 00:06:33,580
I will explain like what are the,
closures, the closures are the

88
00:06:33,580 --> 00:06:39,780
function which, retain the, reference
of an variable from an outer

89
00:06:39,780 --> 00:06:45,350
function and it keeps with it until
the function, execution complete.

90
00:06:45,810 --> 00:06:50,680
but sometimes these, closures are
not, properly handled due to which,

91
00:06:50,700 --> 00:06:53,780
these, those variables are stayed.

92
00:06:54,280 --> 00:07:00,810
Inside the memory for a long time,
due to which it like overloads the,

93
00:07:01,190 --> 00:07:06,270
memory and some event listeners
and callbacks these, if they are

94
00:07:06,320 --> 00:07:08,250
not, properly handled or optimized.

95
00:07:08,570 --> 00:07:12,680
So these, these will
cause the memory to leave.

96
00:07:13,180 --> 00:07:13,450
Okay.

97
00:07:13,450 --> 00:07:17,490
So there are some tools, with the help
of which we can, Identify these leaks.

98
00:07:17,490 --> 00:07:23,610
first of all, I will explain the, using
chrome def tools for memory profiling.

99
00:07:23,660 --> 00:07:31,090
so chrome def tool, is a tool like is
a powerful memory profiling tool to

100
00:07:31,090 --> 00:07:33,790
capture, snapshots, compare heap, Okay.

101
00:07:34,420 --> 00:07:37,770
Location and identify memory leaks.

102
00:07:37,770 --> 00:07:40,350
So what are like, snapshots?

103
00:07:40,350 --> 00:07:47,520
So snapshots, are the timeframes
where we can, check the state, of

104
00:07:47,580 --> 00:07:50,050
the app at any, a specific point.

105
00:07:50,525 --> 00:07:56,805
Like we can check the snapshot of
the application before executing the

106
00:07:56,815 --> 00:08:01,335
function and after that as well, with
the help of which we can identify

107
00:08:01,345 --> 00:08:07,155
the memory usage of the app before
the execution and after the execution

108
00:08:07,185 --> 00:08:09,445
of the certain functions or objects.

109
00:08:09,865 --> 00:08:14,935
With the help of this, we can
identify the, and analyze, if

110
00:08:14,935 --> 00:08:20,335
there are memory leaks and high
memory usage in no J applications.

111
00:08:20,835 --> 00:08:21,105
Okay.

112
00:08:21,155 --> 00:08:26,165
there is an inbuilt tool for no J,
which is called like inspect flag.

113
00:08:26,465 --> 00:08:33,535
like it is, like this tool, helps in
the, in debugging anger, Like this is an

114
00:08:34,065 --> 00:08:40,140
debugging tool, which helps to identify
any leak, and how to, use this built

115
00:08:40,140 --> 00:08:44,965
in, feature to track down memory leaks
and some in efficient memory usage.

116
00:08:45,155 --> 00:08:48,805
So we can also track, track, memory leaks.

117
00:08:48,825 --> 00:08:49,294
if.

118
00:08:49,675 --> 00:08:54,725
If we are encountering any extensive
memory usage inside our app or

119
00:08:54,765 --> 00:08:58,935
after the execution of certain
functions, we can use this inspect

120
00:08:58,965 --> 00:09:01,765
tool to identify, certain issues.

121
00:09:02,265 --> 00:09:07,765
Okay, so heap, snapshot as as I
mentioned earlier, the heap, snapshots

122
00:09:07,795 --> 00:09:12,115
provide a detailed view of the memory
allocation in your application.

123
00:09:12,515 --> 00:09:13,265
with the help of.

124
00:09:13,985 --> 00:09:21,435
Snapshots, we can record the snaps off
of our application at different intervals

125
00:09:21,775 --> 00:09:27,385
so we can, analyze the memory usage
before the execution of certain tasks

126
00:09:27,385 --> 00:09:29,985
and after the execution of those tasks.

127
00:09:30,355 --> 00:09:35,835
So with the help of, which we can
identify, like which object or

128
00:09:35,835 --> 00:09:40,915
function is taking more, memory and
which and after the execution of

129
00:09:40,935 --> 00:09:43,375
which function the memory leak occurs.

130
00:09:43,875 --> 00:09:44,165
Okay.

131
00:09:44,225 --> 00:09:50,475
the memory leak also occurs when objects,
that should be garbage collected,

132
00:09:50,885 --> 00:09:53,320
are, were, Remain in the memory.

133
00:09:53,720 --> 00:09:56,780
after the execution of the functions.

134
00:09:56,840 --> 00:10:00,780
so there might be some variables or
objects which are kept inside, inside the

135
00:10:00,780 --> 00:10:05,510
memory and they are like no longer in use.

136
00:10:05,510 --> 00:10:08,640
so this also cause, the memory to leak.

137
00:10:08,670 --> 00:10:12,560
So it is also important to
track those certain objects

138
00:10:12,570 --> 00:10:14,740
and the event listeners, which.

139
00:10:15,550 --> 00:10:21,099
We are using, so after the
execution, they like, they kept

140
00:10:21,109 --> 00:10:26,299
alive inside the memory, like which,
results the memory to overflow.

141
00:10:26,799 --> 00:10:28,149
Real life solutions.

142
00:10:28,159 --> 00:10:30,439
So actually I was working, on a project,

143
00:10:30,539 --> 00:10:36,979
recently and I like identify after
the implementation of few functions

144
00:10:37,309 --> 00:10:43,209
and some event, listeners that the
execution of like after the execution

145
00:10:43,209 --> 00:10:50,589
of those processes and functions, the,
response was getting slow, time to time.

146
00:10:50,909 --> 00:10:56,719
then, so after that, I, analyze few
functions and few event listeners.

147
00:10:57,169 --> 00:11:01,639
due to which I was able to
identify that there is after

148
00:11:01,639 --> 00:11:03,889
the executions of few functions.

149
00:11:04,229 --> 00:11:05,599
So the, the.

150
00:11:05,879 --> 00:11:12,489
The solution was so, simple, the issue
was the, like there was such an even

151
00:11:12,679 --> 00:11:18,059
listener inside my, functions and
inside my apps, which kept, which used

152
00:11:18,059 --> 00:11:24,949
to keep the references of an unused
objects, due to which the memory gets

153
00:11:24,959 --> 00:11:31,259
full and the execution and it takes A
lot time to, to execute those functions.

154
00:11:31,619 --> 00:11:37,669
So the, it was hard to identify the
issue at first, but once, when it

155
00:11:37,669 --> 00:11:43,079
was, identified, the solution was
simple to make those even listener,

156
00:11:43,439 --> 00:11:48,609
to, optimize and to, remove those
length, listeners, once they are

157
00:11:48,609 --> 00:11:51,279
executed or finished their execution.

158
00:11:51,754 --> 00:11:57,814
and ensure that the proper cleanup
should be done after each execution.

159
00:11:58,314 --> 00:12:03,684
So now I will explain about the, Garbage
collection, the garbage collection,

160
00:12:03,924 --> 00:12:10,744
like what's in a way, it is an V8
engine, garbage collector, within, Node.

161
00:12:10,744 --> 00:12:15,244
js once the execution is, like
the execution of the certain,

162
00:12:15,604 --> 00:12:17,314
functions and objects are done.

163
00:12:17,544 --> 00:12:19,004
So then it, so that it.

164
00:12:19,434 --> 00:12:24,504
Collects those unused objects and,
and even just a little bit are

165
00:12:24,504 --> 00:12:25,984
kept inside, inside the memory.

166
00:12:26,504 --> 00:12:34,054
so it, so the garbage collector frees up
those memory, which no longer in, in use.

167
00:12:34,404 --> 00:12:40,034
uh, this helps, to avoid the
memory leaks in our, application.

168
00:12:40,534 --> 00:12:40,854
Okay.

169
00:12:40,854 --> 00:12:42,924
So using, clinic.

170
00:12:42,934 --> 00:12:52,794
js, it is, it is an powerful, diagnostic
tool, uh, specifically, designed for Node.

171
00:12:52,794 --> 00:12:53,854
js applications.

172
00:12:54,064 --> 00:13:01,074
So it helps to identify any memory leak
at certain points and, see, and if there

173
00:13:01,074 --> 00:13:07,224
are any CPU, bottlenecks and those queries
which are taking time, for execution.

174
00:13:07,534 --> 00:13:11,614
So it also, so it helps to,
identify those issues as well.

175
00:13:12,064 --> 00:13:17,564
So it's better that we should know that
how to use these tools efficiently.

176
00:13:17,854 --> 00:13:22,754
because once we know how to use
these tools, it will be very

177
00:13:22,754 --> 00:13:25,134
easy to identify memory leaks.

178
00:13:25,794 --> 00:13:31,084
At the early stage, like in the,
development stage before going,

179
00:13:31,544 --> 00:13:32,964
into your, production phase

180
00:13:33,464 --> 00:13:35,514
monitoring tools for, memory usage.

181
00:13:35,574 --> 00:13:37,454
uh, previously.

182
00:13:37,979 --> 00:13:42,489
I have defined some tools which we
can use those manually at certain

183
00:13:42,489 --> 00:13:50,999
points, but there are some, monitoring
tools if we use, them, to analyze our

184
00:13:51,019 --> 00:13:55,059
memory usage at the, like from the
start to the end of our application.

185
00:13:55,429 --> 00:13:59,739
So these tools like
help to monitor at each.

186
00:14:00,064 --> 00:14:05,654
Stage like, like at what stage the
memory is going high and at what

187
00:14:05,894 --> 00:14:07,464
stage the memory is going low.

188
00:14:07,814 --> 00:14:14,034
So the tools like new relic and
data dog, they offer some real time

189
00:14:14,534 --> 00:14:19,404
monitoring of, of the memory usage
in production and environment.

190
00:14:19,684 --> 00:14:24,584
So we can use these tools,
specifically if our apps are live.

191
00:14:25,024 --> 00:14:26,994
So we can check, the.

192
00:14:27,734 --> 00:14:32,764
memory usage after the execution
of certain features inside our app.

193
00:14:33,054 --> 00:14:39,714
So with the help of these tools, we
can, proactively identify memory leaks,

194
00:14:39,764 --> 00:14:42,404
before they, they become too big.

195
00:14:42,904 --> 00:14:47,524
so there are some, best practice
and tips I will share with you, with

196
00:14:47,524 --> 00:14:51,044
the help of which we can, Prevent
these leaks in our application.

197
00:14:51,574 --> 00:14:57,904
for instance, like a wide using,
global variables as they kept in our.

198
00:14:58,189 --> 00:15:04,259
Memory throughout our application
life cycle and the other best example,

199
00:15:04,319 --> 00:15:09,529
sorry, and the other best, practice
or tip you can say, to ensure that

200
00:15:09,539 --> 00:15:14,409
the event listeners which we are
using inside our app are properly.

201
00:15:15,279 --> 00:15:20,989
handled and removed when they are no
longer needed, especially in those

202
00:15:21,029 --> 00:15:23,579
apps, which are like long running apps.

203
00:15:23,589 --> 00:15:31,239
So these tips might help you to identify
and remove the any memory leak up to, uh.

204
00:15:31,739 --> 00:15:33,689
90 percent for your Node.

205
00:15:34,329 --> 00:15:35,259
js application.

206
00:15:35,759 --> 00:15:36,009
Okay.

207
00:15:36,039 --> 00:15:40,889
The other thing is, like optimizing
the event listeners and closures.

208
00:15:41,139 --> 00:15:47,789
So as, so as I, mentioned, mentioned
it earlier that the, that due to the,

209
00:15:47,989 --> 00:15:53,644
event, uh, after the execution of
event listener, even listeners like,

210
00:15:53,924 --> 00:15:59,734
and closures, have their variables
and even and even listeners are there

211
00:15:59,744 --> 00:16:04,664
inside our memory for a long time,
due to which the memory leak occurs.

212
00:16:05,004 --> 00:16:08,074
so these are the major sources of.

213
00:16:08,524 --> 00:16:13,784
Memory leaks, I believe, if they are
not, probably be, properly handled.

214
00:16:14,024 --> 00:16:20,299
So by optimizing these, these
elements, we can handle, our

215
00:16:20,659 --> 00:16:22,969
memory usage quite, efficiently.

216
00:16:23,469 --> 00:16:23,759
Okay.

217
00:16:23,834 --> 00:16:29,824
So there is, one method, inside our, no
j which is called process dot memory.

218
00:16:30,284 --> 00:16:30,714
Use it.

219
00:16:30,724 --> 00:16:35,304
So this method is a built in,
built in, method for Node.

220
00:16:35,314 --> 00:16:39,784
js, which helps to monitor
heap and RSS memory.

221
00:16:40,234 --> 00:16:45,344
so the RSS memory here is known as
President said size, which keeps the

222
00:16:45,354 --> 00:16:49,974
footprint off of the application,
that how application is behaving

223
00:16:50,324 --> 00:16:55,584
like before the execution of
the function or certain feature.

224
00:16:55,634 --> 00:17:00,074
And after the execution of certain
feature, the execution of queries or

225
00:17:00,094 --> 00:17:07,412
like taking data or taking request
or getting the response from the DB.

226
00:17:07,462 --> 00:17:10,512
We can say these are the
footprints of the applications.

227
00:17:10,822 --> 00:17:16,452
uh, with the help of this, the
execution of this method, we can check

228
00:17:16,602 --> 00:17:23,442
the logs and we can track like any,
memory growth and identify any issue.

229
00:17:23,912 --> 00:17:24,682
if, if.

230
00:17:25,327 --> 00:17:30,147
If any function is causing the
memory to leak so we can identify

231
00:17:30,147 --> 00:17:32,457
them before they can get escalate.

232
00:17:32,957 --> 00:17:33,197
Okay.

233
00:17:33,247 --> 00:17:38,407
I believe that it would be a
challenge to, detect any memory

234
00:17:38,407 --> 00:17:40,237
leak in our real time systems.

235
00:17:40,717 --> 00:17:44,317
like I believe that it is a
challenge when dealing with some.

236
00:17:45,132 --> 00:17:49,852
Memory leaks, with, real time systems as
they have some, continuous operational

237
00:17:49,852 --> 00:17:52,102
going, going on all the time.

238
00:17:52,542 --> 00:17:58,462
we can, avoid them, by doing some well
defined, infrastructure of the system,

239
00:17:58,462 --> 00:18:01,122
like writing a clean and nice code.

240
00:18:01,542 --> 00:18:07,372
And, like using the tools after,
Using the, diagnostic tools, after the

241
00:18:07,372 --> 00:18:13,152
execution, after the execution of certain,
functions and objects, uh, so this thing

242
00:18:13,172 --> 00:18:17,102
will lead it to, reduce any memory leak.

243
00:18:17,132 --> 00:18:19,662
It's, within our real time systems.

244
00:18:20,642 --> 00:18:24,992
So I would say the, future
proofing, not just applications.

245
00:18:24,992 --> 00:18:31,182
we can, protect them by, by building
the application in a, in an.

246
00:18:31,632 --> 00:18:38,952
defined infrastructure, defining, defining
functions efficiently and optimizing our

247
00:18:39,242 --> 00:18:47,202
event listeners and our closures as well
and a wide, Using global, variables.

248
00:18:47,212 --> 00:18:51,012
So with the help of these
things, we can avoid memory leak.

249
00:18:51,412 --> 00:18:56,642
and also these things help
in the scaling of our Node.

250
00:18:56,662 --> 00:18:59,662
js very easily and efficiently as well.

251
00:19:00,162 --> 00:19:02,002
So what is the, the.

252
00:19:02,502 --> 00:19:08,702
Conclusion of this talk, is that
the memory leak can be a significant

253
00:19:08,722 --> 00:19:11,222
impact on our, performance.

254
00:19:11,872 --> 00:19:16,342
but with the help of the right tools
and right techniques and tips, we

255
00:19:16,342 --> 00:19:20,962
can, Identify them and fix them
efficiently and on time as well.

256
00:19:21,462 --> 00:19:21,732
Sorry.

257
00:19:22,002 --> 00:19:27,092
So this, presentation will cover
some real, life, examples and, some,

258
00:19:27,222 --> 00:19:34,062
tools, and some best tips to help to
tame this, memory links in, not just.

259
00:19:34,302 --> 00:19:37,812
So thank you, for your time.

260
00:19:37,872 --> 00:19:38,142
Thank you.

