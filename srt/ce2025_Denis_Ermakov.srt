1
00:00:00,000 --> 00:00:03,250
hello, my lovely chaotic
people, I'm Denis.

2
00:00:03,619 --> 00:00:08,719
Once upon a time I was an HHTML coder
tinkering with Netscape Navigator.

3
00:00:09,119 --> 00:00:11,009
that's a 90s.

4
00:00:11,909 --> 00:00:17,009
Then I went down the Scrum Master,
Agile Leader, and even coaching

5
00:00:17,019 --> 00:00:21,689
Rabbit Hole only to Boomerang
back here to Software Engineer.

6
00:00:21,899 --> 00:00:24,429
Looks like I've come full circle.

7
00:00:25,284 --> 00:00:25,824
For now.

8
00:00:26,054 --> 00:00:29,574
Today, let's have a quick chat
about why you don't need that

9
00:00:29,584 --> 00:00:31,974
brilliant library in your project.

10
00:00:32,424 --> 00:00:36,184
I'm currently leading the front
end efforts at TechFlow, so I'll

11
00:00:36,184 --> 00:00:38,034
express some front end examples.

12
00:00:38,674 --> 00:00:41,944
For context, at TechFlow, we build
program portfolio and project

13
00:00:41,944 --> 00:00:43,664
management software for banks.

14
00:00:44,164 --> 00:00:48,064
Yeah, that's a serious business,
serious money, and serious users.

15
00:00:48,084 --> 00:00:50,764
But that doesn't mean
we have to be serious.

16
00:00:51,429 --> 00:00:52,569
All the time.

17
00:00:52,689 --> 00:00:53,909
Haven't we guys?

18
00:00:54,569 --> 00:00:56,599
I suppose yes.

19
00:00:57,139 --> 00:01:00,599
Now let me paint a picture
of what we are dealing with.

20
00:01:01,179 --> 00:01:03,749
We have a frontend built with Next.

21
00:01:03,749 --> 00:01:04,679
js framework.

22
00:01:05,449 --> 00:01:09,449
We have a REST API for a
Java backend and database.

23
00:01:09,749 --> 00:01:11,959
We have an authentication service.

24
00:01:12,409 --> 00:01:14,949
managing logins and user sessions.

25
00:01:15,139 --> 00:01:17,099
We also have two types of tokens here.

26
00:01:17,339 --> 00:01:19,329
Refresh token, which lasts a week.

27
00:01:19,539 --> 00:01:21,949
We have an access token,
which lasts a day.

28
00:01:22,869 --> 00:01:28,979
We, those tokens are packed into
JWT, JSON Web Token, if And, JWT is

29
00:01:28,979 --> 00:01:31,219
stored in cookies on the client side.

30
00:01:31,719 --> 00:01:36,189
on the other side, they're also stored
in the database on the server side.

31
00:01:36,539 --> 00:01:38,849
And, that's our daily grind at TechFlow.

32
00:01:38,999 --> 00:01:40,329
That's pretty standard, right?

33
00:01:40,829 --> 00:01:45,309
Yeah, let's go to the browser
to see something interesting.

34
00:01:45,809 --> 00:01:51,769
If you try to Google on
auth library for Next.

35
00:01:51,769 --> 00:01:56,029
js, you are likely to run into this.

36
00:01:56,189 --> 00:01:56,929
Nextauth.

37
00:01:57,199 --> 00:01:57,629
js.

38
00:01:58,129 --> 00:01:59,869
Yes, that's a must.

39
00:02:00,769 --> 00:02:05,969
popular solution for
authentication for Next.

40
00:02:06,269 --> 00:02:06,789
js.

41
00:02:07,529 --> 00:02:09,169
Let's see their pitch.

42
00:02:10,019 --> 00:02:15,659
Open source, full stack, Unreal
data, easy, flexible security,

43
00:02:15,659 --> 00:02:17,869
of course, and the main.

44
00:02:18,369 --> 00:02:22,399
Add authentication in minutes.

45
00:02:22,569 --> 00:02:23,639
Sounds dreamy, right?

46
00:02:24,009 --> 00:02:27,779
Let's check the stat
on this magical beast.

47
00:02:28,539 --> 00:02:29,939
Let's check the stat.

48
00:02:30,439 --> 00:02:30,809
Yeah.

49
00:02:31,309 --> 00:02:34,339
Around zillions weekly downloads.

50
00:02:34,899 --> 00:02:36,730
800, kilobytes of unpacked size.

51
00:02:37,300 --> 00:02:45,629
500, around 500 files and,
86 open pool requests.

52
00:02:45,649 --> 00:02:50,519
That's, looks like a red flag
for me, but don't worry for now.

53
00:02:50,749 --> 00:02:51,969
Let's go to DEC.

54
00:02:52,969 --> 00:02:57,649
Let's go to DEC. Yeah, Let's
try it and let's set up it.

55
00:02:57,779 --> 00:03:00,219
set up looks very easy enough.

56
00:03:00,269 --> 00:03:02,939
we should add, an API route in Next.

57
00:03:02,939 --> 00:03:03,399
js.

58
00:03:04,309 --> 00:03:05,319
that's a standard.

59
00:03:06,069 --> 00:03:08,829
we should wrap the client
side in a provider.

60
00:03:09,329 --> 00:03:15,659
And finally, we should throw in some
UI components for signing, and that's

61
00:03:15,669 --> 00:03:19,069
simple, neat, and really quick.

62
00:03:19,769 --> 00:03:21,349
Should I say.

63
00:03:22,109 --> 00:03:27,709
We all talked about our current
scoreboard, for now, I suppose

64
00:03:27,719 --> 00:03:33,029
Nexo got 1, and White Ninja got 0.

65
00:03:33,529 --> 00:03:34,349
Yeah.

66
00:03:34,849 --> 00:03:35,799
Oops, remember?

67
00:03:36,169 --> 00:03:37,599
There is a small problem.

68
00:03:38,059 --> 00:03:38,479
Why?

69
00:03:38,609 --> 00:03:42,479
We need, because we need the
credential based authentication

70
00:03:42,479 --> 00:03:43,749
in here and guess what?

71
00:03:43,959 --> 00:03:47,539
Nextcloud does not
support it out of the box.

72
00:03:47,689 --> 00:03:48,539
What do Let's see.

73
00:03:48,939 --> 00:03:54,349
We got build it ourselves
We got built it ourselves.

74
00:03:54,589 --> 00:03:57,149
So here is a function.

75
00:03:57,649 --> 00:03:59,029
here is, some functions.

76
00:03:59,089 --> 00:04:04,619
There is a next old config, the
credential provider is declared.

77
00:04:05,369 --> 00:04:11,009
Here we have an authorized function
in it, authorized function in it,

78
00:04:11,519 --> 00:04:18,779
which makes a request to our backend,
API, or to our author, authorized

79
00:04:19,099 --> 00:04:20,929
service authorization service.

80
00:04:21,429 --> 00:04:21,879
Yeah.

81
00:04:22,189 --> 00:04:26,849
so look, what I mean about that, the
most important thing about that is that

82
00:04:27,029 --> 00:04:31,729
the size of the code era five kilobytes.

83
00:04:32,409 --> 00:04:37,299
We got five kilobytes of extra
code written no matter what you

84
00:04:37,359 --> 00:04:40,799
use, library or not library.

85
00:04:41,039 --> 00:04:44,199
And let's go deck to the deck.

86
00:04:44,699 --> 00:04:47,939
And see, I suppose what
needs is back in the game.

87
00:04:47,949 --> 00:04:55,469
So we have a tie here Okay, now let's
talk about, data flow in our application.

88
00:04:55,959 --> 00:05:00,199
For example, the user
requests a list of tasks.

89
00:05:00,829 --> 00:05:03,679
Browser sends a request to the Next.

90
00:05:03,679 --> 00:05:05,259
js API role.

91
00:05:06,104 --> 00:05:10,304
And next year forwards the request to
the backend with an access token in

92
00:05:10,304 --> 00:05:17,784
here, and also set backend, validates
the token, and either replace with 200.

93
00:05:17,904 --> 00:05:21,554
Okay, and here is your
data, or replies four.

94
00:05:21,554 --> 00:05:23,434
One unauthorized.

95
00:05:23,584 --> 00:05:25,804
And it's time to log in again.

96
00:05:26,274 --> 00:05:27,864
Dude, so far so good.

97
00:05:27,914 --> 00:05:32,524
But what happens when the access
token is about to be expired?

98
00:05:32,994 --> 00:05:36,414
It needs to be refreshed in
the background so the user

99
00:05:36,414 --> 00:05:38,774
doesn't get logged out randomly.

100
00:05:39,184 --> 00:05:42,984
Now, did the Nextcloud handle that?

101
00:05:43,804 --> 00:05:45,724
Of course, nope.

102
00:05:46,344 --> 00:05:49,704
Once again, we have to build it ourselves.

103
00:05:50,179 --> 00:05:56,749
And let's go to GitHub to
see how we cope with that.

104
00:05:57,249 --> 00:06:00,679
we have a refresh access
token function here.

105
00:06:01,179 --> 00:06:01,899
Let's check.

106
00:06:02,029 --> 00:06:07,629
Yeah, there is a request to
our auth service to refresh.

107
00:06:08,129 --> 00:06:12,389
payload and, and, and
we have a JWT callback.

108
00:06:13,379 --> 00:06:18,629
we call it here, we call it
here while checking if the

109
00:06:18,629 --> 00:06:21,169
token needs to be refreshed.

110
00:06:21,669 --> 00:06:24,269
Fine, let's go to the deck.

111
00:06:24,769 --> 00:06:26,299
what about scoreboard for now?

112
00:06:26,299 --> 00:06:31,129
I suppose at that point, Widenizer
goes ahead because Just because we

113
00:06:31,189 --> 00:06:35,159
had to write code one more time.

114
00:06:35,659 --> 00:06:38,769
Ah, at this point we need
to raise some question.

115
00:06:39,769 --> 00:06:42,789
What's the library even doing for us?

116
00:06:43,289 --> 00:06:45,719
What's the actual value of this library?

117
00:06:46,419 --> 00:06:48,739
What's the cost of an alternative?

118
00:06:49,489 --> 00:06:51,089
What are the sign costs?

119
00:06:51,589 --> 00:06:52,789
Let's make it clear.

120
00:06:52,809 --> 00:06:57,319
Sign costs is stuff we have to
implement anyway, library or not.

121
00:06:57,819 --> 00:07:01,279
We already have an estimation
for that, five kilobytes of

122
00:07:01,279 --> 00:07:04,809
credentials are set up in our app.

123
00:07:05,309 --> 00:07:08,649
Let's calculate the
cost of the alternative.

124
00:07:09,119 --> 00:07:14,489
We need functions to handle JWT and
create session, decrypt session.

125
00:07:14,949 --> 00:07:21,839
We need functions for session management,
like create, delete, refresh, update.

126
00:07:22,339 --> 00:07:26,019
We also need a couple of helpers
like getSession and ifSessionExists.

127
00:07:26,519 --> 00:07:30,069
And, let's have a look at VS Code.

128
00:07:30,669 --> 00:07:31,719
there is functions.

129
00:07:32,219 --> 00:07:33,219
There is functions.

130
00:07:33,219 --> 00:07:37,389
I sum up all of those, all
those functions in session TS.

131
00:07:37,889 --> 00:07:48,739
Encrypt, Decrypt, Create, Delete, Refresh,
Update, GetSession, and IsSessionExist.

132
00:07:49,559 --> 00:07:52,149
Okay, what's the most
important thing about that?

133
00:07:53,099 --> 00:08:00,799
The most important thing about that is
the size and I selected all the lines

134
00:08:00,859 --> 00:08:06,919
and the size is six kilobytes only.

135
00:08:07,419 --> 00:08:10,180
Okay, let's go to the deck again.

136
00:08:10,630 --> 00:08:11,440
What else?

137
00:08:11,800 --> 00:08:15,810
we also need a context provider
just like NextSouth has.

138
00:08:16,210 --> 00:08:19,830
We should also add middleware
for early request processing like

139
00:08:19,850 --> 00:08:21,410
token validation and refreshing.

140
00:08:21,910 --> 00:08:23,630
And, let's have a look.

141
00:08:24,570 --> 00:08:32,660
We have a session TSX here, which is
session context provider, with a couple

142
00:08:32,660 --> 00:08:37,890
of handy functions, getSessionState
here, and getToken, to getToken

143
00:08:38,300 --> 00:08:42,140
at front end, at the client here.

144
00:08:42,190 --> 00:08:51,525
And, what most important about there,
the size is 1.3 kilobytes of code.

145
00:08:51,765 --> 00:08:53,355
Let's check the middleware.

146
00:08:53,765 --> 00:08:54,995
Middleware here.

147
00:08:55,495 --> 00:08:57,685
A brief glance.

148
00:08:58,575 --> 00:09:00,525
what about middleware?

149
00:09:00,815 --> 00:09:06,765
2.2 kilobytes, four middleware.

150
00:09:07,315 --> 00:09:09,415
Let's go to the deck again.

151
00:09:10,415 --> 00:09:10,865
Yeah.

152
00:09:11,815 --> 00:09:14,725
We have 9.5 kilobytes of.

153
00:09:15,225 --> 00:09:16,155
Alternative code.

154
00:09:16,545 --> 00:09:19,535
That's our alternative cost.

155
00:09:20,035 --> 00:09:22,295
What's the final verdict here?

156
00:09:22,795 --> 00:09:28,639
Look 800 kilobytes 500 files versus 9.

157
00:09:28,640 --> 00:09:32,100
5 kilobytes and only three files.

158
00:09:32,340 --> 00:09:35,380
You tell me guys now who wins?

159
00:09:35,790 --> 00:09:39,270
That's a rhetorical question for me.

160
00:09:39,770 --> 00:09:43,230
Okay, when should we
use external libraries?

161
00:09:43,730 --> 00:09:50,290
The first is when you are on the clock
and you need something to run immediately.

162
00:09:50,630 --> 00:09:55,795
Second When the problem is truly complex
at first, trust me guys, you likely

163
00:09:55,935 --> 00:10:00,475
don't need to run React or WebRTC.

164
00:10:00,975 --> 00:10:06,905
The third, when the alternative is
way more expensive, but be aware here.

165
00:10:07,405 --> 00:10:11,055
Be aware of hidden costs like
library updates, breaking

166
00:10:11,055 --> 00:10:14,085
changes, or maintenance headaches.

167
00:10:14,245 --> 00:10:19,575
Be aware when you're lurking, when
you're stuck with the roadmap.

168
00:10:20,410 --> 00:10:24,170
Their bugs and their API decision.

169
00:10:25,040 --> 00:10:28,070
Now it's time to do homework.

170
00:10:28,570 --> 00:10:32,130
Please find one XOR
library in your project.

171
00:10:32,525 --> 00:10:38,225
Calculate the cost of the alternative,
if it's useful, get rid of it.

172
00:10:38,995 --> 00:10:43,925
And repeat it in a month,
and repeat it every month.

173
00:10:44,585 --> 00:10:50,225
Now, you might be thinking, Hey, mate, I
saw AXOS and query strings in your code.

174
00:10:50,465 --> 00:10:51,705
How can I trust you?

175
00:10:52,365 --> 00:10:54,795
Don't worry, there is no need to worry.

176
00:10:55,025 --> 00:11:00,675
That was ages ago, Now it's pure
web API fetch with a teeny wrapper.

177
00:11:01,235 --> 00:11:03,225
You can see it on the deck.

178
00:11:03,725 --> 00:11:04,885
Okay, that's it.

179
00:11:05,025 --> 00:11:05,665
That's it.

180
00:11:05,705 --> 00:11:07,905
And the last, but not the least.

181
00:11:08,345 --> 00:11:10,325
Always remember, guys.

182
00:11:10,585 --> 00:11:14,525
Syntactic sugar causes
cancer of semicolons.

183
00:11:14,925 --> 00:11:16,335
Feel free to reach out.

184
00:11:16,615 --> 00:11:17,755
And bye bye.

