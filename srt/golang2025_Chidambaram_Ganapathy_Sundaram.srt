1
00:00:00,450 --> 00:00:03,240
Hello, and welcome to our
session on Turbocharged Coline.

2
00:00:03,740 --> 00:00:05,720
The agenda for the session is as followed.

3
00:00:06,220 --> 00:00:10,660
We will start with an introduction
of who we are, what we do, and what

4
00:00:10,660 --> 00:00:12,700
inspired us to deliver this talk.

5
00:00:12,730 --> 00:00:16,500
In the conference today, we will take
a brief look at the history of the

6
00:00:16,500 --> 00:00:18,330
web and the current state of affairs.

7
00:00:18,830 --> 00:00:22,640
We will have a look at the hot wire
toolkit, the problem it tries to

8
00:00:22,640 --> 00:00:24,830
address, and especially at Turbo.

9
00:00:25,330 --> 00:00:27,010
Which will be followed by a demo.

10
00:00:27,510 --> 00:00:28,620
So who are we?

11
00:00:29,165 --> 00:00:29,385
Hi.

12
00:00:29,390 --> 00:00:29,490
Hi.

13
00:00:29,640 --> 00:00:34,349
I am TSA and my co-presenter, Chiam,
or as he's nicknamed, are both

14
00:00:34,349 --> 00:00:36,510
senior technologists at Infosys.

15
00:00:37,260 --> 00:00:40,650
We have worked on various domains
like identity and access management,

16
00:00:41,010 --> 00:00:42,455
platform engineering, and a tech.

17
00:00:43,440 --> 00:00:45,629
We are also the co-leader of the Go Guild.

18
00:00:46,129 --> 00:00:47,089
A few words on the gu.

19
00:00:48,050 --> 00:00:49,819
Go First is a Go Line user group.

20
00:00:49,819 --> 00:00:54,019
At Infosys, we act as consultants
to the wider organization

21
00:00:54,019 --> 00:00:55,490
on everything related to go.

22
00:00:56,299 --> 00:00:59,809
The idea behind forming this group
was to provide the go developers in

23
00:00:59,809 --> 00:01:04,329
the organization with a forum where
they can share their learnings, come

24
00:01:04,329 --> 00:01:08,410
with their challenges, and also work
on some cool project ideas that can

25
00:01:08,410 --> 00:01:13,479
later be used as accelerators in one
or more of our many client projects.

26
00:01:13,979 --> 00:01:17,550
Accelerators give us freedom,
as in there are no prescribed

27
00:01:17,550 --> 00:01:18,780
requirements to start with.

28
00:01:19,740 --> 00:01:21,780
We can innovate and improvise as we go.

29
00:01:22,320 --> 00:01:25,380
They give us the opportunity
to explore and experiment

30
00:01:25,380 --> 00:01:27,300
with new tools and techniques.

31
00:01:27,780 --> 00:01:31,440
But on the flip side, we need to work
with the limited bandwidth of our fellow

32
00:01:31,440 --> 00:01:36,425
developers who take time out of the busy
schedule to participate in this endeavor.

33
00:01:37,365 --> 00:01:41,294
Does, we need to set realistic
milestones to make sure we make

34
00:01:41,294 --> 00:01:42,784
progress within the constraint.

35
00:01:43,284 --> 00:01:47,484
After having a roadmap in place,
it becomes imperative to carefully

36
00:01:47,514 --> 00:01:50,514
pick and choose the tools we
use to build the application.

37
00:01:51,014 --> 00:01:55,095
Not only should the tool set help us
reach our goal, but also compliment

38
00:01:55,095 --> 00:01:58,604
the strengths and interests of the
developers working on the project.

39
00:01:59,174 --> 00:02:01,275
And hey, side projects
should be fun, right?

40
00:02:01,775 --> 00:02:07,535
This is a typical modern tech stack with
each layer designated to handle specific

41
00:02:07,535 --> 00:02:13,475
functionalities like user interface,
business logic, and data management.

42
00:02:13,975 --> 00:02:17,515
Picking the best options from each
layer can be a difficult task.

43
00:02:18,025 --> 00:02:23,095
With options offering similar
features, it becomes even harder.

44
00:02:23,595 --> 00:02:25,785
We were sorted on the
server side technologies.

45
00:02:26,025 --> 00:02:28,995
We knew what we wanted to
use, our favorite language,

46
00:02:28,995 --> 00:02:30,225
go for building the backend.

47
00:02:30,855 --> 00:02:34,360
We repurposed a Postgres instance
that was used for A POC earlier.

48
00:02:35,015 --> 00:02:39,445
We also found a VM to host our application
on while we were deliberating on which

49
00:02:39,445 --> 00:02:41,125
framework to use for our front end.

50
00:02:41,625 --> 00:02:45,525
There was a moment where we asked
ourselves, do we even need one of

51
00:02:45,525 --> 00:02:46,935
these frameworks to build a front end?

52
00:02:47,594 --> 00:02:53,418
Can't we just stick to plain old
STML and CSS, but at the same time,

53
00:02:53,598 --> 00:02:57,378
we wanted to be sure we do not end
up building a product that looks

54
00:02:57,378 --> 00:02:59,268
and feels like something from a gon.

55
00:02:59,768 --> 00:03:03,398
At this point, I would like
us to look back at the history

56
00:03:03,398 --> 00:03:04,418
and evolution of the web.

57
00:03:05,348 --> 00:03:10,973
In the nineties, we had technologies
like CGI, script, PHP, and H, TM L. Times

58
00:03:10,973 --> 00:03:15,138
were simpler, the backend application
would render the UI and send it to the

59
00:03:15,138 --> 00:03:17,148
browser to be displayed on the screen.

60
00:03:17,648 --> 00:03:21,998
the 2000 saw the rise of web
APAs thanks to Ajax, a technique

61
00:03:21,998 --> 00:03:25,298
that allowed for the asynchronous
application of the page without

62
00:03:25,298 --> 00:03:28,078
refreshing the screen in the 2000 tens.

63
00:03:28,078 --> 00:03:31,708
With more and more people making use
of the internet, service providers

64
00:03:31,708 --> 00:03:35,068
started finding it increasingly
difficult to scale their offerings

65
00:03:35,068 --> 00:03:36,478
to cater to the rising demand.

66
00:03:36,978 --> 00:03:41,418
This decade saw many notable
advancements in software technology

67
00:03:41,418 --> 00:03:42,978
to deliver services at scale.

68
00:03:43,478 --> 00:03:48,308
SPS, or single page applications came
about during that time to address the

69
00:03:48,308 --> 00:03:53,648
challenges of scale at a few other
evolving needs, and by the end of the

70
00:03:53,678 --> 00:03:58,838
decade, it led to its proliferation with
multiple such libraries and frameworks

71
00:03:58,898 --> 00:04:00,338
offering similar functionality.

72
00:04:00,838 --> 00:04:01,648
Forward to today.

73
00:04:01,888 --> 00:04:06,328
Most of the services and application
we u we use on a day-to-day

74
00:04:06,328 --> 00:04:08,798
basis, are powered by sps.

75
00:04:09,298 --> 00:04:14,108
Sadly, developers treat sps and,
as the default option or sometimes

76
00:04:14,228 --> 00:04:18,608
the only option for building front
end, irrespective of whether our

77
00:04:18,608 --> 00:04:21,969
solution would really benefit
from what s ps have to offer.

78
00:04:22,359 --> 00:04:27,068
And despite the technical requirements and
complexities, SPS bring along with them.

79
00:04:27,568 --> 00:04:31,589
In our quest to find a simpler
approach in building front ends for

80
00:04:31,589 --> 00:04:34,828
the 2020s, we stumbled upon the Roca.

81
00:04:35,328 --> 00:04:39,738
It turns out a group of developers
had faced the same dilemma as us.

82
00:04:40,428 --> 00:04:45,228
Their collaborative efforts and shared
experiences resulted in a recommendations,

83
00:04:45,549 --> 00:04:48,979
in a set of recommendations based
on well established concepts like

84
00:04:48,979 --> 00:04:50,598
rest and progressive enhancement.

85
00:04:51,098 --> 00:04:55,208
Roca or the resource oriented
Client Architecture style guide

86
00:04:55,208 --> 00:04:59,558
is a set of recommendations for
building web application front end.

87
00:05:00,158 --> 00:05:03,848
The recommendations are based on a
few well-established ideas like unru,

88
00:05:03,848 --> 00:05:05,618
JavaScript, progressive Enhancement.

89
00:05:06,008 --> 00:05:10,418
Those are related strategies for building
front ends that offer the core features

90
00:05:10,478 --> 00:05:15,698
to all its users while providing enhanced
experience to users with modern browsers.

91
00:05:16,198 --> 00:05:20,398
The guide also recommends building
server side applications that

92
00:05:20,398 --> 00:05:25,318
return semantic HS TML, that is
independent of the layout information.

93
00:05:25,818 --> 00:05:30,458
Enter Hotwire or HTML over the wire
is a toolkit that aligns with the

94
00:05:30,548 --> 00:05:34,388
recommendations made in the style
guide like the usage of semantic

95
00:05:34,388 --> 00:05:36,338
STML, and unobtrusive JavaScript.

96
00:05:37,013 --> 00:05:40,943
The toolkit is part of the Rails
ecosystem and is running in production

97
00:05:40,943 --> 00:05:43,253
for apps like Basecamp and hey.com.

98
00:05:43,753 --> 00:05:48,854
Hotwire consists of three libraries
Turbo that lets you decompose your

99
00:05:48,854 --> 00:05:53,263
page into independent segments
that can be updated independently.

100
00:05:53,763 --> 00:05:58,024
Stimulus is a lightweight JavaScript,
a lightweight JavaScript framework that

101
00:05:58,024 --> 00:06:02,994
gives you the means to attach JavaScript
to STML, to S TM L elements using simple

102
00:06:02,994 --> 00:06:08,443
annotations and native that lets you
run your, your hot buyer application

103
00:06:08,534 --> 00:06:11,563
natively on Android and iOS based devices.

104
00:06:12,063 --> 00:06:16,549
This is your typical flow with ps.
You have an application written in

105
00:06:16,549 --> 00:06:18,498
JavaScript that runs on the browser.

106
00:06:18,998 --> 00:06:22,149
It interacts with the backend
server by making asynchronous

107
00:06:22,149 --> 00:06:24,159
calls and on receiving a response.

108
00:06:24,159 --> 00:06:28,568
It processes the data and then proceeds
to update the page without deloading, the

109
00:06:28,568 --> 00:06:33,149
complete page Turbo offers you similar
capabilities without you having to write

110
00:06:33,209 --> 00:06:35,039
even a single line of JavaScript code.

111
00:06:35,539 --> 00:06:40,934
Turbo lets you decompose your webpage into
independent units called Frames, which

112
00:06:40,994 --> 00:06:46,324
enables the underlying library to uniquely
identify and update these elements when

113
00:06:46,324 --> 00:06:50,509
a page navigation occurs, or when a
form, or when a form submission, event

114
00:06:50,769 --> 00:06:55,769
occurs, In situations where you don't
want to replace an entire section with

115
00:06:55,769 --> 00:07:01,589
something new, but you would rather upend
or prepend a new element to it, you have

116
00:07:01,589 --> 00:07:03,779
the option of making use of turbo streams.

117
00:07:04,439 --> 00:07:08,604
It gives you nine different options
for manipulating elements in the do

118
00:07:09,104 --> 00:07:13,604
Turbo streams also has support
for web sockets and service id.

119
00:07:14,294 --> 00:07:18,224
So in situations where you want your
server to push updates to your front

120
00:07:18,224 --> 00:07:20,494
end, you get it out of the box.

121
00:07:20,994 --> 00:07:21,384
Okay?

122
00:07:22,014 --> 00:07:23,514
Now it's time for a short demo.

123
00:07:24,014 --> 00:07:24,374
Okay.

124
00:07:24,374 --> 00:07:28,004
So this is a simple application
that has a form and when you,

125
00:07:28,103 --> 00:07:29,513
when you type in your name.

126
00:07:30,013 --> 00:07:31,243
And submit the form.

127
00:07:31,363 --> 00:07:33,593
You are shown a greetings message here.

128
00:07:34,253 --> 00:07:35,243
So if you look at the.

129
00:07:36,068 --> 00:07:40,418
This is the main go, the main
go file where we have the, the

130
00:07:40,418 --> 00:07:42,038
app, the application running.

131
00:07:42,578 --> 00:07:45,478
So if you look at the backend
code here, we've got two handlers.

132
00:07:45,518 --> 00:07:47,258
the index handler and the greet handler.

133
00:07:47,678 --> 00:07:51,718
The index handler is used to serve the
main, the index page, which has the.

134
00:07:52,288 --> 00:07:55,078
Which has the form and
then the greetings handler.

135
00:07:55,108 --> 00:07:59,128
it is a post endpoint, which
basically accepts the form value.

136
00:07:59,588 --> 00:08:04,063
and it displays, it executes the
go, the greetings view, and it

137
00:08:04,063 --> 00:08:05,903
displays the, the greetings message.

138
00:08:06,173 --> 00:08:08,968
So also note that we have added
a synthetic delay of a hundred

139
00:08:08,968 --> 00:08:12,398
milliseconds to, to simulate the
applications in the real world.

140
00:08:13,368 --> 00:08:15,168
so if you look at the templates here.

141
00:08:16,083 --> 00:08:18,003
So we can see we've got two templates.

142
00:08:18,003 --> 00:08:20,523
We've got Index and Greetings.

143
00:08:21,153 --> 00:08:24,703
So the index template, here
consists of the form and a heading.

144
00:08:25,513 --> 00:08:26,323
The Greetings.

145
00:08:26,353 --> 00:08:30,403
It has the same heading and
also the paragraph tab, which

146
00:08:30,403 --> 00:08:32,563
contains the, Greetings message.

147
00:08:32,953 --> 00:08:38,253
We have also extracted, the, the
header and the photo of our application

148
00:08:38,313 --> 00:08:41,243
in, into individual, templates.

149
00:08:41,563 --> 00:08:44,533
we are calling it header and photo,
and we've put them inside the

150
00:08:44,863 --> 00:08:46,658
layouts, the layout subdirectory.

151
00:08:47,158 --> 00:08:51,598
So the header contains the head
tag, the starting the opening

152
00:08:51,628 --> 00:08:53,998
STML tag and the opening body tag.

153
00:08:54,088 --> 00:08:58,388
Whereas the footer template
contains the, the closing, the

154
00:08:58,388 --> 00:09:00,548
closing body N-S-T-M-L tags.

155
00:09:01,048 --> 00:09:06,428
Now this application does not make use
of, of any of the hot wired constructs.

156
00:09:06,428 --> 00:09:12,678
So if we submit this form again, and if
we look at the network tab, so you'll

157
00:09:12,678 --> 00:09:18,548
notice that the server response with
the, the, with the new webpage and

158
00:09:18,548 --> 00:09:22,928
the browser has to reload the webpage,
to display the greetings message.

159
00:09:23,918 --> 00:09:28,518
Now what if we want to, make sure that
not the we only get, we can display

160
00:09:28,518 --> 00:09:33,638
the, just the greetings message without
having to reload the entire application.

161
00:09:34,388 --> 00:09:40,448
So now let's quickly jump to the other
branch where we have included or where

162
00:09:40,448 --> 00:09:43,248
we have implemented, turbo Frame.

163
00:09:43,748 --> 00:09:44,048
Cool.

164
00:09:44,548 --> 00:09:50,038
So here first we need to include, the
turbo distributable, in our application.

165
00:09:50,038 --> 00:09:54,338
So here we come to the header,
layout, and we include, the

166
00:09:54,338 --> 00:09:56,408
distributable in a script type.

167
00:09:56,908 --> 00:10:01,048
then we need to modify
the, the, the template.

168
00:10:01,918 --> 00:10:05,708
So here, if we look at the index
template, so just about the form

169
00:10:05,708 --> 00:10:09,848
type, we, we have added a turbo
frame type with the idea of message.

170
00:10:10,348 --> 00:10:15,388
and, notice we have removed the
greetings, template or the greetings

171
00:10:15,388 --> 00:10:17,818
view, and we have moved it into partial.

172
00:10:18,388 --> 00:10:23,778
So now this, instead of, returning
the, returning a new page.

173
00:10:24,498 --> 00:10:29,258
What this will, do is it, this essentially
becomes our API or rather the response

174
00:10:29,288 --> 00:10:31,088
of our API of the greetings API.

175
00:10:31,508 --> 00:10:39,008
So when the greetings API is gets invoke,
it renders this view or this partial,

176
00:10:39,368 --> 00:10:42,283
and it returns this as a response.

177
00:10:42,783 --> 00:10:46,193
So here we've got a, we've
got a turbo frame, element

178
00:10:46,223 --> 00:10:48,388
with the, with the ID message.

179
00:10:48,778 --> 00:10:52,773
And here if you look at the, if
you go back, to our index template.

180
00:10:53,163 --> 00:10:56,753
So what we can notice is, we
have this turbo frames, tag right

181
00:10:56,753 --> 00:10:58,193
above the form which will get.

182
00:10:58,973 --> 00:10:59,453
Replaced.

183
00:10:59,863 --> 00:11:03,433
once the, once this browser receives
the response from the backend.

184
00:11:03,763 --> 00:11:08,923
And here also we have, we have provided
an attribute, data turbo frame, which,

185
00:11:08,973 --> 00:11:13,713
tells, turbo, which particular turbo frame
to update when it receives the response.

186
00:11:14,213 --> 00:11:16,493
So now if we run this application.

187
00:11:16,993 --> 00:11:19,753
Let's go to the index page.

188
00:11:20,503 --> 00:11:21,043
Cool.

189
00:11:21,543 --> 00:11:24,213
And if we enter a name

190
00:11:24,713 --> 00:11:29,173
and submit it, then we can see
that, this is, this becomes,

191
00:11:29,203 --> 00:11:31,543
this changes to an XHR request.

192
00:11:32,043 --> 00:11:32,463
over here.

193
00:11:32,463 --> 00:11:34,293
So we can see it's a fetch request.

194
00:11:34,793 --> 00:11:40,543
And the server responds with this,
with this turbo frame, which then

195
00:11:40,543 --> 00:11:45,753
is updated by, which then hot buyer
or turbo uses to update the dome.

196
00:11:46,253 --> 00:11:50,033
But what if we don't want to,
replace the entire element?

197
00:11:50,063 --> 00:11:51,473
What if you want to upend.

198
00:11:51,858 --> 00:11:54,408
the response to one of
the existing elements.

199
00:11:54,618 --> 00:11:56,868
So say for example, a
chat application, right?

200
00:11:56,868 --> 00:12:02,179
Where when you, when you are chatting,
when the user is, interacting with

201
00:12:02,179 --> 00:12:05,028
the web application, you would want
to, ideally what you would want

202
00:12:05,028 --> 00:12:08,518
to do is you would want to append
the messages as in when they come.

203
00:12:09,018 --> 00:12:12,678
So let's take a look at a chat
application, a sample chat

204
00:12:12,678 --> 00:12:14,473
application that we have built.

205
00:12:14,973 --> 00:12:20,923
So this is a sample chat application where
the user can come and, enter a message.

206
00:12:20,923 --> 00:12:30,358
So I can ask a question like, can you
tell me about the Con 42 con current?

207
00:12:30,858 --> 00:12:35,443
Now, this particular version does not
make use of any of the turbo features.

208
00:12:35,803 --> 00:12:38,023
So if you look at the network tab now.

209
00:12:38,523 --> 00:12:41,733
If we, yeah, so if we send this message,

210
00:12:42,233 --> 00:12:48,803
we can see that the, that the backend
responds with a new page, which is then

211
00:12:48,803 --> 00:12:51,443
rendered by the, browser, on the screen.

212
00:12:52,283 --> 00:12:53,873
If we take a look at the code.

213
00:12:54,368 --> 00:12:58,638
So here, if we, if you look at the,
if you look at the backend code,

214
00:12:58,638 --> 00:13:02,828
we've got, we've got one addition in
terms of the, in terms of services.

215
00:13:02,828 --> 00:13:07,198
So we've got, we've got a Germany service,
which is basically a thin wrapper over an

216
00:13:07,198 --> 00:13:12,898
s TT P client, which helps us communicate
with Germany and get the chat completions.

217
00:13:13,398 --> 00:13:17,868
And, if we look at the templates,
so for this application

218
00:13:17,868 --> 00:13:19,638
we have a single template.

219
00:13:19,698 --> 00:13:22,268
So this is the index
or the index template.

220
00:13:22,268 --> 00:13:27,648
So here, we have the form, which lets
you type in the message and send it.

221
00:13:28,038 --> 00:13:33,168
And on top of that, we are, we are
rendering the messages that we receive

222
00:13:33,168 --> 00:13:34,878
from either the user or from the bot.

223
00:13:35,538 --> 00:13:38,808
So that is done by, storing the message.

224
00:13:39,013 --> 00:13:40,033
in, in memory.

225
00:13:40,393 --> 00:13:44,698
So we have a message struck and
we've got a sender and a text.

226
00:13:44,938 --> 00:13:48,228
So this can be, the sender
can either be human or a bot.

227
00:13:48,528 --> 00:13:51,288
And the text, responds to
the corresponding message.

228
00:13:51,828 --> 00:13:54,339
And we have a struck called, messages.

229
00:13:54,388 --> 00:13:57,779
which, which includes
an area of, of messages.

230
00:13:58,279 --> 00:14:03,219
And, so whenever, as and when we receive
messages, so whenever we receive a new

231
00:14:03,219 --> 00:14:07,149
request, we add that message, into the ra.

232
00:14:07,479 --> 00:14:11,279
And then when we get the corresponding
res, response from the, from the

233
00:14:11,279 --> 00:14:17,069
Gemini model, we'll add the message,
marking it as bot or as a bot message.

234
00:14:17,569 --> 00:14:21,799
So this is what the
application looks like.

235
00:14:21,799 --> 00:14:24,589
It's a pretty simple application,
so every time you send a message,

236
00:14:24,679 --> 00:14:26,479
the request goes to the backend.

237
00:14:26,599 --> 00:14:33,869
It basically, gets the response from the,
from, from Gemini, then renders the, then

238
00:14:33,869 --> 00:14:38,339
renders the view along with the message
history and sends it back to the user.

239
00:14:39,209 --> 00:14:43,679
Now if you want to make this process
asynchronous, and if you want to

240
00:14:43,679 --> 00:14:51,844
make that partial update, then let's
check out, check out Turbo Stream.

241
00:14:52,344 --> 00:14:52,634
Good.

242
00:14:53,134 --> 00:14:58,409
So here, if we look at the index,
so the routes don't change.

243
00:14:58,459 --> 00:15:00,559
we still have, two routes.

244
00:15:00,559 --> 00:15:05,409
So one is the index handler, and,
which basically serves the index.

245
00:15:05,409 --> 00:15:07,119
Do, which, serves the index view.

246
00:15:07,619 --> 00:15:13,589
And then we have a chat handler, which
basically accepts the OR, or takes the

247
00:15:13,589 --> 00:15:18,539
request, extracts the extracts, the
message gets the completion from Gemini

248
00:15:19,319 --> 00:15:23,059
and it, it sends back the message segment.

249
00:15:23,419 --> 00:15:23,959
Partial.

250
00:15:24,529 --> 00:15:29,969
So here, what the, the change that we
can see here is instead of a template

251
00:15:30,029 --> 00:15:34,539
which gets s rendered here we have
a diff tag with the ID messages,

252
00:15:35,039 --> 00:15:39,559
which provides, a target, which can
be used as a target identifier by

253
00:15:39,559 --> 00:15:41,658
turbo to make the partial updates.

254
00:15:42,158 --> 00:15:45,698
Now if we look at the partials,
so we have created a new

255
00:15:45,698 --> 00:15:47,458
partial call, message segment.

256
00:15:48,028 --> 00:15:53,728
So as you can see, we, the API, the chat,
API now basically returns a turbo stream

257
00:15:53,788 --> 00:15:59,288
element, with a few instructions for, with
a few instructions, for turbo for this.

258
00:15:59,498 --> 00:16:05,058
So we've got an, we've got an append,
We got an action attribute which

259
00:16:05,058 --> 00:16:06,918
says what to do with the response.

260
00:16:06,918 --> 00:16:11,838
So here it clearly mentions
that we want to append.

261
00:16:12,198 --> 00:16:14,198
The, the response to the target.

262
00:16:14,228 --> 00:16:16,783
And here we need to pass
the target identifier.

263
00:16:16,843 --> 00:16:19,333
So we pass messages as the identifier.

264
00:16:19,333 --> 00:16:24,103
turbo looks for, for an element
in the dome with the ID target and

265
00:16:24,103 --> 00:16:27,043
it upends the, the response to it.

266
00:16:27,673 --> 00:16:32,813
So another thing to note here is that,
the, your response need to, needs to

267
00:16:32,813 --> 00:16:35,423
be nested inside the template tags.

268
00:16:35,923 --> 00:16:37,813
For this entire mechanism to work.

269
00:16:38,313 --> 00:16:43,103
And the final change that we
need is, if we go back to main.

270
00:16:43,603 --> 00:16:48,853
So now if you notice over here we were
sending the content type, we were setting

271
00:16:48,853 --> 00:16:53,343
the content type to text HTML for the,
in the previous cases where we were just

272
00:16:53,433 --> 00:16:58,573
sending back, the entire H Tm L page,
even for, even for Turbo, even for turbo

273
00:16:58,573 --> 00:17:01,533
frame, it works if you send the response.

274
00:17:01,868 --> 00:17:04,768
if your response contains a
header, which signifies the

275
00:17:04,768 --> 00:17:06,748
content type is a text, HTML.

276
00:17:07,258 --> 00:17:11,508
But in case of, turbo Stream,
we need to, set it to text

277
00:17:11,508 --> 00:17:13,038
vendor, turbo Stream, or html.

278
00:17:13,428 --> 00:17:15,288
Otherwise, it does not
work for some reason.

279
00:17:15,788 --> 00:17:20,128
Okay, so now let's run this application.

280
00:17:20,628 --> 00:17:21,108
Cool.

281
00:17:21,608 --> 00:17:26,623
We go to local host A 80 right
now, we can ask the same question

282
00:17:27,123 --> 00:17:32,018
to notice that the request
changed to, to a fetch tape.

283
00:17:32,664 --> 00:17:34,974
And the response that we receive from it.

284
00:17:35,474 --> 00:17:40,833
Okay, so the response here,
it looks like this and we can

285
00:17:40,833 --> 00:17:42,273
continue chatting with this, right?

286
00:17:42,273 --> 00:17:48,833
So say, when was the first conference?

287
00:17:49,254 --> 00:17:51,913
That was the first, conference.

288
00:17:52,413 --> 00:17:54,123
Okay, so we have the answer here.

289
00:17:54,813 --> 00:17:58,203
And if you look at the response
that we received, it's just,

290
00:17:58,273 --> 00:17:59,593
it's just the last message.

291
00:17:59,593 --> 00:18:04,903
So now it's not sending the entire
STML page, it's just sending the

292
00:18:04,903 --> 00:18:06,513
response to the previous request.

293
00:18:07,013 --> 00:18:07,493
okay.

294
00:18:07,493 --> 00:18:11,053
So we can continue this conversation, is.

295
00:18:11,553 --> 00:18:17,214
Go, functional book and language.

296
00:18:17,714 --> 00:18:23,554
So as you can see, the backend only
responds with only the only response,

297
00:18:24,094 --> 00:18:26,474
with only the code segment that it wants.

298
00:18:26,834 --> 00:18:29,894
Turbo a pen to the messages Dave.

299
00:18:30,394 --> 00:18:34,894
Make sure you check out our repository,
Gocha Turbo, where we have implemented a

300
00:18:34,924 --> 00:18:40,714
chatbot application using our web sockets
and integrated it with turbo streams.

301
00:18:41,214 --> 00:18:44,154
So how has the journey been for us so far?

302
00:18:45,114 --> 00:18:49,014
We have embraced some of the
recommendations made in Roca style Guide

303
00:18:49,164 --> 00:18:51,354
to keep our tech stack lean yet effective.

304
00:18:52,299 --> 00:18:55,779
As a result, we have a single
repository and a single pipeline

305
00:18:55,779 --> 00:18:56,979
for the entire application.

306
00:18:57,699 --> 00:19:00,699
We also notice 50% reduction
in effort compared to our

307
00:19:00,699 --> 00:19:02,229
original estimates with SPA.

308
00:19:03,099 --> 00:19:06,309
And finally, we have a happy
bunch of developers who can

309
00:19:06,309 --> 00:19:07,959
work with a simple set of tools.

310
00:19:08,459 --> 00:19:12,029
We encourage you to visit the website
of Roca style Guide and have a look

311
00:19:12,029 --> 00:19:16,439
at the recommendations, and also give
Hotwire a try for your next site project.

312
00:19:16,939 --> 00:19:18,199
Thank you for joining us today.

313
00:19:18,619 --> 00:19:19,309
Until next time.

314
00:19:19,764 --> 00:19:20,254
Goodbye.

