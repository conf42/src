1
00:00:00,749 --> 00:00:05,230
Hey everyone, Peter De Tender here,
more than happy to have you here, for

2
00:00:05,360 --> 00:00:10,239
attending my session, discovering and
talking about DevSecOps as an approach,

3
00:00:10,239 --> 00:00:15,370
I know it's a long title, DevSecOps as an
approach to building and deploying secure

4
00:00:15,370 --> 00:00:17,850
applications by using shifting left.

5
00:00:18,390 --> 00:00:19,490
So my name is Peter.

6
00:00:19,640 --> 00:00:22,389
I'm a Microsoft technical
trainer at Microsoft.

7
00:00:22,670 --> 00:00:26,650
Which means I'm actually helping our
enterprise customers across the globe

8
00:00:27,110 --> 00:00:28,690
every single day, every single week.

9
00:00:29,044 --> 00:00:33,864
Delivering, workshops where, no surprise,
Microsoft DevOps solutions, both Azure

10
00:00:33,864 --> 00:00:37,425
DevOps and GitHub, are my prime, topics.

11
00:00:38,164 --> 00:00:40,875
If you should have any questions
during the conference or you're

12
00:00:40,885 --> 00:00:45,254
watching this later on as a
virtual recording, don't hesitate

13
00:00:45,275 --> 00:00:47,525
reaching out on LinkedIn, Twitter.

14
00:00:47,525 --> 00:00:52,085
I'm on BlueSky in the meantime as
well, where my handle is PDTIT.

15
00:00:52,585 --> 00:00:57,145
Now, what we're going to cover in
the next 45 ish minutes is, the

16
00:00:57,145 --> 00:00:59,425
baseline of DevOps from there.

17
00:00:59,445 --> 00:01:02,365
Obviously I need to talk a bit
about shifting left because it's

18
00:01:02,365 --> 00:01:03,965
part of the title of my session.

19
00:01:04,560 --> 00:01:09,570
And then mapping the concept, the
culture of DevOps with some DevSecOps

20
00:01:09,580 --> 00:01:14,650
tooling, where I'm primarily focusing
on Azure DevOps and GitHub within

21
00:01:14,680 --> 00:01:17,130
our Microsoft DevOps product family.

22
00:01:17,779 --> 00:01:20,729
And as you can figure out, I'm
going to have quite some demos.

23
00:01:21,299 --> 00:01:24,259
Q& A is a little bit challenging,
although we're live during the

24
00:01:24,259 --> 00:01:25,939
conference on the Discord channel.

25
00:01:26,609 --> 00:01:30,220
But again, if you have any questions
afterwards, don't hesitate reaching out.

26
00:01:30,720 --> 00:01:33,369
You already know a little bit
about me, and it's obviously more

27
00:01:33,369 --> 00:01:34,830
important to know about the session.

28
00:01:35,009 --> 00:01:40,229
But within the Microsoft role, I've
been a trainer for close to six

29
00:01:40,229 --> 00:01:44,999
years now, before I joined Microsoft,
initially out of Belgium, supporting

30
00:01:45,000 --> 00:01:46,359
the West European customers.

31
00:01:46,899 --> 00:01:51,609
But about three years ago, managed
to move to the Redmond area.

32
00:01:51,729 --> 00:01:55,169
And in the meantime, because it's
all virtual, workshops supporting

33
00:01:55,169 --> 00:01:56,599
customers all over the globe.

34
00:01:57,349 --> 00:02:00,819
And a little bit of free time that
I have, I somehow still like to,

35
00:02:00,969 --> 00:02:04,589
share knowledge with communities
like presenting at conferences like

36
00:02:04,589 --> 00:02:07,059
this one, writing technical posts.

37
00:02:07,059 --> 00:02:10,029
Although on my blog, it's been
a little bit slow last couple of

38
00:02:10,040 --> 00:02:14,680
months, but then also supporting,
publishers, writers, giving them

39
00:02:14,690 --> 00:02:16,920
some ideas about writing content.

40
00:02:16,980 --> 00:02:19,240
If I did not publish a book myself.

41
00:02:19,740 --> 00:02:22,800
So with that, we're going to jump
into the actual topic of the session.

42
00:02:23,300 --> 00:02:25,660
And starting with the concept of DevOps.

43
00:02:25,730 --> 00:02:29,060
Now I'm pretty sure this is not the
first time you hear why we do have

44
00:02:29,070 --> 00:02:31,220
the whole day wrapped around DevOps.

45
00:02:31,230 --> 00:02:34,420
So I'm pretty sure this is
not, surprising if you've been

46
00:02:34,430 --> 00:02:35,900
watching all the other sessions.

47
00:02:36,530 --> 00:02:39,960
Now, my definition here, I would
say the Microsoft definition

48
00:02:40,030 --> 00:02:42,109
is the union of people.

49
00:02:42,570 --> 00:02:46,160
Processes and products to
enable continuous delivery

50
00:02:46,180 --> 00:02:48,110
of value to an end user.

51
00:02:48,630 --> 00:02:52,690
And you can think about this in
almost each and every concept.

52
00:02:53,130 --> 00:02:56,250
Union of people that's really
bringing the teams together.

53
00:02:56,300 --> 00:02:59,289
We have the developer teams, we
have the ops teams, and we're going

54
00:02:59,289 --> 00:03:04,200
to try and break down that wall,
trying to create a bridge, you could

55
00:03:04,200 --> 00:03:06,240
say, to bring those teams together.

56
00:03:06,560 --> 00:03:09,510
Now, in my DevOps classes,
I always explain that it's

57
00:03:09,510 --> 00:03:11,179
a lot more than just DevOps.

58
00:03:11,640 --> 00:03:11,899
Why?

59
00:03:11,899 --> 00:03:15,329
Because we also have product managers,
we have the business stakeholders,

60
00:03:15,380 --> 00:03:19,780
we have, C level, we have marketing,
and obviously we also have the user

61
00:03:19,810 --> 00:03:23,089
and the customer, depending a bit
on the scenario we're looking at.

62
00:03:23,790 --> 00:03:25,500
But that's in short what
we're talking about.

63
00:03:26,380 --> 00:03:30,040
Next to that, the process is the
automation piece, where I'll talk about

64
00:03:30,040 --> 00:03:34,350
it a little bit more later on, and then
the product can be releasing a piece of

65
00:03:34,350 --> 00:03:39,130
application, to your internal users and
obviously towards customers as well.

66
00:03:39,630 --> 00:03:42,170
Now, I also have a Peter definition.

67
00:03:42,250 --> 00:03:46,420
I think if, you're taking DevOps a
little bit serious and I've been training

68
00:03:46,430 --> 00:03:50,430
and implementing DevOps at customers
all over the globe for the last couple

69
00:03:50,430 --> 00:03:54,420
of years, so at some point in time,
I came up with my own definition.

70
00:03:54,850 --> 00:03:58,670
So Peter's definition about
DevOps is integrating the culture.

71
00:03:59,140 --> 00:04:03,460
delivering value to the end user,
relying on team collaboration

72
00:04:03,540 --> 00:04:05,340
and workload automation.

73
00:04:06,210 --> 00:04:07,310
Why is that important?

74
00:04:07,360 --> 00:04:12,510
Because honestly, DevOps is 60
percent related to the culture.

75
00:04:12,560 --> 00:04:17,450
Like again, thinking about the concepts,
breaking down the barriers, and only I

76
00:04:17,450 --> 00:04:20,580
would say 40% Focusing on the tooling.

77
00:04:21,180 --> 00:04:24,540
Now I'm not going to break down the
importance of tooling, but as in a lot of

78
00:04:24,540 --> 00:04:28,750
scenarios, if you focus too much on the
tooling, like implementing all the tools,

79
00:04:29,140 --> 00:04:33,070
but the teams are not collaborating,
there's no focus on automating anything.

80
00:04:33,790 --> 00:04:36,210
Then in the end, you're
not really doing DevOps.

81
00:04:36,310 --> 00:04:41,780
So that's my little twist on the DevOps
definition and focusing on the culture.

82
00:04:42,280 --> 00:04:47,240
Now with that a little bit specific within
DevOps, like why should we do DevOps?

83
00:04:47,290 --> 00:04:50,880
I would say it's really to
automate, not only yourself.

84
00:04:50,950 --> 00:04:55,510
That's actually what I always talk about
in my DevOps workshops at the first couple

85
00:04:55,510 --> 00:05:00,030
of minutes when starting, it's always
about, you're going to love DevOps because

86
00:05:00,030 --> 00:05:05,030
it's really about automating yourself,
automating your job, as much as possible.

87
00:05:05,590 --> 00:05:09,890
So wrapping this in a couple of,
slides, it means automating yourself

88
00:05:09,940 --> 00:05:12,330
and even more so automating everything.

89
00:05:13,060 --> 00:05:15,470
So the starting point is
the development cycle.

90
00:05:16,135 --> 00:05:19,895
The developer is the team or the
individual, but preferably the

91
00:05:19,895 --> 00:05:25,545
team, I would say, responsible for
building, writing the code, testing

92
00:05:25,545 --> 00:05:30,905
it, thinking about the language,
NET, C sharp could be, like a Java

93
00:05:30,925 --> 00:05:32,445
app, could be Node, could be Python.

94
00:05:32,465 --> 00:05:34,695
So that's the flexibility we have.

95
00:05:35,695 --> 00:05:40,105
Once the developer creates code, like
diving into Visual Studio, VS Code,

96
00:05:40,155 --> 00:05:42,725
Eclipse, IntelliJ, so many other examples.

97
00:05:43,225 --> 00:05:46,405
We're ready for the next step,
and that's validating code.

98
00:05:46,985 --> 00:05:50,655
The validation means that we're not
only trusting the developer work by

99
00:05:50,725 --> 00:05:54,935
checking the code, but we're also going
to integrate some other capabilities,

100
00:05:55,685 --> 00:06:00,485
checking the syntax later on for security,
checking for vulnerabilities, for example.

101
00:06:00,985 --> 00:06:05,125
To validate if the work that the
developer created is actually

102
00:06:05,125 --> 00:06:08,135
working fine, that's where we're
going to move it into a package.

103
00:06:08,545 --> 00:06:12,695
Now the package, you could say, in
a web application example, could

104
00:06:12,714 --> 00:06:16,805
be like a web deploy zip package
in like the NET framework or

105
00:06:16,815 --> 00:06:19,745
anything similar in other languages.

106
00:06:20,425 --> 00:06:24,075
The package also allows us to actually
release it to deploy it right away.

107
00:06:24,320 --> 00:06:26,560
And that's where we move
it into a running state.

108
00:06:27,240 --> 00:06:29,940
The running state, don't
get fooled too much here.

109
00:06:29,990 --> 00:06:32,080
Doesn't mean moving in production.

110
00:06:32,740 --> 00:06:36,469
Running could be moving on your
local machine, going through a

111
00:06:36,469 --> 00:06:40,109
bunch of validation steps, and then
running it in a test environment.

112
00:06:40,870 --> 00:06:45,700
Running it in a test environment to do
functional testing, smoke testing, And

113
00:06:45,700 --> 00:06:49,170
then maybe moving it into a staging
environment, where now you're going to

114
00:06:49,180 --> 00:06:53,620
run against performance testing, maybe
against security validation testing.

115
00:06:54,079 --> 00:06:56,840
And then ultimately, you want
to move it into production.

116
00:06:57,060 --> 00:07:01,320
So the, the traditional way of
deploying releasing Dev and test

117
00:07:01,330 --> 00:07:03,410
staging production is totally fine.

118
00:07:03,830 --> 00:07:06,570
You could also look into,
canary early adopter.

119
00:07:06,660 --> 00:07:10,410
Maybe you're more familiar with blue
green deployment, like a typical

120
00:07:10,420 --> 00:07:15,150
scenario in containers, but in the
end, it's all doing DevOps in some way.

121
00:07:15,665 --> 00:07:16,325
or the other.

122
00:07:17,265 --> 00:07:21,855
And then last we have the operations,
which means that we're going to manage,

123
00:07:21,885 --> 00:07:25,734
we're going to maintain it, we're going to
operate it, and then we technically, you

124
00:07:25,735 --> 00:07:27,995
could say, go back to the starting point.

125
00:07:28,735 --> 00:07:32,054
So that's the overview of my DevOps cycle.

126
00:07:32,554 --> 00:07:35,645
From here, we're going to expand
on it a little bit more and

127
00:07:35,645 --> 00:07:39,995
touching on the security of
each and every of those cycles.

128
00:07:40,240 --> 00:07:42,030
So the cycles are not changing.

129
00:07:42,240 --> 00:07:46,880
The cool thing here is that obviously
we're now moving into DevSecOps, where

130
00:07:46,880 --> 00:07:48,280
we're still doing the same thing.

131
00:07:48,500 --> 00:07:50,080
We're still automating ourselves.

132
00:07:50,120 --> 00:07:50,830
We're still.

133
00:07:50,880 --> 00:07:53,980
automating as much as possible,
but now we're going to squeeze

134
00:07:53,980 --> 00:07:56,880
in security wherever possible.

135
00:07:57,080 --> 00:07:58,050
Now, what does it mean?

136
00:07:58,140 --> 00:08:01,270
Just a couple of highlights
in the development stage.

137
00:08:01,560 --> 00:08:04,280
We're going to rely on, for
example, threat modeling.

138
00:08:04,380 --> 00:08:06,750
I'll show you in a demo
later on what it means.

139
00:08:07,270 --> 00:08:09,350
We're going to integrate
security code scanning.

140
00:08:09,510 --> 00:08:16,810
linting and like a PowerShell script,
for example, or we're going to integrate,

141
00:08:16,860 --> 00:08:20,970
built in security code scanning tools,
maybe relying on third party tools

142
00:08:21,110 --> 00:08:25,880
to bring in other capabilities, maybe
because you're standardized across

143
00:08:25,880 --> 00:08:29,840
different languages, which might
not be part of the core DevOps tool

144
00:08:29,840 --> 00:08:31,980
that you're using to recognize code.

145
00:08:32,325 --> 00:08:35,995
We're going to make sure that we're
storing credentials outside of the

146
00:08:35,995 --> 00:08:40,245
source code, where I'll show you a little
bit of what Key Vault could look like.

147
00:08:40,825 --> 00:08:44,475
And then the peer reviewing, it's not
really about the technology, it's not

148
00:08:44,475 --> 00:08:47,985
about the tooling, but that brings
me back into the cultural piece.

149
00:08:48,510 --> 00:08:54,090
where you could rely on colleagues to do
code reviews, to rely on them to actually,

150
00:08:54,270 --> 00:08:58,650
I don't know, get advice on what it means
to actually write secure code, and so on.

151
00:08:59,150 --> 00:09:02,480
In the validation stage, a lot
of it is quite similar to the

152
00:09:02,490 --> 00:09:03,840
actual developing piece, right?

153
00:09:04,185 --> 00:09:07,745
But that's where, again, we're going
to run code analysis, still validating

154
00:09:07,755 --> 00:09:12,575
that we don't have credentials, that
we integrate, secret security, secret

155
00:09:12,645 --> 00:09:18,505
management in again, Key Vault secret
store, or using the local secret options

156
00:09:18,545 --> 00:09:21,695
like in a Visual Studio NET scenario.

157
00:09:22,395 --> 00:09:26,585
In the end, no longer storing code,
secrets in the app settings JSON file.

158
00:09:26,615 --> 00:09:27,635
That's the main message.

159
00:09:28,495 --> 00:09:31,545
We can integrate approvals,
which means that we're going

160
00:09:31,545 --> 00:09:33,575
to use, source code branching.

161
00:09:33,585 --> 00:09:37,575
We're going to use pull requests and
it actually allows us to validate

162
00:09:37,575 --> 00:09:43,445
code submissions before they actually
get merged into our source control.

163
00:09:44,135 --> 00:09:45,495
Integrating unit testing.

164
00:09:45,505 --> 00:09:49,145
And then if you want another example,
if you're building, containerizing

165
00:09:49,165 --> 00:09:54,045
applications, then we can also integrate
container vulnerability scanning, which

166
00:09:54,045 --> 00:09:58,485
is obviously the same concept as code
scanning, but not only scanning code,

167
00:09:58,515 --> 00:10:00,825
but also the container wrapper around it.

168
00:10:01,325 --> 00:10:06,285
Then once we move into the next cycle,
that's closer to the running state, right?

169
00:10:06,365 --> 00:10:08,785
We're going to secure
infrastructure as code.

170
00:10:09,325 --> 00:10:13,264
Because up till now, in my examples
only touched on writing code, being

171
00:10:13,265 --> 00:10:17,805
the developer, but it's Relevant in
DevOps if we also start embracing

172
00:10:17,805 --> 00:10:19,845
automation for the operations team.

173
00:10:20,055 --> 00:10:24,675
So if you're using public cloud, you
could look into Azure templates, bicep

174
00:10:24,795 --> 00:10:27,275
arm, terraform in different clouds.

175
00:10:27,305 --> 00:10:32,295
Terraform could, again, be a good
option or, cloud formation in AWS where

176
00:10:32,295 --> 00:10:37,425
again, we rely on infrastructure as
code writing template syntax to deploy

177
00:10:37,425 --> 00:10:39,165
something in a cloud environment.

178
00:10:40,110 --> 00:10:44,890
Integrating container scanning,
integrating quality gates, allowing

179
00:10:44,900 --> 00:10:49,120
you to run your release pipelines,
but following certain conditions.

180
00:10:49,180 --> 00:10:54,170
If the conditions are not met, then
we're not even releasing the pipeline

181
00:10:54,170 --> 00:10:55,750
or not running the release pipeline.

182
00:10:56,715 --> 00:11:01,245
And then obviously everything you should
know about managing, securing your cloud

183
00:11:01,295 --> 00:11:07,055
environment, integrating Azure network
security, integrating Microsoft Defender

184
00:11:07,055 --> 00:11:10,945
products could be a good option if you're
using cloud on the Microsoft side at

185
00:11:10,945 --> 00:11:13,904
least, and then a little bit more on the.

186
00:11:14,365 --> 00:11:18,645
infrastructure security, integrating
overall network security,

187
00:11:18,735 --> 00:11:22,335
maybe pen testing, totally
away from developing and code.

188
00:11:23,225 --> 00:11:24,265
And then we're going to run it.

189
00:11:24,385 --> 00:11:28,405
So that's again, where we
have the security capabilities

190
00:11:28,405 --> 00:11:29,725
from the target platform.

191
00:11:29,905 --> 00:11:34,485
Again, using Azure as an example,
would be RBAC role based access, and

192
00:11:34,485 --> 00:11:36,355
again, still validating credentials.

193
00:11:36,725 --> 00:11:40,625
They're not part of code, but we
still need to start them somewhere.

194
00:11:40,665 --> 00:11:44,985
So you could use like app settings,
variables or environment variables,

195
00:11:45,475 --> 00:11:48,875
app configuration, and again,
preferably using Key Vault.

196
00:11:49,535 --> 00:11:52,515
And then once everything is
up and running, you could look

197
00:11:52,515 --> 00:11:54,785
into something, like a Azure.

198
00:11:55,530 --> 00:12:00,050
Defender for cloud, where it's our
security posture tool, allowing you

199
00:12:00,050 --> 00:12:04,880
to get a view on your security state,
looking into threat detection and

200
00:12:04,880 --> 00:12:10,380
mitigation, like the actual operational
piece, how to not only detect issues,

201
00:12:10,410 --> 00:12:16,140
but how to prevent them, but also do
some investigation, creating incidents

202
00:12:16,170 --> 00:12:20,550
where out of the Microsoft world, it
could, for example, be a tool like

203
00:12:20,560 --> 00:12:23,140
Sentinel or any other SIEM solution.

204
00:12:23,375 --> 00:12:25,655
If you want to use and look into that.

205
00:12:26,155 --> 00:12:30,635
Now, what we see in the field over the
last, I don't know, 20 something years,

206
00:12:30,655 --> 00:12:33,215
that's where I started my career in 96.

207
00:12:33,565 --> 00:12:38,375
So I've been around for a while and this
is basically what we did on prem cloud

208
00:12:38,385 --> 00:12:43,885
hybrid Where the security focus was
always happening all the way at the end

209
00:12:44,675 --> 00:12:48,785
why because that's where the runtime is
running That's also the environment which

210
00:12:48,785 --> 00:12:51,555
is typically under attack now nowadays.

211
00:12:51,595 --> 00:12:55,995
We actually find out and not only
nowadays I mean we've been like made aware

212
00:12:55,995 --> 00:12:58,245
about this for multiple years already.

213
00:12:58,865 --> 00:13:03,675
When an attack happens, it's typically way
too late, which means it's hard to detect.

214
00:13:03,675 --> 00:13:04,485
It's hard to fix.

215
00:13:04,495 --> 00:13:07,765
It's probably cost,
costly to try and fix it.

216
00:13:07,845 --> 00:13:11,305
And every now and then, like a ransomware
attack, there's a lot of information

217
00:13:11,305 --> 00:13:15,585
available from companies in the news
who actually didn't even manage to

218
00:13:15,585 --> 00:13:17,585
recover from ransomware attacks.

219
00:13:18,065 --> 00:13:22,705
So all this to say that instead of waiting
all the way to the end of the cycle.

220
00:13:23,130 --> 00:13:25,480
once it's only running in
production, that's where we're

221
00:13:25,480 --> 00:13:26,750
going to validate security.

222
00:13:27,160 --> 00:13:30,170
The mindset now is we're
going to shift left.

223
00:13:30,720 --> 00:13:33,990
And that's the clarification I
would say of the session title.

224
00:13:34,790 --> 00:13:40,620
And even more I would say, don't
just think about it in the, all the

225
00:13:40,620 --> 00:13:44,810
way at the left, like the planning
phase, the developing phase, but also

226
00:13:44,810 --> 00:13:49,300
make sure that security comes back in
each and every step of the scenario.

227
00:13:50,225 --> 00:13:53,155
That's pretty much it from
the presentation perspective.

228
00:13:53,315 --> 00:13:57,695
So from here, it's going to shift, quite
fast to a couple of different demos.

229
00:13:58,155 --> 00:14:02,015
I just have a few slides as a
placeholder for the actual demos to

230
00:14:02,015 --> 00:14:04,075
know what I'm, supposed to show you.

231
00:14:04,565 --> 00:14:09,791
So I'm going to start with, the first one,
and again, I'm mixing some of Azure DevOps

232
00:14:09,791 --> 00:14:13,935
with GitHub to show you that, again, it's
not, Always about the tooling, it's a

233
00:14:13,935 --> 00:14:18,055
lot more about understanding the culture,
the concept, and knowing what it's about.

234
00:14:18,765 --> 00:14:24,725
assuming that we are a developer,
or a DevOps member, I'm gonna open

235
00:14:24,725 --> 00:14:28,105
up my DevOps portal, there we go.

236
00:14:28,945 --> 00:14:33,235
This is my, DevOps world, so I'm
using Azure DevOps Cloud Service.

237
00:14:33,695 --> 00:14:38,105
And one of the first scenarios we
have is the project abstraction.

238
00:14:38,805 --> 00:14:42,315
So the way we organize this
is obviously permission based.

239
00:14:42,345 --> 00:14:45,295
We're going to create projects,
and within each and every project,

240
00:14:45,645 --> 00:14:47,455
we have, the permission model.

241
00:14:47,495 --> 00:14:51,555
So in this case, let's say Peter
is working as a DevOps team

242
00:14:51,575 --> 00:14:54,135
member on, my retail application.

243
00:14:54,590 --> 00:14:58,470
I'm going to give Peter specific
permissions, can be owner, maybe

244
00:14:58,470 --> 00:15:03,200
not even required to be an owner,
creating contributor permissions or

245
00:15:03,200 --> 00:15:08,240
so many other different levels, and
I'm working on another project where

246
00:15:08,240 --> 00:15:09,930
maybe I'm just a project manager.

247
00:15:09,970 --> 00:15:15,700
I don't need any technical permissions
to create code, to upload code, to run

248
00:15:15,700 --> 00:15:18,120
pipelines, and I have that flexibility.

249
00:15:18,410 --> 00:15:20,000
If you do not have the permissions.

250
00:15:20,290 --> 00:15:23,390
to see the project or to
participate in the project team.

251
00:15:23,460 --> 00:15:25,710
You're not even seeing
any of those details.

252
00:15:26,210 --> 00:15:31,950
And then within we can use the different
Azure DevOps features where for now, since

253
00:15:31,950 --> 00:15:37,340
I was talking about, source control, which
would be step number one, integrating

254
00:15:37,430 --> 00:15:42,560
your code in a source control scenario,
which would be get based source control.

255
00:15:43,275 --> 00:15:47,345
using Azure DevOps repos or using
GitHub and I'll show you that

256
00:15:47,715 --> 00:15:49,305
in the next couple of minutes.

257
00:15:49,985 --> 00:15:56,315
So I'm running my application and
one of the scenarios I have here is

258
00:15:56,815 --> 00:15:59,225
a repository where I'm storing code.

259
00:15:59,890 --> 00:16:04,150
So this level here comes back
here and I'm storing some code.

260
00:16:04,250 --> 00:16:09,320
I got my Azure pipelines and down here in
my source folder, that's where I actually

261
00:16:09,320 --> 00:16:12,270
have my web application using NET code.

262
00:16:13,250 --> 00:16:18,970
I'm mixing my Azure deployment, like
infrastructure as code, you could say with

263
00:16:18,970 --> 00:16:24,260
Azure Bicep, and I'm running some images
and whatnot in one single repository.

264
00:16:24,990 --> 00:16:28,310
Works totally fine, but there
might be a better option.

265
00:16:29,070 --> 00:16:34,010
The better option is what I have in
another project, where I'm using a

266
00:16:34,010 --> 00:16:36,900
scenario that's now called multi repo.

267
00:16:37,440 --> 00:16:40,660
So in this example, the
logic is roughly the same.

268
00:16:41,290 --> 00:16:44,800
I still have my eShopOnWeb,
that's my actual application

269
00:16:44,830 --> 00:16:46,420
code for my retail website.

270
00:16:46,970 --> 00:16:50,690
But now I got some ARM templates
for Infrastructure as Code.

271
00:16:50,830 --> 00:16:54,990
I'm migrating my ARM templates into
Bicep, so I'm going to store them

272
00:16:55,470 --> 00:16:57,550
in yet, a different repository.

273
00:16:58,150 --> 00:17:03,780
And the mindset behind it is that I can
integrate my source control permissions.

274
00:17:04,410 --> 00:17:06,250
into my repo as well.

275
00:17:06,620 --> 00:17:12,630
If my developer who's writing code
working on the retail website, I

276
00:17:12,630 --> 00:17:17,390
only need to give them permissions to
interact with my application code repo.

277
00:17:17,890 --> 00:17:21,140
They don't see anything else
from the infrastructure side and

278
00:17:21,150 --> 00:17:22,380
obviously the other way around.

279
00:17:22,510 --> 00:17:26,370
So that's an easy solution
multi repo model to split up

280
00:17:26,400 --> 00:17:28,160
where am I storing my code.

281
00:17:28,660 --> 00:17:31,770
From here, let's say we're
moving on in the stack, and

282
00:17:31,780 --> 00:17:33,230
I'm going to make some changes.

283
00:17:33,690 --> 00:17:35,690
So I'm in my application.

284
00:17:35,690 --> 00:17:43,520
I'm just going to use an Azure container
example, and I'm in the main repo.

285
00:17:44,120 --> 00:17:46,180
Inside, I'm going to make some changes.

286
00:17:46,560 --> 00:17:50,250
I'm going to use the Azure DevOps
portal to show you how easy it is to

287
00:17:50,420 --> 00:17:54,400
edit code, but in a real life scenario,
you would do this from your local

288
00:17:54,410 --> 00:17:58,390
machine, your development environment,
making changes, committing the changes,

289
00:17:58,410 --> 00:18:00,350
synchronizing to the repo backend.

290
00:18:00,790 --> 00:18:04,210
But I'm going to save you all that
to speed up my demo a little bit.

291
00:18:05,200 --> 00:18:06,620
So I'm going to make a change here.

292
00:18:06,700 --> 00:18:11,960
I'm just going to add, comment, Peter
update software or something similar.

293
00:18:12,030 --> 00:18:13,240
Not too important.

294
00:18:13,300 --> 00:18:14,230
I'm going to commit.

295
00:18:14,740 --> 00:18:16,960
I'm going to confirm, and
that's pretty much it.

296
00:18:17,660 --> 00:18:20,850
Now what happens here is okay,
but it's also quite tricky.

297
00:18:21,220 --> 00:18:21,460
Why?

298
00:18:21,460 --> 00:18:25,710
Because now I'm overwriting code, and
this could potentially break my code.

299
00:18:26,300 --> 00:18:28,300
So what we need is a mechanism.

300
00:18:29,020 --> 00:18:32,290
that I'm going to protect my main code.

301
00:18:32,360 --> 00:18:36,780
And that's where branching and pull
requests and approvals will come in.

302
00:18:37,580 --> 00:18:41,850
So what we're going to
do is back in our repos.

303
00:18:42,510 --> 00:18:45,260
And from there we go into branching.

304
00:18:45,370 --> 00:18:50,100
And as you can see, I already have
multiple branches and behind the branch,

305
00:18:50,210 --> 00:18:53,040
I can interact my branch policies.

306
00:18:53,570 --> 00:18:56,820
So what I would recommend
here is for example.

307
00:18:57,755 --> 00:19:02,415
forcing reviewers, remember I talked
about the peer reviewing, which

308
00:19:02,415 --> 00:19:06,425
means that if I enable this, I can
specify how many reviewers, and I

309
00:19:06,425 --> 00:19:10,565
could actually specify who is part
of the reviewing permission team.

310
00:19:11,185 --> 00:19:17,485
And if, some code submission, a
new update or update in the code,

311
00:19:18,050 --> 00:19:21,850
is getting submitted, that's
going to trigger a pull request.

312
00:19:22,390 --> 00:19:26,310
And I'm not even allowed to
merge if there's no approval.

313
00:19:26,530 --> 00:19:28,020
So that's, a good option there.

314
00:19:28,520 --> 00:19:32,760
There's a few other settings, but I guess
the baseline, should be okay enough.

315
00:19:32,820 --> 00:19:38,580
So if I take one step back, I go
back into, whoops, my branches.

316
00:19:39,110 --> 00:19:41,620
Let me go back to my
repo, back to my branch.

317
00:19:42,430 --> 00:19:45,720
I'm gonna, Open up the other branch.

318
00:19:45,730 --> 00:19:47,460
So I got the main, I got a second one.

319
00:19:47,760 --> 00:19:51,280
And whenever we make a change
in another branch besides main,

320
00:19:51,680 --> 00:19:55,840
it means that now we cannot even
directly update the main branch.

321
00:19:55,930 --> 00:19:58,960
So we need to offer a pull request.

322
00:19:59,020 --> 00:20:03,120
now a pull request is actually a
suggestion, you could say, where

323
00:20:03,610 --> 00:20:08,590
my colleague Jason here, made some
updates in code and now suggesting

324
00:20:08,590 --> 00:20:11,120
them for me to merge them into main.

325
00:20:11,970 --> 00:20:15,960
We can still provide a title,
we define a description and

326
00:20:16,030 --> 00:20:17,940
again, defining the reviewers.

327
00:20:18,410 --> 00:20:22,010
And that's, I would say bringing in
again, the culture, like we're not

328
00:20:22,010 --> 00:20:26,180
just, allowing any developer, any DevOps
team member to do whatever they want,

329
00:20:26,610 --> 00:20:31,370
but we actually want to stimulate that
team collaboration and evaluating that.

330
00:20:31,390 --> 00:20:34,050
The

331
00:20:34,550 --> 00:20:41,430
next step in our shifting left cycle
was after we have code being uploaded

332
00:20:41,490 --> 00:20:45,770
into our repos, which by the way,
and GitHub is the same thing, we can

333
00:20:45,780 --> 00:20:51,000
shift to code scanning, code security
scanning, and credential management.

334
00:20:51,930 --> 00:20:56,190
So I'm going to shift back to my
DevOps environment where I'm going

335
00:20:56,410 --> 00:20:58,720
to switch back to my other project.

336
00:20:59,205 --> 00:21:00,155
I have my code.

337
00:21:00,225 --> 00:21:02,365
I'm going to run my pipeline.

338
00:21:02,865 --> 00:21:05,515
And as you can see, my
pipeline has been running.

339
00:21:06,015 --> 00:21:09,515
And it's detecting
security vulnerabilities.

340
00:21:09,575 --> 00:21:12,635
Some outdated packages,
known vulnerabilities.

341
00:21:13,245 --> 00:21:14,465
How does this work?

342
00:21:14,515 --> 00:21:17,435
What I did is injecting
a code scanning tool.

343
00:21:17,935 --> 00:21:19,945
How do you inject a code scanning tool?

344
00:21:20,035 --> 00:21:23,565
It's technically doing the
same thing in your pipelines.

345
00:21:24,365 --> 00:21:29,505
Just running NET build, NET run,
NET publish, for example, but

346
00:21:29,515 --> 00:21:31,315
now also integrating scanning.

347
00:21:31,875 --> 00:21:37,065
Next to that, What I have here in
my environment is overall DevOps

348
00:21:37,085 --> 00:21:41,275
code coverage, and I could also
integrate with third party tools.

349
00:21:41,765 --> 00:21:44,855
Now, how do you decide
which tool you want to use?

350
00:21:45,175 --> 00:21:46,055
it's quite easy.

351
00:21:46,315 --> 00:21:48,365
You go into marketplace.

352
00:21:48,405 --> 00:21:49,635
visualstudio.

353
00:21:49,675 --> 00:21:54,405
com and you can look for
extensions for integrations.

354
00:21:54,955 --> 00:21:58,475
You can install security
tools in Visual Studio Code.

355
00:21:58,725 --> 00:22:04,475
Or you can switch to Average DevOps,
searching for security, and it's going to

356
00:22:04,485 --> 00:22:07,365
give you a pretty extensive list of tools.

357
00:22:07,415 --> 00:22:10,125
Some of them are specific to, containers.

358
00:22:10,625 --> 00:22:12,425
Aqua here is a pretty good option.

359
00:22:12,905 --> 00:22:15,455
Snyk is a pretty good option.

360
00:22:15,615 --> 00:22:19,115
The built in Azure DevOps
Security Scanner is a good option.

361
00:22:19,545 --> 00:22:24,415
And probably so many other ones as well,
but I don't really know all of them.

362
00:22:24,885 --> 00:22:28,815
And it also depends a bit on the language,
the development language you're using,

363
00:22:28,865 --> 00:22:33,785
like PowerShell code, NET code, Java
code, where some scanners might be better

364
00:22:33,855 --> 00:22:36,665
than others for that specific language.

365
00:22:37,165 --> 00:22:40,365
Another option is not using Azure DevOps.

366
00:22:40,405 --> 00:22:45,165
Obviously nothing wrong with it,
but what we can do is using GitHub.

367
00:22:45,165 --> 00:22:46,095
GitHub.

368
00:22:46,475 --> 00:22:48,505
The baseline of GitHub is about the same.

369
00:22:48,905 --> 00:22:52,845
Now, what we can do with GitHub
is, again, creating repositories,

370
00:22:53,295 --> 00:22:56,935
using source code, using branching,
using, reviewing everything I

371
00:22:56,955 --> 00:22:58,745
talked about on the DevOps side.

372
00:22:59,525 --> 00:23:01,205
So that's all quite similar.

373
00:23:01,265 --> 00:23:04,715
The look and feel is obviously slightly
different, but apart from that,

374
00:23:04,785 --> 00:23:06,305
it's actually doing the same thing.

375
00:23:07,095 --> 00:23:08,885
We're now inside a repo.

376
00:23:09,245 --> 00:23:10,835
I'm just going to grab one of these.

377
00:23:11,200 --> 00:23:15,530
I got a pretty outdated one with a
sample React app from years back.

378
00:23:16,190 --> 00:23:20,690
now I'm going to dive in security and
the beauty of GitHub code scanning

379
00:23:20,770 --> 00:23:22,470
is that it's available by design.

380
00:23:22,580 --> 00:23:27,610
So you don't have to go out and search
for your own tools on the marketplace.

381
00:23:27,680 --> 00:23:31,900
It's already part of the platform
for public and private repos.

382
00:23:32,770 --> 00:23:35,700
Only thing you need to do is
deciding if you want to use it.

383
00:23:35,740 --> 00:23:36,410
Yes or no.

384
00:23:36,410 --> 00:23:38,170
So you just enable or disable.

385
00:23:38,580 --> 00:23:41,810
And then from there you get,
Dependabot, which is like a

386
00:23:41,860 --> 00:23:44,080
scanning, scheduled scanning tool.

387
00:23:44,560 --> 00:23:48,440
And it's going to report back about
your potential vulnerabilities.

388
00:23:48,580 --> 00:23:52,550
And if you allow it to, it can
actually help you fixing the problem

389
00:23:52,610 --> 00:23:57,330
by moving up a vulnerability package
versioning into a newer version

390
00:23:57,340 --> 00:23:59,000
that's actually fixing the problem.

391
00:23:59,190 --> 00:23:59,860
Something like that.

392
00:24:00,360 --> 00:24:04,170
The other part here is
credentials and secret management.

393
00:24:04,360 --> 00:24:05,600
Now, why is that important?

394
00:24:05,660 --> 00:24:08,110
Because something like this could happen.

395
00:24:08,670 --> 00:24:12,330
This was literally a
screenshot, in already some

396
00:24:12,330 --> 00:24:14,340
years back, like January 2021.

397
00:24:14,340 --> 00:24:18,970
So four, almost five years ago,
four years ago, where my personal

398
00:24:18,970 --> 00:24:23,590
access token, like a secret, a
secured key, got published to GitHub.

399
00:24:23,900 --> 00:24:27,600
Now, if you know a little bit about
Peter, in the meantime, there's one

400
00:24:27,600 --> 00:24:31,520
thing and it's Peter not sharing
personal access tokens on GitHub.

401
00:24:31,950 --> 00:24:35,800
So what happened here, I was delivering
a workshop on DevOps, interesting

402
00:24:35,800 --> 00:24:39,990
enough, showing how to create a DevOps
personal access token, obviously

403
00:24:39,990 --> 00:24:43,920
sharing my screen during the whole
day, and one of my learners was

404
00:24:43,960 --> 00:24:46,290
actually screen capturing recording.

405
00:24:46,925 --> 00:24:50,705
And then finding the personal access
token in the recording, which obviously

406
00:24:50,705 --> 00:24:54,815
was not allowed and then storing it
in one of their own GitHub repos.

407
00:24:55,375 --> 00:24:59,045
The cool thing was that GitHub
detected this right away.

408
00:24:59,275 --> 00:25:03,635
And within just a couple of minutes
already sending me a notification,

409
00:25:04,085 --> 00:25:06,945
because obviously they recognize
the personal access token linked

410
00:25:06,955 --> 00:25:09,105
to an Azure DevOps organization.

411
00:25:09,595 --> 00:25:12,755
And even more interesting, you
could go okay, makes sense.

412
00:25:12,755 --> 00:25:13,975
You're working for Microsoft.

413
00:25:13,975 --> 00:25:16,415
So it's probably Microsoft helping here.

414
00:25:16,720 --> 00:25:20,010
but it was not even related
to the Microsoft relationship.

415
00:25:20,390 --> 00:25:24,680
It's just a core functionality
of GitHub built in security.

416
00:25:25,140 --> 00:25:31,530
If you have Azure resources, storage
account keys, SQL connection strings,

417
00:25:31,570 --> 00:25:38,020
AWS relational databases, personal
access tokens, and whatnot, GitHub

418
00:25:38,150 --> 00:25:44,000
security documentation allowing
you to validate which of your tools

419
00:25:44,805 --> 00:25:49,675
And the corresponding secrets can
already be recognized out of DevOps.

420
00:25:49,675 --> 00:25:51,725
Sorry, out of GitHub security.

421
00:25:52,225 --> 00:25:55,785
The other piece in the demo was Key Vault.

422
00:25:56,665 --> 00:25:57,785
So how does that work?

423
00:25:58,195 --> 00:26:04,475
Imagine I have my pipeline, and in my
pipeline I want to run some variables.

424
00:26:04,905 --> 00:26:09,415
So you could create a variable group Where
you're going to store some variable names.

425
00:26:09,435 --> 00:26:12,865
So I'm using this for my demo deployments.

426
00:26:13,285 --> 00:26:17,445
If I want to deploy like Azure
containers, I need a container name.

427
00:26:17,585 --> 00:26:21,885
I'm going to use a variable, but
then I also need, some specific

428
00:26:21,925 --> 00:26:26,445
secrets, like in this case here,
Azure Communication Connection String

429
00:26:26,465 --> 00:26:28,685
to interact with some AI services.

430
00:26:29,215 --> 00:26:31,505
And I'm going to store
them as a secret key.

431
00:26:31,785 --> 00:26:37,515
How do you get into a traditional text
string and turning it into a secret?

432
00:26:37,585 --> 00:26:39,965
That's what this little
icon here is doing.

433
00:26:40,365 --> 00:26:45,245
It's going to encrypt it within
your library and then transforming

434
00:26:45,245 --> 00:26:49,425
them into an asterisk next to
that, you can define permissions.

435
00:26:50,100 --> 00:26:54,620
So this is another security model,
which of my pipelines in my project

436
00:26:54,730 --> 00:26:56,650
can connect to this library.

437
00:26:56,860 --> 00:27:00,560
Instead of repeating the same,
variables in each and every pipeline,

438
00:27:00,680 --> 00:27:02,300
you could move them into the library.

439
00:27:02,770 --> 00:27:06,490
The other nice thing is that instead
of storing them encrypted here,

440
00:27:07,430 --> 00:27:12,900
we can now integrate The variable
list in DevOps with Key Vault.

441
00:27:13,390 --> 00:27:15,480
There is a small catch, I would say.

442
00:27:15,550 --> 00:27:18,710
If I enable this link secrets
to Key Vault, it's going to

443
00:27:18,740 --> 00:27:20,500
clear all my variables here.

444
00:27:20,870 --> 00:27:24,620
So it's like forcing you to
have a dedicated, library of

445
00:27:24,650 --> 00:27:29,360
variables for Key Vault and, for
anything that's not Key Vault.

446
00:27:30,180 --> 00:27:31,630
What is Key Vault itself?

447
00:27:31,660 --> 00:27:36,440
So in the Azure platform, You
have Key Vault as a service.

448
00:27:36,870 --> 00:27:40,770
And what you're going to do
here is defining keys, secrets,

449
00:27:40,900 --> 00:27:43,140
and if you want, certificates.

450
00:27:43,570 --> 00:27:47,290
Now, I told you at the start, as a
developer, it is recommended to not

451
00:27:47,400 --> 00:27:51,420
store your connection strings, API
keys, and so many other examples

452
00:27:52,010 --> 00:27:54,600
hard coded in your application.

453
00:27:55,360 --> 00:28:00,335
what we've seen in the field is that a
lot of customers are, Indeed, not storing

454
00:28:00,335 --> 00:28:05,035
these in application code anymore,
but storing it in Azure settings.

455
00:28:05,405 --> 00:28:11,065
So what it means is if I go into
functions or web apps or databases,

456
00:28:11,065 --> 00:28:12,755
it's all based on the same concept.

457
00:28:13,255 --> 00:28:13,905
I can.

458
00:28:14,550 --> 00:28:18,780
Pull up my variables, so I
go into my Azure functions.

459
00:28:19,320 --> 00:28:20,890
I open up my.

460
00:28:21,390 --> 00:28:24,470
Settings an inside my
environment variables.

461
00:28:24,580 --> 00:28:26,740
I'm going to play with my variables.

462
00:28:27,240 --> 00:28:32,180
The old way is again, no longer in
code, but storing them inside Azure.

463
00:28:32,360 --> 00:28:35,310
What's the benefit if it's not
in code, but it is in Azure?

464
00:28:35,550 --> 00:28:38,670
Because you have Azure role based, sorry.

465
00:28:39,040 --> 00:28:43,890
You have Azure role based access
to define who gets access to the

466
00:28:43,890 --> 00:28:48,640
Azure platform and actually manage,
interact with our environments.

467
00:28:49,080 --> 00:28:52,930
So I got my App Insights,
instrumentation key, just as an example.

468
00:28:53,840 --> 00:28:55,600
And it's connecting to.

469
00:28:56,100 --> 00:28:56,620
value.

470
00:28:56,720 --> 00:29:01,860
So even App Insights, like a monitoring
tool for applications, requires a key.

471
00:29:01,870 --> 00:29:03,030
And that's what you see here.

472
00:29:03,080 --> 00:29:03,470
There we go.

473
00:29:03,970 --> 00:29:06,470
I might have a connection
to a storage account.

474
00:29:06,600 --> 00:29:10,360
So I create a variable in my application,
in my web app, in my function,

475
00:29:10,570 --> 00:29:12,500
and I need a connection string.

476
00:29:12,720 --> 00:29:14,300
So that's what I'm showing here.

477
00:29:15,000 --> 00:29:18,580
This connection string, again,
should be treated confidential.

478
00:29:18,750 --> 00:29:20,590
And that's where now Key Vault comes in.

479
00:29:20,955 --> 00:29:26,955
So in my third example here, I'm
connecting my app, my function into Azure

480
00:29:27,005 --> 00:29:29,975
AI services, and it needs an API key.

481
00:29:30,635 --> 00:29:34,305
To do that, we need the API key
as the variable, but now this

482
00:29:34,305 --> 00:29:38,005
time the value is no longer
pointing to the connection string.

483
00:29:38,065 --> 00:29:40,525
It's not having the actual content.

484
00:29:40,525 --> 00:29:44,265
It's not having the keys, the
connection strings, but it's

485
00:29:44,265 --> 00:29:45,755
now pointing to Key Vault.

486
00:29:46,255 --> 00:29:50,105
The cool thing here is that for the
look and feel, the experience of your

487
00:29:50,155 --> 00:29:52,095
app, you're not changing anything.

488
00:29:52,205 --> 00:29:57,045
The only thing you need to do in the
app code is adding the Key Vault package

489
00:29:57,645 --> 00:30:02,135
for your development language, allowing
the product to recognize what is,

490
00:30:02,235 --> 00:30:04,225
that add Microsoft Key Vault string.

491
00:30:05,015 --> 00:30:07,175
From here, it's pointing to Key Vault.

492
00:30:08,065 --> 00:30:13,525
Microsoft Key Vault connecting to a Key
Vault URI, inside Key Vault connecting

493
00:30:13,525 --> 00:30:19,105
to the secret, and from there pulling
up the computer vision API key variable.

494
00:30:19,605 --> 00:30:22,225
So how does this work inside my Key Vault?

495
00:30:22,725 --> 00:30:26,085
This is my Key Vault object
inside keys and secrets.

496
00:30:26,145 --> 00:30:28,315
I'm going to define my actual variables.

497
00:30:28,975 --> 00:30:31,865
And from there, I'm going
to store the actual key.

498
00:30:31,945 --> 00:30:33,775
Now, this, by the way, is not the key.

499
00:30:33,795 --> 00:30:36,255
This is just, a unique object ID.

500
00:30:36,755 --> 00:30:38,515
The key itself is hidden.

501
00:30:38,545 --> 00:30:39,905
It's secretly valued.

502
00:30:39,905 --> 00:30:40,825
It's encrypted.

503
00:30:40,945 --> 00:30:46,330
And in my variable settings, this
is the only thing I need to specify.

504
00:30:46,830 --> 00:30:51,640
Allowing you to really integrate
security, moving all secrets away

505
00:30:51,640 --> 00:30:54,140
from code, storing it into Key Vault.

506
00:30:54,320 --> 00:30:57,430
And on top of that's the other
piece in the security story.

507
00:30:57,770 --> 00:31:01,480
We're going to define explicit
permissions that not everyone

508
00:31:01,620 --> 00:31:02,820
can connect to Key Vault.

509
00:31:03,400 --> 00:31:08,515
So what we do here is, after adding
the keys, We're going to move into

510
00:31:08,535 --> 00:31:13,495
access policies or using Azure role
based access would be another option.

511
00:31:13,505 --> 00:31:18,535
That's the newer way of managing
permissions where I'm specifying, hey, my

512
00:31:18,535 --> 00:31:24,625
dear function, you get, get permissions
because you only need to get the keys.

513
00:31:24,625 --> 00:31:25,755
You don't need to change them.

514
00:31:26,225 --> 00:31:30,635
And for example, in the same way, Peter,
the admin account can do get and list.

515
00:31:31,580 --> 00:31:34,140
Now there's a little bit of a
chicken and egg scenario here.

516
00:31:34,220 --> 00:31:34,520
Why?

517
00:31:34,540 --> 00:31:39,160
Because someone, like being Peter
in this case, my admin, my DevOps

518
00:31:39,170 --> 00:31:44,580
team member, still needs to add the
original initial key into the story.

519
00:31:45,050 --> 00:31:48,100
now you could go what's the point
in storing all that encrypted if

520
00:31:48,140 --> 00:31:52,480
Peter actually And that's where
key vault key rotation comes in.

521
00:31:53,060 --> 00:31:56,510
In our Microsoft documentation
you'll find guidance what it

522
00:31:56,530 --> 00:31:58,380
means to actually rotate keys.

523
00:31:58,840 --> 00:32:03,030
What it means is, for example,
if I go into a storage account,

524
00:32:03,900 --> 00:32:05,949
imagine I have my access keys,

525
00:32:06,449 --> 00:32:09,759
Manually, I'm going to
run the key rotation.

526
00:32:09,879 --> 00:32:12,809
It's going to change key
one and key two over here.

527
00:32:13,189 --> 00:32:14,519
I'm going to copy paste them.

528
00:32:14,579 --> 00:32:18,869
I'm stored the connection string
or the key in Keyval, and I'm done.

529
00:32:19,609 --> 00:32:23,799
You can automate this process like
set rotation reminder, and you can

530
00:32:23,799 --> 00:32:28,569
interact with Azure Automation running
a Cloud Shell script, running PowerShell

531
00:32:28,569 --> 00:32:33,239
script, running Azure Automation script
to run that key rotation for you.

532
00:32:33,739 --> 00:32:38,999
Technically, it's updating key one,
storing it in Key Vault, updating

533
00:32:39,009 --> 00:32:43,729
key two, storing it in Key Vault,
but from an app perspective, your app

534
00:32:43,729 --> 00:32:45,919
is pointing to the Key Vault object.

535
00:32:45,969 --> 00:32:49,239
It's not pointing to the
Key Vault object content.

536
00:32:49,539 --> 00:32:51,999
So that's, in short, how that part works.

537
00:32:52,499 --> 00:32:56,329
So that was pretty much it on
storing secrets not in code.

538
00:32:56,429 --> 00:33:00,399
And if you have the, I would say the
correct code scanning tool, it will

539
00:33:00,399 --> 00:33:02,679
actually detect that you do have keys.

540
00:33:03,089 --> 00:33:07,549
And then the solution is moving
them out into a key vault scenario.

541
00:33:08,049 --> 00:33:14,169
Next option we touched on in our shifting
left overview is what about containers?

542
00:33:14,319 --> 00:33:17,159
So what I'm doing here on
the slide is just a listing

543
00:33:17,169 --> 00:33:19,519
of container scanning tools.

544
00:33:20,179 --> 00:33:21,859
There's again so many different ones.

545
00:33:21,909 --> 00:33:24,689
I mentioned Aqua without
doing any marketing for them.

546
00:33:24,769 --> 00:33:26,449
It's just one of the so many tools.

547
00:33:27,029 --> 00:33:28,359
I have Qualys here.

548
00:33:28,409 --> 00:33:29,199
Why Qualys?

549
00:33:29,219 --> 00:33:34,949
Because we have it as an integrated
security scanning feature inside, for

550
00:33:34,959 --> 00:33:37,359
example, Azure Container Registry.

551
00:33:38,219 --> 00:33:40,239
So that's going to be my next demo.

552
00:33:40,479 --> 00:33:44,839
How to integrate container scanning
as part of our DevOps process.

553
00:33:45,509 --> 00:33:47,489
There's a couple of
different options to do that.

554
00:33:48,399 --> 00:33:51,799
I'm going to switch back
to my DevOps environment.

555
00:33:51,839 --> 00:33:53,029
I don't need this anymore.

556
00:33:53,759 --> 00:33:58,789
I'm getting a bit lost in my
DevOps and browser portals.

557
00:33:58,849 --> 00:34:00,209
Okay, but we're back in business.

558
00:34:00,209 --> 00:34:00,509
Cool.

559
00:34:01,009 --> 00:34:04,809
So one option is using Sonar.

560
00:34:04,879 --> 00:34:08,349
Sonar is one of the so many
third party code scanning tools,

561
00:34:08,819 --> 00:34:10,609
also valid for containers.

562
00:34:10,649 --> 00:34:15,309
The way it works, you have your build
pipeline, like scanning code, validating

563
00:34:15,309 --> 00:34:20,509
code, or compiling code, where now
we're gonna integrate a scanning task.

564
00:34:21,249 --> 00:34:25,839
If I open up the pipeline syntax,
I'm installing NuGet package.

565
00:34:25,839 --> 00:34:27,789
Yes, I know this is an updated version.

566
00:34:28,069 --> 00:34:29,989
It's an old sample, but
that's totally fine.

567
00:34:30,559 --> 00:34:32,789
We're going to run NET, restore.

568
00:34:33,779 --> 00:34:36,109
Later on, we're going to
run NET test and so on.

569
00:34:36,489 --> 00:34:40,739
And what we're doing now is
integrating a third party scanning

570
00:34:40,829 --> 00:34:43,039
tool as part of the pipeline.

571
00:34:43,979 --> 00:34:47,119
What this is going to do is, again,
doing the same thing, looping through

572
00:34:47,119 --> 00:34:50,969
the code, running the build pipeline,
but as part of the build process.

573
00:34:51,019 --> 00:34:56,729
It's now importing the latest updated
patron files from this third party

574
00:34:56,729 --> 00:35:00,789
scanning tool, and it's going to
run it and providing the details.

575
00:35:01,049 --> 00:35:05,349
So the outcome of this, if I look
into the actual pipeline run,

576
00:35:05,849 --> 00:35:07,429
it's going to do NuGet, restore.

577
00:35:07,679 --> 00:35:11,859
net, import, export, all that
cool fun, preparing the analysis,

578
00:35:11,939 --> 00:35:15,739
building the solution, running some
functional testing, smoke testing,

579
00:35:15,749 --> 00:35:17,389
anything like traditional DevOps.

580
00:35:17,909 --> 00:35:20,369
And from there it's
integrating the scanning.

581
00:35:21,284 --> 00:35:25,454
Oops, sorry, that was a bit
too fast running the scanning.

582
00:35:26,194 --> 00:35:31,894
I wanted to move this little guy out
of the way, but I couldn't get there.

583
00:35:31,924 --> 00:35:32,374
There we go.

584
00:35:33,134 --> 00:35:40,124
So in my scanning task here, it's now
downloading this third party vendor

585
00:35:40,124 --> 00:35:45,744
sonar pattern files and running a
scanning and then looping through all

586
00:35:45,754 --> 00:35:47,604
the scanning detection mechanisms.

587
00:35:47,934 --> 00:35:51,254
And then eventually, depending on
the outcome, depending on how many

588
00:35:51,254 --> 00:35:55,444
vulnerabilities, depending on what kind
of criticality, depending on so many

589
00:35:55,444 --> 00:36:00,854
parameters you can define, it's gonna flag
the pipeline as a successful build or not.

590
00:36:01,474 --> 00:36:06,284
You can reuse this information
once you move into release.

591
00:36:06,774 --> 00:36:14,014
So what we can do here is now going back
into our pipelines Go into a new pipeline.

592
00:36:14,234 --> 00:36:18,144
I'll show you the classic interface
like the more graphical interface,

593
00:36:18,144 --> 00:36:19,754
but the concept is the same.

594
00:36:20,254 --> 00:36:23,594
Imagine we're going to publish
to our Azure app service.

595
00:36:24,094 --> 00:36:28,314
Where now I can enable my,
pipeline quality gates.

596
00:36:28,534 --> 00:36:32,814
Now, before I can do that, I
need to define some settings,

597
00:36:32,844 --> 00:36:34,514
which I wasn't planning on doing.

598
00:36:35,164 --> 00:36:36,284
I can do pre.

599
00:36:36,669 --> 00:36:37,499
deployment.

600
00:36:37,919 --> 00:36:44,699
I can integrate quality gates and
I can validate My third party sonar

601
00:36:44,699 --> 00:36:49,839
cloud in this example, or running
rest API calls, checking with Azure

602
00:36:49,839 --> 00:36:54,359
policy, is the environment I'm
publishing to actually compliant

603
00:36:54,379 --> 00:36:58,269
with PCI with hyper with ISO 27 one.

604
00:36:58,659 --> 00:37:02,109
And if not, then I'm not
allowing the pipeline release.

605
00:37:02,149 --> 00:37:06,599
So I'm not publishing my code,
something like that, or here with a

606
00:37:06,599 --> 00:37:09,419
sonar example that I was using before.

607
00:37:10,169 --> 00:37:14,719
It's going to allow me to run the
sonar scanning during the build, and

608
00:37:14,719 --> 00:37:18,759
then during the release, I can go
back to it, Hey, can you check with

609
00:37:18,899 --> 00:37:23,529
the results of my build from a sonar
cloud perspective and yes, for any

610
00:37:23,529 --> 00:37:25,579
other third party tool for that matter.

611
00:37:26,079 --> 00:37:30,209
And based on that, we're going to give you
green light or not to literally move into

612
00:37:30,209 --> 00:37:33,439
that CICD end to end automation concept.

613
00:37:33,939 --> 00:37:36,769
Last little piece here, and
then I think we're going to wrap

614
00:37:36,769 --> 00:37:39,059
it up, is Defender for Cloud.

615
00:37:39,129 --> 00:37:43,759
So I talked about Defender a little
bit in the introduction, like setting

616
00:37:44,249 --> 00:37:49,579
the scene on DevOps and integrating
security, where one of the pillars

617
00:37:49,579 --> 00:37:52,929
was all the way at the end, runtime.

618
00:37:53,699 --> 00:37:55,509
Your workload is running in Azure.

619
00:37:55,559 --> 00:37:58,569
I showed you functions, showed you
web apps, showed you Key Vault.

620
00:37:58,729 --> 00:38:02,014
We're now out of Defender for
Cloud, It's going to create

621
00:38:02,094 --> 00:38:04,084
a security posture overview.

622
00:38:04,594 --> 00:38:08,844
So it's not a security slash
protection mechanism as such,

623
00:38:08,884 --> 00:38:12,624
although it actually comes with
those features for specific Azure

624
00:38:12,634 --> 00:38:14,464
scenarios, but that's the paid version.

625
00:38:14,934 --> 00:38:18,564
But even in the free edition that
you can just enable in your Azure

626
00:38:18,564 --> 00:38:22,404
subscriptions, it's going to
list up security recommendations.

627
00:38:22,974 --> 00:38:27,774
You have secure score, so a ranking
some, Like a set of points, you

628
00:38:27,774 --> 00:38:31,544
could say, the more points, the
more secure your environment runs.

629
00:38:32,104 --> 00:38:36,664
And based on that, it's also giving
you, an overview of your resources,

630
00:38:36,824 --> 00:38:41,054
a potential security risk, any
alerts, attack path, and whatnot.

631
00:38:41,684 --> 00:38:47,494
If I drill down on my security score
within my subscription, I open up

632
00:38:47,554 --> 00:38:51,904
my recommendations and it's going
to list up anything that I should

633
00:38:51,914 --> 00:38:53,884
try and fix in my environment.

634
00:38:54,619 --> 00:38:58,849
So from here, I could, for example,
filter on containers because that was

635
00:38:58,849 --> 00:39:00,619
the last piece I was talking about.

636
00:39:01,499 --> 00:39:08,209
And it's going to show me you, Peter, are
running a repo, like a container registry.

637
00:39:08,749 --> 00:39:13,139
Inside there's a container image, and
you should run a vulnerability scan.

638
00:39:13,709 --> 00:39:17,129
If I have something else in another
Azure resource, like here, a storage

639
00:39:17,129 --> 00:39:20,939
account, it's going to show me
public access to that storage account

640
00:39:21,039 --> 00:39:22,699
should be disabled, and so on.

641
00:39:23,199 --> 00:39:27,059
Since we're talking about DevOps,
inside my Defender for Cloud

642
00:39:27,819 --> 00:39:30,289
is now also DevOps security.

643
00:39:31,229 --> 00:39:37,449
What it's doing here is allowing you
to read out your repo state from Azure

644
00:39:37,450 --> 00:39:42,509
DevOps, from GitHub, and bringing
in that security view into your, or

645
00:39:42,509 --> 00:39:47,199
the DevOps security view into your
security team's overall management.

646
00:39:48,189 --> 00:39:49,549
I just need to refresh.

647
00:39:50,239 --> 00:39:52,749
Because it looks like
it's not coming through.

648
00:39:52,749 --> 00:39:53,239
There we go.

649
00:39:53,789 --> 00:39:58,609
So I showed you my DevOps, I showed you
my GitHub, and these are all my repos.

650
00:39:58,779 --> 00:40:03,759
So my React example here that I
used in one of my demos to show

651
00:40:03,759 --> 00:40:08,529
you the built in GitHub Dependabot
CodeQL security scanning tool is now

652
00:40:08,529 --> 00:40:10,809
also moved into my security view.

653
00:40:11,769 --> 00:40:15,949
I can open it up and I can see
what is the security state?

654
00:40:16,029 --> 00:40:17,039
As no secrets.

655
00:40:17,709 --> 00:40:21,969
GitHub was reporting some security
issues, and they're now nicely

656
00:40:21,969 --> 00:40:24,599
reported in my security environment.

657
00:40:25,009 --> 00:40:29,559
To again, once more focus on the
culture, bringing down the walls between

658
00:40:29,559 --> 00:40:35,909
DevOps teams, operations team, DevOps
security teams, and allowing everyone

659
00:40:35,929 --> 00:40:37,899
to get a view on the security state.

660
00:40:38,399 --> 00:40:38,769
Cool.

661
00:40:38,779 --> 00:40:41,889
So with that, I'm going
to wrap it up from here.

662
00:40:42,269 --> 00:40:45,599
I started with the
Peters DevOps definition.

663
00:40:45,739 --> 00:40:50,179
I'm pretty sure no one remembers, but you
can move all the way back to the start.

664
00:40:50,409 --> 00:40:52,849
What I'm doing now is
updating my definition.

665
00:40:53,389 --> 00:40:56,639
It's no longer just developing
a culture of delivering value

666
00:40:56,719 --> 00:41:00,809
to end users, relying on team
collaboration, workload automation.

667
00:41:00,839 --> 00:41:02,159
That's just doing DevOps.

668
00:41:02,579 --> 00:41:06,249
But now we're also integrating
end to end security.

669
00:41:06,589 --> 00:41:09,169
And that's the baseline of the story.

670
00:41:09,969 --> 00:41:11,639
So with that, what did I cover?

671
00:41:11,749 --> 00:41:17,279
I started my session 43 minutes ago with
setting the scene on DevOps, talked about

672
00:41:17,279 --> 00:41:22,229
the concept of shifting left, and then
the majority of the session was touching

673
00:41:22,229 --> 00:41:26,989
on the tooling, Azure DevOps, GitHub
as the Microsoft DevOps solutions, and

674
00:41:26,989 --> 00:41:31,129
then the second half of the session,
or three quarters of the session, was

675
00:41:31,139 --> 00:41:33,479
jumping around across different demos.

676
00:41:33,979 --> 00:41:34,979
I hope you enjoyed.

677
00:41:35,179 --> 00:41:38,929
I hope you learned something new
around DevOps, around DevSecOps, a

678
00:41:38,929 --> 00:41:40,499
little bit on the Microsoft story.

679
00:41:41,154 --> 00:41:44,254
There's obviously a lot more
that we need to cover, but I

680
00:41:44,254 --> 00:41:46,204
only got 45 minutes to do that.

681
00:41:46,674 --> 00:41:50,434
I hope it gave you a little
bit, of, awakening, a little

682
00:41:50,434 --> 00:41:51,614
bit teasing your brain.

683
00:41:51,614 --> 00:41:55,024
If you're part of DevOps and you're
like, I had no idea how to integrate

684
00:41:55,024 --> 00:41:56,574
security, why it's important.

685
00:41:56,944 --> 00:42:00,044
Then I hope I helped you a bit
understanding that message.

686
00:42:00,504 --> 00:42:01,714
With that, I'm going to close out.

687
00:42:01,804 --> 00:42:04,274
Thank you for watching my session.

688
00:42:04,274 --> 00:42:05,354
Thank you for being here.

689
00:42:05,354 --> 00:42:08,479
Have Don't hesitate, please,
don't hesitate reaching out if

690
00:42:08,479 --> 00:42:09,899
you should have any questions.

691
00:42:10,369 --> 00:42:11,789
Petender at Microsoft.

692
00:42:11,949 --> 00:42:15,809
com, PDTIT on LinkedIn, on
BlueSky on Twitter, but I'm

693
00:42:15,809 --> 00:42:17,239
not that active there anymore.

694
00:42:17,609 --> 00:42:20,929
And overall, if you forget
anything else, I would say aka.

695
00:42:21,699 --> 00:42:26,519
ms slash PDTIT is going to send you to my
blog where you find all the other details.

696
00:42:26,949 --> 00:42:27,739
Thank you for now.

697
00:42:27,869 --> 00:42:31,859
Enjoy the rest of COM 42 DevSecOps
and hope to see you again in

698
00:42:31,869 --> 00:42:33,469
any of our other sessions.

