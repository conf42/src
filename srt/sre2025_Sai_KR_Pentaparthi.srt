1
00:00:00,500 --> 00:00:01,099
Welcome everyone.

2
00:00:01,340 --> 00:00:05,740
My name is, and I'm excited to
talk to you today about network ion

3
00:00:05,980 --> 00:00:09,550
harnessing EBPF for Cloud-native
observability superpowers.

4
00:00:10,239 --> 00:00:14,469
We are embarking on a journey to
explore how this powerful technology

5
00:00:14,530 --> 00:00:19,600
EBPF is fundamentally changing how
we observe and understand our cloud

6
00:00:19,600 --> 00:00:24,030
native environments, essentially
granting US observability superpowers.

7
00:00:24,420 --> 00:00:28,890
As organizations increasingly adapt
containerization and microservices,

8
00:00:29,220 --> 00:00:33,450
particularly with Kubernetes, the
networking layer that invisible

9
00:00:33,450 --> 00:00:37,260
mesh connecting everything
becomes incredibly complex.

10
00:00:37,650 --> 00:00:43,080
It often turns into a critical blind
spot for operations and SRE teams,

11
00:00:43,440 --> 00:00:48,570
we find that standard monitoring tech
tools frequently struggle to provide the

12
00:00:48,570 --> 00:00:53,489
necessary depth and real time insight
required in these highly dynamic systems.

13
00:00:54,360 --> 00:00:59,910
This talk aims to demystify EBPF,
which stands for Extended Berkeley

14
00:01:00,030 --> 00:01:05,730
Packet Filter, and demonstrate how
it provides deep surgical visibility

15
00:01:05,880 --> 00:01:07,980
directly from the Lenux kernel itself.

16
00:01:08,759 --> 00:01:14,580
A key advantage will explore is how it
achieves this level of detail without

17
00:01:14,580 --> 00:01:16,830
imposing the typical performance overhead.

18
00:01:16,980 --> 00:01:21,509
We often associate it with traditional
methods like deep packet inspection

19
00:01:21,780 --> 00:01:23,429
or extremely verbal s logging.

20
00:01:23,929 --> 00:01:28,669
Over the next 20 to 25 minutes, my
goal is to bridge the gap between this

21
00:01:28,669 --> 00:01:34,039
powerful low level kernel technology and
the practical actionable strategies you

22
00:01:34,039 --> 00:01:36,589
can implement in your own environments.

23
00:01:37,089 --> 00:01:41,169
Let's f first clearly define the
problem we are addressing the

24
00:01:41,169 --> 00:01:46,300
Kubernetes networking blind spot in
cloud native architectures, especially

25
00:01:46,330 --> 00:01:50,199
when employing service measures are
dealing with hundreds of microservices.

26
00:01:50,904 --> 00:01:55,794
The communications pathway between
them become incredibly intricate.

27
00:01:56,424 --> 00:02:02,304
These invisible connections and complex
dependencies are often dynamic and not

28
00:02:02,304 --> 00:02:07,704
fully captured by static configurations or
even infrastructure as code definitions.

29
00:02:08,204 --> 00:02:11,924
This is where traditional monitoring
approaches often fall short.

30
00:02:12,424 --> 00:02:16,775
Many rely on sampling, grabbing
data points intermittently or

31
00:02:16,835 --> 00:02:18,484
aggregating metrics over time.

32
00:02:18,984 --> 00:02:23,454
While useful for high level trends,
this inherently loses the fine

33
00:02:23,484 --> 00:02:28,164
grain detail needed to understand
transient issues or the exact sequence

34
00:02:28,164 --> 00:02:29,934
of events during network problem.

35
00:02:30,714 --> 00:02:32,484
This leads to limited visibility.

36
00:02:32,904 --> 00:02:37,914
Operation teams are left grappling with
troubleshooting challenges, trying to

37
00:02:37,914 --> 00:02:42,864
diagnose complex distributed issues
without detailed realtime insights

38
00:02:43,045 --> 00:02:46,974
into the actual network traffic flow
between parts, services and nodes.

39
00:02:47,474 --> 00:02:52,754
It's like trying to debug a tangle mess
of wire with the lights partially off.

40
00:02:53,254 --> 00:02:57,364
So what is EBPF, how it helps
us see through this complexity?

41
00:02:57,844 --> 00:03:02,134
EBPF stands for Extended
Berkeley packet filter.

42
00:03:02,944 --> 00:03:07,024
While the original EBPF was primarily
for filtering network packets,

43
00:03:07,294 --> 00:03:11,314
EBPF is a revolutionary technology
that acts like a lightweight.

44
00:03:11,584 --> 00:03:14,914
Sandboxed virtual machine
inside the Linux kernel itself.

45
00:03:15,514 --> 00:03:20,704
This allows us to run custom event
driven programs whenever specific kernel

46
00:03:20,704 --> 00:03:26,344
event suckers like network packets being
processed, system calls being made, or

47
00:03:26,374 --> 00:03:28,654
kernel functions being entered or exited.

48
00:03:29,154 --> 00:03:31,284
This kernel level integration is key.

49
00:03:31,884 --> 00:03:34,764
We are getting data right from the source.

50
00:03:35,264 --> 00:03:38,114
The extended part signifies
its program loyalty.

51
00:03:38,804 --> 00:03:40,724
Going far beyond simple filtering.

52
00:03:41,684 --> 00:03:48,764
This enables surgical precision because
EBPF programs run in the kernel context,

53
00:03:49,094 --> 00:03:53,684
they can access data structures and
react to events with minimal overhead.

54
00:03:54,344 --> 00:03:58,989
Capturing detailed information at
microsecond resolution without relying

55
00:03:58,989 --> 00:04:03,819
on sampling, think specific protocol
details, latency measurements for

56
00:04:03,819 --> 00:04:05,349
individual requests or tracking.

57
00:04:05,849 --> 00:04:10,109
Specific system calls related
to network activity, all without

58
00:04:10,109 --> 00:04:14,039
the heavy cost of traditional
packet capture or tracing tools.

59
00:04:14,579 --> 00:04:15,239
Crucially.

60
00:04:15,599 --> 00:04:21,469
EBPF prioritizes safe execution
before any EBPF program is loaded.

61
00:04:21,829 --> 00:04:25,099
It undergoes a rigorous
verification process by the kernel.

62
00:04:25,599 --> 00:04:27,820
This verifier checks for loops.

63
00:04:28,179 --> 00:04:32,950
Auto bond, memory access, and other
potential issues to ensure the program

64
00:04:33,129 --> 00:04:38,710
cannot crash or compromise the kernel,
this safety guarantee is what makes

65
00:04:38,799 --> 00:04:43,510
EBPF suitable for running directly
in the production systems at scale.

66
00:04:44,010 --> 00:04:49,819
Let's crystallize the differences between
by comparing EBP of based monitoring side

67
00:04:49,819 --> 00:04:51,894
by side with more traditional methods.

68
00:04:52,729 --> 00:04:56,389
Looking at data collection,
traditional approaches typically

69
00:04:56,389 --> 00:05:01,579
use sampling at intervals or rely on
agents pulling metrics periodically.

70
00:05:02,359 --> 00:05:07,819
EBPF in contrast, performs
continuous event driven capture

71
00:05:08,089 --> 00:05:09,979
directly at the Len Kernel level.

72
00:05:10,479 --> 00:05:14,830
This fundamental difference
signifies significantly impacts

73
00:05:14,830 --> 00:05:17,650
performance traditional agents.

74
00:05:17,965 --> 00:05:22,585
Especially those doing deep inspection
or relying on user space processing

75
00:05:22,885 --> 00:05:24,924
can introduce noticeable overhead.

76
00:05:25,424 --> 00:05:31,484
EBPF being kernel native and highly
efficient boosts a near zero performance

77
00:05:31,484 --> 00:05:33,734
penalty for many observability tasks.

78
00:05:34,234 --> 00:05:35,825
Then there is visibility depth.

79
00:05:36,244 --> 00:05:40,354
Traditional monitoring often provides
aggregated or service level metrics

80
00:05:40,594 --> 00:05:44,015
useful for, but often lacking granularity.

81
00:05:44,515 --> 00:05:49,855
EBPF allows us to dive much deeper
accessing packet level details,

82
00:05:50,005 --> 00:05:53,665
system call information, and
fine grain latency measurements.

83
00:05:54,475 --> 00:05:56,455
Implementation also differs.

84
00:05:56,844 --> 00:06:02,005
Traditional methods often involve
deploying user space agents or site cars

85
00:06:02,245 --> 00:06:08,035
while EPPF integrates directly with the
kernel, often managed by a platform or

86
00:06:08,035 --> 00:06:10,795
agent that leverages kernel capabilities.

87
00:06:11,295 --> 00:06:13,245
Finally, realtime analysis.

88
00:06:13,455 --> 00:06:18,465
Traditional methods are limited by
their collection intervals, whereas EBPF

89
00:06:18,465 --> 00:06:25,065
can observe and react to events at the
microsecond level, enabling true realtime

90
00:06:25,065 --> 00:06:28,185
insights and even automated actions.

91
00:06:28,685 --> 00:06:33,094
The shift to EBPF isn't
just an academic exercise.

92
00:06:33,455 --> 00:06:35,425
It delivers tangible.

93
00:06:36,130 --> 00:06:39,099
Significant improvements
in real world operations.

94
00:06:39,820 --> 00:06:44,200
One of the most dynamic
impacts consistently reported

95
00:06:44,590 --> 00:06:46,179
is a massive reduction.

96
00:06:46,179 --> 00:06:50,775
In meantime to resolution MTTR
for network related incidents.

97
00:06:51,405 --> 00:06:58,940
Organizations frequently see
MTTR slashed by over 70% complex

98
00:06:59,000 --> 00:07:03,830
baffling issues that previously
took hours or even days to diagnose.

99
00:07:04,190 --> 00:07:08,090
Can often be pinpointed in
minutes with deep visibility.

100
00:07:08,240 --> 00:07:11,870
EBPF provides beyond
reactive troubleshooting.

101
00:07:12,230 --> 00:07:17,980
E-B-P-F-M powers preventative detection by
continuously monitoring granular network

102
00:07:17,980 --> 00:07:20,500
behavior and establishing baselines.

103
00:07:20,740 --> 00:07:26,530
Teams can detect septal anonymous,
like increased latency, unusual

104
00:07:26,530 --> 00:07:30,970
connection patterns, or rising
error rates before they even

105
00:07:30,970 --> 00:07:32,980
escalate into user facing outages.

106
00:07:33,895 --> 00:07:39,715
This real time visibility enables
proactive responses and adjustments.

107
00:07:40,215 --> 00:07:44,415
Furthermore, this deep understanding
of network traffic directly

108
00:07:44,415 --> 00:07:47,325
translates to cost optimization by

109
00:07:47,825 --> 00:07:50,675
precisely, identifying
inefficient communication pattern.

110
00:07:51,120 --> 00:07:56,730
Like Charity services sending unnecessary
data across availability zones or external

111
00:07:56,730 --> 00:08:01,350
networks, our nations can optimize
traffic flow and resource allocation.

112
00:08:01,850 --> 00:08:06,710
As mentioned, one enterprise
saved over $200,000 annually by

113
00:08:06,800 --> 00:08:08,480
optimizing cloud networking costs.

114
00:08:08,540 --> 00:08:11,030
Based on this EBPF insights,

115
00:08:11,530 --> 00:08:13,410
a standard capability enabled by.

116
00:08:13,945 --> 00:08:19,495
EBPF is the ability to automatically
discover and visualize the intricate web

117
00:08:19,495 --> 00:08:21,745
of service dependencies in real time.

118
00:08:22,525 --> 00:08:28,105
Because EBPF sees a all network
traffic at kernel level, it can build

119
00:08:28,105 --> 00:08:32,035
a complete topology map of which
services are communicating with other

120
00:08:32,725 --> 00:08:35,110
how often, and with what latency.

121
00:08:35,610 --> 00:08:38,775
This is incredibly powerful
because it often reveals

122
00:08:38,805 --> 00:08:41,475
undocumented legacy or simply.

123
00:08:41,865 --> 00:08:45,855
Unexpected relationships that aren't
defined in Kubernetes manifests

124
00:08:46,185 --> 00:08:48,165
or service discovery systems.

125
00:08:48,665 --> 00:08:52,835
We move beyond static diagrams
to a live view of reality.

126
00:08:53,335 --> 00:08:58,285
We can also perform temporal analysis,
watching how this dependencies and

127
00:08:58,285 --> 00:09:00,835
communication patterns evolve over time.

128
00:09:01,335 --> 00:09:04,875
This helps understand application
behavior under different

129
00:09:04,875 --> 00:09:06,585
loads or during deployments.

130
00:09:07,085 --> 00:09:11,975
By analyzing traffic patterns, like data
volumes and communication frequencies, we

131
00:09:11,975 --> 00:09:17,795
can pinpoint bottlenecks, identify overly
chatty services, or discover opportunities

132
00:09:17,795 --> 00:09:20,135
for caching or communication optimization.

133
00:09:20,635 --> 00:09:25,750
Crucially, EBPF allows us to
trace complex dependency chains.

134
00:09:26,250 --> 00:09:31,080
We can follow a request as it hops
between multiple service, even across

135
00:09:31,080 --> 00:09:32,790
different namespace or clusters.

136
00:09:33,435 --> 00:09:37,035
Providing the true end-to-end
visibility needed to troubleshoot

137
00:09:37,185 --> 00:09:39,015
distributed systems effectively.

138
00:09:39,515 --> 00:09:45,575
EBPF continuous granular data stream
is perfectly suited for sophisticated

139
00:09:45,575 --> 00:09:47,345
realtime anomaly detection.

140
00:09:47,845 --> 00:09:52,555
The process often starts with
baseline establishment, where

141
00:09:52,585 --> 00:09:57,565
EBP powered monitoring systems
observe traffic over time to learn.

142
00:09:57,895 --> 00:10:03,055
What constitutes normal behavior for
specific services and communication paths?

143
00:10:03,555 --> 00:10:08,505
This could include typical latency
ranges, error rates, protocols

144
00:10:08,505 --> 00:10:10,635
used, or connection frequencies.

145
00:10:11,325 --> 00:10:15,555
Once a baseline is established, the
system performs deviation detection.

146
00:10:16,125 --> 00:10:21,855
It continuously compares live traffic,
again as the learn baseline automatically.

147
00:10:22,455 --> 00:10:27,405
Identifying statistically significant
deviations or abnormal patterns

148
00:10:27,555 --> 00:10:31,455
without requiring engineers to
manually set and maintain potentially

149
00:10:31,455 --> 00:10:33,345
brittle static thresholds.

150
00:10:33,845 --> 00:10:38,135
When an anomaly is flagged, EBPF
provides rich contextual alerts.

151
00:10:38,855 --> 00:10:43,355
Instead of just saying high latency
detected, an alert might be specific

152
00:10:43,355 --> 00:10:48,235
like latency between service A and
service B increased by 300 milliseconds.

153
00:10:48,805 --> 00:10:51,565
Affecting the specific
parts via this network path.

154
00:10:51,985 --> 00:10:56,515
This context, drama drastically
speeds up diagnosis.

155
00:10:57,295 --> 00:11:02,605
Furthermore, this realtime detection can
trigger automated response mechanisms

156
00:11:03,475 --> 00:11:07,915
based on pre-define rules or specific
traffic patterns detected by EBPF.

157
00:11:08,185 --> 00:11:10,465
Example, a certain surge in D-N-S-R-S.

158
00:11:10,885 --> 00:11:13,585
You could trigger automated
workflows for remediation.

159
00:11:14,410 --> 00:11:19,240
Like restarting a part, rerouting traffic,
or collecting more detailed diagnostics.

160
00:11:19,740 --> 00:11:20,250
Adapting.

161
00:11:20,250 --> 00:11:25,440
EPPF might seem daunting given its
kernel level nature, but there are

162
00:11:25,440 --> 00:11:27,330
practical approaches to get started.

163
00:11:27,990 --> 00:11:31,170
The key recommendation is to start small.

164
00:11:32,070 --> 00:11:34,530
Don't try to boil the ocean.

165
00:11:35,310 --> 00:11:37,170
Begin with single Kubernetes cluster.

166
00:11:37,420 --> 00:11:43,210
Maybe even just spec, just a specific
namespace or application, focus on

167
00:11:43,210 --> 00:11:47,760
addressing a particular pain point first,
perhaps improving troubleshooting for

168
00:11:47,760 --> 00:11:52,050
a critical service, or simply mapping
the dependencies of complex application.

169
00:11:52,740 --> 00:11:54,780
Next, you need to select tools.

170
00:11:55,230 --> 00:11:56,700
There's a vibrant ecosystem.

171
00:11:56,880 --> 00:12:01,050
Open source projects like
Cilium, which uses EPPF effect

172
00:12:01,110 --> 00:12:03,180
extensively for networking.

173
00:12:03,680 --> 00:12:08,265
And security Pixie from New Relic
focused on auto instrumented.

174
00:12:08,265 --> 00:12:10,065
Observability are Hubble.

175
00:12:10,065 --> 00:12:13,575
Part of cilium for network
visibility are great starting points.

176
00:12:14,175 --> 00:12:17,745
Commercial platforms often
built upon these, offering more

177
00:12:17,925 --> 00:12:22,605
integrated experience, longer data
retention, and enterprise support.

178
00:12:23,445 --> 00:12:25,245
You'll need to enable kernel support.

179
00:12:25,745 --> 00:12:29,195
Most modern Linux distributions
and cloud provider images support

180
00:12:29,195 --> 00:12:30,395
the necessary kernel version.

181
00:12:30,980 --> 00:12:32,750
Generally four point 18 or later.

182
00:12:32,750 --> 00:12:36,260
For broad features, though,
newer is often better.

183
00:12:36,830 --> 00:12:40,070
Ensure your notes, meet the
prerequisites for the tools you choose.

184
00:12:40,640 --> 00:12:43,520
Finally and crucially,
integrate workflows.

185
00:12:43,880 --> 00:12:49,370
The insights from EPPF are most valuable
when they feed into your existing process.

186
00:12:49,870 --> 00:12:53,350
Connect the data to your primary
observability platforms like

187
00:12:53,350 --> 00:12:55,060
Grafana, Datadog, et cetera.

188
00:12:55,060 --> 00:13:00,445
Integrate alerts into your response
systems like PagerDuty or Ops Gen,

189
00:13:01,165 --> 00:13:05,275
and use the visibility to inform
your CSAD and deployment strategies.

190
00:13:05,775 --> 00:13:11,235
Let's illustrate the potential with the
real world case study from the demanding

191
00:13:11,235 --> 00:13:16,545
financial services sector, a global
payment process dealing with stringent

192
00:13:16,545 --> 00:13:20,475
performance and reliability requirements
implemented EBPF based observability.

193
00:13:20,975 --> 00:13:25,444
Across their extensive Kubernetes
platform, they were facing challenges

194
00:13:25,715 --> 00:13:29,875
managing the complexity of over 200
interdependent microservices where

195
00:13:29,875 --> 00:13:34,015
network issues could have immediate
and significant financial impact.

196
00:13:34,515 --> 00:13:35,805
The results were striking.

197
00:13:36,305 --> 00:13:41,285
They achieved 70% faster troubleshooting
critical payment processing issues,

198
00:13:41,315 --> 00:13:45,875
which previously could take hours of
painstaking lock creation and guesswork.

199
00:13:46,190 --> 00:13:48,590
We are now consistently
resolved in minutes.

200
00:13:48,680 --> 00:13:49,190
Thanks.

201
00:13:49,280 --> 00:13:52,640
Thanks to the granular
visibility provided by EBPF.

202
00:13:53,420 --> 00:13:58,010
They gained complete visibility into
their service mesh successfully mapping

203
00:13:58,010 --> 00:14:03,200
the intricate dependence between all
200 plus microservices, uncovering

204
00:14:03,200 --> 00:14:05,060
previously unknown interactions.

205
00:14:05,630 --> 00:14:09,500
Perhaps most impressively, they
leveraged EPPF capabilities

206
00:14:09,500 --> 00:14:11,000
for automated remediation.

207
00:14:11,500 --> 00:14:14,920
By detecting specific network
anomaly patterns in real time,

208
00:14:15,420 --> 00:14:19,350
they were able to trigger automated
self-healing actions for approximately

209
00:14:19,350 --> 00:14:21,570
85% of common network issues.

210
00:14:21,570 --> 00:14:25,430
They encountered significantly
improving platform resilience.

211
00:14:26,210 --> 00:14:32,450
This case highlights how EBPF delivers
not just insights, but also enables

212
00:14:32,450 --> 00:14:36,830
automation and improve stability in
complex mission critical systems.

213
00:14:37,330 --> 00:14:41,020
While operational stability and
faster troubleshooting are major wins.

214
00:14:41,230 --> 00:14:46,630
EBPF also unlock significant cost
optimization benefits by providing

215
00:14:46,630 --> 00:14:51,400
unparalleled insight into exactly how
your network resources are being consumed.

216
00:14:51,400 --> 00:14:58,900
A major driver for cloud costs is often
network egress by providing EPPF to

217
00:14:58,900 --> 00:15:01,420
precisely identify and quantify traffic.

218
00:15:02,275 --> 00:15:06,955
Flowing between different availability
zones or out to internet organizations

219
00:15:06,955 --> 00:15:08,785
can pinpoint inefficiencies.

220
00:15:09,295 --> 00:15:13,975
Optimizing this cross zone traffic
patterns based on EBP of data has led to

221
00:15:13,975 --> 00:15:21,745
substantial savings with examples showing
reduced egress scores of up to 43% sim.

222
00:15:21,775 --> 00:15:26,480
Similarly, EBPF can reveal
unnecessary or overly chatty

223
00:15:26,720 --> 00:15:28,105
communications between services.

224
00:15:28,420 --> 00:15:32,530
That might be consuming valuable
CPU memory and network bandwidth.

225
00:15:33,340 --> 00:15:36,910
Eliminating or optimizing these
communications guided by EPPF

226
00:15:36,910 --> 00:15:43,360
insights leads to lower resource usage
overall, sometimes by as much as 28%.

227
00:15:43,860 --> 00:15:47,789
Furthermore, having precise
real-time visibility into actual

228
00:15:47,789 --> 00:15:51,900
service traffic loads enables
much faster scaling decision.

229
00:15:52,574 --> 00:15:56,324
Instead of relying on cores, grain
metrics or guesswork, you can

230
00:15:56,594 --> 00:16:00,254
rightsize your deployments based
on observed demand leading to more

231
00:16:00,284 --> 00:16:04,364
efficient resource utilization and
potentially faster scaling actions,

232
00:16:04,664 --> 00:16:07,274
improving both cost and performance.

233
00:16:07,724 --> 00:16:11,984
One report indicated 52%
faster scaling decisions driven

234
00:16:11,984 --> 00:16:14,294
by these precise insights.

235
00:16:14,794 --> 00:16:18,034
Hopefully, you are now seeing
the potential of EBPF and

236
00:16:18,034 --> 00:16:19,714
wondering how to get started.

237
00:16:20,389 --> 00:16:23,719
In your own environment, here's
a practical path forward.

238
00:16:23,989 --> 00:16:27,109
First, learn, dive into the fundamentals.

239
00:16:27,289 --> 00:16:29,359
There are fantastic resources online.

240
00:16:29,389 --> 00:16:33,709
Check out like example, e
bpf.io, vendor blocks, conference

241
00:16:33,709 --> 00:16:34,969
talks, and documentation.

242
00:16:34,969 --> 00:16:39,429
For specific projects like cilium
or pixie, understand the core

243
00:16:39,429 --> 00:16:43,839
concepts like tropes, maps, the
verifier, and common use cases.

244
00:16:44,379 --> 00:16:48,939
Second, experiment theory is great,
but hands-on experience is the key.

245
00:16:48,939 --> 00:16:52,839
I. Set up a non-production environment,
maybe a kind cluster on your

246
00:16:52,839 --> 00:16:54,819
laptop or a dedicated dev cluster.

247
00:16:55,509 --> 00:16:57,879
Deploy some of the open
source tools we mentioned.

248
00:16:58,379 --> 00:17:03,179
Try instrumenting a sample application
and explore the data you get back.

249
00:17:03,929 --> 00:17:05,279
Third, measure.

250
00:17:05,639 --> 00:17:10,049
Once you have something running,
quantify the benefits in your context.

251
00:17:10,259 --> 00:17:12,179
Can you troubleshoot a known issue faster?

252
00:17:12,179 --> 00:17:16,679
Using the EBP of data, can you
identify an optimization opportunity?

253
00:17:17,594 --> 00:17:20,534
Gather metrics to build a
case for wider adoption.

254
00:17:21,134 --> 00:17:25,424
Finally, once you have demonstrated
value and build confidence, you can

255
00:17:25,424 --> 00:17:29,684
scale plan a phase rollout to your
production environment, integrate

256
00:17:29,684 --> 00:17:34,094
EBPF observability strategically into
your standard operating procedures.

257
00:17:34,594 --> 00:17:37,829
Start small, learn, measure,
and then scale with confidence.

258
00:17:38,329 --> 00:17:41,464
So that brings us to the
end of our exploration.

259
00:17:41,944 --> 00:17:44,404
Of network excavation using EBPF.

260
00:17:45,034 --> 00:17:48,094
We have discussed the challenges
of observability in modern cloud

261
00:17:48,094 --> 00:17:53,884
native systems and seen how E-B-P-F-A
powerful solution by offers a

262
00:17:53,884 --> 00:17:57,694
powerful solution by providing safe,
efficient kernel level visibility.

263
00:17:58,354 --> 00:18:02,884
We have touched upon its real world
impact from drastically reducing

264
00:18:02,884 --> 00:18:06,694
troubleshooting times, and enabling
proactive anomaly detection to

265
00:18:06,694 --> 00:18:10,924
visualize complex dependencies and
drive significant cost optimization.

266
00:18:11,424 --> 00:18:15,954
The key takeaway is that EBPF is no
longer just an niche kernel technology.

267
00:18:16,824 --> 00:18:21,774
It's becoming a fun foundational
component for robust, efficient, and

268
00:18:21,774 --> 00:18:23,694
observable cloud native platforms.

269
00:18:24,204 --> 00:18:29,424
I strongly encourage you to investigate
the tools and techniques we discuss

270
00:18:29,424 --> 00:18:35,984
today and consider how they provide
superpowers for your own team and systems.

271
00:18:36,404 --> 00:18:38,219
Thank you for your time and attention.

