1
00:00:00,549 --> 00:00:04,400
hello everyone, my name is Mohammed
Waqas and I am a lead technical

2
00:00:04,420 --> 00:00:08,715
product manager at QALY I have an
experience of more than eight years

3
00:00:08,755 --> 00:00:10,555
in the product management industry.

4
00:00:10,985 --> 00:00:13,254
primarily I am a software engineer.

5
00:00:13,524 --> 00:00:16,594
and I've done my post
graduation in management.

6
00:00:16,604 --> 00:00:21,784
So I've transformed myself to a product
manager for the past six years now.

7
00:00:21,864 --> 00:00:25,204
And, I'm quite excited to
present this topic at this

8
00:00:25,204 --> 00:00:28,534
amazing conference, Conf 42 2025.

9
00:00:28,534 --> 00:00:30,044
so let's start, let's jump right in.

10
00:00:30,524 --> 00:00:33,564
So today I'm going to talk
about how you can optimize your

11
00:00:33,784 --> 00:00:37,844
product, your businesses, and your
methodology of product management

12
00:00:38,104 --> 00:00:40,264
using multi tenancy architecture.

13
00:00:40,554 --> 00:00:44,735
I will be sharing some strategies and
some insights around how businesses.

14
00:00:45,140 --> 00:00:49,750
can transform themselves from
traditional architecture to multi tenancy

15
00:00:49,750 --> 00:00:54,440
architecture and save tremendous cost
when you have to scale to hundreds

16
00:00:54,440 --> 00:00:59,529
of thousands of users and you do
not have to spend on every single

17
00:00:59,570 --> 00:01:01,209
customer when you have to onboard them.

18
00:01:01,210 --> 00:01:02,940
So let's dive right in.

19
00:01:03,829 --> 00:01:05,789
so what is multi tenancy architecture?

20
00:01:05,809 --> 00:01:10,084
It is the architecture where multiple
customers All tenants, in this

21
00:01:10,084 --> 00:01:14,754
case, share a single infrastructure
while maintaining data isolation.

22
00:01:14,834 --> 00:01:18,924
This is very important that they
maintain their own data isolation.

23
00:01:19,014 --> 00:01:20,494
I'm going to talk more about that.

24
00:01:20,894 --> 00:01:26,324
but, it, this architecture basically
enhances scalability, cost efficiency,

25
00:01:26,574 --> 00:01:31,004
and operational effectiveness, if
obviously it is incorporated properly.

26
00:01:31,504 --> 00:01:36,954
Moving on, just a bit of a graphical
representation of how a single tenant

27
00:01:36,954 --> 00:01:38,944
versus multi tenant looks like.

28
00:01:38,994 --> 00:01:42,494
So if you see on the left, you have
multiple customers, customer 1,

29
00:01:42,544 --> 00:01:48,324
customer 2, and customer 3, and they
all share their separate instances

30
00:01:48,374 --> 00:01:49,924
and their separate databases.

31
00:01:50,234 --> 00:01:53,924
But if you see on the multi
tenant structure, you have three

32
00:01:53,924 --> 00:01:58,194
customers who share the similar
interfaces, similar instances, and

33
00:01:58,194 --> 00:01:59,934
they all share single databases.

34
00:02:00,144 --> 00:02:03,664
but their own isolated frameworks,
which is something that I'm

35
00:02:03,664 --> 00:02:04,714
going to talk later as well.

36
00:02:05,664 --> 00:02:10,454
So this is how graphically it looks
and even if you see on the picture,

37
00:02:10,574 --> 00:02:15,684
you can see how we are cutting down
three instances to one just in the

38
00:02:15,684 --> 00:02:17,204
case of having three customers.

39
00:02:17,434 --> 00:02:20,514
Now imagine having hundreds
and thousands of customers.

40
00:02:21,014 --> 00:02:24,354
potential costs when you move from
single tenant to multi tenant.

41
00:02:24,854 --> 00:02:29,134
the key benefits of this entire
infrastructure is extremely

42
00:02:29,134 --> 00:02:33,004
lower costs, easier maintenance
and updates, and faster scaling.

43
00:02:33,494 --> 00:02:37,904
Now, if I can take this moment
here to talk more about how you can

44
00:02:38,154 --> 00:02:42,214
make it easier to maintain, make
easier updates, and faster scaling,

45
00:02:42,584 --> 00:02:44,434
but keeping your data isolation.

46
00:02:45,069 --> 00:02:50,019
So basically when you have so let's take
an example, okay, you have a product

47
00:02:50,369 --> 00:02:57,029
that is Let's say an erp for example
And you have to deploy the exact same

48
00:02:57,029 --> 00:03:03,759
functionalities for 20, 000 customers
with the exact same functionalities, but

49
00:03:03,799 --> 00:03:08,599
their own white labeled themes or their
own logos or their own color grading.

50
00:03:09,059 --> 00:03:15,489
in, instead of deploying this
entire software on multiple AWS EC2

51
00:03:16,139 --> 00:03:20,819
instances, for example, what you can
do is you can potentially keep your

52
00:03:20,849 --> 00:03:24,399
entire code base in one instance.

53
00:03:24,579 --> 00:03:28,554
And then what you can do is you can
keep On the database side, I'm not

54
00:03:28,554 --> 00:03:32,894
going to go deep on the technicalities
of the database security, but you can

55
00:03:33,404 --> 00:03:38,744
easily make database isolations using
AWS databases as well, so that you can

56
00:03:38,744 --> 00:03:40,694
protect the data for each customer.

57
00:03:41,084 --> 00:03:46,774
Now what you're doing is, every time a new
customer comes in, all you do is, you just

58
00:03:46,775 --> 00:03:52,879
create the separate database or a data
isolation pocket for your new customer,

59
00:03:53,109 --> 00:03:58,959
but they all share the same instance and
you can do horizontal scaling for your

60
00:03:59,309 --> 00:04:04,139
set, Instance basically that you have for
your code base and then it automatically

61
00:04:04,139 --> 00:04:08,079
scales when you have more customers that
the server cannot handle, but you're

62
00:04:08,079 --> 00:04:12,869
not spinning up separate instances
every time a new customer is onboarded.

63
00:04:13,519 --> 00:04:16,579
So what it does is it actually
saves you tons of cost.

64
00:04:16,899 --> 00:04:20,369
However, it has its own challenges,
which I'm going to talk a bit later

65
00:04:20,369 --> 00:04:23,899
on, but now I'm going to talk about
a few case studies that I personally

66
00:04:23,899 --> 00:04:26,019
saw, happening in the industry.

67
00:04:26,644 --> 00:04:29,134
One of the companies
is called Grandstream.

68
00:04:29,704 --> 00:04:33,774
They had their tenant setup,
which was a single tenant setup.

69
00:04:34,144 --> 00:04:39,984
Every time a new client is onboarded,
they had to spend almost 232 hours

70
00:04:40,014 --> 00:04:45,284
to set up a new instance, to set up
the entire infrastructure, to set

71
00:04:45,284 --> 00:04:49,314
up all the configurations, and it
was extremely high operational cost.

72
00:04:49,744 --> 00:04:52,374
so what they did is they
basically migrated their entire

73
00:04:52,374 --> 00:04:54,194
instances to multi tenancy.

74
00:04:54,679 --> 00:05:01,739
Resulting in new tenant setup time
to be from 232 hours to 106 hours.

75
00:05:02,199 --> 00:05:05,389
They migrated the clients
in less than 76 hours.

76
00:05:05,734 --> 00:05:11,144
The bug fix time is very crucial because
now you're not fixing bug on hundreds

77
00:05:11,144 --> 00:05:12,974
of thousands of different instances.

78
00:05:13,234 --> 00:05:17,204
You're just fixing bug in one instance
and rolling it out to all your clients.

79
00:05:17,574 --> 00:05:22,154
So what this does is it may maintain
your bug fix time from five hours to

80
00:05:22,234 --> 00:05:23,974
let's say one and two and a half hours.

81
00:05:24,444 --> 00:05:28,214
And this is extremely optimized
when you're talking about scale.

82
00:05:28,784 --> 00:05:31,484
So obviously the investment,
is a separate topic.

83
00:05:31,514 --> 00:05:35,964
But the one thing that I found online
is that they, they had huge monetary

84
00:05:35,984 --> 00:05:37,864
uplift whilst they migrated as well.

85
00:05:38,364 --> 00:05:42,894
talking a bit about Salesforce as well,
they had similar structure, they had

86
00:05:42,914 --> 00:05:48,224
single tenant system, they migrated to
the multi tenant, they have not shared

87
00:05:48,254 --> 00:05:54,374
any, figures for their, for their changes,
but because a company of that magnitude.

88
00:05:54,424 --> 00:05:57,494
If they are moving from single
tenant to multi tenant, you can

89
00:05:57,544 --> 00:06:02,034
understand the importance and the
benefits of this architecture is.

90
00:06:02,534 --> 00:06:06,344
some of the companies, Shopify,
did, the transformation from single

91
00:06:06,344 --> 00:06:07,664
tenant to multi tenant as well.

92
00:06:08,204 --> 00:06:11,804
if you imagine Shopify, it's
just a single functionality where

93
00:06:11,804 --> 00:06:13,434
you can set up multiple stores.

94
00:06:13,724 --> 00:06:16,264
Now they have a similar mindset
that, hey, if you have one

95
00:06:16,264 --> 00:06:17,654
instance, we have multiple shops.

96
00:06:18,344 --> 00:06:20,964
And we have similar
functionalities for all the shops.

97
00:06:20,974 --> 00:06:22,634
Why not keep it multi tenant?

98
00:06:23,224 --> 00:06:27,544
That's a few examples of how
people have actually migrated from

99
00:06:27,544 --> 00:06:29,324
single tenancy to multi tenancy.

100
00:06:29,574 --> 00:06:31,934
And they've had huge uplifts in revenues.

101
00:06:32,184 --> 00:06:35,934
They have huge cost savings,
optimizations, less time in

102
00:06:35,934 --> 00:06:40,434
bug fixing, more, flexibility
in scaling, and obviously some

103
00:06:40,444 --> 00:06:42,044
great long term benefits as well.

104
00:06:42,544 --> 00:06:44,414
one more example, sorry, it's Uber.

105
00:06:44,464 --> 00:06:45,844
Uber again did the same thing.

106
00:06:46,054 --> 00:06:50,584
If you see, Uber had multiple products,
multiple, restaurants, if you talk about

107
00:06:50,584 --> 00:06:53,014
Uber Eats, using similar architecture.

108
00:06:53,134 --> 00:06:55,604
So they did the same, and again.

109
00:06:56,169 --> 00:06:59,999
You can clearly understand that a name
like Uber, if they are going multi

110
00:06:59,999 --> 00:07:02,219
tenant, again, stresses the value.

111
00:07:02,719 --> 00:07:07,379
if I'm going to, to basically move to
quickly and the key benefits is I've

112
00:07:07,379 --> 00:07:11,459
already talked more about, on the fast
onboarding and scaling, but operational

113
00:07:11,459 --> 00:07:15,339
simplification, reduced complexity,
cost efficiency through shared resources

114
00:07:15,889 --> 00:07:19,709
are just a few benefits of moving
from single tenancy to multi tenancy.

115
00:07:20,209 --> 00:07:21,999
But it do has its challenges.

116
00:07:22,424 --> 00:07:28,654
Sometimes, there's a concept of security
and data isolation risk as well, but now

117
00:07:28,704 --> 00:07:33,224
with this modern infrastructure and modern
data security architectures, it has been

118
00:07:33,224 --> 00:07:38,404
proven that you can put up huge, Sorry,
more detailed, data security parameters.

119
00:07:39,094 --> 00:07:42,994
And this risk is now slowly and
gradually being mitigated because

120
00:07:42,994 --> 00:07:47,494
this was a huge risk for any big
player to move to multi-tenancy.

121
00:07:47,704 --> 00:07:52,584
But now I've seen that, there are a lot of
solutions that basically encrypt the data

122
00:07:52,584 --> 00:07:57,354
end to end, and it's very easy to avoid
this risk in the scalable architecture.

123
00:07:57,914 --> 00:08:01,424
There are some performance management,
and user allocation issues.

124
00:08:01,524 --> 00:08:06,244
there are some scaling issues as
well, but I've seen again that, every

125
00:08:06,244 --> 00:08:10,094
single cloud provider is now providing
extremely beneficial solutions

126
00:08:10,404 --> 00:08:11,874
to tackle these problems as well.

127
00:08:12,574 --> 00:08:16,304
again, balancing tenant customization
with simplicity is quite crucial.

128
00:08:16,654 --> 00:08:21,304
because as I said, you are now managing
one single, instance, basically.

129
00:08:21,614 --> 00:08:26,439
Now, the benefits are huge, but if, if
you don't have a fallback solution, if

130
00:08:26,439 --> 00:08:31,009
you don't have a proper backup solution,
then it can become a huge problem as well.

131
00:08:31,239 --> 00:08:36,049
as I said, it looks easy, it sounds
good, but it requires proper planning,

132
00:08:36,139 --> 00:08:40,689
proper arrangement, and proper
resources to basically migrate from

133
00:08:40,689 --> 00:08:42,239
single tenancy to multi tenancy.

134
00:08:42,739 --> 00:08:47,719
best practices I would say is again
just from my own experiences is you

135
00:08:47,719 --> 00:08:51,269
have to make sure that your data
security is absolutely top notch.

136
00:08:51,269 --> 00:08:56,054
This is absolutely something that no
no customer basically will compromise

137
00:08:56,054 --> 00:08:58,154
on, you have to optimize performance.

138
00:08:58,154 --> 00:09:00,894
You have to be very crucial
when it comes to your backups.

139
00:09:00,904 --> 00:09:05,084
You have to be very crucial when it comes
to best practices, both for front end

140
00:09:05,164 --> 00:09:07,064
and for backend and for DevOps as well.

141
00:09:07,794 --> 00:09:12,314
You have to be very sure to have a proper
backend management solution for user

142
00:09:12,594 --> 00:09:14,654
role based access and feature flags.

143
00:09:14,874 --> 00:09:18,374
Feature flagging is very crucial
now because now you are managing.

144
00:09:18,569 --> 00:09:22,299
One single instance and you have
hundreds of thousands of clients.

145
00:09:22,629 --> 00:09:25,729
You have to make sure your feature
flags are properly implemented

146
00:09:25,999 --> 00:09:30,619
because sometimes in some businesses
you might want one feature to just

147
00:09:30,619 --> 00:09:32,499
be available for a few customers.

148
00:09:32,569 --> 00:09:36,839
You need to make sure your feature flags
are properly managed, properly optimized

149
00:09:37,179 --> 00:09:40,469
and that you have properly implemented
that in your code base as well.

150
00:09:40,470 --> 00:09:44,389
You can also use third party
solutions for feature flags but

151
00:09:44,389 --> 00:09:46,269
that's something that is a business.

152
00:09:47,054 --> 00:09:48,574
decision and a product decision.

153
00:09:49,074 --> 00:09:51,324
the future of multi
tenancy is pretty simple.

154
00:09:51,374 --> 00:09:56,194
I think, with the data security, solutions
out there, with the scalable optimization

155
00:09:56,194 --> 00:10:00,434
solutions out there, I don't think
any large scale solution can operate

156
00:10:00,474 --> 00:10:02,564
without the concept of multi tenancy.

157
00:10:02,944 --> 00:10:05,124
It's very crucial that you
understand and evaluate the

158
00:10:05,124 --> 00:10:07,749
importance of this at An early stage.

159
00:10:08,379 --> 00:10:12,669
the key takeaways I would say is that
it's a game changer it's not new.

160
00:10:12,719 --> 00:10:16,679
It's very old, but now it's getting
mature with data protection policies

161
00:10:16,679 --> 00:10:21,114
with the end to end encryption And I
think the case studies clearly shows

162
00:10:21,124 --> 00:10:25,704
how it's very important for any business
to understand this architecture.

163
00:10:26,204 --> 00:10:27,454
Thank you so much for your time.

164
00:10:27,534 --> 00:10:31,774
And, I'm really glad that I get
to make this talk and, feel free

165
00:10:31,774 --> 00:10:33,174
to connect with me on LinkedIn.

166
00:10:33,234 --> 00:10:35,164
and I'll obviously.

167
00:10:35,544 --> 00:10:38,964
share my details, with
the conference organizers.

168
00:10:38,974 --> 00:10:43,244
So if you need, that obviously let
me know, find me on LinkedIn and I'll

169
00:10:43,244 --> 00:10:47,104
make sure to accept your requests and
answer any questions that you want.

170
00:10:47,384 --> 00:10:48,224
Thank you so much.

171
00:10:48,264 --> 00:10:49,204
Have a nice day.

172
00:10:49,704 --> 00:10:49,934
Bye bye.

