1
00:00:00,500 --> 00:00:02,540
And thank you for joining today's session.

2
00:00:02,840 --> 00:00:07,230
My name is Josh Thomas and I'm currently,
leading engineering and architecture

3
00:00:07,230 --> 00:00:09,090
for commerce and financial systems.

4
00:00:09,780 --> 00:00:13,770
Over the years, I worked on subscription
building, payment optimization, and large

5
00:00:13,770 --> 00:00:16,020
scale enterprise integrations across.

6
00:00:16,520 --> 00:00:20,720
Platforms like zoa, Recurly,
Stripe, Oracle, and Salesforce.

7
00:00:21,440 --> 00:00:25,850
Today I'm excited to share how platform
engineering principles can transform

8
00:00:26,390 --> 00:00:31,520
payment systems from a call center
into aerial competitive advantage.

9
00:00:32,020 --> 00:00:35,150
Going to the next slide
start with today's junta.

10
00:00:36,110 --> 00:00:38,220
Here's how I will be spending the time.

11
00:00:39,055 --> 00:00:43,255
On this presentation, we'll start with the
evolution of payment infrastructure, how

12
00:00:43,255 --> 00:00:47,755
we have gone from monolithic processors
to distributed e driven systems.

13
00:00:48,355 --> 00:00:51,085
Next, I'll walk you through
the core principles of platform

14
00:00:51,085 --> 00:00:52,735
engineering applied to payments.

15
00:00:53,425 --> 00:00:56,095
Then we will look at how
to design for resiliency.

16
00:00:56,095 --> 00:00:58,255
C because payments will fail and the key.

17
00:00:58,630 --> 00:01:01,620
Factories, like how you can do
pay payment failure recording.

18
00:01:02,390 --> 00:01:05,090
After that I will, I highlight
the observability and

19
00:01:05,090 --> 00:01:06,380
complaints part of things.

20
00:01:06,430 --> 00:01:10,320
Two areas where I think the
teams are usually slowed down.

21
00:01:10,600 --> 00:01:14,510
Whereas if it's not built into the
platform, but if it's built into the

22
00:01:14,810 --> 00:01:16,305
platform, it can actually delivery.

23
00:01:16,555 --> 00:01:20,124
And finally we will talk about
scaling across different business

24
00:01:20,124 --> 00:01:23,395
models, B2C, B2B, usage based billing.

25
00:01:23,634 --> 00:01:27,955
By the end of this talk you'll see how
modern platforms can directly drive

26
00:01:27,955 --> 00:01:30,115
revenue, retention, and customer trust.

27
00:01:30,615 --> 00:01:33,815
Okay, so to start off
with we can see like how.

28
00:01:34,429 --> 00:01:39,020
A traditional payment system was a
platform driven approach, looks like.

29
00:01:39,020 --> 00:01:41,329
So these are some of the
differences they can see.

30
00:01:41,359 --> 00:01:45,139
So traditionally payment systems were seen
as an unknowable cost of doing business.

31
00:01:45,559 --> 00:01:49,460
They were brittle, manual, full of tribal
knowledge locked into specific teams.

32
00:01:50,059 --> 00:01:54,259
Adding a new feature or a payment
method took months and when some

33
00:01:54,259 --> 00:01:58,759
failure up, up happened, there was like
no visibility into what went wrong.

34
00:01:59,750 --> 00:02:04,294
Whereas in contrast like if you look at
a platform driven approach, you can see

35
00:02:04,294 --> 00:02:08,464
we build like self-service infrastructure
that abstracts a complexity.

36
00:02:08,534 --> 00:02:13,314
The automated recovery process that are
building doesn't need firefighting, right?

37
00:02:13,484 --> 00:02:15,864
'Cause everybody knows when
the systems goes wrong.

38
00:02:16,434 --> 00:02:20,574
And then it, we can easily start looking
at what is runbook and then see like

39
00:02:20,694 --> 00:02:23,034
how we can start the recovery process.

40
00:02:23,284 --> 00:02:28,734
So we reduce the friction and product
teams can fast launch much faster, right?

41
00:02:28,734 --> 00:02:30,295
So these are something that are there.

42
00:02:31,234 --> 00:02:32,785
Because of this, I think you.

43
00:02:33,644 --> 00:02:36,515
Don't have to worry too much
about things going wrong.

44
00:02:36,665 --> 00:02:40,745
You can always focus on what next to
add or what features to be added, right?

45
00:02:40,745 --> 00:02:44,765
So payments will stop being,
becoming a overhead and they'll

46
00:02:44,765 --> 00:02:47,755
become a level of growth moving on.

47
00:02:48,475 --> 00:02:49,945
So you can look at what happened, right?

48
00:02:49,945 --> 00:02:52,015
Like an evolution of
payment infrastructure.

49
00:02:52,015 --> 00:02:54,924
So let's take a step back and
see like how payment structure,

50
00:02:54,924 --> 00:02:56,454
payment infrastructure has evolved.

51
00:02:57,054 --> 00:03:00,895
We started with a monolithic processors,
one provider, tightly coupled systems,

52
00:03:00,895 --> 00:03:07,105
zero flexibility as companies expanded
the integrated multiple providers payment

53
00:03:07,105 --> 00:03:11,015
processors like Braintree, Stripe Arion.

54
00:03:11,584 --> 00:03:16,144
But each recruited custom integration
code leading to duplicated effort.

55
00:03:16,144 --> 00:03:19,684
So one payment processor will work
one way, the other payment processors

56
00:03:19,684 --> 00:03:20,644
will work another way, right?

57
00:03:20,644 --> 00:03:24,384
So it was a mix of lot of APIs
and different architectures.

58
00:03:25,074 --> 00:03:29,684
So then next stage was evolved into like
more API first services providers begin.

59
00:03:30,064 --> 00:03:33,974
Offering abstraction layers and
teams still had to handle all the

60
00:03:33,974 --> 00:03:36,914
failures, but still it was a good
step in the right direction, right?

61
00:03:36,964 --> 00:03:40,264
But today leading companies
are more looking at like event

62
00:03:40,264 --> 00:03:41,584
driven payment platforms, right?

63
00:03:41,584 --> 00:03:46,864
Where like it's distributor architectures,
recovery of server of ty and self service

64
00:03:46,864 --> 00:03:48,304
are baked in from the start, right?

65
00:03:48,304 --> 00:03:50,734
So the shift is really clear,
like how things have evolved.

66
00:03:51,149 --> 00:03:54,839
From a monolithic to more like event
driven payment platforms where like you

67
00:03:54,870 --> 00:03:56,969
get notified of what all happens, right?

68
00:03:56,969 --> 00:04:01,229
So that's what brings in the structure
in the payment infrastructure.

69
00:04:01,479 --> 00:04:02,559
So come moving on.

70
00:04:02,889 --> 00:04:04,749
You can look at like
core platform engineering

71
00:04:04,749 --> 00:04:06,099
principles for payments, right?

72
00:04:06,159 --> 00:04:09,799
So one of the things that
we always look at it is.

73
00:04:10,299 --> 00:04:15,190
So can we abstract a complexity so that
it's not really part of everything, right?

74
00:04:15,190 --> 00:04:17,695
So product teams really need
not know, like everything.

75
00:04:18,315 --> 00:04:21,015
Every minute details of,
say we saw MasterCard of a

76
00:04:21,015 --> 00:04:22,185
local payment method, right?

77
00:04:22,185 --> 00:04:26,065
So how can we really abstract
all those things in in, in

78
00:04:26,065 --> 00:04:27,475
the engineering layers, right?

79
00:04:27,475 --> 00:04:31,615
So second, like how we can build like
a self-service by default, right?

80
00:04:31,615 --> 00:04:34,235
So that like engineering teams
are not involved in each product

81
00:04:34,235 --> 00:04:37,985
launches or pricing changes or
payment method launches, right?

82
00:04:37,985 --> 00:04:40,895
So it's more like configuration
based that any product team can do.

83
00:04:41,675 --> 00:04:43,655
So third is like confluence, right?

84
00:04:43,655 --> 00:04:47,305
Like how do you make sure treating
like regulations as a separate

85
00:04:47,305 --> 00:04:50,815
process where we have a lot of
that UAT and backend process.

86
00:04:51,115 --> 00:04:54,235
How can we directly embed them into
the infrastructure and the APIs have

87
00:04:54,235 --> 00:04:55,825
proper auditing and logging, right?

88
00:04:56,675 --> 00:05:02,235
And then how can we really create a paved
rod, which is like optimize default.

89
00:05:03,115 --> 00:05:06,445
Common payment scenarios while
allowing flexibility are needed, right?

90
00:05:06,535 --> 00:05:11,335
So basically building not our complex
systems, but building a system in

91
00:05:11,335 --> 00:05:15,485
such a way that we can customize
as needed, but not to support

92
00:05:15,485 --> 00:05:16,835
like our customizations, right?

93
00:05:16,835 --> 00:05:19,385
So that it's easy to
maintain the code as well.

94
00:05:19,685 --> 00:05:22,125
So looking at the architecture, right?

95
00:05:22,175 --> 00:05:23,010
So let's.

96
00:05:23,485 --> 00:05:26,695
I look at like how, what all
things are really needed in

97
00:05:26,695 --> 00:05:28,165
a payment platform, right?

98
00:05:28,165 --> 00:05:32,035
So one of the things that we always look
at is you need like a gateway, right?

99
00:05:32,035 --> 00:05:34,825
Like you only unified enterprise
that can abstract multiple providers.

100
00:05:34,825 --> 00:05:39,355
So say in the case of Stripe, Braintree,
each of them has different APAs and

101
00:05:39,355 --> 00:05:40,915
different way of handling things, right?

102
00:05:40,915 --> 00:05:45,505
But if you have a gateway which
can talk to that it's more like

103
00:05:45,955 --> 00:05:47,455
providing that flexibility right?

104
00:05:47,505 --> 00:05:53,795
From a. Engineering standpoint, or from
a product standpoint, you have a payment

105
00:05:53,795 --> 00:05:58,375
processor or a payment provider, and then
you just call the same payment gateway

106
00:05:58,825 --> 00:06:02,805
and payment Gateway has a complexity to
make those transformation that is needed

107
00:06:02,805 --> 00:06:04,455
for each of those processing layers.

108
00:06:04,455 --> 00:06:10,855
So that's one, one way of abstracting it
and then having a unified interface then.

109
00:06:11,260 --> 00:06:12,310
Subscription engine, right?

110
00:06:12,370 --> 00:06:16,140
So subscription engine is the
core of a subscription business.

111
00:06:16,140 --> 00:06:20,670
So where like you start creating the
subscriptions and subscriptions has, each

112
00:06:20,670 --> 00:06:22,500
subscription has like a life cycle, right?

113
00:06:22,500 --> 00:06:27,930
So you have, it can be a monthly, it can
be an annual, it can be a bundle or like

114
00:06:27,960 --> 00:06:30,090
different pricing for price points, right?

115
00:06:30,300 --> 00:06:31,440
Baked into the subscription.

116
00:06:31,440 --> 00:06:36,660
So subscription engine has abstracts all
the logic of so making sure like you build

117
00:06:36,660 --> 00:06:41,470
the right customer at the right billing
period and consolidate that have, if there

118
00:06:41,470 --> 00:06:44,920
are discounts taken into concentration,
taxes and other stuff, right?

119
00:06:44,920 --> 00:06:47,070
So that's the responsibility
of subscription engine.

120
00:06:47,570 --> 00:06:50,750
Then even processing, that's
core for any system, right?

121
00:06:50,750 --> 00:06:54,380
So whether it is like a third party
systems or like systems within, right?

122
00:06:54,380 --> 00:06:58,010
If then there is an action happening,
say like an order is created or like

123
00:06:58,010 --> 00:06:59,330
a subscription is renewed, right?

124
00:06:59,330 --> 00:07:01,880
That sort of becomes
like your event, right?

125
00:07:01,880 --> 00:07:06,050
And then that based on that event, you may
have five to 10 actions to take, right?

126
00:07:06,050 --> 00:07:09,980
So maybe like sending out a notification,
sending it for payment collection.

127
00:07:10,330 --> 00:07:15,090
Making sure GL is posted, phaser, and
then the revenues also allocated, right?

128
00:07:15,090 --> 00:07:19,170
So there are things which can do, which
need not be like really tightly coupled

129
00:07:19,380 --> 00:07:21,480
synchronous transaction process, right?

130
00:07:21,480 --> 00:07:26,205
So this, all, this can be an even
driven process where like all

131
00:07:26,205 --> 00:07:29,760
the systems or microservices get
notified and then they can do the

132
00:07:29,760 --> 00:07:31,320
step that is needed of them, right?

133
00:07:31,820 --> 00:07:33,950
And the last part is
revenue recovery, right?

134
00:07:33,950 --> 00:07:36,620
So any systems, right there
will be failures, right?

135
00:07:36,620 --> 00:07:41,199
And in case of a payment usually once
you have a subscription, you have payment

136
00:07:41,199 --> 00:07:43,479
method that would, that card could expire.

137
00:07:43,959 --> 00:07:47,049
There may not be enough amount
in the card to make the payment.

138
00:07:47,049 --> 00:07:49,389
So there are multiple use
cases that can happen.

139
00:07:49,389 --> 00:07:50,199
So it's always.

140
00:07:51,129 --> 00:07:55,720
Good to have an automatic re try
mechanism built into the platform so that

141
00:07:56,460 --> 00:08:00,220
we are able to collect the amount and
recover the revenue from the customer.

142
00:08:00,720 --> 00:08:01,170
Moving on.

143
00:08:02,025 --> 00:08:04,395
How do you really build
resilient systems, right?

144
00:08:04,395 --> 00:08:08,295
So one of the things that we
always see is like payment services

145
00:08:08,295 --> 00:08:10,515
always need to have 99.99, right?

146
00:08:10,515 --> 00:08:14,505
So it can be like fin nines or three
nines or like a single nine, right?

147
00:08:14,505 --> 00:08:17,665
So that's the minimum that is
needed because anytime there is

148
00:08:17,665 --> 00:08:21,245
a downtime for a payment systems,
you can see how it impacts, right?

149
00:08:21,245 --> 00:08:23,574
So it is if you look at this,
even the single night, right?

150
00:08:24,145 --> 00:08:26,605
You can have only eight
hours of downtime per year.

151
00:08:26,695 --> 00:08:28,795
That is like across 365 days, right?

152
00:08:28,825 --> 00:08:32,065
So the systems has to be
like highly resilient.

153
00:08:32,215 --> 00:08:34,585
It has to be reliable, it
has to scale on its own.

154
00:08:34,664 --> 00:08:39,755
Based on the customer needs as well
as the traffic on the site, right?

155
00:08:39,755 --> 00:08:42,304
And other systems should not be
able to bring it down, right?

156
00:08:42,304 --> 00:08:46,444
So that, that's a core and that, and
there are multiple services involved in

157
00:08:46,444 --> 00:08:48,635
this payment flow or checkout process.

158
00:08:48,635 --> 00:08:51,724
Then we have to make sure this
applies to all the services, right?

159
00:08:51,724 --> 00:08:55,205
So it's not only one service being up
and running, like what other services

160
00:08:55,205 --> 00:08:57,545
are there in the order to cash flow.

161
00:08:57,545 --> 00:08:59,255
They have to be all up and running.

162
00:08:59,570 --> 00:09:01,550
And it needs to be resilient all the time.

163
00:09:02,420 --> 00:09:03,800
So how do you really achieve this?

164
00:09:03,800 --> 00:09:07,490
So one of the things that we can always
think about is like, how do you really

165
00:09:07,490 --> 00:09:09,020
try to do circuit breakers, right?

166
00:09:09,020 --> 00:09:12,650
So if you think like there are
some systems failing, like how

167
00:09:12,650 --> 00:09:15,890
can we really not add too much of
load into those systems, right?

168
00:09:15,890 --> 00:09:18,909
And then start throwing a right
away so that we don't bring down

169
00:09:18,909 --> 00:09:20,019
those systems as well, right?

170
00:09:20,019 --> 00:09:22,389
So that is one, one way
to think about it, right?

171
00:09:22,389 --> 00:09:25,174
And then how can have like
a. Fallback process, right?

172
00:09:25,174 --> 00:09:29,384
Because sometimes the customer would
be having the money in the card, right?

173
00:09:29,384 --> 00:09:31,514
It may be some other process
that failed on our side.

174
00:09:31,514 --> 00:09:33,369
So how do you make sure like you.

175
00:09:33,869 --> 00:09:38,069
Instead of having the customer go
through the, in their flow and doing a

176
00:09:38,069 --> 00:09:42,449
checkout, how can we make sure, like we
can redo reprocessing on our side, like

177
00:09:42,449 --> 00:09:46,169
a fallback processing, give them access
to the product, and then maybe collect

178
00:09:46,259 --> 00:09:47,789
the money at the later point of time.

179
00:09:47,839 --> 00:09:51,219
So how do you build like compensation
handling or fallback processing, right?

180
00:09:51,219 --> 00:09:54,484
So that's something that will be
really useful when you think about it.

181
00:09:54,504 --> 00:09:54,804
And then.

182
00:09:55,259 --> 00:09:57,899
Other thing is like more of on
like on the retry logic, right?

183
00:09:57,899 --> 00:09:59,939
How do you really think about retry?

184
00:09:59,939 --> 00:10:03,639
How you can learn from the all
the failures in the system.

185
00:10:04,059 --> 00:10:06,369
Try to look at the data that
we have and then see how we

186
00:10:06,369 --> 00:10:07,599
can build like an indulgent.

187
00:10:08,069 --> 00:10:08,819
Processing right.

188
00:10:08,819 --> 00:10:10,319
With AI in mind.

189
00:10:10,329 --> 00:10:14,060
It's always good to have those
models learn from the data that

190
00:10:14,060 --> 00:10:17,920
you already have, and then come up
with a lot with a model which can

191
00:10:17,920 --> 00:10:21,400
predict like what is the intelligent
retry or what time to retry right?

192
00:10:21,400 --> 00:10:23,110
For those payments to be successful.

193
00:10:23,110 --> 00:10:27,160
So there is a lot of use cases
that we can bring AI in When you're

194
00:10:27,160 --> 00:10:28,750
thinking about Ian payment systems.

195
00:10:29,000 --> 00:10:33,630
So this is like a case study that we
have put together which, which sort

196
00:10:33,630 --> 00:10:35,280
of shows like how it happens, right?

197
00:10:35,280 --> 00:10:39,410
So before the platform engineering 15%
of the subscription payments fail on

198
00:10:39,410 --> 00:10:41,790
first attempt manual retry process.

199
00:10:41,910 --> 00:10:43,020
Like all best guesses.

200
00:10:43,020 --> 00:10:45,890
Like you cannot, like infinite,
do infinite retries, right?

201
00:10:45,890 --> 00:10:49,670
It always has to be like
a way that you retry.

202
00:10:50,210 --> 00:10:51,640
Maybe four or five times, right?

203
00:10:51,640 --> 00:10:52,960
Like in a 20 day period.

204
00:10:52,960 --> 00:10:57,910
Because the more retries you do on failed
cards, visa, MasterCard, or any of these

205
00:10:58,330 --> 00:11:03,520
payment networks will try to say, okay,
you are trying to charge a customer the

206
00:11:03,520 --> 00:11:08,950
wrong way or like you will be getting
fined because you're trying to retry on

207
00:11:08,950 --> 00:11:11,110
cases where we are not supposed to retry.

208
00:11:11,110 --> 00:11:11,460
So there are.

209
00:11:11,960 --> 00:11:14,810
Lack of visibility into what are
the different error codes and

210
00:11:14,810 --> 00:11:16,580
then not processing them properly.

211
00:11:17,450 --> 00:11:21,020
And then there is no visibility into
how the performance is going, right?

212
00:11:21,020 --> 00:11:24,830
Like recovery performance, are we like
able to collect most of the payments or

213
00:11:24,830 --> 00:11:28,670
are we collecting on the third attempt or
the fifth attempt or 10th attempt, right?

214
00:11:28,970 --> 00:11:32,070
There is no real lack of there
is no real visibility into what's

215
00:11:32,070 --> 00:11:34,550
happening and to say the truth, right?

216
00:11:34,550 --> 00:11:36,260
40% of the recovery rate.

217
00:11:37,160 --> 00:11:38,060
On failed payments.

218
00:11:38,060 --> 00:11:39,230
It's not a big number, right?

219
00:11:39,230 --> 00:11:42,830
So it should be like a higher
number because these are customers

220
00:11:42,830 --> 00:11:46,370
who are subscribers and they're
supposed to pay the company, right?

221
00:11:46,400 --> 00:11:51,140
So that's where I think this becomes
a what do you call, big revenue level

222
00:11:51,140 --> 00:11:55,010
for any companies to focus on and
then build engineering around it.

223
00:11:55,060 --> 00:11:56,800
So coming back to like, how do you.

224
00:11:57,265 --> 00:11:57,835
Get it right.

225
00:11:57,835 --> 00:12:01,495
Like with the platform implementation,
we start doing like smart algorithms

226
00:12:01,705 --> 00:12:04,345
and we try consider all the data, right?

227
00:12:04,345 --> 00:12:08,710
Because all this failure has lot
of data associated with this.

228
00:12:08,710 --> 00:12:11,890
Like whether it's from a MasterCard,
visa networks or from the payment

229
00:12:11,890 --> 00:12:16,330
processes, there is a lot of error
codes and vertical patterns available,

230
00:12:16,330 --> 00:12:19,780
which we can really look at and
say, okay, this, if the payment.

231
00:12:19,975 --> 00:12:24,445
This set code, these are retrial error
and this and retread at on say Friday

232
00:12:24,445 --> 00:12:26,185
at this time this could be successful.

233
00:12:26,215 --> 00:12:27,145
So those are the things.

234
00:12:27,685 --> 00:12:30,475
And then there is always this a
b testing frameworks for retry

235
00:12:30,475 --> 00:12:31,765
strategy that could be applied.

236
00:12:31,765 --> 00:12:34,255
So you can always bucket some.

237
00:12:34,505 --> 00:12:35,435
Variations, right?

238
00:12:35,435 --> 00:12:37,985
Like for the payment ries, and
then try to learn from them, right?

239
00:12:37,985 --> 00:12:42,025
So it's even though the data subjects like
as long as unless you try that out, right?

240
00:12:42,025 --> 00:12:45,475
Like you'll never know whether, how it's
successful and it's how it's come compare

241
00:12:45,475 --> 00:12:47,245
to like our current strategy, right?

242
00:12:47,245 --> 00:12:50,425
So it's always better to do like
an ab testing and then figure

243
00:12:50,425 --> 00:12:51,535
out what is the window right?

244
00:12:51,535 --> 00:12:54,985
And then try to do more
payment retries in that window.

245
00:12:55,790 --> 00:12:59,480
Then it's always a smart idea to have
a real time monitor because without

246
00:12:59,480 --> 00:13:02,300
monitoring it's really difficult
to really bring out what is the.

247
00:13:03,225 --> 00:13:05,535
Level of success rate
that coming in, right?

248
00:13:05,535 --> 00:13:08,145
So like you have to always be
on top of it trying to monitor

249
00:13:08,145 --> 00:13:10,555
how the retries are working.

250
00:13:10,555 --> 00:13:14,445
And then if there are cases, like if
we are reliant on an AM model, there

251
00:13:14,445 --> 00:13:18,715
are always chances that sometimes it
may not be like doing it right way.

252
00:13:18,715 --> 00:13:18,895
Right?

253
00:13:18,895 --> 00:13:19,925
Or the, what do you call the ret?

254
00:13:20,515 --> 00:13:23,915
Or the success rates
would've started going down.

255
00:13:23,975 --> 00:13:26,765
So it's always better to keep
track of whether the model is

256
00:13:27,125 --> 00:13:30,065
trending in the right direction and
then make changes based on that.

257
00:13:30,755 --> 00:13:35,075
And if you look at the 78% success
rate, like we were bring, bring about

258
00:13:35,075 --> 00:13:39,945
close to 40% increase in the success
rate and then that sort of translate

259
00:13:39,945 --> 00:13:41,325
to millions in recover revenue.

260
00:13:41,825 --> 00:13:44,075
Okay, so I mean to complaints, right?

261
00:13:44,075 --> 00:13:45,005
So complaints.

262
00:13:45,835 --> 00:13:49,705
Is something that I think it's always
feared the engineering teams because it

263
00:13:49,705 --> 00:13:52,705
adds a lot of overhead to the systems.

264
00:13:52,765 --> 00:13:55,745
You have to make sure
you audit the systems.

265
00:13:55,745 --> 00:13:59,385
You have to build like more data
validation or data checks in, right?

266
00:13:59,385 --> 00:14:00,380
So it's always a paying for.

267
00:14:01,125 --> 00:14:03,225
To think about like compliance if Yeah.

268
00:14:03,300 --> 00:14:04,830
It's becomes like an afterthought, right?

269
00:14:04,830 --> 00:14:07,980
But I think if you start thinking
about compliance and bake it into

270
00:14:07,980 --> 00:14:10,500
the platform, then it becomes
such, such an easy thing, right?

271
00:14:10,500 --> 00:14:12,750
One of the things is like
a tokenization service.

272
00:14:13,500 --> 00:14:16,860
So secure APIs that handles payment data.

273
00:14:16,860 --> 00:14:20,000
Because one of the things with the
tokenization is you don't, you're not

274
00:14:20,000 --> 00:14:21,700
exposing the customer what do you call it?

275
00:14:21,850 --> 00:14:23,620
Payment, credit card information, right?

276
00:14:23,620 --> 00:14:24,190
So it's.

277
00:14:24,775 --> 00:14:28,135
Always best, like as a
company, not to have anything.

278
00:14:28,135 --> 00:14:30,315
So that's where I think
the hosted fields comes in.

279
00:14:30,315 --> 00:14:34,665
So if you're using Stripe, Zuora,
or Curly, like everybody has

280
00:14:34,665 --> 00:14:37,345
hosted payment method field.

281
00:14:37,345 --> 00:14:39,535
So like you just have to have the STK.

282
00:14:40,020 --> 00:14:42,990
Load the JavaScript and then
they take care of getting the

283
00:14:42,990 --> 00:14:45,990
payment and credit card numbers,
and then they tokenize it for us.

284
00:14:45,990 --> 00:14:49,440
And then we just use the token right
as whenever we want to charge the

285
00:14:49,440 --> 00:14:52,470
customer or do any transaction on
that particular credit card so that

286
00:14:52,470 --> 00:14:54,810
we are not storing that information.

287
00:14:54,810 --> 00:14:59,920
And then it makes it easier for our
systems to be not non PCI stuff, right?

288
00:14:59,950 --> 00:15:02,480
Because we are not
handling any of those data.

289
00:15:03,275 --> 00:15:04,565
Then infrastructure as a code.

290
00:15:05,045 --> 00:15:09,015
So it's always good to have this
infrastructure of code from the starting

291
00:15:09,015 --> 00:15:14,605
itself because with all the cloud pass
platforms, it's easier to build in a

292
00:15:14,605 --> 00:15:17,075
terraform infrastructure as code ability.

293
00:15:17,075 --> 00:15:19,925
So that like you, it's easy
to scale, it's easy to spin

294
00:15:19,925 --> 00:15:21,275
up new environments, and then.

295
00:15:21,620 --> 00:15:22,980
Putting more rail guards, right?

296
00:15:22,980 --> 00:15:27,250
So that not not all the engineering
team have access to critical data and

297
00:15:27,250 --> 00:15:32,370
everything is controlled by the IAC
code and not through manually access

298
00:15:32,370 --> 00:15:33,850
through directly through ui, right?

299
00:15:33,850 --> 00:15:37,930
So it's easy from an auditing standpoint
to really make sure, okay, everything is

300
00:15:37,930 --> 00:15:40,250
done through code and then all the code.

301
00:15:40,750 --> 00:15:42,970
Deployments happen through
like an approval process,

302
00:15:42,970 --> 00:15:44,170
like a CMC process, right?

303
00:15:44,170 --> 00:15:46,870
So that's what the, it brings in.

304
00:15:47,680 --> 00:15:50,770
And then building in the automated
compliance testing, right?

305
00:15:50,770 --> 00:15:53,740
So we can always automate
a lot of these things.

306
00:15:54,460 --> 00:15:59,080
We can have frameworks, automated
security scanning, done like once every

307
00:15:59,080 --> 00:16:00,460
month or once every quarter, right?

308
00:16:00,460 --> 00:16:02,890
Just to make sure like all
the systems are still adhering

309
00:16:02,890 --> 00:16:05,300
to all the complex standards.

310
00:16:05,800 --> 00:16:07,490
Moving on the observability, right?

311
00:16:07,490 --> 00:16:09,620
So this is one of the main
interesting things, right?

312
00:16:09,620 --> 00:16:13,260
In the, in current world if you
need to build a resilient system,

313
00:16:13,260 --> 00:16:15,750
you need to know what's happening
within your system, right?

314
00:16:15,750 --> 00:16:18,060
And if you want to know what's
happening with your system,

315
00:16:18,060 --> 00:16:19,380
you need to like really start.

316
00:16:20,010 --> 00:16:22,700
Looking at how we can build in
observability from the start, right?

317
00:16:22,700 --> 00:16:26,320
So if you are looking at platforms
like Splunk, NewRelic, right?

318
00:16:26,320 --> 00:16:29,740
Like they, they give us a lot of
visibility into what's happening within

319
00:16:29,740 --> 00:16:31,900
like the containers, like the CPUs.

320
00:16:32,420 --> 00:16:33,230
What is the CPUs?

321
00:16:33,230 --> 00:16:34,520
What is the memory usage, right?

322
00:16:34,520 --> 00:16:38,300
So what if they're not enough or
are they spinning up new instances

323
00:16:38,300 --> 00:16:41,120
because the current instance size
is not able to handle, right?

324
00:16:41,120 --> 00:16:42,200
So all these things.

325
00:16:42,700 --> 00:16:45,580
Need to be monitored so that
we can be sure we are building

326
00:16:45,580 --> 00:16:46,450
in the right direction.

327
00:16:46,450 --> 00:16:51,245
So that's where I think the it has
to be part of the, all the services

328
00:16:51,245 --> 00:16:54,605
that we build in the, in, in the
engineering landscape, right?

329
00:16:54,605 --> 00:16:58,505
So that we know what is the health metrics
and what is the AP tech score if there

330
00:16:58,505 --> 00:17:00,365
is a, is there a higher error rate?

331
00:17:00,485 --> 00:17:01,505
Are there any anomalies?

332
00:17:01,505 --> 00:17:05,605
So all this can be identified and
the good thing with having the proper

333
00:17:05,605 --> 00:17:08,490
observability is like you can notify
the right people at the right time.

334
00:17:08,880 --> 00:17:12,900
And then the team to come in and then
look at their it's easy for them to

335
00:17:12,900 --> 00:17:17,100
do look at, okay, trace there and then
figure out, okay, this is because of

336
00:17:17,100 --> 00:17:21,950
this issue, so let's either roll back
the changes or increase the instance

337
00:17:21,950 --> 00:17:23,420
size or like the memory, right?

338
00:17:23,420 --> 00:17:24,850
So that's how we think about it, right?

339
00:17:24,850 --> 00:17:25,390
So that's where.

340
00:17:25,700 --> 00:17:30,310
Observability becomes very important
so that you can easily identify issues

341
00:17:30,400 --> 00:17:32,470
and then take resolution steps, right?

342
00:17:32,470 --> 00:17:34,210
As and when an issue happens.

343
00:17:34,460 --> 00:17:38,580
So how do you really scale payment
platforms across business models?

344
00:17:38,580 --> 00:17:41,590
So there are, really three
core business models, right?

345
00:17:41,590 --> 00:17:43,630
One is like B2C, where I think you.

346
00:17:44,130 --> 00:17:45,420
Directly deal with your customers.

347
00:17:45,420 --> 00:17:48,810
So any customer that lands on
your site, if they want to buy a

348
00:17:48,810 --> 00:17:51,270
subscription or something, you are
directly dealing with the customers.

349
00:17:51,270 --> 00:17:55,540
So there will be millions of customers,
millions of payment methods a lot

350
00:17:55,540 --> 00:17:56,860
of transactions happening, right?

351
00:17:56,860 --> 00:17:58,120
Because it's like a B2B.

352
00:17:58,660 --> 00:18:02,100
In those cases, I think we have
to really track like how the user

353
00:18:02,220 --> 00:18:03,660
is progressing through the funnel.

354
00:18:04,170 --> 00:18:06,990
How do you really do AB testing
based on different flows?

355
00:18:06,990 --> 00:18:10,140
If some people like different
payment methods, right?

356
00:18:10,350 --> 00:18:13,600
Is that is it better to have a
different payment method highlighted

357
00:18:13,600 --> 00:18:15,070
here versus another payment method?

358
00:18:15,070 --> 00:18:19,140
So based on platform geo, like
we should be able to surface

359
00:18:19,385 --> 00:18:20,465
different payment methods.

360
00:18:20,985 --> 00:18:24,045
Localized payment method is like also
one of the important things because a

361
00:18:24,045 --> 00:18:28,905
lot of when in New Look becoming a log
global company a lot of the payment

362
00:18:28,905 --> 00:18:32,695
methods that is that people are familiar
in US may not be the same ones that is

363
00:18:32,745 --> 00:18:34,455
very famous in other countries, right?

364
00:18:34,455 --> 00:18:37,285
So it's always, needed to look
at those platforms to enable

365
00:18:37,285 --> 00:18:39,435
those localized payment methods.

366
00:18:39,585 --> 00:18:44,825
For in UPI for India, it's UPI
and for Mexico at MercadoPago.

367
00:18:44,945 --> 00:18:46,535
So there are like different things, right?

368
00:18:46,535 --> 00:18:50,705
And then how do you make it simplified
so that there is not much hoops in that?

369
00:18:51,205 --> 00:18:53,395
The second thing is like
B2B enterprise platforms.

370
00:18:53,455 --> 00:18:55,385
This is like more enterprise
to enterprise, right?

371
00:18:55,385 --> 00:18:58,875
So you, your customers are enterprise
where they are trying to like

372
00:18:58,965 --> 00:19:01,515
when the sales team is trying to
pitch them, okay, hey, these are

373
00:19:01,515 --> 00:19:02,745
the products that we are selling.

374
00:19:02,745 --> 00:19:04,755
This is the pricing or
the product catalog.

375
00:19:05,355 --> 00:19:09,215
And these are the different combination,
different products that we sell.

376
00:19:09,215 --> 00:19:13,575
And then this may be like a.
Combination of a onetime charge

377
00:19:13,625 --> 00:19:18,645
set up fee subscriptions along with
amendments and some usage based, right?

378
00:19:18,645 --> 00:19:21,225
So those, these are some things
that they try to sell customers.

379
00:19:21,225 --> 00:19:25,155
So here, I think it's, the complexity
is more on the billing hierarchy.

380
00:19:25,675 --> 00:19:28,245
It's, it may not be the number
of what you call subscriptions.

381
00:19:28,245 --> 00:19:32,385
This will be more on the complexity of
how the products pricings are handled.

382
00:19:32,750 --> 00:19:35,730
And then how do you really integrate
it with, if there a procurement system,

383
00:19:36,300 --> 00:19:37,620
supply chain and other things, right?

384
00:19:37,620 --> 00:19:40,590
Like those are, and multi entity
invoicing capabilities, right?

385
00:19:40,590 --> 00:19:41,910
So that's the complexity there.

386
00:19:42,645 --> 00:19:45,515
One of the things like other thing
is like usage based billing, right?

387
00:19:45,515 --> 00:19:47,645
So this can happen for both B2C and B2B.

388
00:19:47,645 --> 00:19:51,175
So this is like getting like
really what do you call used by

389
00:19:51,175 --> 00:19:54,205
all the companies because of the
way gen AI has come out, right?

390
00:19:54,205 --> 00:19:57,445
So everybody's talking about
tokens and lot of things are all

391
00:19:57,565 --> 00:19:59,305
like now based on usages, right?

392
00:19:59,305 --> 00:20:02,155
So like there are different models
in, even in the health industry

393
00:20:02,155 --> 00:20:05,935
where I think we are using like these
many number of, sessions, then how

394
00:20:05,935 --> 00:20:07,165
do you build the customer, right?

395
00:20:07,215 --> 00:20:08,565
Or do you build the insurance, right?

396
00:20:08,565 --> 00:20:11,715
So that a usage based building is
important where I think on one side

397
00:20:11,715 --> 00:20:15,645
you have to track like what are the
usages different usage patterns of

398
00:20:15,645 --> 00:20:18,705
the customers and how do you really
map it to like the systems, right?

399
00:20:18,705 --> 00:20:20,565
Like the subscription
platforms where I think.

400
00:20:21,080 --> 00:20:21,410
Usage.

401
00:20:21,410 --> 00:20:23,750
This can be mapped to how much
they need to be invoiced, right?

402
00:20:23,750 --> 00:20:26,720
So that, that is something, and
how do you really use the new

403
00:20:26,810 --> 00:20:28,220
predictive building kind of thing.

404
00:20:28,370 --> 00:20:32,980
And how the pricing rules to map this
usages to the building side of things.

405
00:20:33,940 --> 00:20:34,630
Moving on.

406
00:20:35,210 --> 00:20:38,060
So I, we just want to spend
a little bit more time on the

407
00:20:38,060 --> 00:20:39,410
usage based billing because.

408
00:20:39,990 --> 00:20:43,730
I think that's where a lot of
teams have felt complexity.

409
00:20:43,980 --> 00:20:46,300
There is a high volume
even ingestion, right?

410
00:20:46,300 --> 00:20:50,030
Because usages can happen, like
in the case of let's say just

411
00:20:50,030 --> 00:20:51,470
the token based things, right?

412
00:20:51,470 --> 00:20:55,220
Like that we have people use APIs, so
you have to keep track of it and there

413
00:20:55,220 --> 00:20:56,660
will a lot of events coming in, right?

414
00:20:56,660 --> 00:20:59,930
How do you really aggregate all
this data across different systems?

415
00:21:00,530 --> 00:21:04,490
How do you have these complex metering
abstractions for areas pattern?

416
00:21:04,540 --> 00:21:07,385
Do you do daily load or
a month monthly load.

417
00:21:07,385 --> 00:21:09,605
That's something that
is always tricky, right?

418
00:21:09,605 --> 00:21:13,265
And so one of the things that we
do, like from a platform side of

419
00:21:13,265 --> 00:21:17,035
thing will be like to have a pre
predefined dimensions and metrics.

420
00:21:17,595 --> 00:21:21,885
And then having a self-service way of
dimensions that we can register so that

421
00:21:21,885 --> 00:21:23,485
everybody can say, okay, this much.

422
00:21:23,575 --> 00:21:24,835
Ma to this much.

423
00:21:24,835 --> 00:21:29,335
And then also give them like the usage
estimation, API, so that they can self

424
00:21:29,335 --> 00:21:32,875
service and then even the customers
can see how much they have used and

425
00:21:32,875 --> 00:21:33,985
then how much they have to pay right.

426
00:21:33,985 --> 00:21:34,975
In the next billing cycle.

427
00:21:34,975 --> 00:21:37,935
So that's or if the billing is like
upfront, then they have to make sure,

428
00:21:37,935 --> 00:21:41,115
okay, we cut taxes and then they pay
more, and then they get more access.

429
00:21:41,115 --> 00:21:44,075
So that's the way that we are
thinking about it, and then this

430
00:21:44,075 --> 00:21:46,085
is becoming the norm nowadays.

431
00:21:46,085 --> 00:21:49,445
So that's why I think everybody is
interested in knowing how to really

432
00:21:49,445 --> 00:21:50,855
do like the usage based building.

433
00:21:51,355 --> 00:21:54,705
And how do you think about
like building from a developer

434
00:21:54,705 --> 00:21:55,995
experience perspective, right?

435
00:21:55,995 --> 00:21:57,135
Like for payment systems.

436
00:21:57,820 --> 00:22:00,540
So it's always like a,
API first design approach.

437
00:22:00,540 --> 00:22:03,750
So I think that's like a pattern
that has been around for years

438
00:22:03,750 --> 00:22:07,240
and all the developers are
really accepted this, right?

439
00:22:07,240 --> 00:22:08,470
And then people are familiar.

440
00:22:08,470 --> 00:22:12,430
Everybody knows how to use APIs,
REST APIs or GraphQL, right?

441
00:22:12,430 --> 00:22:15,430
So this this is like pretty
common standard nowadays.

442
00:22:15,430 --> 00:22:16,960
And also like developer tooling, right?

443
00:22:16,960 --> 00:22:20,560
So people, like it's, if you want
people to start using in their

444
00:22:20,560 --> 00:22:23,790
own languages and it's make it's
always good to have builds STKs.

445
00:22:24,300 --> 00:22:29,050
So s STKs or CLA tools and sandboxes are
a good way for bringing in new developers

446
00:22:29,050 --> 00:22:32,810
to start interacting with your product
or start building against yours, right?

447
00:22:32,810 --> 00:22:35,750
So whenever you start building, like
with, again, say like you want to

448
00:22:35,750 --> 00:22:37,155
build an integration with Stripe.

449
00:22:37,660 --> 00:22:40,690
Recurly, like you always try to see
like whether there's an STK that we

450
00:22:40,690 --> 00:22:42,070
can just directly integrate, right?

451
00:22:42,070 --> 00:22:44,410
Just import the STK and
then start building.

452
00:22:44,810 --> 00:22:46,760
So you don't have to write
like that last code, right?

453
00:22:46,760 --> 00:22:49,610
Of like transforming the rest a
p or the request and response.

454
00:22:49,610 --> 00:22:53,480
So one of the things important is those
STKs has to be maintained so that as,

455
00:22:53,480 --> 00:22:56,930
as soon as like the new version comes
in, we have to make sure like the

456
00:22:56,930 --> 00:22:59,060
STKs or like CS are up updated, right?

457
00:22:59,060 --> 00:23:00,100
That's the thing with it.

458
00:23:00,100 --> 00:23:01,390
But I think that's one good way.

459
00:23:01,970 --> 00:23:04,070
The documentation,
that's always important.

460
00:23:04,070 --> 00:23:08,410
Because anybody, if you don't have a
big support team or anything, right?

461
00:23:08,410 --> 00:23:10,690
It's always better to have
a proper documentation.

462
00:23:10,800 --> 00:23:13,680
So that anybody, any developer can
just go in and say, okay, this is

463
00:23:13,680 --> 00:23:16,770
the request, this is the response,
this is how you call our API.

464
00:23:16,810 --> 00:23:18,275
And then it helps you.

465
00:23:18,965 --> 00:23:22,775
And then having a developer portal with
like best practices, payment resources

466
00:23:22,825 --> 00:23:27,320
the who are the touch what you call kiger
resources the whom they can reach out to.

467
00:23:27,320 --> 00:23:29,590
And there are templates
and tools available, right?

468
00:23:29,590 --> 00:23:32,650
So that's, these are something
that is like across, right?

469
00:23:32,650 --> 00:23:34,060
This is not specific to payment system.

470
00:23:34,060 --> 00:23:34,920
This is across, anybody.

471
00:23:35,735 --> 00:23:39,285
Any team that we want to work
on developing new solutions,

472
00:23:39,345 --> 00:23:40,545
this is some best practices.

473
00:23:40,795 --> 00:23:42,985
So how do you measure the success, right?

474
00:23:42,985 --> 00:23:44,245
Like beyond the type.

475
00:23:44,295 --> 00:23:48,375
A lot of the things from a platform
status, like developer velocity, how

476
00:23:48,375 --> 00:23:50,035
do you roll out new features, right?

477
00:23:50,035 --> 00:23:51,925
That's something that
we try to see, right?

478
00:23:51,925 --> 00:23:56,135
Like from an engineering standpoint,
how fast can we work on the business

479
00:23:56,135 --> 00:24:00,375
initiatives and how fast we can
do how much effort is being put?

480
00:24:00,375 --> 00:24:04,585
So that we are not, always asking like
engineering teams to do the work, right?

481
00:24:04,585 --> 00:24:08,305
How much things can be like done
in a self-service way so that like

482
00:24:08,305 --> 00:24:12,205
we build UI based solutions or what
do you call API based solutions,

483
00:24:12,205 --> 00:24:15,015
which I think where product teams
can execute on their own, right?

484
00:24:15,015 --> 00:24:16,545
So that like the teams are not involved.

485
00:24:17,295 --> 00:24:18,615
And then the call team, right?

486
00:24:18,705 --> 00:24:22,335
Like how can we reduce the number
of incidents that happens, right?

487
00:24:22,335 --> 00:24:23,385
So basically making sure like.

488
00:24:24,015 --> 00:24:27,765
When we are building something,
we have proper call TX in place

489
00:24:27,825 --> 00:24:29,775
regression that can be run, right?

490
00:24:29,775 --> 00:24:34,145
So that they, they are always up to
the standards that we are expecting.

491
00:24:35,085 --> 00:24:38,235
That's on the engineering side, but
coming to business impact, right?

492
00:24:38,275 --> 00:24:40,405
There is always the revenue
recovery, which is tied two

493
00:24:40,405 --> 00:24:41,545
millions of dollars, right?

494
00:24:41,545 --> 00:24:44,565
So it's always we have to make
sure like we have, we are tracking

495
00:24:44,565 --> 00:24:48,165
it very closely and trying to see
like how much payments we can do.

496
00:24:48,165 --> 00:24:51,975
That other is a conversion, which is
more like a checkout success rate, right?

497
00:24:51,975 --> 00:24:55,025
Like how, there will be like a hundred
people going through the checkout process.

498
00:24:55,035 --> 00:24:59,355
If only 10 people are placing an
order, that means like the success

499
00:24:59,355 --> 00:25:03,045
rate, like 90 per 90 people are like
falling out right in the funnel.

500
00:25:03,765 --> 00:25:05,985
How do you make sure how
we can improve that, right?

501
00:25:05,985 --> 00:25:11,495
Is it something that is because of the
what do you call friction in the funnel?

502
00:25:11,645 --> 00:25:13,415
Is that something that
we can improve on, right?

503
00:25:13,415 --> 00:25:15,965
Are there like things which are
not clear to the customer how to

504
00:25:15,965 --> 00:25:17,255
add payment method and all that?

505
00:25:17,285 --> 00:25:18,695
How can we reduce that friction?

506
00:25:18,695 --> 00:25:20,195
That's something that we always look at.

507
00:25:20,625 --> 00:25:22,035
Other than there's like the retention.

508
00:25:22,035 --> 00:25:25,065
So retention is really important and
a lot depends on the product also.

509
00:25:25,065 --> 00:25:25,725
So like the.

510
00:25:26,355 --> 00:25:29,295
If the student likes the product or
the customer likes the product, then

511
00:25:29,355 --> 00:25:31,035
they will keep coming back, right?

512
00:25:31,035 --> 00:25:32,625
And then they will be
renewing the subscription.

513
00:25:32,625 --> 00:25:35,745
So it's always better to make
sure, like how healthy is that

514
00:25:35,745 --> 00:25:37,095
interaction with the customer?

515
00:25:37,095 --> 00:25:40,905
And how can, if the user is not using
it for a long time, then how can

516
00:25:40,905 --> 00:25:44,205
we really bring him back by sending
him notification, giving him like,

517
00:25:44,285 --> 00:25:47,735
say, okay, hey, these are the best
things like that can, how we can

518
00:25:47,735 --> 00:25:49,265
use, utilize the platform, right?

519
00:25:49,265 --> 00:25:51,285
So sort trying to bring
him on the product.

520
00:25:51,335 --> 00:25:53,255
So we are almost reaching then.

521
00:25:53,255 --> 00:25:55,055
So what are the key takeaways, right?

522
00:25:55,105 --> 00:25:58,730
Let's try to wrap up and then I think this
is like, how do you have to like really

523
00:25:58,970 --> 00:26:01,940
start looking with developer experience
because they are the first ones who will

524
00:26:01,940 --> 00:26:05,925
be trying to interact with all these
payment platforms or other things, right?

525
00:26:05,975 --> 00:26:10,215
So if the platform isn't usable, like
the adoption really fails, right?

526
00:26:10,265 --> 00:26:13,685
You have to just always make sure,
like everything is easy to use.

527
00:26:14,435 --> 00:26:17,615
From a design standpoint, I think
you have to always design for a

528
00:26:17,735 --> 00:26:19,385
failure, recovery or resiliency.

529
00:26:19,445 --> 00:26:22,535
So because like systems will fail,
that will be like, there are so

530
00:26:22,535 --> 00:26:26,295
many partners or like interactions
that happen on a payment flow.

531
00:26:26,295 --> 00:26:28,995
So it's always better to
always design for failures.

532
00:26:29,265 --> 00:26:33,975
Know what are the failures like you do
like a failure mode analysis, right?

533
00:26:33,975 --> 00:26:34,270
FMA.

534
00:26:34,840 --> 00:26:37,630
And then try to figure out what
are the failure points and then

535
00:26:37,880 --> 00:26:39,260
take actions based on that.

536
00:26:40,080 --> 00:26:41,650
Then a bit complaints, right?

537
00:26:41,650 --> 00:26:44,050
Like third one was like, we are
like, so that like teams are

538
00:26:44,110 --> 00:26:46,090
not really way down by all this.

539
00:26:46,140 --> 00:26:48,810
And like PCI related overhead, right?

540
00:26:49,590 --> 00:26:51,160
And then always try to.

541
00:26:51,290 --> 00:26:54,980
The technical and the business metrics,
so that a team is aware of what are

542
00:26:54,980 --> 00:26:59,800
the business interests that's, that
needs to be the core of the system

543
00:26:59,800 --> 00:27:01,420
and then we build towards that, right?

544
00:27:01,420 --> 00:27:04,170
So that's what I think there is
always that need to know, like

545
00:27:04,180 --> 00:27:05,620
what is the real goal of business?

546
00:27:05,620 --> 00:27:07,570
And then what are they really focused on?

547
00:27:07,570 --> 00:27:10,510
And then how can we build
solutions in such a way that it

548
00:27:10,510 --> 00:27:11,800
aligns with the business goals.

549
00:27:12,300 --> 00:27:12,480
Yeah.

550
00:27:12,480 --> 00:27:15,330
So this is like how you move,
like payments from a cost center

551
00:27:15,390 --> 00:27:16,770
to becoming growth engine, right?

552
00:27:16,770 --> 00:27:19,540
Being the real part of the business.

553
00:27:20,040 --> 00:27:20,340
Yeah.

554
00:27:20,400 --> 00:27:22,290
So thank you for spending
the time with me.

555
00:27:22,410 --> 00:27:26,705
I think hope you guys learned something
new and then happy for the opportunity.

556
00:27:27,205 --> 00:27:27,820
Have a good day.

557
00:27:27,820 --> 00:27:27,940
Bye.

