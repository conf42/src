1
00:00:00,180 --> 00:00:03,080
Hi there, and welcome to my
session on API first developments.

2
00:00:03,580 --> 00:00:06,979
So my name is Tiago and I'm the
head of developer relations at Reli.

3
00:00:06,980 --> 00:00:10,450
io, where we're building the next
generation internal developer portal.

4
00:00:11,139 --> 00:00:14,779
I've been in the industry for
more than 15 years and I've worked

5
00:00:14,779 --> 00:00:18,330
in very large corporations like
Microsoft, AWS, and PagerDuty.

6
00:00:19,039 --> 00:00:22,279
I'm passionate about solving problems
with code and I love open source.

7
00:00:22,279 --> 00:00:26,840
I've been a contributor and a maintainer
for many years and I really love it.

8
00:00:27,640 --> 00:00:30,260
You have my contacts here
so feel free to reach out.

9
00:00:30,360 --> 00:00:33,430
I must confess I'm more active
these days on LinkedIn, but feel

10
00:00:33,430 --> 00:00:34,770
free to reach out in any of them.

11
00:00:35,270 --> 00:00:39,640
So in this session, we'll explore
API first developments in how it

12
00:00:39,640 --> 00:00:43,619
can supercharge your software's
potential in unpredicted ways.

13
00:00:43,960 --> 00:00:50,905
And I specifically, wrote unpredicted ways
because one of the things that I felt like

14
00:00:50,955 --> 00:00:54,815
more impressive in following this approach
is of course, like there's a bunch of

15
00:00:54,825 --> 00:01:00,015
benefits, but the fact that you can
easily adapt and build new, capabilities

16
00:01:00,015 --> 00:01:02,095
in front ends, is just impressive.

17
00:01:02,155 --> 00:01:06,275
So in this session, we will talk about
the benefits, real world applications,

18
00:01:06,335 --> 00:01:09,315
and some of the best practices and
things that I've learned along the way.

19
00:01:09,815 --> 00:01:11,575
So first thing.

20
00:01:11,925 --> 00:01:15,215
is what is API first development, right?

21
00:01:15,465 --> 00:01:18,375
And so there are a lot of,
different definitions out there.

22
00:01:18,375 --> 00:01:23,555
And depending, who's talking about the
topic, you might see some people focusing

23
00:01:23,555 --> 00:01:25,165
more on the design side of things.

24
00:01:25,165 --> 00:01:27,625
There are others that will
focus more on the development.

25
00:01:28,005 --> 00:01:31,715
I will try to provide like a more
agnostic, perspective to the problem.

26
00:01:31,715 --> 00:01:32,135
Man's.

27
00:01:32,335 --> 00:01:36,365
maybe a bit higher level, but this
is the definition that I feel like

28
00:01:36,405 --> 00:01:39,255
resonates with both sides of the thing.

29
00:01:39,655 --> 00:01:43,575
So API first development is a
strategy that prioritizes the design

30
00:01:43,575 --> 00:01:47,245
and development of APIs before
building the actual application.

31
00:01:47,670 --> 00:01:50,970
So how does this look like, right?

32
00:01:50,990 --> 00:01:55,400
And so I'll start with, the approach
that we have today, like the

33
00:01:55,400 --> 00:01:57,880
traditional code first approach.

34
00:01:58,290 --> 00:02:00,270
And this is just an example, right?

35
00:02:00,270 --> 00:02:04,060
And it might change depending on how
you structure your teams internally.

36
00:02:04,610 --> 00:02:05,040
and.

37
00:02:05,470 --> 00:02:08,950
Basically, this example covers like
a scenario where you have two teams,

38
00:02:08,960 --> 00:02:14,720
front end team and a back end team, that
will need to work together in order to

39
00:02:14,720 --> 00:02:19,580
build this new feature, this new product
that you are about to release, right?

40
00:02:19,990 --> 00:02:24,090
And how this typically goes, and
this is my, of course, my personal

41
00:02:24,540 --> 00:02:28,760
experience, is when you have a new
product that you want, a new feature

42
00:02:28,780 --> 00:02:32,775
that you want to release, you typically
Start working on an MVP, right?

43
00:02:32,775 --> 00:02:37,035
And if this is like a product that
has like a specific front end, if

44
00:02:37,035 --> 00:02:40,455
it's like a web application or mobile
application or whatever it is, you

45
00:02:40,455 --> 00:02:42,225
typically start with the front end, right?

46
00:02:42,565 --> 00:02:47,775
And so you have the front end team that
goes and builds like the first mockups.

47
00:02:47,775 --> 00:02:51,585
So some first, version of the
API that eventually like a

48
00:02:51,585 --> 00:02:53,355
design team, shared with them.

49
00:02:53,545 --> 00:02:55,465
And so they start to write codes.

50
00:02:55,485 --> 00:02:56,655
You have all the nice.

51
00:02:56,930 --> 00:02:58,520
different components on screen.

52
00:02:58,520 --> 00:03:03,580
You can start to experiment with some of
these scenarios, but there will be a point

53
00:03:03,580 --> 00:03:07,809
in time where, this team will realize
that they need access to data, right?

54
00:03:08,169 --> 00:03:13,079
and so in order to move forward, they
will need to create like a mock request

55
00:03:13,169 --> 00:03:15,789
or something similar to simulate the data.

56
00:03:15,949 --> 00:03:17,779
that is coming from the API, right?

57
00:03:18,019 --> 00:03:20,619
And so this will allow them to
move forward, but they know that

58
00:03:20,619 --> 00:03:21,879
this is just a temporary thing.

59
00:03:22,179 --> 00:03:26,089
And so the typically, if this is a
separate team, you'll see like in a

60
00:03:26,129 --> 00:03:31,099
very, in most of the organizations,
you'll have, the front end team to

61
00:03:31,109 --> 00:03:33,839
create a ticket to a backend team, right?

62
00:03:33,839 --> 00:03:37,739
So this is something that will
go, on the backend teams backlog.

63
00:03:37,929 --> 00:03:38,789
they are busy.

64
00:03:38,979 --> 00:03:41,159
and so you will need to wait, right?

65
00:03:41,159 --> 00:03:44,329
So as a front end, as a front
end, developer building this

66
00:03:44,329 --> 00:03:47,879
feature, you'll need to wait for
the backend team to be available.

67
00:03:48,069 --> 00:03:51,289
And this might be just
a few hours, a few days.

68
00:03:51,459 --> 00:03:55,819
Typically it goes like up to a few
weeks or something like that, right?

69
00:03:56,129 --> 00:04:00,379
And so the front end team will
not be waiting, for them to,

70
00:04:00,379 --> 00:04:02,699
for them to build these API.

71
00:04:02,939 --> 00:04:07,069
that they have requested, they
will continue to work right and add

72
00:04:07,079 --> 00:04:12,059
more complexity on their APIs on
their front end, the development

73
00:04:12,109 --> 00:04:17,059
and basically, simulating these API
requests that they will be making.

74
00:04:17,089 --> 00:04:18,479
So none of these will actually.

75
00:04:18,784 --> 00:04:21,634
call APIs or interact with real data.

76
00:04:21,854 --> 00:04:22,994
They will have mock data.

77
00:04:23,204 --> 00:04:26,804
They will basically have
temporary code that they will

78
00:04:26,804 --> 00:04:28,404
need to work on in the future.

79
00:04:28,864 --> 00:04:32,074
But there will be a point in time
where the front end team and the

80
00:04:32,084 --> 00:04:34,054
back end team will get together.

81
00:04:34,299 --> 00:04:36,619
to agree on the API contract, right?

82
00:04:36,949 --> 00:04:42,339
And one of the things that I've seen
happen like most of the time is that

83
00:04:43,189 --> 00:04:48,169
the expectations from the front end
team will not be met by whatever the

84
00:04:48,179 --> 00:04:50,529
back end team will need to build, right?

85
00:04:50,899 --> 00:04:55,209
There are typically like challenges
in not having access to the data

86
00:04:55,209 --> 00:04:59,399
that the front end team wanted
because the data just doesn't exist.

87
00:04:59,629 --> 00:05:02,129
or, there are some security, limitations.

88
00:05:02,384 --> 00:05:04,804
that the front end team didn't
take into consideration.

89
00:05:05,004 --> 00:05:05,814
So there's.

90
00:05:06,304 --> 00:05:12,174
Typically the need to reinvent a little
bit, the way that you access these,

91
00:05:12,204 --> 00:05:14,164
the data through the APIs, right?

92
00:05:14,434 --> 00:05:17,284
it's not necessarily the case like
every single time, but it's something

93
00:05:17,284 --> 00:05:18,944
that I see very commonly happening.

94
00:05:19,394 --> 00:05:22,824
So they will agree on an API contract.

95
00:05:23,109 --> 00:05:26,959
And at this point in time, the backend
team will start to work, on the

96
00:05:26,969 --> 00:05:29,339
specific, on the specific API, right?

97
00:05:29,669 --> 00:05:33,479
And the way to unblock the front
end team as fast as possible,

98
00:05:33,509 --> 00:05:37,429
because at right now they will be
waiting, for the API to be ready.

99
00:05:37,829 --> 00:05:42,059
so the way to do this is typically
is through, the creation of a

100
00:05:42,159 --> 00:05:45,799
basically exposing an API mock,
to the front end team, right?

101
00:05:45,839 --> 00:05:49,119
This takes time because you
just agreed on an API contract.

102
00:05:49,119 --> 00:05:53,159
You need to create all the like
the API specification, potentially

103
00:05:53,159 --> 00:05:54,489
provide some documentation.

104
00:05:54,739 --> 00:05:56,549
that's what you would ideally do.

105
00:05:56,549 --> 00:05:58,039
Provide some documentation as well.

106
00:05:58,294 --> 00:06:03,114
but just get something that provides like
all the different endpoints that you would

107
00:06:03,114 --> 00:06:09,564
provide in the production, ready API, but
it's just not connecting to the API still,

108
00:06:09,614 --> 00:06:12,164
to the database still, it's just using it.

109
00:06:12,314 --> 00:06:14,714
mock data, for the time being, right?

110
00:06:15,134 --> 00:06:18,214
But once you get that out,
you'll publish that will be

111
00:06:18,214 --> 00:06:19,784
available for the front end team.

112
00:06:20,024 --> 00:06:25,664
And this is where, typically if there
is like a huge difference between, the

113
00:06:25,984 --> 00:06:30,494
expectations of the front end team and
the API contract that was agreed on.

114
00:06:30,754 --> 00:06:33,344
typically this involves
a bit of refactoring.

115
00:06:33,374 --> 00:06:35,744
So you need to, the front end
team will need to refactor.

116
00:06:36,064 --> 00:06:40,414
the existing codes to comply
with the agreed API contract.

117
00:06:40,514 --> 00:06:44,754
And so the backend team will continue
to develop because this is still an

118
00:06:44,754 --> 00:06:48,624
API mock, they will need to write
the API code that interacts with

119
00:06:48,634 --> 00:06:51,314
the database, with the different
data sources that you might have.

120
00:06:51,719 --> 00:06:52,789
They need to write the test.

121
00:06:52,809 --> 00:06:57,259
They need to write proper documentation
and they will make it once again,

122
00:06:57,499 --> 00:07:01,729
available, through the intermediate
environments like dev staging and

123
00:07:01,769 --> 00:07:05,739
eventually reaching production and the
front end team will do exactly the same.

124
00:07:06,059 --> 00:07:09,989
and once that happens, it's
available to, to, to the end user.

125
00:07:10,464 --> 00:07:12,454
or potentially available
to the end user, right?

126
00:07:13,244 --> 00:07:17,914
So in this approach, you see a
lot of back and forth, right?

127
00:07:17,914 --> 00:07:23,984
And that some important decisions like
agreeing on the API contract are made

128
00:07:24,384 --> 00:07:29,704
in the middle or already throughout the
process of developing and writing code.

129
00:07:30,654 --> 00:07:33,044
Which is not ideal, right?

130
00:07:33,044 --> 00:07:36,994
Because there's a lot of time
wasted, on, refactoring codes.

131
00:07:37,004 --> 00:07:44,019
There's, like additional complexity added,
to the process that wasn't, Necessary.

132
00:07:44,199 --> 00:07:49,179
So if we think about an API first
approach, you'll see some tasks

133
00:07:49,189 --> 00:07:53,979
here that are common in common
with what I showed you before.

134
00:07:54,089 --> 00:07:58,089
So one of the main things that
changes in the API first approach

135
00:07:58,149 --> 00:08:02,529
is that we introduce collaboration
way earlier in the process.

136
00:08:02,599 --> 00:08:09,074
And so you will definitely spend a bit
more time in this first step where we

137
00:08:09,074 --> 00:08:11,524
are all working on the API contract.

138
00:08:11,524 --> 00:08:13,134
We all need to agree on what's.

139
00:08:13,919 --> 00:08:17,314
are like the use cases that
we are tackling so we can

140
00:08:17,314 --> 00:08:20,069
get to the API contract.

141
00:08:20,389 --> 00:08:23,189
but the next steps will be much faster.

142
00:08:23,319 --> 00:08:24,379
There are no like.

143
00:08:24,829 --> 00:08:25,879
Waiting times.

144
00:08:26,549 --> 00:08:29,859
so the dependencies are reduced a lot.

145
00:08:30,089 --> 00:08:34,659
And so this is one of the
advantages of API first approach.

146
00:08:34,759 --> 00:08:37,479
But let's look into this,
this example in more detail.

147
00:08:37,559 --> 00:08:41,369
So in this case, I have a backend
front end and the products

148
00:08:41,389 --> 00:08:43,679
owner, involved in the process.

149
00:08:43,949 --> 00:08:49,499
we could have designers and the UX team
involved, in many other teams that might

150
00:08:49,499 --> 00:08:51,969
be involved in this specific feature.

151
00:08:52,279 --> 00:08:55,019
it's not just usually just the
front end and the back end.

152
00:08:55,069 --> 00:08:57,129
That's why I represented
the product owner as well.

153
00:08:57,579 --> 00:09:02,049
And so in the first step, they will
all need to agree on the API contract.

154
00:09:02,049 --> 00:09:05,369
So they will discuss the use
cases that the product owner.

155
00:09:05,609 --> 00:09:10,949
brings up front, they will discuss
like how the developers and end users

156
00:09:10,959 --> 00:09:13,269
will interact with these specific APIs.

157
00:09:13,679 --> 00:09:19,579
And one of the reasons why I also included
the product owner, in this first step

158
00:09:19,919 --> 00:09:27,319
is because in an API first approach,
the API is actually a product, right?

159
00:09:27,359 --> 00:09:29,709
You should approach it as a product.

160
00:09:29,989 --> 00:09:33,799
So you would manage it as like
your front end application,

161
00:09:33,799 --> 00:09:35,089
as your mobile application.

162
00:09:35,399 --> 00:09:36,819
it's a product, right?

163
00:09:36,979 --> 00:09:41,409
Even if it's not exposed externally
for other people to use, should still

164
00:09:41,419 --> 00:09:43,889
be approached as, as a product, right?

165
00:09:44,299 --> 00:09:49,279
and so in this first step, you would, work
together, you probably take a few days or

166
00:09:49,279 --> 00:09:52,219
weeks to get into a final API contract.

167
00:09:52,319 --> 00:09:57,229
But once that's done, you'll get
the back end team already working

168
00:09:57,229 --> 00:10:02,540
on creating the API mock, and making
it available to the front end team.

169
00:10:02,649 --> 00:10:06,200
And so at this point in time,
the front end team Is ready and,

170
00:10:06,300 --> 00:10:09,790
actively working on writing the
code for this application, right?

171
00:10:10,120 --> 00:10:15,780
At the same time, the backend is involved
in and, basically working on, creating

172
00:10:15,780 --> 00:10:21,240
the production ready, API and the front
end team is doing the same, right?

173
00:10:21,410 --> 00:10:23,480
So you don't have wait times.

174
00:10:23,795 --> 00:10:28,825
Since the moment that you start writing
code, there are no more wait times, right?

175
00:10:29,055 --> 00:10:32,825
And there's, of course, like some
back and forth because, when you start

176
00:10:32,864 --> 00:10:37,274
working on the front end, you might
have some feedback on how, or like this

177
00:10:37,274 --> 00:10:42,045
API should return result in slightly
different way or something like that.

178
00:10:42,045 --> 00:10:46,235
There's always the need for some
tweaks, but you are working as a team.

179
00:10:46,235 --> 00:10:48,435
You are involved in the process of.

180
00:10:48,765 --> 00:10:51,405
Bringing these, product
to your customers, right?

181
00:10:51,675 --> 00:10:54,925
so there's like less frustration
in the process, because the

182
00:10:54,925 --> 00:10:56,705
collaboration started earlier.

183
00:10:56,725 --> 00:10:58,634
You all agreed on one thing.

184
00:10:58,875 --> 00:11:00,745
And so you build towards that.

185
00:11:01,025 --> 00:11:04,859
And in the previous example,
That's not the case, right?

186
00:11:04,859 --> 00:11:08,249
Because you have the front end team asking
for something, then the backend team

187
00:11:08,299 --> 00:11:12,089
potentially not being able to deliver
that because of some limitations that

188
00:11:12,089 --> 00:11:17,269
are not even, their responsibility, but
then front end team becomes frustrated.

189
00:11:17,279 --> 00:11:21,509
The backend team becomes frustrated and
the end result is not the same, right?

190
00:11:22,059 --> 00:11:26,649
So in this case, basically you see that
once the, the teams agree on the API

191
00:11:26,699 --> 00:11:28,759
contract, the process is more streamlined.

192
00:11:28,759 --> 00:11:29,299
So there's.

193
00:11:29,634 --> 00:11:33,684
still, collaboration, but it's more
effective collaboration and the

194
00:11:33,684 --> 00:11:35,564
end result will be much better.

195
00:11:35,994 --> 00:11:39,624
so once they develop the features and
everything's production ready, they will

196
00:11:39,624 --> 00:11:44,304
push the code to production in that code
becomes available for the end users.

197
00:11:44,424 --> 00:11:45,334
So I feel like it's.

198
00:11:46,019 --> 00:11:49,689
easy to see the benefits
of these approaches, right?

199
00:11:50,189 --> 00:11:55,279
And in order to get that, there are a few
key principles to take in mind, right?

200
00:11:55,559 --> 00:11:59,749
I could mention a few others, but for
me, these are the three main, principles

201
00:11:59,749 --> 00:12:01,279
that you should take into consideration.

202
00:12:01,839 --> 00:12:06,029
The first one is design first,
second one collaboration, and the

203
00:12:06,029 --> 00:12:07,879
third one user centric, right?

204
00:12:08,459 --> 00:12:12,469
So for the first one, APIs
should be designed thoroughly

205
00:12:12,479 --> 00:12:14,329
before implementation begins.

206
00:12:14,664 --> 00:12:20,885
And this is like the main ingredients
for the success of the, of this

207
00:12:20,885 --> 00:12:22,175
process that we are talking about.

208
00:12:22,275 --> 00:12:27,845
So if we have some kind of things
that weren't figured out during

209
00:12:27,845 --> 00:12:30,325
the process, they will show up.

210
00:12:30,695 --> 00:12:34,575
Later on, in these will cause
entropy and then you need to go

211
00:12:34,585 --> 00:12:36,525
back into the design stage, right?

212
00:12:36,795 --> 00:12:43,175
So make sure that you invest the time
that is necessary in the design stage

213
00:12:43,455 --> 00:12:48,915
So you can basically have something
to work with and that leaves no

214
00:12:48,915 --> 00:12:51,425
questions for any of the teams, right?

215
00:12:51,425 --> 00:12:52,495
So this is really important.

216
00:12:53,015 --> 00:12:55,405
The second one is around
collaboration, right?

217
00:12:55,645 --> 00:13:01,455
So cross functional teams can
collaborating since the beginning

218
00:13:01,455 --> 00:13:03,645
of the process is also key.

219
00:13:03,930 --> 00:13:06,100
for the success of this operation, right?

220
00:13:06,490 --> 00:13:09,610
If you don't have these teams
collaborating since the beginning,

221
00:13:09,890 --> 00:13:12,650
they will feel like they were
left out and they are just doing

222
00:13:12,680 --> 00:13:14,200
tasks for the other team, right?

223
00:13:14,250 --> 00:13:15,610
That's not the case.

224
00:13:15,900 --> 00:13:20,770
Your API is a product and that API
will interact with other products.

225
00:13:20,985 --> 00:13:24,225
And so this is really
important to, to be clarified.

226
00:13:24,305 --> 00:13:27,455
And so that's why you should
bring teams, really early in

227
00:13:27,455 --> 00:13:30,095
the game and then user centric.

228
00:13:30,195 --> 00:13:33,675
This is really important because
sometimes, so we've all been there.

229
00:13:33,955 --> 00:13:39,235
we feel like we have figured out
like the, what the users would

230
00:13:39,235 --> 00:13:41,115
like to see in the product, right?

231
00:13:41,355 --> 00:13:42,615
That's not always the case.

232
00:13:42,715 --> 00:13:46,435
In many cases, that's not
the case at all, right?

233
00:13:46,765 --> 00:13:52,655
And so focus on the needs of end users,
talk to end users, talk to potential

234
00:13:52,665 --> 00:13:56,735
customers, and talk to the developers
who will consume the API, right?

235
00:13:56,915 --> 00:14:01,445
In some cases, if you are talking
about like an internal API, these

236
00:14:01,445 --> 00:14:02,985
might potentially be the same.

237
00:14:03,285 --> 00:14:08,559
But if you are talking about external,
an external API, that's not the case.

238
00:14:08,770 --> 00:14:09,620
exactly the same.

239
00:14:09,640 --> 00:14:11,150
And so you need to talk to people.

240
00:14:11,150 --> 00:14:14,110
You need to focus on what
they are trying to achieve.

241
00:14:14,390 --> 00:14:17,520
Otherwise you will be building
something that people don't want.

242
00:14:17,520 --> 00:14:18,830
And so they will not use it.

243
00:14:18,970 --> 00:14:20,960
That's as, as, as clear as that.

244
00:14:21,750 --> 00:14:24,250
but there are some benefits of
course, otherwise I wouldn't

245
00:14:24,260 --> 00:14:25,990
be, talking about the topic.

246
00:14:26,230 --> 00:14:29,920
There are a few benefits that, and
I just mentioned five of them here.

247
00:14:30,610 --> 00:14:36,040
These are some of the ones that I feel
like are, more relevant, in the process.

248
00:14:36,290 --> 00:14:40,190
So the first one is on,
parallel software development.

249
00:14:40,350 --> 00:14:45,430
So as you already, you already saw
that collaboration is a big thing here.

250
00:14:45,660 --> 00:14:49,370
And I focus a lot on not
having teams waiting on others.

251
00:14:49,710 --> 00:14:56,910
So teams working concurrently API
contract and eliminating sequential

252
00:14:56,910 --> 00:15:01,770
dependencies is great benefit from my
perspective, it's always challenging

253
00:15:01,800 --> 00:15:06,390
when you have people waiting for other
teams and what you typically do is that,

254
00:15:06,560 --> 00:15:08,330
okay, these guys are really expensive.

255
00:15:08,330 --> 00:15:11,890
So you cannot have them just
sitting there doing nothing.

256
00:15:11,910 --> 00:15:13,660
So you will put them in other projects.

257
00:15:13,660 --> 00:15:15,550
You'll put them working on other features.

258
00:15:15,830 --> 00:15:18,960
And this causes a lot of context
switching for developers, right?

259
00:15:19,210 --> 00:15:20,660
And it's really confusing.

260
00:15:20,670 --> 00:15:22,680
It takes a lot of time for
developers to, to that.

261
00:15:22,920 --> 00:15:27,790
So if you If you are able to streamline
the process, it's way better,

262
00:15:27,900 --> 00:15:29,350
you'll get much better results.

263
00:15:29,900 --> 00:15:32,220
Then you have improved
developer experience.

264
00:15:32,330 --> 00:15:37,260
So since you have standardized
these kind of API, you have

265
00:15:37,310 --> 00:15:39,470
something that is well documented.

266
00:15:39,730 --> 00:15:45,870
you have, something that will, accelerate
the developer understanding of your APIs.

267
00:15:46,170 --> 00:15:51,590
So this is really important because no
developer in the world will use an API

268
00:15:51,600 --> 00:15:56,240
that is like not properly documented,
that doesn't, that they will need to

269
00:15:56,240 --> 00:15:59,410
invest hours to learn how the API works.

270
00:15:59,420 --> 00:16:00,710
So that's not a thing.

271
00:16:01,670 --> 00:16:06,270
So focus on kind of standardizing,
and documenting your APIs.

272
00:16:06,505 --> 00:16:08,965
to provide, a better developer experience.

273
00:16:09,805 --> 00:16:12,185
Then you have the accelerated
development process.

274
00:16:12,415 --> 00:16:16,905
And specifying the API up front
enables faster prototyping.

275
00:16:17,085 --> 00:16:21,875
So it's crucial for the front
end teams in this case, to build

276
00:16:21,875 --> 00:16:23,545
their own, like their front end.

277
00:16:23,805 --> 00:16:26,105
for, for their application
building on top of your A.

278
00:16:26,105 --> 00:16:26,335
P.

279
00:16:26,335 --> 00:16:26,575
I.

280
00:16:26,855 --> 00:16:31,455
And it's also a really good way
to validate, some systems that you

281
00:16:31,455 --> 00:16:33,825
might be building some prod new
products that you might be building

282
00:16:33,825 --> 00:16:35,315
or some integration with your A.

283
00:16:35,315 --> 00:16:35,565
P.

284
00:16:35,565 --> 00:16:35,765
I.

285
00:16:36,335 --> 00:16:39,015
So let's say you have a web
application and you now want

286
00:16:39,015 --> 00:16:40,315
to build a mobile application.

287
00:16:40,315 --> 00:16:45,385
So you can quickly build a mobile
application if you have an API exposed

288
00:16:45,385 --> 00:16:49,785
already, that provides you access
to the data that you want, right?

289
00:16:50,675 --> 00:16:53,945
There's also the reduced
risk of failure, right?

290
00:16:53,945 --> 00:16:59,915
So early API design catches potential
integration issues before they

291
00:16:59,915 --> 00:17:01,835
become costly problems, right?

292
00:17:02,155 --> 00:17:05,705
So they, this, like
identifying the issues.

293
00:17:06,000 --> 00:17:10,110
Earlier in the process makes
it less expensive, basically

294
00:17:10,120 --> 00:17:12,110
requires, less rework.

295
00:17:12,350 --> 00:17:17,670
And, that's if you developed, develop
some feature on top of an API that

296
00:17:17,690 --> 00:17:22,320
is not well designed, there will be
like a lot of hacks in your code and

297
00:17:22,320 --> 00:17:26,570
that you need to basically, remove
that during the rework process.

298
00:17:26,800 --> 00:17:29,140
And if the developer
that built that feature.

299
00:17:29,470 --> 00:17:31,365
doesn't work for the company anymore.

300
00:17:31,525 --> 00:17:35,145
It takes a lot of time for other people
to learn, what they've done, just,

301
00:17:35,345 --> 00:17:37,495
to cover, the limitations of an API.

302
00:17:37,625 --> 00:17:43,725
So focus on designing your API
properly and making sure that you

303
00:17:43,755 --> 00:17:45,165
identify the issues earlier on.

304
00:17:45,970 --> 00:17:48,900
And then, of course, the optimized
development costs, we already

305
00:17:48,900 --> 00:17:50,900
touched on, the rework part of it.

306
00:17:51,050 --> 00:17:55,850
so the fact that we focus on,
designing the API properly, from

307
00:17:55,850 --> 00:17:59,300
earlier on, basically minimizes
the rework that is necessary.

308
00:17:59,795 --> 00:18:01,855
Reduces communication overhead, right?

309
00:18:01,855 --> 00:18:07,545
So if we are building on top of an API
that is well documented, we don't need

310
00:18:07,545 --> 00:18:09,285
to talk to other, to the other team.

311
00:18:09,345 --> 00:18:10,925
So it's time that we are saving.

312
00:18:10,925 --> 00:18:14,095
It's time that we are saving
the other team as well, right?

313
00:18:14,495 --> 00:18:16,265
And it also prevents technical depth.

314
00:18:16,660 --> 00:18:22,330
So once again, if we are building acts
on our, codes just to cover for, some

315
00:18:22,330 --> 00:18:26,480
kind of limitation on the API side, it's
always, it's always something that, is

316
00:18:26,480 --> 00:18:30,650
not great in technical depth is one of the
main problems that we have, these days.

317
00:18:30,935 --> 00:18:33,795
that is preventing many
companies from moving forward

318
00:18:33,795 --> 00:18:37,515
and adapting, more interesting
processes and technologies, right?

319
00:18:37,515 --> 00:18:38,465
try to avoid that.

320
00:18:38,965 --> 00:18:41,695
and now I just wanted to
give you some examples.

321
00:18:41,735 --> 00:18:44,665
I'll start with some
examples from, from, Relia.

322
00:18:44,665 --> 00:18:46,345
io, so the company that, I represent.

323
00:18:46,705 --> 00:18:50,975
And, so we follow this API first
approach, and this actually

324
00:18:50,975 --> 00:18:55,060
allowed us to develop further
integrations, in a much easier way.

325
00:18:55,400 --> 00:19:03,680
and we actually were, able to onboard more
customers to our platform because of this.

326
00:19:03,840 --> 00:19:07,510
So I'll give you, like five
examples of things that we have

327
00:19:07,520 --> 00:19:09,630
done or are actively doing.

328
00:19:09,870 --> 00:19:12,700
at this point in time, building
on top of our API, right?

329
00:19:13,090 --> 00:19:17,260
So first one that you see on the
left is a Kubernetes operator, right?

330
00:19:17,260 --> 00:19:22,590
So we built this Kubernetes operator
after identifying that this was a common

331
00:19:22,620 --> 00:19:26,820
pattern, for the customers that we were
onboarding into our platform, right?

332
00:19:26,820 --> 00:19:28,880
So companies using Kubernetes.

333
00:19:29,310 --> 00:19:32,420
using GitOps that had everything as code.

334
00:19:32,570 --> 00:19:37,450
So we could actually populate
with the Kubernetes operator.

335
00:19:37,450 --> 00:19:43,200
We could populate our software catalog
in a much streamlined way, which

336
00:19:43,240 --> 00:19:45,090
allows us to save a lot of time.

337
00:19:45,090 --> 00:19:49,300
So instead of have spending weeks,
making sure that the software catalog

338
00:19:49,300 --> 00:19:52,565
is properly mapped and everything's
on boarded and all of that, We

339
00:19:52,565 --> 00:19:54,465
could do this in hours now, right?

340
00:19:54,725 --> 00:19:58,655
So it's just a matter of making sure
that Kubernetes operator is properly

341
00:19:58,655 --> 00:20:00,425
deployed in your Kubernetes clusters.

342
00:20:00,425 --> 00:20:04,985
You have all the definitions, your,
blueprints deployed in your environment.

343
00:20:05,055 --> 00:20:08,375
And we are automatically getting this
information and it's getting synced.

344
00:20:08,580 --> 00:20:09,280
in real time.

345
00:20:09,780 --> 00:20:13,260
Another thing that we, started
working on is actually a Visual Studio

346
00:20:13,320 --> 00:20:17,070
Code integration because one of our
values is to be where developers are.

347
00:20:17,470 --> 00:20:23,490
And so if you can, do most of the
tasks to interact with, with rely

348
00:20:23,530 --> 00:20:27,360
directly from Visual Studio Code,
things like, for instance, executing

349
00:20:27,360 --> 00:20:31,150
a self service action or actually
see information from your software

350
00:20:31,150 --> 00:20:34,340
catalog, related to your specific,
to a specific service that you are

351
00:20:34,340 --> 00:20:36,850
managing, it's much, much easier, right?

352
00:20:36,850 --> 00:20:41,140
So you don't need to move into, to go
into the web browser to actually see

353
00:20:41,140 --> 00:20:43,310
information about, your services, right?

354
00:20:43,670 --> 00:20:47,260
You also have Terraform, of course,
builds on top of our APIs, and we use

355
00:20:47,260 --> 00:20:49,670
it to provision, new environments, and.

356
00:20:50,015 --> 00:20:51,715
The next one is on Raycast.

357
00:20:51,715 --> 00:20:55,715
I don't know if you know about Raycast,
but Raycast is basically, it's basically

358
00:20:55,715 --> 00:21:01,265
a launcher for macOS and soon available,
in iPhone and Windows as well.

359
00:21:01,495 --> 00:21:04,605
but basically it's something
that allows me just by clicking

360
00:21:04,605 --> 00:21:09,580
command space to interact with
Many applications integrations

361
00:21:09,580 --> 00:21:11,470
that I have in one of them is rely.

362
00:21:11,470 --> 00:21:12,130
io.

363
00:21:12,180 --> 00:21:15,060
So I can see, information
about my services directly

364
00:21:15,230 --> 00:21:16,700
from basically any screen.

365
00:21:16,700 --> 00:21:19,250
So I'm, I can do it
from my, from a desktop.

366
00:21:19,250 --> 00:21:20,760
I don't need to open.

367
00:21:21,100 --> 00:21:24,150
Visual Studio Code or a
browser or anything like that.

368
00:21:24,180 --> 00:21:25,640
I can interact with, Reli.

369
00:21:25,640 --> 00:21:27,880
io directly from my desktop.

370
00:21:28,310 --> 00:21:32,100
And of course, like everyone else
in the world these days, we are

371
00:21:32,100 --> 00:21:34,900
also investing in AI, in AI agents.

372
00:21:34,910 --> 00:21:38,720
And so we are building that
on top of our REST APIs.

373
00:21:39,020 --> 00:21:45,120
And one thing that I must mention here
is that we haven't changed our APIs,

374
00:21:45,450 --> 00:21:48,040
to, support any of these integrations.

375
00:21:48,040 --> 00:21:51,310
so of course we are adding new features,
we are adding new endpoints and all

376
00:21:51,310 --> 00:21:54,890
of that, to allow new scenarios and
new features that we are building.

377
00:21:55,220 --> 00:22:01,510
But we haven't changed our APIs just
to support any of these, integrations,

378
00:22:01,560 --> 00:22:05,950
which is pretty cool because you can just
quickly, in a couple of hours, you want

379
00:22:06,505 --> 00:22:11,725
Build a VS code integration, interact
with extension and integrate with our

380
00:22:11,725 --> 00:22:15,185
APIs and with rely without any problem.

381
00:22:15,285 --> 00:22:16,135
So that's pretty cool.

382
00:22:16,975 --> 00:22:19,625
and just a couple of examples
from our customers as well.

383
00:22:19,625 --> 00:22:23,715
So this was before we actually
build our Kubernetes operator,

384
00:22:24,245 --> 00:22:26,795
but we were onboarding a customer.

385
00:22:27,030 --> 00:22:30,290
that already has, like a Kubernetes
operator framework running.

386
00:22:30,300 --> 00:22:34,340
They had blueprints for things
like, teams and systems and domains.

387
00:22:34,610 --> 00:22:40,380
And so they had everything that they want
in code that they wanted to send to rely.

388
00:22:40,630 --> 00:22:42,090
So why reinvent the wheel?

389
00:22:42,340 --> 00:22:46,450
So they just made a quick change on
the, on their Kubernetes operator.

390
00:22:46,710 --> 00:22:50,240
and they started sending this information
to rely once again, using Gaur.

391
00:22:50,475 --> 00:22:54,785
using our, APIs, they were able to
do this in a couple of hours and

392
00:22:54,805 --> 00:22:56,905
everything is kept in sync at all times.

393
00:22:57,045 --> 00:22:57,355
Right?

394
00:22:58,095 --> 00:23:03,015
And the other scenario is another
customer that wanted to integrate,

395
00:23:03,065 --> 00:23:08,475
a security platform that we didn't
provide, a built in, plugin, for yet.

396
00:23:08,815 --> 00:23:12,395
And so the option here was, we can either.

397
00:23:13,140 --> 00:23:18,550
They could either wait for a few weeks or
months, depending on our, prioritization,

398
00:23:18,800 --> 00:23:21,140
or they could integrate with our REST API.

399
00:23:21,340 --> 00:23:25,240
And so what they did was that this
security tool, was, basically,

400
00:23:25,280 --> 00:23:29,250
tracking security, security violations,
in their, in their platform.

401
00:23:29,560 --> 00:23:32,400
They would send this information
into Logstash and Logstash

402
00:23:32,400 --> 00:23:33,560
would basically parse.

403
00:23:33,850 --> 00:23:36,210
That's, that information
in send it to rely.

404
00:23:36,210 --> 00:23:36,730
io.

405
00:23:37,170 --> 00:23:41,360
This was only possible, because we
had a well designed REST API that

406
00:23:41,360 --> 00:23:46,310
is flexible enough to accept all
types of, blueprints in our platform.

407
00:23:46,620 --> 00:23:49,100
and because of our
extensible data model, right?

408
00:23:49,360 --> 00:23:52,580
So this allowed them to
just in a couple of days.

409
00:23:52,800 --> 00:23:58,170
implement an integration that we would
potentially, take weeks to deploy in,

410
00:23:58,180 --> 00:24:00,090
in production in our, plugin catalog.

411
00:24:00,190 --> 00:24:04,880
So these are two scenarios, real
scenarios from customers, and this

412
00:24:04,880 --> 00:24:08,620
is actually, something that, we are,
using with other customers as well.

413
00:24:08,620 --> 00:24:13,240
So as you can see, like the Kubernetes
operator, we actually, are using this to

414
00:24:13,240 --> 00:24:15,120
onboard other customers to our platform.

415
00:24:15,120 --> 00:24:18,780
because we learn from the customer, use
case and we are implementing this and

416
00:24:18,780 --> 00:24:20,600
using this with our, with other customers.

417
00:24:21,100 --> 00:24:24,630
So some of the best practices
here, very high level.

418
00:24:24,660 --> 00:24:27,610
So the first one is
defined, clear, and concise.

419
00:24:28,285 --> 00:24:29,755
API specs, right?

420
00:24:30,085 --> 00:24:33,475
So it's really important to
follow the standards, right?

421
00:24:33,475 --> 00:24:36,805
So there's a lot of documentation out
there on how you should build APIs.

422
00:24:37,225 --> 00:24:42,575
so the naming conventions and
using the right methods, giving

423
00:24:42,575 --> 00:24:44,635
the right HTTP return status.

424
00:24:44,675 --> 00:24:46,185
So all of those things, right?

425
00:24:46,245 --> 00:24:48,875
Define clear, Concise API specs.

426
00:24:49,095 --> 00:24:49,985
It's really important.

427
00:24:50,615 --> 00:24:52,935
Keep API simple and easy to use, right?

428
00:24:52,935 --> 00:24:54,955
So don't go, overboard.

429
00:24:54,955 --> 00:24:57,105
just once again, focus on the standards.

430
00:24:57,375 --> 00:25:01,315
If the API is not simple,
people will not use it, right?

431
00:25:01,315 --> 00:25:04,185
So just make sure that it's easy to use.

432
00:25:04,745 --> 00:25:06,010
It's flexible enough.

433
00:25:06,290 --> 00:25:08,540
And, you'll have
developers using your API.

434
00:25:08,910 --> 00:25:11,600
Otherwise it will get more
challenging to get adoption.

435
00:25:12,430 --> 00:25:15,640
The third one is on API
documentation, right?

436
00:25:15,640 --> 00:25:18,000
So API documentation is really important.

437
00:25:18,020 --> 00:25:21,880
Even if it's just like the open API
spec that you provide to developers,

438
00:25:22,210 --> 00:25:22,660
just make sure you have it.

439
00:25:22,750 --> 00:25:26,120
Please do and there are a lot of tools
out there that allow you to generate

440
00:25:26,170 --> 00:25:31,130
these documentation in an automated
way, like the open API spec and code

441
00:25:31,130 --> 00:25:36,190
snippets for all your specific methods
for different programming languages.

442
00:25:36,190 --> 00:25:40,960
There are a lot of tools out there
that will allow you to provide top

443
00:25:40,960 --> 00:25:42,760
notch documentation for developers.

444
00:25:43,135 --> 00:25:44,225
prioritize that.

445
00:25:44,565 --> 00:25:47,085
Documentation is really
important if you are looking to

446
00:25:47,085 --> 00:25:48,895
get people to adopt your API.

447
00:25:49,395 --> 00:25:56,245
The next point here is around
automating API testing and validation.

448
00:25:56,625 --> 00:26:02,365
So it's really important to have this
information or the APIs tested properly.

449
00:26:02,865 --> 00:26:07,455
If you are doing APIs that are just
exposed internally, like impact is

450
00:26:07,455 --> 00:26:14,115
not that big when compared to having
external APIs, but still it's really

451
00:26:14,135 --> 00:26:19,995
bad experience if you are providing
a product to a customer and the

452
00:26:19,995 --> 00:26:21,595
product is not working properly.

453
00:26:21,885 --> 00:26:27,255
And so focus on having automated tests
for your API and make sure that, you

454
00:26:27,255 --> 00:26:31,075
have a lot of tests and good tests
actually that test something and

455
00:26:31,125 --> 00:26:33,185
test the behavior of the API, right?

456
00:26:33,705 --> 00:26:37,865
The last point here is around,
monitoring API performance and usage.

457
00:26:38,525 --> 00:26:39,595
It's really important.

458
00:26:40,220 --> 00:26:44,400
Specifically for external APIs to
monitor the performance in the usage is

459
00:26:44,400 --> 00:26:48,430
a really bad experience when you have
an API endpoint that is taking one or

460
00:26:48,430 --> 00:26:52,320
two seconds to return a result, right?

461
00:26:52,320 --> 00:26:54,990
So you should keep the
latency of your APIs.

462
00:26:55,210 --> 00:26:57,660
to the minimum possible,
it should be fast.

463
00:26:57,690 --> 00:27:00,180
It should be simple to use,
but it should be fast as well.

464
00:27:00,410 --> 00:27:04,300
And you can only know if they
are performing, if you monitor

465
00:27:04,480 --> 00:27:05,760
the performance of your APIs.

466
00:27:06,260 --> 00:27:09,340
Also, you should monitor
the usage of your APIs.

467
00:27:09,840 --> 00:27:14,280
Once again, this is important for
internal, usage, internal APIs, but also

468
00:27:14,280 --> 00:27:19,070
for internal, for external, APIs, because
with external APIs, for instance, you

469
00:27:19,070 --> 00:27:26,210
will start to see some new trends, some
new, some new usage of your APIs, right?

470
00:27:26,210 --> 00:27:30,795
So you will see people starting to create
integrations with, let's say, DevOps,

471
00:27:31,355 --> 00:27:33,405
let's say Azure DevOps integration.

472
00:27:33,405 --> 00:27:34,305
They are calling your.

473
00:27:35,285 --> 00:27:39,995
endpoint from Azure DevOps to integrate,
with, directly the pipelines with,

474
00:27:40,275 --> 00:27:42,205
with, with your products, for instance.

475
00:27:42,485 --> 00:27:46,665
And so this is something that you
will need to monitor the usage on.

476
00:27:46,995 --> 00:27:51,735
And so you will learn about new scenarios
that you can potentially prioritize

477
00:27:51,735 --> 00:27:56,145
during, your, process of deciding
where to invest your time next, right?

478
00:27:56,425 --> 00:27:57,585
So this is really important.

479
00:27:57,585 --> 00:28:00,805
So it's not only the performance, but
it's also the usage of these APIs.

480
00:28:00,815 --> 00:28:06,155
It will allow you to define where you
invest your time to get better returns.

481
00:28:06,655 --> 00:28:10,985
And so one thing I want to make clear, I
mentioned this a bunch of times already

482
00:28:10,985 --> 00:28:14,655
in the presentation, but one thing that
I want to make clear is that the focus of

483
00:28:14,665 --> 00:28:20,335
building an API as a product is that you
must focus on the developer experience

484
00:28:20,335 --> 00:28:23,085
and usability of the API at all times.

485
00:28:23,535 --> 00:28:29,065
No more APIs that have a bunch
of tricks to call them properly.

486
00:28:29,565 --> 00:28:32,295
APIs have been designed
for many years now.

487
00:28:32,395 --> 00:28:35,665
There's a lot of best practices out
there, a lot of standards out there.

488
00:28:36,195 --> 00:28:37,705
It's just a matter of following them.

489
00:28:37,965 --> 00:28:41,085
So it's not like you need to
reinvent the wheel at all times.

490
00:28:41,585 --> 00:28:45,165
They have already, invented a
lot of people have invented this.

491
00:28:45,165 --> 00:28:49,225
And of course there, there's always new
things coming up, but most of the things

492
00:28:49,225 --> 00:28:54,075
I would say like 95 percent of the work
is already done, so just, read about it.

493
00:28:54,445 --> 00:28:57,705
and, follow the standards
and just a quick recap.

494
00:28:57,715 --> 00:29:01,795
So we close this, so adopt
an API first approach.

495
00:29:01,855 --> 00:29:05,595
If you are looking for improved
collaboration, faster time to

496
00:29:05,595 --> 00:29:09,255
market, greater extensibility in
better development experience.

497
00:29:09,265 --> 00:29:10,330
So these are.

498
00:29:10,630 --> 00:29:14,710
Some of the things that I feel
are really, important in the

499
00:29:14,720 --> 00:29:17,760
goals of the API first, approach.

500
00:29:17,760 --> 00:29:21,680
So if you see, if you follow this
approach, you will see, some of

501
00:29:21,680 --> 00:29:23,520
these benefits really quickly, right?

502
00:29:24,200 --> 00:29:26,030
And just a call to action.

503
00:29:26,140 --> 00:29:29,690
so consider API first approach in
your next project, something that

504
00:29:29,690 --> 00:29:30,920
would like to challenge you on.

505
00:29:31,250 --> 00:29:31,590
and.

506
00:29:32,045 --> 00:29:37,465
Start small, iterate fast, and you
will see the great results in the end.

507
00:29:37,965 --> 00:29:38,375
Thank you.

508
00:29:38,435 --> 00:29:41,385
you have my contents once again
here, feel free to reach out, in

509
00:29:41,385 --> 00:29:43,345
social media and, see you next time.

