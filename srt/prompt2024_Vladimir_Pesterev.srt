1
00:00:00,400 --> 00:00:01,320
Hello, everyone.

2
00:00:01,560 --> 00:00:03,500
Thank you for joining this talk.

3
00:00:04,110 --> 00:00:05,420
My name is Vladimir.

4
00:00:05,510 --> 00:00:08,219
I'm a software engineer at Wales Corp.

5
00:00:09,140 --> 00:00:16,090
In this session, I will be talking
about how to turn AI into APIs.

6
00:00:16,590 --> 00:00:21,740
Big disclaimer, this talk is
from my perspective as a software

7
00:00:21,740 --> 00:00:24,190
engineer, not a data scientist.

8
00:00:24,690 --> 00:00:29,770
I will be demonstrating how software
engineers can use OCR and LLMs

9
00:00:29,810 --> 00:00:32,070
to build their own applications.

10
00:00:32,570 --> 00:00:40,890
Before we dive into the demo, let me first
give you a quick introduction to OCR.

11
00:00:41,390 --> 00:00:46,419
OCR stands for Optical Character
Recognition, which is the process

12
00:00:46,419 --> 00:00:51,519
of converting images of typed
text into machine readable text.

13
00:00:52,019 --> 00:00:57,679
For example, if you have a scanned
document or any other image with

14
00:00:57,730 --> 00:01:04,250
text, OCR can extract that text for
further use in your application.

15
00:01:04,750 --> 00:01:08,460
Of course, there are many
options that provide OCR.

16
00:01:08,540 --> 00:01:16,160
As a service that is Amazon Textract
or Google Cloud Vision API, for

17
00:01:17,109 --> 00:01:21,219
example, but OCR is not enough.

18
00:01:21,719 --> 00:01:22,939
there is a problem.

19
00:01:23,439 --> 00:01:28,919
OCR usually convert images
into unstructured text.

20
00:01:29,419 --> 00:01:34,459
But actually we need structured
data to work with it to build a

21
00:01:34,729 --> 00:01:36,939
good interface for our clients.

22
00:01:37,439 --> 00:01:44,880
Most APIs usually represent data as JSON
or any other serializable structure.

23
00:01:45,380 --> 00:01:54,430
So it will be nice to extract text from
images, find the available data from this

24
00:01:54,430 --> 00:01:59,090
text and represent it as a JSON, right?

25
00:01:59,590 --> 00:02:04,960
And in 2024, we can actually do this.

26
00:02:05,460 --> 00:02:09,060
this is where LLMs can really help us.

27
00:02:09,510 --> 00:02:12,730
Many of them offer API for developers.

28
00:02:13,490 --> 00:02:17,939
For example, OpenAI provides
many features through their API.

29
00:02:18,439 --> 00:02:22,299
And one of the most interesting
and useful feature, in my

30
00:02:22,300 --> 00:02:24,620
opinion, is function calling.

31
00:02:25,120 --> 00:02:30,310
Function calling is extremely useful
for a large number of use cases.

32
00:02:30,810 --> 00:02:35,239
It also has JSON mode.

33
00:02:35,739 --> 00:02:41,729
The model's output is guaranteed to be
valid JSON when JSON mode is enabled.

34
00:02:42,229 --> 00:02:44,439
This is exactly what we need, right?

35
00:02:45,429 --> 00:02:47,289
how can we use it?

36
00:02:47,789 --> 00:02:48,439
I will show you.

37
00:02:48,989 --> 00:02:50,459
Let's go ahead to the demo.

38
00:02:50,959 --> 00:02:56,029
And now I'm going to get my
hands dirty and write some code.

39
00:02:56,919 --> 00:02:59,229
I'll be using TypeScript for this demo.

40
00:02:59,729 --> 00:03:05,629
First, we have to set up an application
to handle HTTP requests from our clients.

41
00:03:06,129 --> 00:03:11,059
I will be using Deno, which is
a modern JavaScript runtime.

42
00:03:11,459 --> 00:03:12,719
Think of it like Node.

43
00:03:12,729 --> 00:03:14,609
js, but better.

44
00:03:15,109 --> 00:03:18,019
let's open my terminal.

45
00:03:18,519 --> 00:03:19,049
Okay.

46
00:03:19,549 --> 00:03:28,499
I'm gonna use dynainit to create a,
the basic structure of our application.

47
00:03:28,999 --> 00:03:31,129
We have to give it a name.

48
00:03:31,609 --> 00:03:34,939
I'm gonna call it receipt scanner API.

49
00:03:34,939 --> 00:03:36,384
Why not?

50
00:03:36,435 --> 00:03:38,925
All right, Dina has executed this command.

51
00:03:39,425 --> 00:03:42,285
Now let's follow the instructions.

52
00:03:42,735 --> 00:03:49,435
We, I will navigate to the project
folder and as you can see here,

53
00:03:49,935 --> 00:03:51,395
there are three files here.

54
00:03:52,075 --> 00:03:54,144
The first file is dna.

55
00:03:54,145 --> 00:03:57,435
json, which is just a configuration file.

56
00:03:57,935 --> 00:03:59,195
The second file is main.

57
00:03:59,475 --> 00:04:02,684
ts, where we will write our code.

58
00:04:03,184 --> 00:04:08,554
The third file is just a file
for tests, but I don't need tests

59
00:04:09,105 --> 00:04:11,324
on this talk, I will delete it.

60
00:04:11,824 --> 00:04:12,364
Okay.

61
00:04:12,864 --> 00:04:13,194
Good.

62
00:04:13,614 --> 00:04:18,554
Now let's open . I will use Vem for that.

63
00:04:19,054 --> 00:04:25,084
we are seeing a few lines of an example
here, but I'm going to delete them.

64
00:04:25,584 --> 00:04:31,164
So now I will be using Dina Surf.

65
00:04:31,664 --> 00:04:32,744
What is Dina Surf?

66
00:04:33,244 --> 00:04:41,614
Gina has actually a built in HTTP server,
and this function just runs that server.

67
00:04:42,114 --> 00:04:47,074
If we check the definition of
this function, we can see that

68
00:04:47,224 --> 00:04:49,214
it accepts a handler function.

69
00:04:49,714 --> 00:04:55,444
This handler needs a accept
request from clients and return

70
00:04:55,454 --> 00:04:57,474
the appropriate responses.

71
00:04:57,974 --> 00:05:05,434
All right, now let's go ahead and code
a simple echo server to get started.

72
00:05:06,394 --> 00:05:08,664
I'll just show you how it works.

73
00:05:09,164 --> 00:05:09,694
Okay.

74
00:05:10,194 --> 00:05:12,874
We can run it like this.

75
00:05:13,374 --> 00:05:14,274
Okay.

76
00:05:14,774 --> 00:05:18,444
I'm going to use QRL to test this server.

77
00:05:18,944 --> 00:05:19,334
All right.

78
00:05:19,334 --> 00:05:20,114
It works.

79
00:05:20,284 --> 00:05:25,324
so now let me explain again what
exactly we're going to create now.

80
00:05:25,824 --> 00:05:29,534
let me open my browser.

81
00:05:30,034 --> 00:05:36,014
Um, here is a overview, of how it'll work.

82
00:05:36,514 --> 00:05:39,669
I will be using this direct jets for OCR.

83
00:05:40,169 --> 00:05:42,069
Because it's free and open source.

84
00:05:42,709 --> 00:05:50,859
I could use Amazon Textract for example,
but in this case it doesn't really matter.

85
00:05:51,359 --> 00:05:54,559
Let's go through the flow
quickly, step by step.

86
00:05:55,059 --> 00:06:01,409
First of all, the client sends a
request with URL of the receipt.

87
00:06:01,909 --> 00:06:04,959
Then Textract extracts
text from this receipt.

88
00:06:05,459 --> 00:06:12,289
The extracted test is passed to chat
dpt, along with a well structured prompt.

89
00:06:12,789 --> 00:06:18,789
chat dpt does some magic and applies our
custom function to put data into a JSON.

90
00:06:19,289 --> 00:06:23,890
And that JSON is sent back
to the client as a response.

91
00:06:24,490 --> 00:06:25,190
Quite simple.

92
00:06:25,690 --> 00:06:27,209
So now I'm going to use Tesseract.

93
00:06:27,210 --> 00:06:28,380
js.

94
00:06:28,880 --> 00:06:35,770
First, let's take a look at documentation,
which includes a brief example.

95
00:06:36,270 --> 00:06:37,170
how to use it.

96
00:06:37,670 --> 00:06:40,030
example of how to use it.

97
00:06:40,080 --> 00:06:45,610
the first thing is, we, need
to create a worker and then

98
00:06:45,610 --> 00:06:48,030
pass URL to recognize function.

99
00:06:48,530 --> 00:06:54,850
the worker will automatically download
an image and extract the text from that.

100
00:06:55,650 --> 00:06:56,080
Okay.

101
00:06:56,580 --> 00:07:01,870
For this demo, I have a receipt
that I will be working with.

102
00:07:02,370 --> 00:07:02,960
This one.

103
00:07:03,460 --> 00:07:07,180
I just want to extract a description.

104
00:07:08,155 --> 00:07:12,875
unit price and amount, for each item.

105
00:07:13,315 --> 00:07:17,975
Additionally, I want to
capture total and total.

106
00:07:18,475 --> 00:07:20,435
we'll use chat dpt for that.

107
00:07:20,935 --> 00:07:21,215
Okay.

108
00:07:21,215 --> 00:07:23,285
Let's go back to my terminal.

109
00:07:23,985 --> 00:07:29,565
I'm going to import this
direct from my, from npm

110
00:07:30,065 --> 00:07:35,365
and then i will use i will create a worker

111
00:07:35,865 --> 00:07:40,285
and then use this worker on every request

112
00:07:40,785 --> 00:07:49,205
good let's test it i'm gonna use
qrel and good okay, for now, our

113
00:07:49,205 --> 00:07:52,435
application can extract text from images.

114
00:07:53,045 --> 00:08:00,204
However, this text is unstructured and
contains a lot of irrelevant information.

115
00:08:00,704 --> 00:08:06,634
We will use chart2BT to extract for,
to extract only the key information

116
00:08:06,994 --> 00:08:11,514
and put in, put it in to JSON.

117
00:08:12,014 --> 00:08:16,204
Okay, to use OpenAI
API, we need an API key.

118
00:08:16,664 --> 00:08:21,654
You can easily create your own
API key on official website.

119
00:08:22,154 --> 00:08:22,514
yeah,

120
00:08:23,014 --> 00:08:23,374
yeah.

121
00:08:23,874 --> 00:08:26,704
It's called OpenAI developer platform.

122
00:08:26,755 --> 00:08:30,965
that is also an API reference here.

123
00:08:31,465 --> 00:08:37,975
Okay, I'm gonna use the official
JavaScript library for OpenAI.

124
00:08:38,925 --> 00:08:39,445
This one.

125
00:08:39,945 --> 00:08:42,735
okay, let's open my editor.

126
00:08:43,305 --> 00:08:43,865
And

127
00:08:44,365 --> 00:08:49,735
I'm gonna import, I'm gonna
import OpenAI from npm.

128
00:08:49,735 --> 00:08:53,885
Um, we have to put a P key here.

129
00:08:54,385 --> 00:08:58,935
I'm going to load my IP key
from my system environment.

130
00:08:59,435 --> 00:09:02,875
okay, let's create a chat GPT completion.

131
00:09:03,375 --> 00:09:04,354
We will use, GPT 3.

132
00:09:04,355 --> 00:09:05,975
5.

133
00:09:06,475 --> 00:09:07,065
Access.

134
00:09:07,565 --> 00:09:14,725
I will provide two messages, each
message has a specific role, but I

135
00:09:14,725 --> 00:09:22,724
will not discuss it, in this talk,
the first message, which has a system

136
00:09:22,724 --> 00:09:25,504
role, establish the main chat context.

137
00:09:26,004 --> 00:09:32,704
the GPT model will understand
that it should act like a

138
00:09:32,704 --> 00:09:35,254
helpful receipt analysis tool.

139
00:09:35,754 --> 00:09:39,654
In the second message,
I will put the prompt.

140
00:09:40,154 --> 00:09:45,174
so we need to come up with a
good prompt here for chat GPT.

141
00:09:45,674 --> 00:09:49,254
For example, like this.

142
00:09:49,754 --> 00:09:55,424
note that I concatenate my prompt
into a disrect result here.

143
00:09:55,924 --> 00:10:00,164
you can come up with your own
prompt based on your use cases.

144
00:10:01,034 --> 00:10:04,914
This my, this most creative part actually.

145
00:10:05,414 --> 00:10:13,579
Yeah, I need only One choice,
so I'm gonna put one here, and

146
00:10:13,609 --> 00:10:16,399
also I'm gonna turn on JSON mode.

147
00:10:16,899 --> 00:10:24,509
now we need to ask ChatDept to map the
data into specific JSON format, and

148
00:10:24,879 --> 00:10:27,959
for that we will use the function tool.

149
00:10:28,459 --> 00:10:31,089
Let me show, let me show how.

150
00:10:31,589 --> 00:10:35,459
I will copy and paste
a piece of code here.

151
00:10:35,959 --> 00:10:36,389
I

152
00:10:36,889 --> 00:10:37,939
can use it here.

153
00:10:38,439 --> 00:10:42,459
the most important thing
here is a JSON schema.

154
00:10:42,459 --> 00:10:43,199
this part.

155
00:10:43,699 --> 00:10:49,939
we here define receipt
items as a JSON schema.

156
00:10:50,439 --> 00:10:53,279
Every item has description.

157
00:10:53,779 --> 00:10:58,039
unit, price, and amount,
which is a number.

158
00:10:58,539 --> 00:11:08,019
all these properties are required, and it
has also subtotal and total as a number.

159
00:11:08,519 --> 00:11:14,589
Once we get the completion here, we
can grab the first choice from it

160
00:11:15,089 --> 00:11:17,769
like this, I'm going to remove it.

161
00:11:18,269 --> 00:11:27,759
I take first choice here and I look
for a tool call that has this name.

162
00:11:28,259 --> 00:11:35,950
If we can find, we will send a
internal server Otherwise, we

163
00:11:35,950 --> 00:11:41,690
will take the arguments and send
back them to our client here.

164
00:11:42,190 --> 00:11:43,200
And that's it.

165
00:11:43,700 --> 00:11:49,249
I'm skipping important things like
argument validation and, token

166
00:11:49,249 --> 00:11:52,839
optimization, because it's a just a demo.

167
00:11:53,339 --> 00:11:54,309
okay, let's test it.

168
00:11:54,809 --> 00:11:56,729
I'm going to run it here

169
00:11:57,229 --> 00:11:59,299
and use QRL.

170
00:11:59,799 --> 00:12:00,209
Wow.

171
00:12:00,709 --> 00:12:01,740
it works.

172
00:12:01,950 --> 00:12:02,720
Unbelievable.

173
00:12:02,770 --> 00:12:06,170
Let's compare this JSON
with the original image.

174
00:12:06,670 --> 00:12:07,820
Let me open the browser.

175
00:12:08,320 --> 00:12:12,390
I'm going to have to open this, yeah.

176
00:12:12,890 --> 00:12:20,165
It get a little bit wrong amount,
but everything, but, but it extracts

177
00:12:20,194 --> 00:12:22,605
everything we need as you can see.

178
00:12:23,105 --> 00:12:24,064
And that's it.

179
00:12:24,124 --> 00:12:31,345
That's all you need to get started
using OCR and ChatGPT in your project.

180
00:12:31,845 --> 00:12:37,295
If you run into any issues during
this talk or would you like to discuss

181
00:12:37,325 --> 00:12:40,475
it, just reach me out on Twitter.

182
00:12:40,975 --> 00:12:43,935
And thank you so much for your time.

183
00:12:44,015 --> 00:12:47,785
I really appreciate it and enjoy
the rest of the conference.

184
00:12:48,414 --> 00:12:48,575
Bye bye.

