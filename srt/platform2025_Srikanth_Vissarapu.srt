1
00:00:00,500 --> 00:00:01,160
Hello everyone.

2
00:00:01,390 --> 00:00:02,890
This is here.

3
00:00:02,890 --> 00:00:04,510
I work as a software engineer at Meta.

4
00:00:05,230 --> 00:00:09,549
Today I'm going to discuss about
engineering scale with infrastructure.

5
00:00:10,180 --> 00:00:13,090
So primarily looking
at various challenges.

6
00:00:13,090 --> 00:00:17,570
The current ecosystem of software
engineering is facing essentially the

7
00:00:17,570 --> 00:00:19,850
increasing complex digital landscape.

8
00:00:19,850 --> 00:00:24,410
Crowd spending is projected to
increase by six 78 billion by 2024.

9
00:00:24,910 --> 00:00:29,680
Platform engineering is extremely
important in this context of for a cloud

10
00:00:29,680 --> 00:00:31,479
adoption and infrastructure management.

11
00:00:31,979 --> 00:00:35,279
So what are the various things that are
extremely important when we are talking

12
00:00:35,279 --> 00:00:37,139
about platform engineering revolution?

13
00:00:37,139 --> 00:00:38,879
So faster deployments.

14
00:00:38,879 --> 00:00:41,849
Obviously we talk about all the
microservice architectures, cloud

15
00:00:41,849 --> 00:00:43,410
deployments at scale and stuff like that.

16
00:00:43,410 --> 00:00:44,669
So eventually.

17
00:00:45,000 --> 00:00:49,230
Develop productivity and also
engineering excellence almost always

18
00:00:49,230 --> 00:00:51,959
depends on how fast we can deploy
things into production, right?

19
00:00:51,969 --> 00:00:56,349
These are some of the architectural
constructs that can help

20
00:00:56,799 --> 00:01:00,699
significantly increase fast
deployment to almost like 40%.

21
00:01:00,760 --> 00:01:05,960
And also reduce overhead in terms
of processes manual steps and all

22
00:01:05,960 --> 00:01:09,320
the operational overhead that are
necessary, right at the same time.

23
00:01:10,070 --> 00:01:11,089
Increasing their satisfaction.

24
00:01:11,089 --> 00:01:14,845
Obviously developer productivity, they're
able to deploy the code, run the code.

25
00:01:15,525 --> 00:01:17,055
Release our features much faster.

26
00:01:17,235 --> 00:01:21,045
Definitely increases the developer
satisfaction significantly.

27
00:01:21,445 --> 00:01:24,935
Definitely this is more in incre
incremental gains across the stack.

28
00:01:24,985 --> 00:01:29,365
An amazing opportunity to transform
any development organization into the

29
00:01:29,365 --> 00:01:31,615
evolving landscape of deployments.

30
00:01:32,115 --> 00:01:35,185
And let's talk more about what
is this flash mom approach?

31
00:01:35,275 --> 00:01:35,965
First approach.

32
00:01:36,415 --> 00:01:37,885
So what does it actually mean?

33
00:01:38,385 --> 00:01:40,095
Again, looking at the
current challenge, right?

34
00:01:40,095 --> 00:01:43,535
So there is definitely a lot of gap
between, what developers need to build

35
00:01:43,595 --> 00:01:45,245
and what they need to know to build it.

36
00:01:45,425 --> 00:01:48,115
So essentially more what they want
to build and obviously what they

37
00:01:48,115 --> 00:01:49,525
need to build it essentially, right?

38
00:01:49,525 --> 00:01:53,185
So traditionally DevOps models often
burden developers with infrastructure

39
00:01:53,185 --> 00:01:56,335
concerns like creative cognitive
workloads and slowing innovation, right?

40
00:01:56,815 --> 00:01:59,305
So what are we trying to achieve?

41
00:01:59,395 --> 00:02:02,185
Self-service infrastructure,
you engineers or.

42
00:02:03,130 --> 00:02:05,620
Developers should be able to
provision their resources.

43
00:02:05,620 --> 00:02:11,099
VMs run their workloads at scale, manage
configurations, mostly self-serving,

44
00:02:11,129 --> 00:02:15,619
without even going through the complex
processes of ticketing systems or

45
00:02:15,619 --> 00:02:19,549
various other things, but obviously
reducing a lot of that trial in

46
00:02:19,549 --> 00:02:21,339
terms of, whatever is necessary.

47
00:02:21,339 --> 00:02:24,579
How do we make that more self
service model and obviously

48
00:02:24,579 --> 00:02:25,869
some kind of a golden path.

49
00:02:25,869 --> 00:02:29,744
Predefined, optimized pathways guide
to through common scenarios in open.

50
00:02:30,594 --> 00:02:34,704
That can help with all the best practice,
how do we develop a code, how do we

51
00:02:34,704 --> 00:02:38,204
get the infrastructure necessary to,
develop, deploy, test, and all the

52
00:02:38,384 --> 00:02:41,444
different constructs of it, software
development, central governments.

53
00:02:41,444 --> 00:02:44,954
And also obviously, one extremely
important aspect of it is

54
00:02:44,954 --> 00:02:46,514
like the more freedom we have.

55
00:02:46,814 --> 00:02:49,154
It's also extremely important
that we have that enough

56
00:02:49,154 --> 00:02:50,704
controls checks in place anyway.

57
00:02:50,704 --> 00:02:51,904
It's more defensive mechanism.

58
00:02:51,904 --> 00:02:53,734
Obviously want to make sure.

59
00:02:54,124 --> 00:02:57,754
Leave lease on security principle and
obviously whoever needs to have the

60
00:02:57,754 --> 00:03:00,514
access, they can have the access, but
obviously we need to make sure that

61
00:03:00,754 --> 00:03:03,814
there is a balance between giving
more flexibility at the same time.

62
00:03:04,714 --> 00:03:08,104
Also making sure that security,
privacy complex things are also

63
00:03:08,104 --> 00:03:10,664
in are are also in place in a way.

64
00:03:11,294 --> 00:03:14,564
So let's talk about architectural
patterns for multi-cloud success.

65
00:03:14,564 --> 00:03:17,504
Again, the most important thing is
that a lot of companies are evolving

66
00:03:17,504 --> 00:03:19,214
into not single cloud environments.

67
00:03:19,214 --> 00:03:23,154
And now obviously every cloud has its
own game positives and so primarily.

68
00:03:23,619 --> 00:03:27,129
Eventually a lot of companies are evolving
into using this multi-cloud architecture.

69
00:03:27,649 --> 00:03:31,669
So looking at various architectural
patterns that are used currently in

70
00:03:31,669 --> 00:03:35,199
the industry, one one pattern that
we use usually see is like hub and

71
00:03:35,199 --> 00:03:39,609
spoke model, essentially more like a,
a. Central Flo from Hub manages core

72
00:03:39,609 --> 00:03:43,959
services like authorization, monitoring,
governance, all these found foundational

73
00:03:43,959 --> 00:03:47,289
components that are necessary for
building any strong software stack.

74
00:03:47,349 --> 00:03:52,939
It's like a, it becomes a common hub and
obviously you build services on profit.

75
00:03:52,989 --> 00:03:55,669
And the next important thing is once
you build all the services, what is

76
00:03:55,669 --> 00:03:57,109
necessary for them to communicate?

77
00:03:57,109 --> 00:04:00,859
So it's like there is various constructs
or various platforms that are already

78
00:04:00,859 --> 00:04:04,969
built with the service integrations like
ETO and various other things essentially.

79
00:04:05,149 --> 00:04:08,069
When you go into the multi-services
or microservices kind of

80
00:04:08,189 --> 00:04:11,519
environments, all these things
will become extremely important.

81
00:04:11,519 --> 00:04:14,469
The developers doesn't have to
really think about how do we, how

82
00:04:14,469 --> 00:04:16,869
does the orchestration between
the systems are happening?

83
00:04:16,869 --> 00:04:19,749
Obviously, all these existing
tools will really help

84
00:04:19,749 --> 00:04:21,129
accelerate the development a lot.

85
00:04:21,489 --> 00:04:25,029
One of that is like a, providing
that consistent networking,

86
00:04:25,509 --> 00:04:28,469
interservice communication service
measures like, TO and all that and

87
00:04:28,799 --> 00:04:32,099
Kubernetes kind of environment are
extremely useful and important.

88
00:04:32,714 --> 00:04:35,954
And the other important thing is they have
a policy as a code frameworks, essentially

89
00:04:35,954 --> 00:04:40,264
more like governance rules are actually
codified and obviously more automatically

90
00:04:40,264 --> 00:04:44,604
enforced, and compliance without a
manual direction, which makes it much

91
00:04:44,604 --> 00:04:46,464
more easier to run systems that scale.

92
00:04:47,004 --> 00:04:50,424
And these are, again, a very high level
constructs of what are the important

93
00:04:50,424 --> 00:04:54,924
artificial patterns that have seen are
extremely in any cloud environments.

94
00:04:55,324 --> 00:04:56,499
Let's talk about.

95
00:04:56,999 --> 00:05:00,629
Next, let's talk about how do we
optimize developer experience in a

96
00:05:00,629 --> 00:05:03,089
world where development is changing.

97
00:05:03,249 --> 00:05:06,430
I know how we code is
changing pretty significantly.

98
00:05:06,670 --> 00:05:10,630
It's extremely important to give
the freedom for the developers

99
00:05:10,630 --> 00:05:14,620
to, build at scale faster and all
those good things about, how can

100
00:05:14,620 --> 00:05:16,720
they test it, deploy it at scale.

101
00:05:17,220 --> 00:05:21,840
Providing all this framework extreme,
but there's a few things I would touch

102
00:05:21,840 --> 00:05:25,830
upon the similar aspect of it, as most
importantly, intelligent code AI tools.

103
00:05:25,880 --> 00:05:29,000
If you look at right now, it's like
it's all lot of gen AI tools are

104
00:05:29,000 --> 00:05:34,250
extremely useful exhaust industry,
like industry like something like we

105
00:05:34,250 --> 00:05:38,690
have a GitHub co. Like a lot of similar
things where you know, all the other

106
00:05:38,690 --> 00:05:40,340
LMS also have similar tools as well.

107
00:05:40,340 --> 00:05:41,750
So these are.

108
00:05:42,095 --> 00:05:46,295
Proven to be extremely useful in building
some kind of a boiler plate code.

109
00:05:46,335 --> 00:05:49,035
Whether it is like building some
test cases for whatever code

110
00:05:49,035 --> 00:05:51,885
we have written and obviously
helping provide custom insights.

111
00:05:51,885 --> 00:05:54,375
So how do we fix the code with any bugs?

112
00:05:54,375 --> 00:05:57,705
And it, they, things are evolving
and also providing a lot, but

113
00:05:57,705 --> 00:06:01,035
these tools are getting much
better as well as they get better.

114
00:06:01,035 --> 00:06:06,015
The user in developer productivity is
also significantly increasing a lot.

115
00:06:06,615 --> 00:06:09,435
And the next important thing is
like CACD models, but we need

116
00:06:09,435 --> 00:06:11,205
to have a strong CACD system.

117
00:06:11,205 --> 00:06:13,185
But again, what does A CCD mean?

118
00:06:13,185 --> 00:06:15,175
And automated testing
pipelines, whenever developer.

119
00:06:15,885 --> 00:06:18,935
Pushes a code, a strong
enforcement of testing all the

120
00:06:19,395 --> 00:06:20,625
core components as unit tests.

121
00:06:20,625 --> 00:06:22,455
And obviously we have some
kind of integration test

122
00:06:22,635 --> 00:06:23,655
the code deployment as well.

123
00:06:23,655 --> 00:06:28,125
So having that necessary checks and
balances would, we, would really improve

124
00:06:28,815 --> 00:06:30,975
our on aspect of it at the same time.

125
00:06:31,600 --> 00:06:34,270
We have right checks to make sure
that, quality code is getting into

126
00:06:34,270 --> 00:06:37,900
production and other important
aspects, self, et cetera.

127
00:06:37,930 --> 00:06:39,220
Things can go wrong all the time, right?

128
00:06:39,220 --> 00:06:42,930
So I think how can we build our
system such that when something

129
00:06:42,930 --> 00:06:45,300
really goes bad, it can self heal.

130
00:06:45,300 --> 00:06:45,855
It can be like it.

131
00:06:46,355 --> 00:06:49,110
It can be as simple as saying some,
the new build that is deployed into

132
00:06:49,110 --> 00:06:52,150
production, we have some kind of some kind
of a cannery kind of deployments, right?

133
00:06:52,150 --> 00:06:55,010
In that case, if some new build
doesn't work really well, it self

134
00:06:55,010 --> 00:06:57,680
heals and also go, goes back to
the previously healthy build.

135
00:06:57,680 --> 00:07:00,980
So that's one example of how can we
build infrastructure or deployment

136
00:07:00,980 --> 00:07:04,130
pipelines, which can really
improve the developer experience.

137
00:07:04,130 --> 00:07:07,070
At the same time, we have
that star stable software star

138
00:07:07,070 --> 00:07:09,650
running in production without any
interaction at any point of time.

139
00:07:09,980 --> 00:07:11,430
These are a few things I want to touch on.

140
00:07:11,435 --> 00:07:15,555
Want to see how can we build
strong developer confidence.

141
00:07:15,585 --> 00:07:19,065
And it is a lot of unnecessary, all
of the developer, the best thing

142
00:07:19,105 --> 00:07:20,725
they're good at is like building code.

143
00:07:20,725 --> 00:07:25,795
So obviously providing that opportunity
to build strong code and also giving

144
00:07:25,795 --> 00:07:29,065
all the tools and infrastructure
to accelerate that and support

145
00:07:29,065 --> 00:07:32,255
that is the best thing that we can
provide in any cloud environment.

146
00:07:32,705 --> 00:07:35,700
So that's one few things I
want to touch upon this aspect.

147
00:07:36,200 --> 00:07:39,350
The next thing is, so
infrastructure code care.

148
00:07:39,350 --> 00:07:42,930
So since we are taking care of the
developer experience, they're able to

149
00:07:42,930 --> 00:07:45,810
build the code, deploy the code, test
the code, and then extremely important

150
00:07:45,810 --> 00:07:49,800
aspect of is like now we need to
also look at where it gets deployed.

151
00:07:49,920 --> 00:07:52,590
So basically you are trying to
deploy things essentially, right?

152
00:07:52,650 --> 00:07:56,410
So it gets into some vm, some kind of a
Kubernetes environment or various other

153
00:07:56,590 --> 00:07:58,150
constructs, or like a microservice.

154
00:07:58,215 --> 00:07:59,625
In a cloud kind of environment.

155
00:07:59,955 --> 00:08:02,535
So in that case the most
important thing is like that.

156
00:08:02,535 --> 00:08:06,485
Now we are dealing with all the hardware
of it, like all the VMs and how do we

157
00:08:06,905 --> 00:08:10,550
deploy as a microservice, whether it
is allow like a docker containers or

158
00:08:10,650 --> 00:08:12,450
all that in the construct Kubernetes.

159
00:08:12,450 --> 00:08:14,490
So we have something like small
parts and stuff like that.

160
00:08:14,490 --> 00:08:15,540
So how do we package them?

161
00:08:15,540 --> 00:08:16,230
How do you deploy them?

162
00:08:16,230 --> 00:08:20,070
These are extremely important constructs
when you go into this at scale deployment.

163
00:08:20,080 --> 00:08:22,690
So building that, there are a
few things I wanted to touch

164
00:08:22,690 --> 00:08:23,770
upon in the same aspect like.

165
00:08:24,250 --> 00:08:26,320
Building this infrastructure as
called a few things like in a

166
00:08:26,320 --> 00:08:30,400
moderate template, libraries, and so
this is more when we want to build

167
00:08:30,550 --> 00:08:34,250
reusable components, again, it's more
there are various constructs to it.

168
00:08:34,250 --> 00:08:37,220
So basically autoscaling, the
infrastructure is one part of it.

169
00:08:37,260 --> 00:08:40,020
If we are exceed some limits of the
infrastructure, obviously we can

170
00:08:40,020 --> 00:08:43,520
have some kind of templates which
can kick in and, expand as service.

171
00:08:43,520 --> 00:08:45,560
For example, that this,
there is some construction.

172
00:08:45,875 --> 00:08:49,925
Our workloads are not more than what
we have currently purchased from cloud,

173
00:08:49,925 --> 00:08:53,645
and we can have those con controls
and checks to essentially expand our

174
00:08:53,825 --> 00:08:58,175
infrastructure in a way that we have more
compute available to run our workloads.

175
00:08:59,045 --> 00:09:02,345
Similarly, GI Tops workflows is an
extremely important role as well.

176
00:09:02,765 --> 00:09:05,675
Again, the same thing, providing
audit trail of what has went

177
00:09:05,675 --> 00:09:08,195
and what is rolled back, and all
those other good things there.

178
00:09:08,695 --> 00:09:11,865
Again, the other important thing is
after we have provided all this as

179
00:09:11,865 --> 00:09:15,225
scale components, again, extremely
important thing is we have to look

180
00:09:15,225 --> 00:09:16,635
at the complex scaling as well.

181
00:09:16,665 --> 00:09:20,895
So just making sure that whatever
libraries that we're building as part of

182
00:09:20,895 --> 00:09:25,145
the infrastructure deployment is they're
all security tested, is like a lot of

183
00:09:25,145 --> 00:09:29,635
other tools that can help us build even
for the, as simple as docker containers

184
00:09:29,635 --> 00:09:32,305
or what the Kubernetes environment we.

185
00:09:32,770 --> 00:09:36,670
Can have some kind of automatic tools
that can scan these containers and make

186
00:09:36,670 --> 00:09:39,990
sure that none of the libraries that
are built and has some known library

187
00:09:40,800 --> 00:09:42,060
vulnerabilities and make sure that.

188
00:09:42,885 --> 00:09:45,885
These are compliant and secure
before they're put in production.

189
00:09:45,885 --> 00:09:49,185
So that is one aspect of it, which
are extremely important in a way.

190
00:09:49,995 --> 00:09:52,864
And once we touched upon that,
first we talked about developer,

191
00:09:52,864 --> 00:09:55,354
how can we make him agile and make
him faster, and stuff like that.

192
00:09:55,354 --> 00:09:59,245
And talked about what are the constructs
of, infrastructure, how can we.

193
00:09:59,715 --> 00:10:02,775
Build an infrastructure which is robust
and compliant and all those good stuff.

194
00:10:02,775 --> 00:10:05,955
Now, once we have all those important
things started out, next important

195
00:10:05,955 --> 00:10:08,895
thing is like how do we make what
we built is successful, right?

196
00:10:08,895 --> 00:10:12,645
So there are various metrics
that I look that we can look at

197
00:10:13,275 --> 00:10:14,565
is technical metrics obviously.

198
00:10:14,565 --> 00:10:17,025
So I think from the
technical aspect of it.

199
00:10:17,525 --> 00:10:19,625
So how fast are we deploying, right?

200
00:10:19,805 --> 00:10:21,415
The mean and lead time of the change.

201
00:10:21,504 --> 00:10:25,045
So know, mean, time to record if
things and things go bad, how fast we

202
00:10:25,045 --> 00:10:27,535
can refer from it, and key insights.

203
00:10:28,045 --> 00:10:30,114
What are the failure rates looking like?

204
00:10:30,114 --> 00:10:33,714
So these are all like very good or
important technical metrics that

205
00:10:33,714 --> 00:10:37,015
would eventually provide us insights
into how fast we are deploying code,

206
00:10:37,015 --> 00:10:38,844
how fast we are reacting to change.

207
00:10:39,300 --> 00:10:42,930
How fast we are able to, roll
back and, make sure there is less

208
00:10:42,930 --> 00:10:44,100
downtime to the customers, right?

209
00:10:44,100 --> 00:10:46,380
So extremely important aspects of it.

210
00:10:46,650 --> 00:10:49,860
And the other important thing we need
to think about is like business metrics.

211
00:10:49,860 --> 00:10:53,070
Now we look at the technical
construct of it, then we need to look

212
00:10:53,070 --> 00:10:54,600
at the com business aspect of it.

213
00:10:54,650 --> 00:10:56,719
So how much we are spending.

214
00:10:57,260 --> 00:11:01,180
What is the cost for deployment,
ation rates and how much time it

215
00:11:01,180 --> 00:11:02,949
is taking for us to go to market.

216
00:11:02,949 --> 00:11:06,069
I know for example, in traditionally
in the past, when the custom vendor

217
00:11:06,069 --> 00:11:09,180
is, less or no no cloud in a way.

218
00:11:09,270 --> 00:11:11,940
Like a lot of companies used to
build their own data centers.

219
00:11:12,180 --> 00:11:14,010
Know, scaling the infrastructure is.

220
00:11:14,435 --> 00:11:17,965
The relatively difficult aspect of it
because hardware has to be procured from

221
00:11:17,965 --> 00:11:20,965
somewhere and also provisioned and all
those other good things have to happen.

222
00:11:20,965 --> 00:11:23,725
So before we can start utilizing
it for an AI thing, right?

223
00:11:24,175 --> 00:11:25,155
In that aspect, I think.

224
00:11:25,655 --> 00:11:29,224
But if you look at in the cloud,
you know how fast or how agile

225
00:11:29,224 --> 00:11:30,545
we can adapt to new changes.

226
00:11:30,545 --> 00:11:33,484
Like for example, I have to deploy
a new feature which are, or a

227
00:11:33,484 --> 00:11:37,385
new product, for example, where,
how fast we can get it to market.

228
00:11:37,475 --> 00:11:40,355
And obviously to think about an
aspect where I need to release a

229
00:11:40,355 --> 00:11:42,215
product in some other country, right?

230
00:11:42,695 --> 00:11:45,995
It becomes extremely easy or I
don't have to buy hardware from

231
00:11:45,995 --> 00:11:48,845
a different country or whatever
is the good things there, right?

232
00:11:48,845 --> 00:11:51,575
So I think it becomes
extremely easy for us to.

233
00:11:51,620 --> 00:11:53,540
And think about those kind of things.

234
00:11:53,540 --> 00:11:54,860
How are we progressing?

235
00:11:55,080 --> 00:11:55,950
How easy it is.

236
00:11:55,950 --> 00:11:58,470
Are those, some of those metrics
are extremely important as well.

237
00:11:59,310 --> 00:12:02,840
Other thing is develop now we
have built the robot systems.

238
00:12:03,770 --> 00:12:06,850
How do we know, the developers are
really enjoying it or it's becoming

239
00:12:06,850 --> 00:12:08,940
really a painful work experience.

240
00:12:08,940 --> 00:12:12,480
So obviously some of the things that we
could do is look at the surveys, get the

241
00:12:12,480 --> 00:12:16,040
feedback, try to see what is, what are
the pain points and improve on it, right?

242
00:12:16,040 --> 00:12:20,570
Obviously know, I think it's, we have
to improve our product and obviously

243
00:12:20,570 --> 00:12:22,405
we know on a HAL concept, what are the.

244
00:12:22,965 --> 00:12:26,085
Good things that these systems like
our cloud systems can bring in.

245
00:12:26,475 --> 00:12:31,295
And every every system is different and we
have to adapt to the surveys and feedbacks

246
00:12:31,370 --> 00:12:32,810
and make it better or better time.

247
00:12:33,470 --> 00:12:36,160
And now let's touch up on some
important aspects of, the.

248
00:12:36,660 --> 00:12:39,660
What are the emerging trends in
this cloud infrastructure, right?

249
00:12:39,660 --> 00:12:40,470
Platform engineering.

250
00:12:41,070 --> 00:12:42,780
There are a few things
I want to touch on here.

251
00:12:42,840 --> 00:12:44,700
One is like AI power operate, right?

252
00:12:44,730 --> 00:12:45,900
Machine learning models.

253
00:12:46,620 --> 00:12:48,030
Now AI is everywhere.

254
00:12:48,090 --> 00:12:50,250
I think AI is disrupting
a lot of industries.

255
00:12:50,250 --> 00:12:53,880
I think this is also an extremely
important industry, in my opinion,

256
00:12:53,880 --> 00:12:55,505
where a can play a big role.

257
00:12:56,005 --> 00:13:03,205
No, A AI can be able to predict resources
based on existing lit and other co.

258
00:13:03,205 --> 00:13:08,905
Other constructs of it can really
provide, predict what are the needs

259
00:13:08,905 --> 00:13:13,675
of the future, optimize cost, provide
insights, provide suggestions, how do

260
00:13:13,675 --> 00:13:18,355
we improve our cost, apply models, and
I feel like there is a strong importance

261
00:13:18,495 --> 00:13:22,665
that AI can bring into this cloud
platform engineering stuff where it can

262
00:13:22,665 --> 00:13:24,435
improve significantly in my opinion.

263
00:13:24,935 --> 00:13:29,315
Another important aspect is a Jira Trust
engine Securities should be essential.

264
00:13:29,315 --> 00:13:33,305
Part of the cloud platforms is extremely
important, that it becomes the next

265
00:13:33,335 --> 00:13:37,125
number one or, important thing while we
are building this microservices framework

266
00:13:37,545 --> 00:13:39,075
in a more like a cloud environment.

267
00:13:39,585 --> 00:13:43,455
And yeah, one of the important
construct is zero trust.

268
00:13:43,455 --> 00:13:46,805
We start with something considering
that, people have lead next,

269
00:13:46,895 --> 00:13:48,065
pardon me, edge competing support.

270
00:13:48,125 --> 00:13:49,475
Platforms now.

271
00:13:49,475 --> 00:13:51,815
Now this is again, running
on the edge, right?

272
00:13:51,815 --> 00:13:53,975
So more like the iot and realtime.

273
00:13:54,475 --> 00:13:56,155
I think this is all
picking up really well.

274
00:13:56,245 --> 00:14:00,165
I think in terms of, increasing compute
speed and providing that vision and

275
00:14:00,165 --> 00:14:05,085
also providing that capability to run
it with increased networks and all that.

276
00:14:05,085 --> 00:14:09,375
I think iot realtime process is
also has a signal opportunity here.

277
00:14:09,875 --> 00:14:13,895
And now let's talk about how do we
implement these strategies, right?

278
00:14:13,995 --> 00:14:18,075
Obviously we can't really go from
A to B directly and there has to

279
00:14:18,075 --> 00:14:19,515
be some kind of evolution here.

280
00:14:19,875 --> 00:14:22,215
So in my opinion, we start
with a phase approach.

281
00:14:22,245 --> 00:14:25,945
You start with pillar teams, you
start with a some form small teams,

282
00:14:26,045 --> 00:14:31,525
test out, build a real, the base
infrastructure and hello teams to

283
00:14:31,525 --> 00:14:33,415
get add out to this new framework.

284
00:14:33,625 --> 00:14:34,700
Now, whether it is about Microsoft.

285
00:14:34,985 --> 00:14:38,825
Versus framework or if we are building
Kubernetes platform, have some opportunity

286
00:14:38,825 --> 00:14:40,865
to build some base core constructs.

287
00:14:40,865 --> 00:14:43,995
For example, we can have something
like, how do we deploy things?

288
00:14:43,995 --> 00:14:45,495
There is like a various things you can do.

289
00:14:45,495 --> 00:14:48,915
Like you can do some kind of canary
deployments, blue grade deployments.

290
00:14:48,915 --> 00:14:50,915
It's a construct that you
can build into the platform.

291
00:14:51,215 --> 00:14:55,065
The next thing is like what is a
consistent way for the software teams to.

292
00:14:55,525 --> 00:14:58,915
Build their packages and deploy them
into the, so for example, if you take

293
00:14:58,915 --> 00:15:03,465
Kubernetes as a Kubernetes environment
this is again, providing that opportunity

294
00:15:03,465 --> 00:15:09,255
is also having that base layer of platform
built that let cus let team set out this

295
00:15:09,305 --> 00:15:12,805
framework and, provide that opportunities
for engineers to also come in and

296
00:15:12,805 --> 00:15:14,035
contribute to it and make it better.

297
00:15:14,455 --> 00:15:17,065
I feel that is an eventual process.

298
00:15:17,065 --> 00:15:20,395
We start with a few teams, pilot
them and identify what are the

299
00:15:20,395 --> 00:15:23,425
other things that we can make it
improve and you progress on other.

300
00:15:23,425 --> 00:15:26,485
Next important thing is once we have
enough confidence with all the poor

301
00:15:26,485 --> 00:15:30,415
pilot teams, then we start about
socializing with broader teams.

302
00:15:30,700 --> 00:15:35,200
Functional cross-functional teams and also
thinking about how can we make it a shared

303
00:15:35,200 --> 00:15:37,890
ownership now is like this is a platform.

304
00:15:37,890 --> 00:15:40,380
Obviously people can come in
and contribute and improve on

305
00:15:40,380 --> 00:15:42,720
it, and also extend on it and
all those good things, right?

306
00:15:42,720 --> 00:15:46,520
So where other people's, other
teams can also extend it and we

307
00:15:46,520 --> 00:15:48,170
have that big ecosystem of platform.

308
00:15:48,920 --> 00:15:49,700
Within the company.

309
00:15:50,200 --> 00:15:50,470
Yeah.

310
00:15:50,620 --> 00:15:54,300
The next important thing is again, as
I was kept on saying it's a continuous

311
00:15:54,300 --> 00:15:58,620
evolution, things can improve, things
can extend based on the feedback,

312
00:15:58,620 --> 00:16:00,090
we keep improving the platform now.

313
00:16:00,150 --> 00:16:03,050
We keep using it and improving
it based on the rates.

314
00:16:03,920 --> 00:16:08,300
Now, next important thing I want
to touch upon is, so this is a

315
00:16:08,300 --> 00:16:10,065
complexity gap I want to talk about.

316
00:16:10,565 --> 00:16:12,815
So we have operational
tooling built and deploy.

317
00:16:13,655 --> 00:16:16,145
If you look at this like we have
operational tooling and what

318
00:16:16,145 --> 00:16:18,520
all person need to know, there
are knowledge and contracts.

319
00:16:19,020 --> 00:16:20,070
End-to-end responsibility.

320
00:16:20,230 --> 00:16:22,660
So I think this is just
giving a high level view.

321
00:16:22,720 --> 00:16:23,650
What is the intersection?

322
00:16:23,650 --> 00:16:24,520
Operational tooling.

323
00:16:24,520 --> 00:16:26,770
You need operational tooling
for the developers to build

324
00:16:27,130 --> 00:16:28,180
and deploy at the same time.

325
00:16:28,180 --> 00:16:30,430
Operational tooling for
knowledge and conflict, right?

326
00:16:30,430 --> 00:16:34,270
So if you look at this suite, what of
a cognitive load on the cus load on the

327
00:16:34,270 --> 00:16:37,720
developers, it's more like what are all
the things that are extremely important,

328
00:16:37,770 --> 00:16:41,760
if you look at the midpoint where it kind
of merges in, it becomes a collective

329
00:16:41,760 --> 00:16:43,890
responsibility essentially, right?

330
00:16:43,890 --> 00:16:46,290
So that is an extremely sweet spot there.

331
00:16:46,410 --> 00:16:50,910
So now let's talk about
multi-cloud governance, right?

332
00:16:50,960 --> 00:16:54,830
Then again, once we have a strong
system, fundamental foundation and

333
00:16:54,830 --> 00:16:58,220
billing all these good things, extremely
important thing, as I was mentioning

334
00:16:58,225 --> 00:17:01,715
before, is having that security
and compliance in place as well.

335
00:17:02,525 --> 00:17:07,175
So two important two or three
things which are like a lookout.

336
00:17:07,175 --> 00:17:11,015
Things we need to think about is like
inconsistent security controls is

337
00:17:11,065 --> 00:17:14,755
having, without having right policies
in place, it becomes extremely difficult

338
00:17:15,115 --> 00:17:18,970
now calls management, when we move
to cloud, there could be a lot of

339
00:17:18,970 --> 00:17:23,980
offerings, a lot of tools and risk
things that can happen and cost can.

340
00:17:24,880 --> 00:17:27,310
Cost is an important factor
when we use these things.

341
00:17:27,310 --> 00:17:31,000
So having that management
and cost management strategy

342
00:17:31,000 --> 00:17:32,320
is also very important.

343
00:17:32,740 --> 00:17:36,220
And obviously co. Other thing is
less compliance, so making sure that

344
00:17:36,220 --> 00:17:39,310
we are based on the industry we are
in, we are compliant, and making

345
00:17:39,310 --> 00:17:43,360
have the, having that right controls
in places is also very important.

346
00:17:43,860 --> 00:17:45,150
Things that we need to think about.

347
00:17:45,580 --> 00:17:48,610
The next important thing is like
self-service infrastructure.

348
00:17:48,670 --> 00:17:51,070
Why do we need self-service
kind of information, right?

349
00:17:51,120 --> 00:17:55,260
So now if you look at the graph on the
left is like traditional approaching time.

350
00:17:55,260 --> 00:17:58,170
Used to take long time compliance
issues, used to take long

351
00:17:58,170 --> 00:17:59,340
time and developer wait time.

352
00:17:59,340 --> 00:18:02,160
Obviously we talked about some
of the aspects of, traditional

353
00:18:02,160 --> 00:18:03,930
approach of having that data centers.

354
00:18:03,930 --> 00:18:05,520
And next thing is like
platform engineering.

355
00:18:05,520 --> 00:18:07,800
Now we can, we are building
for the cloud, right?

356
00:18:08,130 --> 00:18:10,140
So how can these improve?

357
00:18:10,370 --> 00:18:11,780
Is what we touched upon so far.

358
00:18:11,780 --> 00:18:17,450
So it's more like how can we self-service
infrastructure, it can drastically or

359
00:18:17,450 --> 00:18:21,200
dramatically increase the production times
and obviously provide that insights into

360
00:18:21,200 --> 00:18:24,440
compliance issues and also then improve
the developer productivity over time.

361
00:18:24,830 --> 00:18:28,040
So then I want to touch
upon some golden parts.

362
00:18:28,100 --> 00:18:29,930
How do we balance control and freedom?

363
00:18:29,930 --> 00:18:32,835
So when we give freedom, or there
are a lot of things like, with.

364
00:18:33,515 --> 00:18:35,435
Freedom is a lot of responsibility.

365
00:18:35,485 --> 00:18:40,075
It's extremely important to have right
controls in place so that, yeah, every,

366
00:18:40,165 --> 00:18:44,335
all the things will run as per the
security compliance guidelines, right?

367
00:18:44,335 --> 00:18:48,715
So the, so having that right controls
also will help with few of the

368
00:18:48,715 --> 00:18:50,005
things that I want to touch upon.

369
00:18:50,005 --> 00:18:53,175
He's can, developers can
reducing cognitive load.

370
00:18:53,205 --> 00:18:55,600
They have, they can just
build business logic.

371
00:18:55,600 --> 00:18:58,355
They don't have to really think about,
what are the infrastructure developments,

372
00:18:58,355 --> 00:19:01,595
accelerate development cycles, and
obviously they are more important.

373
00:19:02,420 --> 00:19:04,160
How they want to apply un develop, right?

374
00:19:04,160 --> 00:19:05,390
So I think that's a good thing.

375
00:19:05,390 --> 00:19:05,540
They are.

376
00:19:06,230 --> 00:19:08,520
And they're good at it and
providing that opportunity.

377
00:19:09,020 --> 00:19:10,790
And the other thing is like
consistent implementation.

378
00:19:10,820 --> 00:19:14,360
Having that structured patterns,
ensure security is also very important

379
00:19:14,510 --> 00:19:15,770
and flexible boundaries, right?

380
00:19:15,770 --> 00:19:17,840
When providing guidance
is all for customization.

381
00:19:17,889 --> 00:19:21,929
When there is a new requirement, obviously
demand can debate from standard pattern.

382
00:19:21,929 --> 00:19:24,989
So there are a few golden parts
that we can provide, right?

383
00:19:25,664 --> 00:19:27,465
What do we think of the
future of cloud work?

384
00:19:27,674 --> 00:19:30,894
So I strongly believe it's more
than a technical evolution.

385
00:19:31,014 --> 00:19:35,429
I think the way it's the pace at
which it is improving is significant.

386
00:19:35,669 --> 00:19:40,014
And I would say, so I would say is this
has transformed a lot of industries.

387
00:19:40,014 --> 00:19:43,014
I would say providing that agility
to the developers and the faster

388
00:19:43,014 --> 00:19:44,574
go to market, various things.

389
00:19:44,584 --> 00:19:48,514
So I think the path definitely
is very clear in our robust

390
00:19:48,514 --> 00:19:49,529
platform engineering capabilities.

391
00:19:50,419 --> 00:19:51,829
Will definitely be the future.

392
00:19:51,989 --> 00:19:55,589
And building those foundational
components across the stock are

393
00:19:55,919 --> 00:19:57,749
extremely important for the success.

394
00:19:58,199 --> 00:20:02,719
So those are all the basic constructs
I want to touch for this talk.

395
00:20:03,169 --> 00:20:04,699
Thank you very much everyone.

396
00:20:05,389 --> 00:20:05,824
Have a nice day.

397
00:20:06,124 --> 00:20:06,344
See?

