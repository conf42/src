1
00:00:00,480 --> 00:00:01,469
Hello everyone.

2
00:00:01,960 --> 00:00:06,289
Welcome to Con 42 DevSecOps 2024 event.

3
00:00:07,150 --> 00:00:13,369
Today I am presenting you my exciting
topic, securing the Kubernetes ecosystem,

4
00:00:13,879 --> 00:00:16,559
a comprehensive multi level framework.

5
00:00:17,059 --> 00:00:18,199
Here is the agenda.

6
00:00:18,729 --> 00:00:25,359
I will cover key points of securing
Kubernetes ecosystem, including about

7
00:00:25,409 --> 00:00:34,569
me, a statistical report from Red Hat,
With alarming security facts, I will

8
00:00:34,679 --> 00:00:40,619
cover the goal of the presentation
with a multi level approach and

9
00:00:40,639 --> 00:00:43,419
architecture and with the final touch.

10
00:00:43,919 --> 00:00:46,589
My name is Thyagarajan Aramuthan.

11
00:00:47,089 --> 00:00:52,229
I am a cloud services manager
with extensive experience

12
00:00:52,229 --> 00:00:53,849
in Kubernetes security.

13
00:00:54,349 --> 00:00:56,779
You all can connect with me in LinkedIn.

14
00:00:57,279 --> 00:01:01,949
The recent Kubernetes security
statistics report from Red

15
00:01:01,969 --> 00:01:05,219
Hat revealed alarming trends.

16
00:01:06,079 --> 00:01:13,259
About 67 percent of organizations
delayed their deployment due to

17
00:01:13,849 --> 00:01:16,129
the Kubernetes security concerns.

18
00:01:16,629 --> 00:01:23,159
And 46 percent of the organization
lost their revenue due to

19
00:01:23,734 --> 00:01:26,254
Kubernetes security incident.

20
00:01:26,754 --> 00:01:31,404
Wait, no need to be panic,
but let's stay alert.

21
00:01:31,994 --> 00:01:36,574
Our goal is to provide a multi
level approach to secure the

22
00:01:36,574 --> 00:01:42,944
Kubernetes ecosystem, ensuring
robust security at every layer.

23
00:01:43,444 --> 00:01:46,724
We will explore multi levels of security.

24
00:01:47,474 --> 00:01:50,034
It is like an onion layers.

25
00:01:50,544 --> 00:01:52,614
Level one with infrastructure.

26
00:01:53,024 --> 00:01:59,384
Level 2 on cluster, applying
security on the container, applying

27
00:01:59,384 --> 00:02:04,554
security on the application, and
finally in level 5 with code.

28
00:02:05,054 --> 00:02:12,254
This architecture diagram shows a typical
API and web application, highlighting

29
00:02:12,374 --> 00:02:15,044
the areas that are not fully secured.

30
00:02:15,544 --> 00:02:19,854
If you notice, the request
from the UI component goes

31
00:02:19,964 --> 00:02:22,114
directly to the API management.

32
00:02:22,529 --> 00:02:24,069
with no controls.

33
00:02:24,729 --> 00:02:30,359
Here, no RBACs are applied and
no port security are applied.

34
00:02:30,859 --> 00:02:37,389
Ports have no controls, so it can
communicate to any system like a database,

35
00:02:37,759 --> 00:02:41,109
service bus, and external services.

36
00:02:41,249 --> 00:02:46,119
If you notice here, service
A talks to service B and it

37
00:02:46,149 --> 00:02:47,449
talks to everything, right?

38
00:02:47,469 --> 00:02:49,129
So it may not be required.

39
00:02:49,974 --> 00:02:53,274
But it talks to everything,
it has no controls.

40
00:02:53,764 --> 00:02:57,874
So the system is at high security risk.

41
00:02:58,764 --> 00:03:02,904
Let's start our multi level
approach and see how this

42
00:03:02,944 --> 00:03:04,534
architecture going to be look at.

43
00:03:05,034 --> 00:03:10,505
Let's dive in level one, infrastructure
level security, laying the foundation.

44
00:03:11,085 --> 00:03:17,745
Securing the infrastructure layer
involves implementing firewalls, applying

45
00:03:17,745 --> 00:03:23,380
the security patches, and Leveraging
certain cloud provided security

46
00:03:23,380 --> 00:03:29,710
features like Azure Security Groups,
AWS, security groups and network acls.

47
00:03:30,210 --> 00:03:36,460
In this architecture, I have added
the firewall component before the A PA

48
00:03:36,460 --> 00:03:42,595
component, and I have included subnets
and energies inside the virtual networks.

49
00:03:43,095 --> 00:03:47,495
This would safeguard the request,
so securing the infrastructure is.

50
00:03:47,995 --> 00:03:54,195
only 20 percent of the overall security,
but it is a critical foundation.

51
00:03:54,695 --> 00:04:00,625
Next level is the cluster level
security protecting the Kubernetes core.

52
00:04:01,125 --> 00:04:06,125
We need to implement RBAC and
enforce network policies like

53
00:04:06,325 --> 00:04:10,655
Calico and encrypt the communication
between the control plane and the

54
00:04:10,655 --> 00:04:13,324
data plane components using Istio.

55
00:04:13,824 --> 00:04:21,184
In this architecture, I have included
the Calico STO, which comes with

56
00:04:21,184 --> 00:04:23,754
an, which comes with a sidecar.

57
00:04:24,254 --> 00:04:28,204
What Calico does is it
controls the pod communication.

58
00:04:28,754 --> 00:04:33,244
The first step is to set global
policy as a default deny all,

59
00:04:33,744 --> 00:04:35,874
which will block all the traffic.

60
00:04:36,544 --> 00:04:41,724
Then add network policy to
enable the pod communication.

61
00:04:42,639 --> 00:04:44,419
to corresponding service.

62
00:04:44,919 --> 00:04:51,429
Next, what STO will do is it
would encrypt the communication.

63
00:04:52,659 --> 00:04:57,949
part communications are managed,
controlled, and encrypted.

64
00:04:58,449 --> 00:05:03,620
Securing the cluster brings the
cluster level to 40 percent here,

65
00:05:03,960 --> 00:05:06,274
showing significant progress.

66
00:05:06,774 --> 00:05:10,784
All right, next is the level
3 container level security,

67
00:05:11,004 --> 00:05:13,724
protecting our images and runtime.

68
00:05:14,224 --> 00:05:22,484
Using minimal base images and scanning for
vulnerabilities are essential for securing

69
00:05:22,484 --> 00:05:24,944
the container images and the runtime.

70
00:05:25,444 --> 00:05:32,844
In this architecture, I have added
security, I have added the scanning tool.

71
00:05:33,629 --> 00:05:37,209
real time monitoring
tools and signed images.

72
00:05:37,949 --> 00:05:42,779
So what this would do is because
of the signed images and we have

73
00:05:42,779 --> 00:05:48,489
the proper scanning of the images,
this would safeguard the container.

74
00:05:49,059 --> 00:05:52,969
So securing the container
level increases the security

75
00:05:52,970 --> 00:05:55,809
up to 60 percent in this level.

76
00:05:56,409 --> 00:05:59,299
So demonstrating the
importance of this layer.

77
00:05:59,799 --> 00:06:01,769
Next is the application level security.

78
00:06:02,614 --> 00:06:05,934
Securing your application
within Kubernetes.

79
00:06:06,394 --> 00:06:12,364
In this level, we need to focus on
implementing secure coding practices

80
00:06:12,634 --> 00:06:15,214
and manage the secrets properly.

81
00:06:15,714 --> 00:06:21,554
In this architecture, I have included
the code repository and showing the

82
00:06:21,564 --> 00:06:25,374
secrets stored in the key vaults.

83
00:06:26,304 --> 00:06:26,474
Key vault.

84
00:06:26,974 --> 00:06:32,374
Securing the application level
increases the security to 80 percent

85
00:06:32,854 --> 00:06:35,484
showing substantial progress.

86
00:06:35,984 --> 00:06:39,924
This is the final level,
code level security.

87
00:06:40,844 --> 00:06:44,794
Building secure applications
from the ground up.

88
00:06:45,444 --> 00:06:52,494
We need to conduct thorough code reviews,
utilize static and dynamic analysis tools.

89
00:06:53,224 --> 00:06:58,024
And implement the policies for
automated compliance check.

90
00:06:58,524 --> 00:07:04,674
In this architecture, I have
included DevOps pipeline, code

91
00:07:04,674 --> 00:07:09,994
review component, policy enforcement
component, and code scanning tool.

92
00:07:10,494 --> 00:07:17,024
So what this will do is all this layer,
it would make sure the code is safe.

93
00:07:17,554 --> 00:07:17,754
It is.

94
00:07:18,254 --> 00:07:23,294
applying as an compliancy check before
it goes into a Kubernetes layer.

95
00:07:24,134 --> 00:07:30,274
So securing the core level achieves
100 percent security here by adding

96
00:07:30,274 --> 00:07:32,944
the level 1, level 2, level 3, level 4.

97
00:07:33,284 --> 00:07:38,244
By coming to the level 5, we are
achieving a ultimate secured architecture

98
00:07:38,754 --> 00:07:41,894
by having an 100 percent security.

99
00:07:42,394 --> 00:07:48,124
We can choose the tool based on
cloud provider or any open source.

100
00:07:48,824 --> 00:07:53,244
Goal here is to apply the
security at each and every level.

101
00:07:53,914 --> 00:08:00,394
We can use observability tools like
Grafana for real time monitoring

102
00:08:00,424 --> 00:08:03,434
of Kubernetes vulnerability alerts.

103
00:08:03,934 --> 00:08:09,634
We can also leverage aops as an
advanced levels for proactive

104
00:08:09,684 --> 00:08:12,254
thread and self healing process.

105
00:08:12,864 --> 00:08:17,604
And Zero trust security
model enforcement, right?

106
00:08:17,654 --> 00:08:23,384
What it will do is we can have
a policy of never trust and

107
00:08:23,404 --> 00:08:25,744
always verify model, right?

108
00:08:26,024 --> 00:08:30,284
For certain things like checking
the granular access control.

109
00:08:31,114 --> 00:08:35,774
So the future of the Kubernetes security
lies in the multilayer approach.

110
00:08:36,129 --> 00:08:40,079
Integrating the AIOps and
zero trust security model.

111
00:08:40,969 --> 00:08:46,349
So this combination creates a highly
secured and resilient environment.

112
00:08:46,849 --> 00:08:47,519
Conclusion.

113
00:08:48,289 --> 00:08:53,369
So securing the Kubernetes is
not a one size fits all solution.

114
00:08:54,029 --> 00:09:00,879
I repeat, securing a Kubernetes is
not a one size fits all solution.

115
00:09:01,409 --> 00:09:04,699
It requires multi tiered approach.

116
00:09:05,079 --> 00:09:10,779
that addresses the security at each and
every level from infrastructure to code.

117
00:09:11,599 --> 00:09:16,309
By adopting the multi level approach
with leveraging the right tools,

118
00:09:16,859 --> 00:09:22,419
we can significantly enhance the
security of our Kubernetes environment.

119
00:09:22,919 --> 00:09:27,909
Thank you for listening and let's
maintain our application safe.

120
00:09:28,409 --> 00:09:29,019
Thank you.

