1
00:00:00,140 --> 00:00:00,990
Hello everyone.

2
00:00:01,680 --> 00:00:05,340
Welcome to Con 42 DevSecOps 2024 event.

3
00:00:05,920 --> 00:00:11,349
Today I am presenting you one of
the exciting topic about securing

4
00:00:11,350 --> 00:00:15,549
the Kubernetes ecosystem, a
comprehensive multi level framework.

5
00:00:16,049 --> 00:00:17,119
Here is the agenda.

6
00:00:17,729 --> 00:00:23,809
I will cover key points of securing
Kubernetes ecosystem, including about

7
00:00:23,859 --> 00:00:30,109
me, a statistical report from Red
Hat, With allowing security facts.

8
00:00:30,689 --> 00:00:35,989
I will cover the goal of this presentation
with a multi level security approach and

9
00:00:35,999 --> 00:00:39,129
architecture followed by a final touch.

10
00:00:39,629 --> 00:00:40,289
Let's begin.

11
00:00:40,769 --> 00:00:43,059
My name is Thyagarajan Aramudan.

12
00:00:43,559 --> 00:00:47,839
I am a cloud services manager
with extensive experience

13
00:00:47,899 --> 00:00:49,959
in Kubernetes security.

14
00:00:50,749 --> 00:00:52,929
You can connect with me in LinkedIn.

15
00:00:53,429 --> 00:00:59,189
The recent Kubernetes security statistics
report from Red Hat alarming trends.

16
00:00:59,709 --> 00:01:05,309
If you notice, about 67 percent
of organizations delayed their

17
00:01:05,469 --> 00:01:11,799
deployment due to Kubernetes security
concerns and about 46 percentage of

18
00:01:11,849 --> 00:01:17,159
organization lost their revenue due
to Kubernetes security incident.

19
00:01:18,139 --> 00:01:20,569
Wait, no need to be panic.

20
00:01:21,469 --> 00:01:22,549
Let's stay alert.

21
00:01:22,939 --> 00:01:25,989
Our goal is to provide a
multi level approach to secure

22
00:01:25,989 --> 00:01:28,359
the Kubernetes ecosystem.

23
00:01:28,874 --> 00:01:31,994
ensuring robust security at every level.

24
00:01:32,494 --> 00:01:35,454
We will explore multi levels of security.

25
00:01:35,654 --> 00:01:40,924
It is like an onion layers,
applying security at each level.

26
00:01:41,654 --> 00:01:47,544
So let's say level one with infrastructure
and then level two at cluster and

27
00:01:47,544 --> 00:01:52,394
then applying security at container
level, applying security on the

28
00:01:52,414 --> 00:01:57,869
application layer and finally followed
by applying security at code level.

29
00:01:58,369 --> 00:02:05,059
This architecture diagram shows a typical
API and web application highlighting

30
00:02:05,059 --> 00:02:07,399
the areas that are not fully secured.

31
00:02:08,109 --> 00:02:16,756
Here, traffic from UI, front end goes
to API management and the service A

32
00:02:16,756 --> 00:02:19,339
and service B deployed to Kubernetes.

33
00:02:19,909 --> 00:02:25,629
If you notice, the service A communicates
to database and service bus, whereas

34
00:02:25,629 --> 00:02:30,389
service B communicates to all the
systems like database, service bus,

35
00:02:30,919 --> 00:02:33,199
key vault and external services.

36
00:02:34,039 --> 00:02:37,009
And the service A also
communicates to service B.

37
00:02:37,889 --> 00:02:39,209
In this architecture.

38
00:02:40,209 --> 00:02:45,919
The request from UI goes directly
to API management with no controls.

39
00:02:46,469 --> 00:02:51,199
Here, no RBAC applied,
no pod security as well.

40
00:02:51,479 --> 00:02:54,139
Pod have absolutely no controls.

41
00:02:54,179 --> 00:02:57,399
So it can communicate to
any system by default.

42
00:02:58,239 --> 00:03:02,599
So system is at very high security risk.

43
00:03:03,049 --> 00:03:08,039
So let's start our multi level
security approach and see how our

44
00:03:08,469 --> 00:03:14,029
clean slate with fully secured
architecture going to be look at.

45
00:03:14,529 --> 00:03:17,959
Let's dive in level one
infrastructure level security

46
00:03:18,189 --> 00:03:20,169
laying and securing the foundation.

47
00:03:20,669 --> 00:03:26,459
So securing the infrastructure layer
involves implementing firewalls Applying

48
00:03:26,459 --> 00:03:33,349
the security patches and leverage cloud
provided security features like Azure

49
00:03:33,359 --> 00:03:39,299
security features in azure Whereas in
amazon, they have aws security groups

50
00:03:39,319 --> 00:03:46,739
and network acls I come up with a matrix
table with security tool options for cloud

51
00:03:46,789 --> 00:03:54,039
and open source in case of azure We have
azure security center nsgs and firewall

52
00:03:54,089 --> 00:04:02,709
which can be You Utilized for AWS they
have security hub security groups and WAF

53
00:04:02,729 --> 00:04:08,494
which can be utilized And then for the
open source, we can have firewall and OS

54
00:04:08,704 --> 00:04:13,634
ordaining, which can be used for applying
the infrastructure level security.

55
00:04:14,134 --> 00:04:20,844
In this architecture, I have added
firewall just before the API management

56
00:04:21,694 --> 00:04:26,724
and added the subnets and NSGs to
protect all the incoming requests.

57
00:04:27,184 --> 00:04:29,244
This would safeguard the request.

58
00:04:30,104 --> 00:04:37,074
Securing the infrastructure is only
20 percentage of the overall security,

59
00:04:37,754 --> 00:04:40,334
but it is a critical foundation.

60
00:04:40,834 --> 00:04:45,734
Next level is cluster level security,
protecting our Kubernetes core.

61
00:04:46,269 --> 00:04:51,899
We need to implement RAC and then
enforcing a network policies like

62
00:04:51,899 --> 00:04:57,059
Calico, and then adding the encryption
and the con in the communication layer

63
00:04:57,059 --> 00:05:02,989
where we can use the STO as a tool
for encrypting the communication.

64
00:05:03,709 --> 00:05:08,389
So in case of Azure, we can have
Azure R back and Azure policy.

65
00:05:08,479 --> 00:05:12,849
We can apply for the cluster
level security for AWS.

66
00:05:12,849 --> 00:05:15,274
They have an a m roles and security hub.

67
00:05:15,994 --> 00:05:23,894
Whereas in open source we have the tools
like calico and istio So in azure, aks,

68
00:05:23,914 --> 00:05:29,154
it comes with an add on an istio add on
which can be utilized And calico also

69
00:05:29,154 --> 00:05:34,034
can be added to an azure aks so that the
cluster level security can be enhanced.

70
00:05:34,534 --> 00:05:41,004
In this architecture, I have added
Calico STO, which comes with Sidecar.

71
00:05:41,934 --> 00:05:44,514
Calico controls the power communication.

72
00:05:45,014 --> 00:05:52,254
The first step is to set global
policy as default, deny all, to

73
00:05:52,254 --> 00:05:54,154
block all the incoming traffic.

74
00:05:55,054 --> 00:06:02,174
Then add network policy to enable the pod
communication to corresponding services.

75
00:06:02,874 --> 00:06:06,134
Next, the STO encrypts the communication.

76
00:06:06,794 --> 00:06:11,354
Here, pod communications are
managed, controlled, and encrypted.

77
00:06:11,874 --> 00:06:15,584
securing the cluster brings
the security level up.

78
00:06:16,469 --> 00:06:20,919
to 40 percent showing
the significant progress.

79
00:06:21,419 --> 00:06:22,939
Next is the level 3.

80
00:06:23,929 --> 00:06:28,479
Using, sorry, next is the level 3
which is container level security.

81
00:06:29,269 --> 00:06:35,849
Using the minimal base image and scanning
for vulnerabilities are essential for

82
00:06:36,329 --> 00:06:38,989
securing the container images and runtime.

83
00:06:39,849 --> 00:06:44,179
In case of Azure we have AZR
and AKS vulnerability scanning.

84
00:06:44,654 --> 00:06:48,504
And then for AWS, they
have ECR and Inspector.

85
00:06:48,954 --> 00:06:54,264
For the open source, we have the
image scanning tools such as Trivia,

86
00:06:54,414 --> 00:06:59,054
sorry, Trivi and Clare, along with the
security contacts which can be utilized

87
00:06:59,064 --> 00:07:01,694
for the container level security.

88
00:07:02,194 --> 00:07:07,264
In this architecture, I have
added scanning tool, real time

89
00:07:07,274 --> 00:07:10,264
monitoring tools, and signed images.

90
00:07:10,794 --> 00:07:13,774
This would very well
safeguard the container.

91
00:07:13,775 --> 00:07:13,994
All right.

92
00:07:14,894 --> 00:07:22,164
Securing the container level increases
the security to 60 percent demonstrating

93
00:07:22,164 --> 00:07:24,184
the importance of this layer.

94
00:07:24,684 --> 00:07:29,104
Next is level 4, which is
application level security.

95
00:07:29,105 --> 00:07:34,484
In this layer, we need to focus on
implementing secure coding practice

96
00:07:34,484 --> 00:07:36,725
and manage the secrets properly.

97
00:07:36,725 --> 00:07:40,759
In case of Azure, they
have Azure Key Vault.

98
00:07:41,259 --> 00:07:44,429
AWS, they have Secrets
Manager and IAM roles.

99
00:07:44,639 --> 00:07:49,699
And for the open source, there are
tools like Vault and Sealed Secrets.

100
00:07:49,959 --> 00:07:55,499
And then we can also have secure coding
practices applied at the code, at the IAM.

101
00:07:56,164 --> 00:07:57,024
application level.

102
00:07:57,524 --> 00:08:02,894
In this architecture I have
added code repo and showing

103
00:08:02,924 --> 00:08:05,324
secrets stored in keyword.

104
00:08:06,084 --> 00:08:11,554
Securing the application level
increases security to 80 percentage

105
00:08:11,989 --> 00:08:14,569
Showing substantial progress.

106
00:08:15,069 --> 00:08:18,829
This is the final level
which is code level security.

107
00:08:19,369 --> 00:08:24,609
We need to conduct thorough code
reviews, utilize the static and

108
00:08:24,619 --> 00:08:32,169
dynamic analysis tool and implement the
policies for automated compliance check.

109
00:08:32,239 --> 00:08:36,409
In case of Azure, we have security
features, DevOps security features

110
00:08:36,889 --> 00:08:42,169
and static code analysis tool and
AWS as code pipeline security.

111
00:08:42,549 --> 00:08:46,539
And static code analysis tool and
followed by in an open source.

112
00:08:47,009 --> 00:08:53,729
We have an open source sonar cube versions
and opa so we also have the sonar cube,

113
00:08:53,979 --> 00:09:00,289
Licensed version which can be utilized
in case of having More features comes

114
00:09:00,289 --> 00:09:02,269
with the SonarQube licensed version.

115
00:09:02,769 --> 00:09:09,179
So in this architecture, I have added
DevOps pipeline, code reviews, policy

116
00:09:09,179 --> 00:09:11,469
enforcement, and code scanning tool.

117
00:09:12,089 --> 00:09:19,609
So securing the code, sorry, so securing
the code level achieves 100 percent of

118
00:09:19,609 --> 00:09:25,769
security, 100 percent of the security,
completing our multi level, approach.

119
00:09:26,119 --> 00:09:29,559
This is the ultimate secured architecture.

120
00:09:30,059 --> 00:09:35,439
So we can choose the tool based on
cloud provider or any open source.

121
00:09:35,889 --> 00:09:40,119
The goal here is to apply
the security at every level.

122
00:09:40,829 --> 00:09:45,859
We can use any tools like an observability
tools like Grafana or any tools for

123
00:09:45,869 --> 00:09:47,829
real time monitoring of Kubernetes.

124
00:09:48,329 --> 00:09:48,919
vulnerability alerts.

125
00:09:49,099 --> 00:09:53,019
If you notice here, starting
from infrastructure level to code

126
00:09:53,039 --> 00:09:58,849
level, Our code, our application
is secured in all the levels.

127
00:09:59,409 --> 00:10:05,419
So this shows the 100 percent
of secured applications.

128
00:10:05,419 --> 00:10:14,489
We can also leverage AOPS for proactive
threat detection and self healing process.

129
00:10:15,099 --> 00:10:19,919
One more last thing is
zero trust security model.

130
00:10:20,689 --> 00:10:25,399
it is a principle to follow,
never trust, but always verify.

131
00:10:26,009 --> 00:10:32,219
One example is to apply it
for granular access control.

132
00:10:32,719 --> 00:10:38,839
Here is the a hundred percentage secure
protect, secure protected product

133
00:10:39,019 --> 00:10:42,749
introduced to buy multi-level of security.

134
00:10:42,839 --> 00:10:46,584
You can see, the secure product
within the multi-layers of.

135
00:10:47,489 --> 00:10:48,739
multilayers of security

136
00:10:49,239 --> 00:10:49,789
conclusion.

137
00:10:50,349 --> 00:10:55,489
So securing the Kubernetes is
not one size fits all solution.

138
00:10:56,359 --> 00:11:02,559
I'm going to repeat, securing Kubernetes
is not a one size fits all solution.

139
00:11:03,349 --> 00:11:09,219
It requires a multi tiered approach
that addresses security at every level.

140
00:11:10,049 --> 00:11:12,689
from infrastructure to code.

141
00:11:13,189 --> 00:11:15,739
With that, I complete my presentation.

142
00:11:16,359 --> 00:11:23,189
Once again, thank you all for listening
and let's maintain our application safe.

143
00:11:23,689 --> 00:11:24,219
Thank you.

