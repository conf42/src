1
00:00:00,080 --> 00:00:00,899
Hey everyone!

2
00:00:01,350 --> 00:00:03,900
Welcome to Conf42, the JavaScript version.

3
00:00:04,210 --> 00:00:07,880
I'm Gil and today we're going
to talk about Playwright.

4
00:00:08,189 --> 00:00:10,840
It's called Playwright in an
hour, hopefully less than an hour.

5
00:00:10,880 --> 00:00:13,019
It's an introduction of Playwright.

6
00:00:13,190 --> 00:00:17,370
If you don't know anything about
web automation, cool I hope you get

7
00:00:17,370 --> 00:00:19,539
impressed by what Playwright can do.

8
00:00:20,129 --> 00:00:24,959
If you have experience with Selenium or
Cypress or something like that's cool.

9
00:00:25,289 --> 00:00:28,940
And I'll talk about, my opinion
about, what you should do if you

10
00:00:28,940 --> 00:00:32,070
do have experience and you have
investment in, Cypress or Selenium

11
00:00:32,070 --> 00:00:34,019
or any other framework as well.

12
00:00:34,100 --> 00:00:39,129
Learn what it can do and then
you can decide whether it can fit

13
00:00:39,150 --> 00:00:40,850
into what you're doing or not.

14
00:00:41,140 --> 00:00:46,569
I'm Gil, I'm a trainer and a consultant
and I work with developers and testers

15
00:00:47,079 --> 00:00:49,349
who want to make software better.

16
00:00:49,939 --> 00:00:51,439
I'm the author of two books.

17
00:00:51,509 --> 00:00:55,959
This kind of thing, playwright,
is something that is usually more

18
00:00:55,959 --> 00:00:58,549
connected with QA or testers.

19
00:00:58,549 --> 00:01:03,649
We think about is anything that's
automating the web as something that

20
00:01:03,719 --> 00:01:08,019
automating the front end and we don't
care about what is going on the back end.

21
00:01:08,389 --> 00:01:09,399
We'll talk about that too.

22
00:01:09,989 --> 00:01:14,242
but I find it also as a tool
to help with developers.

23
00:01:14,242 --> 00:01:16,715
they can not only write unit tests.

24
00:01:17,115 --> 00:01:20,455
and test their own either components
or backend, whatever they're

25
00:01:20,455 --> 00:01:26,035
testing, but also have some kind of
mechanism to, do some end to end test

26
00:01:26,135 --> 00:01:27,935
and play right, fits right there.

27
00:01:28,015 --> 00:01:31,615
Apart from, doing some conferences
like I do here, I also have a

28
00:01:31,615 --> 00:01:34,105
blog, a website, testingguild.

29
00:01:34,105 --> 00:01:40,290
com, and I post, videos on YouTube, on
all kinds of things relating to testing.

30
00:01:40,750 --> 00:01:41,930
Testing and automation.

31
00:01:42,610 --> 00:01:43,810
So go check that out.

32
00:01:43,950 --> 00:01:47,880
So let's talk about a bit of history
of where we are and how we got here.

33
00:01:47,930 --> 00:01:51,320
Playwright is a test framework, really.

34
00:01:51,730 --> 00:01:56,900
It started out as an automation
tool, something as a project,

35
00:01:56,900 --> 00:02:04,545
internal project in Google that
became Puppeteer, but it got stalled.

36
00:02:04,545 --> 00:02:07,331
And then, The developers got stolen.

37
00:02:07,331 --> 00:02:12,401
Microsoft decided to, do something
with the knowledge that Puppeteer

38
00:02:12,401 --> 00:02:15,291
has behind it, which is a bad
automation of the browser.

39
00:02:15,801 --> 00:02:18,891
they decided to build a whole
test framework, for the web.

40
00:02:19,351 --> 00:02:23,091
so they got the knowledge, they got
the people from Google, and they

41
00:02:23,091 --> 00:02:24,826
created Playwright, called Playwright.

42
00:02:25,266 --> 00:02:26,556
Launched in 2020.

43
00:02:26,676 --> 00:02:30,306
If you think about it, Selenium,
Cypress are not full testing frameworks.

44
00:02:30,776 --> 00:02:32,716
So what does make a test framework?

45
00:02:32,976 --> 00:02:37,626
test framework, if you worked
with Jasmine or Jest, you have

46
00:02:37,636 --> 00:02:39,346
something that identifies tests.

47
00:02:39,451 --> 00:02:42,911
when it says, test in the file or
specs or something like that, and

48
00:02:42,931 --> 00:02:45,171
you have describe and you have it.

49
00:02:45,231 --> 00:02:48,571
So these are the keywords
that identify tests.

50
00:02:49,461 --> 00:02:51,641
Apart from that, you have, registration.

51
00:02:51,641 --> 00:02:55,431
Registration is like the fancy name
for when I asked run all the tests

52
00:02:55,431 --> 00:02:58,781
in this module, the test framework
looks at the module, identifies all

53
00:02:58,791 --> 00:03:00,351
the testers, I need to run those.

54
00:03:00,421 --> 00:03:05,011
And if I do run all this testing
module, except the one that starts

55
00:03:05,011 --> 00:03:06,781
with A, that's the registration part.

56
00:03:06,811 --> 00:03:09,511
And again, Jasmine, Jest, they do that.

57
00:03:09,521 --> 00:03:14,716
But if you look at Selenium, for
example, it lives inside Test frameworks.

58
00:03:14,796 --> 00:03:18,036
It doesn't do that just does
the automation apart from that.

59
00:03:18,066 --> 00:03:21,606
Obviously it runs the tests It
reports the results obviously

60
00:03:21,606 --> 00:03:23,886
and have a bunch of asserts.

61
00:03:24,206 --> 00:03:28,036
We'll talk about that as well cypress
has them has those if we worked

62
00:03:28,036 --> 00:03:32,326
with the unit test frameworks like
for react or angular you know about

63
00:03:32,336 --> 00:03:38,896
jsdom which is a part of an engine
that does identification and expects.

64
00:03:38,906 --> 00:03:40,246
So Cypress has those as well.

65
00:03:40,266 --> 00:03:41,266
Playwright has all of them.

66
00:03:42,006 --> 00:03:45,736
So it has a bit more, but
it's a full test framework.

67
00:03:46,276 --> 00:03:48,506
Playwright comes with different flavors.

68
00:03:48,546 --> 00:03:54,106
So I'm going to show the JavaScript
version today, where it started,

69
00:03:54,406 --> 00:04:01,466
but apart from that, it comes
in Java and C sharp and Python.

70
00:04:01,916 --> 00:04:07,536
The main languages that you work with day
to day, Playwright is there to help you.

71
00:04:08,136 --> 00:04:09,316
So how do you work?

72
00:04:09,326 --> 00:04:11,296
You install it through NPM.

73
00:04:11,546 --> 00:04:16,546
It's actually a two step install because
Selenium today, but unlike Selenium a few

74
00:04:16,546 --> 00:04:19,951
years ago, it updates the driver's code.

75
00:04:20,381 --> 00:04:21,071
automatically.

76
00:04:21,461 --> 00:04:25,761
So you first need to install the
pendency and then you have to run

77
00:04:26,211 --> 00:04:32,021
the playwright for the first time to
download the drivers to run the thing.

78
00:04:32,021 --> 00:04:33,531
But then you're all set.

79
00:04:34,491 --> 00:04:39,791
What I'll also show you today is also
working in VS Code and that means I

80
00:04:39,801 --> 00:04:46,596
also work with the extension and the
extension has helped me do Things that

81
00:04:46,626 --> 00:04:49,646
usually I would have to do from the
command line, which I still can do.

82
00:04:49,736 --> 00:04:51,076
So how does it work?

83
00:04:51,146 --> 00:04:54,886
Basically, what you have is,
you have a server which produces

84
00:04:54,926 --> 00:04:59,156
some kind of HTML and JavaScript,
and it runs in the browser.

85
00:04:59,216 --> 00:05:01,026
So far, welcome to the internet.

86
00:05:01,056 --> 00:05:01,906
You know how it works.

87
00:05:02,406 --> 00:05:05,256
If you want to automate that,
then you have to have some kind

88
00:05:05,256 --> 00:05:09,636
of a test framework, a runner, a
playwright, which runs a driver.

89
00:05:09,726 --> 00:05:16,116
This driver connects to the browser
and can, Knows what the HTML, DOM is

90
00:05:16,146 --> 00:05:21,966
so it can query it and find things on
it and run, JavaScript, scripts on it.

91
00:05:22,326 --> 00:05:23,216
That's basically it.

92
00:05:23,266 --> 00:05:26,366
That's what this web
automation does anywhere.

93
00:05:26,446 --> 00:05:27,716
Playwright does it as well.

94
00:05:27,796 --> 00:05:31,486
So apart from that, it
also works cross browser.

95
00:05:31,506 --> 00:05:33,896
So it supports the major
browsers out there.

96
00:05:34,546 --> 00:05:38,771
I'm going to share with you today
with Chrome, Windows, Slash edge,

97
00:05:39,521 --> 00:05:43,511
which is chromium, and it also works
with Firefox and Safari as well.

98
00:05:43,571 --> 00:05:48,431
It has some mobile emulation
features that you can specify like

99
00:05:48,761 --> 00:05:50,711
the viewports and geolocation.

100
00:05:50,711 --> 00:05:53,961
I'm not going to show you
today, but it's a bit of a the

101
00:05:53,961 --> 00:05:56,131
thinking behind playwright about.

102
00:05:56,521 --> 00:06:00,191
Not just having a test framework,
but like something that it's

103
00:06:00,211 --> 00:06:01,591
more of an end to end framework.

104
00:06:01,611 --> 00:06:02,731
We'll talk about that as well.

105
00:06:02,751 --> 00:06:08,961
Basically what we're going to write in
the test is find what we call locators,

106
00:06:09,161 --> 00:06:11,311
things on the screen, and automate them.

107
00:06:11,451 --> 00:06:14,991
One thing to already mention,
that's true not just for Playwright,

108
00:06:15,031 --> 00:06:16,851
but for other frameworks as well.

109
00:06:17,211 --> 00:06:21,841
When we are automating the browsers,
we're running on two different processes.

110
00:06:22,531 --> 00:06:27,111
And that means we are sending
messages from the Test framework

111
00:06:27,131 --> 00:06:29,591
to the browser, click this button.

112
00:06:29,901 --> 00:06:31,231
So it's not a synchronous command.

113
00:06:31,291 --> 00:06:35,441
Things will happen and then sometime
in the future we'll get response.

114
00:06:35,461 --> 00:06:36,541
Yes, it got clicked.

115
00:06:36,541 --> 00:06:42,801
This asynchronicity is baked into
playwright and we'll see that

116
00:06:43,031 --> 00:06:46,681
immediately, but we need to think about
it and understand what does that mean.

117
00:06:46,821 --> 00:06:50,881
We can do something about the browser,
but what happens on the backend

118
00:06:50,961 --> 00:06:53,576
is completely Out of our control.

119
00:06:53,666 --> 00:06:54,816
Okay, so let's start.

120
00:06:54,906 --> 00:06:57,096
I'm going to switch to VS Code.

121
00:06:57,356 --> 00:07:02,346
I'm running a local, as you can see,
a local application that I wrote.

122
00:07:02,346 --> 00:07:05,346
It is a registration application,
not a very smart one.

123
00:07:05,346 --> 00:07:08,886
It loads up like this with the
first name, last name and email.

124
00:07:09,246 --> 00:07:12,676
Checkbox for I want to get promotions too.

125
00:07:12,976 --> 00:07:15,856
Unchecked for I have read the
whole terms sheet and agree.

126
00:07:15,956 --> 00:07:23,771
Now, I'm if I have to check the term box
in order to make this enabled, if I try

127
00:07:23,771 --> 00:07:29,201
to register with one of the boxes empty
or with an invalid email, I'll get an

128
00:07:29,221 --> 00:07:32,431
error here, which was not the beginning.

129
00:07:32,921 --> 00:07:37,201
And if I type everything correctly,

130
00:07:37,701 --> 00:07:40,206
everybody loves live coding.

131
00:07:40,366 --> 00:07:45,156
So if I do that and press register,
what happens that you don't see it

132
00:07:45,156 --> 00:07:48,946
here, but it redirects to another page
tells me, thank you, Gil, first name.

133
00:07:49,376 --> 00:07:53,976
And it also stores these details
in a JSON database locally.

134
00:07:54,556 --> 00:07:55,136
That's what it does.

135
00:07:55,446 --> 00:07:57,106
So we want to automate that.

136
00:07:57,696 --> 00:08:03,826
So before I jump here and show
you the tests, I'm going to jump

137
00:08:03,886 --> 00:08:06,946
into the configuration file.

138
00:08:07,936 --> 00:08:11,366
you get a play rank, play right
config, file, which you can

139
00:08:11,536 --> 00:08:13,186
define all the defaults there.

140
00:08:14,046 --> 00:08:19,276
I'm not going to go through everything,
but what is interesting is the test

141
00:08:19,276 --> 00:08:20,936
deer, where it can find the tests.

142
00:08:21,486 --> 00:08:24,436
It looks for them, which you
can put separately from the

143
00:08:24,776 --> 00:08:26,976
unit test that you're running or
other tests that you're running.

144
00:08:27,286 --> 00:08:32,444
The base URL, which is currently a
local host with port 3000, which is,

145
00:08:32,494 --> 00:08:34,484
will come in very handy in a minute.

146
00:08:34,984 --> 00:08:39,114
it tells other projects you'll
have every browser that you

147
00:08:39,114 --> 00:08:40,494
want to run each test with.

148
00:08:40,544 --> 00:08:44,954
so I have Chromium on and I,
commented out, Chrome, Safari,

149
00:08:44,994 --> 00:08:47,299
Edge, and the branded browsers.

150
00:08:47,689 --> 00:08:53,719
so when I run it once, but it can
run, multiple times and web server,

151
00:08:53,739 --> 00:08:55,409
which is something interesting.

152
00:08:55,499 --> 00:09:00,389
A very cool feature I think is that, if
you can't connect to a remote, server

153
00:09:00,419 --> 00:09:06,429
that's running, you're serving your web
pages, You can run it locally or another

154
00:09:06,589 --> 00:09:11,889
web server, and it does this that if
it finds it where you look for it, it

155
00:09:11,889 --> 00:09:13,649
will run against the remote server.

156
00:09:13,769 --> 00:09:17,219
I will run it locally, of course, but
if it doesn't, it can fall back to a

157
00:09:17,219 --> 00:09:22,229
local server, start its own server,
run the test, and then complete them

158
00:09:22,259 --> 00:09:23,989
and shut it down, which is very cool.

159
00:09:24,489 --> 00:09:27,849
I showed you the base URL
because I'm going to use it in

160
00:09:27,859 --> 00:09:30,614
my Test so I have two tests here.

161
00:09:31,154 --> 00:09:35,974
you can see, I'm test here is not coming
from anywhere else, but play right.

162
00:09:35,984 --> 00:09:38,254
It looks like jest or something like that.

163
00:09:38,734 --> 00:09:39,274
but it's not.

164
00:09:39,814 --> 00:09:40,494
So it's a test.

165
00:09:40,494 --> 00:09:43,804
The first test is, make sure that
everything loads up correctly.

166
00:09:44,064 --> 00:09:46,694
You can see that it has a test name.

167
00:09:47,194 --> 00:09:50,114
Something very weird
here injecting a page.

168
00:09:50,714 --> 00:09:52,714
object, which comes
from Playwright as well.

169
00:09:52,904 --> 00:09:54,074
Now we start working with the page.

170
00:09:54,094 --> 00:09:56,414
The page is basically the main
object that we're working with.

171
00:09:56,814 --> 00:10:01,294
we pay, do page go to, to navigate,
and you see I'm using slash because

172
00:10:01,314 --> 00:10:03,364
I don't need to specify the base URL.

173
00:10:03,384 --> 00:10:05,334
It's in the config, so that's very cool.

174
00:10:05,334 --> 00:10:07,624
It makes a lot, the test
a lot more readable.

175
00:10:07,624 --> 00:10:11,464
I don't need to return
everything with, with every test.

176
00:10:12,304 --> 00:10:18,809
So I navigate to the page, find things,
I am finding the welcome text here.

177
00:10:19,279 --> 00:10:21,249
this is, let's go back.

178
00:10:22,119 --> 00:10:29,679
This is the welcome text and
the checkboxes and the buttons.

179
00:10:30,179 --> 00:10:32,669
And we'll talk about GetByText
and GetByRole in a minute.

180
00:10:33,029 --> 00:10:37,609
And I'm expecting the title to be
visible, promotions to be checked

181
00:10:37,639 --> 00:10:38,999
and the button to be disabled.

182
00:10:39,119 --> 00:10:41,399
If you work with Cypress,
this looks very interesting.

183
00:10:41,669 --> 00:10:43,229
Similar to what we have here.

184
00:10:43,379 --> 00:10:47,749
Same with Js O, awaits because
everything's going to be

185
00:10:47,959 --> 00:10:49,899
as synchronous, by default.

186
00:10:49,899 --> 00:10:50,919
Just works like that.

187
00:10:50,979 --> 00:10:54,189
For the next text, I have
the registration process.

188
00:10:54,189 --> 00:10:59,399
I go to the pay CRL, find
the things, the checkbox, the

189
00:10:59,399 --> 00:11:01,949
buttons, text boxes, and so on.

190
00:11:02,219 --> 00:11:03,929
Check the fo checkbox.

191
00:11:03,959 --> 00:11:09,779
'cause I don't want, I want to
enable the button, fill in the data.

192
00:11:10,604 --> 00:11:14,394
Click the button and you can see that
when I click the button, remember

193
00:11:14,454 --> 00:11:16,324
it, never gets to another page.

194
00:11:17,084 --> 00:11:22,124
the page now at this line points to
the next page to the current page.

195
00:11:22,154 --> 00:11:24,634
So there's no like interim thing.

196
00:11:24,714 --> 00:11:27,534
So the page will always
point at the current page.

197
00:11:27,894 --> 00:11:30,284
I need to remember that as a doing thing.

198
00:11:30,284 --> 00:11:32,794
and expect the thank you
message to be visible.

199
00:11:32,874 --> 00:11:36,289
If you worked with any automation
framework before, this looks pretty good.

200
00:11:36,769 --> 00:11:37,909
Very similar.

201
00:11:38,509 --> 00:11:39,889
let me run this for you.

202
00:11:40,389 --> 00:11:43,119
First page, for example, I'm
using the extension, this code

203
00:11:43,119 --> 00:11:47,039
extension, it translates this into
a command line, it runs it, and

204
00:11:47,049 --> 00:11:49,839
you can see things are not running.

205
00:11:49,919 --> 00:11:54,939
And the reason that you don't see
things running is because by default,

206
00:11:55,099 --> 00:11:56,879
Playwright runs in headless mode.

207
00:11:57,339 --> 00:12:01,249
And that means it doesn't open a
browser, which is, talk about that too.

208
00:12:01,714 --> 00:12:02,554
It's a lot faster.

209
00:12:02,634 --> 00:12:02,994
Okay.

210
00:12:02,994 --> 00:12:03,884
How can I run it?

211
00:12:03,884 --> 00:12:05,564
I run it through the extension.

212
00:12:05,634 --> 00:12:10,964
I can run it from the command line,
npx playwright test to run the tests.

213
00:12:11,134 --> 00:12:14,174
I can configure it with
the configuration file.

214
00:12:14,504 --> 00:12:20,214
I can debug it, put a break point
and, right click debug to debug

215
00:12:20,604 --> 00:12:22,684
it as debugging everything else.

216
00:12:23,344 --> 00:12:24,624
let me talk about the local.

217
00:12:25,394 --> 00:12:26,794
server, which is cool.

218
00:12:26,964 --> 00:12:28,284
How does it find things?

219
00:12:28,284 --> 00:12:31,434
So we already saw the get
by role and stuff like that.

220
00:12:31,464 --> 00:12:34,284
I want to show you, these are
the tests you saw that I'm using

221
00:12:34,284 --> 00:12:36,614
get by text and get by role.

222
00:12:36,674 --> 00:12:40,124
And there are different
ways to find locators.

223
00:12:40,184 --> 00:12:42,704
I'm going to switch to my Browser.

224
00:12:42,854 --> 00:12:45,794
And these are the document.

225
00:12:45,794 --> 00:12:50,624
This is the documentation of
playwright, from the internet.

226
00:12:50,744 --> 00:12:53,379
And this is the thing, but locator,
you can see different ways to find

227
00:12:53,379 --> 00:12:56,550
locators now get by role is the.

228
00:12:57,374 --> 00:12:59,174
preferred way of finding things.

229
00:12:59,674 --> 00:13:05,674
other, we can find text by get by text
or label by label, like placeholder for

230
00:13:05,804 --> 00:13:08,694
text boxes, alt text for images and so on.

231
00:13:08,694 --> 00:13:13,084
Test ID, if you use test IDs, data
test IDs, it will find it for you.

232
00:13:13,634 --> 00:13:17,184
But the preferred way or
recommended way is get by row.

233
00:13:17,334 --> 00:13:17,914
Why is it?

234
00:13:17,984 --> 00:13:18,874
first, what is it?

235
00:13:19,264 --> 00:13:20,584
Imagine that we have a button, right?

236
00:13:20,774 --> 00:13:21,944
The button that we have now.

237
00:13:22,324 --> 00:13:24,124
This can be implemented in different ways.

238
00:13:24,124 --> 00:13:25,534
It can be like an HTML button.

239
00:13:25,594 --> 00:13:29,634
Or it could be an image.

240
00:13:29,974 --> 00:13:32,604
It is like replaced when you click it.

241
00:13:33,184 --> 00:13:33,904
Or different ways.

242
00:13:33,904 --> 00:13:39,224
What I'm using in my application
is a material UI, so it's a

243
00:13:39,224 --> 00:13:42,484
component of a button, which has
like a border and stuff like that.

244
00:13:42,564 --> 00:13:44,264
It has a lot of things in it.

245
00:13:44,404 --> 00:13:45,754
So what specifies a button?

246
00:13:45,774 --> 00:13:51,514
the idea is that when the, we were trying
to write a test as if the user was running

247
00:13:51,514 --> 00:13:56,444
them, and the user can identify buttons
regardless of how they are implemented.

248
00:13:56,784 --> 00:14:00,894
getByRole means that find something
that has a role of a button, which can

249
00:14:00,894 --> 00:14:05,564
be like a button or something with a
role of a button, which, today in most

250
00:14:05,564 --> 00:14:11,664
frameworks that you work with, like react
or view will create this code for you.

251
00:14:12,254 --> 00:14:15,794
So you're looking for the roles as
if the user were looking for that.

252
00:14:15,794 --> 00:14:20,584
And then you will look, start looking
for, things that, Even if they're not

253
00:14:20,594 --> 00:14:22,634
implemented as buttons, they will be.

254
00:14:23,134 --> 00:14:26,334
test IDs, for example, are not
something that the user sees.

255
00:14:26,814 --> 00:14:29,844
These are things that are planted
in the code by the developers,

256
00:14:30,234 --> 00:14:34,544
and they can break, and they will
not, probably will not change,

257
00:14:34,544 --> 00:14:38,154
and there's a problem with dynamic
elements, so it's still recommended

258
00:14:38,154 --> 00:14:40,414
to work with what the user sees.

259
00:14:41,344 --> 00:14:43,194
You can also scroll down.

260
00:14:44,064 --> 00:14:48,264
So if you're using CSS or XPath, you
can still use those with the page.

261
00:14:48,274 --> 00:14:49,954
locator method.

262
00:14:50,804 --> 00:14:53,079
but again, apart from being
pretty straightforward.

263
00:14:53,589 --> 00:14:56,839
Third and fourth languages,
that you need to know after

264
00:14:57,069 --> 00:14:58,609
regular expressions, of course.

265
00:14:59,069 --> 00:15:01,329
These are hard to
maintain or hard to read.

266
00:15:01,749 --> 00:15:04,809
And, while they are supported
and sometimes you will need

267
00:15:04,809 --> 00:15:08,589
to use them, you probably want
to use getByRule or getByText.

268
00:15:08,629 --> 00:15:10,579
So that's about locators.

269
00:15:10,709 --> 00:15:14,819
As we said, Playwright comes with a
bunch of expects as well or assertions.

270
00:15:14,989 --> 00:15:16,029
Okay, what's next?

271
00:15:16,319 --> 00:15:17,019
Assertions.

272
00:15:17,439 --> 00:15:19,749
we talked about, the
assertions that we have.

273
00:15:19,829 --> 00:15:22,829
If you're familiar with JSDOM
and its assertions or Cypress,

274
00:15:22,829 --> 00:15:24,489
it has a lot of those as well.

275
00:15:24,529 --> 00:15:29,409
You're probably familiar with,
expect something to be something.

276
00:15:29,739 --> 00:15:34,199
these are, The just things, for
playwright, it comes with expect

277
00:15:34,229 --> 00:15:38,219
to have text and all these things
here to be empty, to be editable,

278
00:15:38,219 --> 00:15:39,629
to be disabled, to be enabled.

279
00:15:40,089 --> 00:15:44,089
You can have to be
visible and to be hidden.

280
00:15:44,229 --> 00:15:44,679
Makes sense.

281
00:15:44,819 --> 00:15:47,709
But you can also have a
way to expect something.

282
00:15:48,329 --> 00:15:52,579
dot, not dot to be hidden, which
is completely like to be visible.

283
00:15:53,029 --> 00:15:57,129
And personally, I don't like
this redundancy, but it is there.

284
00:15:57,189 --> 00:16:01,229
So you can use not for, boolean things.

285
00:16:01,319 --> 00:16:05,889
If you used a locator to On multiple
objects, it will find you those

286
00:16:05,889 --> 00:16:10,179
and then you can expect put in a
certain the one that you're looking

287
00:16:10,179 --> 00:16:12,719
for, or all of them, and so on.

288
00:16:12,739 --> 00:16:16,699
That's basically it about
locators and expects.

289
00:16:16,709 --> 00:16:18,759
So we talked about locators and expects.

290
00:16:18,799 --> 00:16:21,179
We saw that the tests
were pretty readable.

291
00:16:21,229 --> 00:16:22,219
let's talk about what's cool.

292
00:16:22,219 --> 00:16:26,209
So one thing we already seen,
running, with the browser hidden

293
00:16:26,219 --> 00:16:27,729
by default makes things faster.

294
00:16:27,729 --> 00:16:31,629
And I think this kind of speaks
to the, Sort of philosophy of

295
00:16:31,689 --> 00:16:34,769
what's behind playwright and
quick feedback is one of those.

296
00:16:34,939 --> 00:16:40,529
The idea is that we want to encourage
the user, the writer, us, to run the

297
00:16:40,529 --> 00:16:46,319
test as much as possible and I think
from my experience you can do that as

298
00:16:46,319 --> 00:16:51,459
long as you keep your test simple You
can work without seeing what you're doing

299
00:16:51,949 --> 00:16:57,899
which is like a nice achievement for
something that is a visual test framework.

300
00:16:58,049 --> 00:17:01,879
The next thing is something that
if you're coming from Selenium,

301
00:17:01,889 --> 00:17:05,909
you might be aware slash afraid
of, which is called stale elements.

302
00:17:06,169 --> 00:17:11,289
So in Selenium, if you find a
locator or an element, you hold it

303
00:17:11,369 --> 00:17:13,669
in a variable and you can use it.

304
00:17:13,974 --> 00:17:19,514
Of course, but if the DOM changes, what
you're holding is something that is stale.

305
00:17:19,514 --> 00:17:20,684
It no longer references.

306
00:17:20,684 --> 00:17:25,204
If you try to do something with it,
click or query it, it will break.

307
00:17:25,744 --> 00:17:26,384
That will break.

308
00:17:26,444 --> 00:17:29,214
Playwright takes another
different view of that.

309
00:17:29,224 --> 00:17:30,914
So it looks in my code.

310
00:17:30,914 --> 00:17:35,179
Remember, I put everything here to
find the locators, and then I use it.

311
00:17:35,179 --> 00:17:35,689
them.

312
00:17:35,929 --> 00:17:41,739
And then what happens is the
navigation and then page get by text,

313
00:17:41,739 --> 00:17:44,449
finding the message and doing that.

314
00:17:44,479 --> 00:17:48,129
So this is written in
a way that makes sense.

315
00:17:48,179 --> 00:17:55,249
I go to a page, find everything on it, do
stuff, navigate, find things on a page,

316
00:17:55,679 --> 00:17:57,609
the new one, and do something with it.

317
00:17:58,109 --> 00:18:00,089
But look at the magic.

318
00:18:00,149 --> 00:18:01,799
I can pass this line.

319
00:18:02,299 --> 00:18:06,429
Let's first run this to
see that it works as it is.

320
00:18:07,284 --> 00:18:11,064
So there are no see I don't
have anything in my sleeves.

321
00:18:11,444 --> 00:18:13,884
So this runs Excellent.

322
00:18:13,894 --> 00:18:14,374
It works.

323
00:18:14,824 --> 00:18:20,914
I can take this line here
and just Move it up here.

324
00:18:21,114 --> 00:18:26,444
Okay, I haven't done anything but This
looks weird right because it actually

325
00:18:26,534 --> 00:18:30,064
looks for something that is not there
on the first page, but if I run it

326
00:18:30,564 --> 00:18:33,894
You'll see that it actually
works How does it work?

327
00:18:34,084 --> 00:18:37,939
as opposed to holding something in
my hand when I do get something by

328
00:18:37,949 --> 00:18:42,359
role or get by text when looking for
a locator, what happens is that it

329
00:18:42,359 --> 00:18:44,189
doesn't actually look for the locator.

330
00:18:44,929 --> 00:18:48,849
Whenever I'm doing something with
a locator, it will recalculate it.

331
00:18:48,849 --> 00:18:52,609
So what happens when it gets here,
And it says, Oh, I need to do an

332
00:18:52,609 --> 00:18:53,999
expect with the thank you message.

333
00:18:54,279 --> 00:18:56,139
I need to find it first
and see where it is now.

334
00:18:56,219 --> 00:19:00,209
And this is why it works because
these just put a like a reminder

335
00:19:00,329 --> 00:19:04,449
when something look out for this,
somebody will look for it later.

336
00:19:04,819 --> 00:19:10,909
And when you actually use it in
one line, it will actually do that.

337
00:19:11,509 --> 00:19:16,469
This gives us something of an
advantage in writing things.

338
00:19:16,649 --> 00:19:19,069
But for now, I'll just get it back here.

339
00:19:19,069 --> 00:19:20,669
Just to make sense.

340
00:19:20,939 --> 00:19:26,689
So locators are always calculated
at the point where they are used.

341
00:19:26,759 --> 00:19:28,809
Now, remember asynchronicity?

342
00:19:28,989 --> 00:19:32,009
When I'm pressing the button, I'm
not actually pressing the button, I'm

343
00:19:32,249 --> 00:19:34,289
passing a message to click the button.

344
00:19:34,399 --> 00:19:38,859
So what happens is that it will take
time for the button to click, change

345
00:19:38,859 --> 00:19:41,409
how it looks, go from enable to disable.

346
00:19:41,829 --> 00:19:42,859
Lots of stuff happening.

347
00:19:43,029 --> 00:19:44,769
Like I said, until things happen.

348
00:19:44,799 --> 00:19:46,769
Now, what will happen if
the button is not there?

349
00:19:46,799 --> 00:19:51,849
The idea Playwright takes is that
it will probably be there in by in a

350
00:19:51,849 --> 00:19:55,669
few milliseconds or seconds Whatever
you're doing is really timeout based.

351
00:19:56,029 --> 00:20:00,059
So let's look for example Remember
when I'm opening the page, I

352
00:20:00,059 --> 00:20:01,449
want the title to be visible.

353
00:20:01,949 --> 00:20:06,294
Okay, let's inject some kind
of an error in the test.

354
00:20:07,204 --> 00:20:10,084
Let's do put to be hidden,
which of course will fail.

355
00:20:10,644 --> 00:20:12,644
And let's run it again
and see what happens.

356
00:20:13,634 --> 00:20:17,864
Now you see, as I'm speaking, that it's
waiting for it to be hidden, and it's

357
00:20:17,884 --> 00:20:19,734
waiting for a time out of five seconds.

358
00:20:20,234 --> 00:20:23,374
And it tells me, I waited
five, 5, 000 seconds for that.

359
00:20:23,794 --> 00:20:26,904
I expect it to be hidden, but
the final thing after five

360
00:20:26,904 --> 00:20:28,734
seconds was it was still visible.

361
00:20:29,254 --> 00:20:34,254
Now, that means that a lot of the
errors that you will see or not,

362
00:20:34,304 --> 00:20:38,304
I expect this and receive this,
which is what we're actually looking

363
00:20:38,304 --> 00:20:41,344
for, but timeout based things.

364
00:20:41,364 --> 00:20:44,174
So you have to get comfortable
with this kind of error.

365
00:20:44,674 --> 00:20:50,524
The cool thing about, the 5,
000 millisecond delay is that it

366
00:20:50,534 --> 00:20:51,884
doesn't just sit there and wait.

367
00:20:51,894 --> 00:20:53,084
It does retries.

368
00:20:53,764 --> 00:20:59,504
Okay, so what we are calling, locators
are really, auto wait locators.

369
00:20:59,504 --> 00:21:03,034
It actually waits for the
locators by retrying and seeing

370
00:21:03,044 --> 00:21:04,674
if the status has changed.

371
00:21:04,804 --> 00:21:08,314
Okay, now remember the error I showed you?

372
00:21:08,864 --> 00:21:10,874
Let's see that again.

373
00:21:11,274 --> 00:21:16,274
If I click here, this is a dynamic error.

374
00:21:16,324 --> 00:21:21,144
It's not there at the beginning, but
because of the way locators work, only

375
00:21:21,144 --> 00:21:24,574
at the point where I actually need
to do something, I can write the test

376
00:21:24,574 --> 00:21:25,824
as if it was there in the beginning.

377
00:21:26,644 --> 00:21:29,634
So let's look at the errors.

378
00:21:29,634 --> 00:21:32,064
And you can see that
it's completely the same.

379
00:21:32,344 --> 00:21:35,894
I have the error messages, even
though they don't appear yet,

380
00:21:36,374 --> 00:21:39,474
on, they appear only after the
click, but I can use them here.

381
00:21:39,664 --> 00:21:41,444
And I expect the error
message to be visible.

382
00:21:41,714 --> 00:21:45,184
And the way it works is after
I fill it up, it disappears.

383
00:21:45,244 --> 00:21:46,694
So I can check that it's hidden.

384
00:21:46,734 --> 00:21:52,279
Dynamic elements, Make sense in the way
you actually use them and write them.

385
00:21:53,089 --> 00:21:56,039
There is something that
you need to remember.

386
00:21:56,059 --> 00:21:57,459
That's not a playwright thing.

387
00:21:57,469 --> 00:21:58,929
It's a every test framework.

388
00:21:59,119 --> 00:22:00,939
Let me get back to here.

389
00:22:01,149 --> 00:22:06,409
So this checkbox enables
and disables the button.

390
00:22:06,909 --> 00:22:07,389
. Okay.

391
00:22:08,379 --> 00:22:11,799
Now actually there, there is code
that actually does this of course,

392
00:22:11,799 --> 00:22:15,559
but, semantically this enables it.

393
00:22:15,769 --> 00:22:16,669
This disables it.

394
00:22:17,149 --> 00:22:22,029
Remember that We don't see that in here.

395
00:22:22,579 --> 00:22:27,919
So I need to remember that when
I do this, the checkbox check in

396
00:22:27,919 --> 00:22:30,979
the checkbox will actually enable
the button so I can click it.

397
00:22:31,219 --> 00:22:34,129
So for me, I wrote it with a comment here.

398
00:22:34,629 --> 00:22:38,809
But if you don't do that, and I'll show
you in a second where you don't do that,

399
00:22:39,579 --> 00:22:45,629
this kind of knowledge gets lost and you
will lose it as you maintain these tests.

400
00:22:45,629 --> 00:22:48,599
If you look at this test, like three
months from now, you won't even

401
00:22:48,599 --> 00:22:52,549
remember that the connection between
the different components and you need

402
00:22:52,549 --> 00:22:56,979
to do something about it, rename stuff
or put and to make you feel better

403
00:22:56,979 --> 00:22:58,119
when you're coming back to the test.

404
00:22:58,504 --> 00:23:04,194
Okay, so that was dynamic stuff
and, let's talk about isolation.

405
00:23:04,224 --> 00:23:07,384
When I'm running the tests,
each test runs in isolation.

406
00:23:07,614 --> 00:23:12,904
It actually opens a browser in
incognito mode, so it doesn't have any

407
00:23:12,964 --> 00:23:16,104
cache, it doesn't have any cookies,
starts from scratch, no history.

408
00:23:16,714 --> 00:23:21,114
And Playwright makes it that
each test runs in isolation.

409
00:23:21,589 --> 00:23:22,179
Which is good.

410
00:23:22,449 --> 00:23:25,689
We want isolation because then
we won't have tests running

411
00:23:26,189 --> 00:23:27,469
one on top of the other.

412
00:23:27,539 --> 00:23:34,419
We do have the ability to run, to open
different pages, different browsers.

413
00:23:34,429 --> 00:23:35,729
So I want to show you this.

414
00:23:35,849 --> 00:23:39,559
Okay, so let's open Visual Studio Code
and you'll see that I have two tests here.

415
00:23:39,599 --> 00:23:43,779
The first one runs opening the
same page in the same browser.

416
00:23:44,009 --> 00:23:48,509
So let me run this and this time
I'm going to go to the extension.

417
00:23:49,234 --> 00:23:51,054
And run it with the browsers.

418
00:23:51,594 --> 00:23:54,364
So I'm going to run this.

419
00:23:54,864 --> 00:23:55,224
Okay.

420
00:23:55,284 --> 00:23:58,054
As I run this, you'll see
that a browser window opens.

421
00:23:58,054 --> 00:23:59,174
It's incognito.

422
00:23:59,594 --> 00:24:03,474
And I have two pages of
the same application.

423
00:24:03,544 --> 00:24:05,794
This is good in the same browser window.

424
00:24:06,294 --> 00:24:08,564
Let me Close that and
see what we have here.

425
00:24:08,774 --> 00:24:11,684
what we have here, instead of the
page, I'm getting something called

426
00:24:11,694 --> 00:24:15,174
a context, browser context, which
is basically a browser window.

427
00:24:15,664 --> 00:24:20,914
and you can see that I'm creating a
new page, like a first page here, and

428
00:24:20,924 --> 00:24:25,074
I navigate, and then with the same
context, I'm creating a second page.

429
00:24:25,294 --> 00:24:25,794
It does the same thing.

430
00:24:25,934 --> 00:24:26,644
to navigate here.

431
00:24:26,644 --> 00:24:29,834
So this is how I open
two tabs inside a page.

432
00:24:29,904 --> 00:24:31,844
Both are isolated from each other.

433
00:24:31,874 --> 00:24:38,284
The second test does open two browser
windows and in each one opens a page.

434
00:24:38,314 --> 00:24:39,444
So I can do that as well.

435
00:24:39,794 --> 00:24:41,934
This is different from
Cypress, for example.

436
00:24:41,934 --> 00:24:45,404
Cypress runs inside the
browser so it cannot navigate

437
00:24:45,914 --> 00:24:48,184
or open pages or open tabs.

438
00:24:48,234 --> 00:24:49,294
Playwright allows you to do that.

439
00:24:49,304 --> 00:24:51,164
It allows you to navigate forward.

440
00:24:51,269 --> 00:24:52,319
backwards and so on.

441
00:24:52,889 --> 00:24:57,999
Okay, so far we talked about the
basic stuff, also some advanced

442
00:24:57,999 --> 00:25:02,529
stuff, but it's very cool because
you can write a lot of tests,

443
00:25:02,979 --> 00:25:05,619
simple tests as you go through that.

444
00:25:05,629 --> 00:25:09,569
But like I said, Playwright sees
itself as more than a web automation

445
00:25:09,599 --> 00:25:14,539
tool and it gives us a few features
to work with that even better.

446
00:25:15,409 --> 00:25:19,899
The first one I'm going to show
you is The code generation.

447
00:25:19,969 --> 00:25:20,929
Let me show you how it works.

448
00:25:20,939 --> 00:25:22,219
So Visual Studio.

449
00:25:22,499 --> 00:25:25,789
So what I'm going to do is run the code
generation tool from the command line.

450
00:25:25,809 --> 00:25:30,109
I can do this also from the extension,
but npx playwright code gen will run it.

451
00:25:30,289 --> 00:25:31,109
How does it look?

452
00:25:31,119 --> 00:25:32,989
So it opens up a browser window.

453
00:25:32,989 --> 00:25:37,019
So I'm going to mine it.

454
00:25:37,619 --> 00:25:38,759
application here.

455
00:25:39,209 --> 00:25:43,239
And let's say I am
running very small test.

456
00:25:43,249 --> 00:25:47,009
So I'm going to click on this, you can
see that it identifies where I'm standing,

457
00:25:47,389 --> 00:25:53,859
put something in the first name, and
then I have a small ruler here with

458
00:25:53,939 --> 00:25:57,169
this one, assert text and assert value.

459
00:25:57,199 --> 00:26:01,859
So let's put an assert
value with Gil in it.

460
00:26:02,539 --> 00:26:03,489
Okay, cool.

461
00:26:03,919 --> 00:26:07,029
Now, Let's look at what it created.

462
00:26:07,329 --> 00:26:08,849
So this is the playwright inspector.

463
00:26:08,849 --> 00:26:12,719
It's another window that
is run by npx playwright.

464
00:26:13,049 --> 00:26:16,229
and it is where the code is
generated for what I did.

465
00:26:16,329 --> 00:26:19,659
Now, remember what I did was
clicking on the text box.

466
00:26:19,739 --> 00:26:24,459
First of all, writing the URL, entering
the URL, clicking the text box and

467
00:26:24,459 --> 00:26:25,949
asserting that it has the value.

468
00:26:26,209 --> 00:26:27,469
So this is what I got.

469
00:26:27,579 --> 00:26:30,409
Now, as you can see, it's not perfect.

470
00:26:30,889 --> 00:26:35,424
First of all, The name it gives it is
quite generic, but he couldn't really

471
00:26:35,424 --> 00:26:41,574
know it writes exactly what I typed,
but it's not like the base URL when

472
00:26:41,574 --> 00:26:43,044
you're just putting the forward slash.

473
00:26:43,864 --> 00:26:50,694
Also, it identified the text box by
using it by placeholder and not get

474
00:26:50,724 --> 00:26:56,974
by role of a text box, and it creates
a lot of repeats of these things.

475
00:26:57,244 --> 00:26:58,639
the test It's okay.

476
00:26:58,789 --> 00:27:00,619
I can copy it into my suite.

477
00:27:00,679 --> 00:27:01,399
It works.

478
00:27:01,529 --> 00:27:02,089
Perfect.

479
00:27:02,099 --> 00:27:06,519
But in terms of maintainability, you'll
create something that you probably

480
00:27:06,519 --> 00:27:08,949
don't want to hold on for a while.

481
00:27:08,959 --> 00:27:14,529
You want to refactor that, put the,
find the text box by get by role, put

482
00:27:14,529 --> 00:27:16,559
it in a variable and reuse it later.

483
00:27:16,709 --> 00:27:17,409
Rename the test.

484
00:27:17,819 --> 00:27:20,799
The code gen tool actually works.

485
00:27:21,029 --> 00:27:22,049
It doesn't work.

486
00:27:22,429 --> 00:27:25,829
In a way that you'll probably
want to keep this tested.

487
00:27:25,839 --> 00:27:30,419
So that means that whenever it creates
something for you, you probably want

488
00:27:30,419 --> 00:27:32,839
to go in and refactor the tests.

489
00:27:33,409 --> 00:27:36,149
It is good for prototyping something.

490
00:27:36,449 --> 00:27:40,349
It is good for finding an elusive
locator that you're looking for,

491
00:27:40,799 --> 00:27:47,479
but I found, but whenever I used it,
it is a shortcut, but I had to go

492
00:27:47,479 --> 00:27:49,069
back and change a lot of the code.

493
00:27:49,289 --> 00:27:50,879
So that's the code gen tool.

494
00:27:50,919 --> 00:27:55,059
it also has a trace view, which
you can debug whatever the whole,

495
00:27:55,059 --> 00:27:57,109
test that went through cool thing.

496
00:27:57,109 --> 00:27:59,709
I'm not going to show you, but
you can look for it as well.

497
00:27:59,719 --> 00:28:01,509
I want to show you about APIs.

498
00:28:01,789 --> 00:28:07,794
And this is another thing that,
like I said, the way The philosophy

499
00:28:08,004 --> 00:28:12,274
behind Playwright, which is, it's
not just web automation, it's

500
00:28:12,274 --> 00:28:14,554
a whole system testing thing.

501
00:28:14,844 --> 00:28:16,724
And that is true.

502
00:28:16,764 --> 00:28:21,374
When you're testing a web frontend,
at some point you'd like to at least

503
00:28:21,554 --> 00:28:23,414
check things that are not on the screen.

504
00:28:23,954 --> 00:28:28,754
if you entered my application saves
data in the database so far apart from

505
00:28:29,024 --> 00:28:33,484
passing the information of the first
name to the second page, you wouldn't

506
00:28:33,484 --> 00:28:37,354
know it, and the test frameworks
cannot check it unless it has a name.

507
00:28:37,654 --> 00:28:41,794
Some kind of API access to
the server, which it does.

508
00:28:42,234 --> 00:28:42,534
I wrote it.

509
00:28:43,124 --> 00:28:49,624
I wrote the server So I could write
some code with the fetch or access

510
00:28:49,624 --> 00:28:54,424
to get to the server and find things
but can do that Also with what gets

511
00:28:54,434 --> 00:28:59,594
provided with playwright because it has
some API support in it, which is cool.

512
00:29:00,094 --> 00:29:01,994
So Let's look at that.

513
00:29:02,064 --> 00:29:08,704
Okay, so let's look at a test as you
can see these things here Are completely

514
00:29:08,764 --> 00:29:11,824
the same as the visible stuff that
we saw until now, it's the whole

515
00:29:11,824 --> 00:29:13,444
registration process, which is okay.

516
00:29:13,724 --> 00:29:18,514
I want to have that, as well, to make it
past the test and, make sure that we're

517
00:29:18,534 --> 00:29:21,144
passing the entire, set of visible steps.

518
00:29:21,194 --> 00:29:24,134
But after that, I want to check
that the data was actually

519
00:29:24,134 --> 00:29:26,014
saved through, in the server.

520
00:29:26,294 --> 00:29:31,754
And for that, I can use, like I said,
Axios or, fetch, but I have request.

521
00:29:31,754 --> 00:29:31,804
Okay.

522
00:29:32,374 --> 00:29:35,484
Request from playwright, which
is a wrapper for that as well.

523
00:29:35,504 --> 00:29:38,044
So it looks like using pages, right?

524
00:29:38,054 --> 00:29:44,084
Request a new context and I can get and
post and delete stuff and I can use.

525
00:29:44,604 --> 00:29:48,544
the relative URL because I'm using the
base URL, so it knows where I'm going.

526
00:29:48,904 --> 00:29:53,904
And after I do that, I get a JSON, and
I can write some code to compare the

527
00:29:53,904 --> 00:29:55,714
JSON that I got with what I expect.

528
00:29:56,064 --> 00:30:00,769
this is the expect from, from Playwright,
but it Again, it's a regular expected

529
00:30:00,769 --> 00:30:04,599
values, so it's not like comparing
something on the browser, and

530
00:30:04,599 --> 00:30:06,189
therefore it doesn't have to be async.

531
00:30:06,219 --> 00:30:07,779
You don't have to wait for the result.

532
00:30:08,269 --> 00:30:08,869
very cool.

533
00:30:08,969 --> 00:30:13,169
This complementary, it completes
the system testing framework.

534
00:30:13,249 --> 00:30:14,749
And the other thing is accessibility.

535
00:30:14,994 --> 00:30:18,734
Now, accessibility is very important,
especially we're talking visual

536
00:30:18,734 --> 00:30:22,424
stuff that we're testing, it's a
pass, it's possible to check for,

537
00:30:22,754 --> 00:30:28,164
whether it's the UI works for, people
with disabilities out of the box.

538
00:30:28,494 --> 00:30:31,324
Playwright doesn't do that, but
it integrates with a library

539
00:30:31,324 --> 00:30:32,904
called X that does that.

540
00:30:33,034 --> 00:30:33,594
let me show you.

541
00:30:34,104 --> 00:30:35,334
Okay, this will fail.

542
00:30:35,334 --> 00:30:36,514
So I put it in skip.

543
00:30:36,814 --> 00:30:37,834
Let me unskip it.

544
00:30:38,334 --> 00:30:42,554
And what I'm doing here is
basically, using, XBuilder from

545
00:30:42,554 --> 00:30:46,084
the XCore dependency, but it has
the integration with Playwright.

546
00:30:46,084 --> 00:30:49,594
And when I do that, I can write this.

547
00:30:50,094 --> 00:30:53,854
New XBuilder, initialize
with a page, analyze.

548
00:30:54,354 --> 00:30:58,344
Now I have, let's uncomment this first.

549
00:30:58,584 --> 00:31:02,904
So what happens is that when we
are doing analyze, it creates, it

550
00:31:02,904 --> 00:31:05,584
returns an error of violations.

551
00:31:06,284 --> 00:31:07,574
So if I run this,

552
00:31:08,074 --> 00:31:11,914
what will happen is that
I actually get an error.

553
00:31:12,154 --> 00:31:15,184
Okay, because it found two violations.

554
00:31:16,084 --> 00:31:17,194
What are the violations?

555
00:31:17,204 --> 00:31:22,244
So I can actually Let's comment that so
it will get to this line, rerun it again.

556
00:31:22,744 --> 00:31:26,954
And you'll see, what I got was,
blah, blah, blah, blah, blah.

557
00:31:27,374 --> 00:31:31,619
element is It has insufficient
color contrast element, must minimum

558
00:31:31,619 --> 00:31:33,219
color contrast ratio threshold.

559
00:31:33,429 --> 00:31:41,039
So it can, it brings you the whole
library of accessibility rules that

560
00:31:41,039 --> 00:31:43,999
you can run on your application,
different pages as part of your

561
00:31:44,019 --> 00:31:45,519
regression test with a couple of lines.

562
00:31:45,619 --> 00:31:46,289
It's very cool.

563
00:31:46,389 --> 00:31:50,729
Now, if you worked with Jest or Jasmine
or worked with other frameworks in other

564
00:31:51,149 --> 00:31:56,509
languages, you probably saw that something
was a bit different here with Playwright.

565
00:31:56,529 --> 00:31:58,969
And we don't have Describe
or something like that.

566
00:31:59,119 --> 00:31:59,949
And that's not true.

567
00:31:59,959 --> 00:32:03,259
We do have, we want to
group tests together.

568
00:32:03,379 --> 00:32:06,629
The default way is like putting
things in a module and that

569
00:32:06,839 --> 00:32:08,279
kind of relate to each other.

570
00:32:08,929 --> 00:32:11,589
And since everything runs in
isolation, you don't need to

571
00:32:11,589 --> 00:32:13,329
share information between tests.

572
00:32:13,459 --> 00:32:16,579
The describe doesn't make
sense, but it is there.

573
00:32:16,899 --> 00:32:17,779
let's look at.

574
00:32:18,404 --> 00:32:19,924
So you can actually write test.

575
00:32:20,164 --> 00:32:26,734
describe, which has a test before each
that runs before each and everything

576
00:32:26,744 --> 00:32:29,894
that you're used to before each,
before all, after each, after all.

577
00:32:30,224 --> 00:32:37,669
You can actually write tests for
And use the variable in context

578
00:32:37,709 --> 00:32:43,419
of the describe section and reuse
them, So that's not going away.

579
00:32:43,479 --> 00:32:44,399
You still have that.

580
00:32:44,719 --> 00:32:48,199
And you can play with
that as much as you want.

581
00:32:48,699 --> 00:32:52,049
Depending on the context of what is
important for you, it will come out

582
00:32:52,049 --> 00:32:56,119
in the report as hierarchical results.

583
00:32:56,169 --> 00:32:57,229
Don't worry about that.

584
00:32:57,769 --> 00:33:02,029
What is interesting in Playwright
and Canon U is the fixtures.

585
00:33:02,059 --> 00:33:07,149
Now, usually fixtures are We're thinking
about in terms of test frameworks

586
00:33:07,149 --> 00:33:08,599
are the before each before also.

587
00:33:08,609 --> 00:33:13,569
We already seen that it's there, but
these are not your ordinary fixtures.

588
00:33:13,639 --> 00:33:19,344
If you're familiar with test frameworks
like PyTest or the fixture that we're

589
00:33:19,344 --> 00:33:25,504
going to show you here comes from, or
in TestNG in Java, you'll know that

590
00:33:25,544 --> 00:33:31,824
apart from class tests like describes,
you'll have something that you want

591
00:33:31,824 --> 00:33:35,064
to share across modules or classes.

592
00:33:35,164 --> 00:33:40,234
The idea is to share a common setup,
not just in a file, across files.

593
00:33:40,699 --> 00:33:41,429
That's the idea.

594
00:33:41,599 --> 00:33:43,739
And what is this thing?

595
00:33:43,739 --> 00:33:46,909
This is code that runs before the
test and after the test, right?

596
00:33:47,009 --> 00:33:50,759
If you go to the documentation,
you'll see that both browser and

597
00:33:50,759 --> 00:33:53,559
context and page are already fixtures.

598
00:33:54,249 --> 00:33:55,679
But you can build your own fixture.

599
00:33:55,819 --> 00:34:00,339
So let's say, I'm going to show
you an example with a page object.

600
00:34:00,389 --> 00:34:02,239
our registration, let's look at here.

601
00:34:02,249 --> 00:34:04,289
This is like how the code works, right?

602
00:34:04,369 --> 00:34:08,489
once you have the common
locators here, you can write the

603
00:34:08,569 --> 00:34:10,039
tests without the common code.

604
00:34:10,209 --> 00:34:10,699
Makes sense.

605
00:34:11,009 --> 00:34:12,399
But it still looks like this.

606
00:34:12,674 --> 00:34:17,574
If you're using a page object model, a
pattern which basically takes all the

607
00:34:17,614 --> 00:34:21,954
interaction with the page, the low level
locator stuff and expects, you put it in a

608
00:34:21,954 --> 00:34:27,154
class and you expose that class and use it
in the test, it will look a bit different.

609
00:34:27,154 --> 00:34:33,434
So I can write this page object, the
register page, it, Gets the page in the

610
00:34:33,434 --> 00:34:39,994
constructor, has initialization and then
type last name, type first name and so on.

611
00:34:40,004 --> 00:34:44,584
It wraps the operations by using
the locators and operating them.

612
00:34:45,124 --> 00:34:49,854
If I do this, and I can do the same with
the thank you page, in order to switch to

613
00:34:49,854 --> 00:34:56,274
the thank you page, I also have a submit
thing which returns a thank you page.

614
00:34:56,774 --> 00:35:01,044
If I do that, my test will look like this.

615
00:35:01,044 --> 00:35:01,114
Thanks.

616
00:35:01,664 --> 00:35:05,494
Okay, creating the registration page,
initialize, check the inbox, type

617
00:35:05,494 --> 00:35:10,034
in first name, last name, email,
submit, get the thank you page, and

618
00:35:10,034 --> 00:35:11,714
thank you page has a verify message.

619
00:35:12,434 --> 00:35:15,224
And that's very cool, that
doesn't have anything to do with

620
00:35:15,374 --> 00:35:20,204
fixtures, just hiding the low level
information in the page object.

621
00:35:20,244 --> 00:35:23,634
But, let's use this page
object in a fixture.

622
00:35:23,824 --> 00:35:25,024
first I have to write a fixture.

623
00:35:25,104 --> 00:35:29,409
this is a fixture, you can
see that I have, a test which

624
00:35:29,419 --> 00:35:31,539
extends the register page.

625
00:35:31,819 --> 00:35:37,069
This is my code I have to write and
within it I have some something weird.

626
00:35:37,079 --> 00:35:44,784
This is Creating the page object and
then writing stuff that will happen as a

627
00:35:44,794 --> 00:35:53,974
common setup and then run the tests for
the page and then run stuff under it.

628
00:35:54,534 --> 00:35:57,474
After that, I'm not using it
right now, but this is the place

629
00:35:57,474 --> 00:35:58,994
to write the common cleanup.

630
00:35:59,574 --> 00:36:01,824
Once I have this, I can write

631
00:36:02,324 --> 00:36:07,504
this, which looks a lot like the test
with playwright that we've seen before.

632
00:36:08,014 --> 00:36:09,784
I'm injecting the register page fixture.

633
00:36:09,964 --> 00:36:13,214
Everything hidden, the
common setup, is out there.

634
00:36:13,654 --> 00:36:16,244
And look what I didn't show you.

635
00:36:16,744 --> 00:36:19,054
In the fixture itself, I have this.

636
00:36:19,554 --> 00:36:21,504
I have this line.

637
00:36:22,004 --> 00:36:26,144
Now, remember, let's say I have all kinds
of tests I want to do with different

638
00:36:26,174 --> 00:36:27,854
inputs in the text boxes and so on.

639
00:36:28,024 --> 00:36:31,694
In all of them, I probably
want to check the term box in

640
00:36:31,724 --> 00:36:33,674
order to enable the button.

641
00:36:34,324 --> 00:36:36,394
So this becomes like a common setup.

642
00:36:36,454 --> 00:36:37,984
It's not just like initializing.

643
00:36:38,484 --> 00:36:40,764
So if I want to do that,
I can do that here.

644
00:36:41,264 --> 00:36:46,604
And now I can have multiple taps
tests on different files that can

645
00:36:46,604 --> 00:36:50,794
use this fixture all starting when
the button is already enabled.

646
00:36:50,854 --> 00:36:51,614
It is very cool.

647
00:36:52,194 --> 00:36:55,494
It can also be a bit confusing because
you can play a lot with fixtures.

648
00:36:55,554 --> 00:36:56,314
They're cool.

649
00:36:56,514 --> 00:36:58,264
Don't get addicted to them.

650
00:36:58,294 --> 00:37:00,104
So is it good?

651
00:37:00,604 --> 00:37:01,384
first of all, it is good.

652
00:37:02,274 --> 00:37:03,354
It's a good framework.

653
00:37:03,434 --> 00:37:09,884
It's the cool kids on the block,
but it is stable and it works.

654
00:37:09,944 --> 00:37:15,174
If you're starting out with web
automation, I would take a hard look

655
00:37:15,204 --> 00:37:18,754
at Playwright and will probably tell
you, you probably want to start.

656
00:37:18,774 --> 00:37:22,409
It has All the features that
you want, it's complete.

657
00:37:22,629 --> 00:37:23,689
it gives you a complete solution.

658
00:37:23,699 --> 00:37:26,559
You don't have to look for anything
else because the APIs are there.

659
00:37:26,909 --> 00:37:27,919
API supported there.

660
00:37:27,969 --> 00:37:28,999
Accessibility is there.

661
00:37:28,999 --> 00:37:31,649
So get a lot in the box, nothing.

662
00:37:32,149 --> 00:37:36,949
If you already have an investment in tests
that you have a whole suite of tests with

663
00:37:36,949 --> 00:37:42,799
Selenium or Cypress or something else, I
would still tell you, to look at the tool.

664
00:37:43,399 --> 00:37:47,539
To see if it works, you can always start
writing the next tests with Playwright.

665
00:37:48,159 --> 00:37:50,519
But, to tell you to switch everything?

666
00:37:50,949 --> 00:37:51,239
No.

667
00:37:52,189 --> 00:37:55,919
Selenium is moving forward,
Cypress is moving forward.

668
00:37:56,369 --> 00:38:01,629
I don't see why you should drop
everything that you're doing, or invested

669
00:38:01,629 --> 00:38:03,629
until now, and change everything.

670
00:38:04,149 --> 00:38:07,989
For the new tool, because tomorrow
there's going to be another new tool.

671
00:38:08,164 --> 00:38:10,324
Which is going to be cool, and
you want to switch for that.

672
00:38:10,824 --> 00:38:14,384
Currently, I don't think that
I would recommend leaving

673
00:38:14,394 --> 00:38:15,524
everything that you have.

674
00:38:15,894 --> 00:38:20,164
I would look at something that is
maybe useful for the next thing

675
00:38:20,164 --> 00:38:21,684
that you're doing, an investor.

676
00:38:21,804 --> 00:38:24,964
The tests are shorter,
they're more concise.

677
00:38:25,184 --> 00:38:27,474
It's up to you to make
them a lot more readable.

678
00:38:27,894 --> 00:38:31,394
If you're using the code generator,
you are responsible to actually making

679
00:38:31,394 --> 00:38:33,874
it readable for you and your users.

680
00:38:34,304 --> 00:38:37,034
future you and the other
people on the team.

681
00:38:37,374 --> 00:38:39,324
it doesn't come out completely like that.

682
00:38:39,764 --> 00:38:43,524
If you are working with page
objects, continue to work with

683
00:38:43,524 --> 00:38:49,304
page objects, fixtures, be careful
with them because it is possible to

684
00:38:49,314 --> 00:38:51,324
overuse them, but they are useful.

685
00:38:51,414 --> 00:38:56,804
The final thing I want to say is that I
also use them TDD test driven development,

686
00:38:57,264 --> 00:38:58,744
but more let's call it test first.

687
00:38:58,744 --> 00:38:59,914
It's not like TDD.

688
00:39:00,004 --> 00:39:06,474
So you, it is possible to write
these tests up front and continue

689
00:39:06,494 --> 00:39:10,324
gradually adding elements to
the screen and operating them.

690
00:39:10,944 --> 00:39:15,944
but it's not like regular TDD, so you
probably, if you're like a TDD fanatic

691
00:39:16,034 --> 00:39:19,994
like me, you probably want to place the
elements of the screen first before you

692
00:39:19,994 --> 00:39:24,554
start doing that, but after that you can
add more steps, and making a test pass.

693
00:39:24,584 --> 00:39:31,739
So it is possible to use it for And that's
what I wanted to share with you today.

694
00:39:31,809 --> 00:39:36,949
If you don't find me on discord or,
the chat, you can find me on the

695
00:39:36,949 --> 00:39:41,889
internets, find me on YouTube with Dustin
Gill, go to the site and, read what

696
00:39:41,889 --> 00:39:44,319
I blog about and have a nice con 42.

697
00:39:44,369 --> 00:39:44,739
Bye bye.

