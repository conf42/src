1
00:00:00,310 --> 00:00:01,000
Everyone.

2
00:00:01,924 --> 00:00:04,171
Welcome to Cog42, my name is Puneet.

3
00:00:04,171 --> 00:00:09,647
I'm Shubham and I'll be presenting my
talk on Knowledge of Syntax, how AI

4
00:00:09,647 --> 00:00:11,247
is changing the code reviewer team.

5
00:00:11,747 --> 00:00:16,707
you know that moment when you submit your
PM, and you just go cross your fingers and

6
00:00:16,707 --> 00:00:25,702
pray that code reviewer is in a very good
mood, and then checks your Go then, but

7
00:00:25,782 --> 00:00:32,482
I've been both side of this core review
as a contributor, you and I was debating

8
00:00:32,522 --> 00:00:38,582
copy back from the maintenance and core
reviews, which is very exhausting for the

9
00:00:38,582 --> 00:00:44,342
maintenance and also as a collaborator,
it's very exhaustive to read so many

10
00:00:44,622 --> 00:00:46,512
requests and so many changes in the code.

11
00:00:47,247 --> 00:00:50,147
It was it is that the project is included.

12
00:00:50,647 --> 00:00:53,477
So how can change this?

13
00:00:54,447 --> 00:00:57,477
That's exactly what I'm
going to explore today.

14
00:00:57,977 --> 00:01:02,397
And this isn't just in checking syntax,
but actually proving how we write and

15
00:01:02,397 --> 00:01:05,465
review the code in any kind of project.

16
00:01:05,465 --> 00:01:09,977
But first of all, let's talk about
why AI code review really matters.

17
00:01:10,477 --> 00:01:13,627
Number one, the problem
conditional code reviews is.

18
00:01:13,977 --> 00:01:15,447
It's like playing Game of Detective.

19
00:01:16,347 --> 00:01:19,667
You scan hundreds of lines,
where you look for hidden bugs,

20
00:01:19,887 --> 00:01:21,917
bad logic, security issues.

21
00:01:21,917 --> 00:01:23,187
It's very slow.

22
00:01:23,817 --> 00:01:28,147
Human reviewers get tired, and sometimes
it leads to inconsistent feedback.

23
00:01:28,647 --> 00:01:32,897
With AI, it increases
the speed of development.

24
00:01:33,507 --> 00:01:38,547
The review is done instantly without
waiting for any reviewer to look into

25
00:01:38,547 --> 00:01:40,657
your code and provide their comment.

26
00:01:41,272 --> 00:01:45,452
And then you work on that again to
increase the development process

27
00:01:46,372 --> 00:01:50,132
and developers can actually work
on what really matters for them

28
00:01:50,132 --> 00:01:53,782
rather than just wasting time on
reviewing thousands of lines of code.

29
00:01:54,282 --> 00:01:56,022
How AI changes this game?

30
00:01:56,332 --> 00:02:01,975
So AI, our code review tools are very
powerful in seeing the code quality.

31
00:02:01,975 --> 00:02:07,520
It just does not check the syntax,
but also provides a feedback on how

32
00:02:07,520 --> 00:02:09,882
a piece of code can run smoothly.

33
00:02:10,272 --> 00:02:16,442
How it can be able to work efficiently
with the context of the legacy

34
00:02:16,442 --> 00:02:18,002
code that it has been written in.

35
00:02:19,002 --> 00:02:24,542
Second, it is continuously improving
with the beautiful learn from large and

36
00:02:24,542 --> 00:02:26,990
vast amounts of open source software.

37
00:02:26,990 --> 00:02:31,592
Learning from language models,
GitHub, and Stack Overflow.

38
00:02:31,652 --> 00:02:34,062
The elements are always
improving themselves.

39
00:02:34,562 --> 00:02:35,682
So it can easily find new ways.

40
00:02:36,012 --> 00:02:36,852
Potential box.

41
00:02:36,892 --> 00:02:40,552
You can suggest any kind of
improvements in the test code

42
00:02:40,652 --> 00:02:43,152
that is present in the repository.

43
00:02:43,652 --> 00:02:47,362
Second and most important
point is collaborative culture.

44
00:02:47,862 --> 00:02:53,037
AI code reviews and AI process
of culture of collaboration

45
00:02:53,037 --> 00:02:54,522
and continuous improvement.

46
00:02:55,172 --> 00:03:00,172
It provides you insights, it provides
you proper comments on your code so that

47
00:03:00,172 --> 00:03:05,622
other developers who are reading your
code after your code is merged, they also

48
00:03:05,622 --> 00:03:10,952
get to understand if your code is really
good, how the code actually works, they

49
00:03:10,952 --> 00:03:17,182
don't have to waste time on looking for
bad code or code that is full of bugs.

50
00:03:17,682 --> 00:03:22,982
before diving deep into this, let's talk
about how AI Code Review actually works.

51
00:03:23,482 --> 00:03:25,882
There are four major
components of AI Code Review.

52
00:03:26,792 --> 00:03:29,042
Number one, static code analysis.

53
00:03:29,982 --> 00:03:32,862
We can, in simpler words, we
can call it checking the code

54
00:03:33,252 --> 00:03:34,392
without actually running it.

55
00:03:35,342 --> 00:03:37,107
Second, dynamic code analysis.

56
00:03:37,107 --> 00:03:41,844
This is testing the code in an
environment where it actually runs.

57
00:03:41,844 --> 00:03:45,002
it's like building something
for the real world.

58
00:03:45,502 --> 00:03:49,202
and only getting bugs and errors
when the code is unmanageable.

59
00:03:49,202 --> 00:03:51,832
Third is a rule based system.

60
00:03:52,602 --> 00:03:56,852
These are using predefined rules
and best practices that are

61
00:03:57,222 --> 00:04:00,042
imposed in an organization or
anything from the guidelines.

62
00:04:00,542 --> 00:04:04,942
So to ensure the code is detailed and
understood by other developers as well.

63
00:04:05,932 --> 00:04:08,802
And natural language
processing and algorithms.

64
00:04:09,302 --> 00:04:12,562
These algorithms help you to
understand code like a human would.

65
00:04:12,582 --> 00:04:16,682
The AI system understands the code, as
a human reviewer would actually look at

66
00:04:16,682 --> 00:04:21,902
the code and find any kind of security
issues or any bugs present in the code.

67
00:04:22,402 --> 00:04:23,912
Number one, static code analysis.

68
00:04:24,412 --> 00:04:28,562
it's like the foundation of
the used AI code review tools.

69
00:04:29,062 --> 00:04:33,712
It's a single static code analysis around
a pranker who is sitting behind a van.

70
00:04:33,992 --> 00:04:38,822
He finds the problems in your code before
they actually become very big disasters.

71
00:04:39,322 --> 00:04:43,762
It scans the code for any kind of
style errors, any kind of security

72
00:04:43,762 --> 00:04:45,612
flaws, any performance issues.

73
00:04:46,327 --> 00:04:48,887
And all of this happens without
actually running the code.

74
00:04:49,567 --> 00:04:52,237
So no running of the code
happens in this stage.

75
00:04:52,237 --> 00:04:57,867
Another stage is dynamic coding,
which is testing level, which I

76
00:04:57,867 --> 00:04:59,027
told you about real world testing.

77
00:04:59,527 --> 00:05:02,797
Our next type of analysis,
dynamic analysis, is about

78
00:05:03,227 --> 00:05:04,407
seeing the code in action.

79
00:05:04,407 --> 00:05:09,202
Seeing things like memory leaks.

80
00:05:09,832 --> 00:05:13,092
And performance bottlenecks,
any kind of security exploits

81
00:05:13,092 --> 00:05:15,172
while the program is running.

82
00:05:15,672 --> 00:05:20,392
It's similar to debugging, but
it's not very high level steroids.

83
00:05:20,392 --> 00:05:22,362
You can say that is a bottleneck.

84
00:05:22,862 --> 00:05:25,322
Then comes rule based systems.

85
00:05:25,822 --> 00:05:30,960
This is enforcing best practices, but
also following one rule at a time.

86
00:05:30,960 --> 00:05:34,797
Rule based systems follow
predefined coding guidelines.

87
00:05:35,297 --> 00:05:38,787
These are provided by the company,
by the senior developers, or

88
00:05:38,877 --> 00:05:40,647
maintainers of the repository, anyone.

89
00:05:41,147 --> 00:05:44,277
The interest in style seekers
enforce this kind of consistency.

90
00:05:44,967 --> 00:05:49,717
So this makes sure that anyone who is
contributing on the team, who is writing

91
00:05:49,747 --> 00:05:52,637
the code, writes clean and readable code.

92
00:05:53,137 --> 00:06:00,297
And it's similar to having a strict image
teacher, but for your pull request and for

93
00:06:00,297 --> 00:06:01,947
your code that you're actually submitting.

94
00:06:02,447 --> 00:06:05,747
And last is LLM and NLP.

95
00:06:06,187 --> 00:06:08,955
This is the AI that
reads code like a human.

96
00:06:08,955 --> 00:06:12,547
So this is where things
actually get very exciting.

97
00:06:12,547 --> 00:06:16,547
This is a stage where AI isn't
checking your code for sentences.

98
00:06:17,287 --> 00:06:19,077
It's actually understanding your code.

99
00:06:19,077 --> 00:06:25,357
LLM models like GPT 4,
DeepCore, and many more.

100
00:06:25,757 --> 00:06:30,347
They can recognize patterns, such
as improvements, And sometimes

101
00:06:30,627 --> 00:06:34,527
you can rewrite your code for
better efficiency and performance.

102
00:06:35,027 --> 00:06:38,387
It's in simpler words, you can
imagine a senior engineer who is

103
00:06:38,427 --> 00:06:40,527
available 24 7 and never gets tired.

104
00:06:41,477 --> 00:06:45,757
This is the actual potential
for AI code review.

105
00:06:46,257 --> 00:06:48,647
Let's discuss some of the
advantages of AI code review.

106
00:06:49,147 --> 00:06:52,187
This is how you will feel after
reviewing your code using any

107
00:06:52,257 --> 00:06:53,687
kind of AI code review tools.

108
00:06:54,632 --> 00:06:57,212
So the first one is efficiency and speed.

109
00:06:57,502 --> 00:06:57,952
Absolutely.

110
00:06:58,682 --> 00:07:03,967
Any kind of developer Don't want to spend
a lot of time with how much debugger

111
00:07:03,967 --> 00:07:07,777
code is 3am, 4am, in the midnight.

112
00:07:08,537 --> 00:07:12,087
So AI coder, we actually
scan every line of code.

113
00:07:12,267 --> 00:07:17,377
Helps you find any bugs, any
performance issues, everything

114
00:07:17,477 --> 00:07:18,671
that is wrong with your code.

115
00:07:19,112 --> 00:07:23,682
and writes or rewrites it
according to your provided needs.

116
00:07:24,182 --> 00:07:26,082
Second, consistency and accuracy.

117
00:07:26,582 --> 00:07:29,052
There is no human bias, no fatigue.

118
00:07:30,022 --> 00:07:35,522
So AI ensures that the code that is
written and code, depending on the

119
00:07:35,522 --> 00:07:40,272
code complexity, the inconsistencies
and errors are minimized.

120
00:07:40,287 --> 00:07:45,386
To a certain level that humans often
miss detection of hard to find bugs

121
00:07:45,886 --> 00:07:52,027
using stereo like dynamic, testing and
NLMs, which excels identifying hidden

122
00:07:52,027 --> 00:07:54,137
bugs sometimes that humans often miss.

123
00:07:54,637 --> 00:07:59,857
Reduced learning effort, obviously
AI tools has been reducing the manual

124
00:07:59,857 --> 00:08:05,505
effort of AI code reviewers, of
human code reviewers and Increases

125
00:08:05,505 --> 00:08:10,744
the team productivity and helps in
fast and continuous development.

126
00:08:10,744 --> 00:08:12,678
everything is just pros and cons.

127
00:08:12,678 --> 00:08:15,262
AI code is good at that too.

128
00:08:15,262 --> 00:08:18,528
There are certain limitations and
concerns that you have to keep

129
00:08:18,528 --> 00:08:20,118
in mind when it comes to AI code.

130
00:08:20,618 --> 00:08:22,378
Number one is lack of human judgment.

131
00:08:23,308 --> 00:08:27,923
AI doesn't put it as creativity
or any kind of design.

132
00:08:27,923 --> 00:08:35,402
For example, Once I experienced this
when I wrote a SQL query, and my AI

133
00:08:35,403 --> 00:08:37,312
code reviewer flagged it as a dead mark.

134
00:08:37,812 --> 00:08:41,192
Even though the SQL query was
written only for testing purposes,

135
00:08:41,192 --> 00:08:42,642
the AI couldn't understand it.

136
00:08:43,072 --> 00:08:45,481
It saw it as a security flaw.

137
00:08:45,481 --> 00:08:48,081
This happens sometimes
with AI code reviewers.

138
00:08:48,081 --> 00:08:52,909
So it's better to provide context,
provide for prompts, or files that can

139
00:08:52,909 --> 00:08:55,667
help the AI to understand the gist.

140
00:08:55,667 --> 00:08:59,583
It's not just for the purpose
of production, but also

141
00:08:59,583 --> 00:09:01,149
for the testing purpose.

142
00:09:01,149 --> 00:09:03,107
Second, false positives and negatives.

143
00:09:03,107 --> 00:09:07,413
Sometimes the AI code reviewers will
always flag a necessary vulnerability.

144
00:09:07,413 --> 00:09:10,937
Just like I explained
with the example of the

145
00:09:11,437 --> 00:09:13,117
HPF reviewer.

146
00:09:13,977 --> 00:09:14,657
This happens.

147
00:09:15,197 --> 00:09:19,292
And, This is where human code
reviewers are important, they

148
00:09:19,292 --> 00:09:23,912
come in and look at this, but most
of the time it is not necessary.

149
00:09:24,412 --> 00:09:25,937
Number 3 is context.

150
00:09:25,937 --> 00:09:29,342
Providing a context is very important.

151
00:09:29,842 --> 00:09:34,232
AI doesn't understand business logic,
so you have to provide a proper

152
00:09:34,232 --> 00:09:38,162
context to help AI code review tools.

153
00:09:39,117 --> 00:09:43,897
To properly review your code,
identify your bugs, and especially

154
00:09:44,077 --> 00:09:46,187
prevent any kind of false positives.

155
00:09:46,687 --> 00:09:48,817
Now here comes AI and human collaboration.

156
00:09:48,817 --> 00:09:55,797
How we can use AI review tools and
also work with AI review tools and not

157
00:09:55,797 --> 00:09:57,857
just be completely dependent on it.

158
00:09:57,907 --> 00:10:02,667
I believe AI's role should be the co pilot
and human's role should be the pilot.

159
00:10:03,167 --> 00:10:09,082
AI's role is the co pilot and co pilot
will Do the scalable code review,

160
00:10:09,082 --> 00:10:13,232
provide any fact on the common bug,
suggest any kind of refactoring,

161
00:10:13,802 --> 00:10:15,852
and obviously, never gets tired.

162
00:10:16,352 --> 00:10:21,662
So a human soul, the pilot, a human is
able to understand the business logic,

163
00:10:22,162 --> 00:10:23,402
everything human is able to know.

164
00:10:23,542 --> 00:10:27,987
That is why this particular form
was written and why this has

165
00:10:27,987 --> 00:10:29,387
been here for a very long time.

166
00:10:29,977 --> 00:10:34,442
There might be certain issues,
other policy on any kind of context

167
00:10:34,952 --> 00:10:41,092
that is important for the, for
these company, the ai, that context

168
00:10:41,542 --> 00:10:43,662
only human to human reviewers.

169
00:10:43,882 --> 00:10:45,642
Can I create it Code.

170
00:10:46,142 --> 00:10:52,392
AI is trained on code that is already
written by us, and it is sometimes

171
00:10:52,592 --> 00:10:58,022
monotonous and does not provide creative
solutions to problems, whereas humans can

172
00:10:58,052 --> 00:11:03,542
think creatively and provide solutions
that are maintainable, more readable,

173
00:11:03,872 --> 00:11:06,022
more efficient, and more creative.

174
00:11:06,522 --> 00:11:10,002
AI can validate the AI solution,
humans can validate the AI solution.

175
00:11:10,502 --> 00:11:15,852
This is because when we use the AI
review support, we can always review

176
00:11:15,892 --> 00:11:22,656
it again to see any kind of issue that
might be missed or any kind of complex

177
00:11:22,656 --> 00:11:24,919
system that was flagged unnecessarily.

178
00:11:24,919 --> 00:11:29,917
So any AI reviewer, any human
reviewer, Can work with an AI

179
00:11:29,917 --> 00:11:32,197
to improve tools and help them.

180
00:11:32,197 --> 00:11:33,337
The future of

181
00:11:33,837 --> 00:11:37,847
AI is definitely, AI to improve.

182
00:11:38,107 --> 00:11:40,117
And it will become more context of AI.

183
00:11:40,617 --> 00:11:41,607
So what we can do?

184
00:11:42,157 --> 00:11:44,817
We can employ a theory to learn from it.

185
00:11:45,097 --> 00:11:47,717
We can ride with it
and move along with it.

186
00:11:48,217 --> 00:11:50,677
So we can explore various
AI code review tools.

187
00:11:50,867 --> 00:11:52,867
Some of my favorites are GitHub Copilot,

188
00:11:53,367 --> 00:11:54,557
Open AI even.

189
00:11:54,557 --> 00:11:59,582
Code Rabbit is a GitHub plugin that
can help you review your before

190
00:11:59,582 --> 00:12:02,342
it is merging into repository.

191
00:12:02,842 --> 00:12:05,862
We can also integrate AI tools
into a current development systems.

192
00:12:06,232 --> 00:12:12,787
Let's cur AI or . We can generate and
we do some monotonous work that is doing

193
00:12:13,487 --> 00:12:16,477
and focus more on what needs to be done.

194
00:12:16,977 --> 00:12:19,442
And you can always
continuously learn and adapt.

195
00:12:19,937 --> 00:12:20,567
Whatever is needed.

196
00:12:21,247 --> 00:12:25,647
Whatever AI tools are being
done or created in the market.

197
00:12:26,147 --> 00:12:26,757
that's the end.

198
00:12:27,267 --> 00:12:32,607
I hope you like this session and if you
have any questions, if you want to discuss

199
00:12:32,627 --> 00:12:36,917
more about AI code review tools, if you
want to try out my own code review tools,

200
00:12:37,227 --> 00:12:39,837
connect with me on LinkedIn or on Twitter.

201
00:12:40,797 --> 00:12:42,337
And we can always talk about it.

202
00:12:42,837 --> 00:12:46,367
And always remember, AI is
always making the coding smarter.

203
00:12:47,137 --> 00:12:49,657
But great for the person
like you and us, everyone.

204
00:12:49,937 --> 00:12:50,887
They will make it powerful.

205
00:12:51,157 --> 00:12:53,117
So just keep learning, keep building.

206
00:12:53,447 --> 00:12:53,897
Have a great day.

207
00:12:54,397 --> 00:12:55,202
Thank you so much.

