1
00:00:00,750 --> 00:00:01,560
Good morning everyone.

2
00:00:01,690 --> 00:00:05,580
My name is, and I'm a resource
driven IT professional.

3
00:00:05,580 --> 00:00:09,480
With over 12 years of expertise
in software industry, my career

4
00:00:09,570 --> 00:00:13,329
has been dedicated to ensuring
the reliability, performance, and

5
00:00:13,329 --> 00:00:18,129
compliance of enterprise applications
across critical industries, including

6
00:00:18,129 --> 00:00:20,779
telecommunications and healthcare.

7
00:00:21,089 --> 00:00:25,079
Currently as a lead technician at
Spectrum, I swear, head software

8
00:00:25,139 --> 00:00:26,759
initiatives for billing systems.

9
00:00:27,134 --> 00:00:32,474
Validate so plus a PS and design
UI UX workforce, leveraging tools

10
00:00:32,474 --> 00:00:36,764
like Postman sql, no SQL databases
and automation frameworks.

11
00:00:37,095 --> 00:00:41,864
My work directly supports CICD
pipeline and Agile in ensuring seamless

12
00:00:41,864 --> 00:00:43,994
integration and high impact solutions.

13
00:00:44,024 --> 00:00:44,714
Previously.

14
00:00:45,044 --> 00:00:49,059
Alert software efforts for Medicaid
chip systems under Department of Health

15
00:00:49,154 --> 00:00:53,985
and Human Services for South Carolina
and IBM Vera Ensure HIPAA compliance

16
00:00:53,985 --> 00:00:56,175
and federal data hub integrations.

17
00:00:56,699 --> 00:01:00,959
Demonstrating my depth and
regularly demands with proficiency

18
00:01:00,959 --> 00:01:04,319
in automation, defect tracking,
and cross-function collaborations.

19
00:01:04,739 --> 00:01:09,570
I bridge technical and business needs
to deliver robust software solutions to

20
00:01:09,570 --> 00:01:14,580
my portfolio includes 200 plus technical
documentation and thousand plus automation

21
00:01:15,000 --> 00:01:19,410
revision suites and scalable testing
strategies that reduce the risk and

22
00:01:19,410 --> 00:01:21,899
accelerate delivery accelerate delivery.

23
00:01:22,259 --> 00:01:24,839
And I had a master's degree from
the University of New Haven, and

24
00:01:24,839 --> 00:01:29,350
I'm passionate about mentoring
teams and driving driving

25
00:01:29,350 --> 00:01:31,119
innovation in software practices.

26
00:01:31,539 --> 00:01:35,350
I'm excited to share my insights from
experience and explore how we can

27
00:01:35,350 --> 00:01:37,600
solve complex challenges together.

28
00:01:38,220 --> 00:01:44,170
This is the this is about building
rust power AI for telecom from

29
00:01:44,170 --> 00:01:45,670
reactive to predictive systems.

30
00:01:46,345 --> 00:01:49,645
Today as we are driving into
transformative shift into

31
00:01:49,645 --> 00:01:51,535
telecommunications, we are rush forward.

32
00:01:51,985 --> 00:01:57,815
AI is turning reactive network management
into proactive predictive systems.

33
00:01:58,054 --> 00:02:03,725
Imagine a world where outer is separated
and prevented before even customer notice.

34
00:02:03,965 --> 00:02:06,005
This isn't science fiction.

35
00:02:06,005 --> 00:02:07,354
It's happening right now.

36
00:02:07,475 --> 00:02:09,815
The rust is the answer
here to make it possible.

37
00:02:09,815 --> 00:02:13,174
Where cutting gate technologies
meets real world impact.

38
00:02:13,595 --> 00:02:17,684
Let's explore how
revolutionary is unfolding it.

39
00:02:18,184 --> 00:02:23,264
Yeah, today's agenda is how he's our
today's agenda, the telecom challenge.

40
00:02:23,264 --> 00:02:25,904
Why today's break fix model is broken.

41
00:02:26,444 --> 00:02:27,854
The second one, the rust.

42
00:02:28,274 --> 00:02:32,984
How a language designed for safety and
speed solves decades, all problems.

43
00:02:33,484 --> 00:02:37,924
The real world implementations from
anomaly detection to predicting cell

44
00:02:37,924 --> 00:02:41,944
tower failures, and now about the
integration challenges, the gritty

45
00:02:41,944 --> 00:02:45,214
reality of merging AI with legacy systems.

46
00:02:45,604 --> 00:02:47,164
The fifth one is future roadmap.

47
00:02:47,624 --> 00:02:49,874
How to face this into operations.

48
00:02:50,354 --> 00:02:51,614
Why does this even matter?

49
00:02:51,614 --> 00:02:55,154
Because every minute of downtime
costs silicon communication on

50
00:02:55,154 --> 00:02:58,214
average of $5,600 per minute.

51
00:02:58,734 --> 00:03:01,074
The stakes are high and
the solution is here.

52
00:03:01,574 --> 00:03:03,134
The telecom challenges today.

53
00:03:03,504 --> 00:03:07,074
So let's confirm the harsh
reality of today's networks.

54
00:03:07,434 --> 00:03:14,364
72 percent's fault detection means 28% of
the issues slip through silently degrading

55
00:03:14,364 --> 00:03:19,104
the services of the telecommunication,
sir, 3.7 hours for MTTR.

56
00:03:19,464 --> 00:03:24,654
Picture a hospital losing connectivity
during an emergency every minute counts.

57
00:03:25,119 --> 00:03:30,519
80% of today's are planned outages
where like mechanics changing on a

58
00:03:30,519 --> 00:03:35,259
schedule where the engine is already
overheating all kinds of things, which

59
00:03:35,259 --> 00:03:37,629
is the root cause, the fragmented tools.

60
00:03:37,629 --> 00:03:42,029
Engineers today tools are
between 80 years to 12, 80 to 12.

61
00:03:42,029 --> 00:03:48,549
Systems wasting 20 plus hours weekly
on manual correlation reactive mindset

62
00:03:48,639 --> 00:03:51,789
alerts, fire after customers complying.

63
00:03:52,599 --> 00:03:57,639
I worked with a European carrier last
year who discovered that 40% of their

64
00:03:57,639 --> 00:04:03,019
sudden outages had clear procedures
like memory leaks or temperature spikes

65
00:04:03,319 --> 00:04:06,469
visible in the tele data days in advance.

66
00:04:06,469 --> 00:04:10,069
But without ai, no one connected the dots.

67
00:04:10,069 --> 00:04:13,549
Now the cost is that's
the cost of reactivity.

68
00:04:14,049 --> 00:04:16,929
Why rust for telecommunication ai?

69
00:04:17,844 --> 00:04:19,944
Rust is in just another language.

70
00:04:20,004 --> 00:04:21,294
It's a paradigm shift.

71
00:04:21,834 --> 00:04:25,464
Let's break down why it is a
perfect for telecommunication.

72
00:04:25,464 --> 00:04:29,304
We have the memory safety
garbage collectors in Java.

73
00:04:29,304 --> 00:04:32,994
Python causes latency spikes
like 200 milliseconds.

74
00:04:32,994 --> 00:04:37,504
Pauses us in telecommunication
industry thus enough to miss

75
00:04:37,504 --> 00:04:39,544
a critical failure signal.

76
00:04:39,904 --> 00:04:43,094
The RUS ownership model
elements, the elements.

77
00:04:43,094 --> 00:04:45,134
This one, the real world
example, is a tire one.

78
00:04:45,659 --> 00:04:49,739
Carrier company reduced elemental
processing from one 50 milliseconds

79
00:04:49,739 --> 00:04:53,369
to millisecond to milliseconds
by switching it to rust.

80
00:04:53,679 --> 00:04:59,449
The features of concurrency, traditional
threading leads to race conditions.

81
00:04:59,839 --> 00:05:03,169
Rust Comply forces threat safety.

82
00:05:03,529 --> 00:05:08,299
A case study saying that the processing 10
million data points per second across 50

83
00:05:08,299 --> 00:05:13,459
threats with zero deadlocks, the zero cost
attractions for this particular thing.

84
00:05:13,819 --> 00:05:16,759
CC plus risk level
speeding without crashes.

85
00:05:16,789 --> 00:05:19,099
But benchmark of the rust process upward.

86
00:05:19,459 --> 00:05:25,009
Hundred GB of network lags in 22
seconds versus python's eight minutes.

87
00:05:25,409 --> 00:05:28,559
That is where the real difference
is the strong type system.

88
00:05:28,799 --> 00:05:31,109
The compile time checks are caught.

89
00:05:31,129 --> 00:05:35,444
A caught a critical API mismatch in
a billing system integration that

90
00:05:35,444 --> 00:05:39,074
would cost a 2 million in NRS changes.

91
00:05:39,384 --> 00:05:40,809
A fun fact about this whole thing is.

92
00:05:41,449 --> 00:05:45,679
Most love language on Stack Overflow has
been for over the seven, eight years.

93
00:05:46,049 --> 00:05:46,469
Why?

94
00:05:46,619 --> 00:05:50,999
Because it's runtime disasters in compiled
time errors for telecommunication.

95
00:05:50,999 --> 00:05:56,449
That's the difference between a hiccup
and a headline marking making outages.

96
00:05:56,949 --> 00:05:59,799
This is about the performance
metrics, whether the traditional

97
00:05:59,799 --> 00:06:02,089
implementation let's talk the numbers.

98
00:06:02,149 --> 00:06:06,349
The slide compares rust power,
AI to the legacy systems.

99
00:06:06,844 --> 00:06:10,624
The fall detection 92% was a 72% catching.

100
00:06:11,024 --> 00:06:15,914
There's 20% more issues means
fewer midnight emergencies.

101
00:06:16,094 --> 00:06:19,934
And PTR 47 minutes was a 3.7 hours.

102
00:06:19,994 --> 00:06:23,024
That's a three hour save per incident.

103
00:06:23,114 --> 00:06:28,724
The three hour save per incident,
customer searching down by 1.2%,

104
00:06:28,754 --> 00:06:34,734
which translate to $8 million and
a year for a mid-size carrier.

105
00:06:35,274 --> 00:06:41,394
One client said, why not just scale our
existing Python system as we tested it?

106
00:06:41,724 --> 00:06:46,434
It's 5,000 requests per second,
their Python service cluster, but

107
00:06:46,434 --> 00:06:50,934
the rust handle 85,000 requests
per second on the same hardware.

108
00:06:51,144 --> 00:06:53,364
Sometime the tool is bottleneck.

109
00:06:53,864 --> 00:06:55,664
The last powered AI algorithms.

110
00:06:55,724 --> 00:06:56,684
This is about this thing.

111
00:06:57,089 --> 00:06:59,099
The two algorithms are the game changers.

112
00:06:59,159 --> 00:07:01,679
The first one is isolation forests.

113
00:07:01,859 --> 00:07:03,779
How it works is randomly isolates.

114
00:07:04,139 --> 00:07:09,399
Anomal is, instead of profiling
normal behavior think is it's like a

115
00:07:09,399 --> 00:07:12,019
folding haystack and elevating hay.

116
00:07:12,519 --> 00:07:17,259
It's detecting as A-D-D-O-S attacks
in, in three seconds by spotting

117
00:07:17,559 --> 00:07:23,599
irregular traffic patterns, LSTs,
these neural networks predict failures.

118
00:07:24,214 --> 00:07:27,004
By remembering patterns over time.

119
00:07:27,334 --> 00:07:30,154
So this is the main, key
thing in this whole thing.

120
00:07:30,184 --> 00:07:31,804
An example, a cell tower.

121
00:07:32,134 --> 00:07:35,734
Power supplies typically de
degrades over six months.

122
00:07:36,004 --> 00:07:41,344
The LSTM flag once failing for
every two weeks, saving almost

123
00:07:41,344 --> 00:07:43,354
a 200 K in replacement costs.

124
00:07:43,504 --> 00:07:46,864
See the real fear and the whole
kicker is the rust speeds.

125
00:07:46,864 --> 00:07:50,834
Let us run these models
in line with data streams.

126
00:07:51,254 --> 00:07:56,774
No batch crossing Python would need
15 times more servers to keep up with

127
00:07:56,774 --> 00:08:02,084
this 500 K in year on this cloud as
its cost has been saved, particularly

128
00:08:02,084 --> 00:08:04,964
using this rust techno rust language.

129
00:08:05,464 --> 00:08:09,504
Thus this slide seven case a case
study about predictive maintenance

130
00:08:09,534 --> 00:08:15,089
of the cell tower led zoom into North
American carrier results the 25 tb. Per

131
00:08:15,089 --> 00:08:22,319
day of data from 5,000 cell tower cell
towers eco into 10 years of Netflix

132
00:08:22,319 --> 00:08:27,989
streaming the LSDM predictions, the
flagged falling hardware 14 days in

133
00:08:27,989 --> 00:08:34,109
advance with 89% accuracy results, which
in turns result to 60% fewer outages

134
00:08:34,769 --> 00:08:40,619
and 42% fewer truckloads saving on
an average of $1.2 million in a year.

135
00:08:41,115 --> 00:08:47,264
This is the best part where the NOCT went
from firefighting to strategic planning.

136
00:08:47,504 --> 00:08:51,324
One engineer told me that
finally feel like I'm preventing

137
00:08:51,324 --> 00:08:53,064
disasters, not layering them up.

138
00:08:53,425 --> 00:08:56,665
That's a cultural transformation
in this telecom industry.

139
00:08:57,165 --> 00:09:01,425
The next slide slows about the
unified pla platform architecture

140
00:09:01,754 --> 00:09:02,744
in this particular thing.

141
00:09:03,104 --> 00:09:05,324
So here is how the sausage.

142
00:09:05,829 --> 00:09:08,260
Gets mo gets more, gets made.

143
00:09:08,620 --> 00:09:14,349
So collection adapters, Russ normalize
the data from eight to 12 legacy

144
00:09:14,349 --> 00:09:16,780
systems into a unified format.

145
00:09:17,460 --> 00:09:22,445
Then the message bus, the message
base zero copied design moves

146
00:09:22,715 --> 00:09:27,955
a five B in an hour with the
overhead of pass post-it note.

147
00:09:28,325 --> 00:09:29,930
So explainability layer.

148
00:09:30,560 --> 00:09:36,870
Where the engineers get plain English
insights like Transformer 42 fails

149
00:09:37,140 --> 00:09:39,930
70% of the time during peak loads.

150
00:09:40,320 --> 00:09:46,080
Now we can notice that in 1990,
Sarahs a Sonet system or rust, FFI,

151
00:09:46,350 --> 00:09:47,910
the foreign function interface.

152
00:09:47,910 --> 00:09:49,350
Lets let us wrap.

153
00:09:49,530 --> 00:09:50,790
Its c code safety.

154
00:09:51,150 --> 00:09:52,725
No re rewrite needed.

155
00:09:53,160 --> 00:09:56,760
The client called it a time
machine for their stacks.

156
00:09:57,180 --> 00:09:58,680
That's back in 1990s.

157
00:09:58,680 --> 00:09:58,890
Era.

158
00:09:59,390 --> 00:10:01,070
This are implementation challenges.

159
00:10:01,400 --> 00:10:05,540
So no transformation in painless,
so it's always integration

160
00:10:05,540 --> 00:10:06,590
Challenges are already there.

161
00:10:06,920 --> 00:10:09,020
Here, how we can tackle this hurdles.

162
00:10:09,350 --> 00:10:14,300
So the legacy integration, so use
plus FFI to wrap COBOL billing

163
00:10:14,300 --> 00:10:15,980
systems, there's a tip there.

164
00:10:16,280 --> 00:10:20,990
A first testing caught a memory
leak that would crash production.

165
00:10:21,410 --> 00:10:23,060
And next is the data quality.

166
00:10:23,585 --> 00:10:28,685
Rest scripts autofill, missing
timestamps using Marco chains.

167
00:10:28,965 --> 00:10:35,095
And the next one is the black box sphere
added to y button next to every a alert.

168
00:10:35,295 --> 00:10:39,075
That's how it is showing the
top three contributing factors.

169
00:10:39,075 --> 00:10:43,185
A CTO once asked me how could
I sell this to my board?

170
00:10:43,485 --> 00:10:45,105
The answers straightforward.

171
00:10:45,435 --> 00:10:49,735
The straightforward, start with the
pilot on a non-critical towards.

172
00:10:50,140 --> 00:10:55,570
When they saw 40% reduction in outages,
the budget approval took 10 minutes.

173
00:10:55,750 --> 00:10:57,070
It just took 10 minutes.

174
00:10:57,560 --> 00:10:57,710
No.

175
00:10:57,710 --> 00:11:02,060
The next one is about the workflow
evolution of the operational rules.

176
00:11:02,640 --> 00:11:05,280
So AI won't replace any engineers.

177
00:11:05,640 --> 00:11:10,230
It redefines the roles before
the manual log scripting for the

178
00:11:10,230 --> 00:11:15,210
outage triage after this one, the
20 motors and turning algorithms.

179
00:11:15,790 --> 00:11:19,805
Once a team automated 80% of
the repetitive task instead of

180
00:11:19,805 --> 00:11:21,895
layoffs they upskill everyone.

181
00:11:22,165 --> 00:11:25,195
Their job satisfaction score jumped 30%.

182
00:11:25,195 --> 00:11:29,695
Happiness engineers fix problems
faster than the regular one.

183
00:11:30,195 --> 00:11:32,595
The next slide is about
the implementation roadmap.

184
00:11:32,595 --> 00:11:35,595
Of particularly, there are four
steps in this implementation.

185
00:11:35,925 --> 00:11:39,525
The phase one is about
the data foundation.

186
00:11:39,865 --> 00:11:41,515
Deploy rust collectors.

187
00:11:42,070 --> 00:11:47,530
It's a tip in instrument like one
tower type, first example 4G only.

188
00:11:48,010 --> 00:11:49,960
The phase two is anomaly detection.

189
00:11:50,320 --> 00:11:53,590
Use isolation for us to find quick wins.

190
00:11:53,920 --> 00:11:57,100
Its example is a power supplies,
a faulty power supplies.

191
00:11:57,460 --> 00:12:03,460
The phase three is predictive models,
training LS teams on historical failures.

192
00:12:03,460 --> 00:12:08,110
Caution, start with a non-safety
critical system, sir, and coming

193
00:12:08,110 --> 00:12:10,660
to the phase four is automation.

194
00:12:10,985 --> 00:12:12,125
Auto restart.

195
00:12:12,215 --> 00:12:16,485
Failed notes with, without an
even human oversight client.

196
00:12:16,565 --> 00:12:22,060
As an example, a client faced this
over 18 months by six 18 months,

197
00:12:22,180 --> 00:12:27,400
but by six, the ROI was 2.3 million
from reduced truck roll alone.

198
00:12:27,670 --> 00:12:31,680
The boat the fast truck, the
whole thing the whole thing.

199
00:12:32,180 --> 00:12:34,310
The next one is thank you.

200
00:12:34,410 --> 00:12:34,710
Good.

