1
00:00:00,010 --> 00:00:05,130
Hello, my name is Akim and today I will be
talking about foundation of P2P networks.

2
00:00:05,510 --> 00:00:07,649
Thank you for joining my talk.

3
00:00:07,660 --> 00:00:10,160
I hope, this talk will
be interesting to you.

4
00:00:10,730 --> 00:00:16,080
And today I will be talking about
P2P networks and how they work, how

5
00:00:16,080 --> 00:00:22,020
they can be used in the real projects
and what benefit they bring in our

6
00:00:22,030 --> 00:00:23,980
world and the application we built.

7
00:00:24,930 --> 00:00:25,220
Okay.

8
00:00:25,220 --> 00:00:26,474
Let's start with the.

9
00:00:26,735 --> 00:00:32,715
features, of decentralized P2P networks,
the first feature is, that each member of

10
00:00:32,715 --> 00:00:34,994
the network is equal to any other member.

11
00:00:35,205 --> 00:00:35,985
What does it mean?

12
00:00:36,265 --> 00:00:41,154
For example, in our regular client server
model, where there is a server and there

13
00:00:41,155 --> 00:00:47,415
is a client, the server defines rules,
its API, permissions, and other stuff,

14
00:00:47,615 --> 00:00:52,475
and regulates which client can connect
and which cannot connect, and so on.

15
00:00:52,705 --> 00:00:56,355
And the client, has to abide to
those rules, otherwise the client

16
00:00:56,365 --> 00:00:57,685
cannot connect to the server.

17
00:00:58,265 --> 00:01:03,294
And this inequality, doesn't
apply in P2P networks.

18
00:01:03,915 --> 00:01:08,904
Because in P2P networks, each peer
is equal, and each peer can connect

19
00:01:08,984 --> 00:01:11,045
to others without any limitations.

20
00:01:11,285 --> 00:01:15,365
The second feature of the P2P networks is
that each member communicates to others

21
00:01:15,445 --> 00:01:20,664
directly, meaning that For example,
if there is, three peers, A, B, C, A

22
00:01:20,705 --> 00:01:26,155
connected to B and B connected to C,
and at some point A wanted to connect

23
00:01:26,195 --> 00:01:28,634
to C, it cannot go through B peer.

24
00:01:28,714 --> 00:01:32,804
It has to ask B, do
you know, peer named C?

25
00:01:32,984 --> 00:01:35,884
And B says, yes, I know,
here's, his address.

26
00:01:36,654 --> 00:01:41,869
And then after obtaining an address,
The peer A can connect to C, peer,

27
00:01:42,079 --> 00:01:43,909
and communicate to it directly.

28
00:01:43,969 --> 00:01:45,869
So they cannot use B as a proxy.

29
00:01:46,369 --> 00:01:46,889
Okay.

30
00:01:47,069 --> 00:01:53,454
And the application which utilizes those
P2P networks, they can Like, do a lot of

31
00:01:53,474 --> 00:01:58,554
useful things, for example, distributing
processing power between many peers in

32
00:01:58,564 --> 00:02:01,824
the network, or distributing storage.

33
00:02:02,214 --> 00:02:08,514
And we're not talking about avoiding
bans or limitation based on country

34
00:02:08,584 --> 00:02:10,384
or other kinds of regulation.

35
00:02:10,844 --> 00:02:15,170
So that was networks are
really wonderful in terms of,

36
00:02:15,230 --> 00:02:17,690
distribution and, like new concepts.

37
00:02:17,990 --> 00:02:24,160
So let's, talk about their, components
and describe each one separately.

38
00:02:24,630 --> 00:02:29,480
So overall, there are four components
I decided to underline in this talk.

39
00:02:29,730 --> 00:02:31,400
It's, P2P protocols.

40
00:02:31,410 --> 00:02:34,690
It's application level
protocols, the first component.

41
00:02:34,940 --> 00:02:36,480
and actually this is a very.

42
00:02:37,240 --> 00:02:43,340
big component in terms of, the P two P
protocols, unite a lot of internal stuff.

43
00:02:44,090 --> 00:02:45,080
We'll talk about it.

44
00:02:45,950 --> 00:02:46,400
okay.

45
00:02:46,400 --> 00:02:50,160
And besides p P two P protocols,
there's a second component.

46
00:02:50,160 --> 00:02:51,120
Peer discovery.

47
00:02:51,430 --> 00:02:56,280
it's about finding and
other peers in the network.

48
00:02:56,490 --> 00:02:59,880
Also transports and naturals.

49
00:03:00,060 --> 00:03:03,070
We'll talk about all of this in detail.

50
00:03:03,475 --> 00:03:07,405
On the next slides, let's
start with P2P protocols.

51
00:03:07,955 --> 00:03:09,075
What are those?

52
00:03:09,395 --> 00:03:12,775
Those are an application layer
protocol, which defines basic component.

53
00:03:13,200 --> 00:03:19,140
In P2P networks, each P2P networks
have to, implement, a couple of, I

54
00:03:19,140 --> 00:03:23,830
would say not a couple, a dozen of,
protocols, a dozen of, interface.

55
00:03:24,330 --> 00:03:29,750
Like peer identity, addressing,
messaging, connection logic, peer

56
00:03:29,750 --> 00:03:36,000
discovery, peer routing, and other
stuff, handshakes, transport, and a

57
00:03:36,000 --> 00:03:38,190
lot of other things, and all of those.

58
00:03:38,690 --> 00:03:44,060
Depending on their implementation,
build a structure for P2P protocol.

59
00:03:44,410 --> 00:03:49,330
And also good to mention libP2P
ecosystem, we'll talk about it later,

60
00:03:50,280 --> 00:03:56,070
which, provides basic implementation
for most of these, interfaces.

61
00:03:56,130 --> 00:04:00,510
And, a lot of modern P2P protocols
actually built on top of libP2P.

62
00:04:01,010 --> 00:04:01,800
let's carry on.

63
00:04:01,920 --> 00:04:06,250
There's, Next concept of, P2P
networks is a peer discovery.

64
00:04:06,260 --> 00:04:09,540
It's all about, finding
other peers in the network.

65
00:04:10,090 --> 00:04:16,200
and connecting with each other, like in
the picture demonstrated on this slide.

66
00:04:16,750 --> 00:04:21,520
so when the new peer appears in
the network, first of all, that

67
00:04:21,560 --> 00:04:24,983
peer, has to find other peers.

68
00:04:24,983 --> 00:04:29,561
Otherwise, it cannot do
any useful work for us.

69
00:04:29,561 --> 00:04:35,491
to do That peer would use peer discovery
mechanism implemented in one or other way.

70
00:04:35,851 --> 00:04:42,361
the very popular, peer discovery
mechanism is, for example, Translates,

71
00:04:42,421 --> 00:04:47,631
translating a global message, through
each peer in the network that new peer

72
00:04:47,701 --> 00:04:53,111
has appeared and other peers try to
contact it and share their information

73
00:04:53,641 --> 00:04:58,292
or there are bootstrap peer which has
known and there are bootstrap peer

74
00:04:58,292 --> 00:05:04,521
which has like known list of peers in it
and the newly created peer can connect

75
00:05:04,541 --> 00:05:10,151
to the bootstrap node and ask for the
list of closest network participants.

76
00:05:10,651 --> 00:05:17,061
And after the peer discovery, there is a
very similar challenge is a peer routing

77
00:05:17,121 --> 00:05:23,221
is, actually, when a newly created peer
has to find a way to other peers to

78
00:05:23,221 --> 00:05:30,561
connect through them, to find a like road
and, go through one or other and third,

79
00:05:30,911 --> 00:05:33,651
and peers to reach their destination.

80
00:05:34,016 --> 00:05:38,186
And usually it's implemented by
maintaining a specific routing table,

81
00:05:38,276 --> 00:05:43,696
which is, which has a graph like
structure and used for this purpose.

82
00:05:44,626 --> 00:05:46,866
Okay, that was the second component.

83
00:05:46,906 --> 00:05:48,786
The third component is transport.

84
00:05:49,206 --> 00:05:54,596
transport is, data transfer
protocols like TCP or UDP.

85
00:05:54,866 --> 00:05:59,796
they have, alternative, although,
those two are very popular

86
00:05:59,836 --> 00:06:01,526
and used almost everywhere.

87
00:06:01,976 --> 00:06:08,106
And, good alternative would be
Quick protocol, which, actually an,

88
00:06:08,586 --> 00:06:13,146
implementation, which is layered
atop of UDP protocol and acts like

89
00:06:13,146 --> 00:06:16,116
a WebSocket, WebSocket with UDP.

90
00:06:16,416 --> 00:06:20,626
And also there are modern protocols
like WebTransport and WebRTC,

91
00:06:20,956 --> 00:06:24,406
which are efficient ways of
communication in browser environment.

92
00:06:24,556 --> 00:06:25,266
Very useful.

93
00:06:25,266 --> 00:06:31,146
They're used for data transfer,
for example, video transfer.

94
00:06:31,531 --> 00:06:35,369
And they are really efficient
in this, in these cases.

95
00:06:35,869 --> 00:06:43,489
The fourth mechanism of, P2P networks
I chose to talk about is NAT traversal.

96
00:06:44,039 --> 00:06:48,509
it's a mechanism that allows communication
between public, peer, and peer to peer

97
00:06:48,509 --> 00:06:53,934
networks like laptop connected to home
Wi Fi router, for example, if you like

98
00:06:54,024 --> 00:07:00,084
have a laptop and you're working on it,
and you want to interact with outside

99
00:07:00,084 --> 00:07:06,784
world with the deployed network on some
public machines somewhere in the world,

100
00:07:07,094 --> 00:07:12,834
those public, servers cannot reach you
because your laptop is behind your router.

101
00:07:13,454 --> 00:07:20,059
And, to overcome this, you would,
you can try to configure your Wi Fi.

102
00:07:20,179 --> 00:07:25,989
router, to allow some, to allow accepting,
external connection to your laptop.

103
00:07:26,229 --> 00:07:31,079
But this is difficult for many
users, so that's why, natural

104
00:07:31,079 --> 00:07:33,789
cell mechanism was designed.

105
00:07:34,099 --> 00:07:40,419
there are quite, A few ways to implement
that and very popular one is just

106
00:07:40,419 --> 00:07:46,549
setting up a really public peer, which
are accessible to your private network.

107
00:07:46,759 --> 00:07:52,169
And, if your laptop point to,
interact with the P two P network,

108
00:07:52,289 --> 00:07:54,329
your laptop have to connect that.

109
00:07:55,039 --> 00:07:59,879
Relaypeer and keep a long live
connection and while your laptop keeps

110
00:07:59,889 --> 00:08:05,959
a connection Other peers can communicate
first to Relaypeer and Relaypeer

111
00:08:06,319 --> 00:08:13,124
just redirect data package to you
without Interacting them in any way.

112
00:08:13,964 --> 00:08:14,374
yeah.

113
00:08:14,784 --> 00:08:15,854
that's how they work.

114
00:08:15,984 --> 00:08:17,164
Let's, move on.

115
00:08:17,964 --> 00:08:20,314
good examples of P2P networks.

116
00:08:20,364 --> 00:08:23,154
first example is IPFS.

117
00:08:23,204 --> 00:08:24,254
Also there is a BitTorrent.

118
00:08:24,754 --> 00:08:28,434
Those two protocols are really, popular.

119
00:08:28,614 --> 00:08:31,024
And they're used for file sharing.

120
00:08:31,524 --> 00:08:33,524
Though they are slightly different.

121
00:08:34,024 --> 00:08:40,524
Also there is a Fluence Network Protocol,
which I want to talk today about.

122
00:08:40,854 --> 00:08:45,594
And also very popular Ethereum,
Decentralized Blockchain Protocol.

123
00:08:46,194 --> 00:08:50,924
I hope almost all of you know about it.

124
00:08:51,584 --> 00:08:56,244
The first the first protocol
I want to talk is IPFS.

125
00:08:56,664 --> 00:08:58,124
What is IPFS?

126
00:08:58,124 --> 00:09:01,144
IPFS is distributed system for
storing and accessing files,

127
00:09:01,194 --> 00:09:03,014
website, application, and data.

128
00:09:03,374 --> 00:09:06,884
I would say almost anything
which could be saved, in storage.

129
00:09:07,384 --> 00:09:11,914
And IPFS, means
interplanetary file system.

130
00:09:12,214 --> 00:09:17,214
Okay, let's, let's look at
the IPFS in more details.

131
00:09:17,714 --> 00:09:23,954
yeah, as I mentioned, IPFS as a P two P
networks, it's used for storing data and,

132
00:09:24,134 --> 00:09:29,684
the good use cases is that, for example,
you can store your file in A-I-P-F-S

133
00:09:29,684 --> 00:09:35,354
and that file would be distributed
to any other P of IPFS in the world.

134
00:09:35,354 --> 00:09:40,084
And for example, if, we choose
some, popular centralized

135
00:09:40,084 --> 00:09:41,914
server like Google or Amazon.

136
00:09:42,164 --> 00:09:47,164
And they have some limitation for file
sharing in some countries through IPFS.

137
00:09:47,444 --> 00:09:54,384
You can, avoid those limitations and share
your file everywhere, where internet is

138
00:09:54,384 --> 00:10:00,224
available and other use case would be
much faster, downloading of the file.

139
00:10:00,724 --> 00:10:08,094
Which is also utilized by BitTorrent
protocol, because if your file is deployed

140
00:10:08,114 --> 00:10:14,514
in many places, like many peers in the
network, you can open connections to all

141
00:10:14,514 --> 00:10:17,744
those peers and start downloading them.

142
00:10:17,999 --> 00:10:22,599
content for them simultaneously,
which greatly speeds up, speed

143
00:10:22,599 --> 00:10:24,329
of downloading that file.

144
00:10:24,829 --> 00:10:30,239
there are also a lot of other
features listed in that websites

145
00:10:30,279 --> 00:10:34,089
and, implementation details,
and I really recommend you guys

146
00:10:34,349 --> 00:10:36,399
checking this, IPFS protocol.

147
00:10:36,409 --> 00:10:40,499
It has really cool documentation,
but now let's move to the.

148
00:10:40,999 --> 00:10:44,649
Next slide, and next slide is
about Fluent Network Protocol.

149
00:10:44,969 --> 00:10:49,239
That protocol is about,
workload distribution.

150
00:10:49,659 --> 00:10:55,974
for example, if you want to build
a report or do some computation or

151
00:10:55,994 --> 00:11:01,544
heavy calculation, solve complex
math, sorry, solve complex math

152
00:11:01,544 --> 00:11:06,944
problem, you can use a Fluent Network
Protocol, which can distribute your

153
00:11:07,204 --> 00:11:09,254
calculations and optimize them.

154
00:11:09,654 --> 00:11:12,684
Let's see how it works in detail.

155
00:11:14,124 --> 00:11:17,579
there is a documentation of
Fluence network protocol.

156
00:11:17,969 --> 00:11:21,669
there are some features
like it fast, secure.

157
00:11:22,219 --> 00:11:23,789
let's see how it works.

158
00:11:24,059 --> 00:11:27,499
actually Fluence network
is built of, peers.

159
00:11:27,539 --> 00:11:33,259
Some of these peers are providers which
provide, as you can judge by their name

160
00:11:33,579 --> 00:11:39,944
and provide computer powers and allow
you to utilize that computing power and.

161
00:11:40,034 --> 00:11:44,664
clients, client peer, which
can also work as a providers.

162
00:11:45,024 --> 00:11:51,754
but they also send, like a request
or, express a desire to do some work.

163
00:11:52,254 --> 00:11:57,374
for example, in this, very small
snippet of code, The workload is

164
00:11:57,374 --> 00:12:03,354
very simple, it's just setting status
online, just updating the string, but

165
00:12:03,354 --> 00:12:05,474
it could be much more complicated.

166
00:12:05,894 --> 00:12:12,364
And there is also a specific language,
written for interacting with peers in

167
00:12:12,364 --> 00:12:14,884
that protocol, it's called Aqua language.

168
00:12:15,464 --> 00:12:23,094
And, it, allows specifying execution
model and, allows one to choose a peer

169
00:12:23,254 --> 00:12:25,464
where that code should be executed.

170
00:12:25,514 --> 00:12:30,524
And that's just, really top of
an iceberg of that language.

171
00:12:31,024 --> 00:12:36,174
But the main idea of that protocol
is that, user first write the

172
00:12:36,204 --> 00:12:39,164
code and specify execution model.

173
00:12:39,384 --> 00:12:45,364
And after doing that, the, protocol
allows, the protocol executes

174
00:12:45,404 --> 00:12:49,614
that code and distribute your
workload on many different nodes.

175
00:12:49,874 --> 00:12:51,254
Why is this protocol useful?

176
00:12:51,254 --> 00:12:53,164
It's because it's decentralized.

177
00:12:53,394 --> 00:12:58,734
if you distribute your work through
Fluence, you do not rely on.

178
00:12:58,904 --> 00:13:04,784
Central provider like Google or Amazon,
which can change, like requirements

179
00:13:04,814 --> 00:13:07,114
or conditions and you have to abide.

180
00:13:07,384 --> 00:13:11,114
Otherwise, you have to change your
architecture to other providers,

181
00:13:11,344 --> 00:13:13,244
which could be really time consuming.

182
00:13:13,744 --> 00:13:18,314
and also using Fluent Protocol is
cheaper because there is a free market

183
00:13:18,354 --> 00:13:22,334
and each peer can participate in that.

184
00:13:22,659 --> 00:13:27,919
protocol by proving that it
has necessary powers to execute

185
00:13:27,919 --> 00:13:30,099
your code and other features.

186
00:13:30,569 --> 00:13:36,789
there is also cool documentation, here,
and there are many example projects.

187
00:13:37,449 --> 00:13:39,749
influence, protocol ecosystem.

188
00:13:40,409 --> 00:13:46,069
for example, right now I'm looking
at FRPC substrate example is, it's

189
00:13:46,069 --> 00:13:51,379
a example of application, which,
connects to the centralized apps

190
00:13:51,399 --> 00:13:54,049
and allow, distributing, their.

191
00:13:54,289 --> 00:14:01,059
Access to the RPC, to the
blockchain gates, so we won't talk

192
00:14:01,069 --> 00:14:02,739
about it in details right now.

193
00:14:02,949 --> 00:14:08,349
But if you are interested, feel
free to follow this website, just

194
00:14:08,369 --> 00:14:10,729
Google Fluence and see how they work.

195
00:14:11,469 --> 00:14:14,429
And now we're getting
back to our presentation.

196
00:14:14,589 --> 00:14:18,039
the next slide is about,
additional information.

197
00:14:18,059 --> 00:14:19,849
It's actually about, libp2p.

198
00:14:20,349 --> 00:14:23,759
let's look a bit, what is libp2p.

199
00:14:24,079 --> 00:14:28,199
Like I mentioned before, libp2p
is a great foundation for building

200
00:14:28,209 --> 00:14:30,829
your own, decentralized protocol.

201
00:14:31,079 --> 00:14:37,339
It has a implementation for, many
different, many fundamentals.

202
00:14:37,529 --> 00:14:41,869
Which, almost every, every
decentralized protocol consists of.

203
00:14:42,199 --> 00:14:46,619
For example, it's addressing,
peer discovery, peer routing,

204
00:14:47,209 --> 00:14:50,769
peer identity, peer, info.

205
00:14:51,539 --> 00:14:54,479
There's also some transports.

206
00:14:54,979 --> 00:14:58,429
Secure communication, stream
multiplexing, and a lot of different

207
00:14:58,439 --> 00:15:01,639
stuff, which I mentioned today.

208
00:15:01,809 --> 00:15:05,799
Some of this stuff I mentioned,
some of them I didn't mention.

209
00:15:06,329 --> 00:15:10,289
yeah, it's really good to go
through the documentation.

210
00:15:10,289 --> 00:15:14,709
At least there's some introduction,
passages, and just get a

211
00:15:14,719 --> 00:15:18,719
basic understanding of what
it is and how you can use it.

212
00:15:19,269 --> 00:15:20,189
I believe that's it.

213
00:15:20,219 --> 00:15:27,059
That's all, for today's talk, thanks for
listening guys, see you soon, that's all.

214
00:15:27,119 --> 00:15:27,499
Thank you.

