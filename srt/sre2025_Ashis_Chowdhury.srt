1
00:00:00,360 --> 00:00:01,350
Good morning everyone.

2
00:00:01,429 --> 00:00:07,039
my name is asis and I bring, 23 years
of experience, in it, specializing

3
00:00:07,039 --> 00:00:11,609
in data engineering, building real
time, near real time, applications,

4
00:00:12,129 --> 00:00:15,509
in business intelligence, data
warehousing, other applications.

5
00:00:15,969 --> 00:00:19,194
currently I'm work employed with,
MasterCard as data architect.

6
00:00:19,974 --> 00:00:23,354
throughout my career, I have
designed and implemented complex data

7
00:00:23,684 --> 00:00:27,934
solutions, for major, organizations
across the industries, including,

8
00:00:28,014 --> 00:00:32,555
British Telecom, Barclays, and then
many other, fortune 500 companies.

9
00:00:33,465 --> 00:00:37,865
my main expertise lies in creating
scalable data architectures, leading

10
00:00:37,955 --> 00:00:42,905
end-to-end data integration efforts,
driving advanced analytics, to empower.

11
00:00:43,610 --> 00:00:44,840
Datadriven decisions.

12
00:00:45,590 --> 00:00:48,850
as data architect, I have had the
privilege of working with, cutting

13
00:00:48,850 --> 00:00:52,520
edge tools and methodologies
like, client cloud technologies,

14
00:00:53,120 --> 00:00:56,299
different type of, architectural
patterns like, microservices,

15
00:00:56,299 --> 00:00:59,649
even different architectures to
solve, real world challenges.

16
00:01:00,259 --> 00:01:03,639
today I'll be discussing, the
design of, distributed applications,

17
00:01:03,689 --> 00:01:07,859
emphasizing the importance of
robust and scalable architectures.

18
00:01:08,439 --> 00:01:12,519
As we explore, the architectural patterns,
we'll identify common challenges and

19
00:01:12,519 --> 00:01:16,639
the best practices that can, that can
guide us in creating effective solutions.

20
00:01:17,119 --> 00:01:21,409
Understanding these elements, is crucial,
for ensuring that our applications can

21
00:01:21,409 --> 00:01:25,869
handle growth and, complexity while
maintaining performance and reliability.

22
00:01:25,869 --> 00:01:27,299
let's go to, have a look.

23
00:01:27,299 --> 00:01:28,529
Our, today's agenda.

24
00:01:29,069 --> 00:01:30,029
Let's go to the next slide.

25
00:01:30,529 --> 00:01:32,850
Here's the agenda for,
today's presentation.

26
00:01:32,880 --> 00:01:36,799
We'll start with, an introduction
to, the distributed applications,

27
00:01:37,219 --> 00:01:41,590
then, the architectural patterns,
the common challenges, the

28
00:01:41,590 --> 00:01:43,900
best practices and solutions.

29
00:01:44,209 --> 00:01:48,779
we'll try to cover a case study and,
then we'll, have the, summary and

30
00:01:48,779 --> 00:01:50,279
question answer session at the end.

31
00:01:50,779 --> 00:01:54,389
A distribution, a distributed system
is a collection of, independent

32
00:01:54,389 --> 00:01:59,219
computers that appear to the users of
the system as a single coherent system.

33
00:01:59,719 --> 00:02:04,249
these computers or nodes walk
together, communicate over a

34
00:02:04,249 --> 00:02:08,949
network, and, coordinate their
activities to achieve a common goal

35
00:02:08,949 --> 00:02:11,759
by sharing resources, datas and task.

36
00:02:12,479 --> 00:02:15,559
the difference between, we, we are
accustomed with, I know, mainly

37
00:02:15,559 --> 00:02:17,029
central, centralized system.

38
00:02:17,489 --> 00:02:20,839
so the main difference between, a
distributed system and a centralized

39
00:02:20,839 --> 00:02:25,009
system is all data and computational
resources are kept and controlled

40
00:02:25,009 --> 00:02:26,769
in a single, in a central place.

41
00:02:26,829 --> 00:02:28,599
So a server in a centralized system.

42
00:02:29,314 --> 00:02:32,764
applications that user connect to this
hub in order to access and handle data.

43
00:02:33,634 --> 00:02:37,984
although this configuration is easy
to maintain and secure, if too many

44
00:02:37,984 --> 00:02:42,724
users access it simultaneously, or
if the central server malfunctions,

45
00:02:42,724 --> 00:02:43,864
it could become a bottleneck.

46
00:02:44,364 --> 00:02:49,589
A distributed system on the other hand
is, it disperses, data and resources

47
00:02:49,589 --> 00:02:51,509
over several, server locations.

48
00:02:52,169 --> 00:02:55,009
maybe like frequently across
various, physical places.

49
00:02:55,609 --> 00:02:57,919
This gives better
scalability and reliability.

50
00:02:58,159 --> 00:03:01,039
since the system can function in
the event like, in the event of a

51
00:03:01,039 --> 00:03:04,969
component failure, however, because
of the numerous point of interactions,

52
00:03:05,049 --> 00:03:10,079
distributed systems can also, Be difficult
to secure and, administer as well.

53
00:03:10,719 --> 00:03:13,579
like we have, heard of like
various distributed systems.

54
00:03:13,629 --> 00:03:15,789
the terminology I think we are
very much familiar of, like

55
00:03:15,789 --> 00:03:20,739
client server architecture, three
to architecture, microservices,

56
00:03:20,779 --> 00:03:25,429
architecture, even given architecture,
service oriented architecture.

57
00:03:25,849 --> 00:03:28,109
So these are the various common, patterns.

58
00:03:28,109 --> 00:03:28,499
We, we.

59
00:03:29,199 --> 00:03:31,699
we hear like an everyday,
in our software world.

60
00:03:32,199 --> 00:03:35,559
so basically, the distributed
applications like, they're designed

61
00:03:35,649 --> 00:03:40,159
for, to improve performance,
scalability, and, reliability.

62
00:03:40,519 --> 00:03:46,239
So examples like, Netflix, Amazon,
Spotify, so these applications, so like

63
00:03:46,239 --> 00:03:49,979
in how they can handle vast amounts
of data and user request showcasing

64
00:03:49,979 --> 00:03:51,809
their importance in modern technology.

65
00:03:52,359 --> 00:03:55,649
So that's how it's, the distributed
systems are so important,

66
00:03:55,699 --> 00:03:57,509
in software, architecture.

67
00:03:58,009 --> 00:04:01,309
this diagram briefly shows like
on a very high level, how, the

68
00:04:01,309 --> 00:04:03,109
nodes are connected to a server.

69
00:04:03,109 --> 00:04:06,139
and similarly there is another cluster
which is connected over the network.

70
00:04:06,699 --> 00:04:10,819
so both of them working as
a, single coherent system.

71
00:04:11,319 --> 00:04:15,209
Let's move on to the next slide,
which is about, the key principles of,

72
00:04:15,259 --> 00:04:16,724
designing distributed applications.

73
00:04:17,224 --> 00:04:21,884
all, the major applications which are on,
let's say like in a banking application or

74
00:04:21,884 --> 00:04:26,304
maybe let's say, Gmail, for instance, the
key principles, which is followed while

75
00:04:26,304 --> 00:04:32,155
designing a, distributed, application,
which is, of very high importance, is, Is

76
00:04:32,215 --> 00:04:35,275
scalability, availability and reliability.

77
00:04:35,275 --> 00:04:38,905
Fault tolerance, maintainability security.

78
00:04:39,355 --> 00:04:44,045
So these are, the main, principles
which to consider, when designing,

79
00:04:44,085 --> 00:04:45,435
distribute applications.

80
00:04:45,435 --> 00:04:50,500
I. like scalability ensures that the
system can handle increased load by adding

81
00:04:50,500 --> 00:04:57,140
resources, reliability, ensures that,
the system can recover from failures.

82
00:04:57,620 --> 00:05:01,680
Fault tolerance, a ensures that the
system can continue to over it, even if

83
00:05:01,680 --> 00:05:04,320
there is some components like that fails.

84
00:05:05,310 --> 00:05:10,640
performance, basically is ensures that
the system can respond to, quickly to user

85
00:05:10,700 --> 00:05:13,070
requests that's connected to scalability.

86
00:05:13,850 --> 00:05:17,330
So these are the major principles like, we
have, we need to keep into consideration

87
00:05:17,380 --> 00:05:21,670
while designing, distribute applications,
which, which is of very high importance.

88
00:05:22,170 --> 00:05:26,690
Here in this, slide, we will basically
listed, the main, architectural patterns.

89
00:05:26,740 --> 00:05:30,850
there are many patterns, but these, the
most, commonly used and important ones.

90
00:05:30,920 --> 00:05:34,520
I have listed here, so we be before,
before you go there, we have heard

91
00:05:34,520 --> 00:05:36,490
a lot about, architectural patterns.

92
00:05:36,580 --> 00:05:38,590
So what are architectural patterns?

93
00:05:39,370 --> 00:05:41,640
Architectural patterns, are, are the.

94
00:05:42,435 --> 00:05:45,525
Are designed to provide solution
to common design problems.

95
00:05:45,575 --> 00:05:48,865
this, there, the, in software
design we may have encountered, many

96
00:05:48,865 --> 00:05:50,425
kinds of similar sort of problems.

97
00:05:50,475 --> 00:05:54,945
so the architectural designs, which
provide solution to those common designs

98
00:05:54,945 --> 00:05:56,815
are called, architectural patterns.

99
00:05:57,315 --> 00:06:01,245
for distributed applications, for
building distributor applications

100
00:06:01,245 --> 00:06:05,865
like, the major, architectural patterns
nowadays, which are being followed, in

101
00:06:05,865 --> 00:06:12,395
modern applications, are, microservices,
event driven architecture, c qras, that

102
00:06:12,395 --> 00:06:17,195
is command and query responsibility
segregation, then service miss.

103
00:06:17,695 --> 00:06:21,635
microservices are, is, we'll go
into these ones in detail later on.

104
00:06:21,665 --> 00:06:25,335
but very briefly, microservices,
involve breaking down an application

105
00:06:25,335 --> 00:06:28,345
to very smaller, components,
which can be independently

106
00:06:28,345 --> 00:06:30,145
developed and deployed and scaled.

107
00:06:30,145 --> 00:06:32,575
I. command, query responsibility.

108
00:06:32,575 --> 00:06:37,055
Segregation is a design pattern
which segregates, read and write

109
00:06:37,055 --> 00:06:38,585
operations in a data store.

110
00:06:38,635 --> 00:06:42,255
this approach allows, each model
to be optimized independently.

111
00:06:42,885 --> 00:06:46,295
There are, drawbacks to this model
as well, but, wherever possible,

112
00:06:46,295 --> 00:06:50,215
and if you follow this, in pattern,
like it definitely gives benefits.

113
00:06:50,965 --> 00:06:54,565
A service mess is a dedicated
infrastructure layer that manages

114
00:06:54,565 --> 00:06:58,815
communication between different,
microservices, in a software applications.

115
00:06:58,815 --> 00:07:03,975
So it provides tools and capabilities to
handle tasks like load balancing, security

116
00:07:03,975 --> 00:07:09,065
monitoring, ensuring, efficient and secure
interactions between those services.

117
00:07:09,635 --> 00:07:11,595
So that's, service mesh.

118
00:07:12,375 --> 00:07:15,855
Now, in the next few slides,
we'll go into detail, a little bit

119
00:07:15,855 --> 00:07:17,945
detail of, these architectures.

120
00:07:18,325 --> 00:07:20,365
we'll cover them, as much as we can.

121
00:07:20,865 --> 00:07:24,385
microservices architecture is a method
of, software development where an

122
00:07:24,385 --> 00:07:29,405
application is broken down into smaller,
independent and loosely coupled services.

123
00:07:30,045 --> 00:07:35,375
each service is, designed to fulfill
a specific business function that

124
00:07:35,375 --> 00:07:38,795
can be, developed, and deployed
and maintained independently.

125
00:07:39,525 --> 00:07:43,535
this approach actually contrast with the
traditional, monolithic, architecture

126
00:07:43,535 --> 00:07:48,425
where all functionalities are tightly
integrated into a single, code base.

127
00:07:48,925 --> 00:07:53,475
the key principles around,
microservices, pattern is, independent

128
00:07:53,475 --> 00:07:55,095
development and, deployment.

129
00:07:55,660 --> 00:07:58,980
so each component can be developed
and deployed independently.

130
00:07:58,980 --> 00:08:05,030
So this helps, in faster, development
cycles, small focused teams.

131
00:08:05,250 --> 00:08:09,070
each team can be like, handled,
given a, specific service so

132
00:08:09,100 --> 00:08:10,420
they can walk independently.

133
00:08:10,900 --> 00:08:14,680
Technology diversity, so each
different microservice can be

134
00:08:14,680 --> 00:08:16,550
based on different, technologies.

135
00:08:16,770 --> 00:08:21,800
which is can leverage different
skills of the teams, fault isolation.

136
00:08:21,880 --> 00:08:25,630
if one microservice fails, then
doesn't affect the entire, application.

137
00:08:25,630 --> 00:08:27,735
I. definitely scalability.

138
00:08:28,035 --> 00:08:32,745
Scalability is a huge advantage in
microservices application that each

139
00:08:32,745 --> 00:08:36,905
component or each microservices can
be allowed to scale independently.

140
00:08:37,115 --> 00:08:40,585
so it doesn't, we don't have
to scale the whole application.

141
00:08:41,005 --> 00:08:42,085
So that's a huge benefit.

142
00:08:42,585 --> 00:08:44,175
how does microservices work?

143
00:08:44,175 --> 00:08:47,705
Basically, microservices communicate
with each other, through well-defined

144
00:08:47,735 --> 00:08:52,815
APIs, often using, rest event
streaming message brokers.

145
00:08:53,115 --> 00:08:56,185
So each service has its own
database, ensuring like a data

146
00:08:56,185 --> 00:08:57,985
autonomy and reducing dependencies.

147
00:08:58,685 --> 00:09:02,535
this promotes, flexibility,
ease of development, and very,

148
00:09:02,535 --> 00:09:03,885
like an easy maintenance.

149
00:09:04,840 --> 00:09:08,120
if you summarize the benefits like,
it's, the modularity and decoupling,

150
00:09:08,630 --> 00:09:12,980
scalability, technology, diversity,
rapid deployment, continuous

151
00:09:12,980 --> 00:09:18,160
delivery, however microservices
comes with, challenges as well.

152
00:09:18,770 --> 00:09:21,610
it's very complex to maintain,
like the managing, multiple micro,

153
00:09:21,850 --> 00:09:26,330
very complex, managing multiple
microservices, may require very careful,

154
00:09:26,430 --> 00:09:28,800
orchestration and monitoring as well.

155
00:09:29,775 --> 00:09:33,245
Testing, as a coherent model may
be very difficult, because of

156
00:09:33,245 --> 00:09:34,805
their inter interdependencies.

157
00:09:35,745 --> 00:09:40,835
data consistency across, microservices
can also be challenging because these are

158
00:09:40,835 --> 00:09:43,425
all independent, independent, services.

159
00:09:44,085 --> 00:09:44,445
let.

160
00:09:45,045 --> 00:09:47,955
Network latency as well, because
there's a lot of communications

161
00:09:47,955 --> 00:09:52,565
involved between those services, so
it can lead to, increase in, latency.

162
00:09:53,065 --> 00:09:56,255
So this is very briefly covering,
covered where, we covered,

163
00:09:56,255 --> 00:09:57,515
the microservice architecture.

164
00:09:57,515 --> 00:10:00,895
Let's move on to, the event given
architecture in the next slide.

165
00:10:01,395 --> 00:10:04,755
In this slide, we'll briefly cover,
the event given architecture.

166
00:10:05,145 --> 00:10:10,235
A-K-A-E-D-A, event driven architecture,
software design pattern where, S

167
00:10:10,265 --> 00:10:14,515
where systems, system components
basically communicate by, generating,

168
00:10:14,935 --> 00:10:16,855
detecting, and responding to events.

169
00:10:17,685 --> 00:10:21,565
events, basically represent
significant occurrences such as, user

170
00:10:21,565 --> 00:10:24,295
actions or, change in systems state.

171
00:10:25,245 --> 00:10:28,145
in EDA, the components are
decoupled, allowing them like

172
00:10:28,235 --> 00:10:29,765
to operate independently.

173
00:10:30,215 --> 00:10:32,195
When an event occurs, a message is sent.

174
00:10:32,235 --> 00:10:35,545
Triggering, the appropriate
response, in other components.

175
00:10:36,055 --> 00:10:41,915
So again, in this, architecture also, the
key principles involved are, decoupling.

176
00:10:42,315 --> 00:10:45,835
this is one of the major, advantage
of, ED architectures, like it's

177
00:10:46,195 --> 00:10:49,645
decoupled relationship between front
end and the backend components is

178
00:10:49,645 --> 00:10:52,795
allow system to share information
without knowing about each other.

179
00:10:53,550 --> 00:10:57,540
So producers can send events without
knowing which consumer will receive

180
00:10:57,540 --> 00:11:01,050
them, and consumers can receive
events without sending requests to

181
00:11:01,050 --> 00:11:03,770
producers, as synchronous communication.

182
00:11:03,770 --> 00:11:07,940
it's basically EDA enables, as
in communication where components

183
00:11:08,330 --> 00:11:12,090
operate independently and as
synchronously, in response to events.

184
00:11:12,090 --> 00:11:15,900
This allows for parallel processing,
real time pro responsiveness as well.

185
00:11:16,400 --> 00:11:21,080
event handling, events are typically
handled like using a publish,

186
00:11:21,480 --> 00:11:23,100
subscribe model, popup model.

187
00:11:23,600 --> 00:11:26,120
So components, interest in
certain types of events, subscribe

188
00:11:26,120 --> 00:11:29,240
to them while component that
generate events, publish them.

189
00:11:29,240 --> 00:11:33,830
So this model, allows for
flexible, scalable, communication

190
00:11:33,830 --> 00:11:34,760
between the components.

191
00:11:35,260 --> 00:11:38,160
if we cover, briefly touch upon
what are the main components of

192
00:11:38,160 --> 00:11:42,440
EDA, it's even source, any component
system that are generat events.

193
00:11:42,830 --> 00:11:47,200
such as sensors, databases,
interface, user interfaces.

194
00:11:47,700 --> 00:11:49,860
Event broker, or basically even bus.

195
00:11:49,890 --> 00:11:51,660
we may have heard it a lot, many times.

196
00:11:51,990 --> 00:11:56,160
So it's an intermediary, middleware
that facilitates the communication

197
00:11:56,160 --> 00:11:58,510
of events between, the components.

198
00:11:59,050 --> 00:12:03,850
So it handles the distribution,
filtering, and routing of events.

199
00:12:04,350 --> 00:12:08,280
a publisher like an A component that
generates, sense event to the event bus.

200
00:12:08,780 --> 00:12:12,810
Subscriber, the component that, like
an expresses interest in those specific

201
00:12:12,810 --> 00:12:14,550
type of events and subscribe to them.

202
00:12:15,060 --> 00:12:18,030
So subscribers like can always
listen for events, on the event

203
00:12:18,030 --> 00:12:20,330
bus and respond, accordingly.

204
00:12:20,830 --> 00:12:25,550
event handler, is a, is a piece of
code or logic like an associated

205
00:12:25,550 --> 00:12:29,660
with a subscriber that specifies
like how to respond when a particular

206
00:12:29,660 --> 00:12:32,790
type of event is, is, is received.

207
00:12:33,290 --> 00:12:37,910
So benefits of, ED architecture, again,
like other, it's flexibility and agility.

208
00:12:38,520 --> 00:12:42,750
it, it allows to adapt easily to
changing requirements, scalability.

209
00:12:42,800 --> 00:12:45,560
it supports scalability by
allowing components to come

210
00:12:45,590 --> 00:12:47,030
to, to operate independently.

211
00:12:47,740 --> 00:12:52,390
systems can handle increased
load or drain data sets by adding

212
00:12:52,390 --> 00:12:54,040
more components to the resources.

213
00:12:54,540 --> 00:12:55,920
Real time responsiveness.

214
00:12:56,020 --> 00:13:00,480
so EDA, one of the major strengths of EDA
is like in real time processing, ensuring

215
00:13:00,480 --> 00:13:02,130
that events are handled as they occur.

216
00:13:02,130 --> 00:13:06,560
So this is, that's why like an EDA is
used in a lot, many financial, like

217
00:13:06,560 --> 00:13:08,780
in applications and IOT applications.

218
00:13:09,470 --> 00:13:11,330
Enhance, modularity as well.

219
00:13:12,220 --> 00:13:15,470
like any other, click the pattern,
BDS has got drawbacks as well.

220
00:13:15,550 --> 00:13:17,610
definitely it's a very complex, system.

221
00:13:18,570 --> 00:13:22,530
then, consistency, like the mentoring, the
order of events and ensuring consistency

222
00:13:22,530 --> 00:13:24,930
across the system can be very complex.

223
00:13:25,410 --> 00:13:29,285
Debugging and tracing as
well, is, is very, Challenging

224
00:13:29,525 --> 00:13:30,905
compared to other architectures.

225
00:13:31,815 --> 00:13:35,595
use cases of EDA is like a financial
services, I said like real time processing

226
00:13:35,595 --> 00:13:41,065
of transactions, fraud detection,
e-commerce, like order placements,

227
00:13:41,065 --> 00:13:43,795
inventory updates, internet of things.

228
00:13:43,825 --> 00:13:47,380
is a very, like a good use
case for, the ED architecture.

229
00:13:47,880 --> 00:13:51,990
telecommunications, like network
monitoring, event driven r communication

230
00:13:51,990 --> 00:13:53,250
with network and components.

231
00:13:53,490 --> 00:13:56,800
Healthcare also, monitoring
patient data, handling medical

232
00:13:56,800 --> 00:13:58,300
alerts and those kind of things.

233
00:13:58,800 --> 00:14:02,850
this is very briefly it's a past topic,
but we've covered it very briefly.

234
00:14:02,850 --> 00:14:06,620
what are, the major components,
their benefits and the challenges.

235
00:14:06,650 --> 00:14:09,880
We'll move to the next, architecture,
which is A-C-Q-R-S pattern.

236
00:14:10,190 --> 00:14:10,940
in the next slide.

237
00:14:11,440 --> 00:14:15,850
in the slide, we'll briefly, cover,
the CQRS pattern, architecture pattern.

238
00:14:16,270 --> 00:14:21,610
So command and query responsibility,
segregation, c qrs, separate read and

239
00:14:21,700 --> 00:14:25,800
write operations like, optimizing,
optimizing like you both, ments for both.

240
00:14:25,850 --> 00:14:27,300
read and write, operations.

241
00:14:27,830 --> 00:14:31,190
So in a traditional architecture,
where we have single data

242
00:14:31,190 --> 00:14:34,190
model is often associated,
both read and write operations.

243
00:14:34,190 --> 00:14:38,670
So this approach, is very straightforward
and suited for basic, crude applications,

244
00:14:38,670 --> 00:14:43,530
operations, but, in modern kind of
applications like, it, poses like a lot

245
00:14:43,530 --> 00:14:45,420
of challenges, mainly around performance.

246
00:14:45,920 --> 00:14:49,130
some of the issues like, with that
approach was like, data mismatch.

247
00:14:49,500 --> 00:14:53,070
the read write, the read and write
representations of data often differ.

248
00:14:53,070 --> 00:14:56,820
Sometimes, the fields that are required
during updates might not be, might be

249
00:14:56,820 --> 00:14:58,560
unnecessary, during read operations.

250
00:14:59,190 --> 00:15:03,300
lock contention, performance problems,
can have a negative, know the traditional

251
00:15:03,300 --> 00:15:06,180
approach can have a negative effect
on the performance because both 'cause

252
00:15:06,180 --> 00:15:10,020
a load on the data store and the data
access layer and the complex request.

253
00:15:10,020 --> 00:15:12,410
You got to re tribe, a lot of information.

254
00:15:12,410 --> 00:15:16,269
which, which is which impacts, the read
and write as well, like at the same time.

255
00:15:16,999 --> 00:15:18,409
security challenges as well.

256
00:15:18,469 --> 00:15:21,109
It can be difficult to manage
security when entities are

257
00:15:21,109 --> 00:15:22,129
subject to read and right.

258
00:15:22,129 --> 00:15:22,699
Operations.

259
00:15:22,699 --> 00:15:27,039
So this overlap can expose data
in like an unintended context.

260
00:15:27,039 --> 00:15:31,929
There are instance where it happened,
so the solution, is, to these problems

261
00:15:31,929 --> 00:15:35,799
is A-C-Q-R-S pattern, where, we use
the CQRS to separate the read and

262
00:15:35,799 --> 00:15:39,754
write operations or basically commands
from the read operations or queries.

263
00:15:40,294 --> 00:15:42,334
So that's what, like it
says, command and queries.

264
00:15:42,334 --> 00:15:47,044
So command commands, update
data queries, retried data.

265
00:15:47,544 --> 00:15:52,314
the is useful in scenarios where
that require a clear separation

266
00:15:52,314 --> 00:15:55,854
between commands and so it's
not applicable in all scenarios.

267
00:15:56,354 --> 00:15:59,744
But wherever there is an
opportunity, we should use it.

268
00:16:00,674 --> 00:16:04,504
so separating the read and read model and
the right model simplifies, the system

269
00:16:04,504 --> 00:16:09,254
design, of course, like an if the system
design allows it to, that use case,

270
00:16:09,644 --> 00:16:11,504
if it is applicable to that use case.

271
00:16:12,224 --> 00:16:16,664
So it, it simplifies system design and
implementation by addressing, specific

272
00:16:16,664 --> 00:16:18,764
concerns for data rights and data reads.

273
00:16:19,494 --> 00:16:21,944
it increases clarity,
scalability, performance,

274
00:16:21,994 --> 00:16:23,564
because those are, now separated.

275
00:16:24,064 --> 00:16:28,204
so if you summarize the benefits of
cqs, it'll be like dependent scaling.

276
00:16:28,204 --> 00:16:32,674
So we can independently scale like, the
command and the query part, separately.

277
00:16:33,569 --> 00:16:35,189
the schemas are now optimized.

278
00:16:35,249 --> 00:16:37,409
They're either right,
optimized or read optimized.

279
00:16:37,739 --> 00:16:41,939
So definitely there's a lot of increase
like in performance security, and also,

280
00:16:42,319 --> 00:16:45,799
by separating data and rights, you
can ensure that only the appropriate

281
00:16:45,799 --> 00:16:49,159
domain entities or preparations have
permission to perform, right application,

282
00:16:49,159 --> 00:16:54,529
right actions on the data or maybe like
on the read, separation of concerns.

283
00:16:54,679 --> 00:16:55,569
then, basically it.

284
00:16:56,069 --> 00:16:59,729
the writing of the queries
can become a lot simpler.

285
00:17:00,229 --> 00:17:03,859
then simpler queries, when you square
much less view on the read database,

286
00:17:04,099 --> 00:17:07,799
the application can avoid, like
in writing complex, very complex.

287
00:17:07,799 --> 00:17:11,339
who has, anybody who has written,
a complicated query can understand,

288
00:17:11,339 --> 00:17:14,219
like the joints can extend and
the query can be quite big.

289
00:17:14,609 --> 00:17:18,549
So if, the, The design
allows us to use this one.

290
00:17:18,549 --> 00:17:20,259
We should definitely use this one.

291
00:17:20,759 --> 00:17:23,949
in, in the next, slide, we
will go over briefly, to the

292
00:17:23,949 --> 00:17:25,629
service, mesh architecture.

293
00:17:26,129 --> 00:17:29,519
So in this slide, we'll briefly touch
upon, the Service MES architecture.

294
00:17:29,819 --> 00:17:35,869
So service, is a. Dedicated infrastructure
layer, that, that manages, manages all

295
00:17:35,869 --> 00:17:39,009
the communication between the market
services, in a software application.

296
00:17:39,009 --> 00:17:43,649
So it provide tools, and capabilities
to handle, the task like load

297
00:17:43,649 --> 00:17:47,879
balancing, security monitoring,
ensuring the efficient and, secure in

298
00:17:48,029 --> 00:17:49,799
interaction between those services.

299
00:17:50,789 --> 00:17:52,409
The, it has two main components.

300
00:17:52,409 --> 00:17:55,689
One is the data plane, the
other is control, plane.

301
00:17:56,529 --> 00:18:00,699
so data plane is basically it's
a, it considers sidecar proxies

302
00:18:00,699 --> 00:18:04,359
that handle the actual transfer
of data between the services.

303
00:18:05,269 --> 00:18:08,419
they also implement like features like
load balancing, service discovery,

304
00:18:08,419 --> 00:18:13,529
traffic routing, and control plane,
acts, as a central management layer.

305
00:18:13,569 --> 00:18:18,269
it, it allows the administrative define
and configure services, within the mess.

306
00:18:18,329 --> 00:18:22,539
specific parameters like, the service
endpoint, routing rules, load balancing

307
00:18:22,539 --> 00:18:24,659
policies, and security settings.

308
00:18:25,159 --> 00:18:29,309
it has got this architecture has got
benefits, namely service discovery, load

309
00:18:29,309 --> 00:18:34,209
balancing, traffic management, security,
and monitoring and observability.

310
00:18:34,709 --> 00:18:35,969
it has got challenges as well.

311
00:18:36,149 --> 00:18:38,879
Like it's very, it one
of the main challenges.

312
00:18:38,879 --> 00:18:40,139
Like it's very complex.

313
00:18:40,639 --> 00:18:43,369
It involves a lot of communication
between the microservices, so there

314
00:18:43,369 --> 00:18:45,019
is a performance over it as well.

315
00:18:45,949 --> 00:18:49,249
There is operational overhead,
like there's a lot of operational

316
00:18:49,249 --> 00:18:53,079
effort that goes into maintaining,
deploying, configuring, these,

317
00:18:53,079 --> 00:18:56,989
this architecture and also that
like the lining curve is very high.

318
00:18:57,489 --> 00:19:02,029
designing a distributed application, comes
with several kind of challenges, which

319
00:19:02,029 --> 00:19:04,679
we have to, which we have to address.

320
00:19:05,309 --> 00:19:08,789
so namely the network
latency data inconsistency.

321
00:19:09,289 --> 00:19:12,559
Service discovery complexity,
then distribute transactions.

322
00:19:12,929 --> 00:19:16,329
and eventual con
consistency, the security.

323
00:19:17,099 --> 00:19:22,429
so all these are, common challenges,
when we have to address, while, while

324
00:19:22,429 --> 00:19:24,109
designing a distributed application.

325
00:19:24,609 --> 00:19:27,809
In this slide, we'll we
listed, the various, ways we

326
00:19:27,809 --> 00:19:29,069
are very much aware of those.

327
00:19:29,149 --> 00:19:33,759
the tools or methodologies like, for,
for designing or increasing scalability,

328
00:19:33,759 --> 00:19:37,729
like horizonal scaling, which is like
an adding more nodes or, computers.

329
00:19:37,779 --> 00:19:41,919
vertical scaling is like an adding more
resources within a particular computer.

330
00:19:41,919 --> 00:19:44,919
So that's called vertical
stateless and stateful.

331
00:19:45,039 --> 00:19:47,829
So we should always go
for, stateless designs.

332
00:19:48,359 --> 00:19:51,859
load balancing, So there, there are
tools like, which are, available, but,

333
00:19:52,289 --> 00:19:56,529
which follow these kind of like round
robin, list connections go geo based.

334
00:19:56,529 --> 00:19:58,319
So these are the, tools.

335
00:19:58,349 --> 00:20:01,199
there are tools available, which
help us to do, achieve all these,

336
00:20:01,299 --> 00:20:04,539
strategies, implement all these
strategies for, scalability.

337
00:20:05,169 --> 00:20:06,699
so we have to like you use them.

338
00:20:07,199 --> 00:20:09,929
In this slide, like when I have
listed out, the best practices,

339
00:20:09,929 --> 00:20:13,179
which are normally followed where,
while designing like distributed

340
00:20:13,179 --> 00:20:15,409
applications, Designing for failure.

341
00:20:15,409 --> 00:20:19,759
Like it's a first and foremost,
fundamental, principle or practice.

342
00:20:19,759 --> 00:20:23,449
we should apply, we should design
the application for failure.

343
00:20:24,059 --> 00:20:28,589
that means we, we assume like that
the application can fail in multiple,

344
00:20:28,589 --> 00:20:33,839
several ways and we just, designed
for, to avoid that, using stateless

345
00:20:33,839 --> 00:20:35,959
comp, stateless component, components.

346
00:20:36,359 --> 00:20:37,529
CICD using.

347
00:20:37,734 --> 00:20:41,614
then, the observability and monitoring
tools, this is, this has become

348
00:20:41,614 --> 00:20:43,264
a very important topic nowadays.

349
00:20:43,504 --> 00:20:48,034
then practicing fault tolerance,
security, load balancing.

350
00:20:48,534 --> 00:20:51,874
Event driven communications,
so domain event design, then,

351
00:20:51,974 --> 00:20:53,144
adopting chaos engineering.

352
00:20:53,144 --> 00:20:55,474
So these other things like,
which we should consider

353
00:20:55,474 --> 00:20:57,364
definitely into consideration.

354
00:20:57,364 --> 00:20:59,999
when we design, distributed
applications, I.

355
00:21:00,499 --> 00:21:03,919
With this, slide we have come to
near the end of the presentation.

356
00:21:03,999 --> 00:21:06,819
so here I've tried to summarize
like, the key takeaways.

357
00:21:06,899 --> 00:21:08,639
so it all depends.

358
00:21:08,639 --> 00:21:09,089
though, when we.

359
00:21:09,189 --> 00:21:11,829
Talk about architectural
patterns, like it all depends on

360
00:21:12,219 --> 00:21:13,539
the right architecture choice.

361
00:21:13,539 --> 00:21:17,339
So we have to choose a pattern
based on, based on the fitment and

362
00:21:17,429 --> 00:21:19,249
suitability, for a particular use case.

363
00:21:19,749 --> 00:21:24,199
and obviously continuous refinement,
this is a very important one, even if

364
00:21:24,259 --> 00:21:27,689
there's an architecture like which is
implemented now, there can be like,

365
00:21:27,689 --> 00:21:32,819
enhancements or, opportunities to, to
use, other patterns as well as you go

366
00:21:32,819 --> 00:21:34,469
along, and as the application matures.

367
00:21:34,469 --> 00:21:36,089
So we have to always be open to that.

368
00:21:37,034 --> 00:21:40,394
so also challenges, like there'll be
challenges and we have to proactively

369
00:21:40,394 --> 00:21:44,114
deal with them and we have to, as an
architect, and we have to anticipate the

370
00:21:44,114 --> 00:21:49,424
challenges, for the next three to four
years timeline, and then plan accordingly.

371
00:21:50,384 --> 00:21:53,564
One thing, which is, lemme just come
up very strongly, with the very,

372
00:21:53,614 --> 00:21:55,324
these microservices event driven.

373
00:21:55,604 --> 00:21:56,654
and the cloud deployment.

374
00:21:56,654 --> 00:21:59,744
investing in strong monitoring
and observability tools,

375
00:21:59,744 --> 00:22:00,944
this is very critical.

376
00:22:01,444 --> 00:22:05,294
I. with this, we have come to the end
of the presentation, so I, I've opened

377
00:22:05,294 --> 00:22:07,124
the floor for questions and answers.

378
00:22:07,634 --> 00:22:10,004
there's an opportunity to clarify
any points we discussed today.

379
00:22:10,054 --> 00:22:13,144
your insights and inquiries are
extremely valuable for me, so please

380
00:22:13,144 --> 00:22:14,524
feel free to share your thoughts.

381
00:22:14,984 --> 00:22:18,714
you can also drop me, email, or reach
me individual like later on as well.

382
00:22:19,214 --> 00:22:20,624
thank you so much for your attention.

383
00:22:20,724 --> 00:22:24,684
please feel free to ask any questions
you may have, but I really appreciate

384
00:22:24,694 --> 00:22:26,764
your time and, and your patience today.

385
00:22:26,884 --> 00:22:27,814
Thank you so much.

386
00:22:27,814 --> 00:22:28,624
Have a great day.

