1
00:00:00,500 --> 00:00:02,529
Welcome and thanks everyone for tuning in.

2
00:00:02,920 --> 00:00:03,939
I'm Anisha Kouri.

3
00:00:04,029 --> 00:00:05,290
I'm a senior software developer.

4
00:00:05,500 --> 00:00:07,540
I'm truly honored to be here at Confe 42.

5
00:00:08,020 --> 00:00:11,110
In this talk, we'll explore how
low code and public code can

6
00:00:11,110 --> 00:00:13,809
come together to simplify and
scale modern software delivery.

7
00:00:14,309 --> 00:00:17,490
We are living in a world where digital
transformation is no longer optional.

8
00:00:17,640 --> 00:00:21,959
Every organization, whether the public
or private, must deliver services faster,

9
00:00:22,260 --> 00:00:24,240
more transparently, and at lower cost.

10
00:00:24,690 --> 00:00:27,930
Citizens expect government
apps to work like Uber.

11
00:00:28,110 --> 00:00:29,760
Employees are expecting internal tools.

12
00:00:30,105 --> 00:00:34,364
To be as in Q2 as Slack executors are
expecting data insights in real time.

13
00:00:34,875 --> 00:00:35,685
Traditional coding.

14
00:00:35,685 --> 00:00:39,705
While it's powerful, flexible, and often
essential, it has become bottleneck.

15
00:00:40,004 --> 00:00:41,955
Skilled developers are in a short supply.

16
00:00:42,315 --> 00:00:47,414
According to IDC, there will be a shortage
of 4 million developers globally by 2026.

17
00:00:47,985 --> 00:00:50,175
This stock is about more
than this technology.

18
00:00:50,324 --> 00:00:53,295
It's about rethinking how
we design, build, and govern

19
00:00:53,295 --> 00:00:55,035
software in 21st century.

20
00:00:55,535 --> 00:00:57,664
These are the topics
I'll be covering today.

21
00:00:57,934 --> 00:01:01,085
The challenges of traditional coding
and why the change is necessary.

22
00:01:01,504 --> 00:01:05,134
What is low code really is beyond
the buzzword, the core principles

23
00:01:05,134 --> 00:01:08,704
behind public code architectural
patterns that allow low code and

24
00:01:08,704 --> 00:01:09,875
public code to work together.

25
00:01:10,384 --> 00:01:13,384
Governance and engineering standards
that make these approaches reliable.

26
00:01:14,074 --> 00:01:18,419
Integration in real practice with
real world examples, case studies

27
00:01:18,544 --> 00:01:21,484
and scenarios across the government,
enterprise and healthcare.

28
00:01:21,875 --> 00:01:24,035
The challenges and pitfalls
we must acknowledge.

29
00:01:24,285 --> 00:01:28,514
Future directions, including aa assistant,
low code and digital government, a

30
00:01:28,514 --> 00:01:30,104
conclusion that ties all together.

31
00:01:30,604 --> 00:01:33,095
Traditional coding has given
us the digital world we live in

32
00:01:33,095 --> 00:01:37,294
today, but the model is showing
its cracks under new demands speed.

33
00:01:37,475 --> 00:01:41,315
Atypical enterprise application can take
six to 12 months to develop and release.

34
00:01:41,494 --> 00:01:41,975
By then.

35
00:01:42,035 --> 00:01:43,475
Business needs have often shifted.

36
00:01:43,914 --> 00:01:44,365
Cost.

37
00:01:44,484 --> 00:01:48,594
According to standardish Group Ks
report, over 50% of software projects

38
00:01:48,774 --> 00:01:53,844
either fail out rate or delivered
late, and or budget talent demand

39
00:01:53,844 --> 00:01:55,585
for developers outpaces supply.

40
00:01:56,184 --> 00:01:59,815
On the business side, customers are
expecting updates weekly, not yearly.

41
00:02:00,114 --> 00:02:02,604
Regulators are expecting
transparency and complaints.

42
00:02:02,604 --> 00:02:04,074
Beg them both.

43
00:02:04,074 --> 00:02:07,134
And executors expect a clear
written of investment from

44
00:02:07,134 --> 00:02:08,304
every technology investment.

45
00:02:09,169 --> 00:02:13,100
Low code addresses the speed and access
problem by letting the teams build faster.

46
00:02:13,640 --> 00:02:16,429
Public code addresses the trust
and sustainability problem by

47
00:02:16,429 --> 00:02:19,399
making the software transparent
and auditable together.

48
00:02:19,459 --> 00:02:21,260
They're not just incremental improvements.

49
00:02:21,380 --> 00:02:23,510
They represent a new paradigm
in software delivery.

50
00:02:24,010 --> 00:02:24,609
What is low?

51
00:02:25,109 --> 00:02:28,709
Low code is often misunderstood as just
drag and drop coding, but it's much more.

52
00:02:29,280 --> 00:02:32,220
The key dimensions of low code
are visual development, drag and

53
00:02:32,220 --> 00:02:36,179
drop workflows, UI builders and
configuration over code prebuilt

54
00:02:36,179 --> 00:02:40,500
components connected for databases,
APAs authentication and notifications.

55
00:02:40,950 --> 00:02:44,790
Rapid prototyping, the ability to
go from idea to functional, proof

56
00:02:44,790 --> 00:02:48,779
of concept in days, collaboration,
empowering both developers and

57
00:02:48,779 --> 00:02:50,190
business experts to contribute.

58
00:02:50,690 --> 00:02:52,640
Gartner forecast that 2026.

59
00:02:53,060 --> 00:02:55,579
Three quarters of all new
applications will be built using

60
00:02:55,579 --> 00:02:57,320
low code or no code platforms.

61
00:02:57,620 --> 00:03:00,920
A global bank use low code to
automate its compliance reporting.

62
00:03:01,250 --> 00:03:04,700
What used to take 20 developers
six months was accomplished by a

63
00:03:04,700 --> 00:03:08,210
hybrid team of five developers and
five analysts in just eight weeks.

64
00:03:08,710 --> 00:03:09,610
What is public code?

65
00:03:10,150 --> 00:03:14,230
Public code is about a software that
is built in open with accountability,

66
00:03:14,260 --> 00:03:15,790
transparency, and usability.

67
00:03:15,790 --> 00:03:20,020
At its core, the three principles
of public code are openness

68
00:03:20,260 --> 00:03:23,020
code is shared publicly, often
under open source licenses.

69
00:03:23,380 --> 00:03:28,180
Transparency architectures under
documentations are auditable, reusability.

70
00:03:28,270 --> 00:03:31,270
Other organizations can adopt the
software instead of reinventing it.

71
00:03:31,840 --> 00:03:33,580
Why does it matter in government?

72
00:03:33,580 --> 00:03:34,810
It builds the citizen trust.

73
00:03:35,455 --> 00:03:37,915
When a city launches a new
digital service, people can see

74
00:03:37,915 --> 00:03:39,895
how it works in enterprises.

75
00:03:40,255 --> 00:03:44,905
It prevents vendor locking and ensures
knowledge is not siloed in communities.

76
00:03:45,145 --> 00:03:47,575
It foster collaboration
and collective innovation.

77
00:03:48,115 --> 00:03:51,055
Public code is essentially the
open source move in adopted

78
00:03:51,055 --> 00:03:52,465
for institution accountability

79
00:03:52,965 --> 00:03:56,144
architectural patterns when low
code and public code converge.

80
00:03:56,325 --> 00:03:57,345
Architecture is critical.

81
00:03:58,125 --> 00:04:00,704
These are some of the patterns
that we, that can make it work.

82
00:04:00,945 --> 00:04:04,964
Hybrid workflows, user facing layers
are designed in low code, while core

83
00:04:04,964 --> 00:04:06,344
business logic is in public code.

84
00:04:07,094 --> 00:04:07,755
Customer support.

85
00:04:07,755 --> 00:04:12,074
Chatbots built in low code, but escalating
logic coded can be coded openly.

86
00:04:12,554 --> 00:04:16,964
A p first design, every function exposed
as an a p ensures modularity and.

87
00:04:17,774 --> 00:04:21,135
An example would be, instead of
typing, tying the forms directly to the

88
00:04:21,135 --> 00:04:23,745
database forms can call reusable APAs.

89
00:04:24,135 --> 00:04:28,664
Event driven pipelines systems react to
events with resilience and audit trails.

90
00:04:29,085 --> 00:04:32,775
An example would be a region files
a request event triggers local

91
00:04:32,775 --> 00:04:37,365
workload processes, unlocks a written
for transparency, CICD integration.

92
00:04:37,784 --> 00:04:41,805
Three lower code artifacts as code
version, them test them and deploy them.

93
00:04:41,955 --> 00:04:44,594
An example would be low
code workflow stored in Git.

94
00:04:44,909 --> 00:04:49,200
Tested automatically in pipelines,
observability and governance metrics

95
00:04:49,200 --> 00:04:51,690
logs, traces embedded for transparency,

96
00:04:52,190 --> 00:04:53,719
governance and engineering standards.

97
00:04:54,230 --> 00:04:55,159
Governance is waste.

98
00:04:55,159 --> 00:04:58,730
Low code projects is a
success as spiral into chaos.

99
00:04:59,210 --> 00:05:01,190
Without governance, you can risk shadow.

100
00:05:01,190 --> 00:05:02,990
IT projects built without oversight.

101
00:05:03,290 --> 00:05:06,680
Data leaks due to poor access
control compliance violations.

102
00:05:07,180 --> 00:05:10,780
Some of the standards that we can enforce
for this two work are version control.

103
00:05:11,050 --> 00:05:15,040
Every low code artifact is tracked
like a source code, automated testing,

104
00:05:15,159 --> 00:05:19,600
data validations, integration test
security scans, security by design,

105
00:05:20,050 --> 00:05:23,950
role-based access, integration,
encryption, and audit trails.

106
00:05:24,310 --> 00:05:27,670
Reproducibility dev test and
production must be identical.

107
00:05:28,170 --> 00:05:31,950
Forrester Research shows that
organizations with structured low-code

108
00:05:32,310 --> 00:05:36,660
governance reports 50% fewer compliance
issues compared to those without.

109
00:05:37,110 --> 00:05:39,120
Governance is not just an afterthought.

110
00:05:39,180 --> 00:05:41,340
It's a foundation for
scale and sustainability.

111
00:05:41,840 --> 00:05:42,980
Integration practice.

112
00:05:43,580 --> 00:05:45,350
How do these really work in reality?

113
00:05:46,010 --> 00:05:50,090
Data pipelines and automation,
low-code orchestrate, CTL flows, public

114
00:05:50,090 --> 00:05:54,470
code, enforce transformations and
validation logic, DevOps integration.

115
00:05:54,875 --> 00:05:58,145
Low-code apps automatically tested
and deployed through Jenkins.

116
00:05:58,145 --> 00:06:01,355
GitHub Actions R Azure
DevOps Legacy Modernization.

117
00:06:01,745 --> 00:06:05,465
Old COBOL are mainframe systems
wrapped in APAs workflow orchestrated

118
00:06:05,465 --> 00:06:09,665
usually in low-code cross
team collaboration businesses.

119
00:06:09,665 --> 00:06:11,675
Units create prototypes.

120
00:06:11,885 --> 00:06:13,745
IT teams harden them for scale.

121
00:06:14,245 --> 00:06:18,265
A large hospital automated its patient
admission process nurses designed

122
00:06:18,265 --> 00:06:19,735
the workflow in a local platform.

123
00:06:20,155 --> 00:06:23,245
It integrated with EHS
system using public code aps.

124
00:06:23,620 --> 00:06:24,100
Result.

125
00:06:24,190 --> 00:06:28,540
An average admission time dropped
by 30% on compliance audits

126
00:06:28,540 --> 00:06:30,480
became simpler case studies.

127
00:06:30,660 --> 00:06:32,610
Let's look at the sector
specific examples.

128
00:06:33,150 --> 00:06:37,320
Government, Estonia, government, often
called most digital country in the

129
00:06:37,320 --> 00:06:42,210
world, uses open standards and public
code to provide nearly all services.

130
00:06:42,210 --> 00:06:46,260
Only pairing this with low code
interfaces, low rapid delivery of

131
00:06:46,260 --> 00:06:48,720
oxygen fitting, facing port portals.

132
00:06:49,220 --> 00:06:50,480
Enterprise it.

133
00:06:50,480 --> 00:06:50,870
A retailer.

134
00:06:50,870 --> 00:06:53,960
Use low code to prototype
store dashboards in four weeks.

135
00:06:54,260 --> 00:06:58,550
While supply chain algorithms remained
public code for reuse across regions.

136
00:06:59,090 --> 00:07:03,260
Healthcare a compliance workflow built
in low code documented as public code

137
00:07:03,500 --> 00:07:08,030
helped a hospital demonstrate GDPR
compliance to audit us in the court time.

138
00:07:08,930 --> 00:07:13,250
According to Deloitte, low code can
reduce development time by 50 to 90%,

139
00:07:13,310 --> 00:07:17,155
while public reusability can save
governments up to 30% of it budgets.

140
00:07:17,655 --> 00:07:21,845
Challenges and pitfalls
as the benefits there are.

141
00:07:21,845 --> 00:07:24,035
Often challenges include scalability.

142
00:07:24,305 --> 00:07:27,725
Some local platforms struggle under
millions of transactions per day.

143
00:07:28,325 --> 00:07:31,085
Vendor lockin proprietary
tools can become cages.

144
00:07:31,595 --> 00:07:33,335
Governance, drift without oversight.

145
00:07:33,335 --> 00:07:35,765
Fusion developers create
unmonitored workflows.

146
00:07:36,070 --> 00:07:36,740
Skill, balance.

147
00:07:36,740 --> 00:07:38,740
Non-technical users need guardrails.

148
00:07:39,580 --> 00:07:40,340
Engineers need freedom.

149
00:07:40,840 --> 00:07:44,560
A global insurer adopted
low-code widely within a year.

150
00:07:44,710 --> 00:07:47,560
They had 500 Fs, but
no central governance.

151
00:07:47,830 --> 00:07:50,800
It spent months auditing
and consolidating them.

152
00:07:51,280 --> 00:07:54,190
The point is, low-code plus public
could work best when they paid

153
00:07:54,190 --> 00:07:55,690
with the discipline and foresight

154
00:07:56,190 --> 00:07:57,120
where this is heading.

155
00:07:57,930 --> 00:07:58,920
Citizens and engineer.

156
00:07:59,520 --> 00:08:02,310
Citizens and engineers
collaborate and they join.

157
00:08:02,880 --> 00:08:05,100
Design sessions shared accountability.

158
00:08:05,400 --> 00:08:08,820
Open source, low code platforms
like bhi Base and jogi are reducing

159
00:08:08,850 --> 00:08:10,770
lockin AI assisted development.

160
00:08:11,039 --> 00:08:14,789
Generative AI suggest workforce detects
anomalies and autogenerate testing

161
00:08:14,789 --> 00:08:17,039
cases, public sector acceleration.

162
00:08:17,340 --> 00:08:21,419
Governments aligned with digital first
policies, making public code the norm.

163
00:08:21,919 --> 00:08:25,610
Imagine a CT planner drags a
workflow for the permit process.

164
00:08:25,789 --> 00:08:28,730
A instantly suggest compliance
checks, accessibility standards,

165
00:08:28,730 --> 00:08:29,870
and data security improvement.

166
00:08:30,319 --> 00:08:31,400
That is the near future.

167
00:08:31,900 --> 00:08:36,219
To conclude low-code excels delivery
and impose teams across skill levels.

168
00:08:36,520 --> 00:08:39,939
Public code, ensure transparency,
trust, and long-term sustainability.

169
00:08:40,359 --> 00:08:44,290
Together the balance, speed,
governance, agility with compliance.

170
00:08:44,650 --> 00:08:47,920
The future of software delivery is
not developers versus business users.

171
00:08:48,219 --> 00:08:52,180
It is developers plus business
users working together with the

172
00:08:52,180 --> 00:08:55,030
shared tools, shared governance
and shared responsibility.

173
00:08:55,749 --> 00:08:56,560
Thanks for your time.

