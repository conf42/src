1
00:00:00,140 --> 00:00:04,900
Hello, everyone, and thank you for
joining me today at Conf42 DevOps.

2
00:00:05,590 --> 00:00:07,180
My name is Andrea Andriushan.

3
00:00:07,510 --> 00:00:13,450
I'm a DevOps engineer at Analog Devices,
and I'm excited to talk about how we've

4
00:00:13,540 --> 00:00:18,670
optimized the release process for Analog
Devices custom Linux distribution.

5
00:00:19,044 --> 00:00:20,194
Named KyperLinux.

6
00:00:20,694 --> 00:00:25,094
The software development life
cycle is all about improvement.

7
00:00:25,324 --> 00:00:26,904
Iteration by iteration.

8
00:00:27,594 --> 00:00:32,004
Every stage, including the release
process, benefits from refinement.

9
00:00:32,959 --> 00:00:37,959
When done effectively, this ensures
that products reach customers

10
00:00:38,000 --> 00:00:40,290
faster, with higher reliability.

11
00:00:41,140 --> 00:00:46,440
Today, I will show you how we applied
this principle to KyperLinux and

12
00:00:46,459 --> 00:00:48,410
the substantial results it brought.

13
00:00:48,910 --> 00:00:53,769
Now, you may ask, what's our
custom Linux distribution?

14
00:00:54,129 --> 00:00:59,165
Well, Let's answer this question
and tell you about ADI KyperLinux.

15
00:00:59,665 --> 00:01:05,905
Kyper is the primary distribution for
product evaluation boards, including

16
00:01:06,245 --> 00:01:11,695
reference designs, device drivers, and
a variety of development utilities.

17
00:01:12,195 --> 00:01:18,065
Now, let's see how we improved the
release process on this complex component.

18
00:01:18,565 --> 00:01:23,805
By the end of this talk, we'll
gain insights into what was the old

19
00:01:23,805 --> 00:01:28,365
release process for Hyperlinux in
order to have a better understanding

20
00:01:28,435 --> 00:01:29,735
of the changes that were made.

21
00:01:30,255 --> 00:01:36,515
and how they impacted the product and
which are some of the major improvements

22
00:01:36,705 --> 00:01:39,105
that we needed to integrate and why.

23
00:01:39,985 --> 00:01:44,455
And also the current state of
our custom Linux distribution.

24
00:01:44,955 --> 00:01:50,585
The traditional process was slow,
rigid, and prone to delays due to

25
00:01:50,625 --> 00:01:55,165
lack of modularity and the high
interdependence between components.

26
00:01:55,665 --> 00:01:59,955
All the software components were
built during image creation,

27
00:02:00,475 --> 00:02:02,795
which meant a longer build time.

28
00:02:03,295 --> 00:02:08,715
Another reason for the long release cycles
was the fact that software components

29
00:02:08,745 --> 00:02:12,075
were released through Kyper Linux image.

30
00:02:12,755 --> 00:02:18,205
With no modularity, a bug found in one
of the components delayed all of them.

31
00:02:18,705 --> 00:02:23,235
After we identified the big problems
of the previous flow, we came up with

32
00:02:23,235 --> 00:02:25,955
a few ideas that we then implemented.

33
00:02:26,455 --> 00:02:32,595
These key modifications were creating a
stabilization branch from release of each

34
00:02:32,595 --> 00:02:38,625
core software component, breaking down the
monolith structure for a better management

35
00:02:38,625 --> 00:02:45,225
of the Linux drivers, libraries, UA
application, and user space tools.

36
00:02:45,725 --> 00:02:51,685
And creating Debian packaging for
components that were previously mentioned.

37
00:02:51,685 --> 00:02:56,035
Modular configuration for custom images.

38
00:02:56,665 --> 00:03:01,955
And based on the other changes
mentioned, we can configure easier

39
00:03:02,075 --> 00:03:03,345
the image before build time.

40
00:03:03,845 --> 00:03:08,885
expand component level testing
with custom docker images created

41
00:03:08,894 --> 00:03:11,395
from a Kyper Linux build image.

42
00:03:11,395 --> 00:03:16,665
Improvements were also made on the
CI side by moving the automatic build

43
00:03:16,665 --> 00:03:22,755
on GitHub Actions and introducing
PR templates and co donors for a

44
00:03:22,755 --> 00:03:24,715
better overview of the new changes.

45
00:03:25,215 --> 00:03:29,655
To kick off the improvements, we
introduce a dedicated stabilization

46
00:03:29,665 --> 00:03:31,665
branch for every new release.

47
00:03:32,165 --> 00:03:37,474
This branch is created from the
main branch and serves as a space

48
00:03:38,065 --> 00:03:42,675
where the release is refined,
tested, and stabilized without

49
00:03:42,834 --> 00:03:45,314
interference from ongoing development.

50
00:03:45,814 --> 00:03:50,854
This approach allows us to focus
on preparing the release while

51
00:03:50,874 --> 00:03:55,384
the main branch continues to
accommodate new features and updates.

52
00:03:56,044 --> 00:03:56,734
The result?

53
00:03:57,394 --> 00:04:03,404
Faster issue resolution, more focused
testing, and a stable release pipeline.

54
00:04:03,904 --> 00:04:07,824
Based on the diagram below, you
can see that the master branch

55
00:04:07,824 --> 00:04:11,814
serves as the main development
branch for new features and fixes.

56
00:04:11,950 --> 00:04:18,379
Our next stable branch is created
by branching off from master.

57
00:04:18,959 --> 00:04:21,309
This branch is dedicated to stabilization.

58
00:04:21,729 --> 00:04:26,199
Ensuring that the code is closely
tested and prepared for release.

59
00:04:27,109 --> 00:04:33,109
Fixes and updates are often pushed
to both master and nexttable

60
00:04:33,689 --> 00:04:35,839
simultaneously to maintain consistency.

61
00:04:36,339 --> 00:04:40,869
Once the nexttable branch is
considered ready for release, a release

62
00:04:41,019 --> 00:04:42,859
branch or tag is created from it.

63
00:04:43,284 --> 00:04:46,934
In most cases, new bugs are
found during release testing.

64
00:04:47,374 --> 00:04:51,934
That's why a release patch will be created
after the fix is added on the branch.

65
00:04:52,434 --> 00:04:57,834
After a release is finished, the next
stable branch is overwritten with the

66
00:04:58,074 --> 00:05:04,634
latest changes from master to sync and
prepare for the next stabilization cycle.

67
00:05:05,134 --> 00:05:09,854
Next, we moved away from a
monolithic release process and

68
00:05:10,434 --> 00:05:15,134
separated the entire release into
smaller independent components.

69
00:05:15,634 --> 00:05:22,264
In the past, everything was bundled
together and a bug in one area

70
00:05:22,764 --> 00:05:24,254
could delay the entire release.

71
00:05:25,004 --> 00:05:30,584
Now, components like software
tools, libraries, and boot

72
00:05:30,584 --> 00:05:32,744
files are managed independently.

73
00:05:33,454 --> 00:05:37,054
By breaking down the release
this way, we've eliminated

74
00:05:37,204 --> 00:05:39,214
unnecessary interdependencies.

75
00:05:39,714 --> 00:05:46,264
Each component can be developed, tested,
and released on its own schedule, leading

76
00:05:46,304 --> 00:05:49,194
to faster iteration and reduced risk.

77
00:05:49,694 --> 00:05:53,294
For each software component,
Debian packages are created

78
00:05:53,324 --> 00:05:54,124
as a release artifact.

79
00:05:54,624 --> 00:05:58,614
After that, they're uploaded to
our Linux package repository.

80
00:05:59,114 --> 00:06:04,184
By using standard Debian tools,
we've simplified distribution and

81
00:06:04,194 --> 00:06:10,254
made it easier for users to install
or roll back software packages.

82
00:06:10,754 --> 00:06:14,994
But one of the most significant
steps we've taken to increase

83
00:06:14,994 --> 00:06:19,264
flexibility is the introduction
of a modular configuration file.

84
00:06:19,764 --> 00:06:23,894
This file allows users to build
custom images by selecting

85
00:06:23,894 --> 00:06:25,534
the specific tools they need.

86
00:06:26,099 --> 00:06:29,969
And even specifying the
version of those components.

87
00:06:30,799 --> 00:06:35,609
For instance, If you're working on
a project that requires a specific

88
00:06:35,609 --> 00:06:40,939
library version, you can specify that
in the configuration file before build.

89
00:06:41,799 --> 00:06:46,109
Additionally, we've made it
easy to introduce new components

90
00:06:46,159 --> 00:06:48,389
or additional dependencies.

91
00:06:48,859 --> 00:06:53,729
With the help of an extra script,
users can add other compatible tools.

92
00:06:54,309 --> 00:06:59,089
This approach not only makes the release
process more modular, but also gives

93
00:06:59,089 --> 00:07:00,989
users the freedom to craft their ideas.

94
00:07:01,169 --> 00:07:05,219
images with their exact
requirements, ensuring that no

95
00:07:05,989 --> 00:07:08,149
unnecessary components are included.

96
00:07:08,649 --> 00:07:13,119
Now, to improve reliability and
compatibility, we've implemented

97
00:07:13,159 --> 00:07:17,209
our robust testing process
that works at two levels.

98
00:07:17,984 --> 00:07:22,754
First, each component is tested
individually to ensure its

99
00:07:22,754 --> 00:07:24,154
stand alone functionality.

100
00:07:24,844 --> 00:07:29,414
This allows us to quickly catch and
address issues specific to that component.

101
00:07:30,154 --> 00:07:33,844
Second, the components are
tested as part of the full

102
00:07:33,914 --> 00:07:35,694
Kuiper image, but with a twist.

103
00:07:36,544 --> 00:07:40,484
We've introduced lighter Docker images
that are built with the specific

104
00:07:40,484 --> 00:07:43,154
dependencies required for each component.

105
00:07:43,654 --> 00:07:48,114
These Docker images replicate
the Kuiper environment during

106
00:07:48,284 --> 00:07:49,324
the development process.

107
00:07:50,314 --> 00:07:55,369
By testing within this controlled
environment, We can, we can ensure early

108
00:07:55,369 --> 00:07:57,749
compatibility with the final system.

109
00:07:58,249 --> 00:08:03,119
This approach allows us to catch
integration issues during development,

110
00:08:03,569 --> 00:08:08,169
rather than later stages, which
saves significant time and effort.

111
00:08:08,699 --> 00:08:13,509
And if you want to know more about
our testing process, my colleagues

112
00:08:13,549 --> 00:08:17,099
have two presentations about it
at this year's edition of Conf42.

113
00:08:17,919 --> 00:08:18,109
Thank you.

114
00:08:18,879 --> 00:08:23,909
Bianca is presenting a secure integration
of private testing infrastructure

115
00:08:24,019 --> 00:08:25,999
with public GitHub repositories.

116
00:08:26,609 --> 00:08:31,329
And Stefan's topic is Advanced
Test Harness Infrastructure for

117
00:08:31,859 --> 00:08:35,389
Validating ARM and FPGA based systems.

118
00:08:35,889 --> 00:08:41,079
To optimize our CI pipeline and make
the development process more accessible

119
00:08:41,579 --> 00:08:46,229
and efficient, we transitioned
from Jenkins to GitHub Actions.

120
00:08:46,729 --> 00:08:49,269
This move brought several benefits.

121
00:08:50,109 --> 00:08:54,259
First, BuildLogs are now
openly accessible to all users.

122
00:08:54,689 --> 00:08:55,949
increasing transparency.

123
00:08:56,549 --> 00:09:01,549
Additionally, fresh build images
are automatically generated and made

124
00:09:01,549 --> 00:09:06,519
available on GitHub as soon as the commit
is merged into the Kuiper repository.

125
00:09:07,469 --> 00:09:12,779
This eliminates the need for users
to wait for an official release or

126
00:09:13,169 --> 00:09:15,159
manually build the image themselves.

127
00:09:15,659 --> 00:09:18,409
We've also expanded the
build configurations.

128
00:09:18,709 --> 00:09:22,539
Previously, we only built
a 32 bit full image.

129
00:09:22,819 --> 00:09:28,349
Now, we've added support for 64
bit architectures and introduced

130
00:09:28,369 --> 00:09:33,249
both basic and full configurations
for each architecture.

131
00:09:34,089 --> 00:09:37,739
This flexibility ensures that
users can choose the image

132
00:09:37,739 --> 00:09:39,469
that best suits their needs.

133
00:09:39,969 --> 00:09:43,919
To further improve collaboration
and code quality, we introduced

134
00:09:43,969 --> 00:09:45,189
a pull request template.

135
00:09:45,829 --> 00:09:50,449
This provides a consistent structure for
a contributor to describe their changes.

136
00:09:51,129 --> 00:09:55,279
Additionally, we've implemented
the co donors feature in GitHub.

137
00:09:56,219 --> 00:10:01,899
This ensures that relevant team members
are automatically assigned to review

138
00:10:01,899 --> 00:10:06,759
and approve pull requests, speeding
up the review process, and maintaining

139
00:10:06,789 --> 00:10:08,449
high standards for the code base.

140
00:10:08,949 --> 00:10:13,169
These changes make the build
process faster, more flexible,

141
00:10:13,489 --> 00:10:15,089
and more user friendly.

142
00:10:15,614 --> 00:10:19,494
while also encouraging better
collaboration among developers.

143
00:10:19,994 --> 00:10:25,294
Now, let's take a closer look to the
current state of our release process.

144
00:10:25,794 --> 00:10:30,694
By using a configuration file, users
can now create custom images mapped

145
00:10:30,774 --> 00:10:32,134
to their specific requirements.

146
00:10:32,984 --> 00:10:36,584
They can select only the
components they need, ensuring

147
00:10:36,764 --> 00:10:38,254
lightweight and efficient builds.

148
00:10:38,754 --> 00:10:43,424
We've also shifted to build
each component independently and

149
00:10:43,474 --> 00:10:45,304
releasing it as a Debian package.

150
00:10:46,184 --> 00:10:50,444
These packages are uploaded to
analog devices Linux package

151
00:10:50,444 --> 00:10:54,884
repository, which allows for
faster and more flexible builds.

152
00:10:55,844 --> 00:11:01,384
This change also simplifies updates
for users, making, making it easier to

153
00:11:01,384 --> 00:11:03,814
install or rollback components as needed.

154
00:11:04,614 --> 00:11:06,534
By dividing the release cycles.

155
00:11:06,824 --> 00:11:11,254
of individual components, we've
ensured that bugs in one component

156
00:11:11,434 --> 00:11:13,084
don't block their list for others.

157
00:11:13,454 --> 00:11:19,334
This approach simplifies the overall
process, minimizes bottlenecks, and

158
00:11:19,334 --> 00:11:20,934
increases development efficiency.

159
00:11:21,434 --> 00:11:25,664
Now, in the end, thank you all
for listening, and if you have any

160
00:11:25,664 --> 00:11:29,114
questions regarding the presentation,
or if you need more details

161
00:11:29,114 --> 00:11:34,604
about it, feel Do not hesitate to
contact me on email or LinkedIn.

162
00:11:34,894 --> 00:11:36,154
And thank you.

