1
00:00:00,710 --> 00:00:01,069
Hello.

2
00:00:01,130 --> 00:00:01,589
Hi everyone.

3
00:00:01,719 --> 00:00:04,059
Good morning or good
afternoon or good evening.

4
00:00:04,059 --> 00:00:04,900
So wherever you are.

5
00:00:05,230 --> 00:00:05,430
Yeah.

6
00:00:05,440 --> 00:00:08,889
Thanks for joining for my
session on mobile application

7
00:00:08,889 --> 00:00:10,569
security assessment automation.

8
00:00:10,569 --> 00:00:14,840
So in the con 42 DevOps 2025 conference.

9
00:00:15,375 --> 00:00:18,985
So today we are trying to learn a
little bit about how we can automate

10
00:00:19,035 --> 00:00:22,375
the mobile security assessments
using the MobSF and Jenkins.

11
00:00:22,924 --> 00:00:26,545
But this talk mainly talk about
like, if you have the MobSF and this

12
00:00:26,565 --> 00:00:31,674
tool, so how we can automate that
and try to help the organizations to

13
00:00:31,735 --> 00:00:33,875
speed up the mobile testing process.

14
00:00:33,875 --> 00:00:36,625
So without further ado, let's get started.

15
00:00:36,625 --> 00:00:40,635
So myself, like Shesha Nandreddy
Kandula, so you can call me Shesha.

16
00:00:41,185 --> 00:00:44,765
I have like 15 years of experience
in application security.

17
00:00:44,765 --> 00:00:49,905
Mostly I worked on web applications and
mobile application security related tasks

18
00:00:49,905 --> 00:00:54,124
like testing and engineering or like
a threat modeling or whatever we call.

19
00:00:54,144 --> 00:01:01,574
So, and a brief agenda about today talk is
like, mostly we look into the why, what is

20
00:01:01,574 --> 00:01:03,334
the need of mobile application security?

21
00:01:03,334 --> 00:01:05,504
So, what, why it got, Why
it got the importance?

22
00:01:05,504 --> 00:01:09,074
So then we look a little bit into
the, what did the mobile OS obtain?

23
00:01:09,084 --> 00:01:13,584
Then we'll try to see like, what
is SAST and DAST methodologies.

24
00:01:13,584 --> 00:01:16,804
After that, we look into the
MabaSurf, which we try to use

25
00:01:16,804 --> 00:01:18,424
it for the automation purposes.

26
00:01:18,924 --> 00:01:22,364
And then let's see, a little
bit about the Jenkins as well.

27
00:01:22,504 --> 00:01:22,834
Okay.

28
00:01:22,894 --> 00:01:23,694
Without further ado.

29
00:01:23,694 --> 00:01:24,584
So let's get started.

30
00:01:25,534 --> 00:01:26,374
So introduction.

31
00:01:26,374 --> 00:01:29,324
So, so introductions
to mobile applications.

32
00:01:29,344 --> 00:01:32,904
Like if you see, like if you
forgot about the security, so what

33
00:01:32,904 --> 00:01:34,144
about the mobile applications?

34
00:01:34,174 --> 00:01:38,134
If you see nowadays in the last
maybe four to five years, at

35
00:01:38,134 --> 00:01:39,874
least the number of applications.

36
00:01:40,459 --> 00:01:45,739
that are installed on any user device
is increase, increasing, drastically.

37
00:01:45,739 --> 00:01:48,589
And there may be users
may have 20 applications.

38
00:01:49,109 --> 00:01:52,959
But nowadays, usually users will
have 80 to 90, even sometimes more

39
00:01:52,959 --> 00:01:57,369
than 100, hundreds of applications
related to the banking, trading,

40
00:01:58,030 --> 00:02:00,090
social media or Gmail or whatever.

41
00:02:00,150 --> 00:02:03,720
So even related to the, their
activity, physical activities,

42
00:02:04,360 --> 00:02:06,580
A lot of applications are there.

43
00:02:06,610 --> 00:02:10,140
So, but if you see in a month,
among those maybe 80 to 90

44
00:02:10,140 --> 00:02:13,780
applications, users may use like 50%.

45
00:02:14,360 --> 00:02:17,150
And if you see in a quarter,
at least I don't think so.

46
00:02:17,150 --> 00:02:19,250
They use all the application
in one quarter also.

47
00:02:19,250 --> 00:02:23,690
So, if the users are keeping auto
updates or to apply any security

48
00:02:23,690 --> 00:02:27,160
patches related to the, these
applications, that would be great.

49
00:02:27,200 --> 00:02:29,170
But if you're not, they're
not updating their app.

50
00:02:29,170 --> 00:02:29,390
So.

51
00:02:29,890 --> 00:02:31,570
have any security issues.

52
00:02:31,580 --> 00:02:35,360
So that's also a concern for us.

53
00:02:35,380 --> 00:02:39,180
So on top of that, if by mistake, if
the user has installed some gaming

54
00:02:39,200 --> 00:02:43,530
app and he forgot and due to that,
if he got any malware into that, so

55
00:02:43,530 --> 00:02:48,830
that's also very dangerous to the
other genuine, genuine banking or

56
00:02:48,860 --> 00:02:50,660
like other trading applications.

57
00:02:50,720 --> 00:02:52,280
So that's the main reason.

58
00:02:53,015 --> 00:02:57,015
We need to look into the mobile
application security as well, because

59
00:02:57,515 --> 00:03:02,275
since the usage has been increased on
top of that, users also expecting a

60
00:03:02,275 --> 00:03:06,545
lot of features which are there in the
web applications should come to the

61
00:03:07,065 --> 00:03:08,865
mobile applications also from day one.

62
00:03:09,155 --> 00:03:14,385
Because if you see like if a customer is
implementing one feature, Few years back,

63
00:03:14,385 --> 00:03:18,755
I like maybe like five to seven years
back usually first they will try to do

64
00:03:18,825 --> 00:03:22,615
that into the web application if that is
success then only they will come on to the

65
00:03:23,485 --> 00:03:28,535
mobile applications, but nowadays it's not
like that they have to Push the code or

66
00:03:28,535 --> 00:03:32,475
like push the feature for all the clients
like clients means the web application

67
00:03:32,475 --> 00:03:36,515
mobile application whether it's Android
iOS So because of that competition

68
00:03:36,575 --> 00:03:42,975
or like user demand And, like mobile
applications also started, developing or

69
00:03:42,985 --> 00:03:46,155
like releasing the, updates every, month.

70
00:03:46,275 --> 00:03:51,895
So because of that, so to assess
the mobile applications very

71
00:03:52,655 --> 00:03:54,645
quickly, it's not easy task.

72
00:03:54,645 --> 00:03:58,685
So that's the reason there is a need
for the automation of this assessment

73
00:03:58,685 --> 00:04:02,625
as well, at least to find out the
low hanging fruits, much ahead.

74
00:04:03,045 --> 00:04:05,665
So let's see like, before going for
that, so let's see like, what are

75
00:04:05,665 --> 00:04:07,535
the mobile application related risks?

76
00:04:07,545 --> 00:04:11,475
So if you see in regular web
application, most of the code stays

77
00:04:11,475 --> 00:04:15,375
in the server side, but when it comes
to the mobile application, the code,

78
00:04:15,875 --> 00:04:20,875
at least not everything, at least a
little bit related to the logic will

79
00:04:20,915 --> 00:04:22,645
coming back to the mobile application.

80
00:04:22,655 --> 00:04:27,405
So, because if, if you are doing
some kind of a, mobile logic, So then

81
00:04:27,405 --> 00:04:31,355
there are chances like, like, someone
can get back to like get into the

82
00:04:31,455 --> 00:04:35,465
app and try to look into the source
code and try to, find the issues.

83
00:04:35,475 --> 00:04:37,345
So then that's also a risk.

84
00:04:37,355 --> 00:04:39,965
So that's the reason we
need to concentrate on the

85
00:04:39,965 --> 00:04:41,145
mobile application as well.

86
00:04:41,165 --> 00:04:45,215
And the open web application
security project.

87
00:04:45,345 --> 00:04:49,445
So what they have done is like, they try
to look into the different applications.

88
00:04:49,465 --> 00:04:54,765
They try to find the, top 10 risk or
vulnerabilities related to the mobile

89
00:04:54,765 --> 00:04:57,145
application in several applications.

90
00:04:57,155 --> 00:05:02,185
They try to listed them, list them
down and try to educate the developers

91
00:05:02,305 --> 00:05:04,075
and the security needs as well.

92
00:05:04,105 --> 00:05:07,805
So this is the list that
is for 2024, every three to

93
00:05:07,805 --> 00:05:09,005
four years they will publish.

94
00:05:09,375 --> 00:05:10,865
Luckily we got in the last year.

95
00:05:11,435 --> 00:05:12,795
So if you see among them.

96
00:05:13,295 --> 00:05:17,765
Improper credential uses, so maybe
that's also one issue because maybe

97
00:05:17,765 --> 00:05:21,665
we may be using the credentials, but
we may not be using the biometric

98
00:05:21,665 --> 00:05:27,475
authentication and other security
related measures and even inadequate

99
00:05:27,485 --> 00:05:32,005
supply chain security because since the,
the package or like the binary size is

100
00:05:32,005 --> 00:05:33,995
increasing for the mobile applications.

101
00:05:33,995 --> 00:05:36,225
If I remember earlier, it was a 30, 40 MB.

102
00:05:36,225 --> 00:05:40,855
Nowadays, few applications has
like 300 MB, 400 MB files as well.

103
00:05:41,155 --> 00:05:48,335
So obviously, it's not that binaries or
like that apps may have the originally

104
00:05:48,335 --> 00:05:52,295
written code, but this definitely there
is a lot of Dependencies are there in

105
00:05:52,295 --> 00:05:54,875
the bundled into the mobile application.

106
00:05:54,875 --> 00:05:58,565
So if you're using any libraries,
if you have any security issues.

107
00:05:58,565 --> 00:06:01,145
So obviously we need to take
care of that in that as well.

108
00:06:01,145 --> 00:06:05,315
So that's also, that's also, that's
the reason it came into the M two.

109
00:06:05,885 --> 00:06:06,275
Yeah.

110
00:06:06,275 --> 00:06:09,725
Even insecure authentication
authorization, if you see like insecure

111
00:06:09,755 --> 00:06:14,285
communication, so that are all, even
if you can see with the cryptography

112
00:06:14,285 --> 00:06:17,795
related and even insecure data
stories also coming into the picture.

113
00:06:18,295 --> 00:06:22,615
So these are the, few issues,
which we observed, in last few

114
00:06:22,615 --> 00:06:23,565
years, like two, three years.

115
00:06:23,575 --> 00:06:25,435
So that's the reason it
came into the top ten.

116
00:06:25,865 --> 00:06:29,985
If our application is not vulnerable to
these kind of issues, yep, definitely

117
00:06:29,985 --> 00:06:31,515
we are good for that, at least.

118
00:06:31,985 --> 00:06:34,354
So let's see, like, what
are the different, issues.

119
00:06:35,345 --> 00:06:40,815
methodologies we can use it to test
it before going to secure it at least.

120
00:06:41,255 --> 00:06:44,975
So one is like a SAST another one
is like kind of a DAST methodology.

121
00:06:44,975 --> 00:06:51,075
So SAST methodology is like we can use
the source code and try to analyze the

122
00:06:51,075 --> 00:06:57,000
source code or binary and We'll try to
find the issues related to the mobile

123
00:06:57,000 --> 00:07:01,510
app, mobile applications and DAST is like,
you can run the app, like maybe logging

124
00:07:01,510 --> 00:07:06,520
to the application or making some calls
or touching the few features to see like

125
00:07:06,520 --> 00:07:10,270
how the application is interacting with
the server and try to see like is how

126
00:07:10,270 --> 00:07:15,040
it is storing the files, whether it's
storing in the local storage or like, or

127
00:07:15,450 --> 00:07:17,720
else it's storing in the external device.

128
00:07:18,100 --> 00:07:19,930
means external SD card,
something like that.

129
00:07:19,930 --> 00:07:22,380
So those kinds of issues
we can find it in the DAST.

130
00:07:22,900 --> 00:07:27,180
But since it is not about the mobile
OS top 10, so let's go back and jump

131
00:07:27,180 --> 00:07:31,860
onto the MobSF, MobSF open source.

132
00:07:31,980 --> 00:07:36,540
Since it is an open source tool, it's
always good to get started using that.

133
00:07:37,150 --> 00:07:43,200
So let's see like what is MobSF and what
kind of features it will provide to us.

134
00:07:43,220 --> 00:07:49,840
So if you go to the web page, MobSF,
So it's since it is an open source, it

135
00:07:49,850 --> 00:07:52,170
has, you can go there and download it.

136
00:07:52,240 --> 00:07:56,160
If you want to build it on your own
machine, there are steps it steps there.

137
00:07:56,500 --> 00:07:59,290
But nowadays, at least most of
the people will use the Docker.

138
00:07:59,765 --> 00:08:02,685
since it is easy to spin up
the machine and because already

139
00:08:02,785 --> 00:08:07,465
required softwares and everything
Will be there in the docker image.

140
00:08:07,555 --> 00:08:12,525
It's easy to spin up and test it
easily or else Earlier days we had

141
00:08:12,525 --> 00:08:15,535
to download the source code and if
you are using different python or

142
00:08:15,535 --> 00:08:20,975
different versions of the java always we
struggle with the Installation itself.

143
00:08:21,405 --> 00:08:25,875
So that's another benefit when you
have the mobisf live also like if

144
00:08:25,875 --> 00:08:29,225
we if you are okay to You upload
your file onto the some server.

145
00:08:29,385 --> 00:08:33,975
You can try play around with that
and try to install the tools.

146
00:08:34,215 --> 00:08:34,585
Okay.

147
00:08:34,665 --> 00:08:37,235
Install the, instead of
installing, you can use that.

148
00:08:37,235 --> 00:08:38,205
So let's see.

149
00:08:38,515 --> 00:08:44,245
So as we send a quick
installation, so I have the . Yep.

150
00:08:44,785 --> 00:08:45,475
Terminal as well.

151
00:08:45,865 --> 00:08:46,795
Since it is ready.

152
00:08:47,365 --> 00:08:50,155
So, let's see.

153
00:08:50,155 --> 00:08:53,005
So here, I have already pulled the image.

154
00:08:53,035 --> 00:08:54,535
Since I already pulled the image.

155
00:08:54,835 --> 00:08:56,365
It'll be pretty much quick.

156
00:08:56,365 --> 00:08:58,845
It'll say like, at least
it says like, stand.

157
00:08:59,345 --> 00:09:00,475
What is it saying?

158
00:09:00,545 --> 00:09:02,570
Like, it image is up to date.

159
00:09:02,630 --> 00:09:03,860
So no, it won't pull it.

160
00:09:03,860 --> 00:09:07,520
But if you're doing it the first time,
it may take like a minute or two.

161
00:09:08,015 --> 00:09:10,695
and pull the image and try to build it.

162
00:09:11,155 --> 00:09:17,355
Since we already done that step,
so try to run it locally to see

163
00:09:18,125 --> 00:09:20,445
what kind of scans we can do it.

164
00:09:20,955 --> 00:09:25,115
So yeah, so you can see
like everything looks green.

165
00:09:25,525 --> 00:09:27,205
I think we are good.

166
00:09:27,705 --> 00:09:27,895
Yeah.

167
00:09:28,075 --> 00:09:30,145
Let's go back to the browser.

168
00:09:30,645 --> 00:09:33,225
So in the browser, so
this is the one page.

169
00:09:33,725 --> 00:09:36,755
So I have already run a few scans.

170
00:09:37,255 --> 00:09:38,005
Recent scans.

171
00:09:38,015 --> 00:09:39,505
So this is the UI.

172
00:09:39,515 --> 00:09:43,385
So I think he didn't remember any scans.

173
00:09:43,715 --> 00:09:44,655
Let's see.

174
00:09:45,155 --> 00:09:48,645
yeah, let's take, AndroCode
app and just click on it.

175
00:09:48,675 --> 00:09:49,115
Upload it.

176
00:09:49,135 --> 00:09:50,605
So it did upload it.

177
00:09:50,605 --> 00:09:51,474
So actually it won't take.

178
00:09:51,974 --> 00:09:56,324
And you can observe everything in
that terminal, what's going on.

179
00:09:57,174 --> 00:10:01,494
So you can see like, This is
Android apk and it's generating

180
00:10:01,524 --> 00:10:03,794
hashes, extracting the apk.

181
00:10:03,794 --> 00:10:08,454
And it parsing it and trying to
analyze it, saving to the database.

182
00:10:09,244 --> 00:10:10,554
Everything it is doing.

183
00:10:10,614 --> 00:10:12,804
And let's go back to the browser.

184
00:10:13,304 --> 00:10:13,574
Yep.

185
00:10:13,634 --> 00:10:16,474
if we go back to the browser,
see, you can see the report

186
00:10:17,004 --> 00:10:19,304
which is generated by the mobSF.

187
00:10:19,804 --> 00:10:23,744
So here we can see like one activity
is exported and there are several,

188
00:10:23,744 --> 00:10:28,334
you can see the manifest explorer
as well and try to go through like

189
00:10:28,334 --> 00:10:30,044
what kind of issues it is reporting.

190
00:10:30,729 --> 00:10:33,519
And there is just like
execute voice command.

191
00:10:33,919 --> 00:10:38,409
I can go there and try to see what
exactly this app is doing, starting an

192
00:10:38,409 --> 00:10:40,899
activity or like set a read clip data.

193
00:10:41,399 --> 00:10:45,369
So like this, it will give
the, report or like, the UI.

194
00:10:45,729 --> 00:10:48,769
If you want the report,
you can, take the report.

195
00:10:48,769 --> 00:10:49,999
If you want to print it, you can do that.

196
00:10:50,379 --> 00:10:53,419
There is a option for static,
starting the dynamic analysis by

197
00:10:53,419 --> 00:10:54,769
using the Marvel stuff as well.

198
00:10:55,219 --> 00:11:00,519
But for that, we need to set it up the
real device emulator and configure it.

199
00:11:00,519 --> 00:11:02,749
So you can give a try if you want.

200
00:11:02,859 --> 00:11:05,719
I didn't keep that for today talk.

201
00:11:06,519 --> 00:11:10,719
And let's go back to the a PS, which
are the pretty much important one for,

202
00:11:10,719 --> 00:11:12,879
to talk to, automate the assessments.

203
00:11:13,299 --> 00:11:16,919
You see that there usually we,
if you are this a p came maybe

204
00:11:16,919 --> 00:11:18,029
a little bit different for you.

205
00:11:18,609 --> 00:11:19,449
I'll change it later.

206
00:11:19,449 --> 00:11:22,149
I'll delete it, since it is recording.

207
00:11:22,539 --> 00:11:26,319
But at least to see what exactly
MOB SF can help us is like.

208
00:11:26,679 --> 00:11:28,409
There are several, functionalities.

209
00:11:28,679 --> 00:11:29,849
You can make a Carl call.

210
00:11:29,910 --> 00:11:34,219
To upload a file like whether it's
IP or APK file and you can scan

211
00:11:34,219 --> 00:11:35,729
it to get a scan for that file.

212
00:11:36,249 --> 00:11:41,569
And maybe you can look for the
scorecard or else you can download

213
00:11:41,599 --> 00:11:42,949
the report and you can do that.

214
00:11:43,159 --> 00:11:46,879
So there are several things which we can
try to automate using the different APIs.

215
00:11:46,919 --> 00:11:52,959
If you go back to the first one,
upload a upload file, upload file API.

216
00:11:52,989 --> 00:11:56,329
So in this, what exactly we are
trying to do is like we just.

217
00:11:56,485 --> 00:12:01,715
you can just make a API call or
like maybe kind of a curl call by

218
00:12:02,045 --> 00:12:06,595
sending your APK file to the, if it
is hosting somewhere, so you need

219
00:12:06,595 --> 00:12:10,575
to provide that URL and providing
the authorization with this API key.

220
00:12:10,865 --> 00:12:13,265
So once you send it, it will
go to, it will come to the

221
00:12:13,275 --> 00:12:14,605
server and try to automate that.

222
00:12:14,625 --> 00:12:16,935
So that's what exactly
we are going to do that.

223
00:12:17,470 --> 00:12:22,100
Since we got little bit understanding
of what is the mobisrf and what

224
00:12:22,100 --> 00:12:24,190
exactly we can do with those APIs.

225
00:12:24,830 --> 00:12:28,080
we'll go back to the how we
can do that using the Jenkins.

226
00:12:28,420 --> 00:12:30,190
So what is the power of mobisrf?

227
00:12:30,190 --> 00:12:33,160
Because since as I shown like
it has a static analysis,

228
00:12:33,170 --> 00:12:34,220
it will extract the files.

229
00:12:34,720 --> 00:12:40,339
And, And since it can extract
the files and source code and

230
00:12:40,339 --> 00:12:42,239
we can, do the static analysis.

231
00:12:42,679 --> 00:12:45,829
But in the dynamic analysis also we
can do similar kind of activities,

232
00:12:45,879 --> 00:12:48,909
but I didn't keep that for now, okay.

233
00:12:49,759 --> 00:12:53,659
And so we talked about
the API support and API.

234
00:12:53,669 --> 00:12:55,819
So let's go back to the Jenkins.

235
00:12:56,754 --> 00:12:58,834
what exactly the Jenkins can help us.

236
00:12:58,834 --> 00:12:59,164
Okay.

237
00:12:59,784 --> 00:13:04,204
So if you see here in our
terminal, so I already downloaded

238
00:13:04,204 --> 00:13:08,074
a version of Jenkins file.

239
00:13:08,574 --> 00:13:13,494
You can download it from the Jenkins
website and based on your requirement,

240
00:13:13,494 --> 00:13:15,414
if you maybe it gives some error.

241
00:13:15,414 --> 00:13:17,664
So I just kept this flag
to avoid that error.

242
00:13:17,665 --> 00:13:19,894
So I'm just click on enter.

243
00:13:20,074 --> 00:13:22,534
So you can see like it is starting up.

244
00:13:23,534 --> 00:13:32,089
And let's go to the browser and
to see whether we can access that.

245
00:13:32,769 --> 00:13:34,819
Yes, I think so.

246
00:13:35,319 --> 00:13:35,939
Sign in.

247
00:13:35,979 --> 00:13:36,429
Yep.

248
00:13:36,759 --> 00:13:43,099
So let's see like what exactly,
I already configured a, a build.

249
00:13:43,599 --> 00:13:46,949
Like pipeline job, what people will call.

250
00:13:47,439 --> 00:13:49,899
So it got failed, I think.

251
00:13:50,299 --> 00:13:51,679
what should be the reason?

252
00:13:52,179 --> 00:13:53,769
Okay, so let's do one thing.

253
00:13:53,769 --> 00:13:57,779
Let's go back to these, build and try
to understand what's exactly going on.

254
00:13:58,709 --> 00:14:00,359
And if you go to the configure.

255
00:14:00,859 --> 00:14:01,159
Yeah.

256
00:14:01,519 --> 00:14:05,529
This is the, scan file and yep.

257
00:14:06,029 --> 00:14:08,069
This is a typical Jenkins pipeline.

258
00:14:08,069 --> 00:14:13,129
So what exactly I'm just trying to
store the mobisurf api key into the

259
00:14:13,169 --> 00:14:15,759
credentials and mobisurf url is this one.

260
00:14:15,759 --> 00:14:17,329
This is the environment I'm setting up.

261
00:14:17,869 --> 00:14:19,909
But anyway, it is going
to trigger the midnight.

262
00:14:20,179 --> 00:14:20,759
That's fine.

263
00:14:20,759 --> 00:14:26,349
So, but first what we are trying to do is
like download the, apk or ip file because

264
00:14:26,399 --> 00:14:28,309
that's the reason I think it got failed.

265
00:14:29,039 --> 00:14:32,599
I didn't start my server in the other tab.

266
00:14:32,689 --> 00:14:36,199
Let's go back there and
try to start this server.

267
00:14:36,259 --> 00:14:41,999
So maybe it's try to, yep, here
actually it should be started.

268
00:14:42,059 --> 00:14:45,589
So I think that's the
reason it gave that error.

269
00:14:46,089 --> 00:14:47,799
Yep, apply here.

270
00:14:48,299 --> 00:14:49,669
And maybe we'll, we'll start later.

271
00:14:49,669 --> 00:14:52,509
So let's look into the,
this configuration first.

272
00:14:53,324 --> 00:14:56,954
So first what we are trying to do is here,
you can play around with that because

273
00:14:56,954 --> 00:15:01,344
if, if you were a PK or IPA file storing
somewhere in the server, you can, make

274
00:15:01,344 --> 00:15:06,944
your logic according to that and try to
download that file, to the, workspace,

275
00:15:07,434 --> 00:15:12,714
Jenkins workspace and try to ensure the
scan once you have downloaded that file.

276
00:15:12,714 --> 00:15:14,244
So if you see here, we
have downloaded that.

277
00:15:14,744 --> 00:15:18,034
And then starting the
Mabasef scan as we have seen.

278
00:15:18,034 --> 00:15:21,584
So first we are uploading a
file, what this file will do.

279
00:15:21,584 --> 00:15:25,414
Like once we uploaded that we get
the hash value, some hash value.

280
00:15:25,964 --> 00:15:27,894
So let's go back here.

281
00:15:28,354 --> 00:15:34,514
So if you see here, yep, here, you will
get a hash value in the response to

282
00:15:34,844 --> 00:15:38,854
differentiate between the different, Files
which we are trying to scan and suppose

283
00:15:38,854 --> 00:15:42,424
if you are doing a APK file IP a file or
one app And then a second app third app.

284
00:15:42,424 --> 00:15:47,754
So just a hash file so we try to use
some logic to get back that hash and

285
00:15:47,754 --> 00:15:52,714
that hash we are going to use it in
the Next command to initiate the scan.

286
00:15:53,094 --> 00:15:56,874
So if you see here, we are using that
hash value and trying to initiate

287
00:15:56,914 --> 00:16:03,824
the scan So with that we run the
scan Once the scan is run so we can

288
00:16:03,824 --> 00:16:07,759
get back this core card Scorecard
like how much we are good or not.

289
00:16:07,789 --> 00:16:11,469
And if you want to download your
report, you can initiate one more

290
00:16:11,469 --> 00:16:13,859
call to download that report.

291
00:16:13,919 --> 00:16:15,049
The report is downloaded.

292
00:16:15,049 --> 00:16:18,119
So let's go back and apply this one.

293
00:16:18,879 --> 00:16:21,829
Hopefully this time it will
run it if it is wrong, if it is

294
00:16:21,829 --> 00:16:23,389
failing for some other reasons.

295
00:16:23,619 --> 00:16:27,509
So, I'll try to show the
previous successful scans.

296
00:16:27,519 --> 00:16:28,269
Let me see here.

297
00:16:28,439 --> 00:16:29,559
Yeah, now it is success.

298
00:16:29,609 --> 00:16:30,229
That's cool.

299
00:16:30,729 --> 00:16:32,189
Let's go back to the console.

300
00:16:32,409 --> 00:16:34,329
So what, what exactly our script has done?

301
00:16:34,579 --> 00:16:37,054
So it went to the some,
just, just to echo.

302
00:16:37,284 --> 00:16:40,624
It went to this location and
it's down, file is downloaded.

303
00:16:41,054 --> 00:16:45,164
Once the file is downloaded, we
are initiating a, I mean, first we

304
00:16:45,164 --> 00:16:48,174
are uploading it to, To the MobSF.

305
00:16:48,444 --> 00:16:51,064
Once the uploading is done,
we got the hash value.

306
00:16:51,074 --> 00:16:55,094
That hash value we attach to the
scan and send it to the MobSF again.

307
00:16:55,514 --> 00:16:58,234
So once that is done, so we
are getting the, scorecard.

308
00:16:58,234 --> 00:17:00,899
And after that, We're
downloading the report as well.

309
00:17:00,899 --> 00:17:04,319
So if you see here, download,
the PDF report is downloaded.

310
00:17:04,559 --> 00:17:09,099
I try to send it to the, email, but,
due to some configurations, the email

311
00:17:09,099 --> 00:17:12,909
is didn't work out for today anyway,
if you want, you can give it a try

312
00:17:12,909 --> 00:17:18,029
to send the, email as well by confi,
confirming the kin accordingly.

313
00:17:18,449 --> 00:17:24,179
So this is a way how we can automate
the mobile security assessments by using

314
00:17:24,179 --> 00:17:28,959
the Jenkins and, So that this is, high
level how if you want to do that, so

315
00:17:28,959 --> 00:17:33,479
that, if you want the script, I have
attached that into the slides as well.

316
00:17:33,979 --> 00:17:35,499
Let's go back to the slides.

317
00:17:35,999 --> 00:17:36,249
Yeah.

318
00:17:36,529 --> 00:17:37,589
These are like Jenkins.

319
00:17:37,589 --> 00:17:43,169
If, if once you have, start the Jenkins
for the first time with the var file, What

320
00:17:43,169 --> 00:17:46,849
will happen is like it will ask to set
up admin password and all those stuff.

321
00:17:46,859 --> 00:17:49,129
Once that is done, you can
go back to your systems.

322
00:17:49,129 --> 00:17:51,209
If you want to keep any
secrets, you can keep that.

323
00:17:51,629 --> 00:17:54,439
Or else you can start
creating the Jenkins apps.

324
00:17:54,939 --> 00:17:56,079
So we have automated this.

325
00:17:56,089 --> 00:17:58,099
So what's the need for,
automation first of all?

326
00:17:58,759 --> 00:18:01,689
So, because yeah, it will be efficient.

327
00:18:01,749 --> 00:18:04,309
Obviously we can't, test
all the applications if your

328
00:18:04,309 --> 00:18:05,799
organization has multiple apps.

329
00:18:06,169 --> 00:18:10,849
There is a need for the automation and,
and even for the scalability purposes.

330
00:18:11,269 --> 00:18:14,419
And above that, if we can find
the issues a little bit early,

331
00:18:14,419 --> 00:18:16,009
that's going to be helpful.

332
00:18:16,009 --> 00:18:18,449
So, and yep.

333
00:18:18,859 --> 00:18:21,629
And early detection and
mitigation is the one.

334
00:18:21,979 --> 00:18:25,679
The main reason why we are trying that
so what is the integrating mobisoft with

335
00:18:25,679 --> 00:18:30,079
the genkin pipeline So what we are trying
to do is here like pipeline configure the

336
00:18:30,079 --> 00:18:35,639
genkis to automatically trigger a mobisoft
scans whenever the new build is generating

337
00:18:35,639 --> 00:18:39,429
or like Uploaded in in some location.

338
00:18:39,429 --> 00:18:41,369
So then security scan execution.

339
00:18:41,489 --> 00:18:47,514
That's what we have seen in the job and if
you have any policies to fail the Jenkins

340
00:18:47,524 --> 00:18:49,644
job or like, the build, you can do that.

341
00:18:49,714 --> 00:18:53,824
And if you want any reports on sending
the automated notifications to the,

342
00:18:54,344 --> 00:18:56,084
specific emails, we can do that.

343
00:18:56,544 --> 00:19:01,364
So this is the job what,
I have shown just now.

344
00:19:01,914 --> 00:19:02,994
So what is the benefits of?

345
00:19:03,004 --> 00:19:05,254
So I think we have seen
the high level benefits.

346
00:19:05,754 --> 00:19:07,344
And what is the key takeaways?

347
00:19:08,144 --> 00:19:10,864
And the key takeaways is like
automating the security assessment,

348
00:19:10,984 --> 00:19:12,534
which is going to be helpful.

349
00:19:12,544 --> 00:19:15,134
We'll try to do the DevSecOps here.

350
00:19:15,534 --> 00:19:18,744
And these are the different stages.

351
00:19:19,244 --> 00:19:22,274
So I think that's it for today.

352
00:19:22,504 --> 00:19:28,094
If you have any questions, you can reach
out to me in LinkedIn or anywhere else.

353
00:19:28,334 --> 00:19:28,524
Yeah.

354
00:19:28,634 --> 00:19:29,024
Thank you.

355
00:19:29,054 --> 00:19:30,514
Thanks again for your time today.

356
00:19:30,879 --> 00:19:32,079
for coming to my talk.

357
00:19:32,149 --> 00:19:34,729
Have a nice day and
great rest of the year.

