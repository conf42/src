1
00:00:00,280 --> 00:00:00,670
Hi everyone.

2
00:00:01,500 --> 00:00:03,010
Thank you for joining me today.

3
00:00:03,350 --> 00:00:07,960
My name is Dmitry Nikitin and I am the
client branding team leader at QuadQuad.

4
00:00:08,850 --> 00:00:12,460
Today we are going to talk about
a topic that's essential for

5
00:00:12,519 --> 00:00:14,619
businesses working with P2P clients.

6
00:00:15,400 --> 00:00:18,439
White Label Android
apps, their development,

7
00:00:18,470 --> 00:00:20,240
customization, and maintenance.

8
00:00:21,040 --> 00:00:25,439
I will share insights, challenges,
and lessons learned from my experience

9
00:00:25,490 --> 00:00:27,289
working with White Label solutions.

10
00:00:27,669 --> 00:00:28,570
let's dive in.

11
00:00:29,070 --> 00:00:32,620
What is White Label and who
will find this talk useful?

12
00:00:33,049 --> 00:00:38,640
White Label refers to a business
model where a single codebase serves

13
00:00:38,680 --> 00:00:43,469
multiple products, each customized
and branded for different clients.

14
00:00:43,469 --> 00:00:47,935
This Instead of developing an app
from scratch, businesses use ready

15
00:00:47,935 --> 00:00:53,885
made solutions that can be tailored
to their needs, allowing the first

16
00:00:53,935 --> 00:00:56,305
deployment and cost efficiently.

17
00:00:56,805 --> 00:01:01,604
This approach enables various
companies to offer unique looking

18
00:01:01,844 --> 00:01:07,875
applications while relying on the same
underlying technologies and ensuring

19
00:01:07,985 --> 00:01:09,895
scalability and easy maintenance.

20
00:01:10,710 --> 00:01:16,450
This talk is for mobile developers, tech
leaders, and product managers working

21
00:01:16,450 --> 00:01:19,620
with multi brands or multi product apps.

22
00:01:20,260 --> 00:01:24,159
Whenever you're building white label
solutions, internal business apps,

23
00:01:24,190 --> 00:01:29,919
or multiple products from a single
codebase, you will find useful insights.

24
00:01:30,419 --> 00:01:34,540
Today we will cover how to structure
code for flexibility and scalability,

25
00:01:35,040 --> 00:01:39,760
design systems Applications
remain diverse yet consistent.

26
00:01:40,150 --> 00:01:43,140
Enabling separate deployment
for different products.

27
00:01:43,490 --> 00:01:46,500
Efficiently testing customizing
builds and pre scale.

28
00:01:47,020 --> 00:01:50,300
Streamlining and delivery
to Google Play Store.

29
00:01:50,709 --> 00:01:56,060
Most of this topics is quite
extensive and it's own and could

30
00:01:56,100 --> 00:01:58,530
be a topic for a separate talk.

31
00:01:59,200 --> 00:02:04,675
I will try to convey the Key ideas
and, challenges we face it, so that

32
00:02:04,765 --> 00:02:07,154
you can avoid them in the future.

33
00:02:07,654 --> 00:02:10,584
Let's start with how to
fit unrelated features.

34
00:02:11,075 --> 00:02:15,745
Some of which may even contradict
each other into a single project.

35
00:02:16,245 --> 00:02:20,124
Probably no one would want to
use an app that looks like this.

36
00:02:20,584 --> 00:02:25,425
What's even more concerning is that
the codebase behind such an app.

37
00:02:25,655 --> 00:02:27,975
It's likely to be in an even worse state.

38
00:02:28,345 --> 00:02:30,995
Making maintenance and
improvements a nightmare.

39
00:02:31,495 --> 00:02:32,945
We will try to make it better.

40
00:02:33,155 --> 00:02:37,795
Maybe even better than what's
on the slide, but, more,

41
00:02:38,394 --> 00:02:40,744
architecture and unified.

42
00:02:41,244 --> 00:02:44,334
Just like with any other architecture.

43
00:02:45,224 --> 00:02:46,174
Related questions.

44
00:02:46,304 --> 00:02:51,804
Unfortunately, there is no silver bullet
or magic checkbox in Android Studio.

45
00:02:52,264 --> 00:02:56,544
It all depends on how well the project's
architecture supports such changes.

46
00:02:57,004 --> 00:03:00,784
One of the widely accepted
approaches in Android development

47
00:03:00,814 --> 00:03:02,094
is multi modal projects.

48
00:03:02,779 --> 00:03:09,199
Over the past few years, many technical
talks have been dedicated to how to

49
00:03:09,199 --> 00:03:13,799
structure them properly, how to scale
them, and how to maintain multiple

50
00:03:13,809 --> 00:03:19,259
build systems when Gradle can no longer
handle the sync phase efficiently.

51
00:03:19,899 --> 00:03:25,374
Here I want to highlight that this
architecture allows For relatively

52
00:03:25,554 --> 00:03:29,634
independent changes, we can
swap out the model for different

53
00:03:29,634 --> 00:03:31,524
applications even at run time.

54
00:03:31,974 --> 00:03:37,514
However, for this to, to work, modelists
need to have a unified entry point.

55
00:03:38,094 --> 00:03:43,104
This could be an existing framework
like decomposed by Cardi one or three

56
00:03:43,194 --> 00:03:46,904
by Uber or your own custom solution.

57
00:03:47,404 --> 00:03:52,294
After structuring the project, we should
be able to enable additional features.

58
00:03:52,714 --> 00:03:53,764
For example, Google apps.

59
00:03:54,145 --> 00:03:57,244
Feature toggling helps us with this.

60
00:03:57,324 --> 00:04:02,564
Feature can be configured at a build
time or dynamically via toggles, the

61
00:04:02,564 --> 00:04:05,134
same approach used for ABE testing.

62
00:04:05,135 --> 00:04:12,214
On the one hand, highly customized
changes for specific brands can

63
00:04:12,334 --> 00:04:17,524
remain local to avoid cluttering
the admin panel, increasing traffic

64
00:04:17,574 --> 00:04:20,294
or adding run time uncertainly.

65
00:04:21,154 --> 00:04:25,504
On the other hand, if a feature
provides useful across brands, it

66
00:04:25,544 --> 00:04:30,564
can be moved from hard coded config
to a server side configuration.

67
00:04:31,104 --> 00:04:37,284
This key is to separate experimental
and operational features in the

68
00:04:37,314 --> 00:04:40,824
admin panel to ensure our data
experiments and performance.

69
00:04:41,614 --> 00:04:46,504
Properly removed, but despite all
that, the implementation doesn't

70
00:04:46,574 --> 00:04:53,034
need to distinguish future types,
making future modification easier.

71
00:04:53,534 --> 00:04:56,435
Moving on, what about UI customization?

72
00:04:57,254 --> 00:05:02,314
One of the solutions that help us
quickly and predictably adjust colors.

73
00:05:02,500 --> 00:05:06,080
is a palette management
tool, the design system.

74
00:05:06,580 --> 00:05:10,240
All app tokens can be divided
into a fixed number of groups

75
00:05:10,540 --> 00:05:12,870
based on their usage context.

76
00:05:13,770 --> 00:05:18,810
These groups are generally universal and
independent of specific business logic.

77
00:05:19,270 --> 00:05:24,800
Examples include, surface token for
different Z levels and states, text tokens

78
00:05:24,850 --> 00:05:30,840
with verifying levels of importance,
dedicated token for icons and borders.

79
00:05:31,340 --> 00:05:37,270
Thanks to this, context based approach,
we can predefine how each token should

80
00:05:37,270 --> 00:05:39,270
behave to ensure proper contrast.

81
00:05:39,770 --> 00:05:41,350
On different backgrounds.

82
00:05:42,240 --> 00:05:49,770
In simple terms, we take the color value
in HSL format, keep hue and saturation

83
00:05:49,810 --> 00:05:55,519
unchanged and adjust lightness and
until the element reaches the desired

84
00:05:55,579 --> 00:05:57,260
level of visibility and contrast.

85
00:05:58,010 --> 00:06:03,410
This allows us to seamlessly switch
between light and dark teams and even

86
00:06:03,410 --> 00:06:09,230
completely recover the app into an
entirely different scheme when needed.

87
00:06:10,100 --> 00:06:13,765
at the same time, it's important
that the application use Vector

88
00:06:13,765 --> 00:06:19,415
graphics is covers ference, the
same tokens that way, various.

89
00:06:19,445 --> 00:06:25,205
The icons will also be recolored to
the correct colors out of the box.

90
00:06:25,705 --> 00:06:30,225
The algorithm is quite similar to
what material components provide,

91
00:06:30,595 --> 00:06:33,085
and some token names even match.

92
00:06:33,675 --> 00:06:38,774
However, since the design system in
our company spans across Android,

93
00:06:39,024 --> 00:06:43,755
iOS, desktop, apps, and website
as well, the solution needs to be

94
00:06:43,755 --> 00:06:45,835
fully cross platform and, unified.

95
00:06:46,335 --> 00:06:49,665
But not all color customization
can be handled solely through

96
00:06:49,665 --> 00:06:51,525
the contextual palette.

97
00:06:51,945 --> 00:06:56,955
Imagine that for the dark theme, a
client wants a specific button to

98
00:06:57,205 --> 00:06:58,635
have a completely different color.

99
00:06:59,175 --> 00:07:03,895
The contextual palette knows nothing
about individual buttons, so an

100
00:07:03,975 --> 00:07:08,775
additional layer of abstraction is
introduced the component palette.

101
00:07:09,680 --> 00:07:14,380
This means we define tokens for
specific components like main

102
00:07:14,510 --> 00:07:19,716
calendar button, which is term still
referring the contextual palette,

103
00:07:19,716 --> 00:07:26,339
but may, for example, use an inverse
variant as shown in the illustration.

104
00:07:26,839 --> 00:07:33,709
And the key to success here is that
the unified approach allows us to

105
00:07:33,709 --> 00:07:35,149
predictably generate the palette.

106
00:07:36,004 --> 00:07:42,424
By integrating a vector preview of
a scope app, of a core app screen

107
00:07:42,814 --> 00:07:49,024
across all platforms into the admin
panel where we configure colors.

108
00:07:49,464 --> 00:07:53,834
We can immediately verify that
the result looks as expected.

109
00:07:54,114 --> 00:07:59,644
Meanwhile, under the hood, the system is
already generating a ready to use palette

110
00:07:59,704 --> 00:08:01,414
to assemble the entire application.

111
00:08:01,914 --> 00:08:06,254
Next, we need to plan our app release.

112
00:08:07,144 --> 00:08:07,704
But when?

113
00:08:08,204 --> 00:08:13,824
There are many clients, and each come
with their own requests at random times.

114
00:08:14,244 --> 00:08:18,864
It's great if they're patient enough
and, can wait even for minor changes.

115
00:08:19,509 --> 00:08:24,639
Fixes until the end of the next
iteration, but more often than not,

116
00:08:24,869 --> 00:08:29,279
that's not the case and the iteration
length becomes a significant delay.

117
00:08:29,819 --> 00:08:33,489
At the same time, we can't release
completely independently either.

118
00:08:33,889 --> 00:08:37,729
Full regression testing, even
with substitution automation,

119
00:08:37,769 --> 00:08:39,329
can still take a lot of time.

120
00:08:39,729 --> 00:08:45,749
And the more we spend on regression,
the lower, the fewer new features

121
00:08:45,919 --> 00:08:48,519
we can deliver, unfortunately.

122
00:08:49,019 --> 00:08:53,909
We found a solution to this issue by
adopting a trunk based approach and on

123
00:08:53,909 --> 00:08:56,649
demand release from a stable version.

124
00:08:57,329 --> 00:08:58,169
What is trunk?

125
00:08:58,669 --> 00:09:02,900
Unlike GitFlow and GitHubFlow, in
trunk based development changes

126
00:09:03,810 --> 00:09:07,910
are merged into the main branch
in small frequent increments.

127
00:09:08,670 --> 00:09:11,750
Of course, this comes
with some requirements.

128
00:09:12,130 --> 00:09:17,589
It demands extensive test coverage,
which needs to be executed in CIA

129
00:09:17,590 --> 00:09:19,170
pipelines during merge requests.

130
00:09:19,739 --> 00:09:24,839
However, in the long run, this approach
helps avoid situations where we need

131
00:09:25,020 --> 00:09:29,449
changes from two different branches,
but aren't ready to merge them yet.

132
00:09:30,439 --> 00:09:34,775
When we release a build We tag
the corresponding comment with

133
00:09:34,775 --> 00:09:39,475
the appropriated version tag.

134
00:09:40,025 --> 00:09:45,255
we have regular releases with the
application is fully tested and on

135
00:09:45,255 --> 00:09:50,154
demand releases for specific brands,
usually containing minor changes.

136
00:09:51,105 --> 00:09:54,285
Here we branched off from tag 1.

137
00:09:54,745 --> 00:09:59,935
0. 0, added the required
modification and published version 1.

138
00:10:00,264 --> 00:10:08,325
0. 1. A critical point here, all changes
may still go into trunk first, no

139
00:10:08,325 --> 00:10:12,195
matter how tamping it might be applied.

140
00:10:12,495 --> 00:10:15,115
A fix directly to the release branch.

141
00:10:15,305 --> 00:10:17,915
Doing so is shooting
ourselves in the foot.

142
00:10:18,645 --> 00:10:24,984
Otherwise, we risk forgetting to merge
the fix back into the trunk, leading to

143
00:10:24,985 --> 00:10:27,725
a branch house and potential regression.

144
00:10:28,225 --> 00:10:34,735
And by not releasing directly from the
latest trunk, we gain a key adventure.

145
00:10:35,010 --> 00:10:38,820
The scope of undefined
changes remains minimal.

146
00:10:39,630 --> 00:10:43,940
This significantly speed up impact
analysis, allowing us to release

147
00:10:44,540 --> 00:10:47,020
faster with higher confidence.

148
00:10:47,520 --> 00:10:51,750
Testing white labels, friends, is
an additional layer built on top

149
00:10:51,750 --> 00:10:55,930
of the multi stage testing already
established for the main product.

150
00:10:56,610 --> 00:11:02,100
Here, both comprehensive unit and
integration test coverage are important.

151
00:11:02,645 --> 00:11:08,315
Along with UI end to end scenario
expansion which is particularly

152
00:11:08,445 --> 00:11:10,155
relevant for B2B cases.

153
00:11:11,155 --> 00:11:16,255
For an automation perspective, adopting
all existing tests for every new

154
00:11:16,255 --> 00:11:18,285
brand would be quite challenging.

155
00:11:18,845 --> 00:11:21,285
However, some limitations
can be addressed.

156
00:11:21,785 --> 00:11:23,744
For example, test users.

157
00:11:24,244 --> 00:11:28,814
We shouldn't create them manually and
hard code credential into the test,

158
00:11:29,464 --> 00:11:34,224
as this would require repeating the
process for every new white label app.

159
00:11:34,824 --> 00:11:39,724
Instead, it's better to teach
the test to prepare a user in

160
00:11:39,724 --> 00:11:41,204
required state dynamically.

161
00:11:41,704 --> 00:11:42,854
Let's make it happen.

162
00:11:43,354 --> 00:11:51,124
It might require a dedicated test
API to set up the user's state before

163
00:11:51,124 --> 00:11:58,644
launching the app with partially or
fully complicated KYC, deposit funds,

164
00:11:58,874 --> 00:12:07,734
etc. One challenge, however, is that
the initial data of the user may vary.

165
00:12:08,234 --> 00:12:12,404
For instance, each brand might have
different available registration country.

166
00:12:12,904 --> 00:12:16,594
Parameters like this can be
extracted into a separate class,

167
00:12:17,005 --> 00:12:20,484
allowing us to parameterize
the test runs more efficiently.

168
00:12:20,984 --> 00:12:26,394
Additionally, other brand specific
values may need to be accounted for,

169
00:12:26,554 --> 00:12:32,704
such as, expected app name, UI elements
like icons, animations, and more.

170
00:12:33,204 --> 00:12:44,004
configuration ensure that no circle or
critical data is overlooked when adding

171
00:12:44,004 --> 00:12:47,124
a new brand, even during compile time.

172
00:12:47,624 --> 00:12:52,784
At the same time, running the full
test Scope for every brand requires

173
00:12:52,834 --> 00:12:57,274
huge resources, both for maintaining
tests and running them in CI.

174
00:12:57,714 --> 00:13:03,254
In most cases, these tests don't reveal
issues, as core functionality usually

175
00:13:03,254 --> 00:13:05,254
doesn't depend on a specific brand.

176
00:13:06,174 --> 00:13:10,804
Our solution to address this
is creating a separate scope.

177
00:13:11,304 --> 00:13:13,324
Specifically for brand related checks.

178
00:13:13,824 --> 00:13:19,464
Aside from mandatory end to end checks,
without which we cannot release an app.

179
00:13:19,644 --> 00:13:24,194
This includes app identity
checks, ensuring correct

180
00:13:24,244 --> 00:13:26,814
branding elements are applied.

181
00:13:27,374 --> 00:13:32,674
Social authentication, as some
apps may use different Google

182
00:13:32,674 --> 00:13:34,074
and Facebook admin consoles.

183
00:13:34,574 --> 00:13:42,044
Push notifications for the same reason and
terms and conditions and other dependent

184
00:13:42,234 --> 00:13:44,474
settings, brand dependent settings.

185
00:13:44,974 --> 00:13:49,804
By analogy with one demand, on
demand release practice, where we

186
00:13:49,804 --> 00:13:55,154
perform impact analysis of changes
relative to the verified tag, we

187
00:13:55,154 --> 00:13:56,464
applied a similar approach here.

188
00:13:56,964 --> 00:14:01,484
We fully test only the first application
in the given release and for the sub

189
00:14:01,744 --> 00:14:07,664
sequence ones we run a smog brand scope
to verify only the brand specific aspects.

190
00:14:08,164 --> 00:14:11,214
We have tested the application,
now it's time to publish it.

191
00:14:12,099 --> 00:14:17,439
In general, any routine task should be
considered a candidate for automation.

192
00:14:18,119 --> 00:14:22,049
And if you are dealing with
multiple builds, automation

193
00:14:22,049 --> 00:14:23,869
becomes even more essential.

194
00:14:24,369 --> 00:14:24,709
Watch me here.

195
00:14:25,549 --> 00:14:28,339
There are already CI plugins for that.

196
00:14:28,839 --> 00:14:34,269
And you can scan QR codes To see
guides for Jenkins and GitLab CI

197
00:14:34,579 --> 00:14:39,499
and I bet there are similar solution
for other popular CI System as well.

198
00:14:39,999 --> 00:14:43,909
So let's go through how
to do this on Jenkins.

199
00:14:44,189 --> 00:14:49,834
Everything is simple We call a predefined
command and pass the build command Key

200
00:14:49,834 --> 00:14:52,384
points, don't trust the command name.

201
00:14:52,684 --> 00:14:57,164
It's actually support not only
APK, but a bundle as well.

202
00:14:57,594 --> 00:15:01,214
We pass the obfuscation mapping
file, so that we can later

203
00:15:01,214 --> 00:15:03,174
restore cache stack trace.

204
00:15:03,174 --> 00:15:06,024
We specify the release channel.

205
00:15:06,154 --> 00:15:09,614
Beside production, there
is also beta and internal.

206
00:15:10,344 --> 00:15:14,624
We can even define the reload
presentation to add Louis nodes.

207
00:15:15,124 --> 00:15:17,634
What about the first,
parameter on the slide?

208
00:15:17,634 --> 00:15:22,209
Thank you There are credentials you
need to obtain by generating a new

209
00:15:22,209 --> 00:15:29,529
service account key for your project
in Google Cloud Console and generation

210
00:15:30,029 --> 00:15:35,359
granting this account appropriated
permission for uploading builds.

211
00:15:35,859 --> 00:15:38,429
What about verifying the publication?

212
00:15:39,179 --> 00:15:45,809
Of course, you can use the internal
testing track for it, but only if you

213
00:15:45,929 --> 00:15:48,019
are already actively using this tab.

214
00:15:48,519 --> 00:15:53,249
If not, I recommend creating
a separate test application in

215
00:15:53,259 --> 00:15:55,119
the same Google Play Console.

216
00:15:55,539 --> 00:16:01,379
There is an issue, once, once you upload
a build to the internal or beta track,

217
00:16:01,699 --> 00:16:07,689
Google may require continuous updates even
if you have up tested for such purpose.

218
00:16:08,509 --> 00:16:12,689
For example, Google might force
target SDK level increases,

219
00:16:12,729 --> 00:16:14,189
permission removals, and so forth.

220
00:16:14,429 --> 00:16:18,939
Other policy updates, even
pausing the track doesn't help.

221
00:16:19,279 --> 00:16:24,419
It looks like a bug, but many developers
have encountered these problems.

222
00:16:24,839 --> 00:16:30,519
So if you don't plan to use the track long
term, it's best not to enable it at all.

223
00:16:31,019 --> 00:16:34,519
Let's sum it up before our
brains reach full capacity.

224
00:16:34,519 --> 00:16:41,569
We have discussed how modularization
changes health structure of the codebase,

225
00:16:41,619 --> 00:16:44,439
making it cleaner and easier to maintain.

226
00:16:45,084 --> 00:16:50,924
We have addressed how to, how a
consistent design system brings clarity

227
00:16:50,944 --> 00:16:54,984
and removes guesswork from UI decisions.

228
00:16:55,604 --> 00:17:00,674
We have highlighted the importance
of independent releases and how they

229
00:17:00,874 --> 00:17:03,294
reduce delays for client specific needs.

230
00:17:03,794 --> 00:17:06,784
Test automation ensures
reliability and efficiency.

231
00:17:07,284 --> 00:17:12,114
And publishing automation
simplifies app development, making

232
00:17:12,114 --> 00:17:13,934
the release smoother and faster.

233
00:17:14,434 --> 00:17:19,834
Each of these points reflects how we
streamlined the development and release

234
00:17:19,854 --> 00:17:22,554
process for white label applications.

235
00:17:23,054 --> 00:17:24,394
This is my cat, Ragnar.

236
00:17:24,524 --> 00:17:29,524
I asked him to make my presentation
less tangled, but he only

237
00:17:29,834 --> 00:17:31,274
managed to create one slide.

238
00:17:31,774 --> 00:17:35,404
Claiming he is very busy
with important cat business.

239
00:17:35,974 --> 00:17:37,784
I don't want to judge him for that.

240
00:17:38,284 --> 00:17:40,374
Thank you all for your time and attention.

241
00:17:40,424 --> 00:17:44,934
I truly appreciate it and I hope
you found this presentation useful.

242
00:17:45,424 --> 00:17:47,824
Have a great day and see you next time.

