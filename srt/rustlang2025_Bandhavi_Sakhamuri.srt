1
00:00:00,500 --> 00:00:01,339
Hello everyone.

2
00:00:01,519 --> 00:00:07,740
So I'm here to talk Mo mostly about
how we can do the carbon aware

3
00:00:07,980 --> 00:00:11,610
Kubernetes scheduling instead of the
traditional Kubernetes scheduling.

4
00:00:12,220 --> 00:00:17,460
You might be either using
E-K-S-A-K-S or GKE, like Google

5
00:00:17,880 --> 00:00:20,790
Kubernetes engine, whatever the
cloud platform Kubernetes you're

6
00:00:20,790 --> 00:00:22,590
using, or any bare metal Kubernetes.

7
00:00:23,010 --> 00:00:26,520
I think the future is that we
have to be, aware of building

8
00:00:26,520 --> 00:00:30,540
the sustainable infrastructure
and also not harming the planet.

9
00:00:31,200 --> 00:00:34,680
I've been like researching about that
and I've come up with a framework which

10
00:00:34,680 --> 00:00:40,880
will talk about what can be implemented
to improve the cost effectiveness,

11
00:00:40,910 --> 00:00:45,875
sustainability, and even environmental
friendly infrastructure as a whole.

12
00:00:46,175 --> 00:00:49,875
So basically the current challenge is
that, that there is like lot of cloud

13
00:00:49,875 --> 00:00:53,795
computing that is happening, like with
AI booming up and machine learning

14
00:00:53,795 --> 00:00:55,355
models are being training on that.

15
00:00:55,805 --> 00:01:00,665
Lots and lots of cloud EC2 resources
and e case resources are being used.

16
00:01:01,475 --> 00:01:06,245
So the traditional Kubernetes resource
management, usually like how it happens,

17
00:01:06,245 --> 00:01:09,785
like there is a scheduler and the
scheduler based on the request that it

18
00:01:09,785 --> 00:01:12,575
has based on the deployments that we have.

19
00:01:12,635 --> 00:01:17,645
It usually schedules the pods and
whatever the workloads that we

20
00:01:17,645 --> 00:01:19,295
have, they usually run on the pos.

21
00:01:20,135 --> 00:01:22,380
But the key issues that here are.

22
00:01:23,155 --> 00:01:26,905
Here are that the data center
account for approximately 1% of

23
00:01:26,905 --> 00:01:29,485
the global electricity consumption.

24
00:01:29,815 --> 00:01:30,865
That is like a lot.

25
00:01:31,345 --> 00:01:35,065
And the current k, the schedulers,
they only prioritize on like

26
00:01:35,065 --> 00:01:38,885
performance and availability of
the clusters, but they don't like

27
00:01:38,885 --> 00:01:44,825
schedule based on the sustainable,
your carbon air infrastructure and

28
00:01:44,875 --> 00:01:46,884
the cloud infrastructure often runs.

29
00:01:47,259 --> 00:01:50,979
Sometimes, like there are like sta city
instances that are just like lying around.

30
00:01:51,310 --> 00:01:56,469
There is no proper usage that is being
done and that is costing in many ways.

31
00:01:57,019 --> 00:02:00,709
Eventually the cost wise,
we are getting impacted.

32
00:02:00,739 --> 00:02:06,019
Environment wise, we are getting
impacted and also even availability wise.

33
00:02:06,349 --> 00:02:11,770
So here is the solution that I was
like thinking of or developing.

34
00:02:12,100 --> 00:02:18,910
So basically even all Google also has come
up with such APIs, I think before, but not

35
00:02:18,910 --> 00:02:20,740
like a fully grown Kubernetes solution.

36
00:02:20,740 --> 00:02:25,620
They were just trying to see how
they can do the, how they can work,

37
00:02:25,650 --> 00:02:30,150
how they can see the carbon air
scheduling can be done on the pots.

38
00:02:30,720 --> 00:02:33,570
And our solution is that it's a carbon.

39
00:02:34,500 --> 00:02:35,160
Scheduling.

40
00:02:35,429 --> 00:02:38,310
There are four major things to it.

41
00:02:38,910 --> 00:02:43,220
Firstly it integrates with the
carbon intensity data APIs.

42
00:02:43,270 --> 00:02:47,320
Like there, there might be so many
data data sources from where like we

43
00:02:47,320 --> 00:02:51,660
can integrate our Kubernetes with such
APIs and then try to gather like real

44
00:02:51,660 --> 00:02:56,255
time information like what is the what
is the, whether it is, whether the.

45
00:02:57,115 --> 00:03:02,305
Energy sources like wind energy or like
coal energy or hydro energy, we will

46
00:03:02,305 --> 00:03:07,945
be able to identify what kind of energy
it is so that real time car carbon

47
00:03:07,945 --> 00:03:09,600
awareness and predictive energy modeling.

48
00:03:10,405 --> 00:03:13,955
So we'll be deploying like a
machine learning models, which will

49
00:03:13,955 --> 00:03:16,355
forecast the energy consumption.

50
00:03:16,355 --> 00:03:20,435
Say supposedly I, if I have like batch
workloads, how much energy consumption,

51
00:03:20,465 --> 00:03:23,735
if I have a very critical production
workloads, how much energy consumption,

52
00:03:23,735 --> 00:03:27,545
if I have just like a simple standalone
jobs, what is the energy consumption?

53
00:03:27,545 --> 00:03:32,655
They predict that particular energy
consumption using the ML models and

54
00:03:32,655 --> 00:03:34,210
there is rust powered performance.

55
00:03:34,750 --> 00:03:38,800
Framework where like the critical
components implemented in the rust, they

56
00:03:38,800 --> 00:03:43,300
deliver like memory safe, concurrent
processing architectures like vary

57
00:03:43,300 --> 00:03:47,890
with minimal overhead, ensuring
like both sustainability and they

58
00:03:47,890 --> 00:03:49,360
don't compromise on any performance.

59
00:03:49,360 --> 00:03:52,750
So this rust framework has been like
coming out a lot and like many people

60
00:03:52,750 --> 00:03:57,490
are trying to play around with it on
implementing the best strategy possible.

61
00:03:58,180 --> 00:03:59,155
The next one is the.

62
00:03:59,800 --> 00:04:00,975
SLA SLAs.

63
00:04:01,810 --> 00:04:01,960
Yeah.

64
00:04:01,960 --> 00:04:05,480
We all our applications, they have
to meet what the SLA service level

65
00:04:05,480 --> 00:04:10,649
agreements and like crossing them or
not agreeing to that may cost a lot

66
00:04:10,890 --> 00:04:12,979
and million millions for the companies.

67
00:04:13,479 --> 00:04:17,444
So when you are like building
and algorithms you have to be

68
00:04:17,444 --> 00:04:20,794
like really aware of like your
applications, SLA agreement.

69
00:04:20,794 --> 00:04:23,195
And based on that, you
have to design your system.

70
00:04:23,695 --> 00:04:27,175
The Chrome, the core framework
architecture here, mainly we have

71
00:04:27,175 --> 00:04:31,315
like carbon aware scheduler, workload
scheduler, and metrics collector.

72
00:04:31,705 --> 00:04:37,795
So what this carbon aware scheduler
mainly does is that firstly it'll try.

73
00:04:38,515 --> 00:04:41,665
This is like completely rust
based and it will try to replace

74
00:04:41,665 --> 00:04:43,105
the traditional K scheduler.

75
00:04:43,105 --> 00:04:47,065
The KS will have its own scheduler
based on the replica set deployment,

76
00:04:47,065 --> 00:04:49,495
like whatever we define, it'll
try to schedule the bots.

77
00:04:49,495 --> 00:04:54,265
So this is more like car it's like next
version of it, say Carbon Air scheduler

78
00:04:54,775 --> 00:04:59,335
that optimizes, and then it tries to
integrate with the carbon data sources.

79
00:04:59,395 --> 00:05:01,075
The EPS that I was talking before.

80
00:05:01,344 --> 00:05:04,284
And then it, based on that, it
will try to schedule the workloads.

81
00:05:04,795 --> 00:05:06,685
The next one is the workload analyzer.

82
00:05:07,075 --> 00:05:07,284
Yeah.

83
00:05:07,645 --> 00:05:14,094
As I was telling before this specifically,
is that you have to understand like

84
00:05:14,365 --> 00:05:17,185
when your workload is like running,
you have to understand what is its

85
00:05:17,185 --> 00:05:21,164
energy consumption, like what kind
of energy consumption does it need.

86
00:05:21,255 --> 00:05:23,505
So based on that, you
can actually categorize.

87
00:05:23,849 --> 00:05:26,760
Your workloads, whether it is
like batch crossing, so and

88
00:05:26,760 --> 00:05:27,989
different kind of workloads.

89
00:05:27,989 --> 00:05:30,359
And you have to also estimate
the energy that it takes.

90
00:05:30,359 --> 00:05:33,390
So this is such kind of
like workload analyzer.

91
00:05:34,109 --> 00:05:35,940
And the third one is
the metrics collector.

92
00:05:36,299 --> 00:05:39,390
Metrics collector is mainly
you want to understand like

93
00:05:39,960 --> 00:05:41,280
how it is performing, right?

94
00:05:41,790 --> 00:05:45,990
What is the CPU memory usages,
like what is the energy consumption

95
00:05:45,990 --> 00:05:47,800
and like which type of the.

96
00:05:48,580 --> 00:05:50,600
Energy source that it is that it is using.

97
00:05:50,600 --> 00:05:53,630
So there are different kind of
metrics that you can categorize it.

98
00:05:54,050 --> 00:05:57,830
So you know that this particular
workload actually has utilized

99
00:05:57,950 --> 00:05:59,840
the energy source from the hydro.

100
00:05:59,870 --> 00:06:03,740
This particular workload has energy
source that is utilized from the coal.

101
00:06:03,830 --> 00:06:06,170
This particular workload
has used from solar.

102
00:06:06,200 --> 00:06:08,419
This particular has used
different kind wind energy.

103
00:06:08,419 --> 00:06:14,330
So different kinds of different kinds of
sources so that you know that you want to.

104
00:06:14,965 --> 00:06:20,855
Schedule those critical workloads on the,
or say, suppose if you have like very

105
00:06:20,855 --> 00:06:26,105
high availability or high performance
workloads, you can schedule them like

106
00:06:26,585 --> 00:06:30,695
on a mediocre or like high level cost
ones considering like they'll always

107
00:06:30,695 --> 00:06:35,855
be available, but some batch workloads
or some like minimal, not needed, not

108
00:06:35,855 --> 00:06:37,805
so important non-critical workloads.

109
00:06:37,805 --> 00:06:40,925
You can use them on the low
energy consumption workload, so

110
00:06:40,925 --> 00:06:42,635
that way you can save the cost.

111
00:06:43,135 --> 00:06:46,485
And the next one is the
rust implementation.

112
00:06:46,485 --> 00:06:50,565
I don't have to talk much anything about
it that, why did we pick rust for the

113
00:06:50,565 --> 00:06:55,375
carbon air computing because it has memory
safety without any garbage collection.

114
00:06:55,375 --> 00:06:57,385
It has predictable performance.

115
00:06:57,795 --> 00:07:01,425
It has the concurrency, it does
like load source footprint and

116
00:07:01,425 --> 00:07:03,585
it has compiled and guarantee.

117
00:07:03,585 --> 00:07:06,465
So there are like lots of
benefits using the rust.

118
00:07:06,965 --> 00:07:09,965
The next one is the machine learning
models for energy prediction.

119
00:07:09,965 --> 00:07:13,685
So what kind of machine learning
models actually predict the energy

120
00:07:13,685 --> 00:07:15,245
consumption of the workloads?

121
00:07:15,245 --> 00:07:17,255
So first one is the gradient decision.

122
00:07:17,255 --> 00:07:19,295
Trees like the gradient
boosting algorithm.

123
00:07:19,955 --> 00:07:21,185
The next is RNs.

124
00:07:21,185 --> 00:07:25,865
You can use them to analyze the temporal
patterns inside the workloads, to

125
00:07:25,865 --> 00:07:29,345
predict the what is the future energy
consumption trends, how much the

126
00:07:29,345 --> 00:07:31,715
energy is needed, and all of that.

127
00:07:32,105 --> 00:07:35,465
The last thing is the reinforcement
learning, where it'll continuously

128
00:07:35,465 --> 00:07:36,515
take the feedback loops.

129
00:07:36,825 --> 00:07:42,435
And then accordingly, we'll try to improve
the, improve towards the carbon reduction

130
00:07:42,445 --> 00:07:44,810
or lesser energy consumption techniques.

131
00:07:45,060 --> 00:07:47,199
RL is also included here.

132
00:07:47,700 --> 00:07:50,700
The next thing is the carbon
aware scheduling algorithms.

133
00:07:51,030 --> 00:07:56,379
So what kind of algorithms
together make up that, I make

134
00:07:56,379 --> 00:07:57,489
up that core of the system.

135
00:07:57,820 --> 00:08:00,460
The first one is the carbon data
integration, where you have to

136
00:08:00,460 --> 00:08:05,609
integrate the carbon intensity APIs
or data sources so that you understand

137
00:08:05,700 --> 00:08:07,229
where that energy is coming from.

138
00:08:07,650 --> 00:08:09,780
And the next one is the
workload classification.

139
00:08:09,780 --> 00:08:14,310
You can try to classify them as
like batch workloads or, the regular

140
00:08:14,310 --> 00:08:19,150
non-critical workloads or a, the
stateless workloads, based on the API

141
00:08:19,150 --> 00:08:22,690
calls, some workloads get triggered
so you can classify them accordingly.

142
00:08:23,260 --> 00:08:26,170
The next is, the next thing
is the temporal optimization.

143
00:08:26,540 --> 00:08:30,140
One, these different workloads are
identified and they're potentially

144
00:08:30,140 --> 00:08:33,920
rescheduled to execute during the
periods of like low carbon intensity or

145
00:08:34,430 --> 00:08:36,060
higher renewable energy, a availability.

146
00:08:36,800 --> 00:08:41,180
So there is like spatial, there
is like temporal optimization.

147
00:08:41,180 --> 00:08:43,940
Spatial optimization, where you
have like different workloads

148
00:08:43,940 --> 00:08:45,110
and non-deal workloads.

149
00:08:45,500 --> 00:08:49,500
These non-deal workloads are
assigned to the nodes, like where the

150
00:08:49,500 --> 00:08:52,230
lowest carbon emissions take place.

151
00:08:52,260 --> 00:08:56,760
Probably different workloads are assigned
to the higher renewable energy category,

152
00:08:56,880 --> 00:08:58,860
like saving wind energy or solar energy.

153
00:08:58,860 --> 00:09:02,980
So you can categorize based
on that resource efficiency.

154
00:09:02,980 --> 00:09:04,580
Definitely they can help to improve the.

155
00:09:05,080 --> 00:09:08,580
They can help to improve the
resources used on the node.

156
00:09:08,640 --> 00:09:10,250
So that improves the availability.

157
00:09:10,250 --> 00:09:13,610
Eventually it'll improve the
cost, definitely, and it'll

158
00:09:13,610 --> 00:09:15,020
reduce the energy consumption.

159
00:09:15,515 --> 00:09:18,875
So these five algorithms
are like really core.

160
00:09:18,875 --> 00:09:22,085
You have to integrate to the
carbon air APIs, you have to

161
00:09:22,085 --> 00:09:23,135
do the workload scheduling.

162
00:09:23,135 --> 00:09:27,005
You have to understand how much
energy is needed for your workloads.

163
00:09:27,035 --> 00:09:28,775
That is done with the
machine learning algorithms.

164
00:09:28,775 --> 00:09:31,205
They'll give you that
prediction based on that.

165
00:09:31,355 --> 00:09:35,670
Whatever the scheduler that we have
defined, it'll automatically route the.

166
00:09:36,080 --> 00:09:39,890
Route the workloads
onto the specific types.

167
00:09:40,070 --> 00:09:43,860
Say, suppose I have three or four
types where this node is this node

168
00:09:43,860 --> 00:09:48,400
is hosted on, this this node is
coming from an energy source, wind.

169
00:09:48,400 --> 00:09:49,390
This is coming from solar.

170
00:09:49,390 --> 00:09:52,010
This is coming from coal,
this is coming from hydra.

171
00:09:52,010 --> 00:09:53,390
So like different source of energy.

172
00:09:53,390 --> 00:09:58,190
So based on the priority or the
scheduler is like intelligent enough to

173
00:09:58,190 --> 00:09:59,780
understand, Hey, this has to go here.

174
00:09:59,780 --> 00:10:00,380
This is critical.

175
00:10:00,380 --> 00:10:01,400
This has to go here.

176
00:10:01,715 --> 00:10:08,045
So that carbonate scheduling algorithms
are defined and as usual coming

177
00:10:08,045 --> 00:10:11,045
to the next part, like integration
with the Kubernetes ecosystems.

178
00:10:11,525 --> 00:10:14,405
We usually have scheduler,
we have a metrics server.

179
00:10:14,405 --> 00:10:17,975
We have custom resource definitions,
and there is like Kubernetes operator.

180
00:10:18,515 --> 00:10:22,985
So all of these are ities, but there
will be a. A bit more enhancements

181
00:10:22,985 --> 00:10:27,515
that are that are there and they you
can like, try to implement and plug

182
00:10:27,515 --> 00:10:28,865
in these to the existing Kubernetes.

183
00:10:29,525 --> 00:10:30,155
Systems.

184
00:10:30,655 --> 00:10:34,225
Coming to the next slide, it's about
the deployment and implementation

185
00:10:34,225 --> 00:10:37,435
strategy, which is the critic key
critical part, like whenever you're

186
00:10:37,435 --> 00:10:40,885
trying to implement these or give them
or techniques in your own environments.

187
00:10:41,185 --> 00:10:44,905
The first thing is that you definitely
have to pick the non-critical workloads,

188
00:10:44,905 --> 00:10:46,495
like when you are hosting them there.

189
00:10:47,105 --> 00:10:51,545
Begin with like batch processing jobs or
non-time sensitive workloads that can be

190
00:10:51,545 --> 00:10:53,705
easily shifted to the low carbon periods.

191
00:10:54,020 --> 00:10:57,800
So you can implement this
through your like CSCD pipelines.

192
00:10:57,800 --> 00:11:02,030
And then suppose there are any like
data processing jobs, you can implement

193
00:11:02,030 --> 00:11:05,040
that and collect any baseline metrics.

194
00:11:05,340 --> 00:11:09,750
You can do that so that you will
understand like how much are you able

195
00:11:09,750 --> 00:11:13,860
to actually do that shifting towards
the carbon air scheduling or not.

196
00:11:14,790 --> 00:11:18,810
The next thing is the production
monitoring extent the product, extent

197
00:11:18,810 --> 00:11:22,260
to the production workloads as well,
but in the only monitoring only mode.

198
00:11:22,290 --> 00:11:27,940
So that so that you are not directly
enabling the carbon aware scheduling, but

199
00:11:27,940 --> 00:11:31,720
you're just like putting there enough like
in the monitoring mode and then you're

200
00:11:31,870 --> 00:11:38,450
analyzing like what is the energy this
particular thing is needed, or, or or if

201
00:11:38,450 --> 00:11:43,610
you integrate with the carbon sources,
you at least understand the understand the

202
00:11:43,610 --> 00:11:49,390
limitations or what is the kind of what
is the kind of scale that it needs to go

203
00:11:49,390 --> 00:11:53,080
which workloads has to go where you at
least analyze that and collect all that

204
00:11:53,230 --> 00:11:54,880
data and metrics in the second phase.

205
00:11:55,750 --> 00:11:58,990
The third phase is you actually
schedule the workloads, like you

206
00:11:58,990 --> 00:12:02,680
enable the carbon air scheduling for
some stateless services, for some

207
00:12:02,680 --> 00:12:06,760
applications where there is still like
little bit of leeway with the with the

208
00:12:06,820 --> 00:12:08,710
SLAs, which are not like very critical.

209
00:12:09,190 --> 00:12:11,590
Then you can configure these
stateless applications.

210
00:12:12,130 --> 00:12:16,260
With the carbon preferences, you can
implement some canary deployments or the

211
00:12:16,260 --> 00:12:19,410
rolling deployments, and then you can
monitoring like how they're performing

212
00:12:19,830 --> 00:12:23,790
or is there any breakage or is there any
like interruptions that are occurring with

213
00:12:23,790 --> 00:12:25,470
the workloads while they're scheduling.

214
00:12:25,470 --> 00:12:26,880
So you can monitor all of that.

215
00:12:27,690 --> 00:12:29,970
The next fourth phase is
the full implementation.

216
00:12:29,970 --> 00:12:33,150
Only after you have collected the
metrics from both non-prod and production

217
00:12:33,150 --> 00:12:34,650
environments, then you're able to.

218
00:12:35,250 --> 00:12:38,830
Gather them together, sit with your
teams, discuss, and then you can go

219
00:12:38,830 --> 00:12:40,600
ahead for the full phase of production.

220
00:12:41,100 --> 00:12:45,390
So say, suppose if this been implemented,
then that will be definitely 40%

221
00:12:45,390 --> 00:12:49,230
carbon reduction, considering you'll be
moving to the renewable energy sources.

222
00:12:49,230 --> 00:12:52,380
There will be some energy savings,
like you're not scheduling too

223
00:12:52,380 --> 00:12:56,130
many nos for a simple task, but you
will go in a controlled fashion.

224
00:12:56,490 --> 00:13:00,210
And then there will be cost reduction
as well, like a 15% cost reduction as.

225
00:13:00,505 --> 00:13:03,465
Definitely in all areas and case study.

226
00:13:03,645 --> 00:13:08,685
So you, one of the like global financial
companies or say Google, they're already

227
00:13:08,685 --> 00:13:13,995
like starting up with such carbon air
scheduling processes with the rust

228
00:13:13,995 --> 00:13:18,655
in the backend and they're trying to
like, move the noncritical workloads

229
00:13:18,655 --> 00:13:23,070
to the higher renewable energy re
resources to save some costs and then.

230
00:13:23,995 --> 00:13:27,025
Even they're okay with like
little interruptions and stuff.

231
00:13:27,115 --> 00:13:29,235
I'm sure like that will not happen.

232
00:13:29,235 --> 00:13:33,065
But even if it happens that is the case
then that they're okay with it and they're

233
00:13:33,065 --> 00:13:37,495
trying and like trying to improve the
implementation as much as possible and try

234
00:13:37,495 --> 00:13:39,815
to open source to other companies as well.

235
00:13:40,325 --> 00:13:45,845
Yeah, so this is like a open source
and ecosystem and the to framework,

236
00:13:45,845 --> 00:13:49,430
the algorithms and everything
has been like developed and then.

237
00:13:49,730 --> 00:13:54,840
And trying to encourage like people from
all over to even contribute to it as

238
00:13:54,960 --> 00:13:57,680
well and the future research directions.

239
00:13:57,710 --> 00:14:00,800
Yeah, you can have like
hardware level integration.

240
00:14:00,800 --> 00:14:02,960
You can have like edge
computing, adaptions even.

241
00:14:02,960 --> 00:14:07,370
You can implement this in your all edge
computing devices like mobile phones or

242
00:14:07,760 --> 00:14:12,890
in, if not essentially mobile phones or if
there are any devices like onsite inside

243
00:14:12,890 --> 00:14:15,270
the factories wherever they're located.

244
00:14:15,570 --> 00:14:19,710
Some industry specific models also can
be developed for all like big large scale

245
00:14:19,710 --> 00:14:22,770
industries and global policy framework.

246
00:14:22,950 --> 00:14:27,150
So still eu, US and like different
countries around the world have not

247
00:14:27,150 --> 00:14:30,750
proper policy has been like formulated
that is still in like progress.

248
00:14:31,250 --> 00:14:33,805
So yeah, you can get started
today if you're interested.

249
00:14:33,915 --> 00:14:34,845
Firstly, understand.

250
00:14:35,345 --> 00:14:41,385
Like how you can see the carbon footprint
data, how to integrate with those APIs,

251
00:14:41,385 --> 00:14:46,065
how to understand like how much is the
how the consumption patterns occur.

252
00:14:46,845 --> 00:14:48,205
And implement.

253
00:14:48,205 --> 00:14:51,175
Like the second step is to implement
the non-destructive components.

254
00:14:51,175 --> 00:14:54,325
Start with like observability and
analysis tools so that you can, you'll

255
00:14:54,325 --> 00:14:58,655
be able to understand like in your
environment what is the impact, like if

256
00:14:58,655 --> 00:15:02,015
you integrate them, like how would you
actually benefit from it, and how you

257
00:15:02,015 --> 00:15:03,815
can actually create a sustainability.

258
00:15:04,625 --> 00:15:07,595
The third thing is you can try this
carbon air scheduling the pilot

259
00:15:07,595 --> 00:15:09,845
program and then try to get onto it.

260
00:15:09,925 --> 00:15:13,015
Work it on your test cluster and
then try to gather the metrics,

261
00:15:13,315 --> 00:15:15,075
see if it is like helping or not.

262
00:15:15,585 --> 00:15:18,765
Then you can like scale across your
organizations to the different teams.

263
00:15:19,215 --> 00:15:24,435
So all in all, I can say that this carbon
air scheduling is definitely a benefit

264
00:15:24,945 --> 00:15:30,345
now and in future and we are saving
our earth for the future generations.

265
00:15:30,585 --> 00:15:30,735
Yep.

266
00:15:30,765 --> 00:15:30,945
Thank you.

