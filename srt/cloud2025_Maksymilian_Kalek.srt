1
00:00:00,010 --> 00:00:03,510
Hey everyone, my name is Maximilian
Kawek and I want to welcome you all

2
00:00:03,510 --> 00:00:08,710
to my talk on how to run powerful,
scalable, and ultra budget apps on AWS.

3
00:00:08,880 --> 00:00:10,989
First, I wanted to say
a few words about me.

4
00:00:11,219 --> 00:00:15,579
I am a full stack AI software engineer
at Perlin with around five years

5
00:00:15,579 --> 00:00:19,669
of experience in the field, and
I've worked with plenty of various.

6
00:00:20,564 --> 00:00:24,515
different technologies I've started
with monolithic infrastructures,

7
00:00:24,544 --> 00:00:26,945
Java and standard databases.

8
00:00:27,285 --> 00:00:33,884
Then I moved on to more of the modern
tech stack with plenty of cloud computing,

9
00:00:33,894 --> 00:00:38,965
also serverless infrastructures,
microservices, and all of the newest bits.

10
00:00:39,435 --> 00:00:43,905
And today I wanted to talk to
you a little bit about what I've

11
00:00:43,944 --> 00:00:46,405
learned, especially on how to.

12
00:00:46,625 --> 00:00:51,915
minimize the costs, without sacrificing
too much, of your time in regards to

13
00:00:52,065 --> 00:00:57,564
development, but also, in regards as to
scalability and also the possibility of,

14
00:00:57,775 --> 00:01:00,475
the possibilities of the infrastructure
that you would actually develop.

15
00:01:00,875 --> 00:01:04,235
Now, I just briefly wanted to
mention the agenda of the things

16
00:01:04,235 --> 00:01:05,395
that we'll talk about today.

17
00:01:05,785 --> 00:01:09,515
And in general, we'll be trying
to answer the question on how to,

18
00:01:09,615 --> 00:01:11,965
basically focus on ultra budget AWS.

19
00:01:11,994 --> 00:01:12,734
Is it possible?

20
00:01:12,965 --> 00:01:17,684
And if so, what are the possible
downsides of the, of this?

21
00:01:18,060 --> 00:01:20,200
thing of this idea of this concept.

22
00:01:20,600 --> 00:01:23,990
And then we'll also in the meantime,
talk about the key components of the

23
00:01:23,990 --> 00:01:29,890
infrastructure, how to do the cost saving
techniques, most, most efficiently.

24
00:01:30,380 --> 00:01:32,350
And also what are the possible trade offs.

25
00:01:33,025 --> 00:01:37,345
I also have one, real world
breakdown, a cost breakdown prepared

26
00:01:37,595 --> 00:01:40,615
from one of our applications that
we're running at our company.

27
00:01:40,995 --> 00:01:44,945
And yeah, let's get into that and
we'll talk about all of those things.

28
00:01:45,085 --> 00:01:46,395
So why UltraBudget?

29
00:01:46,475 --> 00:01:49,375
Who is it for and why should
you even care about this?

30
00:01:49,500 --> 00:01:53,930
So if you're a multinational,
corporation, which spends thousands of

31
00:01:53,930 --> 00:01:59,620
dollars every month on AWS, additional
20, 30, or 50 probably won't make

32
00:01:59,620 --> 00:02:00,770
that big of a difference to it.

33
00:02:01,140 --> 00:02:05,190
But if you're a cost conscious team
or an indie developer, or someone who

34
00:02:05,190 --> 00:02:08,990
just wants to develop a side project
or an MVP, then Ultra Budget is

35
00:02:08,990 --> 00:02:10,890
definitely in my opinion, the way to go.

36
00:02:11,150 --> 00:02:11,740
And it's.

37
00:02:12,590 --> 00:02:17,720
It's can prove to be an additional
perk that you can deliver such quality

38
00:02:17,740 --> 00:02:22,600
product and such maintain easy to
maintain product at such low costs.

39
00:02:23,140 --> 00:02:28,260
And we of course need to look and
tackle the challenges of traditional AWS

40
00:02:28,270 --> 00:02:30,790
setups, which the biggest thing is that.

41
00:02:31,290 --> 00:02:36,650
If you basically let AWS manage
everything and you want to have everything

42
00:02:36,700 --> 00:02:41,480
provisioned all the time, then this will
of course be reflected in your AWS bill.

43
00:02:41,719 --> 00:02:43,769
So we need to keep those
two things in mind.

44
00:02:44,049 --> 00:02:49,120
And my solution to this is to basically
strategize how to use which services.

45
00:02:49,409 --> 00:02:53,920
And basically, you can supply
them with cheaper or even free

46
00:02:53,920 --> 00:02:55,230
alternatives in some cases.

47
00:02:55,565 --> 00:02:59,295
here you can see the architecture
overview that I want to present to you.

48
00:02:59,555 --> 00:03:03,654
as you can see, it's one of the
probably simplest and easiest

49
00:03:03,655 --> 00:03:08,854
solutions to deploying a full
stack web application on AWS fully.

50
00:03:09,315 --> 00:03:12,975
But what I want to emphasize here
that as you can see, it's still like

51
00:03:13,005 --> 00:03:16,655
quite modular and quite expandable.

52
00:03:16,665 --> 00:03:20,954
So for example, it's not, the type of
all in the one solution, like Amplify,

53
00:03:20,954 --> 00:03:23,945
which AWS tries to encourage you to use.

54
00:03:24,355 --> 00:03:28,855
And where you're basically then fully
locked in, not even to the vendor

55
00:03:28,865 --> 00:03:32,985
as AWS itself, but rather to even
the specific service and it's quite

56
00:03:32,985 --> 00:03:34,445
difficult to migrate out of it.

57
00:03:34,814 --> 00:03:39,825
So what I definitely prefer on my end
is to basically modularize the things.

58
00:03:40,170 --> 00:03:43,610
And, yeah, I just like to
quickly go over this overview.

59
00:03:43,790 --> 00:03:48,200
So as you can see, for example, for my
type of ultra budget AWS infrastructures,

60
00:03:48,200 --> 00:03:53,410
what I always use is, I use GitHub
actions for the DevOps pipelines, which

61
00:03:53,410 --> 00:03:55,420
basically deploy the whole application.

62
00:03:55,420 --> 00:03:59,350
And I don't need to worry about
all of the, infrastructure for it.

63
00:03:59,620 --> 00:04:01,120
It's quite simple and efficient.

64
00:04:01,595 --> 00:04:06,695
Also, it's free as is important
in this regard in this topic.

65
00:04:07,145 --> 00:04:13,125
And what I then do is I use AWS as
CDK, which is basically a really simple

66
00:04:13,155 --> 00:04:18,024
infrastructure as a code tool where
you can, declare all of the components

67
00:04:18,024 --> 00:04:21,224
needed, the connections between them,
pass the information between one

68
00:04:21,224 --> 00:04:25,445
and the one and the other, and then
you don't basically need to go into

69
00:04:25,485 --> 00:04:27,785
AWS console ever to set anything up.

70
00:04:28,270 --> 00:04:32,520
And what I have inside of there is
the actual AWS infrastructure that

71
00:04:32,520 --> 00:04:34,080
I want to show to you, show to you.

72
00:04:34,500 --> 00:04:38,820
And yeah, as you can see, first of all,
we're like going, through the whole flow.

73
00:04:39,030 --> 00:04:42,909
What we have is we have a front
end, which is in my, manner, usually

74
00:04:42,929 --> 00:04:47,349
a React application hosted in an,
basically stored in an S3 bucket,

75
00:04:47,350 --> 00:04:50,169
which is then connected to CloudFront.

76
00:04:50,534 --> 00:04:54,244
This, yeah, I suppose we'll go
into the detail in a little bit.

77
00:04:54,244 --> 00:04:57,024
So I will just go briefly
between, through the whole flow.

78
00:04:57,394 --> 00:05:01,734
This then communicates directly
with Cognito, using its JavaScript

79
00:05:01,754 --> 00:05:05,049
libraries, like Amplify, but not to.

80
00:05:05,459 --> 00:05:10,039
not to mistake it for the actual
AWS Amplify tool, service, which

81
00:05:10,039 --> 00:05:13,189
are a little bit, which are,
the, disconnected in this regard.

82
00:05:13,190 --> 00:05:18,726
it's this, it then connects, it then
sends a REST request, but of course

83
00:05:18,726 --> 00:05:22,706
you can use, every type of API you
can possibly imagine with this.

84
00:05:23,046 --> 00:05:26,296
And then it sends a REST
request to API gateway.

85
00:05:26,596 --> 00:05:30,616
which, works as a middleman
for, our authorization layer.

86
00:05:30,616 --> 00:05:35,318
And it takes a little bit of the, of
the accountability and all of the, also

87
00:05:35,318 --> 00:05:40,268
a little bit of the responsibility of
handling the actual request from the

88
00:05:40,328 --> 00:05:42,818
Lambda, which it then directs it to.

89
00:05:42,818 --> 00:05:46,258
So basically API gateway,
I have set up as a proxy.

90
00:05:46,638 --> 00:05:52,228
And then it's, it proxies this,
requests to Lambda, which is one

91
00:05:52,228 --> 00:05:54,718
of the more interesting things
that I want to talk to you about.

92
00:05:54,718 --> 00:06:01,203
But this Lambda is also running an AWS
Lambda Power Tool, module inside of it.

93
00:06:02,043 --> 00:06:05,753
Which is a really useful Python
package that I will introduce

94
00:06:05,793 --> 00:06:07,013
to you in just a second.

95
00:06:07,313 --> 00:06:11,013
And then of course, this Lambda
API is your main center of the

96
00:06:11,023 --> 00:06:12,203
backend of the application.

97
00:06:12,913 --> 00:06:15,273
And then it can connect
to whatever it needs to.

98
00:06:15,513 --> 00:06:18,027
In this example, I
wanted to show you that.

99
00:06:18,248 --> 00:06:21,918
for example, for some cases, which
we'll discuss in a second, I'm,

100
00:06:22,568 --> 00:06:27,398
connecting it to DynamoDB and in some
other regards, it needs to communicate

101
00:06:27,428 --> 00:06:31,728
with an EC2 instance with, for
example, PostgreSQL installed on it.

102
00:06:32,108 --> 00:06:36,757
So regarding the specific bits of the
infrastructure that I wanted to talk.

103
00:06:36,908 --> 00:06:38,538
to you about a little bit more in detail.

104
00:06:38,838 --> 00:06:43,558
first of all, we've got the front end,
which is hosted on an S3 bucket and then

105
00:06:43,558 --> 00:06:47,978
connected to CloudFront and those two
components are connected to Cognita.

106
00:06:48,418 --> 00:06:53,238
So this gives us a really like
bare bones, simple structure

107
00:06:53,268 --> 00:06:55,058
type of hosting of static files.

108
00:06:55,358 --> 00:07:00,048
Because after you build your node
project, it can be hosted as such.

109
00:07:00,098 --> 00:07:02,228
for example, on an S3 bucket.

110
00:07:02,648 --> 00:07:07,818
Then what we use is we use the
CloudFront, service to provision,

111
00:07:08,128 --> 00:07:10,168
to give us basically HTTPS for free.

112
00:07:10,218 --> 00:07:12,908
that's one of the things, if you
don't have the domain yet set

113
00:07:12,908 --> 00:07:15,008
up, it's the, simplest solution.

114
00:07:15,258 --> 00:07:18,448
And other perks that it offers
is, for example, the global

115
00:07:18,448 --> 00:07:19,998
caching and fast access.

116
00:07:20,258 --> 00:07:24,118
yeah, there is, it's basically
a free or a really cheap

117
00:07:24,158 --> 00:07:25,738
because it's only cost you per.

118
00:07:26,358 --> 00:07:30,688
hundreds of gigabytes transferred, but
unless your website weighs it on, it

119
00:07:30,708 --> 00:07:33,008
won't be a problem in this scenario.

120
00:07:33,378 --> 00:07:38,078
And those components communicate with
Cognita, which handles user sessions.

121
00:07:38,348 --> 00:07:41,058
also the authentication and it.

122
00:07:41,358 --> 00:07:45,318
provides you all of the necessary
keys to actually communicate with

123
00:07:45,418 --> 00:07:47,148
the rest of your application.

124
00:07:47,588 --> 00:07:52,268
Next, we're going to briefly talk about
the core backend of our application,

125
00:07:52,568 --> 00:07:58,398
which is running AWS Lambda with the AWS
Lambda PowerTools package on top of it.

126
00:07:58,788 --> 00:08:04,168
And what Lambda is it's basically a
serverless cloud computing platform.

127
00:08:04,478 --> 00:08:09,308
which, enables you to run your code
basically virtually for free, unless

128
00:08:09,308 --> 00:08:13,938
you're using it, for hundreds or
thousands of hours every month.

129
00:08:14,498 --> 00:08:18,068
And, yeah, what are the
biggest advantages of it?

130
00:08:18,108 --> 00:08:19,908
Why are we picking it right here?

131
00:08:19,968 --> 00:08:22,018
comparing to some other,
like more traditional.

132
00:08:22,793 --> 00:08:28,383
Types of applications like running a flask
or a Django or fast API Python application

133
00:08:29,003 --> 00:08:33,793
on an EC2 instance or running it in a
cluster and managing maybe those, training

134
00:08:33,793 --> 00:08:37,943
them to scale them down to zero when there
is no traffic on the, on your platform.

135
00:08:38,373 --> 00:08:44,642
what Lambda does is it offers us great
simplicity for those type of solutions.

136
00:08:44,882 --> 00:08:46,532
Also, you don't need to worry about.

137
00:08:46,802 --> 00:08:48,722
any infrastructure management at all.

138
00:08:49,072 --> 00:08:53,822
And it's automatic scaling is
perfect because it basically

139
00:08:53,842 --> 00:08:56,412
doesn't run when it's not called.

140
00:08:56,592 --> 00:09:01,292
So once you're even, once your request
finishes, it's processing in this

141
00:09:01,292 --> 00:09:05,202
Lambda, it will come back to zero
and it won't cost you any more money.

142
00:09:05,712 --> 00:09:08,452
And there are a couple of challenges,
of course, to keep in mind.

143
00:09:09,237 --> 00:09:12,697
some of them are, as mentioned here,
for example, as you can see, the cold

144
00:09:12,697 --> 00:09:19,027
starts where you, if you've got a really,
I would say heavy in size Lambda and,

145
00:09:19,287 --> 00:09:24,477
plenty with plenty of large files, you
then need to keep in mind that it will

146
00:09:24,497 --> 00:09:27,577
take a little bit longer, a couple
seconds, for example, if you haven't

147
00:09:27,577 --> 00:09:29,192
started your Lambda in production.

148
00:09:29,382 --> 00:09:34,522
in an hour, or if there were no requests
hitting it, then it needs a second to

149
00:09:34,552 --> 00:09:39,722
basically heat up and to come back to
life and to serve your users, still.

150
00:09:40,362 --> 00:09:43,022
And the other things are
the stateless execution.

151
00:09:43,042 --> 00:09:48,187
So there isn't any, if there isn't
anything like a server session, basically

152
00:09:48,187 --> 00:09:52,387
on Lambda, because every request is
handled as a total separate entity.

153
00:09:52,807 --> 00:09:55,747
And of course there are some
deployment memory limits.

154
00:09:55,757 --> 00:10:00,777
So you can't basically host
huge applications with plenty of

155
00:10:00,867 --> 00:10:02,417
dependencies and packages on it.

156
00:10:02,767 --> 00:10:05,007
You need to keep all of
those things in mind.

157
00:10:05,437 --> 00:10:07,007
And what is Lambda Power Tools?

158
00:10:07,212 --> 00:10:10,192
It's a great package that
I've stumbled upon recently.

159
00:10:10,552 --> 00:10:14,782
And, before I introduce it, I want
to, briefly explain to it, to you

160
00:10:14,782 --> 00:10:18,132
what is the biggest challenge in
my opinion when developing APIs on

161
00:10:18,132 --> 00:10:19,782
Lambda without packages like this.

162
00:10:20,152 --> 00:10:22,432
And it's basically the boilerplate code.

163
00:10:22,442 --> 00:10:27,127
So when you're hitting
an AP, an AWS Lambda.

164
00:10:27,347 --> 00:10:32,177
You need to somehow manage the requests,
the types of requests, the bodies of

165
00:10:32,177 --> 00:10:36,387
those, the methods that are being used,
the paths that are being sent to, because

166
00:10:36,387 --> 00:10:40,777
if you have a lambda as a proxy, basically
every request that your frontend sends to

167
00:10:40,777 --> 00:10:43,687
an API, it goes to this one single lambda.

168
00:10:43,962 --> 00:10:49,462
And how I did this once in the past, which
I definitely regret is with a huge list

169
00:10:49,472 --> 00:10:56,252
of L if statement, basically checking the
string paths parameters and basically be

170
00:10:56,292 --> 00:10:59,112
the whole code base being a huge mess.

171
00:10:59,562 --> 00:11:03,282
And, yeah, there, there are a couple
of ways to, to of course, omit that

172
00:11:03,452 --> 00:11:08,312
and to make the development process
much nicer and much more develop,

173
00:11:08,362 --> 00:11:09,422
developer friendly, I would say.

174
00:11:10,042 --> 00:11:15,232
one of those that I used for a
moment is basically, using Flask, or

175
00:11:15,232 --> 00:11:20,832
fast API on Lambda, which are like
wrappers that allow you to write.

176
00:11:21,582 --> 00:11:25,262
flask like code with the
function decorators, specifying

177
00:11:25,312 --> 00:11:29,772
paths and methods and basically
handle it that for the Lambda.

178
00:11:30,112 --> 00:11:35,502
But this is a really, I'd say, messy
workaround, which, incurs additional

179
00:11:35,512 --> 00:11:40,002
issues and potential bugs because you
don't like flask wasn't built for that.

180
00:11:40,012 --> 00:11:41,663
So you're just, launching this.

181
00:11:41,863 --> 00:11:45,793
It's like trying to launch this package,
that is meant to run on the server.

182
00:11:46,023 --> 00:11:49,853
And that was built to run on the server
in a stateless cloud environment.

183
00:11:50,123 --> 00:11:54,153
So you basically, definitely
misuse this quite a lot.

184
00:11:54,463 --> 00:11:58,603
And, it's just unnecessary,
a huge dependency for that.

185
00:11:59,138 --> 00:12:04,188
And what is AWS Lambda Power
Tools is basically the perfect,

186
00:12:04,218 --> 00:12:05,958
replacement for all of those things.

187
00:12:06,168 --> 00:12:11,848
And what it is, it's an AWS developed
tool that allows you to write a Flask

188
00:12:11,938 --> 00:12:18,758
like code and FastAPI like code, but with
the Lambda thing being in mind first.

189
00:12:18,958 --> 00:12:24,788
So they basically did, build this exactly
for this to simplify the, procedure of

190
00:12:24,788 --> 00:12:30,298
writing code on lambdas and to simplify
it and to make it much easier to debug,

191
00:12:30,498 --> 00:12:32,818
to run, and to maintain in the future.

192
00:12:33,178 --> 00:12:34,118
And, some of it's.

193
00:12:34,423 --> 00:12:40,493
features that are available to every one
of you is my favorite one, which is the

194
00:12:40,503 --> 00:12:42,213
event handling, which I just described.

195
00:12:42,713 --> 00:12:49,133
And then it also enables you to make it
a little bit easier for your application

196
00:12:49,133 --> 00:12:51,363
to keep track of logging, tracing.

197
00:12:51,693 --> 00:12:56,983
Also, we've got some neat Python specific
features like validation, parsing, typing.

198
00:12:57,333 --> 00:13:02,163
So your whole code makes
much more sense right away.

199
00:13:02,473 --> 00:13:07,193
And now I wanted to talk to you a little
bit about different database solutions

200
00:13:07,243 --> 00:13:12,473
that I'm considering every time I'm
building an infrastructure on AWS.

201
00:13:12,763 --> 00:13:17,133
And first I wanted to introduce you
to DynoDB, which is a simple NoSQL

202
00:13:17,633 --> 00:13:23,693
key value based database, which is
my preferred solution for anything.

203
00:13:24,193 --> 00:13:26,243
that can be a reliably run on it.

204
00:13:26,563 --> 00:13:30,683
and what it is I would probably
compare it to, a Lambda in terms

205
00:13:30,723 --> 00:13:32,773
of, in the realm of databases.

206
00:13:33,003 --> 00:13:38,823
It allows you to pay only for the
traffic also, of course, for the storage.

207
00:13:38,833 --> 00:13:41,073
but unless you're, gathering
huge amounts of data.

208
00:13:41,468 --> 00:13:43,288
Still, again, it won't be a cost.

209
00:13:43,528 --> 00:13:47,928
You probably will be kept in
the three tier limit of AWS.

210
00:13:48,438 --> 00:13:53,408
And it allows you to also forget
about the whole infrastructure,

211
00:13:53,438 --> 00:13:58,138
the whole setup, and you only pay,
for the amount of traffic and the

212
00:13:58,138 --> 00:14:00,378
amount of data that you actually use.

213
00:14:00,748 --> 00:14:02,798
And it's also really efficient.

214
00:14:02,818 --> 00:14:07,518
It has really low latency and it
allows you to be really flexible.

215
00:14:07,528 --> 00:14:07,908
So.

216
00:14:08,578 --> 00:14:14,098
objects can, different differ between one
table and another, of course, that, this

217
00:14:14,098 --> 00:14:17,028
can lead to some challenges in production.

218
00:14:17,048 --> 00:14:18,078
Great applications.

219
00:14:18,478 --> 00:14:23,628
If you really need to, have all of
the data structures properly, then

220
00:14:23,628 --> 00:14:27,348
you need to keep the, storage of the
model somewhere, but this can still

221
00:14:27,348 --> 00:14:29,568
be done in your applications code.

222
00:14:29,568 --> 00:14:33,848
So it can be aware of which, fields,
are, for example, always present

223
00:14:33,848 --> 00:14:35,668
there or, and which might be missing.

224
00:14:35,968 --> 00:14:39,708
Of course, you can still run
migrations on this table, but those

225
00:14:39,708 --> 00:14:44,488
are done using, just using Python
scripts that you can execute there.

226
00:14:45,448 --> 00:14:49,818
And another, type of database that
you can run, of course, with still

227
00:14:49,858 --> 00:14:55,578
having the budget in mind is, at least
in my example, PostgreSQL on EC2.

228
00:14:55,878 --> 00:15:00,968
the default way suggested for, by
AWS and by most users is to, use

229
00:15:00,998 --> 00:15:05,298
RDS, which is relational database
service, or, yeah, service.

230
00:15:05,328 --> 00:15:09,658
And, the biggest challenge with that
is it's quite difficult to keep, to

231
00:15:09,658 --> 00:15:15,408
make it cheap and to make it not,
costs like at least 15 to 20 per

232
00:15:15,408 --> 00:15:17,218
month, even if you don't use it at all.

233
00:15:17,218 --> 00:15:19,268
If you don't have
anything running on there.

234
00:15:19,768 --> 00:15:25,128
And, the answer to that, in my
opinion, is, self hosting a database.

235
00:15:25,128 --> 00:15:29,498
Because you can, what you can do
is you can run a really cheap EC2

236
00:15:29,508 --> 00:15:33,768
instance that will cost you, even
the free ones do well enough, I would

237
00:15:33,768 --> 00:15:38,378
say, but if you decide for a little
bit more of a powerful one to handle

238
00:15:38,728 --> 00:15:42,858
more connections, for example, to the
simultaneous connections to the database.

239
00:15:43,313 --> 00:15:49,253
Then still, it will cost you about
two, three, 4 maximum per month, and

240
00:15:49,253 --> 00:15:54,243
then you've got an unlimited basically,
database, unlimited in terms of traffic,

241
00:15:54,243 --> 00:15:58,953
of course, because for the volume, you
will still need to pay a little bit.

242
00:15:59,483 --> 00:16:04,663
the biggest challenges of that, of course,
are the maintenance and backup management.

243
00:16:05,078 --> 00:16:10,898
that you need to do on your own and that's
basically the cost of, not paying AWS to

244
00:16:10,898 --> 00:16:15,347
do this, by themselves on using our, RWS.

245
00:16:15,428 --> 00:16:19,698
But in my opinion, it's still worth
it because once you set it up, then

246
00:16:19,708 --> 00:16:21,308
you can basically forget about it.

247
00:16:21,698 --> 00:16:26,378
And yeah, if you have a low traffic
application that needs an SQL

248
00:16:26,408 --> 00:16:28,368
database, that might be the way to go.

249
00:16:28,758 --> 00:16:34,528
it also allows you to, of course,
be a little bit more custom

250
00:16:34,578 --> 00:16:37,768
and to adapt it to your needs.

251
00:16:37,768 --> 00:16:41,888
So for example, if you need some vector
stores or those types of things, you

252
00:16:41,888 --> 00:16:43,808
can easily install them there as well.

253
00:16:44,078 --> 00:16:47,678
And that's something that
DynamoDB wouldn't allow you to do.

254
00:16:48,393 --> 00:16:53,153
And, yeah, to finalize my talk and to
show you a little bit of an example

255
00:16:53,153 --> 00:16:57,673
cost breakdown and the summary, it's
basically, as you can see, this is a

256
00:16:57,693 --> 00:17:02,773
receipt from AWS bills, to one of our
applications that, we are currently

257
00:17:02,773 --> 00:17:04,793
in a building in an MVP phase.

258
00:17:05,113 --> 00:17:09,523
And as you can see, the total cost of
the whole application was 3 per month.

259
00:17:09,783 --> 00:17:12,713
That's something that's
now easily achievable.

260
00:17:12,753 --> 00:17:16,113
If you follow all of the principles
that I've mentioned, of course,

261
00:17:16,143 --> 00:17:17,363
adapting them to your needs.

262
00:17:17,393 --> 00:17:20,713
Of course, if you have, much
more traffic than we did, then

263
00:17:20,753 --> 00:17:22,363
it can be a little bit higher.

264
00:17:22,418 --> 00:17:28,048
But, yeah, unless you go, from one day
to another, scaling the application for

265
00:17:28,058 --> 00:17:33,848
hundreds and thousands of active users,
nothing like this should or could happen.

266
00:17:34,338 --> 00:17:37,868
And yeah, this is basically
the summary of my talk.

267
00:17:37,868 --> 00:17:42,718
So I wanted to show you how to run the
ultra low, low total cost application.

268
00:17:43,208 --> 00:17:44,658
As you can see, this is.

269
00:17:44,808 --> 00:17:49,498
It's easily a production ready system
that you can introduce to your client

270
00:17:49,798 --> 00:17:57,068
and yeah, unless they need to make it
much more future proof or unless they

271
00:17:57,068 --> 00:18:02,528
need to implement their own hundreds
of thousands of custom functionalities

272
00:18:02,558 --> 00:18:06,698
using specific services, then you can
rely and basically build on top of that

273
00:18:07,008 --> 00:18:08,728
base architecture that I showed you.

274
00:18:09,278 --> 00:18:12,398
yeah, the serverless is the
way to go in my opinion.

275
00:18:12,398 --> 00:18:12,808
in this.

276
00:18:13,108 --> 00:18:19,138
regard, if you're not going to, if you
don't want to spend most of your time

277
00:18:19,198 --> 00:18:23,648
worrying about how to set everything up
and how to maintain it and back it up, I

278
00:18:23,648 --> 00:18:29,818
would say, yeah, using as much, as many,
serverless services is the way to go.

279
00:18:30,188 --> 00:18:33,728
Unless of course, those are the
expensive ones that you will be paying

280
00:18:34,058 --> 00:18:40,478
24 hours a day for just being present
there like RDS, which we tried to omit.

281
00:18:41,283 --> 00:18:45,053
And yeah, there are a plenty of
services that are budget friendly

282
00:18:45,383 --> 00:18:50,283
and it can be cost efficient if you
try it, if you try to be with it.

283
00:18:50,723 --> 00:18:52,783
And I think that would
be the end of my talk.

284
00:18:52,823 --> 00:18:56,273
Thanks a lot for listening to
me, listening to my presentation.

285
00:18:56,553 --> 00:19:00,083
I hope you liked it and I hope
to see you all in the future.

