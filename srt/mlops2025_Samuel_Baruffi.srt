1
00:00:00,540 --> 00:00:01,290
Hello everyone.

2
00:00:01,350 --> 00:00:02,700
Welcome to my session.

3
00:00:02,940 --> 00:00:07,560
My name is Samuel bfi and I am a
principle Solutions architect with AWS.

4
00:00:08,189 --> 00:00:12,780
I'm very excited to talk to
you today about Agent Core.

5
00:00:13,050 --> 00:00:19,170
Agent Core is a new AWS offering, which
is a set of functionality and primitives

6
00:00:19,350 --> 00:00:25,560
that allows you to build very quickly
and powerful production grade agent.

7
00:00:26,085 --> 00:00:30,645
The name of my talk today is from POC
to Production Shipping Enterprise AI

8
00:00:30,645 --> 00:00:33,254
Agents with Amazon Bedrock Agent Core.

9
00:00:33,915 --> 00:00:35,864
Without further ado, let's get started.

10
00:00:36,364 --> 00:00:40,334
When we talked about Agent Tech
ai, things have moved very quickly

11
00:00:40,514 --> 00:00:42,554
in the last couple of ears.

12
00:00:43,469 --> 00:00:46,364
But when Che Giti and, a smaller.

13
00:00:46,864 --> 00:00:51,724
Previous large language models
were released back in 2022.

14
00:00:52,414 --> 00:00:55,024
One of the very common things
that were being released was

15
00:00:55,024 --> 00:00:56,494
generative AI assistance.

16
00:00:56,494 --> 00:01:01,024
So chat bots that could maybe
respond to you, but do very little.

17
00:01:01,744 --> 00:01:07,565
Moving that we have created in the
industry, a lot of generative AI agents.

18
00:01:07,565 --> 00:01:09,695
So you can achieve a singular goal.

19
00:01:09,904 --> 00:01:13,594
Maybe there is one or few tools
available for the agent, and you

20
00:01:13,594 --> 00:01:16,624
could automate, specific workflows.

21
00:01:17,195 --> 00:01:23,285
And what we are talking about now and the
future of agent AI is agent AI systems

22
00:01:23,615 --> 00:01:29,285
that can operate fully autonomous, it can
have conversation across multiple agents.

23
00:01:29,524 --> 00:01:33,575
And now rather than just automating
a specific workflow, it can mimic

24
00:01:33,575 --> 00:01:35,645
the whole human logic and reasoning.

25
00:01:35,914 --> 00:01:40,265
Of course, we is still human in
the loop for security verification

26
00:01:40,445 --> 00:01:42,304
and hallucination and so forth.

27
00:01:42,755 --> 00:01:47,285
The whole idea is to increase productivity
and business values for our customers.

28
00:01:47,785 --> 00:01:54,085
A very interesting stats from 20
24, 30 3% of enterprise software's.

29
00:01:54,085 --> 00:01:58,945
Applications will actually
include iGen AI by 2028, which

30
00:01:58,945 --> 00:02:02,364
are up from less than 1% in 2024.

31
00:02:02,364 --> 00:02:07,405
So you can see in four years one third
of applications will include the agenda,

32
00:02:07,794 --> 00:02:10,014
and we can now already see this trend.

33
00:02:10,644 --> 00:02:14,635
That has been very
quickly evolving in 2025.

34
00:02:15,135 --> 00:02:21,525
These are also both researchers
based from and created by Gartner.

35
00:02:22,305 --> 00:02:28,415
Another research was that 15% of the
day to day work decisions will be made

36
00:02:28,865 --> 00:02:31,175
autonomous through Agen AI by 2020.

37
00:02:31,805 --> 00:02:34,505
There are pros and cons to that, and
we're gonna talk about some of the

38
00:02:34,745 --> 00:02:37,065
capabilities that can help you with that.

39
00:02:37,565 --> 00:02:41,315
Here are some agent AI use cases
across different industries.

40
00:02:41,495 --> 00:02:46,040
Each industry will be able to
apply agent and agent AI systems.

41
00:02:46,715 --> 00:02:50,265
At the different levels of
utilization and productivity.

42
00:02:50,445 --> 00:02:54,075
But let's say you are part of the
healthcare, you can do a lot of the

43
00:02:54,075 --> 00:02:59,385
patient and member engagement automation
that before always require a lot of

44
00:02:59,385 --> 00:03:01,135
humans in the end, in the backend.

45
00:03:01,405 --> 00:03:04,615
Now you can automate and make
those humans way more productive

46
00:03:04,825 --> 00:03:06,625
with automation of agents.

47
00:03:07,125 --> 00:03:10,905
What is the AWS vision for agents?

48
00:03:11,715 --> 00:03:18,045
The vision is to provide the best place
for you to build the most useful agents

49
00:03:18,075 --> 00:03:26,175
for your specific vertical to solve the
best and most important use cases that

50
00:03:26,175 --> 00:03:31,494
will help your customer improve, customer
expectation, potentially bringing down the

51
00:03:31,494 --> 00:03:35,685
cost and few other benefits that agent.

52
00:03:36,285 --> 00:03:41,774
Agent KI bring to the system and the
vision for AWS is for you to be able

53
00:03:41,774 --> 00:03:47,114
to deploy those agents while empower
empowering different organizations within

54
00:03:47,114 --> 00:03:54,284
your company to deploy those reliable
securable and scalable agents on AWS.

55
00:03:54,404 --> 00:03:55,424
So that's the vision.

56
00:03:55,484 --> 00:03:56,385
How do we do that?

57
00:03:56,954 --> 00:03:59,235
First we focus on the fundamentals.

58
00:03:59,865 --> 00:04:02,654
Four very important pillars
of the fundamentals are.

59
00:04:03,120 --> 00:04:06,180
We wanna use the state of the art science.

60
00:04:06,209 --> 00:04:10,800
So we have, Amazon has a big science
team and we put a lot of science

61
00:04:10,800 --> 00:04:15,089
work on building Bedrock Agent car.

62
00:04:15,329 --> 00:04:19,589
And you're gonna see that a lot of the
features built on Agent Car are very

63
00:04:19,589 --> 00:04:24,120
common requested features when companies
are building agency in production.

64
00:04:25,080 --> 00:04:30,000
Secondly, as very typical
AWS fashion, we wanna provide

65
00:04:30,000 --> 00:04:31,890
best in class infrastructure.

66
00:04:32,400 --> 00:04:37,110
For you to build and run those agents, and
we wanna manage that for you and make it

67
00:04:37,110 --> 00:04:40,830
easy for you to manage and invoke agents.

68
00:04:41,580 --> 00:04:48,510
Third is we wanna be the best place
for you to deploy a specialized agents.

69
00:04:48,660 --> 00:04:52,200
And when I talk about specialized
agents and talking about your magic

70
00:04:52,200 --> 00:04:54,990
sauce, what makes your business unique?

71
00:04:55,200 --> 00:04:59,580
How can you move some of that
magic specialized knowledge

72
00:04:59,610 --> 00:05:01,065
into a specialized agent?

73
00:05:01,695 --> 00:05:03,615
And make your productivity boost.

74
00:05:04,065 --> 00:05:07,965
And fourth, provide intuitive
experience so anyone can

75
00:05:07,965 --> 00:05:10,245
build and use powerful agents.

76
00:05:10,695 --> 00:05:15,074
So that is the fundamentals
that Agent Core was set to help.

77
00:05:15,574 --> 00:05:19,714
Now, before we talked about Agent
Core, it's important for us to take

78
00:05:19,714 --> 00:05:22,594
a step back and realize the broadest.

79
00:05:23,449 --> 00:05:28,879
Set of services that AWS offers for
customers to build and deploy agents.

80
00:05:29,299 --> 00:05:34,659
We have applications such as Q Dev,
KIRO, which are, set of applications

81
00:05:34,659 --> 00:05:41,059
that help developers build code and
have agent capabilities so we can use.

82
00:05:41,479 --> 00:05:47,179
Generative AI agents to help be your
co-program and help you actually

83
00:05:47,179 --> 00:05:51,379
accelerate the productivity as developers,
but you also focus for business.

84
00:05:51,379 --> 00:05:55,719
So you have Q Business and multiple
features that have generative AI

85
00:05:55,719 --> 00:05:57,999
capabilities within AWS services.

86
00:05:58,659 --> 00:06:02,259
Then you have some tools for
building AI agents such as Bedrock

87
00:06:02,259 --> 00:06:04,989
Marketplace, bedrock agents.

88
00:06:05,474 --> 00:06:09,429
Is STRs Nova Act, SDK, and many others.

89
00:06:09,429 --> 00:06:12,519
We're gonna talk about some of
those as we move forward here.

90
00:06:12,569 --> 00:06:19,499
The important thing to highlight is
Bedrock Agents has existed for almost

91
00:06:19,499 --> 00:06:25,889
two years now, but Bedrock Agents is
actually different than Bedrock Agent car.

92
00:06:25,979 --> 00:06:29,549
Bedrock agent is a more opinionated.

93
00:06:29,940 --> 00:06:35,640
Way for you to deploy agents where Agent
Core is this new set of primitives that

94
00:06:35,640 --> 00:06:41,039
brings a lot of flexibility and new
functionality for you to build on top of.

95
00:06:41,610 --> 00:06:45,974
That's just one important aspect that you
should be aware when you look at AI stack.

96
00:06:46,684 --> 00:06:49,504
We are not gonna talk about that
in depth, but we have a lot of

97
00:06:49,504 --> 00:06:51,664
chip sets, our own chip sets.

98
00:06:51,664 --> 00:06:56,194
We have nvi, the chip sets, we have md,
we have a service called SageMaker ai.

99
00:06:56,194 --> 00:07:01,684
So if you wanna actually go and
build your own models, you apologize

100
00:07:01,724 --> 00:07:03,344
you should be able to do that.

101
00:07:03,654 --> 00:07:08,199
But you also have a lot of the
fundamentals of large language

102
00:07:08,199 --> 00:07:12,979
models available for you on demand
with foundational models on bedrock.

103
00:07:12,979 --> 00:07:13,449
So you can use.

104
00:07:13,879 --> 00:07:15,529
And Tropic Cloud models.

105
00:07:15,529 --> 00:07:19,669
You can use Nova Models, you can
use metal models and many other

106
00:07:19,669 --> 00:07:21,199
models available in Bedrock.

107
00:07:21,899 --> 00:07:28,179
And we are gonna mostly focus on the
rest of the presentation on Agent Call,

108
00:07:28,419 --> 00:07:32,904
which is a set of primitives that allows
you to build production grade agents.

109
00:07:33,404 --> 00:07:37,874
So what is Agent Core and
how does he actually work?

110
00:07:38,374 --> 00:07:41,944
The whole idea is we kept here hearing
from customers in the last couple

111
00:07:41,944 --> 00:07:47,054
of in the last year, a couple months
that they're building rf, agent POCs.

112
00:07:47,054 --> 00:07:53,144
But the really challenge was from moving
from a POC that was running locally on

113
00:07:53,144 --> 00:07:59,024
a development laptop from a specific
developer to actually making that widely

114
00:07:59,024 --> 00:08:03,584
available within the ecosystem of the
company and also production writing.

115
00:08:04,559 --> 00:08:08,489
And the challenge to get to production
are how do you manage performance?

116
00:08:08,549 --> 00:08:10,319
How do you manage scalability?

117
00:08:10,439 --> 00:08:11,969
How do you manage security?

118
00:08:12,059 --> 00:08:13,949
And how do you have proper governance?

119
00:08:14,189 --> 00:08:19,869
With all those four pillars, if you have
a way to create a solution that you can

120
00:08:19,869 --> 00:08:25,539
deploy on top of, you are gonna get way
closer to your AI production agents.

121
00:08:26,499 --> 00:08:29,349
So let's now go and talk about some.

122
00:08:29,904 --> 00:08:33,984
Of the different primitives that Agent
Core have available for you to use.

123
00:08:34,484 --> 00:08:38,265
So the first primitive is
called agent Core runtime.

124
00:08:38,655 --> 00:08:39,734
Agent Core runtime.

125
00:08:39,794 --> 00:08:43,574
You can think of as the compute
where your agents can run.

126
00:08:44,204 --> 00:08:51,165
You can scale from zero agent
invocation now to as many as you want.

127
00:08:51,614 --> 00:08:54,194
It gets involved with very low latency.

128
00:08:54,625 --> 00:09:00,185
When you create a agent on agent
carbon time you have a way to

129
00:09:00,185 --> 00:09:02,704
invoke those agents through APIs.

130
00:09:03,035 --> 00:09:08,915
Those single agent invocations can
last for up to eight hours or less,

131
00:09:08,915 --> 00:09:13,015
and you pay for as much as you
are consuming within those session

132
00:09:13,015 --> 00:09:17,155
invocations is support different
payloads across different modalities.

133
00:09:17,155 --> 00:09:20,195
So if you have an agent that
requires different modalities

134
00:09:20,195 --> 00:09:21,905
like images, you can also provide.

135
00:09:22,350 --> 00:09:26,160
But the idea is this serverless
agent compute environment

136
00:09:26,160 --> 00:09:28,470
for YouTube run another.

137
00:09:28,870 --> 00:09:31,420
One of the things I should have
mentioned before, and I can mention

138
00:09:31,420 --> 00:09:36,010
later on, is the whole thing with
Agent Core is the ability for to

139
00:09:36,010 --> 00:09:38,530
pick and choose different primitives.

140
00:09:38,590 --> 00:09:40,630
One primitive is agent Core run time and.

141
00:09:41,495 --> 00:09:42,845
Only the primitives you want.

142
00:09:42,845 --> 00:09:46,315
So you are not buying into the whole
ecosystem if you don't want to.

143
00:09:46,525 --> 00:09:52,685
You can bring bits and pieces of what
you care to actually build your agents.

144
00:09:53,175 --> 00:09:57,375
And with agent carbon time, you
can actually deploy any agent using

145
00:09:57,375 --> 00:10:02,190
pretty much any framework, either
some familiar open source frameworks.

146
00:10:02,870 --> 00:10:07,920
Or actually build your own framework
as well with a very few lines of code.

147
00:10:07,920 --> 00:10:11,880
You can get a runtime up and running,
and then you can invoke your agent

148
00:10:11,880 --> 00:10:13,080
that is running on the cloud.

149
00:10:13,860 --> 00:10:18,570
You also have security by default,
so we have true session isolation to

150
00:10:18,570 --> 00:10:23,700
protect your customer data and integrates
very easily with identity provider.

151
00:10:23,760 --> 00:10:27,480
We're gonna talk about agent core
identity, but by integrating there,

152
00:10:27,510 --> 00:10:31,530
you can have a proper authorization
and authentication systems.

153
00:10:31,925 --> 00:10:36,905
Using o or 2.0 that it can connect
to your agent carbon time in

154
00:10:36,905 --> 00:10:38,945
order to invoke when you need to.

155
00:10:39,445 --> 00:10:40,885
How does it work behind the scenes?

156
00:10:40,895 --> 00:10:42,215
You build your agent.

157
00:10:42,575 --> 00:10:46,895
Your agent can be using any framework
strengths, land graph lang, chain crew,

158
00:10:46,895 --> 00:10:50,225
ai your own proprietary framework.

159
00:10:50,630 --> 00:10:51,800
You can use any models.

160
00:10:51,800 --> 00:10:55,910
It can be bedrock models, it can be
Gemini models, it can be open AI models.

161
00:10:56,120 --> 00:10:57,410
It doesn't really matter.

162
00:10:57,530 --> 00:11:00,920
Asian carbon time allows you to
pick and choose whatever model you

163
00:11:00,920 --> 00:11:04,710
wanna use, and then you bring in
the Asian carbon time decorator.

164
00:11:05,265 --> 00:11:07,905
You provide some observability
configuration if you wanna

165
00:11:07,905 --> 00:11:09,375
use Agent Core observability.

166
00:11:09,495 --> 00:11:13,035
And if you wanna do identity, you
also bring that behind the scenes.

167
00:11:13,035 --> 00:11:15,555
The way it works, you
create a Docker file.

168
00:11:15,645 --> 00:11:21,255
That Docker file gets a stored into a
registry, a ECR repository, and then you

169
00:11:21,255 --> 00:11:23,775
create an agent within Agent carbon time.

170
00:11:23,895 --> 00:11:27,435
And every time you have a user,
the user will invoke that.

171
00:11:27,940 --> 00:11:32,260
Endpoint where you have your agent
deployed and behind the scenes we will

172
00:11:32,260 --> 00:11:36,395
actually create a compute environment
for you with true session isolation.

173
00:11:36,760 --> 00:11:36,790
Okay.

174
00:11:37,360 --> 00:11:41,050
One important aspect to highlight
with Agent Core is Agent Carbon

175
00:11:41,050 --> 00:11:47,410
time allows you to roast agents like
strands, graph agents, we, those are

176
00:11:47,680 --> 00:11:52,210
using the HT P protocol, but agent
carbon time also have a different

177
00:11:52,210 --> 00:11:57,580
capability, which is the ability
for you to host a remote MCP server.

178
00:11:57,920 --> 00:11:59,150
Automatically for you.

179
00:11:59,240 --> 00:12:03,050
So you can create exactly like here,
you'd create a Docker file, but

180
00:12:03,050 --> 00:12:08,190
rather than using, Lang framework,
you'd be using maybe Fast MCP and you

181
00:12:08,190 --> 00:12:10,350
deploy that on Agent Core run time.

182
00:12:10,680 --> 00:12:14,850
And behind the scenes agent Core
run time supports the ability

183
00:12:14,850 --> 00:12:17,190
to actually talk MCP protocol.

184
00:12:17,805 --> 00:12:21,690
I don't have slides here, but that
is one of the capabilities as well.

185
00:12:22,190 --> 00:12:26,870
Another important aspect of building agent
is the ability for you to create identity.

186
00:12:26,870 --> 00:12:30,830
So once I have an agent, there are a
couple things I wanna do with the agent.

187
00:12:31,130 --> 00:12:36,890
How can I enable agents to be
using and be involved properly?

188
00:12:37,100 --> 00:12:40,750
Let's say I have an account into an
agent, and I wanna make sure that

189
00:12:40,750 --> 00:12:46,175
only the specific groups within that
system are able to invoke that agent.

190
00:12:47,000 --> 00:12:51,590
Let's say I have my application
built using third party tools such

191
00:12:51,590 --> 00:12:57,350
as Google, Salesforce, or Slack, and
I wanna give access to my agent to

192
00:12:57,350 --> 00:13:00,770
use that specific systems, right?

193
00:13:01,520 --> 00:13:05,810
Agent Core identity does multiple things,
and I'll show you in the next slide.

194
00:13:06,200 --> 00:13:08,690
But the whole idea of agent
core identities to minimize.

195
00:13:09,145 --> 00:13:14,845
The amount of work that it takes for you
to secure both the inbound authentication.

196
00:13:14,845 --> 00:13:19,345
So when you are calling an agent, and also
when the agent itself needs to call third

197
00:13:19,345 --> 00:13:24,535
party tools like Google in order to grab
some data from maybe your Google drive

198
00:13:24,895 --> 00:13:27,945
into the agent run specifically, right?

199
00:13:28,125 --> 00:13:31,455
So it's trying to streamlining
your authentication flows.

200
00:13:31,860 --> 00:13:36,570
What it allows you to do is to accelerate
AI agent development because there'll be

201
00:13:36,570 --> 00:13:42,090
a lot of set of prebuilt primitives that
you can use from the agent core identity.

202
00:13:42,090 --> 00:13:46,900
Like you can use your existing
identity systems such as Okta, Azure,

203
00:13:46,900 --> 00:13:53,530
ad, Amazon Kognito, and any other
that are supporting OAuth 2.0 flow.

204
00:13:53,870 --> 00:13:58,010
And the end goal here is to
lower custom development efforts.

205
00:13:58,355 --> 00:14:02,545
Without needing to migrate users
for this specific credential

206
00:14:02,545 --> 00:14:04,285
system or identity system.

207
00:14:04,675 --> 00:14:06,145
So how does it actually work?

208
00:14:06,645 --> 00:14:10,965
You have a user that user needs
to authenticate to a system you

209
00:14:10,965 --> 00:14:12,945
can be using, either IM or OAuth.

210
00:14:13,445 --> 00:14:17,285
Once you have the permission, you can
provide that permission to your agent.

211
00:14:17,315 --> 00:14:22,055
The agent will verify that your permission
is valid and you have access to actually.

212
00:14:22,700 --> 00:14:23,900
Invoke the agent.

213
00:14:23,960 --> 00:14:27,020
Remember this agent, because
these pieces of Agent Core

214
00:14:27,170 --> 00:14:29,000
can be consumed independently.

215
00:14:29,210 --> 00:14:32,360
The agent itself can be hosted
on Agent Core one time, or it

216
00:14:32,360 --> 00:14:36,110
can be hosted elsewhere, and you
still can use agent core identity.

217
00:14:36,740 --> 00:14:39,620
That's what we call agent
inbound authentication.

218
00:14:40,010 --> 00:14:44,510
Now, what is an outbound authentication
is now that your agent is running,

219
00:14:45,140 --> 00:14:48,770
and let's say your agent needs
permissions to call an AWS resource.

220
00:14:48,770 --> 00:14:50,870
Let's say your agent
is calling a database.

221
00:14:51,425 --> 00:14:54,760
What Agent Core identity allows you
to do is you also have outbound.

222
00:14:55,370 --> 00:14:56,240
Authentication.

223
00:14:56,240 --> 00:14:58,010
So you can configure that.

224
00:14:58,010 --> 00:15:03,290
Your agent should go and talk to it
identity to require and retrieve the IAM

225
00:15:03,290 --> 00:15:06,400
permission to then call AWS resources.

226
00:15:06,800 --> 00:15:09,600
But that can also be you can
see three different types of

227
00:15:09,600 --> 00:15:11,730
out outbound authentication.

228
00:15:11,970 --> 00:15:15,570
Another outbound authentication
could be an external resource,

229
00:15:15,690 --> 00:15:19,980
either through an API key or
potentially through a full flow.

230
00:15:20,400 --> 00:15:22,920
Two leg or three leg aut flow.

231
00:15:23,160 --> 00:15:25,650
Let's say you wanna go and
you're gonna talk to Salesforce.

232
00:15:25,830 --> 00:15:27,660
That will be an external resource.

233
00:15:28,080 --> 00:15:30,960
And I'm gonna pause here because
I'm gonna talk in a moment

234
00:15:30,960 --> 00:15:32,430
what Agent Core Gateway is.

235
00:15:32,430 --> 00:15:37,020
But another way to do is to
integrate a outbound authentication

236
00:15:37,140 --> 00:15:38,520
with your agent Core gateway.

237
00:15:39,390 --> 00:15:42,540
So Agent Core identity
allows you to seamless.

238
00:15:43,125 --> 00:15:47,955
Create solutions for your inbound
and outbound authentication

239
00:15:47,985 --> 00:15:49,845
in production for the agents.

240
00:15:50,345 --> 00:15:58,175
Now we hear from a lot of customers
that MCP has become so popular

241
00:15:58,565 --> 00:16:02,780
and, but managing potentially
hundreds of MCP servers can be very.

242
00:16:03,280 --> 00:16:04,030
Cumbersome.

243
00:16:04,480 --> 00:16:09,430
So what Agent Core Gateway allows
you to do is to simplify two

244
00:16:09,430 --> 00:16:11,260
development and integration.

245
00:16:11,500 --> 00:16:16,570
So Agent Core Gateway way you can think
about is it's a MCP server managed

246
00:16:16,570 --> 00:16:19,210
for you that you can very easily.

247
00:16:19,570 --> 00:16:24,040
Expose different tools that the
MCP server will make available.

248
00:16:24,070 --> 00:16:26,410
So you can turn existing APIs.

249
00:16:26,500 --> 00:16:31,025
So if you have an open API swagger
is schema, you can provide that the

250
00:16:31,025 --> 00:16:37,955
endpoints through that open API schema
to agent, core Gateway as a target

251
00:16:38,285 --> 00:16:42,455
and automatically agent Core gateway
will lease that as an available tools.

252
00:16:43,055 --> 00:16:43,670
You can also.

253
00:16:44,495 --> 00:16:48,935
Create Lambda functions as targets for
agent core gateway, and those Lambda

254
00:16:48,935 --> 00:16:55,115
functions will then behave as MCP
tools and you can access thousands of

255
00:16:55,115 --> 00:16:59,045
tools through a standardized interface,
which is agent core gateway itself.

256
00:16:59,345 --> 00:17:05,165
I'll show you how it works in a moment By
default, agent Core Gateway operates as

257
00:17:05,165 --> 00:17:12,275
a remote MCP server and you are required
to provide authentication to that agent

258
00:17:12,275 --> 00:17:16,865
core gateway, so only people that have
the proper authentication can call the MCP

259
00:17:16,865 --> 00:17:20,495
server because they have an endpoint that
is available either through the internet

260
00:17:20,495 --> 00:17:24,665
or through in the future, through your
VPC, and you'll be able to combine that.

261
00:17:25,250 --> 00:17:28,460
And also one of the
capabilities that is pre cool.

262
00:17:28,640 --> 00:17:31,850
It allows you to do intelligent
tool discovery, and I'll show

263
00:17:31,850 --> 00:17:33,620
you in a moment how that works.

264
00:17:34,100 --> 00:17:39,620
So you have an MCP client,
which is your agent or your IDE.

265
00:17:39,920 --> 00:17:42,860
You going to create a gateway
within agent core gateway.

266
00:17:43,070 --> 00:17:46,460
That gateway automatically
will behave as an MCP server.

267
00:17:47,060 --> 00:17:50,720
The beauty is behind the scenes,
you can create different targets.

268
00:17:50,720 --> 00:17:52,970
So one gateway can have multiple targets.

269
00:17:53,210 --> 00:17:55,640
And one target can have multiple tools.

270
00:17:55,860 --> 00:18:00,810
So one of the target type that is
supported right now is the API endpoint.

271
00:18:00,990 --> 00:18:04,230
So you provide your open API
schema and whatever are the

272
00:18:04,230 --> 00:18:05,880
endpoints that we have available.

273
00:18:06,060 --> 00:18:10,500
Agent core will auto automatically
convert that into tools.

274
00:18:10,560 --> 00:18:16,410
So as an agent or an MCP client, you can
very easily now consume your existing

275
00:18:16,440 --> 00:18:19,440
APIs as tools into your agent system.

276
00:18:20,430 --> 00:18:24,510
The other option is you can create a
Lambda target and you can build your

277
00:18:24,510 --> 00:18:28,590
own code, which whatever programming
language the Lambda supports, and you

278
00:18:28,590 --> 00:18:31,890
have a preference to build tools itself.

279
00:18:31,890 --> 00:18:36,600
So you can write code and build more
complex tools through Lambda functions.

280
00:18:36,660 --> 00:18:39,420
So that is how Agent Core
Gateway works at a high.

281
00:18:40,185 --> 00:18:44,985
Now one of the amazing capabilities
of Agent Core Gateway is what we

282
00:18:44,985 --> 00:18:49,815
call Symantec Search, which is a
very unique and cool feature that

283
00:18:49,815 --> 00:18:54,795
Agent Core has by default because
this is just using the MCP protocol.

284
00:18:54,855 --> 00:19:00,415
If you go and you do the list tools
request to your MCP server, which is the

285
00:19:00,415 --> 00:19:04,555
agent core gateway, gateway behind the
scenes, and you have hundreds in this

286
00:19:04,555 --> 00:19:08,315
case 360 tools, when you do list tools.

287
00:19:09,025 --> 00:19:12,505
Into the agent core gateway, it
is gonna return all the 300 tools.

288
00:19:12,955 --> 00:19:15,175
That is really not good practice.

289
00:19:16,105 --> 00:19:17,695
And why It's not good practice.

290
00:19:17,755 --> 00:19:19,645
I'm gonna talk about that in a moment.

291
00:19:20,095 --> 00:19:24,475
One of the capabilities that Agent Core
Gateway allows you to do is to do a

292
00:19:24,475 --> 00:19:27,385
semantic search on agent Core corrugate.

293
00:19:27,385 --> 00:19:32,035
So Agent Corrugate, you created some
knowledge base of all the tools that

294
00:19:32,035 --> 00:19:36,865
you have, and you can call an API
on agent Corrugate to say, Hey, my.

295
00:19:37,630 --> 00:19:42,220
Agent now, once you create a social
media post, go and find the tools

296
00:19:42,250 --> 00:19:46,690
that you have across these 360
tools that are able to do that.

297
00:19:47,110 --> 00:19:50,320
In this case, it returns four
relevant tools and you provide

298
00:19:50,320 --> 00:19:51,370
to the large language model.

299
00:19:51,670 --> 00:19:53,500
Now, what are the benefits to do this?

300
00:19:53,580 --> 00:19:57,300
First is Agent Corrugate will
automatically indexes the tools and

301
00:19:57,300 --> 00:19:59,640
gives a serverless semantic search.

302
00:20:00,210 --> 00:20:03,570
Think about a small rag
system for your tools.

303
00:20:03,930 --> 00:20:07,470
But mostly important if you're doing
the search, it allows you to reduce

304
00:20:07,470 --> 00:20:10,890
the context that you're passing for
every single agent's large language

305
00:20:10,890 --> 00:20:14,430
model, which is going to improve
your accuracy, speed, and cost.

306
00:20:14,580 --> 00:20:17,850
Because the more tools you provide,
the less accuracy you have.

307
00:20:18,060 --> 00:20:21,630
The is lower it is and the more
costly it is because you are gonna

308
00:20:21,630 --> 00:20:25,890
get charged by how much, how many
tokens you are providing as inputs.

309
00:20:26,430 --> 00:20:29,130
And what allows you to
do allows you to improve.

310
00:20:29,470 --> 00:20:34,030
The agent focus because it's only
focusing on the tools that are

311
00:20:34,030 --> 00:20:35,560
given for that specific task.

312
00:20:36,060 --> 00:20:40,830
So moving forward, another primitive
on Agent core is agent core memory.

313
00:20:41,250 --> 00:20:46,810
So memory is a very important aspect
of agents, which allows you to save.

314
00:20:47,680 --> 00:20:52,900
Maybe interactions that you have with
agent for future use that might be maybe

315
00:20:53,140 --> 00:20:58,360
history, like raw history between user and
agent, or potentially some preferences.

316
00:20:58,540 --> 00:21:02,020
What we call there is this
differentiation on agent core memory

317
00:21:02,020 --> 00:21:04,870
of short term memory versus long term.

318
00:21:05,515 --> 00:21:07,045
And they're gonna talk
about that in a moment.

319
00:21:07,315 --> 00:21:10,975
But agent core memory is built
for enterprise by default.

320
00:21:11,065 --> 00:21:15,415
So you have a completely data privacy
with dedicated storage for each customer.

321
00:21:15,415 --> 00:21:18,415
You can create these specific
namespace that only specific

322
00:21:18,415 --> 00:21:19,975
customers can have access.

323
00:21:20,255 --> 00:21:22,475
You can bring your own encryption to each.

324
00:21:22,475 --> 00:21:26,015
So if you have multiple customers and
you wanna encrypt the data differently

325
00:21:26,015 --> 00:21:27,695
across customers, you can do that.

326
00:21:27,885 --> 00:21:29,175
And you have deep customization.

327
00:21:29,940 --> 00:21:33,360
If you wanna bring what we call
long-term memory, you can define

328
00:21:33,360 --> 00:21:37,590
memory patterns based on your use
case, and you can extract the, you

329
00:21:37,590 --> 00:21:42,420
can extract rules and customize those
rules that are being done asynchronous.

330
00:21:43,140 --> 00:21:43,890
How does that work?

331
00:21:44,130 --> 00:21:47,730
The first concept on engine core memory
is what we call short-term memory.

332
00:21:48,030 --> 00:21:52,110
So you have your agent and you are
having conversation with your agent.

333
00:21:52,110 --> 00:21:55,020
So user message and response
from the larger language

334
00:21:55,020 --> 00:21:56,880
model and the specific state.

335
00:21:57,210 --> 00:22:00,930
What you can do is you implement
a integration agent core memory,

336
00:22:00,930 --> 00:22:05,700
that you're saving those messages
into the short term memory space.

337
00:22:06,070 --> 00:22:12,820
You can store short term memory for up to
3,365 days and you can customize how long

338
00:22:13,240 --> 00:22:15,945
the specific messages are gonna be stored.

339
00:22:16,445 --> 00:22:20,465
Once you have short term memory, you can
then, of course, once a new invocation

340
00:22:20,465 --> 00:22:24,815
of your agent is spun up, you can
retrieve the API for agent core memory

341
00:22:25,025 --> 00:22:29,075
to retrieve maybe the last day or all
the memory that you have on short term

342
00:22:29,075 --> 00:22:31,715
memory into your existing conversation.

343
00:22:31,925 --> 00:22:32,885
That's one type of memory.

344
00:22:33,485 --> 00:22:35,975
The other type of memory, which
is very powerful, is what we

345
00:22:35,975 --> 00:22:37,235
call the long term memory.

346
00:22:37,685 --> 00:22:42,860
So the raw messages are useful at some
point but actually what you want to.

347
00:22:43,530 --> 00:22:48,580
Do in the long term is extract a
specific long-term memories, right?

348
00:22:48,790 --> 00:22:52,960
And when you have a short term
memory, you can decide if you want

349
00:22:52,960 --> 00:22:54,850
to also enable long-term memory.

350
00:22:55,180 --> 00:22:59,710
And behind the scenes agent
core memory will asynchronous

351
00:22:59,710 --> 00:23:05,680
automatically extract pieces of
memory should be saved on long term.

352
00:23:05,830 --> 00:23:09,220
You can specify, so you can
do Symantec where you specify.

353
00:23:09,720 --> 00:23:12,720
What type of memory you
wanna extract for long term.

354
00:23:13,080 --> 00:23:14,760
You can provide user preferences.

355
00:23:14,760 --> 00:23:19,100
So let's say I go on my agent and I
always say color blue behind the scenes

356
00:23:19,130 --> 00:23:23,460
agent core memory will extract that
and I will be saved as a preference.

357
00:23:23,490 --> 00:23:24,660
Or I can provide summary.

358
00:23:24,660 --> 00:23:30,800
So let's say every day after the
agent does, its some type of work, it

359
00:23:30,800 --> 00:23:34,670
goes and summarize the work has done
and saves long-term memory, then the

360
00:23:34,670 --> 00:23:36,230
long-term memory can be retrieved.

361
00:23:36,560 --> 00:23:39,220
And you can provide those
memories, long-term memories

362
00:23:39,220 --> 00:23:40,900
as part of new invocations.

363
00:23:40,900 --> 00:23:44,530
Because remember, large language
models don't remember memory by

364
00:23:44,530 --> 00:23:46,210
defaulting from past interactions.

365
00:23:46,210 --> 00:23:48,250
You are responsible in providing that.

366
00:23:48,490 --> 00:23:50,800
And agent core memory
allows you to do that.

367
00:23:51,300 --> 00:23:52,980
And you can see, okay, that's what I want.

368
00:23:52,980 --> 00:23:55,920
So the next capability
is Agent core browser.

369
00:23:56,505 --> 00:24:01,755
So is the ability for you to use
a automated serverless browser

370
00:24:01,785 --> 00:24:06,075
infrastructure if your agent needs
to use, so let's say you wanna

371
00:24:06,075 --> 00:24:10,455
build a agent and you want the
agent to literally use a browser.

372
00:24:10,515 --> 00:24:14,265
Let's say you wanna buy a,
you wanna build an agent that

373
00:24:14,265 --> 00:24:16,815
can buy items from amazon.com.

374
00:24:17,365 --> 00:24:20,395
If the agent needs to use a browser,
and there are different tools that

375
00:24:20,395 --> 00:24:22,375
support this capability of navigating.

376
00:24:23,140 --> 00:24:25,390
A browser using a large language model.

377
00:24:25,420 --> 00:24:28,950
I'm gonna show you some of the tools,
some of the models and open source

378
00:24:28,950 --> 00:24:30,570
libraries that allows you to do that.

379
00:24:30,720 --> 00:24:34,015
But you always need to have the
compute for your specific browser.

380
00:24:34,515 --> 00:24:38,745
Agent Core Browser is a tool that is
available on Agent Core that allows

381
00:24:38,745 --> 00:24:40,845
you to have very low latency browser.

382
00:24:40,965 --> 00:24:45,195
It can scale from zero to hundreds of
concurrent session, which each session

383
00:24:45,195 --> 00:24:49,455
is gonna create its own browser and not
share any data across the other sessions.

384
00:24:49,745 --> 00:24:52,835
And also you can do proper
secure credential handling.

385
00:24:53,275 --> 00:24:53,550
You can.

386
00:24:54,550 --> 00:24:57,280
I also do live streaming
RL for monitoring.

387
00:24:57,280 --> 00:25:01,750
So if you wanna show the user what your
agent is doing and clicking buttons,

388
00:25:01,750 --> 00:25:06,400
you can do the live streaming URL
and embedding into our application

389
00:25:06,460 --> 00:25:08,320
on how the browser is being used.

390
00:25:08,560 --> 00:25:12,980
You can do session replace for debugging
and you can do very extensive logging

391
00:25:12,980 --> 00:25:17,330
for all the browse commands that have
been done through CloudTrail if enabled.

392
00:25:18,125 --> 00:25:19,175
Now, how does it work?

393
00:25:19,255 --> 00:25:23,455
As a user, if you have an agent and
you say buy shoes on Amazon, you

394
00:25:23,455 --> 00:25:25,105
need to have a large language model.

395
00:25:25,195 --> 00:25:29,245
The large language model can be
Nova X, it can be Nova, it can be

396
00:25:29,245 --> 00:25:31,825
Cloud, it can be many other things.

397
00:25:32,035 --> 00:25:36,565
You create a tool, that tool is you
need to build or you can use open

398
00:25:36,565 --> 00:25:41,125
source tools such as browser user
and few other Cap, a few other open

399
00:25:41,125 --> 00:25:42,505
source libraries that are there.

400
00:25:42,895 --> 00:25:48,325
But what the tool use will be, you'll
be explaining how to use the browser

401
00:25:49,165 --> 00:25:51,745
into this specific large language model.

402
00:25:51,985 --> 00:25:58,105
So you translate the tool, call into
instruction commands using playwright,

403
00:25:58,105 --> 00:26:00,145
library or browser using library.

404
00:26:00,700 --> 00:26:04,630
Once you translate then that execution
environment where you see headless

405
00:26:04,630 --> 00:26:09,460
browser or hosted library server is
specifically where Agent Core will

406
00:26:09,460 --> 00:26:13,900
be running, and you can run multiple
invocations for the sessions right there.

407
00:26:14,290 --> 00:26:21,550
So very powerful because he allows you
to completely remove the necessity of

408
00:26:21,550 --> 00:26:25,630
you managing the browser itself and
just give that, that, that specific.

409
00:26:26,405 --> 00:26:31,565
Power to agent core browser, and you
can focus on the end goal of your agent

410
00:26:31,595 --> 00:26:33,845
in this case navigating amazon.com.

411
00:26:34,345 --> 00:26:38,245
Another tool that is made available as
part of Agent Core and you can pick and

412
00:26:38,245 --> 00:26:44,215
choose if you want to use, is the ability
to red code as part of a code sandbox.

413
00:26:44,455 --> 00:26:48,295
So models are really good at trying
to solve problems by generating code.

414
00:26:48,700 --> 00:26:51,850
But you always need to have
some place to run the code.

415
00:26:52,390 --> 00:26:58,070
You can execute this code securely using
agent card code interpreter because it

416
00:26:58,070 --> 00:27:03,110
creates this isolated sandbox compute
environment that you can run code.

417
00:27:03,835 --> 00:27:05,005
Check for the results.

418
00:27:05,005 --> 00:27:06,025
Run code again.

419
00:27:06,235 --> 00:27:07,615
Download the outputs.

420
00:27:07,645 --> 00:27:12,085
It can process gigabytes of
scale data sets efficiently.

421
00:27:12,085 --> 00:27:16,795
If you're using S3 integration and
without any a p limitation, it's very

422
00:27:16,795 --> 00:27:21,175
easy to use because it has prebuilt
execution run times for JavaScript

423
00:27:21,175 --> 00:27:25,495
types with Python, with Common Library
springs out, you can customize that

424
00:27:25,795 --> 00:27:28,150
and the way it would work and the way
it would look is you have an agent.

425
00:27:28,720 --> 00:27:33,310
And that agent has a large language
model and you give a tool selection to

426
00:27:33,310 --> 00:27:35,170
create a sessional code interpreter.

427
00:27:35,170 --> 00:27:40,600
So you create an agent that gives a
tool to execute code, and that code

428
00:27:40,600 --> 00:27:42,580
would be execute on code interpreter.

429
00:27:42,610 --> 00:27:46,730
You write some API integration with
age agent, core code interpreter.

430
00:27:47,060 --> 00:27:48,890
That code interpreter
will have a file system.

431
00:27:48,890 --> 00:27:51,770
And Michelle and the large language
model now can generate code,

432
00:27:51,770 --> 00:27:53,450
run code on code interpreter.

433
00:27:53,880 --> 00:27:58,320
The beauty of this is completely
isolated and secure by default.

434
00:27:58,320 --> 00:28:02,980
So even if you have some hackers
trying to do charge, export some

435
00:28:02,980 --> 00:28:04,360
vulnerability on your agent.

436
00:28:04,510 --> 00:28:07,270
If they go on code interpreter,
there is no root access.

437
00:28:07,270 --> 00:28:11,910
There is nothing they can do to share
any data across any other session

438
00:28:11,970 --> 00:28:13,230
that code interpreter is doing.

439
00:28:13,620 --> 00:28:16,670
And of course, you can explore the
telemetry with observability, which

440
00:28:16,670 --> 00:28:19,240
you're gonna talk about in a moment now.

441
00:28:19,840 --> 00:28:24,160
The last but not least, is
the ability for you to monitor

442
00:28:24,190 --> 00:28:25,420
everything that is happening.

443
00:28:26,110 --> 00:28:29,650
Agent Core Observability allows
you to provide a comprehensive

444
00:28:29,650 --> 00:28:34,120
end-to-end visibility into your
agent orchestration system.

445
00:28:34,480 --> 00:28:39,740
It allows you to accelerate the debugging
and audits by using the primitives that

446
00:28:39,740 --> 00:28:44,150
you pick and then exposing the metrics
and logs into agent core observability.

447
00:28:44,650 --> 00:28:50,920
The good thing here is if you are already
a CloudWatch user, you can use very

448
00:28:50,920 --> 00:28:56,350
quickly prebuilt dashboards, traces
that Agent Core Observability brings.

449
00:28:56,350 --> 00:29:01,940
But if you don't want to use CloudWatch
or you use some other type of monitoring

450
00:29:01,940 --> 00:29:07,300
systems, what you can do is you can
export the logs as Open Telemetry.

451
00:29:07,300 --> 00:29:08,200
Open Telemetry is.

452
00:29:08,875 --> 00:29:12,655
A open standard that is commonly
used and accepted across

453
00:29:12,655 --> 00:29:14,665
multiple observability systems.

454
00:29:14,975 --> 00:29:18,005
And that with that open telemetry,
you can just expose that to

455
00:29:18,005 --> 00:29:20,315
whatever monitoring system.

456
00:29:20,555 --> 00:29:23,675
If, let's say you, in case you don't
wanna use CloudWatch, but if you

457
00:29:23,675 --> 00:29:27,515
only use CloudWatch, you can see the
first image agent Car Permissibility

458
00:29:27,515 --> 00:29:29,765
dashboards is built on CloudWatch.

459
00:29:29,915 --> 00:29:33,095
And you can see the traces,
you can see every single call

460
00:29:33,095 --> 00:29:34,715
that it was made to your model.

461
00:29:34,715 --> 00:29:35,665
Every single tool that it was.

462
00:29:36,275 --> 00:29:39,545
Use, and you can see the whole
tracing automatically being done.

463
00:29:39,635 --> 00:29:43,235
So the way it works, you have agent core
observability that integrates with of

464
00:29:43,235 --> 00:29:48,485
course, agents running on agent carbon
time memory, using agent core memory tools

465
00:29:48,485 --> 00:29:52,625
for an agent car gateway, browser for
an agent, car browser code interpreter

466
00:29:52,625 --> 00:29:57,005
for code interpreter, and whatever you
pick and choose, you can just integrate

467
00:29:57,005 --> 00:30:02,165
into Agent Core observability and use
the benefits either on CloudWatch or

468
00:30:02,225 --> 00:30:04,475
if you wanna expose logs into other.

469
00:30:05,225 --> 00:30:05,795
Systems.

470
00:30:05,795 --> 00:30:07,835
You can do that as well
as you can see here.

471
00:30:08,335 --> 00:30:10,855
Now, we talked about the features.

472
00:30:10,915 --> 00:30:14,065
This is the whole ecosystem
of agent core, right?

473
00:30:14,335 --> 00:30:20,245
So it allows you to pick and choose either
the whole ecosystem of a specific features

474
00:30:20,275 --> 00:30:27,400
like Agent core run time or agent car
gateway and build your agents with less.

475
00:30:28,335 --> 00:30:33,475
Burden on the security, the
scalability, the monitoring the

476
00:30:33,475 --> 00:30:36,650
reliability, the pay the cost as well.

477
00:30:36,650 --> 00:30:38,750
Because everything you've
seen here is pay as you go.

478
00:30:39,270 --> 00:30:43,690
Any scale from zero to as many
as you need it given er demand.

479
00:30:44,170 --> 00:30:46,960
So this is the whole
ecosystem of Agent Core.

480
00:30:47,140 --> 00:30:51,160
As of now, today's September 5th,
as I'm recording this session.

481
00:30:51,470 --> 00:30:55,840
Agent Core is in preview hopefully
soon, BGA and you'll be able to build

482
00:30:55,840 --> 00:31:02,110
production grade agents at on AWS
using whatever framework you want,

483
00:31:02,290 --> 00:31:03,640
using whatever models you want.

484
00:31:04,140 --> 00:31:09,160
And then some things that are coming
soon is of course HA are coming soon.

485
00:31:09,160 --> 00:31:13,540
So agent to agent integration right now is
not supported as a protocol will be coming

486
00:31:13,540 --> 00:31:16,670
soon for a specific I think runtime.

487
00:31:16,760 --> 00:31:18,440
It will be an example
that will be supported.

488
00:31:18,440 --> 00:31:22,825
HA, the frameworks, screw ai, line graph
length change, trend agents, and many.

489
00:31:23,415 --> 00:31:26,085
But of course you have
the agent core capability.

490
00:31:26,175 --> 00:31:28,515
The whole bedrock ecosystem is pretty big.

491
00:31:28,695 --> 00:31:31,815
You have the ability to
access models on demand.

492
00:31:31,965 --> 00:31:36,105
You have the ability to do optimization
and caching of those models.

493
00:31:36,105 --> 00:31:38,115
You can create and fine tune your models.

494
00:31:38,265 --> 00:31:39,885
You can bring guard rails.

495
00:31:40,035 --> 00:31:45,555
You can create automatically manage
re databases With Bedrock knowledge

496
00:31:45,555 --> 00:31:49,695
base, I highly recommend you look into
knowledge base if you have a retrieval

497
00:31:49,695 --> 00:31:52,275
augmented generation re use case.

498
00:31:52,760 --> 00:31:59,780
So Agent Core comes into very
good position to contribute to

499
00:31:59,780 --> 00:32:01,580
the whole bedrock ecosystem.

500
00:32:02,480 --> 00:32:06,410
And what I recommend to you, if
you are interested here, are a

501
00:32:06,410 --> 00:32:10,310
couple cure codes that you can
pause the presentation and scam.

502
00:32:10,730 --> 00:32:14,330
I really recommend you look at Agent
Core samples, you redirect you to

503
00:32:14,330 --> 00:32:18,780
a GitHub repository where you're
gonna be able to actually see.

504
00:32:19,255 --> 00:32:25,315
Multiple tutorials and use cases using
the different capabilities of Agent Core.

505
00:32:25,315 --> 00:32:28,975
So if you're interested on Agent
Core Gateway, you can navigate to the

506
00:32:28,975 --> 00:32:34,485
GitHub repository and you can see very
specifically how to implement the code.

507
00:32:34,485 --> 00:32:37,035
You can see the code, you can see
the different use cases, you can

508
00:32:37,035 --> 00:32:40,875
see the different tutorials, and of
course, our agent core documentation

509
00:32:40,995 --> 00:32:42,765
and the agent core blog posts.

510
00:32:43,275 --> 00:32:46,975
Without further ado, thank you so
much for watching for my presentation.

511
00:32:47,125 --> 00:32:49,945
If I have any questions,
again, my name is Samuel bfi.

512
00:32:50,095 --> 00:32:53,635
You can find me on LinkedIn at
just at Samuel bfi and you'll

513
00:32:53,635 --> 00:32:54,655
be able to find me there.

514
00:32:54,655 --> 00:32:57,740
You can connect if you have any
questions about the agent core and I'll

515
00:32:57,755 --> 00:32:59,985
be available to answer any questions.

516
00:33:00,225 --> 00:33:01,035
Thank you so much.

517
00:33:01,035 --> 00:33:04,095
Enjoy com 42 ml ops and
I'll see you around.

518
00:33:04,155 --> 00:33:04,575
Bye-bye.

