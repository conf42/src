1
00:00:00,000 --> 00:00:00,540
Hello everyone.

2
00:00:00,590 --> 00:00:01,220
This is koala.

3
00:00:01,910 --> 00:00:04,959
I'm a senior DevOps
engineer working for Rotter.

4
00:00:05,350 --> 00:00:09,219
So today my topic is the
synergistic impact of AI in DevOps.

5
00:00:09,790 --> 00:00:12,790
So today I'm excited to talk
about something that is, shaping

6
00:00:12,790 --> 00:00:14,079
the future of engineering.

7
00:00:14,419 --> 00:00:16,400
The convergence of a and DevOps.

8
00:00:16,759 --> 00:00:18,829
As many of DevOps has transformed.

9
00:00:19,205 --> 00:00:23,584
How we release software enabling
fast iterations, automation, and

10
00:00:23,584 --> 00:00:25,324
also a culture of collaboration.

11
00:00:25,594 --> 00:00:31,185
But what happens when we inject AI
into this already powerful lifecycle?

12
00:00:31,615 --> 00:00:35,945
We get intelligent automation that
adapts, predicts and loans from data.

13
00:00:36,275 --> 00:00:38,755
We move from reactive
processes to predictive.

14
00:00:39,355 --> 00:00:40,885
And also perspective ones.

15
00:00:41,185 --> 00:00:44,825
The shift means, fewer outages,
more stability systems,

16
00:00:44,885 --> 00:00:46,505
and, faster feedback loops.

17
00:00:46,865 --> 00:00:51,335
It's not just about writing code
and, shipping fast and fast anymore.

18
00:00:51,695 --> 00:00:53,405
It's about shifting shipping.

19
00:00:53,405 --> 00:00:53,885
Smart.

20
00:00:54,615 --> 00:00:59,005
Let's take about talk about a key
takeaways from this project like our

21
00:00:59,005 --> 00:01:03,595
which I'm presenting like a adds like
a predictive intelligence to automation

22
00:01:03,935 --> 00:01:09,035
and also like a DevOps plus ai, which is
autonomous and adaptive delivery cycles.

23
00:01:09,335 --> 00:01:12,995
It enables smarter decisions
across the software lifecycle.

24
00:01:13,425 --> 00:01:18,005
Transforms feedback loops into
learning systems, turns raw data

25
00:01:18,005 --> 00:01:21,005
into actionable operational insights.

26
00:01:21,770 --> 00:01:25,530
So let's talk about the ai
assisted development tools.

27
00:01:25,650 --> 00:01:30,430
AI is now sitting next
to developers in the IDs.

28
00:01:30,500 --> 00:01:35,439
Tools like GitHub copilot, Amazon
Code Whisperer, and TAM nine are

29
00:01:35,709 --> 00:01:37,959
revolutionizing how we build software.

30
00:01:37,959 --> 00:01:41,679
Let's talk about like how this what these
tools do and how they're very useful.

31
00:01:42,069 --> 00:01:47,499
They, auto complete full functions and
boiler plate logic and also suggest

32
00:01:47,499 --> 00:01:52,469
variable names logic improvements
and also fixing them generates unit

33
00:01:52,469 --> 00:01:54,689
tests and documentation on the fly.

34
00:01:55,439 --> 00:01:56,859
And also their adapt to.

35
00:01:57,404 --> 00:02:00,764
They adapt the code base and also
like a developer style over time.

36
00:02:01,274 --> 00:02:07,094
So with ai developers move faster learn
quicker, and also produce a cleaner code.

37
00:02:07,544 --> 00:02:12,544
No more searching stack workflow
for Synex help these tools act extra

38
00:02:12,634 --> 00:02:17,864
experienced mentors helping engineers
write a better code and also reduce

39
00:02:17,864 --> 00:02:20,754
bugs from day two, from day one.

40
00:02:21,839 --> 00:02:25,589
And also it the impacts like by
using these tools are like, 30 to

41
00:02:25,589 --> 00:02:30,759
50% faster development, speed lower
onboarding friction for new development

42
00:02:31,009 --> 00:02:35,724
to developers higher consistency
and reduce the technical depth.

43
00:02:38,259 --> 00:02:42,049
So let's talk about GitHub co-pilot
which is a AI coding assistant.

44
00:02:42,589 --> 00:02:47,719
GitHub Copilot deserves a special mention
because it's not just auto complete.

45
00:02:47,989 --> 00:02:51,809
It's contextual code
project prediction at scale.

46
00:02:52,089 --> 00:02:56,289
Copilot learns from millions of
open source projects and adapts

47
00:02:56,289 --> 00:02:58,149
to your project in real time.

48
00:02:58,719 --> 00:03:02,109
If you want to talk about why
Copel stands out, it understands,

49
00:03:02,109 --> 00:03:06,369
context, functions and dependencies,
and also can build entire block

50
00:03:06,369 --> 00:03:08,509
of logic from a common prompt.

51
00:03:09,229 --> 00:03:14,039
And also it suggests like a test and
its edge cases and, writes talk strings.

52
00:03:14,499 --> 00:03:16,509
Imagine let's imagine writing a function.

53
00:03:16,589 --> 00:03:21,789
To process a CSV data co-pilot, not only
reach the header, but suggest like how

54
00:03:21,789 --> 00:03:24,279
to handle errors and, misleading fields.

55
00:03:24,639 --> 00:03:26,139
That's next level productivity.

56
00:03:26,439 --> 00:03:31,918
As eruption grows, teams are saving hours
per week and also increasing our test

57
00:03:31,918 --> 00:03:36,469
coverage without trying and additional
benefits are like, it enhances paid

58
00:03:36,529 --> 00:03:39,529
programming acts as a live documentation.

59
00:03:39,814 --> 00:03:44,493
And also boost our creativity
and experiment experimentation.

60
00:03:46,283 --> 00:03:49,103
Let's talk about a for
tive pipeline management.

61
00:03:49,563 --> 00:03:51,154
So we all know CAC, right?

62
00:03:51,154 --> 00:03:56,788
Until pipelines fail mysteriously a
helps us like, prevent them, it is very

63
00:03:56,788 --> 00:04:01,018
interesting, like by analyzing build
histories and also commit metadatas.

64
00:04:01,703 --> 00:04:05,743
And also job patterns air flags
issues before they happen.

65
00:04:06,103 --> 00:04:10,993
A, in pipeline animals, like a prediction
of, flaky test and also like unstable

66
00:04:11,023 --> 00:04:16,003
branches, smart reordering of job
execution for performance, and also

67
00:04:16,003 --> 00:04:20,633
like detection of regressions before
matching to Maine dynamic resource

68
00:04:20,723 --> 00:04:23,003
location to reduce cost and waste.

69
00:04:23,423 --> 00:04:26,723
So while time, these intelligent
adjustments make pipelines

70
00:04:26,813 --> 00:04:31,224
faster and far more reliable,
developers get faster feedback.

71
00:04:31,489 --> 00:04:35,239
Least the reli teams get
cleaner artifacts and also like

72
00:04:35,239 --> 00:04:37,609
businesses get better uptime.

73
00:04:37,979 --> 00:04:42,249
Let's talk about the real time world
scenarios, like where it is really

74
00:04:42,249 --> 00:04:48,259
valuable up to 40% faster pipelines
and also 20% fewer fail bills.

75
00:04:48,629 --> 00:04:51,149
Like you can have confidence
scoring for every commit.

76
00:04:53,609 --> 00:04:57,368
So let's talk about a Sigma solve which
is a predictive pipeline management.

77
00:04:57,858 --> 00:05:00,078
Let's explore like a real time example.

78
00:05:00,358 --> 00:05:05,628
Sigma solve this platform adds an a
layer on top of your CACD workflow.

79
00:05:06,133 --> 00:05:10,333
What Sigma solve does, is it
analyzes, commits test coverages

80
00:05:10,363 --> 00:05:12,503
and file vol volatility.

81
00:05:12,803 --> 00:05:17,793
And also scores each build from zero
to a hundred for deployment readiness.

82
00:05:18,133 --> 00:05:22,143
And also flags deployment that
resemble patched high risk pattern

83
00:05:22,413 --> 00:05:27,373
suggests like a rerouting high
risk builds to staging r qa.

84
00:05:28,298 --> 00:05:33,038
Sigma solve turns your pipeline
into a risk aware engine.

85
00:05:33,098 --> 00:05:36,758
It also learns from your
team's behavior and address.

86
00:05:36,818 --> 00:05:37,758
Its threshold.

87
00:05:38,058 --> 00:05:41,338
As your code base evolve
developers trust it.

88
00:05:41,388 --> 00:05:43,778
Managers use it to improve velocity.

89
00:05:44,528 --> 00:05:45,998
Let's talk about a team outcomes.

90
00:05:46,038 --> 00:05:50,618
It'll be used for fewer rollbacks and
more confidence in fast shipping and

91
00:05:50,618 --> 00:05:54,038
also a better collaboration between
development and the operations.

92
00:05:55,538 --> 00:05:58,028
So let's talk about a,
in a DevOp security.

93
00:05:58,418 --> 00:06:01,738
Security is often the
bottleneck in fast delivery.

94
00:06:02,308 --> 00:06:07,468
A helps, close the gap between speed
and safety security challenges.

95
00:06:07,518 --> 00:06:12,268
A, what a s are like, secrets
hard coded in your pool request.

96
00:06:12,598 --> 00:06:16,913
Ly permissive IAM policies
infrastructure drift from Terraform

97
00:06:16,913 --> 00:06:22,848
to AWS and also behavior anomalies
in service to service calls with

98
00:06:22,848 --> 00:06:28,438
a, you can scan for patterns across
millions of logs, not just signatures.

99
00:06:28,888 --> 00:06:29,958
A learns from breaches.

100
00:06:30,568 --> 00:06:36,908
Across the globe and once you, before
you make the same mistake, it clusters

101
00:06:37,338 --> 00:06:42,448
alerts and reduces false positives
and recommends remedy remediations.

102
00:06:43,238 --> 00:06:47,348
Bonus features are like NLP modules
that automate summarize incident

103
00:06:47,348 --> 00:06:52,958
reports risk scoring by repository
environment GI hooks that enforce,

104
00:06:52,968 --> 00:06:54,888
like a security posture early.

105
00:06:57,438 --> 00:07:00,853
Let's talk about a DevOps metrics
improvement with a doesn't

106
00:07:00,853 --> 00:07:02,563
just help, it shows results.

107
00:07:03,023 --> 00:07:06,233
Teams using AI in the DevOps
pipeline have seen massive

108
00:07:06,233 --> 00:07:08,343
implements in their core metrics.

109
00:07:08,653 --> 00:07:12,533
Let's talk about some of the measurable
implements deployment frequencies

110
00:07:12,583 --> 00:07:13,993
which are increased by twice.

111
00:07:14,214 --> 00:07:19,624
Lead time for cha changes 50%
reduction hours from hours to minutes.

112
00:07:19,654 --> 00:07:22,954
Like change failure
rate is reduced by 30%.

113
00:07:23,434 --> 00:07:26,374
A helps, teams correlate incidents.

114
00:07:26,794 --> 00:07:27,394
To metrics.

115
00:07:27,394 --> 00:07:30,844
If a test fails, often a flags it.

116
00:07:30,944 --> 00:07:35,564
If a release causes spikes in
latency, AA connects it to the commit.

117
00:07:35,804 --> 00:07:41,554
Instead of reacting to the dashboards,
you respond to insights as observability

118
00:07:41,644 --> 00:07:47,704
to action automated RCA like a root cause
analysis, and also like a smart alerting

119
00:07:47,704 --> 00:07:49,684
that ties, logs to specific deploys.

120
00:07:50,044 --> 00:07:53,360
And also it suggests to roll back,
scale up or like a change Confis.

121
00:07:55,909 --> 00:07:59,889
So let's talk about a financial
services a applications in finance

122
00:08:00,099 --> 00:08:01,809
every second matters, right?

123
00:08:01,929 --> 00:08:07,419
And also does every transaction a
helps institutions secure systems

124
00:08:07,719 --> 00:08:12,579
ensure uptime and maintain compliance
use cases in finance are like,

125
00:08:12,589 --> 00:08:15,599
predicting night batch job delays.

126
00:08:15,894 --> 00:08:22,694
Detecting out of patent a PA usage
flagging unauthorized config changes auto

127
00:08:22,694 --> 00:08:25,604
generating audit trail from CACD metadata.

128
00:08:25,994 --> 00:08:30,894
With ai finance teams can operate
fast without sacrificing security.

129
00:08:31,224 --> 00:08:36,784
It's like having a compliance assistant
monitoring your pipelines compliance

130
00:08:36,784 --> 00:08:40,214
meets velocity transplant traceability.

131
00:08:40,729 --> 00:08:45,559
Prior to governance and also like a
built-in risk analysis on deployments.

132
00:08:47,299 --> 00:08:48,919
So let's talk about e-commerce.

133
00:08:48,949 --> 00:08:50,454
AI DevOps applications.

134
00:08:50,754 --> 00:08:54,704
E-commerce is a battlefield of,
milliseconds, customers don't wait.

135
00:08:54,854 --> 00:09:01,004
A ensures the backend scales just as fa
fast as user demands key enhancements

136
00:09:01,004 --> 00:09:02,804
with ai r like, like eight four.

137
00:09:02,964 --> 00:09:08,129
It is used to forecasting traffic
spikes for pre-cal cashy preloading

138
00:09:08,129 --> 00:09:12,519
based on user trends and also
detecting slow queries in the real time

139
00:09:13,099 --> 00:09:14,899
rerouting users during edge outage.

140
00:09:16,654 --> 00:09:20,084
And also let's imagine like
deploying a new card service, like

141
00:09:20,084 --> 00:09:22,244
10 minute before a flash sale.

142
00:09:22,634 --> 00:09:27,714
AA monitors latency and the ab bots like,
a rollout if users, conversations drop.

143
00:09:28,254 --> 00:09:30,609
And also bus let's talk
about the business outcomes.

144
00:09:30,859 --> 00:09:34,649
It is used to, give zero down time
during events like a Black Friday.

145
00:09:34,929 --> 00:09:37,769
Better user experience
and more conversations.

146
00:09:38,129 --> 00:09:40,709
And also faster resolution of slow paths.

147
00:09:42,389 --> 00:09:45,569
And the last talk about human
AI collaboration in DevOps.

148
00:09:46,039 --> 00:09:50,164
AI won't replace, like a DevOps
engineers like, it'll make them

149
00:09:50,214 --> 00:09:52,974
temps more efficient and effective.

150
00:09:53,434 --> 00:09:57,784
A automates like a test
generation alert, prioritization,

151
00:09:58,114 --> 00:10:00,304
documentation, and the summaries.

152
00:10:00,974 --> 00:10:05,834
Humans still handle them by like
designing resilient architectures,

153
00:10:06,164 --> 00:10:10,794
navigation, navigating trade offs,
and also like business logic crisis

154
00:10:10,794 --> 00:10:12,294
management and communication.

155
00:10:12,714 --> 00:10:14,574
Together, they create a more scalable.

156
00:10:14,934 --> 00:10:17,864
Efficient and human centered
development culture.

157
00:10:18,224 --> 00:10:21,314
AI is your partner, like
not your replacement.

158
00:10:23,184 --> 00:10:27,354
Let's talk about the future
prospects for AI in DevOps.

159
00:10:27,784 --> 00:10:29,794
We are just casting started.

160
00:10:30,064 --> 00:10:35,254
Like the feature of a DevOps includes
conversational DevOps what's my current

161
00:10:35,254 --> 00:10:36,754
release statuses and also like auto.

162
00:10:37,664 --> 00:10:40,404
Generating run books and dashboards.

163
00:10:41,184 --> 00:10:47,484
S that understand your observability
platforms and also autonomous pipelines

164
00:10:47,544 --> 00:10:50,794
that self tune based on like a cost load.

165
00:10:51,274 --> 00:10:55,614
As LMS improves we will build like
a system that don't just react.

166
00:10:55,664 --> 00:11:00,019
They all sell off and also by
2025 we have we already saw like

167
00:11:00,079 --> 00:11:02,639
a lot of aa involvement happening.

168
00:11:02,979 --> 00:11:07,159
Looking ahead I think we use like
more sophisticated a models like

169
00:11:07,429 --> 00:11:11,249
where that understand more and
generate better code across like

170
00:11:11,429 --> 00:11:13,079
multiple programming languages.

171
00:11:13,559 --> 00:11:13,859
Yeah.

172
00:11:14,859 --> 00:11:15,969
So thank you guys.

173
00:11:16,019 --> 00:11:20,779
Hope this p pity helps for you like to
understand how AI is reshaping DevOps.

174
00:11:21,089 --> 00:11:24,539
Not by replacing what we
built, but by enhancing it.

175
00:11:25,239 --> 00:11:29,199
Let's use this momentum to build
smarter, more reliable and more

176
00:11:29,649 --> 00:11:31,679
human centered know, like systems.

177
00:11:32,129 --> 00:11:36,759
So the future of DevOps is intelligent
and, we will be building for it.

178
00:11:37,119 --> 00:11:37,539
Thank you.

