1
00:00:00,670 --> 00:00:03,250
Hello everyone and welcome to my session.

2
00:00:03,630 --> 00:00:07,600
my name is Inubong and I'm going
to be speaking to you today on

3
00:00:07,630 --> 00:00:11,889
how you can supercharge the server
side JavaScript, with Nitro.

4
00:00:11,889 --> 00:00:12,190
js.

5
00:00:13,029 --> 00:00:14,259
Let's dive right in.

6
00:00:14,759 --> 00:00:17,799
Now today's talk is going
to focus on, what Nitro.

7
00:00:17,799 --> 00:00:20,989
js is and the principles that guide Nitro.

8
00:00:20,990 --> 00:00:22,049
js.

9
00:00:22,049 --> 00:00:23,159
We are going to discuss Nitro.

10
00:00:23,199 --> 00:00:24,449
js key features.

11
00:00:24,919 --> 00:00:29,589
We are going to build a little
demo to demonstrate how some of the

12
00:00:29,589 --> 00:00:33,589
features that NitroJS has to offer
and how we can also see how easy it

13
00:00:33,749 --> 00:00:35,699
is to create web servers using Nitro.

14
00:00:36,059 --> 00:00:40,059
We're also going to deploy
our app and our server rather.

15
00:00:40,674 --> 00:00:42,864
And we also will take a look
at the undressed ecosystem

16
00:00:43,194 --> 00:00:44,364
and what's next for Nitro.

17
00:00:44,864 --> 00:00:50,324
About me, I'm a social engineer, technical
writer, a NitroJS community team member.

18
00:00:50,684 --> 00:00:52,594
I continually post memes on the internet.

19
00:00:52,704 --> 00:00:55,684
I like to run and you can find
me on the GitHub and Twitter.

20
00:00:56,184 --> 00:00:57,044
Now, what is Nitro.

21
00:00:57,044 --> 00:00:57,474
js?

22
00:00:57,474 --> 00:01:00,284
Nitro is the universal server
toolkit for creating type safe and

23
00:01:00,284 --> 00:01:02,094
performance universal web servers.

24
00:01:02,094 --> 00:01:05,184
Now, it uses universal twice, and this
is just to emphasize the fact that Nitro.

25
00:01:05,184 --> 00:01:09,664
js, is runtime agnostic and
deployment provided agnostic.

26
00:01:09,924 --> 00:01:10,034
Nitro.

27
00:01:10,034 --> 00:01:15,084
js does not seek to lock
you in, into its ecosystem.

28
00:01:15,124 --> 00:01:17,674
It serves, the greater community.

29
00:01:17,904 --> 00:01:18,464
So Nitro.

30
00:01:18,464 --> 00:01:21,134
js tries to be as agnostic as possible.

31
00:01:21,804 --> 00:01:22,114
Nitro.

32
00:01:22,114 --> 00:01:25,464
js can be used either as a
standalone web server or a server

33
00:01:26,414 --> 00:01:27,934
engine for full stack frameworks.

34
00:01:28,414 --> 00:01:31,734
so full stack frameworks are
becoming super popular or

35
00:01:31,774 --> 00:01:33,994
are popular and, so Nitro.

36
00:01:33,994 --> 00:01:38,464
js Can basically be used to
power server side frameworks or

37
00:01:38,464 --> 00:01:39,764
full stack frameworks rather.

38
00:01:40,024 --> 00:01:41,964
and it's currently powering Nitro.

39
00:01:42,454 --> 00:01:44,814
It's currently powering Noxt version 3.

40
00:01:45,094 --> 00:01:47,014
which is like the most
powerful version of Noxt.

41
00:01:47,324 --> 00:01:48,694
and in the G ecosystem.

42
00:01:48,764 --> 00:01:51,054
So for the Angular ecosystem, Nitro.

43
00:01:51,054 --> 00:01:54,624
js, powers, or is the
server engine, for Analog.

44
00:01:54,644 --> 00:01:55,114
js.

45
00:01:55,404 --> 00:01:56,784
which is an SSR.

46
00:01:57,289 --> 00:01:59,839
framework for the Angola ecosystem.

47
00:02:00,089 --> 00:02:03,849
And then for the solid just
ecosystem, solid uses Vinci and

48
00:02:03,849 --> 00:02:05,309
Vinci is built on top of Nitro.

49
00:02:05,639 --> 00:02:10,769
so everything's Nitro and, yeah, so these
are all the, these are the things, these

50
00:02:10,769 --> 00:02:11,909
are some of the things that you can do.

51
00:02:12,409 --> 00:02:14,269
So let's talk about Nitro's principles.

52
00:02:14,449 --> 00:02:16,639
first one is agnostic at all costs.

53
00:02:16,649 --> 00:02:22,149
So NitroJS is not related with any
large corporations or there is no one

54
00:02:22,149 --> 00:02:27,219
person behind Nitro that whose aim
is to, like I said before, lock you

55
00:02:27,229 --> 00:02:32,949
in to the ecosystem and try to Yeah,
force you to use a certain thing.

56
00:02:33,349 --> 00:02:34,439
Nitro is agnostic.

57
00:02:34,479 --> 00:02:36,069
It can run on any run.

58
00:02:36,619 --> 00:02:38,489
It can run with any runtime.

59
00:02:38,599 --> 00:02:39,379
so for example, Node.

60
00:02:39,379 --> 00:02:41,529
js, Bond, even service workers.

61
00:02:41,839 --> 00:02:44,869
and the aim of Nitro is
to integrate, not compete.

62
00:02:45,029 --> 00:02:45,349
Nitro.

63
00:02:45,349 --> 00:02:50,989
js, has an open, API, which anyone
can integrate with and use for their

64
00:02:50,989 --> 00:02:52,989
projects and deploy anywhere they want.

65
00:02:53,269 --> 00:02:58,159
NitroJS is not seeking to compete with
existing tools, rather to collaborate

66
00:02:58,229 --> 00:03:01,119
and to make the ecosystem better.

67
00:03:01,119 --> 00:03:04,009
And so we also get deployment via presets.

68
00:03:04,729 --> 00:03:09,164
With Nitro, we can deploy to any
Deployment provider, Cloudflare,

69
00:03:09,164 --> 00:03:12,854
Vercel, Railway, et cetera.

70
00:03:13,094 --> 00:03:17,574
All we have to do is set a preset
and then Nitro also is built

71
00:03:17,974 --> 00:03:19,714
based off of web standards.

72
00:03:20,154 --> 00:03:23,434
And, yeah, which makes it,
which, makes it super flexible

73
00:03:23,784 --> 00:03:25,624
and, helps keep it agnostic.

74
00:03:26,124 --> 00:03:28,514
Now some of Nitro JS key features.

75
00:03:29,054 --> 00:03:33,384
One is zero config you can get started
with Nitro with just one command

76
00:03:33,384 --> 00:03:35,234
You don't need to set up anything.

77
00:03:35,284 --> 00:03:38,354
You don't set up TypeScripts,
routing, hot model reloading.

78
00:03:38,354 --> 00:03:43,314
Everything comes pre packed out of the
box Nitro also has fast system routing

79
00:03:43,604 --> 00:03:47,644
so you can create your API routes.

80
00:03:47,884 --> 00:03:52,794
All you have to do is create a file
or create a file, in the routes folder

81
00:03:52,854 --> 00:03:58,204
and then prefix it with the HTTP method
and voila, your routes is ready to go.

82
00:03:58,794 --> 00:04:01,274
Next, Nitro also has automatic imports.

83
00:04:01,654 --> 00:04:07,124
And, so yeah, using the unimport
ngis package, Nitro auto import

84
00:04:07,124 --> 00:04:11,714
utilities and modules and also
keeps your code, minimal and clean.

85
00:04:12,004 --> 00:04:15,804
it also supports tree shaking
and code splitting to keep

86
00:04:15,804 --> 00:04:17,364
your bundle size really small.

87
00:04:17,864 --> 00:04:20,554
so Nitro also provides
caching out of the box.

88
00:04:21,324 --> 00:04:22,844
Caching can be a pain to set up.

89
00:04:23,104 --> 00:04:26,454
you can either set up caching on
specific routes or on all your routes.

90
00:04:26,724 --> 00:04:30,574
And NetRedress also provides customizable
storage options for your caching.

91
00:04:31,004 --> 00:04:33,624
Then universal deployment, we
had talked about this earlier.

92
00:04:34,024 --> 00:04:36,464
NetRedress does not lock you in.

93
00:04:36,754 --> 00:04:40,799
You can deploy to whatever
Provider you need or you want to

94
00:04:40,799 --> 00:04:42,699
use, and then Nitro is hackable.

95
00:04:42,989 --> 00:04:47,029
You can easily extend Nitro's
API using its runtime hooks.

96
00:04:47,579 --> 00:04:49,559
so I guess it's demo time.

97
00:04:50,109 --> 00:04:56,309
so we, so in this demo, we are going to
be building a simple to do, to do API.

98
00:04:56,709 --> 00:05:01,159
for sake of time, we would
focus mainly on get and post.

99
00:05:01,994 --> 00:05:04,904
So be able to create to do's
and also fetch our to do's.

100
00:05:05,294 --> 00:05:05,614
yeah.

101
00:05:06,084 --> 00:05:07,634
So let's get started, shall we?

102
00:05:08,134 --> 00:05:11,304
So to get started with Nitro,
I'm going to go to the nitrojs.

103
00:05:11,804 --> 00:05:15,284
dev website and we can get started.

104
00:05:15,784 --> 00:05:19,694
So to create a new product using
a starter template, I'm going to,

105
00:05:19,694 --> 00:05:23,484
so you can use any of the package
providers or the package managers.

106
00:05:23,534 --> 00:05:27,674
I'll stick with bun, then
open up my terminal and then.

107
00:05:27,674 --> 00:05:28,734
Okay.

108
00:05:29,234 --> 00:05:29,659
Sorry about that.

109
00:05:30,159 --> 00:05:32,579
I think the L on my
keyboard is a bit stuck.

110
00:05:33,039 --> 00:05:35,079
Okay, yeah, I'm just going
to paste the command.

111
00:05:35,469 --> 00:05:37,509
So

112
00:05:38,009 --> 00:05:40,379
it might take a while to set up.

113
00:05:40,489 --> 00:05:41,959
but yeah, any moment from now.

114
00:05:42,459 --> 00:05:42,649
Okay.

115
00:05:43,079 --> 00:05:45,099
Any moment from now should be done.

116
00:05:45,599 --> 00:05:46,449
Okay, cool.

117
00:05:46,879 --> 00:05:50,419
So I'm all set into the project.

118
00:05:50,769 --> 00:05:52,609
Forgot to rename the project.

119
00:05:52,739 --> 00:05:53,939
we are stuck with Nitro app.

120
00:05:54,929 --> 00:05:56,219
let's open this in my code editor.

121
00:05:56,729 --> 00:05:58,359
Let

122
00:05:58,859 --> 00:06:00,689
me go ahead and resize this.

123
00:06:01,189 --> 00:06:01,439
Okay.

124
00:06:01,749 --> 00:06:07,219
when, by default, like I said, everything
comes, pre installed and pre configured.

125
00:06:07,579 --> 00:06:12,629
so all you have to do is go straight
to, setting up your API routes.

126
00:06:12,669 --> 00:06:17,504
so in our case, So we're going to
start with the post, the post method.

127
00:06:18,004 --> 00:06:21,124
So let's see, let's go
ahead and create, introduce.

128
00:06:21,394 --> 00:06:21,644
post.

129
00:06:21,924 --> 00:06:22,414
ts.

130
00:06:22,524 --> 00:06:27,674
So like I said before, all you
have to do to define API routes,

131
00:06:27,704 --> 00:06:33,764
in Nitro is just to the name of the
routes and you follow with the HTTP

132
00:06:33,934 --> 00:06:35,784
method and then you're good to go.

133
00:06:36,284 --> 00:06:37,104
By default,

134
00:06:37,604 --> 00:06:39,124
define event handler.

135
00:06:39,624 --> 00:06:41,124
We are going to make this a sync.

136
00:06:41,624 --> 00:06:42,064
Okay.

137
00:06:42,564 --> 00:06:43,564
so this is a push request.

138
00:06:43,674 --> 00:06:46,044
we are going to be accepting some data.

139
00:06:46,774 --> 00:06:52,454
we are going to accept the to do, which is
the to do title and the completed state.

140
00:06:53,224 --> 00:06:53,924
so const.

141
00:06:54,424 --> 00:06:59,384
So to read the body of a request
out in Nitro, all we have to say is

142
00:06:59,384 --> 00:07:01,774
read body and then we're good to go.

143
00:07:02,324 --> 00:07:03,864
so we can add some validation.

144
00:07:03,944 --> 00:07:09,974
So if not to do, or if not
completed, we can return an error.

145
00:07:10,474 --> 00:07:12,924
That is, say, 400.

146
00:07:13,424 --> 00:07:17,584
Okay, so now we define our to-do list.

147
00:07:18,434 --> 00:07:24,154
now, so one thing else, one thing that
Natural does provide is a storage layer.

148
00:07:24,754 --> 00:07:28,779
So with this storage layer, what
we can do is we can't, we can

149
00:07:28,779 --> 00:07:31,419
store data, and by default it uses.

150
00:07:31,919 --> 00:07:37,079
It uses, memory, or it uses maps, memory,
by default, but then we can configure

151
00:07:37,079 --> 00:07:39,939
it to use, so a key value pair instead.

152
00:07:40,349 --> 00:07:44,719
so all we have to do is
to pass the key to the

153
00:07:45,219 --> 00:07:48,889
function, and then we see the get item.

154
00:07:48,954 --> 00:07:49,964
Set to do.

155
00:07:50,464 --> 00:07:55,374
And then if we don't get any
to dos, we return on MT RA and

156
00:07:55,374 --> 00:07:58,004
so that's sets in new to do

157
00:07:58,504 --> 00:08:01,224
the assets, the I DT date that now.

158
00:08:01,734 --> 00:08:04,669
and then we can set to
do completed values.

159
00:08:05,169 --> 00:08:05,519
Okay,

160
00:08:06,019 --> 00:08:09,749
so then we can then push to the,
we can then push a new to do.

161
00:08:10,299 --> 00:08:11,789
okay, so we have an error here.

162
00:08:12,009 --> 00:08:17,319
what we want to do now
is to define our types.

163
00:08:17,819 --> 00:08:20,229
Let's create a user's folder.

164
00:08:20,769 --> 00:08:24,254
And then, We add index.

165
00:08:24,754 --> 00:08:24,944
d.

166
00:08:24,944 --> 00:08:31,917
cs, type definitions, the
export, to do is equal to,

167
00:08:32,417 --> 00:08:41,077
the export type to do, is equal to id
is string, to do is string, computed

168
00:08:41,577 --> 00:08:46,877
as non segregated boolean, Okay, so
all we have to do now is to use this.

169
00:08:47,377 --> 00:08:49,427
Okay, so this is type of this.

170
00:08:49,927 --> 00:08:50,317
All right.

171
00:08:50,817 --> 00:08:52,347
Our type is of string.

172
00:08:52,497 --> 00:08:54,117
Okay, so to string.

173
00:08:54,117 --> 00:08:58,207
All right, then we push our to do.

174
00:08:58,207 --> 00:09:02,497
And then we can then call
on the, storage layer.

175
00:09:02,507 --> 00:09:02,527
We

176
00:09:03,027 --> 00:09:04,917
can access it, or we can set it.

177
00:09:05,307 --> 00:09:09,897
you need to do, so to dos, to do list.

178
00:09:10,397 --> 00:09:10,817
Okay.

179
00:09:11,157 --> 00:09:17,018
And then, so once this is done,
you can return a status of 201.

180
00:09:17,018 --> 00:09:22,975
And then, data versus new to do.

181
00:09:23,475 --> 00:09:28,735
Then we can just return message
that says, to do added success.

182
00:09:28,735 --> 00:09:29,310
very much.

183
00:09:29,810 --> 00:09:30,090
Yeah.

184
00:09:30,830 --> 00:09:31,640
Okay, cool.

185
00:09:31,740 --> 00:09:37,060
So to test out that this works, we
first of all have to run the server.

186
00:09:37,550 --> 00:09:38,370
Okay, I'm on there.

187
00:09:38,370 --> 00:09:40,820
our server is going to
run at localhost 3000.

188
00:09:41,250 --> 00:09:45,950
Then we can come to, you can use postman
or whatever, testing tool you prefer.

189
00:09:46,390 --> 00:09:47,360
so that's fed2do.

190
00:09:47,860 --> 00:09:52,130
Okay, so our video has been added
successfully, and if we come back

191
00:09:52,130 --> 00:09:57,960
to our app, we should see a dot
data slash kv file slash to do's.

192
00:09:58,060 --> 00:10:02,020
So this, is our to do here locally.

193
00:10:02,080 --> 00:10:06,810
So the storage layer, by default
saves in developing environment

194
00:10:06,810 --> 00:10:10,560
saves, data in the project directory.

195
00:10:10,930 --> 00:10:15,310
But then we have to configure, a
remote KV store, before we deploy.

196
00:10:15,690 --> 00:10:21,860
So let's go ahead and create the get
request and then we can configure

197
00:10:22,360 --> 00:10:24,440
and configure our remote storage option.

198
00:10:24,940 --> 00:10:29,950
So I mentioned earlier, that a
Nitro handles caching for us.

199
00:10:30,290 --> 00:10:35,520
and then we can define, we can use the
defined cached event handler to, define a

200
00:10:35,710 --> 00:10:38,250
cached event handler, as the name implies.

201
00:10:38,970 --> 00:10:43,830
so we use it the same way, but we
can, but naturally lets us add some

202
00:10:43,830 --> 00:10:45,610
extra parameters at the bottom.

203
00:10:45,641 --> 00:10:47,201
so lets first of all get,

204
00:10:47,701 --> 00:10:47,911
okay.

205
00:10:48,411 --> 00:10:55,646
Storage data do get item to
do then if not to dos return.

206
00:10:56,146 --> 00:10:57,381
that is good.

207
00:10:57,881 --> 00:11:04,583
Oh, we can just say, return, 200 and then

208
00:11:05,083 --> 00:11:05,843
we can say

209
00:11:06,343 --> 00:11:11,263
later to do's and then so to cash
our function, we can add a max age.

210
00:11:11,583 --> 00:11:18,923
so we, how long should the return
data be cashed for until, it

211
00:11:18,923 --> 00:11:25,643
can be revalidated and yeah, the
new data, the new data returned.

212
00:11:25,693 --> 00:11:26,623
So we can just see.

213
00:11:27,353 --> 00:11:31,933
one hour because this is a small app,
you might not exactly see the benefit

214
00:11:31,933 --> 00:11:37,233
of this here, but then this can be
really handy, when building large

215
00:11:37,233 --> 00:11:42,423
scale production apps, you can also set
some other, some other values as well.

216
00:11:42,923 --> 00:11:47,618
you can take a look at the
nitro, at the cache, API on the

217
00:11:47,618 --> 00:11:49,473
nitro documentation websites.

218
00:11:49,803 --> 00:11:53,073
So let's test out our
to do dot get routes.

219
00:11:53,813 --> 00:11:54,853
let's copy this.

220
00:11:55,353 --> 00:11:56,793
so we get our to do.

221
00:11:56,893 --> 00:11:59,793
let's add another one, for breakfast.

222
00:12:00,343 --> 00:12:00,433
Okay.

223
00:12:00,783 --> 00:12:04,023
So if you come here, it doesn't get added.

224
00:12:04,523 --> 00:12:08,193
Yeah, so it doesn't get added
because we cashed our function.

225
00:12:08,553 --> 00:12:12,493
so let's try removing this
and see if this works now.

226
00:12:13,043 --> 00:12:14,213
Okay, so this works now.

227
00:12:14,683 --> 00:12:18,973
yeah, but if you go back to caching
the data, it, it's only going to return

228
00:12:18,973 --> 00:12:22,243
this until this validity expires.

229
00:12:22,533 --> 00:12:28,703
And if you come here, you'd see the nitro
output has a cache, Nitro slash handlers.

230
00:12:29,188 --> 00:12:33,948
directory with the to do's and, yeah,
so all of our cache data is here.

231
00:12:34,538 --> 00:12:37,008
okay, so that's this.

232
00:12:37,238 --> 00:12:43,648
And now we have to, set up our remote
key storage or key value storage.

233
00:12:43,678 --> 00:12:47,431
so let's see, we are going
to be deploying on Vercel.

234
00:12:47,481 --> 00:12:53,691
Vercel has this, Vercel has a package,
to help handle, with key values, key

235
00:12:53,691 --> 00:12:55,681
value, with remote key value storage.

236
00:12:56,021 --> 00:13:00,871
So let's install that, the name of
the package is, adversarial slash kv.

237
00:13:01,371 --> 00:13:06,581
Now again, Nitro is random agnostic,
Nitro is agnostic, So both runtime

238
00:13:06,581 --> 00:13:10,411
and for deployment providers, so
you know, you can feel free to use

239
00:13:10,411 --> 00:13:14,881
whatever solution you want, then we
have to, we have to configure this

240
00:13:14,891 --> 00:13:19,301
in a natural config as such storage,

241
00:13:19,801 --> 00:13:23,141
as you can see, we already have
a bunch of, presets available

242
00:13:23,191 --> 00:13:24,651
for the storage drivers.

243
00:13:24,931 --> 00:13:29,131
but yeah, we chose Vercel because
that is what we shall be deploying.

244
00:13:29,631 --> 00:13:34,111
And, so the storage layout, you can
also configure like a dev storage.

245
00:13:34,611 --> 00:13:37,161
yeah, you can also configure
like a dev storage.

246
00:13:37,571 --> 00:13:39,311
but we won't get into that in this demo.

247
00:13:39,721 --> 00:13:44,141
so basically the dev storage is for your
development environments, configuring the

248
00:13:44,141 --> 00:13:45,521
storage for your development environment.

249
00:13:45,821 --> 00:13:49,611
By default, Nitro uses, the project
directory, but you can use another option.

250
00:13:50,111 --> 00:13:52,831
yeah, so let's go into deploying our app.

251
00:13:53,331 --> 00:13:55,541
like I mentioned earlier,
we are going to use Nitro.

252
00:13:55,541 --> 00:13:57,171
We are going to use Resul.

253
00:13:57,301 --> 00:13:59,991
let's open up, first of
all, we have to host.

254
00:14:00,491 --> 00:14:04,151
We have to set up a remote
repository for our project.

255
00:14:04,361 --> 00:14:09,432
let's go to GitHub and
create a repository.

256
00:14:09,432 --> 00:14:11,333
Nitro 142 todo.

257
00:14:11,333 --> 00:14:11,967
git

258
00:14:12,467 --> 00:14:12,557
init.

259
00:14:13,057 --> 00:14:14,647
Okay, so we just paste the command.

260
00:14:14,647 --> 00:14:14,877
Okay.

261
00:14:15,377 --> 00:14:19,167
And yeah, so everything should be here.

262
00:14:19,667 --> 00:14:20,167
All right.

263
00:14:20,187 --> 00:14:24,137
So if you go to Vercel,
we can add a new project.

264
00:14:24,147 --> 00:14:24,167
So

265
00:14:24,667 --> 00:14:29,547
we import our projects
from Vercel and we deploy.

266
00:14:30,047 --> 00:14:32,777
One thing I may have forgot to mention.

267
00:14:32,797 --> 00:14:39,257
So if you want to, if you were to create
like extra routes, say for, getting a

268
00:14:39,287 --> 00:14:42,287
single to do, we would do it this way.

269
00:14:43,067 --> 00:14:46,327
So first of all, we would
create a routes folder.

270
00:14:46,827 --> 00:14:49,000
We'd create a to dos folder rather.

271
00:14:49,000 --> 00:14:52,887
And then, so we can say, id.

272
00:14:53,387 --> 00:14:54,607
Yeah, get that.

273
00:14:54,727 --> 00:14:55,147
Yes.

274
00:14:55,507 --> 00:15:00,267
And then we can write all of our
code here to get the, singular to do.

275
00:15:00,767 --> 00:15:01,137
Okay.

276
00:15:01,257 --> 00:15:03,207
So our deployment is complete.

277
00:15:03,707 --> 00:15:04,667
Continuity dashboard.

278
00:15:05,107 --> 00:15:07,437
if we go to our,

279
00:15:07,937 --> 00:15:10,287
if you go to our app, let's see.

280
00:15:10,287 --> 00:15:11,030
Yeah.

281
00:15:11,030 --> 00:15:13,257
So the index.

282
00:15:13,757 --> 00:15:14,997
cs, the route from the index.

283
00:15:15,147 --> 00:15:19,077
cs, returns because it's a get
request and, it returns this.

284
00:15:19,347 --> 00:15:20,427
So let's.

285
00:15:21,012 --> 00:15:25,602
we still have to configure the
remote KV storage on vessel.

286
00:15:25,812 --> 00:15:28,112
So Vessel, lets us do this really easily.

287
00:15:28,452 --> 00:15:35,972
I can come here and under the projects and
connect this tb, which is an OP star kv.

288
00:15:36,492 --> 00:15:37,482
let's see.

289
00:15:37,982 --> 00:15:42,702
So I can copy this and I can set my env.

290
00:15:43,202 --> 00:15:43,782
Oh, okay.

291
00:15:43,842 --> 00:15:44,502
So it's automatic.

292
00:15:44,542 --> 00:15:50,422
It's been automatically set and I think
I might have to redeploy and then we

293
00:15:50,422 --> 00:15:52,532
should be able to use our to do API.

294
00:15:53,032 --> 00:15:54,582
Let's wait a couple of seconds.

295
00:15:55,082 --> 00:15:56,952
Okay, so our app is done deploying.

296
00:15:56,952 --> 00:15:59,432
So let's copy this and go to postman.

297
00:15:59,522 --> 00:16:00,662
so let's try this.

298
00:16:01,212 --> 00:16:03,702
that's supposed to not send requests.

299
00:16:03,712 --> 00:16:05,482
So let's see what's the error.

300
00:16:05,542 --> 00:16:11,077
I reconnect, okay, so
let's add the to dos.

301
00:16:11,577 --> 00:16:14,727
Okay, so something seems to
be wrong with the postman.

302
00:16:15,277 --> 00:16:21,367
so let's try, making the call request, the
request using the command line instead.

303
00:16:21,867 --> 00:16:23,237
okay,

304
00:16:23,737 --> 00:16:24,247
let's see.

305
00:16:24,747 --> 00:16:26,867
All right, so this worked, status of 201.

306
00:16:27,197 --> 00:16:28,457
to do added successfully.

307
00:16:29,237 --> 00:16:35,317
And, we can get, We can get, let's
see, let's do a get request instead.

308
00:16:35,817 --> 00:16:36,677
Nobody.

309
00:16:37,177 --> 00:16:40,727
Yes, we can just see this, copy this.

310
00:16:41,227 --> 00:16:42,837
All right, so we get our to do.

311
00:16:43,187 --> 00:16:46,667
So our endpoint works as it's expected to.

312
00:16:47,067 --> 00:16:49,977
so yeah, that's all for deployment.

313
00:16:50,547 --> 00:16:51,897
And the coding session.

314
00:16:52,317 --> 00:16:53,517
so let's go back to our slides.

315
00:16:54,017 --> 00:16:56,497
So we are done with the
coding and deployment session.

316
00:16:56,917 --> 00:16:58,857
let's talk about the unjust ecosystem.

317
00:16:59,447 --> 00:17:05,147
so the natural dress is a part of
the bigger ecosystem called on dress

318
00:17:05,157 --> 00:17:06,967
stands for in five JavaScript tools.

319
00:17:07,407 --> 00:17:13,737
And, so natural dress is made up of a
bunch of packages, from this ecosystem.

320
00:17:14,027 --> 00:17:17,507
so do you want The most
important one being H three.

321
00:17:17,867 --> 00:17:23,447
H three is H three provides all
the, far based routes, and it's

322
00:17:23,447 --> 00:17:25,807
literally the powerhouse behind Nitro.

323
00:17:25,867 --> 00:17:27,277
And then this is on storage.

324
00:17:27,607 --> 00:17:32,477
On storage is used, is a storage layer
that Nitro, and it uses, then it's unplug

325
00:17:32,477 --> 00:17:34,367
plugin, which is unified plugin system.

326
00:17:34,752 --> 00:17:37,372
for VEETs, rollup, and et cetera.

327
00:17:37,612 --> 00:17:39,622
There's OFetch for data fetching.

328
00:17:39,912 --> 00:17:43,342
There's unimport, and then
there's, WebSockets and many more.

329
00:17:43,632 --> 00:17:47,812
So the Andreas ecosystem is
made up of about 63 packages.

330
00:17:48,102 --> 00:17:52,431
they have about 421 million
plus monthly downloads on NPM.

331
00:17:52,432 --> 00:17:57,482
there's over 49 key GitHub stars,
200 plus contributors, and over

332
00:17:57,482 --> 00:18:01,472
5, 000 commits across all of,
the packages in the ecosystem.

333
00:18:01,742 --> 00:18:06,742
So it's the OGS ecosystem is pretty huge
and, and it keeps growing every day.

334
00:18:07,242 --> 00:18:08,562
So what's next for Nitro?

335
00:18:08,712 --> 00:18:10,702
So Nitro v3, is, it's on the way.

336
00:18:10,792 --> 00:18:14,932
And, it's meant to bring up
some, some features such as,

337
00:18:15,272 --> 00:18:16,712
stabilize some of the features.

338
00:18:16,712 --> 00:18:21,262
For example, we have,
WebSocket tasks and, the.

339
00:18:21,687 --> 00:18:25,507
The database storage layer, which
are still in expert, which are

340
00:18:25,507 --> 00:18:27,517
still in the experimental versions.

341
00:18:27,917 --> 00:18:31,367
And those are going to be more
stable by the release of Nitro V3.

342
00:18:31,607 --> 00:18:34,257
Nitro V3 also promises
a smaller output bundle.

343
00:18:34,557 --> 00:18:38,947
and it also removes, the fetch
polyfills that were added to

344
00:18:38,947 --> 00:18:40,347
be compatible with Node 18.

345
00:18:40,782 --> 00:18:45,222
And, also doing that is going to
further reduce the output bundle.

346
00:18:45,482 --> 00:18:49,342
And then there's also going to be
an experimental integration, which,

347
00:18:49,692 --> 00:18:54,192
aims to improve things such as,
faster hot module reloading and, just

348
00:18:54,192 --> 00:18:56,992
a better, integration, in general.

349
00:18:57,102 --> 00:18:59,262
natural v3 also still promises many more.

350
00:18:59,262 --> 00:19:00,752
These are just, on the surface.

351
00:19:01,192 --> 00:19:01,802
And, yeah.

352
00:19:02,302 --> 00:19:05,352
Thank you very much for attending my talk.

353
00:19:05,402 --> 00:19:09,302
you can find NitroJS at, nitrojs.

354
00:19:09,302 --> 00:19:14,852
dev and then the onjs community,
it's github slash onjs and then,

355
00:19:14,882 --> 00:19:16,902
you find the community repository.

356
00:19:17,182 --> 00:19:18,142
Thank you very much.

357
00:19:18,612 --> 00:19:20,192
I hope you've been able to learn a lot.

358
00:19:20,472 --> 00:19:20,872
have a nice day.

