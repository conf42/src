1
00:00:00,500 --> 00:00:01,100
Hi everyone.

2
00:00:01,100 --> 00:00:03,559
So this is Derek from Broadcom.

3
00:00:04,059 --> 00:00:07,845
So today we are going to talk about
the quantum resistant Kubernetes.

4
00:00:08,619 --> 00:00:13,989
So how to secure the cloud native
infrastructure for the post quantum era.

5
00:00:14,489 --> 00:00:18,139
So basically we are preparing
the distributor systems for the

6
00:00:18,139 --> 00:00:19,580
quantum computing revolution.

7
00:00:20,090 --> 00:00:22,999
So that will fundamentally
change how we approach the.

8
00:00:23,499 --> 00:00:27,810
Cryptographic security and cloud native
enrollments, the quantum thread landscape.

9
00:00:28,470 --> 00:00:32,189
So today, so the classical
cryptography protects our systems.

10
00:00:32,220 --> 00:00:36,989
RSA and E-C-C-R-S-A-E-C remains
secure against traditional

11
00:00:36,989 --> 00:00:38,580
computer computing attacks.

12
00:00:39,119 --> 00:00:43,280
But now we, in this quantum era,
the quantum computers emerge with

13
00:00:43,280 --> 00:00:48,385
sufficient powers to break the RSA
and ECC using shorts algorithm.

14
00:00:48,885 --> 00:00:50,115
So what next?

15
00:00:50,415 --> 00:00:55,335
So the post quantum era tradition,
traditional encryption becomes obsolete.

16
00:00:55,995 --> 00:00:59,505
Organizations need quantum
resistant alternatives.

17
00:01:00,405 --> 00:01:02,070
So how are you going to do that?

18
00:01:02,570 --> 00:01:02,960
Let's see.

19
00:01:03,460 --> 00:01:08,110
So first of all, let's analyze why
Kubernetes exposed Kubernetes security

20
00:01:08,110 --> 00:01:13,180
is fundamentally built on public key
infrastructure, PKI and transport layer.

21
00:01:13,615 --> 00:01:15,085
Security TLS.

22
00:01:15,475 --> 00:01:19,494
So every critical communication path
relates on classical cryptography

23
00:01:19,884 --> 00:01:21,535
that quantum computers will break.

24
00:01:22,345 --> 00:01:27,645
Example, the A PA server, which clone
cluster state communication protected

25
00:01:27,645 --> 00:01:32,565
by TLS advocate vulnerable to quantum
attacks and the pod to pod communication,

26
00:01:32,565 --> 00:01:34,485
which is again a service mesh.

27
00:01:35,054 --> 00:01:38,254
So the mutual TLS connections
between microservices rely

28
00:01:38,254 --> 00:01:41,584
on RSA and ECC key exchanges.

29
00:01:42,410 --> 00:01:44,240
Then the Ingres client traffic.

30
00:01:44,660 --> 00:01:48,440
So the external traffic that enters
through the TLS terminated load balances

31
00:01:48,440 --> 00:01:50,600
using quantum vulnerable certificates.

32
00:01:51,589 --> 00:01:55,550
And the final is the registry cluster,
which contains the image pulls

33
00:01:55,550 --> 00:01:58,820
and pushes authenticated through
classical cryptographic signatures.

34
00:01:59,320 --> 00:02:02,260
So what's the impact on
cloud native security?

35
00:02:03,040 --> 00:02:07,990
So when quantum computers break
PKI, they enter Foundation of

36
00:02:08,019 --> 00:02:08,995
Kubernetes security collect.

37
00:02:09,495 --> 00:02:13,845
The consequences extend far
beyond simple data breaches.

38
00:02:14,805 --> 00:02:15,615
So what are those?

39
00:02:15,615 --> 00:02:20,295
So it's basically, it is the
compromise, TLS expose secrets, fake

40
00:02:20,625 --> 00:02:22,515
identities and vulnerable backups.

41
00:02:23,265 --> 00:02:26,505
So what is compromised TLS
Man in the middle attacks

42
00:02:26,505 --> 00:02:28,455
become trivial or encrypted.

43
00:02:28,455 --> 00:02:33,390
Communication can be intercepted
and decrypted in real time.

44
00:02:34,250 --> 00:02:35,390
And the exposed.

45
00:02:36,075 --> 00:02:36,525
Secrets.

46
00:02:36,615 --> 00:02:37,425
So what are those?

47
00:02:37,635 --> 00:02:38,895
Is the database passwords?

48
00:02:39,555 --> 00:02:39,885
API?

49
00:02:39,945 --> 00:02:43,095
Keys and the service tokens
stored in Kubernetes.

50
00:02:43,545 --> 00:02:47,835
Secrets become readable by the
attackers and the fake identities.

51
00:02:48,495 --> 00:02:51,855
Malicious parts can impersonate
legitimate services.

52
00:02:52,065 --> 00:02:55,635
Service identity verification
becomes impossible without

53
00:02:56,415 --> 00:02:57,705
quantum safe signatures.

54
00:02:58,515 --> 00:03:02,595
Then the vulnerable backups, historical
data and backup systems encrypted

55
00:03:02,595 --> 00:03:04,755
with classical algorithm based.

56
00:03:05,175 --> 00:03:06,795
Future decryption threats.

57
00:03:07,770 --> 00:03:13,920
So Kubernetes without secure PKI
is like a bank without one dose.

58
00:03:14,700 --> 00:03:17,910
Trust becomes impossible
to establish or maintain.

59
00:03:18,410 --> 00:03:25,100
So now entering the post quantum
cryptography, PQC, the National Institute

60
00:03:25,100 --> 00:03:31,190
of Standards and Technology, the NIST has
completed its post quantum cryptography

61
00:03:31,280 --> 00:03:33,410
project providing standardized.

62
00:03:33,910 --> 00:03:37,510
Algorithms resistant to quantum
attacks, so they are called the

63
00:03:37,900 --> 00:03:41,190
ber de lithium hybrid cryptography.

64
00:03:41,910 --> 00:03:49,830
So the key encapsulation mechanism for
the secure key based on the lattice

65
00:03:49,830 --> 00:03:54,000
cryptography problems that remain
hard even for quantum computers.

66
00:03:54,500 --> 00:04:00,829
Then the digital signature algorithm
providing authentication and non creation.

67
00:04:01,550 --> 00:04:05,834
In the post quantum era, the transition
strategy, combining classical and

68
00:04:05,834 --> 00:04:10,010
post quantum algorithms for backward
compatibility and enter in security.

69
00:04:10,630 --> 00:04:15,409
So this standardization provides a clear
path forward making transition from

70
00:04:15,849 --> 00:04:20,649
optimal to inevitable for organization
serious about long-term security.

71
00:04:21,149 --> 00:04:23,939
So let's now see the PQC in Kubernetes.

72
00:04:24,629 --> 00:04:27,429
The post quantum cryptography
must be itegrated at.

73
00:04:27,914 --> 00:04:31,934
Every layer where Kubernetes
relates on classical encryption

74
00:04:31,939 --> 00:04:33,584
and dig and digital signature.

75
00:04:34,334 --> 00:04:40,514
So basically on the ingress controllers,
service mesh, the ETCD, the container

76
00:04:40,514 --> 00:04:44,794
registries, so in the ingress controllers,
the TLS termination points where

77
00:04:44,944 --> 00:04:46,729
external traffic enters the cluster.

78
00:04:47,229 --> 00:04:52,484
So ETCD is the encryption at rest
and EAP communication for cluster

79
00:04:52,484 --> 00:04:54,794
stage storage and the servicers.

80
00:04:55,559 --> 00:04:59,579
It is the mutual TLS connections
between the micros and sidecar proxy

81
00:05:00,079 --> 00:05:05,604
container registries, image signing, and
verification for supply chain security.

82
00:05:06,104 --> 00:05:10,664
And now let's see how the
quantum safe ingress works.

83
00:05:11,294 --> 00:05:15,604
So ingress controller serves as the
primary entry point for external

84
00:05:15,604 --> 00:05:19,264
traffic, making them the most
critical component to secure in

85
00:05:19,264 --> 00:05:21,754
the quantum resistant transition.

86
00:05:22,254 --> 00:05:27,619
The client which initiate the support
hybrid TLS handshake with both

87
00:05:27,619 --> 00:05:30,979
classical and post quantum ALS ingress.

88
00:05:30,999 --> 00:05:37,429
The P replaces RSA and ECC while
maintaining backward compatibility,

89
00:05:37,849 --> 00:05:42,054
the part which receive the
quantum safe, secured intricate

90
00:05:42,054 --> 00:05:43,584
traffic from INGOs controller.

91
00:05:44,454 --> 00:05:47,789
Implementation support is already
emerging in open SLPQ branches.

92
00:05:48,289 --> 00:05:50,029
NY proxy and engineers.

93
00:05:50,529 --> 00:05:53,429
Starting with ingress provides
immediate protection for the

94
00:05:53,429 --> 00:05:55,139
most exposed attack surface.

95
00:05:55,639 --> 00:05:59,024
So how hardening the
service mesh can happen.

96
00:05:59,524 --> 00:06:02,759
The service meshes like HTO and link.

97
00:06:02,759 --> 00:06:06,599
It relay heavily on mutual TLS
for part to part communication.

98
00:06:07,229 --> 00:06:10,979
This makes them both critical and
challenging for post migration.

99
00:06:11,479 --> 00:06:12,139
Step one.

100
00:06:13,009 --> 00:06:15,259
It is the NY proxy integration.

101
00:06:15,799 --> 00:06:20,179
So integrate pq enable crypto
libraries into NY side cars for

102
00:06:20,179 --> 00:06:22,579
quantum safe MTLS connections.

103
00:06:23,079 --> 00:06:26,409
Then the certificate management
update service certificate authorities

104
00:06:26,469 --> 00:06:28,929
to issue hybrid certificate
supporting both algorithms.

105
00:06:29,429 --> 00:06:34,019
Then the backward ensure hybrid
mode allows seamless communication

106
00:06:34,019 --> 00:06:36,989
between upgraded and legacy
workloads during transition.

107
00:06:37,679 --> 00:06:39,389
Then the performance monitoring.

108
00:06:39,974 --> 00:06:45,254
Track latency and throughput impacts
as PQU algorithms have different

109
00:06:45,314 --> 00:06:46,124
performance characteristics.

110
00:06:47,024 --> 00:06:52,484
Securing mesh MTLS is critical because
it forms the foundation of part to

111
00:06:52,484 --> 00:06:55,754
part trust in zero trust architectures.

112
00:06:56,254 --> 00:07:02,374
Now the third place to secure it, so
it's the secrets and E-T-C-E-T-C-D

113
00:07:02,374 --> 00:07:05,809
stores, all Kubernetes cluster
state, including sensitive secrets.

114
00:07:06,364 --> 00:07:10,594
Protecting this data is essential, but
post quantum certificates introduce

115
00:07:10,594 --> 00:07:13,134
new challenges to re challenge pq.

116
00:07:13,134 --> 00:07:17,394
Certificates are significantly
larger than R-S-A-E-C-C impacting

117
00:07:18,174 --> 00:07:19,704
E C's performance and replication.

118
00:07:20,364 --> 00:07:21,264
KMS integration.

119
00:07:21,774 --> 00:07:28,334
So leverage pq safe key management
services like Vault or a WS PQ km. Pilots

120
00:07:28,334 --> 00:07:31,604
for external encrypt rotation strategy.

121
00:07:32,229 --> 00:07:33,839
Implement automated rotation for.

122
00:07:34,339 --> 00:07:37,464
For long lived secrets to
minimize exposure windows.

123
00:07:37,964 --> 00:07:42,344
Now let's see, the key challenges
post cryptography adoption is

124
00:07:42,344 --> 00:07:46,354
indeed just a simple algorithm,
swap or organism, face, significant

125
00:07:46,354 --> 00:07:47,629
technical and operational huddle.

126
00:07:48,129 --> 00:07:51,674
So it is 3.2 Yex handshake overhead.

127
00:07:51,994 --> 00:07:56,284
And 10 x the certificate size
and 60% library maturity.

128
00:07:56,784 --> 00:07:58,464
Now coming to the handshake overhead.

129
00:07:58,524 --> 00:08:01,644
So performance penalty compared
to the classical algorithms doing

130
00:08:01,704 --> 00:08:07,049
during tailless negotiation and the
certificate sizes are really larger.

131
00:08:07,409 --> 00:08:11,124
Certificates, stress, ETCD,
storage and replication value.

132
00:08:11,874 --> 00:08:14,844
And now coming to the library
maturity, estimated readiness of

133
00:08:14,964 --> 00:08:16,719
production grade PQC limitation across.

134
00:08:17,219 --> 00:08:20,554
So now the algorithm, key size and
handshake, time and compatibility.

135
00:08:21,239 --> 00:08:28,019
So the RSA 2048, the key size is
two kb and handshake time is one x

136
00:08:28,284 --> 00:08:29,944
and the compatibility is universal.

137
00:08:30,524 --> 00:08:38,189
And the ECPP 2 56, key size is 0.5
kb handshake time 0.8 x, and the

138
00:08:38,194 --> 00:08:39,904
compat universal compatibility.

139
00:08:40,619 --> 00:08:47,234
And the 7, 6 8, the key says four kb.
Handshake time, 3.2 x and it's limited.

140
00:08:48,014 --> 00:08:51,764
The challenge extends beyond technical
merits, polyglot, microservices,

141
00:08:52,184 --> 00:08:56,354
enrollment, face inconsistent PQC
support across programming, language,

142
00:08:56,444 --> 00:08:58,714
and frameworks, migration strategies.

143
00:08:59,434 --> 00:09:01,414
Successful post quantum migration request.

144
00:09:01,474 --> 00:09:04,174
Careful planning and phase implementation.

145
00:09:04,774 --> 00:09:08,734
Organization must balance security
improvements into operational stability.

146
00:09:09,574 --> 00:09:11,014
Phase one, hybrid crypto.

147
00:09:11,514 --> 00:09:16,014
Implement dual algorithm handshakes
supporting both classical and post quantum

148
00:09:16,014 --> 00:09:18,414
cryptography for maximum compatibility.

149
00:09:19,104 --> 00:09:22,614
Phase two ingress first begin
with external facing ingress

150
00:09:22,614 --> 00:09:26,814
controllers where quantum
resistance provides immediate value.

151
00:09:27,324 --> 00:09:30,714
Phase three service,
miss extent to internal.

152
00:09:31,209 --> 00:09:34,349
Service to service communication
through gradual proxy updates.

153
00:09:34,739 --> 00:09:37,259
Phase four core infrastructure.

154
00:09:37,589 --> 00:09:40,439
Secure ETCD and core
Kubernetes CP communication.

155
00:09:40,439 --> 00:09:46,679
As the final step, always maintain
rollback options, ca Canada

156
00:09:46,679 --> 00:09:50,669
deployments and feature flags,
or essential for managing pq.

157
00:09:50,669 --> 00:09:52,139
Workload transition.

158
00:09:52,139 --> 00:09:54,259
Safety Kubernetes operator approach.

159
00:09:54,679 --> 00:09:57,994
Kubernetes operators provide the
ideal mechanism for managing post.

160
00:09:58,494 --> 00:10:01,994
Quantum cryptography at scale
treating security policy as code.

161
00:10:02,494 --> 00:10:07,624
Their custom resource definition define PQ
policies declaratively using Kubernetes.

162
00:10:08,124 --> 00:10:10,644
Ensure PQ save certificate
requirements automatically.

163
00:10:11,144 --> 00:10:11,899
Same charts.

164
00:10:12,319 --> 00:10:16,099
Simplify PQ deployment with
templated configuration.

165
00:10:17,089 --> 00:10:18,619
So here is the sample.

166
00:10:19,189 --> 00:10:20,049
For your reference.

167
00:10:20,549 --> 00:10:22,009
Now let's see the observability.

168
00:10:22,429 --> 00:10:25,909
So monitoring cryptography health
becomes a core observability

169
00:10:25,939 --> 00:10:28,109
requirement in post quantum enrollments.

170
00:10:28,699 --> 00:10:32,989
Organizations need visibility into
algorithm adoption and performance

171
00:10:32,989 --> 00:10:35,639
impacts, handshake algorithms in use.

172
00:10:36,139 --> 00:10:39,479
So the track with DL handshake
use classical wishes.

173
00:10:39,834 --> 00:10:45,504
Post Quantum as a hybrid versus the
algorithms across your infrastructure.

174
00:10:46,194 --> 00:10:49,674
The PQ adoption rate monitors the
percentage of connections successfully

175
00:10:49,674 --> 00:10:53,144
post quantum cryptography to
measure the migration process and

176
00:10:53,144 --> 00:10:54,944
the performance metrics measure.

177
00:10:54,944 --> 00:10:59,264
Ance increases error rates, and
throughput impacts from larger certificate

178
00:10:59,264 --> 00:11:00,914
sizes and competition overhead.

179
00:11:01,604 --> 00:11:03,519
You cannot secure what you can't see.

180
00:11:03,929 --> 00:11:08,744
Monitoring Cryptography Health is
now core observability task for SRTs.

181
00:11:09,244 --> 00:11:09,844
So let's see.

182
00:11:09,844 --> 00:11:13,864
In some of the early adapter case
studies, financial service, such

183
00:11:13,864 --> 00:11:19,414
organizations running on bks and GK
are pioneering post quantum Kubernetes

184
00:11:19,414 --> 00:11:24,874
implementation, providing valuable lessons
for broader adaption, high frequency

185
00:11:24,874 --> 00:11:30,454
trading, PQ MTLS implementation in
microsecond sensitive trading systems,

186
00:11:30,994 --> 00:11:35,164
performance trade off, required,
careful algorithm selection and hardware

187
00:11:35,164 --> 00:11:37,564
optimization, regulatory complaints.

188
00:11:38,104 --> 00:11:42,574
Hybrid cryptography helps meet
emerging regulatory requirements

189
00:11:42,574 --> 00:11:47,254
while maintaining compatibility
with existing systems and partners.

190
00:11:47,754 --> 00:11:51,024
Let's slice and ice to the steps.

191
00:11:51,024 --> 00:11:53,484
So first, test certificate
distribution at scale.

192
00:11:54,414 --> 00:11:58,104
So large certificate sizes can
overall system distribution

193
00:11:58,104 --> 00:12:00,174
mechanism in high no count clusters.

194
00:12:00,674 --> 00:12:02,264
Second, expect performance trade off.

195
00:12:03,164 --> 00:12:07,994
Budget for two to four x latency increases
during handshakes and plan capacity

196
00:12:07,994 --> 00:12:13,094
accordingly, then the roadblock plans
are critical in case something happens.

197
00:12:13,094 --> 00:12:17,654
Incompatibility issues can emerge
unexpectedly, always maintain

198
00:12:17,804 --> 00:12:19,304
classical fallback options.

199
00:12:19,804 --> 00:12:24,324
And now the road map and open source, the
post quantum transition is supported by

200
00:12:24,324 --> 00:12:28,704
a growing ecosystem of standards, open
source projects and community initiative.

201
00:12:29,204 --> 00:12:34,839
In 2024, NIST PQC started, finalized
early implementation in open and major

202
00:12:35,319 --> 00:12:37,199
crypto libraries in 20 25, 20 27.

203
00:12:37,679 --> 00:12:39,419
Production ready, PQ implementation.

204
00:12:39,419 --> 00:12:43,169
Major cloud providers offer
PQ enabled services and the

205
00:12:43,169 --> 00:12:45,909
future from 2028 to 20 20 30.

206
00:12:46,094 --> 00:12:48,659
We are expecting to see
widespread adoption.

207
00:12:49,159 --> 00:12:52,584
Classic algorithm deprecation in
favor of quantum safe alternatives.

208
00:12:53,269 --> 00:12:59,949
The key projects are open quantum
safe, O-Q-S-C-N-C-F Security, SIG

209
00:13:00,449 --> 00:13:01,469
Kubernetes Announcement Proposal.

210
00:13:02,039 --> 00:13:04,259
So these are the three key projects.

211
00:13:04,759 --> 00:13:06,794
Now, what is the call to action?

212
00:13:07,334 --> 00:13:10,214
The post quantum era is
approaching faster than many.

213
00:13:10,244 --> 00:13:13,259
Ians realize the time to
begin preparation is now.

214
00:13:14,039 --> 00:13:17,449
While quantum computers remain
in development, so the inventory

215
00:13:17,449 --> 00:13:23,019
dependencies, experimenting, staging,
adapt, hybrid crypto, so catalog

216
00:13:23,049 --> 00:13:26,949
all your cryptographic dependencies
in your Kubernetes infrastructure.

217
00:13:27,099 --> 00:13:31,434
Identify all say ECG, usage patterns
and certificate license, circuit,

218
00:13:32,379 --> 00:13:36,369
experimenting, staging, set up test
environment in pq, enable ingress

219
00:13:36,369 --> 00:13:41,109
controller and service measures, measure
performance impacts, and compatibility.

220
00:13:42,069 --> 00:13:43,479
Adopt hybrid crypto.

221
00:13:43,929 --> 00:13:46,899
Begin implementing hybrid
cryptography for new deployment.

222
00:13:47,379 --> 00:13:51,129
This provide quantum assistance while
maintaining backward compatibility.

223
00:13:51,969 --> 00:13:57,549
So the resources, so the NIST post
quantum cryptographic standard open

224
00:13:57,549 --> 00:14:02,664
quantum safe project documentation,
CN CF Security SIG PQ working group,

225
00:14:03,054 --> 00:14:05,184
Kubernetes PQ announcement proposal.

226
00:14:06,144 --> 00:14:10,194
The future is quantum safe,
the cluster you run today.

227
00:14:10,764 --> 00:14:12,024
Maybe vulnerable tomorrow.

228
00:14:12,524 --> 00:14:17,474
So start small experiment with
post quantum cryptography and

229
00:14:17,474 --> 00:14:21,044
prepare your infrastructure for
the quantum computing revolution.

230
00:14:21,544 --> 00:14:25,894
Saying in, in cyber, in cybersecurity,
being late to adapt this in just

231
00:14:26,044 --> 00:14:28,739
inefficient, it is catastrophic.

232
00:14:29,369 --> 00:14:33,844
The post quantum transition is
not a question of if, but when.

233
00:14:34,344 --> 00:14:35,989
Begin your quantum in Germany today.

234
00:14:36,489 --> 00:14:37,039
Your future self will.

235
00:14:37,854 --> 00:14:39,099
Thank you for the ForSight.

236
00:14:39,599 --> 00:14:40,139
Thank you.

237
00:14:40,589 --> 00:14:42,929
Thanks for watching my session.

238
00:14:43,079 --> 00:14:43,439
Thank you.

239
00:14:43,439 --> 00:14:43,979
Thanks a lot.

