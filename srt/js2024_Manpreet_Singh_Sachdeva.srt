1
00:00:00,330 --> 00:00:08,210
Hello friends, a very warm welcome from my
side to conf42 JavaScript 2024 conference.

2
00:00:08,710 --> 00:00:13,440
Today, I will be presenting on Kubernetes
security for JavaScript applications.

3
00:00:13,940 --> 00:00:15,520
I will talk about myself.

4
00:00:16,340 --> 00:00:17,880
I'm Manpreet Singh Sachdeva.

5
00:00:18,350 --> 00:00:21,170
I work for Walmart Global
Tech in United States.

6
00:00:21,710 --> 00:00:26,550
I'm an industry expert in
DevSecOps, MLOps, incident

7
00:00:26,550 --> 00:00:28,790
management, and quality assurance.

8
00:00:29,490 --> 00:00:34,300
So I have experience in Asia, in
Europe, as well as in North America.

9
00:00:35,090 --> 00:00:39,900
I've worked on various technologies,
cloud technologies, different cloud

10
00:00:39,900 --> 00:00:45,360
providers, AWS, Azure, GCP, as
well as on open source technology

11
00:00:45,410 --> 00:00:50,510
like OpenStack, Kubernetes, virtual
machines, containerized applications.

12
00:00:51,260 --> 00:00:57,090
So I'm really excited to share my thoughts
on this topic and I hope we learn together

13
00:00:57,470 --> 00:00:59,900
and take some key learnings with us.

14
00:01:00,695 --> 00:01:02,275
So let's get started.

15
00:01:02,875 --> 00:01:08,405
this is all about securing our JavaScript
applications on the Kubernetes clusters.

16
00:01:08,745 --> 00:01:12,845
I'll share some best practices and
strategies we use in the modern era.

17
00:01:13,345 --> 00:01:19,630
So we'll talk about how Kubernetes
became so important and so

18
00:01:19,630 --> 00:01:20,980
necessary in today's world.

19
00:01:21,480 --> 00:01:26,380
we'll go a bit, around in the area
of 2015, where we were just started

20
00:01:26,760 --> 00:01:28,620
to containerize the applications.

21
00:01:29,060 --> 00:01:31,240
So the Docker became popular.

22
00:01:31,770 --> 00:01:37,020
And we saw many applications like
Java, JavaScript applications, and they

23
00:01:37,020 --> 00:01:42,840
all sort, sorted, their, apps and we
started deploying on the containers.

24
00:01:43,260 --> 00:01:50,180
So the advantage of having containers is
that it becomes platform agnostic and the

25
00:01:50,200 --> 00:01:52,170
application really becomes lightweight.

26
00:01:52,400 --> 00:01:53,390
You can deploy.

27
00:01:54,125 --> 00:01:57,495
locally in your machine, you can
take it to production, you can

28
00:01:57,515 --> 00:02:00,215
scale in and you can scale out.

29
00:02:00,595 --> 00:02:03,735
And there was a lot of
flexibility around containers.

30
00:02:04,275 --> 00:02:09,115
Then we started, thinking about the
orchestration of containers that how

31
00:02:09,145 --> 00:02:11,735
to make applications work on scale.

32
00:02:12,245 --> 00:02:14,925
So that was the next
challenge the industry had.

33
00:02:14,925 --> 00:02:19,697
Then we started using Docker
Swarm, where we could use.

34
00:02:20,282 --> 00:02:25,482
to scale out the applications, do
networking between all, the containers,

35
00:02:26,092 --> 00:02:34,022
communicate and secure container, you
know, workloads, but that also there

36
00:02:34,022 --> 00:02:39,692
was a disadvantage or set of a sort of,
issue while scaling on Docker swarm.

37
00:02:40,092 --> 00:02:45,512
So it couldn't support large scale
applications where we had to.

38
00:02:46,102 --> 00:02:51,132
Run, production workloads for
a very high intensified apps

39
00:02:51,202 --> 00:02:53,232
using memory as well as CPU.

40
00:02:53,842 --> 00:02:58,742
then came Kubernetes and really became
popular because, the way it handled

41
00:02:58,752 --> 00:03:03,562
the Docker orchestration, the way it
handled all the container containers

42
00:03:04,272 --> 00:03:08,862
in a, distributed environment, we
could see the applications being

43
00:03:08,872 --> 00:03:13,942
scaled in, scaled out and, a massive
workloads being supported, then.

44
00:03:14,767 --> 00:03:17,907
There was, networking
between the applications.

45
00:03:17,917 --> 00:03:24,077
How can we restrict the app to
communicate or how can we, allow an app

46
00:03:24,077 --> 00:03:25,757
to communicate to the outside world?

47
00:03:26,197 --> 00:03:30,967
And then came the most important
part, which was how to secure the

48
00:03:30,977 --> 00:03:37,427
communication among the applications,
how to make sure that we are covered

49
00:03:37,427 --> 00:03:42,347
on the vulnerabilities and the cyber
threats we have in the, on the internet.

50
00:03:42,832 --> 00:03:47,092
So cyber security, as is one of the most
or the hottest topic nowadays where there

51
00:03:47,672 --> 00:03:54,472
are so many cyber threats causing so much
damage to the reputation, financial damage

52
00:03:54,802 --> 00:03:59,842
and so much, customers suffer so much
at the stake of cyber security threats.

53
00:04:00,172 --> 00:04:05,552
So today we'll focus on how to secure
our JavaScript applications and how to

54
00:04:05,562 --> 00:04:08,532
run them, efficiently using Kubernetes.

55
00:04:08,862 --> 00:04:10,282
So guys, let's get started.

56
00:04:10,782 --> 00:04:15,192
as I talked about containerizing
the JavaScript applications, so

57
00:04:15,262 --> 00:04:19,512
why should we on the first hand
containerize an application?

58
00:04:20,022 --> 00:04:23,802
So containers provide a very
lightweight, portable, and consistent

59
00:04:23,802 --> 00:04:25,242
environment for applications.

60
00:04:26,052 --> 00:04:30,782
As we just spoke about, Docker is one
of the most popular containerization

61
00:04:30,782 --> 00:04:34,222
platform, which allows the developers
to package their applications

62
00:04:34,592 --> 00:04:35,892
with all their dependencies.

63
00:04:36,467 --> 00:04:37,847
So that's what we do in Node.

64
00:04:37,857 --> 00:04:42,087
js or Java applications, we package
them with their dependencies.

65
00:04:42,742 --> 00:04:47,682
So the other advantage is, that there is
a consistency across all the environments.

66
00:04:48,092 --> 00:04:52,852
We ensure that the applications runs
the same way in all the different

67
00:04:52,852 --> 00:04:58,222
environments, like dev environment,
testing, pre staging or a pre

68
00:04:58,222 --> 00:05:01,332
prod kind of environment, and then
actually on a production environment.

69
00:05:01,402 --> 00:05:06,032
So we can do all the cycles of testing,
starting from the dev to our pre

70
00:05:06,202 --> 00:05:10,192
prod and make sure that, we are well
accustomed with all the scalability.

71
00:05:10,382 --> 00:05:13,882
And the networking perspective of
our applications, and then, deploy

72
00:05:13,882 --> 00:05:19,222
the application on production and the
other important factors, the, all the

73
00:05:19,252 --> 00:05:24,452
containers are totally isolated, all
the applications, they run all the

74
00:05:24,462 --> 00:05:26,762
services they run without conflicts.

75
00:05:27,172 --> 00:05:31,332
in their own storage space, so they
do not interact or interfere with the

76
00:05:31,742 --> 00:05:33,802
other apps which are also containerized.

77
00:05:34,642 --> 00:05:38,612
Then we spoke about scalability
already where, it's very easy

78
00:05:38,612 --> 00:05:42,632
to scale the applications
horizontally as well as vertically.

79
00:05:42,942 --> 00:05:47,302
So we will talk about the horizontal
pod auto scaling on Kubernetes that

80
00:05:47,642 --> 00:05:51,452
how easily we can scale the application
when there is an increase in the

81
00:05:51,452 --> 00:05:57,212
surge in traffic and we can also
basically scale in the applications.

82
00:05:57,797 --> 00:06:01,057
Where if the traffic is less and
you're going to, we can, make sure

83
00:06:01,057 --> 00:06:05,867
that we are running on less number of
containers to, do cost optimization.

84
00:06:06,487 --> 00:06:09,477
And, we already spoke about the
Kubernetes, which is, one of the

85
00:06:09,477 --> 00:06:14,427
most popular container orchestration
platforms, which helps the

86
00:06:14,427 --> 00:06:18,747
applications to run at scale with
different, Cloud providers nowadays.

87
00:06:18,757 --> 00:06:23,617
So we also have a hybrid kind of
a cloud environment, which most of

88
00:06:23,617 --> 00:06:28,277
the companies nowadays support that
they have their native inbuilt cloud

89
00:06:28,277 --> 00:06:33,597
platform and they leverage the,
cloud providers in a hybrid way.

90
00:06:34,097 --> 00:06:38,967
So talking about now Kubernetes,
which has actually transformed the way

91
00:06:38,967 --> 00:06:44,077
we deploy our applications, the way
we, scale our applications and it's

92
00:06:44,077 --> 00:06:46,197
so easy to manage the applications.

93
00:06:46,807 --> 00:06:51,277
just with few commands and, just on,
even if I have a UI to manage very easy

94
00:06:51,277 --> 00:06:56,587
to manage, all these applications in
just one click, but we, that, we've

95
00:06:56,617 --> 00:06:59,457
given such a big, or a powerful tool.

96
00:06:59,857 --> 00:07:04,397
Now we also have a big responsibility
to make sure that, we protect

97
00:07:04,467 --> 00:07:08,047
our internet world or all the
applications which are hosted.

98
00:07:08,307 --> 00:07:09,167
We protect them.

99
00:07:09,662 --> 00:07:12,142
from all the kind of cyber
threats we are having now.

100
00:07:12,642 --> 00:07:17,082
So we'll talk about different kind of,
security implementation for Kubernetes.

101
00:07:17,442 --> 00:07:23,142
How can we secure our, applications,
especially what are the best practices and

102
00:07:23,142 --> 00:07:26,002
some tips for the JavaScript applications.

103
00:07:26,372 --> 00:07:29,672
I'll also share some of
the examples for JavaScript

104
00:07:29,732 --> 00:07:31,642
applications later in the slides.

105
00:07:32,032 --> 00:07:36,612
Yeah, we'll just go through, one of, one
of the examples, and I also share some

106
00:07:36,872 --> 00:07:41,642
resources at the end of the presentation
where you can refer it for later.

107
00:07:42,572 --> 00:07:48,092
So this presentation will mainly outline
a multi layered approach to secure

108
00:07:48,092 --> 00:07:50,122
it, securing our Kubernetes clusters.

109
00:07:50,632 --> 00:07:55,222
So we'll focus on the different
planes where the security

110
00:07:55,272 --> 00:07:56,672
vulnerabilities can catch us.

111
00:07:57,082 --> 00:07:58,692
So first will be the control plane.

112
00:07:59,232 --> 00:08:00,642
then we'll talk about the.

113
00:08:01,197 --> 00:08:04,877
Securing our node, securing
actual applications, which we

114
00:08:04,877 --> 00:08:08,857
call as workloads in Kubernetes
world or the containerized world.

115
00:08:09,167 --> 00:08:13,167
And then we'll talk about how we
can secure the communication of

116
00:08:13,177 --> 00:08:15,177
all these apps on the network side.

117
00:08:15,817 --> 00:08:19,757
So we'll give, give you a real
world examples and best practices.

118
00:08:20,287 --> 00:08:24,527
And, try to demonstrate how to
protect Kubernetes environments and

119
00:08:24,527 --> 00:08:26,187
vulnerabilities from the vulnerabilities.

120
00:08:26,687 --> 00:08:32,157
So when we talk about security, there
are mainly four C's, which we talk about.

121
00:08:32,367 --> 00:08:37,087
So first C is the cluster, where,
how can we secure the cluster

122
00:08:37,107 --> 00:08:39,207
where our, application is hosted.

123
00:08:39,527 --> 00:08:40,657
Then the container.

124
00:08:40,717 --> 00:08:42,727
Container is nothing but
the workload security.

125
00:08:42,957 --> 00:08:48,087
How to secure the container which is
running, our JavaScript application.

126
00:08:48,757 --> 00:08:51,087
And we'll talk about the
security on the cloud.

127
00:08:51,087 --> 00:08:54,427
Then we'll talk about that how can we
leverage the cloud providers such as AWS.

128
00:08:55,022 --> 00:09:00,162
As your, as well as GCP, and then
we'll talk about the actual code

129
00:09:00,722 --> 00:09:02,072
vulnerability and the code security.

130
00:09:02,302 --> 00:09:06,772
So just give an example of cloud
securities like, AWS, Azure, they

131
00:09:06,772 --> 00:09:11,712
have some network policies and they
have their own kind of security,

132
00:09:11,762 --> 00:09:13,412
mechanisms, which they support.

133
00:09:13,882 --> 00:09:18,082
So we'll not go in, in depth of those
security mechanisms, but there's

134
00:09:18,082 --> 00:09:21,722
a lot of cloud security measures,
which these cloud providers take.

135
00:09:21,772 --> 00:09:25,482
and we can definitely leverage,
on our Kubernetes clusters.

136
00:09:25,982 --> 00:09:32,702
So moving forward, why does
Kubernetes security matters that much?

137
00:09:33,362 --> 00:09:37,882
So as we were talking about the
Kubernetes, it's now very popular

138
00:09:38,122 --> 00:09:42,742
in container orchestration and
mostly all the big applications.

139
00:09:43,092 --> 00:09:46,152
They use kubernetes, at the
back end of the cluster.

140
00:09:46,592 --> 00:09:50,632
So kubernetes has become the backbone
of our modern cloud infrastructure

141
00:09:50,962 --> 00:09:55,292
with adoption growing rapidly
across industries like, healthcare,

142
00:09:55,332 --> 00:09:58,462
finance, retail, telecommunications.

143
00:09:58,892 --> 00:10:02,302
So organizational organizations
are totally relying on kubernetes

144
00:10:02,302 --> 00:10:07,582
for mission critical operations,
like running big websites, retail

145
00:10:07,582 --> 00:10:10,872
websites, healthcare systems, and even.

146
00:10:11,317 --> 00:10:16,807
even the defense or the, different
kind of industries like, AI industry

147
00:10:16,807 --> 00:10:20,067
and healthcare industry, all are
using Kubernetes on large scale.

148
00:10:20,767 --> 00:10:26,077
But again, with the increased use comes
the threat of cyber attacks, targeting

149
00:10:26,297 --> 00:10:27,927
vulnerabilities with Kubernetes clusters.

150
00:10:27,927 --> 00:10:31,387
We all are aware of the log4j
vulnerability which happened

151
00:10:31,397 --> 00:10:32,417
a couple of years back.

152
00:10:33,147 --> 00:10:38,467
And there was another threat in 2021,
which, a hacker was able to access a

153
00:10:38,467 --> 00:10:43,927
Kubernetes cluster through, like an
admin and able to, destroy and delete

154
00:10:44,157 --> 00:10:49,527
so many apps, which were really mission
critical supporting, the payment systems.

155
00:10:50,117 --> 00:10:53,067
And it hit a lot of
reputation of that company.

156
00:10:53,067 --> 00:10:57,347
And, also a lot of financial damage
happened, which the company had

157
00:10:57,357 --> 00:10:58,807
to pay back to the customers.

158
00:10:59,517 --> 00:11:02,597
So that is the reason, prime
reason why the Kubernetes

159
00:11:02,597 --> 00:11:05,037
security matters so much now.

160
00:11:05,387 --> 00:11:09,097
So failing to secure Kubernetes
environments can lead to severe

161
00:11:09,097 --> 00:11:11,947
consequences, the kind of
one which we just discussed.

162
00:11:12,397 --> 00:11:14,417
So including data breaches, right?

163
00:11:14,807 --> 00:11:19,607
Service disruptions, you can completely
delete the running application pods and

164
00:11:19,607 --> 00:11:22,087
just do a complete service disruption.

165
00:11:22,487 --> 00:11:26,317
You can filter out the
secrets, the username passwords

166
00:11:26,337 --> 00:11:28,597
of the actual customers.

167
00:11:29,117 --> 00:11:32,407
And which is a big data
breach for any company.

168
00:11:32,787 --> 00:11:36,967
And then there, the financial
losses, that, that can actually

169
00:11:36,967 --> 00:11:39,287
cripple the, the operation centers.

170
00:11:40,257 --> 00:11:43,327
So the stakes are especially
high for organizations undergoing

171
00:11:43,767 --> 00:11:45,647
digital transformation nowadays.

172
00:11:46,147 --> 00:11:51,027
Properly securing Kubernetes
clusters will basically ensure trust,

173
00:11:51,417 --> 00:11:57,257
reliability, and safety, not only for
the business, but also for the end users.

174
00:11:57,747 --> 00:11:59,537
Who rely on these digital services?

175
00:11:59,557 --> 00:12:04,047
Suppose, customers are using a banking
app customers, like last week, there

176
00:12:04,047 --> 00:12:05,807
was a big outage on the bank of America.

177
00:12:05,807 --> 00:12:09,777
The user not, we're not even
able to log into the app.

178
00:12:10,107 --> 00:12:15,707
So all of these, apps are hosted on
Kubernetes and at the end, the end

179
00:12:15,707 --> 00:12:20,867
users are suffering and it's bringing
so much loss, to these digital services.

180
00:12:21,367 --> 00:12:27,827
So now we'll talk about the multi layered
approach, which we will follow to secure

181
00:12:27,867 --> 00:12:30,057
our Kubernetes clusters and workloads.

182
00:12:30,737 --> 00:12:35,627
as I was talking that we will talk about
different kind of security planes where

183
00:12:35,667 --> 00:12:38,317
we need to, apply the security measures.

184
00:12:38,747 --> 00:12:43,617
securing Kubernetes requires
a layered security strategy.

185
00:12:44,127 --> 00:12:47,037
Addressing vulnerabilities
across different components.

186
00:12:47,577 --> 00:12:52,857
So each layer is crucial here for reducing
the attack surface and mitigating threat.

187
00:12:53,177 --> 00:12:57,717
So we constitute, all these layers
constitute a attack surface.

188
00:12:58,057 --> 00:13:04,512
So we will see where are attack surfaces
and how to mitigate, the attack area.

189
00:13:05,122 --> 00:13:09,782
So first up, first of all, we'll talk
about the control plane security, how

190
00:13:09,822 --> 00:13:14,132
we can protect the cluster's central
brain where, you know, all the logic

191
00:13:14,142 --> 00:13:19,762
lives, then we'll talk about the node
security that, we, the node, the host

192
00:13:19,812 --> 00:13:25,572
where our application is running, how
to secure that node, then eventually

193
00:13:25,572 --> 00:13:29,002
we'll talk about, the workload security,
which is nothing but securing our

194
00:13:29,002 --> 00:13:34,102
JavaScript applications, that how the
applications run within the cluster.

195
00:13:34,102 --> 00:13:35,532
can be protected, right?

196
00:13:36,092 --> 00:13:40,122
And then we'll talk about the network
security at last, that how we can control

197
00:13:40,122 --> 00:13:44,522
the traffic inflow and, which we call the
ingress traffic and the egress traffic.

198
00:13:44,812 --> 00:13:49,922
How we can, control the inflow and
the outflow traffic and manage the

199
00:13:49,972 --> 00:13:52,302
secure communications among the apps.

200
00:13:52,652 --> 00:13:56,752
basically we'll have a holistic approach
to ensure that, all the vulnerabilities

201
00:13:57,132 --> 00:13:59,422
are addressed from all the angles.

202
00:14:00,252 --> 00:14:02,452
first we talk about
control plane security.

203
00:14:02,712 --> 00:14:04,342
what is control plane security?

204
00:14:04,582 --> 00:14:09,372
It's the API server authentication
and authorization, happens

205
00:14:09,372 --> 00:14:10,252
on the control plane.

206
00:14:10,252 --> 00:14:13,272
control plane is the brain
of your Kubernetes cluster.

207
00:14:13,632 --> 00:14:19,222
Some of the, terms we use, we
call it as the master component.

208
00:14:19,792 --> 00:14:23,332
or the one which is
running the control, plane.

209
00:14:23,332 --> 00:14:27,112
So we also call it as a control plane
component or a master component where

210
00:14:27,152 --> 00:14:29,872
are, all of the API servers are hosted.

211
00:14:30,332 --> 00:14:33,252
So the Kubernetes API server
is the core interface for

212
00:14:33,802 --> 00:14:35,442
managing the cluster operations.

213
00:14:35,962 --> 00:14:40,772
Secure it by using strong authentication
methods like OAuth or OpenID.

214
00:14:41,012 --> 00:14:45,902
So these are all open, source way
of, providing an authorization,

215
00:14:46,292 --> 00:14:47,232
to the cluster level.

216
00:14:47,712 --> 00:14:50,212
And we can also use RBAC policies.

217
00:14:50,402 --> 00:14:54,922
So RBAC is nothing but Role Based
Access Control policies by which we can

218
00:14:54,922 --> 00:14:57,252
limit the access to critical functions.

219
00:14:57,492 --> 00:15:03,932
So every org they implement RBAC, what
is RBAC is like, with our, user ID,

220
00:15:04,382 --> 00:15:06,362
they will tie us to a particular group.

221
00:15:06,752 --> 00:15:11,282
And through a particular group, we
will have a role based access that if

222
00:15:11,282 --> 00:15:16,052
I'm part of a developer group, I can
only, do a read only on the cluster.

223
00:15:16,432 --> 00:15:21,462
If I'm part of a DevOps or a like
incident management group, I will

224
00:15:21,482 --> 00:15:23,572
have access to production as an admin.

225
00:15:23,972 --> 00:15:25,642
And if I'm part of some testing group.

226
00:15:25,957 --> 00:15:27,977
I may not even have access to production.

227
00:15:28,267 --> 00:15:32,477
I may only have access to pre prod
or a staging or testing environment.

228
00:15:32,797 --> 00:15:37,777
So that way we can secure, the
user making it part of a certain

229
00:15:37,777 --> 00:15:39,267
group through RBAC policies.

230
00:15:39,827 --> 00:15:43,237
Then we have to, encrypt the etcd.

231
00:15:43,477 --> 00:15:48,277
So etcd is nothing but a database
is a key value database like Redis.

232
00:15:48,487 --> 00:15:53,037
It stores, the cluster sensitive
data, including some secrets

233
00:15:53,037 --> 00:15:54,147
and configuration details.

234
00:15:54,617 --> 00:15:58,187
So these configuration
details, are very sensitive.

235
00:15:58,487 --> 00:16:04,537
They are actually, storing very sensitive
data about the, secrets as well as

236
00:16:04,557 --> 00:16:08,327
the keys, as well as the certificates,
which are used by the API server.

237
00:16:08,627 --> 00:16:14,507
So it's very important to encrypt
all the etcd data, at rest and, only

238
00:16:14,517 --> 00:16:19,657
certain users with admin access be
able to access the etcd database.

239
00:16:20,162 --> 00:16:23,332
Then we will talk about the
network policies by default.

240
00:16:23,372 --> 00:16:27,302
Kubernetes networking is open, which
can expose the cluster to risk.

241
00:16:27,352 --> 00:16:30,092
So that is the way
Kubernetes has been designed.

242
00:16:30,592 --> 00:16:31,842
the networking is open.

243
00:16:31,852 --> 00:16:35,442
We have to make sure that
these network policies are not

244
00:16:35,462 --> 00:16:38,042
accessible by external users.

245
00:16:38,442 --> 00:16:42,252
So we can implement the network
policies using tools like Calico

246
00:16:42,482 --> 00:16:46,762
or Cal, Cillium to control the
communication between the ports and

247
00:16:46,762 --> 00:16:48,862
minimize our potential attack surfaces.

248
00:16:49,437 --> 00:16:53,757
So we'll talk about network policies
in details that how can we make

249
00:16:53,757 --> 00:16:56,647
sure that we have network policies
to secure our infrastructure.

250
00:16:57,147 --> 00:16:59,447
So next we talk about the node security.

251
00:17:00,157 --> 00:17:06,507
so node is how our kubelet, interacts
with the API will be hosted on a node.

252
00:17:06,997 --> 00:17:09,617
So there are, certain aspects
we will talk about here.

253
00:17:10,057 --> 00:17:12,157
So first is the operating
system hardening.

254
00:17:12,512 --> 00:17:16,042
How we can show, make sure that
our operating system like Ubuntu

255
00:17:16,142 --> 00:17:20,802
or wheresoever our application is
hosted, how we can make sure that all

256
00:17:20,802 --> 00:17:23,032
of the operating system is secure.

257
00:17:23,282 --> 00:17:28,752
So nodes should run a minimal hardened
OS version with regular security patches.

258
00:17:29,112 --> 00:17:32,752
Adopting standards, such as the CIS
benchmark, which is the standard

259
00:17:32,752 --> 00:17:37,322
benchmark for security, it's help
reducing vulnerabilities at the OS level.

260
00:17:37,712 --> 00:17:40,002
So important thing here to.

261
00:17:40,192 --> 00:17:45,712
you know, notice that there is
always a security patch, update from

262
00:17:45,712 --> 00:17:47,982
the OS level supports Ubuntu, 20.

263
00:17:48,162 --> 00:17:53,022
04 is secure at a certain level,
which supports a particular

264
00:17:53,022 --> 00:17:54,222
version of Kubernetes.

265
00:17:54,722 --> 00:17:59,102
Once, the Kubernetes patch new
patch comes, it might not be secure.

266
00:17:59,102 --> 00:18:02,922
And that on that particular OS
version, it's always, you have,

267
00:18:02,942 --> 00:18:04,632
we have to make sure that we have.

268
00:18:05,317 --> 00:18:10,837
Updated the OS or the kernel
version with the latest security

269
00:18:10,837 --> 00:18:15,287
patches so we don't open our node
for any kind of vulnerabilities.

270
00:18:15,687 --> 00:18:18,757
So operating system hardening
is really important.

271
00:18:19,187 --> 00:18:21,797
Then we talk about the
container runtime security.

272
00:18:22,177 --> 00:18:26,607
The container runtime security like
Docker or ContainerD with what kind

273
00:18:26,607 --> 00:18:31,637
of, the runtime environment we use is
responsible for managing our containers.

274
00:18:32,167 --> 00:18:34,817
So enforcing security
controls like AppArmor.

275
00:18:35,132 --> 00:18:39,522
AppArmor or SE Linux can limit
the actions containers can take

276
00:18:39,852 --> 00:18:41,062
protecting the host system.

277
00:18:41,442 --> 00:18:42,912
So we'll talk about AppArmor.

278
00:18:43,322 --> 00:18:48,242
we can make a profile and upload
that profile or link that profile to

279
00:18:48,282 --> 00:18:54,872
AppArmor and make sure that only these
kind of rules are allowed in our node.

280
00:18:54,872 --> 00:18:59,202
Like only these kind of rules
we will be allowing on the

281
00:18:59,202 --> 00:19:01,622
node to run and certain rules.

282
00:19:01,987 --> 00:19:04,797
Which are not associated with
the profiles will be discarded.

283
00:19:05,167 --> 00:19:10,267
So we'll create a profile and,
filter all the rules based on the

284
00:19:10,267 --> 00:19:12,267
profile kind of profile we have.

285
00:19:12,637 --> 00:19:14,947
So we have security
measures like app armor.

286
00:19:15,227 --> 00:19:19,387
I will share the resources that
how we can use our app armors.

287
00:19:19,757 --> 00:19:21,137
really cool tool.

288
00:19:21,147 --> 00:19:22,047
it's an open source.

289
00:19:22,527 --> 00:19:26,047
And we can maintain our profiles
with the help of AppArmor and,

290
00:19:26,077 --> 00:19:27,897
secure our run, container runtime.

291
00:19:28,477 --> 00:19:30,377
Then we talk about the kubelet security.

292
00:19:30,817 --> 00:19:33,507
The kubelet, which is an
agent on each node, it runs

293
00:19:33,507 --> 00:19:34,827
as a daemon set on each node.

294
00:19:35,247 --> 00:19:39,187
Each of the node handles the
communication with the control plane.

295
00:19:39,927 --> 00:19:44,717
the node interacts with the control
plane with kubelet, with the kubelet and

296
00:19:44,767 --> 00:19:47,267
that also on a TLS secure communication.

297
00:19:47,717 --> 00:19:51,667
So securing the kubelet with
TLS and restricting the API

298
00:19:51,707 --> 00:19:55,567
access prevents attacker from
manipulating the node operations.

299
00:19:56,117 --> 00:20:00,447
So securing our kubelet is also really
important because I've seen some teams,

300
00:20:00,477 --> 00:20:05,627
they will secure the API server, they
will secure the workloads, but the kubelet

301
00:20:05,847 --> 00:20:12,497
security sometimes is discarded and,
ignored, which, which will allow the

302
00:20:12,507 --> 00:20:18,667
hackers, to make any changes on the node
level and it can create a lot of damage.

303
00:20:19,167 --> 00:20:21,147
Now we spoke about the node security.

304
00:20:21,462 --> 00:20:24,682
Let's talk about the actual
workload security and coming

305
00:20:24,682 --> 00:20:26,192
to the JavaScript applications.

306
00:20:26,472 --> 00:20:30,652
How to secure a JavaScript application
is, part of the workload security.

307
00:20:31,072 --> 00:20:35,452
suppose a JavaScript application is
containerized on a Docker container and

308
00:20:35,452 --> 00:20:37,442
then, is orchestrated on Kubernetes.

309
00:20:37,772 --> 00:20:41,722
that JavaScript container
running application will be

310
00:20:41,722 --> 00:20:45,742
running as a pod inside, and a
pod will be having containers.

311
00:20:46,092 --> 00:20:47,922
initially we had used to.

312
00:20:48,222 --> 00:20:50,932
Call something called
port security policies.

313
00:20:50,952 --> 00:20:56,052
They have been deprecated, but now
we use, something called PSA, which

314
00:20:56,052 --> 00:21:01,232
is port security admission, which
allows the admins to enforce security

315
00:21:01,232 --> 00:21:07,472
policies such as privileged baseline
restricted kind of access on the port.

316
00:21:07,482 --> 00:21:12,812
So the basic fundamental on
securing a workload is give least,

317
00:21:12,862 --> 00:21:14,732
privilege to a running container.

318
00:21:15,242 --> 00:21:20,722
means you give a least privilege that the
user is not able to exec into a container

319
00:21:20,772 --> 00:21:23,162
and run commands on the root level.

320
00:21:23,482 --> 00:21:28,512
Because if any user is able to execute
inside a container and run commands

321
00:21:28,982 --> 00:21:33,812
on a root level, that can even disrupt
all the running applications that

322
00:21:33,812 --> 00:21:38,652
can destroy the network policies and,
the user can you eventually, just do

323
00:21:38,672 --> 00:21:40,842
anything if they have the admin access.

324
00:21:41,222 --> 00:21:46,182
So the least access principle always
is applicable on the workload while

325
00:21:46,332 --> 00:21:47,742
we are talking about security.

326
00:21:48,082 --> 00:21:51,342
And then we talk about runtime
security that we can use tools

327
00:21:51,342 --> 00:21:53,782
like Falco or Aqua security.

328
00:21:54,282 --> 00:21:57,572
To detect some suspicious
activity within the containers.

329
00:21:57,862 --> 00:22:03,412
So what we can do in Falco is create some
rules and if we, if, if those rules are

330
00:22:03,462 --> 00:22:10,292
met, like we have, triggered that if we
see some 5x kind of errors or, 3x kind

331
00:22:10,292 --> 00:22:15,372
of redirects in a container, traffic,
which should not be ideally happening.

332
00:22:15,602 --> 00:22:19,002
So we can actually,
write some Falco rules.

333
00:22:19,392 --> 00:22:24,122
create a Falco policy, write some rules
and, trigger real time monitoring.

334
00:22:24,682 --> 00:22:29,812
If we see those rules are getting, break,
so we can trigger alerts and notify the

335
00:22:29,812 --> 00:22:32,282
users with the help of runtime security.

336
00:22:32,842 --> 00:22:37,722
Then comes the most important
part of securing our, workloads,

337
00:22:37,752 --> 00:22:40,422
which is managing of the secrets.

338
00:22:40,942 --> 00:22:46,712
So secrets are in general, some,
workloads have exposed secrets, which is.

339
00:22:47,147 --> 00:22:48,347
Not a good practice.

340
00:22:48,747 --> 00:22:54,107
So we should always be using, tools
like HashiCorp Vault or maybe, AWS

341
00:22:54,627 --> 00:22:59,517
Secrets Manager or Azure Secrets, which,
whichever cloud provider you're using.

342
00:22:59,967 --> 00:23:03,447
So storing secrets directly
in plain text with Kubernetes

343
00:23:03,487 --> 00:23:05,217
manifest is a common mistake.

344
00:23:05,797 --> 00:23:07,237
it is actually a very big mistake.

345
00:23:07,237 --> 00:23:11,307
if you do, and it can cause,
it can expose your secrets and

346
00:23:11,377 --> 00:23:13,217
anybody access to that secrets.

347
00:23:13,757 --> 00:23:18,407
Can, run your APIs, on the cluster
and, can even, change the data

348
00:23:18,407 --> 00:23:22,417
inside the applications and even,
delete some of the important

349
00:23:22,417 --> 00:23:23,727
configurations in the application.

350
00:23:24,037 --> 00:23:29,227
So secrets management on the workload
security is one of the most, important

351
00:23:29,557 --> 00:23:33,987
way of, securing our applications
and always use, something which has

352
00:23:33,987 --> 00:23:38,182
been provided by the cloud provider,
or, we already have HashiCorp Vault.

353
00:23:38,632 --> 00:23:40,942
they're, ultra secure way
of, managing the secrets.

354
00:23:41,442 --> 00:23:45,392
So now at last, we will talk about
network security, how we can secure

355
00:23:45,422 --> 00:23:48,932
our communication with the outside
world or with the other apps.

356
00:23:49,382 --> 00:23:51,792
So we have something called service mesh.

357
00:23:52,232 --> 00:23:57,222
So like service mesh, most of
the, organizations use, where they

358
00:23:57,222 --> 00:23:59,012
will limit the incoming traffic.

359
00:23:59,322 --> 00:24:03,262
And from there they will distribute
the, traffic based on the network rules.

360
00:24:03,707 --> 00:24:09,667
commonly used service mesh are HTO or
Linkerd, which add an additional layer

361
00:24:09,667 --> 00:24:12,687
of security by enabling a mutual TLS.

362
00:24:13,317 --> 00:24:18,727
So mutual TLS is very secure way of,
communicating, over, a secure protocol.

363
00:24:19,197 --> 00:24:23,347
They encrypt the service to service
communication and they make sure

364
00:24:23,347 --> 00:24:27,407
that, there's a very fine grained
access control given to the user.

365
00:24:27,437 --> 00:24:32,547
So they also use their RBAC policies
on the STO level and they make sure

366
00:24:32,547 --> 00:24:34,087
that the communication is very secure.

367
00:24:34,137 --> 00:24:36,737
So one is using service
mesh on your network.

368
00:24:37,187 --> 00:24:39,927
Second is like you can use
ingress and egress control.

369
00:24:40,312 --> 00:24:45,082
So you can control what traffic can enter
and leave your, cluster by deploying

370
00:24:45,082 --> 00:24:48,642
an nginx ingress controller, which
is a very common ingress controller.

371
00:24:48,902 --> 00:24:53,282
You can define your ingress rule
that you want to, talk to this app.

372
00:24:53,282 --> 00:24:56,852
You don't want to like you
restrict the traffic from this app.

373
00:24:56,852 --> 00:24:59,942
You can create your ingress
rules on the Kubernetes cluster.

374
00:25:00,322 --> 00:25:04,562
So like ingress, controller also
have their inbuilt network policies.

375
00:25:05,202 --> 00:25:10,902
So where you can restrict the external
or internal, IPs, whichever IPs

376
00:25:10,952 --> 00:25:14,472
you want to, allow traffic to, or
you don't want to allow traffic to,

377
00:25:14,472 --> 00:25:17,932
you can just create your network
policies using the ingress control.

378
00:25:18,432 --> 00:25:20,292
Then we'll talk about the DDoS protection.

379
00:25:20,592 --> 00:25:25,672
Kubernetes clusters that are exposed to
the public internet are susceptible to

380
00:25:25,732 --> 00:25:27,782
distributed denial of service attacks.

381
00:25:28,062 --> 00:25:32,182
It's a very common attack
nowadays in the cyber world.

382
00:25:32,522 --> 00:25:37,077
So implement DDoS protection mechanisms
like, again, leverage your cloud

383
00:25:37,077 --> 00:25:41,952
provider, use AWS Shield or there
is Google Cloud Armor as well to

384
00:25:41,952 --> 00:25:44,422
defend against DDoS kind of attacks.

385
00:25:44,662 --> 00:25:46,442
So this was all about, network security.

386
00:25:46,712 --> 00:25:51,152
We Now, talking about the global
impact of Kubernetes security.

387
00:25:51,602 --> 00:25:55,832
basically, what security
does it, it enhances trust.

388
00:25:56,212 --> 00:26:00,602
So securing Kubernetes clusters,
JavaScript applications running on

389
00:26:00,622 --> 00:26:05,212
Kubernetes clusters, we secure them, it
directly impacts the trust that customers

390
00:26:05,212 --> 00:26:07,952
and stakeholders have in digital services.

391
00:26:08,532 --> 00:26:12,262
Security incidents can lead to
significant reputational damage,

392
00:26:12,822 --> 00:26:16,762
As we, talked about before as well
and erode confidence in the digital

393
00:26:16,762 --> 00:26:18,872
transformation efforts of organizations.

394
00:26:19,292 --> 00:26:23,652
So it's so important to, enhance
our trust, in our end users.

395
00:26:24,102 --> 00:26:27,552
So protecting our critical infrastructure,
Kubernetes is now a very critical

396
00:26:27,552 --> 00:26:30,922
part of managing infrastructure
in industries like healthcare,

397
00:26:30,922 --> 00:26:32,732
finance and telecommunications.

398
00:26:33,252 --> 00:26:35,702
A security breach in these
environments, suppose, some

399
00:26:35,902 --> 00:26:38,022
person's health data is breached.

400
00:26:38,362 --> 00:26:44,212
Such a, big data loss and such a, Big
thing to, lose the confidence of customers

401
00:26:44,212 --> 00:26:48,262
providing their health data so it can
actually have catastrophic effects.

402
00:26:48,342 --> 00:26:50,342
Global sec, cybersecurity contribution.

403
00:26:50,342 --> 00:26:54,722
As Kubernetes becomes, more widespread,
its security becomes a vital part of the

404
00:26:54,722 --> 00:26:57,452
global cybersecurity ecosystem as a whole.

405
00:26:57,992 --> 00:27:02,022
By enhancing Kubernetes security, we
protect our, broader digital landscape.

406
00:27:02,362 --> 00:27:04,012
working on security, cybersecurity.

407
00:27:04,012 --> 00:27:06,822
Sometimes I feel, I'm a
cyber warrior protecting.

408
00:27:07,462 --> 00:27:08,192
The internet.

409
00:27:08,872 --> 00:27:13,782
I really feel proud of, I'm part
of, securing something and helping

410
00:27:13,782 --> 00:27:15,652
users to, protect their data.

411
00:27:15,862 --> 00:27:20,322
So it's a big ownership, cyber security
engineers carry with them and, working

412
00:27:20,322 --> 00:27:23,762
on such, cutting edge technologies
like Kubernetes and learning how

413
00:27:23,762 --> 00:27:28,632
to leverage all this technology to
protect the data is actually, amazing.

414
00:27:29,132 --> 00:27:31,972
open source standards like
Kubernetes also is open sources.

415
00:27:31,992 --> 00:27:34,722
Most of the things are,
actually free to use.

416
00:27:35,072 --> 00:27:38,922
like so much code is, posted on
GitHub where we can leverage that

417
00:27:38,932 --> 00:27:40,722
code and secure our clusters.

418
00:27:41,072 --> 00:27:44,952
It basically sets a security standard
for the broad and open source community,

419
00:27:45,412 --> 00:27:49,912
encourages them influencing the
security practices of other projects.

420
00:27:50,702 --> 00:27:54,242
Being this open source is actually
a very much, an inspiration for

421
00:27:54,242 --> 00:27:59,752
all to, even, use the code and even
contribute to the open source community.

422
00:28:00,252 --> 00:28:04,552
So now, We'll do some examples on
the JavaScript applications, some

423
00:28:04,552 --> 00:28:07,862
security considerations, which I
spoke about, but I want to give

424
00:28:07,862 --> 00:28:09,722
some examples on that as well.

425
00:28:10,062 --> 00:28:13,722
So always run containers
as non root users.

426
00:28:14,212 --> 00:28:21,182
That's a rule of thumb that, if I, if you
see that always create a non root user,

427
00:28:21,602 --> 00:28:23,772
and never give a root kind of access.

428
00:28:24,032 --> 00:28:26,772
So here I've used user called app user.

429
00:28:27,052 --> 00:28:29,032
So I'm not giving a root kind of access.

430
00:28:29,172 --> 00:28:34,042
To the user implement network security,
policies like restrict traffic between

431
00:28:34,042 --> 00:28:38,932
the ports, leverage namespace and
labels, which are Kubernetes properties.

432
00:28:38,932 --> 00:28:43,512
And even with, using the labels,
proper labels and namespace, you can

433
00:28:43,512 --> 00:28:48,292
secure applications like the way,
examples shows that we have used,

434
00:28:48,602 --> 00:28:53,532
something, metadata called name allow
node js, and we have pod selectors.

435
00:28:53,532 --> 00:28:54,552
We will match the labels.

436
00:28:55,107 --> 00:29:00,297
With the help of these, pod selectors
and we can define rules like ingress or

437
00:29:00,297 --> 00:29:06,077
egress where we can, make sure that, the
only this kind of namespace is allowed

438
00:29:06,077 --> 00:29:11,347
or only these kind of pods, which have
those labels matching are being allowed,

439
00:29:11,637 --> 00:29:16,197
to serve the traffic and then manage
secrets securely, already spoke about

440
00:29:16,237 --> 00:29:20,157
Kubernetes secrets and, never expose
your secrets in plain text, at least

441
00:29:20,187 --> 00:29:25,327
have a base 64 type of encoding for
your secrets and use HashiCorp Vault.

442
00:29:25,347 --> 00:29:28,087
They will, there's a very super
way of securing your secrets.

443
00:29:28,587 --> 00:29:31,747
also we'll go through some
security best practices.

444
00:29:32,262 --> 00:29:37,012
Always do or perform regular audits on
your infrastructure, perform, audits

445
00:29:37,022 --> 00:29:40,312
of your Kubernetes configuration
and ensure that all the components

446
00:29:40,312 --> 00:29:46,652
are configured securely, do a MFA,
enforce MFA in your projects, in your

447
00:29:46,652 --> 00:29:51,692
organizations, encourage people to
use MFA for, enforce MFA for accessing

448
00:29:51,702 --> 00:29:57,052
critical systems like the Kube, Kube API
to add in regional layer of protection.

449
00:29:57,652 --> 00:29:59,922
Monitoring and alerting
is always important.

450
00:29:59,972 --> 00:30:00,642
We can use.

451
00:30:00,982 --> 00:30:05,202
Leverage tools like Prometheus,
Grafana, Kibana, and integrate

452
00:30:05,202 --> 00:30:09,652
runtime security solutions to detect
any kind of suspicious behavior.

453
00:30:10,022 --> 00:30:14,592
So we can use our Falco rules, integrate
them with, Prometheus and the user,

454
00:30:15,042 --> 00:30:19,132
an engineer on call can get notified
of any, rules getting, if the rules

455
00:30:19,132 --> 00:30:23,172
are getting, break during and we can,
detect vulnerabilities in that case.

456
00:30:23,672 --> 00:30:27,912
Also, again, pointing out, apply the
least privilege principle always,

457
00:30:27,982 --> 00:30:32,832
always give a least privilege to any
users or systems, having, they should

458
00:30:32,832 --> 00:30:37,692
have the minimum access necessary to
perform their basic functions until and

459
00:30:37,692 --> 00:30:39,342
unless they're part of the admin team.

460
00:30:39,962 --> 00:30:43,042
Stay updated, always stay updated
with the security patches.

461
00:30:43,467 --> 00:30:48,977
even the OS level patches and, the
Kubernetes, kernel patches because,

462
00:30:49,037 --> 00:30:53,627
the security patches will make sure
that the vulnerabilities are removed

463
00:30:53,627 --> 00:30:58,217
from the latest security patch and all
the dependencies with the underlying

464
00:30:58,457 --> 00:31:00,997
OS match with those security patches.

465
00:31:01,397 --> 00:31:02,597
really important to focus on.

466
00:31:03,362 --> 00:31:07,582
Then, sharing these additional resources
for you to check on like official

467
00:31:07,582 --> 00:31:11,912
documentation from Kubernetes, some
Falco related docs, some cheat sheets

468
00:31:11,932 --> 00:31:17,762
of Kubernetes, sharing resources about
AppArmor, SecCom, and encrypting the

469
00:31:17,762 --> 00:31:22,772
data at rest, really crucial for,
securing, our, JavaScript applications

470
00:31:22,772 --> 00:31:26,142
running on these, Kubernetes clusters.

471
00:31:26,642 --> 00:31:30,692
also listed some couple of really,
vital books, which helped me gain

472
00:31:31,092 --> 00:31:35,802
knowledge and, apply that, implement
that knowledge, on my projects.

473
00:31:36,302 --> 00:31:39,982
so this is Kubernetes up and
running by Kelsey Hightower,

474
00:31:40,362 --> 00:31:42,362
really, big, fan of this book.

475
00:31:42,812 --> 00:31:43,732
And then this is Node.

476
00:31:43,802 --> 00:31:46,462
js design patterns by, Mario.

477
00:31:46,947 --> 00:31:50,607
This also is a really good book
if you want your expert in Node.

478
00:31:50,607 --> 00:31:55,107
js applications, it can really help you
leverage what kind of, security measures

479
00:31:55,107 --> 00:32:00,087
as well as the scalable measures you can
take for the JavaScript applications.

480
00:32:00,507 --> 00:32:03,267
And then feel free to join these
communities because these are

481
00:32:03,267 --> 00:32:06,567
open source communities like the
Kubernetes community and the Node.

482
00:32:06,577 --> 00:32:09,837
js community as well as the
Kubernetes public slack.

483
00:32:10,272 --> 00:32:15,032
It's really handy to, give you the, what
are the latest developments going on and,

484
00:32:15,402 --> 00:32:19,592
what kind of, people, issues people are
having in their JavaScript applications,

485
00:32:19,832 --> 00:32:23,392
as well as, what kind of issues they're
having in deploying these applications

486
00:32:23,392 --> 00:32:26,142
and running them on Kubernetes, platform.

487
00:32:26,642 --> 00:32:31,322
now I like, I'm almost at the,
conclusion part of my talk.

488
00:32:32,002 --> 00:32:36,252
We have discussed a lot about
security, how we can prevent our

489
00:32:36,392 --> 00:32:40,702
applications, from vulnerabilities,
how we can at least secure our

490
00:32:40,702 --> 00:32:42,892
JavaScript applications running.

491
00:32:42,902 --> 00:32:45,162
And we also went through some examples.

492
00:32:45,632 --> 00:32:48,732
So concluding my talk, I will talk
about, leveraging Kubernetes with

493
00:32:48,732 --> 00:32:53,812
JavaScript empowers developers
to build scalable, resilient, as

494
00:32:53,812 --> 00:32:58,282
well as efficient applications
by embracing containerization.

495
00:32:58,967 --> 00:33:02,517
Automated deployments and robust
orchestration JavaScript applications

496
00:33:02,517 --> 00:33:06,847
can actually meet the demands
of modern dynamic environments.

497
00:33:07,297 --> 00:33:11,777
Whether we are building microservices,
real time applications, or serverless

498
00:33:11,777 --> 00:33:16,997
functions, the synergy between Kubernetes
and JavaScript offers a very powerful

499
00:33:17,327 --> 00:33:19,147
foundation of innovation and growth.

500
00:33:19,607 --> 00:33:23,097
We saw, so much growth is possible
and there's so many options

501
00:33:23,097 --> 00:33:25,017
for these applications to run.

502
00:33:25,517 --> 00:33:29,287
Kubernetes security is not just
about protecting a single cluster.

503
00:33:29,657 --> 00:33:33,167
It's about safeguarding the
critical infrastructure that

504
00:33:33,177 --> 00:33:35,647
businesses and societies depend on.

505
00:33:36,067 --> 00:33:40,847
As the adoption of Kubernetes continues
to rise, securing these clusters becomes

506
00:33:40,887 --> 00:33:43,297
paramount to ensuring trust and security.

507
00:33:43,297 --> 00:33:48,277
Reliability and scalability,
stability in digital systems.

508
00:33:48,777 --> 00:33:51,547
So by this, I'm coming
to the end of my talk.

509
00:33:51,847 --> 00:33:56,157
I hope you guys learned here and you
will take key learnings with you.

510
00:33:56,627 --> 00:33:59,497
it was really a privilege
to speak on this conference.

511
00:33:59,527 --> 00:34:05,067
I just thank all the organizers to giving
me an opportunity to present my thoughts.

512
00:34:05,397 --> 00:34:10,137
And, also thank you all my listeners
who were there to, witness my talk.

513
00:34:10,217 --> 00:34:10,467
I hope.

514
00:34:11,127 --> 00:34:12,187
You really liked it.

515
00:34:12,547 --> 00:34:16,397
And if you have any questions, you
can reach me out to the email, which

516
00:34:16,397 --> 00:34:17,707
is being showed on your screen.

517
00:34:18,207 --> 00:34:22,777
Again, it was, really a wonderful
experience giving this talk and hope to

518
00:34:22,777 --> 00:34:24,617
connect with you guys soon in future.

519
00:34:24,917 --> 00:34:25,817
Thank you so much.

