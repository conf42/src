1
00:00:00,190 --> 00:00:02,150
Hello everyone and welcome to my session.

2
00:00:02,190 --> 00:00:05,870
Today we will talk about Polisys
code and how to use this approach

3
00:00:05,870 --> 00:00:10,290
to build RBAC and OpenPolicyAgent.

4
00:00:11,040 --> 00:00:12,340
Let me introduce myself.

5
00:00:12,370 --> 00:00:16,259
My name is Graziano Casto and I'm a
Developer Relations Engineer at MIA

6
00:00:16,259 --> 00:00:20,520
Platform, an Italian company that,
among other things, is the creator of

7
00:00:20,520 --> 00:00:21,890
the tool we will be discussing today.

8
00:00:22,585 --> 00:00:25,835
Feel free to check out my website
and follow me on LinkedIn.

9
00:00:26,335 --> 00:00:29,875
Before diving in, let's start
with the basics and understand

10
00:00:29,884 --> 00:00:31,604
what we mean by policies.

11
00:00:32,104 --> 00:00:35,184
When we think about policies,
we often immediately associate

12
00:00:35,194 --> 00:00:37,264
them with roles and users.

13
00:00:37,554 --> 00:00:38,514
And this is correct.

14
00:00:38,954 --> 00:00:42,245
A rule that governs a specific
role access to a particular

15
00:00:42,245 --> 00:00:44,904
resource is in fact a policy.

16
00:00:45,694 --> 00:00:50,364
However, even an instruction that
defines the behavior of a system based

17
00:00:50,364 --> 00:00:54,034
on the value of a certain property
can also be considered a policy.

18
00:00:54,364 --> 00:01:00,564
And applying this to real life, even rules
like the age limit for purchasing alcohol

19
00:01:00,594 --> 00:01:03,834
can, in a way, be considered a policy.

20
00:01:04,554 --> 00:01:06,174
In general, a policy is simple.

21
00:01:06,314 --> 00:01:11,254
simply a set of rules that govern the
behavior of a system by describing the

22
00:01:11,254 --> 00:01:13,384
invariance that must hold will in it.

23
00:01:13,794 --> 00:01:17,404
Policies are not necessarily limited
to the world of authorization.

24
00:01:17,724 --> 00:01:23,624
Authorization policies are just a subset
of a broader category and they specify

25
00:01:23,624 --> 00:01:29,919
which users or machine of course are
allowed to perform certain actions or

26
00:01:29,989 --> 00:01:32,459
on specific resource within a system.

27
00:01:32,959 --> 00:01:36,229
The first thing we need to
think about when considering API

28
00:01:36,729 --> 00:01:38,989
authorization is which strategy to use.

29
00:01:39,649 --> 00:01:43,679
There are different strategies to
define the access control on our system.

30
00:01:43,709 --> 00:01:45,779
Let's take a look at a couple of them.

31
00:01:46,279 --> 00:01:48,929
Let's take the example of an
internal developer platform.

32
00:01:48,949 --> 00:01:52,829
In this context, we may have
senior developers who are allowed

33
00:01:52,909 --> 00:01:56,939
to access project configurations,
commit changes and deploy them.

34
00:01:57,439 --> 00:02:02,339
Then we have a group of junior
developers who are allowed to access

35
00:02:02,369 --> 00:02:06,659
the project configurations and
commit changes, but not deploy them.

36
00:02:07,649 --> 00:02:11,259
And finally, we have the platform
administrator with full permissions.

37
00:02:11,759 --> 00:02:15,529
They can do everything senior
developers can do, but in addition,

38
00:02:15,539 --> 00:02:17,679
they can also create new projects.

39
00:02:18,179 --> 00:02:22,459
In this situation, even if we
used a simple example, scaling by

40
00:02:22,479 --> 00:02:27,109
directly assigning each user the
specific set of actions they are

41
00:02:27,109 --> 00:02:29,529
allowed to do becomes really complex.

42
00:02:30,139 --> 00:02:35,129
One way to simplify this process is
by categorizing users into roles.

43
00:02:35,439 --> 00:02:40,199
This way, we only We will only assign
the user to a role and the permission

44
00:02:40,209 --> 00:02:42,659
will be inherited directly from the role.

45
00:02:43,249 --> 00:02:48,789
This means that whenever we need to add
a new user to the platform, for example,

46
00:02:48,789 --> 00:02:51,729
we just need to identify its role.

47
00:02:52,189 --> 00:02:57,929
And if we need to add the new features
that require new permissions, the

48
00:02:57,929 --> 00:03:04,139
only thing we need is to assign this
permission to the roles that require it.

49
00:03:04,149 --> 00:03:08,709
In this way, all the users associated with
that role will inherit the permission.

50
00:03:09,209 --> 00:03:14,919
This strategy is known as Role Based
Access Control, RBAC, and it is useful

51
00:03:14,959 --> 00:03:20,549
for abstracting out the complexity of
assigning permission to users by using

52
00:03:20,569 --> 00:03:22,479
an intermediate level of assignment.

53
00:03:22,979 --> 00:03:26,669
Another popular strategy is called
Attribute Based Access Control,

54
00:03:26,969 --> 00:03:31,299
ABAC, which focuses on the use
of attributes instead of roles.

55
00:03:31,349 --> 00:03:37,099
In this access management strategy,
each user is directly assigned to

56
00:03:37,289 --> 00:03:41,484
attributes, which are used to determine
whether the specific user's methods

57
00:03:41,485 --> 00:03:47,754
certain conditions for accessing a
resource or performing an action.

58
00:03:48,254 --> 00:03:51,844
Both strategies have their pros and cons.

59
00:03:52,294 --> 00:03:58,634
On one hand, the airbag strategy is
certainly simple, but compared to an

60
00:03:58,634 --> 00:04:01,204
ABAC approach, it lacks of granularity.

61
00:04:01,554 --> 00:04:05,144
On the other hand, using
attributes allow for more granular

62
00:04:05,145 --> 00:04:06,389
definition of access points.

63
00:04:06,969 --> 00:04:11,759
specific access, but implementing
such a strategies requires more

64
00:04:11,799 --> 00:04:16,119
time and expertise to define
correctly the attributes you need.

65
00:04:16,619 --> 00:04:21,189
The ideal solution could be to use
a hybrid approach, using roles for

66
00:04:21,189 --> 00:04:25,139
a high level access control and then
using attributes for more granular

67
00:04:25,429 --> 00:04:27,339
management of access to specific access.

68
00:04:27,839 --> 00:04:31,709
Let's look at some example
of this hybrid strategy.

69
00:04:32,039 --> 00:04:36,399
Suppose our users have roles
and corresponding permissions as

70
00:04:36,399 --> 00:04:37,959
described in the previous example.

71
00:04:38,379 --> 00:04:42,709
And we have also assigned them attributes
like the environments, which describe

72
00:04:42,719 --> 00:04:47,549
the environments they are allowed to
work on, and the project, which is

73
00:04:47,559 --> 00:04:50,459
the list of projects they work on.

74
00:04:50,959 --> 00:04:54,439
In this case, a senior developer
having the permission to deploy

75
00:04:54,549 --> 00:04:59,549
as part of their role will be able
to deploy to any environment for

76
00:04:59,549 --> 00:05:01,289
the project they are assigned to.

77
00:05:01,789 --> 00:05:06,059
On the other hand, the same
senior developer will not be able

78
00:05:06,059 --> 00:05:09,579
to deploy anything to projects
they are not assigned to.

79
00:05:09,849 --> 00:05:15,159
In other words, even If they inherit the
deploy permission from their role, if

80
00:05:15,169 --> 00:05:19,429
they don't have the project attribute
associated, they will not be able to

81
00:05:19,429 --> 00:05:21,779
deploy any changes to that project.

82
00:05:22,279 --> 00:05:25,019
Now let's analyze the case
of a junior developer.

83
00:05:25,399 --> 00:05:28,949
They don't have the permission to
deploy, so it doesn't matter which

84
00:05:28,969 --> 00:05:30,569
projects they are assigned to.

85
00:05:31,069 --> 00:05:34,229
They will not be able to deploy
any changes to those projects.

86
00:05:34,729 --> 00:05:40,229
In this case, if we want to give a
specific junior developer the ability

87
00:05:40,229 --> 00:05:46,269
to deploy changes, but only to the dev
environment, for example, for the project

88
00:05:46,289 --> 00:05:52,049
they are assigned to, a poorly error back
approach wouldn't allow us to do that.

89
00:05:52,579 --> 00:05:56,419
However, with this hybrid
approach, we can assign the

90
00:05:56,469 --> 00:05:58,439
environment attribute to the user.

91
00:05:59,349 --> 00:06:03,449
Even if the junior developer doesn't
have the deploy permission in their

92
00:06:03,449 --> 00:06:08,659
role, by assigning them the development
environment attribute, we can make an

93
00:06:08,659 --> 00:06:13,669
exception that allows them to deploy
only the development environment for

94
00:06:13,689 --> 00:06:15,359
the projects they are assigned to.

95
00:06:16,059 --> 00:06:21,649
This provides a more flexible and granular
way to manage access to specific, specific

96
00:06:21,689 --> 00:06:27,249
assets like the environment and the
projects now that we know the strategies

97
00:06:27,249 --> 00:06:32,869
available to us and all that's left
to figure out how to implement them.

98
00:06:33,369 --> 00:06:37,869
The old approach of keeping everything
inside the code base works well and

99
00:06:37,879 --> 00:06:40,019
that's why it is always being used.

100
00:06:40,519 --> 00:06:44,629
This approach involves having the
code responsible for enforcing the

101
00:06:44,709 --> 00:06:49,249
authorization policy co exist within
the same code base and the same

102
00:06:49,249 --> 00:06:51,289
code base as the business logic.

103
00:06:51,789 --> 00:06:54,859
Handling authorization this
way has its pros and cons.

104
00:06:54,919 --> 00:06:58,779
On one hand, it's convenient
because it is the simplest and

105
00:06:58,789 --> 00:06:59,909
quickest solution to start with.

106
00:06:59,969 --> 00:07:01,939
Start developing our system.

107
00:07:02,289 --> 00:07:07,796
On the other end, it exposes to several
problems such as the repetition, for

108
00:07:07,796 --> 00:07:13,509
example, if the same policies need to
be used in other services, especially

109
00:07:13,509 --> 00:07:18,159
in a distributed application, it
has to be repeated and this lead

110
00:07:18,279 --> 00:07:22,469
to difficult code maintainability
in the larger scale application.

111
00:07:23,279 --> 00:07:26,619
A better way to manage our
policies is to decouple them from

112
00:07:26,619 --> 00:07:29,759
the code base that contain the
business logic of our services.

113
00:07:30,564 --> 00:07:34,254
The way to do this is by adopting
a policies code approach.

114
00:07:34,314 --> 00:07:38,854
this is involved, this involves,
extracting the policies definition code

115
00:07:38,854 --> 00:07:43,834
into a separate repository from our
application code and using an agent that

116
00:07:43,854 --> 00:07:49,704
sits between our APIs and the users to
handle the enforcement of these policies.

117
00:07:50,204 --> 00:07:55,194
The tool that allow us to do this is
Open Policy Agent, OPA, an open source

118
00:07:55,194 --> 00:07:59,624
tool graduated by the Cloud Native
Computing Foundation, the CNCF, and

119
00:07:59,664 --> 00:08:04,214
it provides an high level language
called RIGO for defining policies

120
00:08:04,234 --> 00:08:06,124
and an agent for the enforcement.

121
00:08:06,624 --> 00:08:10,264
What you are seeing on the screen
right now is a snippet of a simple

122
00:08:10,264 --> 00:08:15,494
regopolicy that only authorizes post
requests on the slash order route,

123
00:08:16,104 --> 00:08:20,424
where the value of the store property
inside the body matches the store

124
00:08:20,424 --> 00:08:22,424
assigned to the user making the request.

125
00:08:22,924 --> 00:08:27,294
Returning to the previous example and
implementing it to using Rigo for policies

126
00:08:27,294 --> 00:08:32,964
definition, what we would have is that
all the code in our code base responsible

127
00:08:33,004 --> 00:08:38,744
for enforcing policies is managed through
Rigo code, outside our code base, okay?

128
00:08:39,544 --> 00:08:43,844
This way the policy enforcement
logic is decoupled from the business

129
00:08:43,844 --> 00:08:48,334
logic of our services and managed
independently, making the system

130
00:08:48,344 --> 00:08:50,624
easier to maintain and more flexible.

131
00:08:51,124 --> 00:08:55,984
By analyzing the Rego policy code,
we have these two allows blocks,

132
00:08:56,034 --> 00:08:59,159
which are the actual entry point
for the authorization logic.

133
00:08:59,159 --> 00:09:05,017
With each request, if one of
these two blocks returns true,

134
00:09:05,017 --> 00:09:07,644
then the request is authorized.

135
00:09:08,144 --> 00:09:13,054
These blocks use functions defined
above to evaluate, for example, the

136
00:09:13,084 --> 00:09:15,014
role of the user making the request.

137
00:09:15,174 --> 00:09:20,114
To retrieve the user's role,
the JWT token is decoded.

138
00:09:20,719 --> 00:09:24,679
Which is retrieved from the
editor of the request itself.

139
00:09:25,649 --> 00:09:30,319
This approach does indeed add
a first level of decoupling of

140
00:09:30,319 --> 00:09:34,159
decoupling, of the policies from
our code base, of our code base.

141
00:09:34,399 --> 00:09:39,599
However, the problem is that hope
can be deployed as arrest service,

142
00:09:40,019 --> 00:09:41,700
which means that our application with.

143
00:09:41,979 --> 00:09:46,379
We still need to communicate with
the services, with the service, and

144
00:09:46,389 --> 00:09:51,329
therefore a minimal level of coupling
remains in our application doing so.

145
00:09:51,829 --> 00:09:55,129
So we want more, we want to
do better, to do it better.

146
00:09:55,129 --> 00:10:00,859
And to further the couple, the policy
from our code base, what we can do is

147
00:10:01,069 --> 00:10:07,279
using R Round is an open source project,
is a lightweight side car container for

148
00:10:07,339 --> 00:10:12,199
API protection that used OPA and Rigo
for authorization policy validation.

149
00:10:13,104 --> 00:10:20,484
natively allows building airbag
solutions by defining the concept

150
00:10:20,494 --> 00:10:24,864
like roles, permissions, user groups
as binding blocks inside the project.

151
00:10:25,824 --> 00:10:30,574
For its configuration, ROND uses open
policy, open API compliant files.

152
00:10:31,074 --> 00:10:35,924
Therefore, to add RON to our project,
all we need to do is modify these

153
00:10:35,934 --> 00:10:41,164
files to add the XRON property to
the routes that we want to protect.

154
00:10:41,794 --> 00:10:47,054
Inside this property, we will declare the
name of the regopolicies that we intend

155
00:10:47,074 --> 00:10:49,374
to use to protect the specific route.

156
00:10:49,564 --> 00:10:52,924
We just need to do In addition
to protecting routes with

157
00:10:53,574 --> 00:10:58,464
authentication rules, ROND offers
two other powerful features.

158
00:10:58,994 --> 00:11:04,229
The first one is query generation,
which allows us to filter the results.

159
00:11:04,369 --> 00:11:08,189
response of our APIs before
returning it to the client.

160
00:11:08,569 --> 00:11:14,429
In this case, we can define a policy
that will be executed before returning

161
00:11:14,439 --> 00:11:19,149
the result to the client, allowing
us to filter the response dataset

162
00:11:19,149 --> 00:11:21,349
we will return to the client itself.

163
00:11:21,849 --> 00:11:26,579
The second feature is the ability
to define a policy that modify

164
00:11:26,609 --> 00:11:31,079
the structure, the response schema
before returning it to the client.

165
00:11:31,394 --> 00:11:35,104
In this case, let's suppose, I
don't know, we have the response

166
00:11:35,104 --> 00:11:39,484
payload for our request to fetch
the customers of our application.

167
00:11:40,044 --> 00:11:45,544
Using the same endpoint, for example,
the get slash users, we can use run to

168
00:11:45,544 --> 00:11:53,204
ensure that, Power users, so the user
with more privileges, can access the full

169
00:11:53,204 --> 00:12:00,294
payload, while users with fewer privileges
receive just a filtered payload, without,

170
00:12:00,304 --> 00:12:02,204
for example, sensitive information.

171
00:12:02,704 --> 00:12:04,954
Now, we get to the point.

172
00:12:04,964 --> 00:12:11,384
Let's start, let's talk about
why ROND was created and how

173
00:12:11,404 --> 00:12:13,324
it is used at large scales.

174
00:12:13,824 --> 00:12:21,274
At MIA Platform, we created ROND to manage
the entire authorization flow of our EDP.

175
00:12:21,774 --> 00:12:26,494
And it is also provided as an
authorization mechanism for the

176
00:12:26,504 --> 00:12:29,484
workloads managed by our platform.

177
00:12:30,069 --> 00:12:31,219
From our clients.

178
00:12:31,719 --> 00:12:38,339
For the ADP alone, ROND is currently
running on more than 30 microservices,

179
00:12:38,369 --> 00:12:46,409
managing over 5, 000 policies
across more than 300, 300 routes.

180
00:12:46,489 --> 00:12:51,744
ROND is a project designed to be
integrated into existing distributed

181
00:12:51,914 --> 00:12:57,864
application without the need to modify
the existing services thanks to the use

182
00:12:57,864 --> 00:13:02,734
of the sidecar pattern and the open ABI
specification compliant configurations.

183
00:13:03,144 --> 00:13:08,424
This design make it easy to integrate
into existing system by design.

184
00:13:08,424 --> 00:13:14,694
ROND also exposes various metrics to
track the usage of policies, such as the

185
00:13:14,694 --> 00:13:19,114
number of time each policy is used and
the average evaluation time from them.

186
00:13:19,639 --> 00:13:25,639
additionally it provides metrics to
monitor the resource usage of the

187
00:13:25,639 --> 00:13:30,049
sidecar container, including resource
utilization at the container level.

188
00:13:30,549 --> 00:13:34,049
We have reached the end of the
presentation and thank you for following

189
00:13:34,049 --> 00:13:39,059
me this far and I invite you to connect
with me on LinkedIn and start using Roam.

190
00:13:39,179 --> 00:13:41,139
Thank you all and see you next time.

