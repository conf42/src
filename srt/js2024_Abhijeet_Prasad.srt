1
00:00:00,780 --> 00:00:05,270
Hey everyone, my name is Abhijit, I'm a
software engineer at Sentry, and welcome

2
00:00:05,270 --> 00:00:09,220
to my talk, Supercharged Production
Stack Traces with Local Variables.

3
00:00:09,720 --> 00:00:12,420
So a little bit about myself, I'm Abhijit.

4
00:00:12,530 --> 00:00:16,290
I currently work at Sentry,
and I help maintain Sentry's

5
00:00:16,320 --> 00:00:18,779
open source JavaScript SDKs.

6
00:00:19,279 --> 00:00:23,979
Sentry as a product helps you monitor
your applications in production, take

7
00:00:23,979 --> 00:00:27,099
a look at the errors and performance
data that's happening, so you can

8
00:00:27,139 --> 00:00:29,569
understand and fix problems faster.

9
00:00:30,069 --> 00:00:33,999
One thing we've learned at Sentry
is that stack traces are really

10
00:00:33,999 --> 00:00:38,739
important to understand how and when
errors happen to help debug them.

11
00:00:39,160 --> 00:00:42,079
You know this locally, and
they're even more important in

12
00:00:42,079 --> 00:00:45,709
production if your server goes
down or your site doesn't work.

13
00:00:46,209 --> 00:00:49,059
At Sentry, we try to make it
as easy as possible to view

14
00:00:49,079 --> 00:00:50,649
your production stack traces.

15
00:00:50,869 --> 00:00:55,239
And so you can see that when an
error happens on a site, or on a

16
00:00:55,239 --> 00:00:59,999
server somewhere, it gets thrown,
Sentry, the Sentry SDK will capture

17
00:00:59,999 --> 00:01:04,719
it, and then surface it to you, real
time, with the exact stack trace.

18
00:01:04,739 --> 00:01:07,969
So you can see the exact line of
code that's causing your issue.

19
00:01:08,469 --> 00:01:10,889
But, the stack trace
sometimes is an issue.

20
00:01:11,369 --> 00:01:14,569
enough in terms of what it gives you.

21
00:01:15,139 --> 00:01:17,999
There's still a vital piece
of debugging context missing.

22
00:01:18,499 --> 00:01:23,759
That debugging context is what
exactly the arguments or state was

23
00:01:23,789 --> 00:01:25,609
at the time the exception happened.

24
00:01:26,379 --> 00:01:30,349
not just looking at the kind of frames
and what your code was doing, but

25
00:01:31,149 --> 00:01:37,569
what variables or classes were being
instantiated at the time of your error.

26
00:01:38,979 --> 00:01:41,769
there's a solution for this, and a
lot of debuggers give this to you.

27
00:01:42,059 --> 00:01:46,789
It's to allow you to see the local
variables, or the variable state

28
00:01:46,899 --> 00:01:51,099
at the time of when a debugger is
paused or when an error is thrown.

29
00:01:51,549 --> 00:01:55,529
So here is an example, I just attached
a debugger to a really simple Node.

30
00:01:55,539 --> 00:02:00,659
js program, and it gives me the state
of the variables that were defined

31
00:02:01,129 --> 00:02:02,609
at when I paused the debugger.

32
00:02:03,109 --> 00:02:06,189
We can actually grab this
local variable state when an

33
00:02:06,219 --> 00:02:08,159
error is thrown, and attach it.

34
00:02:08,719 --> 00:02:11,989
Alongside the stack frame, so
you can see this in production.

35
00:02:12,549 --> 00:02:17,649
And we support this in Sentry for
languages like Python, PHP, and Ruby.

36
00:02:18,149 --> 00:02:21,919
But, for the longest time, we never
really supported this in Node.

37
00:02:21,939 --> 00:02:22,629
js.

38
00:02:22,909 --> 00:02:26,199
Because there was no built
in method to grab this data.

39
00:02:26,229 --> 00:02:31,839
There's no API for this, exposed by the
Node or JavaScript standard libraries.

40
00:02:32,339 --> 00:02:34,939
And this is really important.

41
00:02:34,969 --> 00:02:36,789
a lot of people kept asking for this.

42
00:02:36,859 --> 00:02:39,959
It's very useful to debug
an error in production.

43
00:02:39,959 --> 00:02:43,309
If you know exactly what the
variables were defined as.

44
00:02:43,704 --> 00:02:48,954
But we always kept saying, hey, no,
we can't do it, because it's just

45
00:02:48,954 --> 00:02:50,534
not part of the standard library.

46
00:02:50,534 --> 00:02:53,244
It's not possible within
the JavaScript runtime.

47
00:02:53,744 --> 00:03:00,774
But, a little while ago last year, we
learned that it is actually possible.

48
00:03:01,424 --> 00:03:04,764
We can leverage the same
strategy debuggers use.

49
00:03:05,264 --> 00:03:07,194
and take advantage of the Node.

50
00:03:07,204 --> 00:03:09,424
js inspector standard library.

51
00:03:10,294 --> 00:03:16,414
And so the V8 inspector is built
on top of the kind of, Chrome V8,

52
00:03:16,644 --> 00:03:21,614
debugger, and allows you to access
a lot of information about the Node.

53
00:03:21,614 --> 00:03:25,874
js process, and manipulate
it in ways to get this local

54
00:03:25,874 --> 00:03:27,424
variable information for you.

55
00:03:27,924 --> 00:03:32,184
So it turns out, via this inspector
standard library, with a little bit

56
00:03:32,184 --> 00:03:36,819
of work and massaging the data, you We
can use it in production to grab local

57
00:03:36,819 --> 00:03:38,399
variables and attach them to Node.

58
00:03:38,399 --> 00:03:39,579
js stack traces.

59
00:03:40,129 --> 00:03:42,499
let's walk through some code
to see how this would work.

60
00:03:42,999 --> 00:03:49,949
here, at the start, we can, instantiate
and start, the inspector and open it.

61
00:03:50,499 --> 00:03:53,729
this will start an inspector
process, essentially a debugger

62
00:03:53,729 --> 00:03:55,889
process attached to, your main Node.

63
00:03:55,889 --> 00:03:56,719
js process.

64
00:03:57,219 --> 00:04:01,874
And In order to grab local variables
from the inspector and attach

65
00:04:01,874 --> 00:04:06,504
it to stack traces that then we
send to Sentry for processing, we

66
00:04:06,504 --> 00:04:07,844
need some kind of worker thread.

67
00:04:07,944 --> 00:04:13,234
So here we can spin up a worker,
that really its job is to look

68
00:04:13,234 --> 00:04:17,921
at the inspector, grab the local
variables and put it on, and give

69
00:04:17,921 --> 00:04:20,304
it to the main thread so that it
can be attached to stack traces.

70
00:04:20,804 --> 00:04:25,364
so here is the debugger,
that's being instantiated.

71
00:04:25,714 --> 00:04:30,424
in this debugger, we listen on a
couple of events, which are exposed

72
00:04:30,424 --> 00:04:32,264
from the inspector standard library.

73
00:04:33,054 --> 00:04:38,254
most notably, whenever an
exception is thrown, it varies

74
00:04:38,254 --> 00:04:44,204
if it's caught or uncaught, we
pause the debugger and handle it.

75
00:04:44,434 --> 00:04:49,424
So essentially what we're doing is, When
an error is thrown in your main Node.

76
00:04:49,424 --> 00:04:55,574
js process, we pause it, grab the
application state, the local variables,

77
00:04:55,994 --> 00:04:59,364
attach it somewhere, and then resume it.

78
00:04:59,974 --> 00:05:03,324
And, although it can be weird, you're
actually pausing the process, it's

79
00:05:03,334 --> 00:05:05,974
actually not that expensive to do this.

80
00:05:06,524 --> 00:05:08,494
here's what happens when
we're actually pausing.

81
00:05:08,534 --> 00:05:13,434
So an error is thrown, the debugger,
via the inspector, pauses the main

82
00:05:13,434 --> 00:05:16,804
process, We, and this is simplified.

83
00:05:16,804 --> 00:05:19,754
There's a lot of edge cases that
you normally have to deal with.

84
00:05:19,784 --> 00:05:24,304
But what we're doing here is,
going through making sure that,

85
00:05:24,564 --> 00:05:26,624
it's a valid error reason.

86
00:05:26,964 --> 00:05:30,634
And then we take a look at the
frames of a stack trace in an error.

87
00:05:31,134 --> 00:05:35,514
Kind of grabbing all of the local
variables for each frame and then

88
00:05:35,514 --> 00:05:37,654
attaching it to that associated frame.

89
00:05:38,624 --> 00:05:42,154
This is actually super powerful because it
means we can access the local variables.

90
00:05:42,154 --> 00:05:47,599
Not just of the topmost frame in
the error, but all of the frames

91
00:05:47,599 --> 00:05:49,149
wherever they're applicable.

92
00:05:49,649 --> 00:05:56,309
We then can use this inspector API
to essentially call a fake function

93
00:05:56,589 --> 00:06:01,119
that will assign these frames and
their associated local variables to

94
00:06:01,119 --> 00:06:05,819
a global variable that then the main
process can then use later on when it's

95
00:06:05,819 --> 00:06:07,539
actually sending an error to Sentry.

96
00:06:08,039 --> 00:06:10,539
we have to make sure we release
the object, otherwise, there

97
00:06:10,539 --> 00:06:12,209
would be memory allocation issues.

98
00:06:12,709 --> 00:06:15,579
what does getLocalVariables exactly do?

99
00:06:16,079 --> 00:06:19,219
It essentially uses, this runtime.

100
00:06:19,269 --> 00:06:27,919
getProperties method to be able to get the
local variables via the inspector, we then

101
00:06:27,929 --> 00:06:29,609
have to massage the data a little bit.

102
00:06:29,619 --> 00:06:35,559
So to make sure that we deal with
objects or arrays or similar, but really

103
00:06:35,559 --> 00:06:39,059
we're relying mostly on the inspector
to do the heavy lifting for us here.

104
00:06:39,559 --> 00:06:45,939
So after we've written the local variables
to an object and then the process resumes,

105
00:06:46,389 --> 00:06:48,639
the error is captured by the sentry SDK.

106
00:06:48,639 --> 00:06:48,989
Okay.

107
00:06:49,444 --> 00:06:52,814
and then transformed into an error
event that can be sent to Sentry.

108
00:06:53,544 --> 00:06:59,694
what Sentry then does is it can look up
on the error in this global here, and

109
00:06:59,694 --> 00:07:05,214
see, oh, were there local variables,
and if they were, attach them to the

110
00:07:05,244 --> 00:07:07,064
outgoing error event accordingly.

111
00:07:07,564 --> 00:07:11,674
And, This all seems pretty complicated
because you have to instantiate

112
00:07:11,674 --> 00:07:14,874
a worker, start the inspector,
set up all these processes.

113
00:07:15,324 --> 00:07:19,694
But to a user who wants to start
using this today in Sentry for Node.

114
00:07:19,694 --> 00:07:24,214
js, they simply just have to add
include local variables true to their

115
00:07:24,214 --> 00:07:26,364
initialization and this all works for you.

116
00:07:26,864 --> 00:07:28,404
And here's what this would look like.

117
00:07:28,404 --> 00:07:29,664
So this is an example.

118
00:07:29,979 --> 00:07:34,319
Express app where I just threw a bunch
of, I just threw an error with a bunch

119
00:07:34,319 --> 00:07:38,939
of local variables in scope, and you can
see them directly attached to the event.

120
00:07:39,549 --> 00:07:44,869
Super powerful because now you know
exactly what lines of code, plus what the

121
00:07:44,869 --> 00:07:49,199
variable state was when an error happened,
so you can debug things even faster.

122
00:07:49,699 --> 00:07:53,059
while we were implementing this, there
were a lot of challenges to work through.

123
00:07:53,869 --> 00:07:56,309
we had problems with worker overhead.

124
00:07:56,599 --> 00:07:59,659
Of course, we were instantiating
a new worker process and we were

125
00:07:59,659 --> 00:08:01,809
instantiating this inspector instance.

126
00:08:02,189 --> 00:08:06,379
So we really had to make sure that the,
memory and CPU levels were manageable.

127
00:08:07,099 --> 00:08:12,454
as we were, Writing things into
the main process and pausing stuff.

128
00:08:12,454 --> 00:08:14,314
We also had to deal with memory pressure.

129
00:08:14,864 --> 00:08:17,324
unhandled exceptions was
also something to deal with.

130
00:08:17,324 --> 00:08:21,524
There's different kind of behavior
for pausing the debugger between

131
00:08:21,524 --> 00:08:23,864
handled versus unhandled exceptions.

132
00:08:23,984 --> 00:08:25,114
So calling new.

133
00:08:25,759 --> 00:08:30,429
error and explicitly handling that
versus, throwing an error and letting it

134
00:08:30,429 --> 00:08:32,869
bubble up to the global error handlers.

135
00:08:33,379 --> 00:08:37,059
ESM versus CJS actually is still a
problem that we're struggling with.

136
00:08:37,089 --> 00:08:40,849
They have, both have different
behaviors and there's actually an

137
00:08:40,879 --> 00:08:46,999
active bug in ESM where, this doesn't
work or local variable support doesn't

138
00:08:47,009 --> 00:08:48,659
work perfectly because of a Node.

139
00:08:48,669 --> 00:08:49,389
js bug.

140
00:08:49,889 --> 00:08:54,549
Currently, the local variables, setup
does not support minified variables.

141
00:08:54,549 --> 00:08:57,959
So if you have some kind of build
process, like transforming from

142
00:08:57,959 --> 00:09:01,679
TypeScript to JavaScript, and then you
also minify, let's say because you're

143
00:09:01,679 --> 00:09:03,149
deploying to a Lambda or something.

144
00:09:03,649 --> 00:09:08,669
currently we don't support this,
but the SourceMap spec is taking

145
00:09:08,669 --> 00:09:13,134
a look at how they can adopt
Minified variables and minified

146
00:09:13,144 --> 00:09:15,664
local state and source mapping that.

147
00:09:15,764 --> 00:09:19,994
And so whenever that, is introduced
into the source map spec, we

148
00:09:19,994 --> 00:09:20,964
can take advantage of that.

149
00:09:21,464 --> 00:09:26,604
If you are using this strategy, local
variables, it obviously will, it's

150
00:09:26,604 --> 00:09:28,684
using a debugger inspector instance.

151
00:09:28,894 --> 00:09:32,844
So if you try to use your own to
debug process, it doesn't work.

152
00:09:32,844 --> 00:09:34,004
So you have to use one or the other.

153
00:09:34,504 --> 00:09:38,844
And, unfortunately, because we're
relying on this V8 inspector

154
00:09:38,954 --> 00:09:42,254
and the Node standard library,
Currently, this only works for Node.

155
00:09:42,264 --> 00:09:46,774
js, so if you wanted similar support
in the browser or for runtimes like

156
00:09:46,794 --> 00:09:51,114
Bunn or Deno, it doesn't work, but
we're always open for ideas to see if

157
00:09:51,114 --> 00:09:52,634
we can make that work for those other.

158
00:09:52,654 --> 00:09:55,094
JavaScript runtimes and that's it.

159
00:09:55,104 --> 00:09:59,114
Thank you so much for listening
in on how local variables

160
00:09:59,354 --> 00:10:03,244
really help with debugging, your
production, JavaScript stack traces.

161
00:10:03,864 --> 00:10:07,744
Hopefully you learned a little, if
you want to see the example code that

162
00:10:07,744 --> 00:10:09,774
was shown off and how this is written.

163
00:10:10,274 --> 00:10:12,774
There's a ton of edge cases,
again, that we have to think about.

164
00:10:13,284 --> 00:10:16,884
this is all available in our
open source JavaScript SDKs,

165
00:10:16,954 --> 00:10:18,014
linked at the very bottom.

166
00:10:18,914 --> 00:10:22,434
I have some links that you can reach
out to me, if you have any questions.

167
00:10:23,084 --> 00:10:26,554
Otherwise, if you're interested in trying
out Sentry and seeing how these local

168
00:10:26,554 --> 00:10:33,174
variables work, you can scan that QR code
and use the code below to get started.

169
00:10:33,674 --> 00:10:34,064
Thank you.

