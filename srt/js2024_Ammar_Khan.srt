1
00:00:00,390 --> 00:00:05,750
Hi, my name is Amar and today I will talk
about the modern infrastructure security

2
00:00:06,370 --> 00:00:08,790
that is zero trust container security.

3
00:00:08,850 --> 00:00:14,209
We will dive into how it works,
why it's needed, and practical

4
00:00:14,310 --> 00:00:16,699
steps you can take to implement it.

5
00:00:16,840 --> 00:00:21,015
But before we get started, I would
like to talk about a little bit

6
00:00:21,044 --> 00:00:23,805
about our, company and, myself.

7
00:00:24,305 --> 00:00:29,054
We are Oxygen Security based in Maryland
and we have been around since 2018

8
00:00:29,394 --> 00:00:34,545
and we have been able to help over
50 different customers to build out

9
00:00:34,844 --> 00:00:40,115
their digital transformation journey
from on prem to hybrid to multi cloud.

10
00:00:40,615 --> 00:00:45,115
We have been able to help them
integrate DevOps including, test

11
00:00:45,125 --> 00:00:50,454
and interactive testing and security
validations of the networks.

12
00:00:50,954 --> 00:00:55,824
I am a cloud and DevOps engineer
working across major cloud

13
00:00:55,904 --> 00:00:59,644
platforms like AWS, Azure and GCP.

14
00:01:00,144 --> 00:01:04,334
I specialize in crowd security
assessments, cost optimization, and

15
00:01:04,334 --> 00:01:09,024
microservices orchestration with a
focus on automating DevSecOps process.

16
00:01:09,794 --> 00:01:14,394
Currently, I work as a senior DevOps
engineer at Oxygen Security, where

17
00:01:14,424 --> 00:01:18,394
I design and implement secure,
scalable cloud infrastructure

18
00:01:18,904 --> 00:01:21,254
and streamlined CI CD workflows.

19
00:01:21,754 --> 00:01:24,104
So what we'll be discussing today,
we will explain how DevSecOps works.

20
00:01:25,034 --> 00:01:29,774
for containers, how to apply zero trust
principles to containers, integrate

21
00:01:29,844 --> 00:01:34,644
it into development life cycle, and
see the practical examples of how

22
00:01:34,644 --> 00:01:37,774
it works in real world scenarios.

23
00:01:38,274 --> 00:01:40,474
Let's dive into the zero trust.

24
00:01:40,554 --> 00:01:46,564
Zero trust is a strategic approach that
eliminates implicit trust in your systems.

25
00:01:47,275 --> 00:01:51,715
in the traditional security model,
we used to assume, we assume to, we

26
00:01:51,715 --> 00:01:55,544
assume that everything inside the
corporate network could be trusted by

27
00:01:55,544 --> 00:02:00,864
default, but, this model is outdated
given today's cyber security threats.

28
00:02:00,904 --> 00:02:05,274
Instead, zero trust is based on the
principle that trust should ne should

29
00:02:05,284 --> 00:02:06,774
never be guaranteed by default.

30
00:02:07,274 --> 00:02:11,754
if you look at the second point,
trust is neither binary nor permanent.

31
00:02:12,254 --> 00:02:15,844
This means trust is not something
you give once and forget about.

32
00:02:16,344 --> 00:02:19,265
it must be continuously earned
and verified, which is the

33
00:02:19,315 --> 00:02:20,785
essence of the zero trust.

34
00:02:20,795 --> 00:02:24,375
Now you may ask where we
can apply the zero trust.

35
00:02:24,910 --> 00:02:26,600
the answer is almost anywhere.

36
00:02:27,100 --> 00:02:30,340
It's applicable to nearly all
organizational functions, from

37
00:02:30,350 --> 00:02:34,530
securing cloud workloads to container
environments, and even endpoints

38
00:02:35,200 --> 00:02:37,330
like laptops and mobile devices.

39
00:02:37,830 --> 00:02:41,000
The Zero Trust process can be
broken down into four steps.

40
00:02:41,100 --> 00:02:44,560
Establish trust by
enforcing authentication

41
00:02:44,600 --> 00:02:46,180
and authorization mechanism.

42
00:02:46,800 --> 00:02:50,070
Enforce security policies
across your environment.

43
00:02:50,140 --> 00:02:55,670
Continuously verify, continuously
verify by, by the constantly checking

44
00:02:55,690 --> 00:02:57,660
if trust should still be maintained.

45
00:02:58,290 --> 00:03:03,140
Respond to threats in real time using
automated incident response mechanism.

46
00:03:03,640 --> 00:03:07,960
Zero trust, in, container security
means that we don't automatically

47
00:03:08,010 --> 00:03:12,600
trust any part of the system, whether
inside or outside the network.

48
00:03:13,080 --> 00:03:18,700
Everything must be continuously verified
to ensure the security containers face

49
00:03:18,710 --> 00:03:23,960
several challenges just like underlying
host system which means if the system is

50
00:03:23,980 --> 00:03:27,440
compromised the containers are at risk.

51
00:03:27,940 --> 00:03:33,050
Another issue is securing the container
registry as the images used to create

52
00:03:33,080 --> 00:03:35,080
containers may have vulnerabilities.

53
00:03:35,500 --> 00:03:38,430
Additionally containers can
be attacked while running if

54
00:03:38,430 --> 00:03:39,720
they are not well protected.

55
00:03:39,940 --> 00:03:40,080
it.

56
00:03:40,450 --> 00:03:45,230
And using third party container
images could introduce security flaws.

57
00:03:45,660 --> 00:03:49,430
This is why security zero trust
is crucial for containers.

58
00:03:49,490 --> 00:03:54,780
It allow for, fine grained access control,
ensuring that, the authorized users.

59
00:03:55,280 --> 00:04:00,050
that only, the authorized users,
only, only the authorized users,

60
00:04:00,050 --> 00:04:04,830
authorized users or the systems,
can access the, containers.

61
00:04:04,880 --> 00:04:09,940
It also enforces the principles of
least privileges, least privileges,

62
00:04:09,990 --> 00:04:15,040
it means, It means that enforces
the principles of lease privileges,

63
00:04:15,060 --> 00:04:19,570
meaning that, the containers are given
only the permission they have needed,

64
00:04:20,080 --> 00:04:24,710
zero trust prevents attackers from
moving between containers, monitoring

65
00:04:24,720 --> 00:04:32,090
activities in real time, and helps with
security standards like SOC 2 and GDPR.

66
00:04:32,120 --> 00:04:36,370
The process involves establishing
trust, through authentication and.

67
00:04:36,450 --> 00:04:41,610
Forcing it by protecting data, regularly
verifying container activities, and

68
00:04:41,620 --> 00:04:45,040
being ready to respond to any threats in

69
00:04:45,540 --> 00:04:47,270
let's move to the new slide.

70
00:04:47,870 --> 00:04:50,570
in this, today's world,
everything is everywhere.

71
00:04:50,690 --> 00:04:55,930
We are no longer in an era where we
are applications or services are neatly

72
00:04:55,970 --> 00:04:58,610
contained within a single data center.

73
00:04:58,825 --> 00:05:00,875
Modern architectures are distributed.

74
00:05:00,895 --> 00:05:05,125
We have microservices, cloud native
applications, and geographically

75
00:05:05,125 --> 00:05:06,405
distributed deployments.

76
00:05:06,965 --> 00:05:12,525
All of these factors add complexity and
increase the, and increase the attack

77
00:05:12,525 --> 00:05:14,865
surface, making security more challenging.

78
00:05:15,435 --> 00:05:18,075
Additionally, the workforce has changed.

79
00:05:18,105 --> 00:05:22,695
Remote teams are now the norms, and
employees are working from home,

80
00:05:22,715 --> 00:05:28,045
offices, or even the coffee shops, all
accessing networks from various devices,

81
00:05:28,095 --> 00:05:30,255
securing these diverse environments.

82
00:05:30,390 --> 00:05:31,460
becomes essential.

83
00:05:31,960 --> 00:05:37,090
Nowadays, nearly every application
we use, whether for business or

84
00:05:37,090 --> 00:05:41,850
personal use, relies on the multiple
internal and external integrations.

85
00:05:42,380 --> 00:05:46,650
These integrations connect different
systems and if any one of these

86
00:05:46,660 --> 00:05:50,820
points is insecure, it can serve
as a gateway for cyber attacks.

87
00:05:51,320 --> 00:05:56,370
We must consider the global supply chain,
which includes open source, open source.

88
00:05:56,570 --> 00:06:00,050
Softwares and components that
many organizations depends on.

89
00:06:00,550 --> 00:06:05,130
These can be a security risk because
vulnerabilities in widely used open

90
00:06:05,130 --> 00:06:09,380
source libraries can affect the
countless, application globally.

91
00:06:09,880 --> 00:06:14,180
As we discussed earlier, the zero
trust process involves establishing

92
00:06:14,190 --> 00:06:16,560
and forcing continuously verifying.

93
00:06:17,480 --> 00:06:19,520
and responding to the trust.

94
00:06:20,020 --> 00:06:24,700
Here is the map each of these zero trust
principles for container security to

95
00:06:24,700 --> 00:06:27,050
the respective stages of the process.

96
00:06:27,550 --> 00:06:32,840
Segmentation, this is about dividing your
environment into smaller manageable zones.

97
00:06:33,315 --> 00:06:36,845
And it's quickly controlling
the communication between them

98
00:06:36,955 --> 00:06:38,865
in containerized environment.

99
00:06:38,895 --> 00:06:44,315
Microsegmentation ensures that even if
one part of the system is compromised,

100
00:06:44,905 --> 00:06:50,805
the attacker cannot easily move laterally
to other, to the other containers.

101
00:06:51,145 --> 00:06:54,865
You control which containers can
communicate with each other and

102
00:06:54,875 --> 00:06:56,485
restrict unnecessary traffic.

103
00:06:57,405 --> 00:06:58,985
The second is runtime security.

104
00:06:58,985 --> 00:07:03,635
This principle ensures that containers
behave as expected once they are deployed.

105
00:07:04,445 --> 00:07:07,215
You monitor container
activities in real time.

106
00:07:08,095 --> 00:07:13,945
Looking for any suspicious action such as
unauthorized, or unusual network traffic.

107
00:07:14,225 --> 00:07:18,075
If a container tries to run a
process, it was not intended.

108
00:07:18,425 --> 00:07:22,165
So we need to detect and block
that, action immediately.

109
00:07:22,665 --> 00:07:24,425
The next is network security.

110
00:07:24,455 --> 00:07:30,295
This is the backbone of The any of
the zero trust approach, we must

111
00:07:30,385 --> 00:07:34,335
secure the network communication
between the containers, whether they

112
00:07:34,335 --> 00:07:38,505
are running on the same machine or
across distributed environments.

113
00:07:38,915 --> 00:07:43,695
This includes implementing strong
encryption and securing all communication

114
00:07:43,705 --> 00:07:49,355
channels, ensuring that traffic between
services is trusted and authenticated.

115
00:07:49,855 --> 00:07:51,295
The fourth one is IEM.

116
00:07:51,325 --> 00:07:55,585
Here we strictly control who has access
to which resource in a zero trust.

117
00:07:55,910 --> 00:08:01,610
Until every request for access must be
verified, IAM ensures that users and

118
00:08:01,610 --> 00:08:07,170
services are only given the minimal
level of access they need and access is

119
00:08:07,210 --> 00:08:10,280
revoked as soon as it's no longer needed.

120
00:08:10,780 --> 00:08:12,680
The fifth is image security.

121
00:08:12,720 --> 00:08:19,270
The foundation of any container, In the
container image and securing these images

122
00:08:19,320 --> 00:08:25,890
is critical image security involves the
scanning images for vulnerabilities before

123
00:08:25,890 --> 00:08:31,470
they are deployed, enforcing sign images
and ensuring they have not been tampered

124
00:08:31,970 --> 00:08:37,140
in this slide, how we can discuss
how we can, how we can implement

125
00:08:37,150 --> 00:08:38,950
zero trust container security.

126
00:08:39,420 --> 00:08:42,240
throughout the DevOps lifecycle
and map the principles which each

127
00:08:42,240 --> 00:08:46,170
of the DevOps lifecycle stages.

128
00:08:46,670 --> 00:08:52,300
starting with the build phase, this is
where, we focus on the vulnerability.

129
00:08:52,790 --> 00:08:56,130
We implement build scanning
to detect any vulnerabilities

130
00:08:56,310 --> 00:08:58,040
early on in the development.

131
00:08:58,430 --> 00:09:01,830
And we also enforce
security policies as code.

132
00:09:02,330 --> 00:09:06,270
This ensures that our security
standards are embedded from the start.

133
00:09:06,770 --> 00:09:08,210
Next phase is test.

134
00:09:08,710 --> 00:09:13,120
We scan our container registries
to check for vulnerabilities.

135
00:09:13,170 --> 00:09:18,060
This followed by security automation,
which help to streamline our

136
00:09:18,060 --> 00:09:20,320
security checks and testing.

137
00:09:20,330 --> 00:09:25,380
We also implement admission controls
to ensure that only trusted and

138
00:09:25,380 --> 00:09:27,760
secure components make it through.

139
00:09:27,760 --> 00:09:34,770
As we move to the staging phase, we focus
on the compliance, which is CIS benchmark.

140
00:09:35,495 --> 00:09:39,885
are used to ensure we are meeting
industry security standards.

141
00:09:39,945 --> 00:09:44,825
We introduce a container firewall
at this stage, adding an extra layer

142
00:09:44,825 --> 00:09:47,025
of defense to protect our workloads.

143
00:09:47,525 --> 00:09:51,475
In the production phase, we
continue to ensure compliance with

144
00:09:51,475 --> 00:09:53,595
frameworks such as PCI and NIST.

145
00:09:54,155 --> 00:09:59,215
Container's workload security is our
priority, which includes protecting

146
00:09:59,225 --> 00:10:01,575
running applications from any threats.

147
00:10:02,185 --> 00:10:03,655
We have runtime protection.

148
00:10:03,665 --> 00:10:08,585
This is where runtime scannings and real
time alerts are critical for detecting

149
00:10:08,585 --> 00:10:10,875
and responding to threats immediately.

150
00:10:11,375 --> 00:10:16,015
Immediately as they happen by
applying the zero trust approach

151
00:10:16,095 --> 00:10:21,625
across the life cycle, from a build
to production, we can ensure that

152
00:10:21,895 --> 00:10:27,425
continuous security protecting both our,
microservices infrastructure and data.

153
00:10:27,925 --> 00:10:30,085
Let's move to the real world.

154
00:10:30,585 --> 00:10:35,115
here we can compare the before and
after ZeroTrust security changes.

155
00:10:35,615 --> 00:10:39,635
Before ZeroTrust, we see that
applications are deployed without

156
00:10:39,835 --> 00:10:45,095
consistently verifying container images
leading to potential vulnerabilities.

157
00:10:45,760 --> 00:10:50,560
After implementing the Zero Trust,
every application, regardless of

158
00:10:50,570 --> 00:10:54,450
version, undergoes image scanning
to detect vulnerabilities and

159
00:10:54,490 --> 00:10:57,700
ensure trust before the deployment.

160
00:10:58,050 --> 00:11:01,810
This continuous verification
process strengthens security by

161
00:11:01,820 --> 00:11:03,875
ensuring only trusted applications.

162
00:11:04,035 --> 00:11:09,605
Secure images are deployed using
the risk of breaches in our, in

163
00:11:09,655 --> 00:11:11,425
our microservices environment.

164
00:11:11,925 --> 00:11:16,125
Verifying the image at, at,
deployment time ensures that only

165
00:11:16,125 --> 00:11:19,705
trusted and verified images are
used in our production environment.

166
00:11:20,325 --> 00:11:25,505
This process ensures that security is
not just a one time task, but, continuous

167
00:11:25,555 --> 00:11:29,495
and ongoing activity, in your pipeline.

168
00:11:29,995 --> 00:11:34,025
The next, example is micro
segmentation before zero trust.

169
00:11:34,045 --> 00:11:38,105
All containers within the application
can communicate freely with each

170
00:11:38,105 --> 00:11:42,955
other, which increases the risk of,
lateral movements during an attack.

171
00:11:43,825 --> 00:11:48,325
After implementing zero trust, micro
segmentation containers are segmented

172
00:11:48,325 --> 00:11:53,375
into isolated groups, each with a
specific security policies applied.

173
00:11:53,960 --> 00:11:57,860
This limits communication only to
necessary components, reducing the

174
00:11:57,900 --> 00:12:02,750
risk, reducing the attack surface,
and containing potential threats.

175
00:12:03,150 --> 00:12:07,700
With micro segmentation, we can apply
fine grained security controls, ensuring

176
00:12:07,760 --> 00:12:10,140
each container is protected individually.

177
00:12:10,640 --> 00:12:16,500
This approach isolates the backend
containers and only allow ingress traffic,

178
00:12:17,080 --> 00:12:23,426
from the, Name space selector, which is
backend services by applying this strategy

179
00:12:23,486 --> 00:12:27,726
We limit the movement of attacks within
the system reducing the attack surface

180
00:12:27,776 --> 00:12:33,776
and minimizing the risk before zero
trust IAM containers have broader access

181
00:12:33,826 --> 00:12:39,806
which increases the security risk or
unauthorized actions can occur across the

182
00:12:39,806 --> 00:12:44,606
environment After implementing Zero Trust,
fine grained access control is enforced.

183
00:12:44,666 --> 00:12:48,686
Each container is granted the least
privilege necessary to function.

184
00:12:49,306 --> 00:12:53,436
And access is tightly coupled,
tightly, controlled based on

185
00:12:53,436 --> 00:12:55,306
the specific rules and policies.

186
00:12:55,806 --> 00:13:01,396
This ensures that only authenticated
and authorized actions are permitted,

187
00:13:01,836 --> 00:13:06,266
minimizing the attack surface, and
safeguarding sensitive resources

188
00:13:06,296 --> 00:13:09,486
within the microservices environment.

189
00:13:09,986 --> 00:13:14,996
In this harness pipeline, an IEM role
can securely pull the container image

190
00:13:15,016 --> 00:13:22,316
from the AWS Elastic Container Registry,
ensuring that only authorized users and

191
00:13:22,316 --> 00:13:25,376
process have access to critical resources.

192
00:13:25,876 --> 00:13:30,056
Before Zero Trust, all containers
one, two, and three are,

193
00:13:30,656 --> 00:13:34,716
unsecure and vulnerable due to
unprotected communication path.

194
00:13:35,246 --> 00:13:39,116
But after Zero Trust, container
network security for every container

195
00:13:39,156 --> 00:13:45,891
benefits from consistently applies
security policies and dinners are

196
00:13:45,921 --> 00:13:50,931
isolated and protected by secure
network policies, reducing the risk of

197
00:13:51,231 --> 00:13:53,461
unauthorized access and natural movement.

198
00:13:53,921 --> 00:13:58,511
This comprehensive network security
ensures a consistent, secure

199
00:13:58,561 --> 00:14:01,096
environment for all the containers.

200
00:14:01,596 --> 00:14:05,796
Here we enforce strict policies,
continuously monitor traffic and

201
00:14:05,806 --> 00:14:11,356
respond to any anomalies by coding the
mauth service as part of the service

202
00:14:11,356 --> 00:14:13,976
mesh in this, in this manifest file.

203
00:14:14,446 --> 00:14:20,006
We ensure that authentication is applied,
at, broad namespace, helping to, helping

204
00:14:20,006 --> 00:14:22,316
to protect, our environment from.

205
00:14:22,666 --> 00:14:25,066
from the unauthorized access.

206
00:14:25,566 --> 00:14:29,416
Before Zero Trust, we use security
policies to manually enforce

207
00:14:29,456 --> 00:14:31,556
the containers that are used it.

208
00:14:31,706 --> 00:14:38,226
And after Zero Trust, we enforce policies
as code on every container to protect

209
00:14:38,226 --> 00:14:40,916
runtime container from security threats.

210
00:14:41,416 --> 00:14:47,606
if a shell is started as a root and alert
will be sent to the, immediate action.

211
00:14:48,201 --> 00:14:53,881
This real time enforcement and the
monitoring, ensures that we can respond

212
00:14:53,891 --> 00:14:59,081
to any security threats that, that
arise, during the runtime, protecting

213
00:14:59,081 --> 00:15:01,401
the system while it's operational.

214
00:15:01,901 --> 00:15:05,101
thank you for joining me
today for this conversation

215
00:15:05,121 --> 00:15:07,191
about, I hope you had enjoyed.

216
00:15:07,741 --> 00:15:08,761
this conversation.

217
00:15:08,791 --> 00:15:13,521
If you have any further questions or
you would like to, have a questions,

218
00:15:13,521 --> 00:15:23,251
feedback, feel free to contact us on
www.dot io and, on my email info at

219
00:15:23,911 --> 00:15:31,521
dot I, and han at io and I am always
happy to respond your feedback.

220
00:15:31,881 --> 00:15:33,321
Thank you and have a great day.

