1
00:00:00,290 --> 00:00:03,739
Cloud infrastructure decisions are
too often based on personal taste and

2
00:00:03,740 --> 00:00:05,410
experience, and that makes a problem.

3
00:00:05,720 --> 00:00:11,029
What is good for large, mature systems
is too expensive and complex for early

4
00:00:11,060 --> 00:00:15,440
stages, while early stage shortcuts
will block system growth one day.

5
00:00:15,819 --> 00:00:19,160
In addition, cloud vendors release
new features constantly, making

6
00:00:19,190 --> 00:00:23,759
custom solutions obsolete or risky and
previous assumptions not valid anymore.

7
00:00:24,059 --> 00:00:28,570
And that's a real problem that
doesn't have Magic solution and

8
00:00:28,580 --> 00:00:32,610
my presentation will look what
practically could be done about this.

9
00:00:33,110 --> 00:00:35,800
Welcome to cloud native 2025.

10
00:00:35,800 --> 00:00:37,140
My name is Asher Sterkin.

11
00:00:37,629 --> 00:00:39,379
I have about 40 years experience.

12
00:00:39,419 --> 00:00:43,559
Previously, I served at different
senior engineering positions

13
00:00:43,579 --> 00:00:44,759
and large multinationals.

14
00:00:45,099 --> 00:00:49,619
And today I'm mostly focused on
advanced cloud architecture solutions.

15
00:00:49,779 --> 00:00:52,589
Both details could be found
on my social networks.

16
00:00:53,089 --> 00:00:57,379
Let's look what is included in making
decision about cloud infrastructure.

17
00:00:57,379 --> 00:00:59,409
What we need to decide about trust.

18
00:00:59,409 --> 00:01:02,139
We need to decide about
cloud, what cloud to use.

19
00:01:02,139 --> 00:01:06,419
It could be WS, Azure, GCP,
smaller player like CloudFlare.

20
00:01:06,719 --> 00:01:11,284
Some people believe that Kubernetes
is a real cloud, while what we

21
00:01:11,369 --> 00:01:13,079
call cloud, actually hardware.

22
00:01:13,519 --> 00:01:19,179
The Kubernetes true cloud is running on
the top of a kind of philosophical debate.

23
00:01:19,179 --> 00:01:19,539
What is right?

24
00:01:19,539 --> 00:01:20,104
What is wrong?

25
00:01:20,604 --> 00:01:24,454
Once we decided about cloud
platform, let's say AWS, there

26
00:01:24,454 --> 00:01:25,634
are a lot of choices to be made.

27
00:01:26,134 --> 00:01:27,864
What compute platform we need?

28
00:01:28,144 --> 00:01:32,674
Virtual machine, serverless lambda
function, container based solutions

29
00:01:32,714 --> 00:01:38,364
like Kubernetes or ECS, maybe more
exotic options like step functions.

30
00:01:38,864 --> 00:01:39,914
How we store data.

31
00:01:40,084 --> 00:01:41,424
Which kind of database we need.

32
00:01:41,574 --> 00:01:43,994
Relational, non relational, blob storage.

33
00:01:44,894 --> 00:01:46,954
What kind of internal
communication we need.

34
00:01:47,204 --> 00:01:52,754
Peer to peer message queues,
PubSub infrastructure, streaming.

35
00:01:53,464 --> 00:01:55,804
What kind of external
interfaces we expose.

36
00:01:55,814 --> 00:02:01,414
Just load balancer or API gateway
or maybe GraphQL supporting AppSync.

37
00:02:01,914 --> 00:02:04,474
We need to make decisions
about system observability.

38
00:02:04,474 --> 00:02:05,734
How log files are produced.

39
00:02:06,204 --> 00:02:07,434
How metrics are collected.

40
00:02:07,434 --> 00:02:08,554
How alerts are raised.

41
00:02:08,564 --> 00:02:09,464
How they are processed.

42
00:02:09,994 --> 00:02:13,544
How history is kept, for
example, cloud, cloud watching

43
00:02:13,684 --> 00:02:15,544
Amazon and, Athena for query.

44
00:02:16,044 --> 00:02:18,464
We need to decide about
automation infrastructure,

45
00:02:18,484 --> 00:02:20,314
how we deploy cloud resources.

46
00:02:20,314 --> 00:02:24,254
It could be cloud formation of
Amazon, CDK, cloud, cloud development

47
00:02:24,254 --> 00:02:26,604
kit, more Kubernetes focused helm.

48
00:02:27,149 --> 00:02:33,329
more generic terraform or its open source,
version or open tofu or more sophisticated

49
00:02:33,449 --> 00:02:35,069
orchestration platform like Lummi.

50
00:02:36,009 --> 00:02:39,159
There are decisions to be made about
development environment, separating

51
00:02:39,159 --> 00:02:44,259
cloud solution architecture and software
development Architectures wrong approach.

52
00:02:44,759 --> 00:02:49,379
Cloud SDKs are sup supportive for
particular round time environments,

53
00:02:49,379 --> 00:02:52,289
be it Python, no GS, java t net, or.

54
00:02:52,789 --> 00:02:56,249
On the top of them, there are multiple
programming languages, and all this

55
00:02:56,249 --> 00:02:59,969
combination will determine how much
CLI we will need from the cloud.

56
00:03:00,219 --> 00:03:04,239
Very seldom we could come up
with one clear cut choice here.

57
00:03:04,739 --> 00:03:08,729
How we make decisions, or let's
say, how we are supposed or

58
00:03:08,809 --> 00:03:10,409
expected to make decisions.

59
00:03:10,409 --> 00:03:15,699
We are expected to make decisions fact
based, as a kind of rational process.

60
00:03:16,229 --> 00:03:20,999
What workload of the system we expect,
what server level, service level

61
00:03:20,999 --> 00:03:25,369
agreements we need to support in terms
of latency and throughput, what security

62
00:03:25,379 --> 00:03:31,439
requirements are, what cost constraints
are, what time to market we need to

63
00:03:31,539 --> 00:03:36,439
address tomorrow or one year from now,
and what brownfield constraints we need

64
00:03:36,499 --> 00:03:42,269
to deal with because very seldom we
deploy completely clean slate solution.

65
00:03:42,769 --> 00:03:48,509
In reality, decisions are made not this
way, as I mentioned in my introduction.

66
00:03:48,769 --> 00:03:52,529
It's based on faith, what we believe
is right or wrong, or a certain kind

67
00:03:52,529 --> 00:03:55,219
of bias towards a particular choice.

68
00:03:55,589 --> 00:03:59,419
Experience, if something worked for
me in my previous project, I will most

69
00:03:59,419 --> 00:04:03,669
likely push towards this option for
the next one, whether relevant or not.

70
00:04:04,229 --> 00:04:08,329
There are certain likes or
dislikes and fashion hype.

71
00:04:08,829 --> 00:04:11,524
And one extremely dangerous
is so called trust.

72
00:04:11,794 --> 00:04:13,924
High, tight person, opinion.

73
00:04:14,514 --> 00:04:20,054
Senior manager who believes, who know he
knows or she knows what's right or wrong.

74
00:04:20,174 --> 00:04:23,774
Very often based on who
he's playing work with.

75
00:04:24,274 --> 00:04:29,244
A more effective approach to that
challenge would be set based engineering.

76
00:04:30,054 --> 00:04:31,944
At the beginning, we
know very little about.

77
00:04:32,679 --> 00:04:37,769
Many aspects of the system, what external
interfaces exactly we will need to

78
00:04:37,769 --> 00:04:42,079
deal with, how much load we will have,
maybe security changes will change,

79
00:04:42,099 --> 00:04:43,699
or even target market will change.

80
00:04:44,179 --> 00:04:47,129
So we need to evaluate the
number of candidates and keep as

81
00:04:47,129 --> 00:04:48,719
many options open as possible.

82
00:04:49,169 --> 00:04:52,369
Eventually we will converge to
smaller number of configurations.

83
00:04:52,959 --> 00:04:57,789
Very often, usually reflecting different
environments we need to operate in, like

84
00:04:57,789 --> 00:05:00,119
developments, test stage production.

85
00:05:00,499 --> 00:05:03,199
One configuration will
be locked for production.

86
00:05:03,829 --> 00:05:07,619
However, based on feedback and
metrics collected, we will most

87
00:05:07,619 --> 00:05:12,409
likely need to come back to stage
one and evaluate new candidates

88
00:05:12,429 --> 00:05:15,519
or re evaluate previous candidates
and start this whole process over.

89
00:05:16,019 --> 00:05:19,619
This presentation is titled
Focus on Core Value and Keep Up.

90
00:05:19,939 --> 00:05:25,299
Cloud infrastructure flexible with
ports and adapters is a architectural

91
00:05:25,349 --> 00:05:30,679
pattern, sometimes called hexagonal
architecture that allows to separate

92
00:05:31,129 --> 00:05:37,499
infrastructure and application to keep
them separate and Prevent the influence

93
00:05:37,539 --> 00:05:39,819
of infrastructure on core value.

94
00:05:40,319 --> 00:05:44,549
This pattern was introduced
by Alistair Cockburn and

95
00:05:44,549 --> 00:05:46,319
published in this seminal book.

96
00:05:46,429 --> 00:05:47,449
Very highly recommended.

97
00:05:47,899 --> 00:05:50,319
The pattern contains several parts.

98
00:05:50,689 --> 00:05:55,049
The first one, we isolate application
completely from infrastructure.

99
00:05:55,119 --> 00:05:58,269
The application logic doesn't
know anything about what

100
00:05:58,279 --> 00:05:59,799
infrastructure it will run on top of.

101
00:06:00,269 --> 00:06:03,689
This is achieved through
well defined ports.

102
00:06:04,399 --> 00:06:08,829
in ports or out ports for system
inputs or outputs, ports are

103
00:06:08,839 --> 00:06:10,549
slightly more than interfaces.

104
00:06:10,619 --> 00:06:15,249
It's a collection of interfaces
with the same technological choice

105
00:06:15,529 --> 00:06:17,039
and data that flows through them.

106
00:06:17,539 --> 00:06:21,509
Every port might have multiple adapters
implemented on top of different

107
00:06:21,569 --> 00:06:27,559
infrastructure, and adapters are plugged
into system through ports by configurator.

108
00:06:27,609 --> 00:06:29,899
Configurator could be static or on.

109
00:06:30,399 --> 00:06:34,689
In the book, they use a sample
application called BlueZone, which is

110
00:06:34,689 --> 00:06:38,799
actually a parking lot where drivers
buy tickets and inspectors check

111
00:06:38,819 --> 00:06:41,529
whether cars are parked valid or not.

112
00:06:42,129 --> 00:06:44,549
We will use this application
in our conversation.

113
00:06:45,049 --> 00:06:49,509
The process is supposed to start with use
case analysis, answering the very simple

114
00:06:49,509 --> 00:06:54,069
question why the system exists, what
kind of value it delivers to its users.

115
00:06:54,959 --> 00:06:58,449
In our case, we have two use
cases in this application.

116
00:06:58,669 --> 00:07:03,609
One is buy ticket for car initiated
by car driver and communicating with

117
00:07:03,609 --> 00:07:06,049
payment service, credit card maybe.

118
00:07:06,929 --> 00:07:11,379
The second one is checking card
initiated by parking inspector.

119
00:07:11,879 --> 00:07:19,129
Use case actors provide strong
input for what kind of primary

120
00:07:19,159 --> 00:07:20,669
ports the system needs.

121
00:07:21,169 --> 00:07:24,909
Primary driving ports are for
actors initiating use case.

122
00:07:25,009 --> 00:07:30,509
In this case, for Car driver and
parking inspector and, primary driven

123
00:07:30,509 --> 00:07:35,919
ports for external services we need
to use, consume, like payment service.

124
00:07:36,909 --> 00:07:42,619
So we have primary, primary ports
derived from use case specification.

125
00:07:43,459 --> 00:07:47,259
Use case event flow specification
will provide an input.

126
00:07:47,959 --> 00:07:49,609
for secondary ports.

127
00:07:49,949 --> 00:07:53,569
If we need to store some data somewhere,
we need a database, so we need to

128
00:07:53,569 --> 00:07:57,709
define a secondary port for database
and not lock ourselves into a corner

129
00:07:57,709 --> 00:07:59,219
with a particular database choice.

130
00:07:59,919 --> 00:08:02,799
On the other hand, in this particular
application, we need to know what

131
00:08:02,809 --> 00:08:08,149
the current time is to put it
on the ticket and check whether

132
00:08:08,149 --> 00:08:09,619
the ticket is expired or not.

133
00:08:10,419 --> 00:08:12,579
So we have secondary driven ports.

134
00:08:13,079 --> 00:08:18,179
Actor interfaces, more detailed technical
specification of how we are supposed to

135
00:08:18,179 --> 00:08:22,299
communicate with actors will most likely
determine which protocols we need, be it

136
00:08:22,349 --> 00:08:29,009
REST API, GraphQL, or maybe open system to
system integration through MQP protocol.

137
00:08:29,509 --> 00:08:38,389
Use case SLAs in terms of throughput and
latency plus data schema stability will

138
00:08:38,409 --> 00:08:43,559
define what kind of database, what type
of database is most suitable for that.

139
00:08:44,059 --> 00:08:48,549
If you have a stable, relatively
stable schema and need a lot of

140
00:08:48,549 --> 00:08:53,519
flexibility for ad hoc queries, a
relational database like Postgres

141
00:08:53,749 --> 00:08:55,869
will most likely be the best choice.

142
00:08:56,349 --> 00:09:01,319
However, if we have a very flexible
schema, a document database like

143
00:09:01,329 --> 00:09:03,519
MongoDB might be a better option.

144
00:09:04,089 --> 00:09:09,609
And if we have very high throughput,
low latency requirements of the system,

145
00:09:10,499 --> 00:09:14,829
columnar based, non SQL database like
Cassandra might be better choice.

146
00:09:15,329 --> 00:09:19,709
Cloud platform itself is very
often determined by so called

147
00:09:19,719 --> 00:09:21,259
supplementary specification.

148
00:09:21,559 --> 00:09:23,669
Customers specify what they need.

149
00:09:23,889 --> 00:09:27,029
Regulators tell us what
clouds we could use.

150
00:09:27,589 --> 00:09:31,889
Legacy systems to integrate with will
determine which cloud we can use.

151
00:09:32,434 --> 00:09:35,794
And so that comes from a
supplementary specification.

152
00:09:36,294 --> 00:09:42,904
Once we have cloud decided upon, time
to market considerations will push

153
00:09:42,904 --> 00:09:47,914
towards adopting native serverless
options from that cloud platform.

154
00:09:47,954 --> 00:09:57,121
For example, Lambda and API gateway for
compute or Lambda and AppSync for GraphQL

155
00:09:57,121 --> 00:10:01,874
based interface or MQ service for MQB.

156
00:10:01,894 --> 00:10:04,428
Serverless Aurora for Postgres,
Serverless DocumentDB for Mongo,

157
00:10:04,428 --> 00:10:12,174
Serverless Keyspace for Cassandra,
and most likely CDK, Cloud Development

158
00:10:12,174 --> 00:10:14,634
Kit for orchestration and deployment.

159
00:10:14,814 --> 00:10:19,544
It's just much easier to put stuff
together and deploy using that, this

160
00:10:19,554 --> 00:10:21,304
set of options than anything else.

161
00:10:22,204 --> 00:10:26,584
However, when we deploy to production, we
start collecting metrics, we start getting

162
00:10:26,584 --> 00:10:30,984
feedback, and it might be the system is
too expensive, or not performant enough,

163
00:10:31,164 --> 00:10:35,674
or there is a certain feature gap, and
then we start considering alternatives.

164
00:10:35,894 --> 00:10:40,734
For example, NEON database as an
alternative to Aurora for Postgres,

165
00:10:40,764 --> 00:10:45,554
or Atlas database for Mongo, or
Datasex Cassandra for Cassandra.

166
00:10:45,884 --> 00:10:50,044
We may discover that we
have stable load, high load.

167
00:10:50,539 --> 00:10:53,269
And Lambda is not a good choice anymore.

168
00:10:53,479 --> 00:10:56,249
And switch to Kubernetes
behind load balancer.

169
00:10:56,749 --> 00:10:59,249
And that will determine what
kind of automation we need.

170
00:10:59,249 --> 00:10:59,939
Maybe Helm.

171
00:11:00,259 --> 00:11:04,789
And maybe we need, we have more
sophisticated needs for deployment

172
00:11:04,789 --> 00:11:06,259
operation and switch to Pulumi.

173
00:11:06,759 --> 00:11:10,569
The book suggests certain
canonical structure for application

174
00:11:10,879 --> 00:11:12,119
to reflect that pattern.

175
00:11:12,599 --> 00:11:14,159
Keeping application logic.

176
00:11:14,229 --> 00:11:19,949
Adapters and ports in separate
folders, in separate packages.

177
00:11:20,429 --> 00:11:22,129
It's a very high level structure.

178
00:11:22,339 --> 00:11:26,129
Details depend on which domain
we are developing software for,

179
00:11:26,729 --> 00:11:28,549
what programming language we use.

180
00:11:28,999 --> 00:11:34,099
What business model we have, whether it's
software as a service or cloud independent

181
00:11:34,099 --> 00:11:37,629
software vendor and what is core
technology, whether it's infrastructure

182
00:11:37,659 --> 00:11:42,269
or application services like e commerce
versus, let's say, cyber security.

183
00:11:42,769 --> 00:11:47,049
To sum up, Ports and Adapters
architectural pattern is really very

184
00:11:47,159 --> 00:11:52,949
powerful tool to deal with uncertainty and
flexibility in complex software systems.

185
00:11:53,589 --> 00:11:56,799
Very often we don't know enough
at the beginning and we will

186
00:11:56,799 --> 00:11:58,989
need to make our choices later.

187
00:11:59,489 --> 00:12:00,359
Almost for sure.

188
00:12:00,859 --> 00:12:01,949
This is just the beginning.

189
00:12:02,449 --> 00:12:04,989
What I presented here is
just the tip of the iceberg.

190
00:12:05,439 --> 00:12:09,989
If you are interested in more details and
more detailed discussion, drop me a line.

191
00:12:10,039 --> 00:12:13,799
Here are my details on, social networks.

192
00:12:14,359 --> 00:12:17,219
Thank you for your time and
attention and hope to see you again.

