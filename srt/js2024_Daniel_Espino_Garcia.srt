1
00:00:00,190 --> 00:00:00,900
Hello everyone.

2
00:00:01,140 --> 00:00:03,440
I'm welcome to level up your react hooks.

3
00:00:04,180 --> 00:00:05,910
My name is Daniel Espino Garcia.

4
00:00:06,010 --> 00:00:07,930
I am software design
engineer at Mattermost.

5
00:00:08,480 --> 00:00:10,429
And if you want to contact me, you can.

6
00:00:10,929 --> 00:00:12,529
Drop by the office at community.

7
00:00:12,679 --> 00:00:13,279
mattermost.

8
00:00:13,279 --> 00:00:14,969
com and write me a line.

9
00:00:15,829 --> 00:00:22,209
So today I'm going to tell you about how
to improve your hooks in your react code.

10
00:00:23,119 --> 00:00:26,360
but before we start, let's tell
you a bit of where I work and

11
00:00:26,369 --> 00:00:27,750
why I'm talking about this.

12
00:00:27,799 --> 00:00:29,660
So what is MatterMos?

13
00:00:30,200 --> 00:00:33,770
MatterMos is just a collaboration
tool, one of the main open source

14
00:00:33,770 --> 00:00:36,110
alternative to Slack and Microsoft teams.

15
00:00:36,610 --> 00:00:42,570
And both the mobile and web
app are written in React.

16
00:00:43,070 --> 00:00:46,670
And not only that, the mobile is
completely functional components,

17
00:00:46,820 --> 00:00:50,930
and the web app we are now migrating
to use functional components.

18
00:00:51,850 --> 00:00:56,860
On top of that, it's open source,
so it's open to code contributions.

19
00:00:57,360 --> 00:01:05,190
What all this means is that I've seen a
lot of uses of React hooks Some of them

20
00:01:05,210 --> 00:01:12,609
pretty smart uses some of them not so
much So yeah, I want to tell you a bit

21
00:01:12,850 --> 00:01:20,915
about what I've learned and what you can
try so Let's start with something simple.

22
00:01:21,575 --> 00:01:22,365
What are hooks?

23
00:01:23,145 --> 00:01:30,165
Hooks are the future, or at least they
are since 2019 when React added them.

24
00:01:30,665 --> 00:01:36,475
So before that, components
were class components.

25
00:01:37,365 --> 00:01:43,205
In order to store the state and the
life cycle events, you will, create

26
00:01:43,255 --> 00:01:49,155
these classes, which in one hand makes
sense because classes have methods

27
00:01:49,655 --> 00:01:57,585
and attributes that you can use as
state and life cycle events, but they

28
00:01:57,585 --> 00:02:00,225
were not great for other reasons.

29
00:02:00,415 --> 00:02:01,655
So they.

30
00:02:01,740 --> 00:02:03,760
added functional components.

31
00:02:04,240 --> 00:02:08,490
So now components are just a
function that gets executed, but

32
00:02:08,990 --> 00:02:12,890
if it is just a function that gets
executed, how do we store the state?

33
00:02:12,960 --> 00:02:17,240
Because functions don't have a state
and don't have life cycle events.

34
00:02:17,940 --> 00:02:21,730
So in order to solve
that, they created hooks.

35
00:02:22,120 --> 00:02:25,060
hooks are just the magic
that allow that to happen.

36
00:02:25,560 --> 00:02:29,610
So what are hooks in the inside of
what's behind the smoke and mirrors?

37
00:02:30,260 --> 00:02:35,360
So I'm just, going to take
a peek behind the curtain.

38
00:02:35,450 --> 00:02:43,740
You can see there were in the code of,
the React code base is this, but a hook is

39
00:02:43,850 --> 00:02:49,050
an object that has a memoized state, some
other props that I'm not going to get.

40
00:02:49,360 --> 00:02:55,990
Now we'll dip into, and the next, and
what is next is a link to the next hook.

41
00:02:56,570 --> 00:02:58,450
So hook has this link at least.

42
00:02:58,970 --> 00:03:04,740
That's why whenever you, that's
why you are not allowed to use

43
00:03:04,750 --> 00:03:08,250
hoops conditionally, because if
the hoops are not called in the

44
00:03:08,250 --> 00:03:10,320
same order, bad things happen.

45
00:03:10,820 --> 00:03:15,860
but what, how a hook looks like,
for example, let's take a simple

46
00:03:15,860 --> 00:03:20,925
one that is, for example, and hoops
have Two functions, one for the

47
00:03:20,935 --> 00:03:23,745
mount and front one from the update.

48
00:03:24,215 --> 00:03:28,805
The mount is the first time the hook is
called, the update every time after that.

49
00:03:29,645 --> 00:03:36,705
So you can see here that we are
memoizing the state of the mount call.

50
00:03:37,195 --> 00:03:40,185
We just put the callback
and the dependencies there.

51
00:03:40,285 --> 00:03:47,285
And on the update call, what we do is
check if the dependencies are the same.

52
00:03:47,975 --> 00:03:50,095
If so, return the previous update.

53
00:03:50,265 --> 00:03:53,785
If not, store the new values.

54
00:03:54,285 --> 00:03:56,855
And return the new value and that's it.

55
00:03:57,185 --> 00:03:59,615
That's what our hooks really simple.

56
00:03:59,815 --> 00:04:05,525
So one of the discussions that
come often is, yeah, but, using use

57
00:04:05,525 --> 00:04:08,245
callback, using use memo has a overhead.

58
00:04:08,635 --> 00:04:11,635
So let's take a peek at the overhead.

59
00:04:12,435 --> 00:04:12,905
Sure.

60
00:04:12,985 --> 00:04:14,465
We have memory overhead.

61
00:04:14,925 --> 00:04:18,135
We are storing the hook object.

62
00:04:18,455 --> 00:04:20,205
We are storing the memo as a state.

63
00:04:20,205 --> 00:04:20,265
Okay.

64
00:04:20,550 --> 00:04:22,250
So yeah, that's an overhead there.

65
00:04:22,990 --> 00:04:27,240
And also there's a computation overhead,
because not only we have to execute all

66
00:04:27,240 --> 00:04:32,680
these statements, we also have a loop
there, which is checking the dependencies.

67
00:04:33,180 --> 00:04:35,220
So there's also a computation overhead.

68
00:04:35,725 --> 00:04:40,565
And finally, there's garbage collection
stress because every time we call,

69
00:04:40,735 --> 00:04:45,395
the hook, we may be creating new
variables, we may be creating new

70
00:04:45,465 --> 00:04:50,705
arguments for the functions and that
may affect the garbage collector.

71
00:04:51,205 --> 00:04:54,135
But is all this that important?

72
00:04:55,125 --> 00:04:55,805
Probably not.

73
00:04:56,305 --> 00:04:56,815
Probably not.

74
00:04:56,815 --> 00:04:59,675
And let me explain a few things why.

75
00:05:00,175 --> 00:05:04,425
So let's start with basis when you
are coding you should things you

76
00:05:04,425 --> 00:05:06,375
should make things more readable.

77
00:05:07,255 --> 00:05:08,535
That should be Your basis.

78
00:05:09,425 --> 00:05:15,485
So for example, the code is written
once and read many times mean you

79
00:05:15,485 --> 00:05:21,275
shouldn't Try to get to take shortcuts
with the code because three months

80
00:05:21,275 --> 00:05:25,455
later, you're going to get back to the
code and you will not remember why the

81
00:05:25,455 --> 00:05:29,485
shortcuts were made and you will not
understand what the code is about if

82
00:05:29,515 --> 00:05:32,525
you didn't write it so it can be read.

83
00:05:33,025 --> 00:05:35,895
And most of the performance,

84
00:05:36,395 --> 00:05:43,295
or heavy performance improvements
are, In expense of, readability.

85
00:05:43,835 --> 00:05:45,985
So you have to be pretty
careful about that.

86
00:05:46,955 --> 00:05:51,225
And also people use the code
without even reading it.

87
00:05:51,225 --> 00:05:55,165
If you call a function, this
function do that, they will call

88
00:05:55,205 --> 00:05:58,605
it without ever thinking about
what goes inside the function.

89
00:05:59,375 --> 00:06:03,065
yeah, you might have to make sure
the function does that, and does

90
00:06:03,095 --> 00:06:07,935
that in a stable way, especially
with hoops, and with hoops.

91
00:06:08,455 --> 00:06:13,075
React components, but you may say,
yeah, but performance is important.

92
00:06:13,565 --> 00:06:18,085
And yes, performance is important,
but over optimizing is not good.

93
00:06:18,585 --> 00:06:20,795
For starters, let's think
about the Amdor's Law.

94
00:06:21,295 --> 00:06:26,625
In layman's terms, the Amdor's Law,
what it says is, if during the execution

95
00:06:26,625 --> 00:06:32,075
of your code, this piece of the code
is being executed one second, doesn't

96
00:06:32,075 --> 00:06:39,190
matter how much you improve that, You
are only going to gain one second tops.

97
00:06:39,690 --> 00:06:44,600
So what that means is that you should
focus the optimization on your,

98
00:06:45,100 --> 00:06:52,560
bottlenecks and probably your bottleneck
is not using too many use callbacks,

99
00:06:52,770 --> 00:06:58,420
your bottlenecks are probably somewhere
else, so you shouldn't worry so much

100
00:06:58,430 --> 00:07:03,150
about that, you should worry more about
readability and then there's more slow.

101
00:07:03,460 --> 00:07:09,350
Again, we saw the problems, the
overhead that use callback may

102
00:07:09,350 --> 00:07:16,320
have and so on, and it's not a
overhead of jumping in complexity.

103
00:07:16,820 --> 00:07:22,675
So even if it's slow now,
probably it's good in a few years.

104
00:07:23,495 --> 00:07:27,175
So it's not something you
have to worry so much.

105
00:07:27,675 --> 00:07:28,325
Okay.

106
00:07:28,455 --> 00:07:33,255
So with that out of the way,
let's get into dependencies.

107
00:07:34,045 --> 00:07:41,825
Many hooks use dependencies and you should
treat dependencies, with a lot of care

108
00:07:42,325 --> 00:07:44,895
because yeah, they are quite important.

109
00:07:45,395 --> 00:07:49,075
For starters, everything that
can go out of the component,

110
00:07:49,085 --> 00:07:50,035
get it out of the component.

111
00:07:50,535 --> 00:07:55,955
For example, This constant can go out of
the component, doesn't need to be there.

112
00:07:56,455 --> 00:07:57,695
Why would you do that?

113
00:07:58,495 --> 00:07:59,455
Less dependencies.

114
00:07:59,495 --> 00:08:03,945
Now you make sure that nothing,
anything that depends on that doesn't

115
00:08:03,955 --> 00:08:06,725
need to go into the dependencies.

116
00:08:07,225 --> 00:08:12,005
Dependencies array, because it's
outside of the company, it's not

117
00:08:12,025 --> 00:08:13,625
going to change between renders.

118
00:08:14,125 --> 00:08:16,345
Also, it's less threat
for the garbage collector.

119
00:08:17,305 --> 00:08:23,435
It's not going to be, it doesn't need
to be garbage collected because it's

120
00:08:23,445 --> 00:08:28,054
going to live forever in the file, scope.

121
00:08:28,554 --> 00:08:32,954
And it is easier to understand
that it's always the same value

122
00:08:32,964 --> 00:08:35,754
when you are reading this document.

123
00:08:35,754 --> 00:08:36,064
Have a good one.

124
00:08:36,564 --> 00:08:38,914
We have here another
example for the same thing.

125
00:08:39,724 --> 00:08:42,354
For example, you have this callback.

126
00:08:42,854 --> 00:08:48,434
most people will not even look much
into it and say, okay, we just put a use

127
00:08:48,434 --> 00:08:50,294
callback, but there's a better solution.

128
00:08:50,794 --> 00:08:51,574
Take it out of the component.

129
00:08:52,314 --> 00:08:53,754
It is not using any prop.

130
00:08:53,764 --> 00:08:56,884
It's not using anything that
is inside of the component.

131
00:08:57,354 --> 00:08:58,404
So you can take it out.

132
00:08:58,774 --> 00:09:04,744
And if you can just do it again, there's
garbage collector stress becomes more

133
00:09:04,744 --> 00:09:07,754
readable and you add less dependencies.

134
00:09:07,754 --> 00:09:07,794
Okay.

135
00:09:08,629 --> 00:09:13,279
And better yet, it's harder to
add unexpected dependencies.

136
00:09:13,619 --> 00:09:18,219
It's harder to, it's harder that
someone comes tomorrow and changes

137
00:09:18,219 --> 00:09:19,619
something in this function.

138
00:09:20,159 --> 00:09:24,759
And suddenly it becomes a dependency
that you were not thinking about.

139
00:09:25,479 --> 00:09:27,239
So just take it out.

140
00:09:27,739 --> 00:09:31,779
Also just use direct
dependencies as dependencies.

141
00:09:32,069 --> 00:09:34,339
For example, we have here this situation.

142
00:09:35,069 --> 00:09:37,509
We have, blur function
that has a callback.

143
00:09:38,009 --> 00:09:41,559
We have this handle on the keyboard
that is just, A normal function without

144
00:09:41,559 --> 00:09:46,969
a callback calls blur and an effect
that use the handleAndroidKeyboard.

145
00:09:47,469 --> 00:09:52,819
And we say, okay, we cannot depend
on handleAndroidKeyboard because it's

146
00:09:52,819 --> 00:09:58,839
going to re render on every render
and we don't want that, but I don't

147
00:09:58,839 --> 00:10:00,159
want to put a use callback here.

148
00:10:00,579 --> 00:10:02,619
this only changes if blur changes.

149
00:10:02,629 --> 00:10:04,209
So I'm going to depend on blur.

150
00:10:04,709 --> 00:10:05,809
That's fine, right?

151
00:10:06,309 --> 00:10:07,239
No, don't do that.

152
00:10:07,240 --> 00:10:07,279
Okay.

153
00:10:07,279 --> 00:10:07,319
Bye.

154
00:10:07,979 --> 00:10:08,669
Just do this.

155
00:10:08,670 --> 00:10:10,029
And what depends the useEffect?

156
00:10:10,939 --> 00:10:13,219
On handleAndroidKeyboard.

157
00:10:13,899 --> 00:10:17,539
If handleAndroidKeyboard has to
be commanded on callback, use

158
00:10:17,539 --> 00:10:19,189
the useCallback and put it there.

159
00:10:19,469 --> 00:10:21,119
And depend on what it depends.

160
00:10:21,619 --> 00:10:22,419
And that's it.

161
00:10:23,069 --> 00:10:23,539
Why?

162
00:10:24,039 --> 00:10:26,469
Because that way, the
dependencies are clear.

163
00:10:27,229 --> 00:10:31,629
Now, if you come back in three months
and that you are depending on something

164
00:10:31,629 --> 00:10:37,849
that is not in the function, you won't
remove it by thinking, Hey, this is not

165
00:10:37,919 --> 00:10:40,009
really used, so this shouldn't be here.

166
00:10:40,509 --> 00:10:41,709
Also, it's easier to read.

167
00:10:42,209 --> 00:10:45,669
Now I understand what
each thing depends on.

168
00:10:46,489 --> 00:10:52,849
I don't have to do Mental flexes there
and it's future proof whenever you change

169
00:10:52,869 --> 00:10:59,779
something you don't have to Rethink
everywhere where you have put just blur if

170
00:10:59,779 --> 00:11:05,229
you also need to have the handle and the
keyboard and whether the handle and the

171
00:11:05,229 --> 00:11:09,409
keyboard has these Yeah, it gets messy.

172
00:11:09,539 --> 00:11:10,979
So just use that.

173
00:11:11,459 --> 00:11:13,849
Just use the direct dependencies.

174
00:11:14,349 --> 00:11:16,299
Now about persisting values.

175
00:11:16,589 --> 00:11:22,909
Persisting values is that having a state,
having a persisted state between renders.

176
00:11:23,409 --> 00:11:29,489
Most of the time, the state
of the component is defined by

177
00:11:29,499 --> 00:11:32,509
the props and the proper state.

178
00:11:33,009 --> 00:11:37,489
So let's see how we can
take advantage of all that.

179
00:11:37,989 --> 00:11:39,429
So for starters.

180
00:11:40,364 --> 00:11:43,034
Let's talk about intermediate variables.

181
00:11:43,534 --> 00:11:48,104
You see here that we say, okay, if not
archived and has permission, do something.

182
00:11:48,604 --> 00:11:52,877
And we have the dependencies as
archived and has permissions.

183
00:11:52,877 --> 00:11:57,114
So, how do we do that now?

184
00:11:57,614 --> 00:12:02,084
Let's just put an intermediate
variable, compost.

185
00:12:02,584 --> 00:12:06,464
Now the if is simpler,
dependencies are simpler.

186
00:12:06,964 --> 00:12:09,134
And, yeah, why would we do this?

187
00:12:09,634 --> 00:12:10,834
Literal dependencies.

188
00:12:11,174 --> 00:12:16,374
Now we understand that it
is anytime you can post.

189
00:12:17,254 --> 00:12:22,314
And it's easier to read because
now this not archived on has

190
00:12:22,314 --> 00:12:26,404
permissions has a higher level name.

191
00:12:26,904 --> 00:12:31,974
Can post and that is easier to understand
and it's easier to understand that this

192
00:12:31,974 --> 00:12:36,714
callback is only called if you can post
instead of it's only called if it's

193
00:12:36,734 --> 00:12:42,174
not archived and has permissions and I
don't know what that means and of course

194
00:12:42,174 --> 00:12:46,929
you get a minor performance improvement
because the callback is only is only

195
00:12:47,349 --> 00:12:53,669
recalculated when you compose changes, not
whenever it's archived or has permission

196
00:12:53,669 --> 00:12:56,159
changes, even if the result is the same.

197
00:12:56,659 --> 00:13:00,339
Also, we are talking about,
persisting the state.

198
00:13:01,219 --> 00:13:07,824
So just state is the usual suspect here,
but you states sometimes have problems.

199
00:13:08,564 --> 00:13:15,564
For example, I want to initialize the user
state when initializing, I have to get

200
00:13:16,254 --> 00:13:21,594
a, for example, in this case, for a drop
down the default value from the options.

201
00:13:22,094 --> 00:13:27,774
And that is, that needs to go
to loop through all the options,

202
00:13:28,154 --> 00:13:32,134
checking whether the one with the
value is equal to the full value.

203
00:13:33,134 --> 00:13:39,344
And if we do it like this on every single
render, we are going through that loop.

204
00:13:39,844 --> 00:13:45,224
And there has to be a way to avoid
that, and there is, you just use

205
00:13:45,254 --> 00:13:47,804
the function for initialization.

206
00:13:48,314 --> 00:13:53,974
That way useState only calls this
function on the first render.

207
00:13:54,474 --> 00:13:55,434
And what it gets us?

208
00:13:56,294 --> 00:13:57,524
Performance optimization.

209
00:13:58,094 --> 00:14:01,524
This is, one thing you
can get from useState.

210
00:14:02,024 --> 00:14:02,834
Another thing.

211
00:14:02,899 --> 00:14:10,029
Don't use useState, see this example,
we have an infinite scroll that had, and

212
00:14:10,029 --> 00:14:16,349
we have to keep loading more pages of
data, but we are not showing the page

213
00:14:16,529 --> 00:14:18,489
anywhere because it's an infinite scroll.

214
00:14:18,989 --> 00:14:22,239
So why are we storing the page in a state?

215
00:14:22,739 --> 00:14:24,699
There's no need to store in a state.

216
00:14:24,699 --> 00:14:28,339
We don't need to re render
if the page changes.

217
00:14:28,819 --> 00:14:33,469
We need to re render when we get new
values, but not when the page changes.

218
00:14:33,969 --> 00:14:34,909
why not do this?

219
00:14:35,409 --> 00:14:37,209
We store the page in a reference.

220
00:14:37,709 --> 00:14:40,449
That way, we have less dependencies.

221
00:14:40,949 --> 00:14:45,449
And we have, some minor performance
improvements, because, yeah, we are

222
00:14:45,469 --> 00:14:52,814
not calling setState so often, so we
may be Eh, skipping some re renders.

223
00:14:53,254 --> 00:14:54,634
So yeah, it's not bad.

224
00:14:55,134 --> 00:15:04,134
Also using the functional argument of you
state here, that you have a set state,

225
00:15:04,634 --> 00:15:09,544
and we get all the elements that we
already have and add the new elements.

226
00:15:10,044 --> 00:15:10,554
Perfect.

227
00:15:10,874 --> 00:15:12,254
But now we depend on elements.

228
00:15:12,254 --> 00:15:17,864
So the moment we do this on
enrich also gets recreated.

229
00:15:18,364 --> 00:15:24,094
So that may do undesired
things down the line.

230
00:15:24,594 --> 00:15:25,704
So what can we do?

231
00:15:26,204 --> 00:15:29,104
Just use a function argument.

232
00:15:29,654 --> 00:15:34,854
Here we can get the previous
argument and just show that.

233
00:15:35,704 --> 00:15:40,114
That way we suddenly don't
have any dependencies there.

234
00:15:40,614 --> 00:15:43,494
this gives us less dependencies
and less re renders.

235
00:15:43,994 --> 00:15:46,004
Next one, the effect smell.

236
00:15:46,504 --> 00:15:48,524
Sometimes I've seen this.

237
00:15:49,084 --> 00:15:53,054
Okay, I need the aspect
ratio, for example, which is,

238
00:15:53,894 --> 00:15:54,984
dependent on width and height.

239
00:15:55,484 --> 00:15:59,884
So this is the initial aspect ratio,
but if the width and height changes,

240
00:16:00,384 --> 00:16:02,194
then we set the new aspect ratio.

241
00:16:02,874 --> 00:16:03,584
With an effect.

242
00:16:04,564 --> 00:16:12,764
So we have a set state in an effect that
is out of the ordinary, especially if

243
00:16:12,784 --> 00:16:18,574
it's not after an await, for example,
on the initial use effect, I load the

244
00:16:18,574 --> 00:16:23,704
data and set the state with the data
loaded, but that requires an await

245
00:16:23,814 --> 00:16:25,314
that requires some asynchronicity.

246
00:16:25,814 --> 00:16:29,694
If there's no asynchronicity, this
means that this component renders.

247
00:16:30,194 --> 00:16:34,944
And then renders again, because
the effect is setting the state.

248
00:16:35,444 --> 00:16:37,514
How can we avoid that?

249
00:16:38,014 --> 00:16:41,054
we just go into intermediate variables.

250
00:16:41,554 --> 00:16:47,544
All the values that are needed for
this are in the props, or are in the

251
00:16:47,544 --> 00:16:49,284
state that we already calculated.

252
00:16:49,784 --> 00:16:53,054
So we don't need to set
the state in an effect.

253
00:16:53,164 --> 00:16:55,634
We just need to calculate the state.

254
00:16:56,134 --> 00:17:01,004
And then we have less re renders
and less unneeded polyplate.

255
00:17:01,504 --> 00:17:04,154
So let's make a summary for useState.

256
00:17:04,654 --> 00:17:09,124
Any value that affect the render
and of course, that should persist

257
00:17:09,134 --> 00:17:12,684
between renders, regardless of the
probes or other states, for example,

258
00:17:13,224 --> 00:17:18,814
the input values, the value in an
input field in a text field, another

259
00:17:18,834 --> 00:17:21,344
thing that we can use our references.

260
00:17:21,794 --> 00:17:25,084
Which are for component references,
that is a completely different thing.

261
00:17:25,584 --> 00:17:28,354
And also, values that do
not affect the render.

262
00:17:28,964 --> 00:17:33,024
Again, that should proceed between
renders of the props or the states.

263
00:17:33,764 --> 00:17:36,274
And finally, the intermediate state.

264
00:17:36,774 --> 00:17:40,374
Intermediate state should be
everything that can be computed

265
00:17:40,414 --> 00:17:42,634
from props or other states.

266
00:17:43,604 --> 00:17:48,164
If you can, if it can be computed, Use
intermediate states, don't use state

267
00:17:48,254 --> 00:17:53,834
because it just adds re renders, don't use
ref because it adds a needed boilerplate.

268
00:17:54,334 --> 00:17:55,934
Next one is memorization.

269
00:17:56,434 --> 00:18:00,519
With memorization, I'm going to be
quite fast, it's just about What

270
00:18:00,519 --> 00:18:02,209
should we memo and what should we not?

271
00:18:02,859 --> 00:18:06,439
I have here a few examples
here, a few examples.

272
00:18:06,879 --> 00:18:09,389
So for example, here
are memorizing a stream.

273
00:18:10,259 --> 00:18:11,219
Does it make sense?

274
00:18:11,319 --> 00:18:12,159
In general, no.

275
00:18:12,399 --> 00:18:18,549
What you want to memoize are
things that, doesn't, that between

276
00:18:18,549 --> 00:18:20,919
renders, they won't be the same.

277
00:18:21,809 --> 00:18:28,009
For example, which is mainly
reference, types, for example,

278
00:18:28,659 --> 00:18:31,159
objects, lists, and functions.

279
00:18:31,659 --> 00:18:36,239
Strings, numbers, booleans, they
are the same between renders.

280
00:18:37,179 --> 00:18:40,149
They can be compared,
while objects cannot.

281
00:18:40,359 --> 00:18:43,489
So you should only
memorize reference values.

282
00:18:43,989 --> 00:18:47,289
Another thing, you say, okay,
then I memorize this object.

283
00:18:48,009 --> 00:18:55,389
But this object is a spread, so you
are not really using the object, so you

284
00:18:55,649 --> 00:18:58,479
don't need to memoize this value neither.

285
00:18:58,979 --> 00:19:00,989
And for callbacks it's similar.

286
00:19:01,489 --> 00:19:06,979
For callbacks it's any function that
is passed directly to the component.

287
00:19:07,479 --> 00:19:13,809
if you are, if you have this
getComplexString that is pass, that

288
00:19:13,869 --> 00:19:18,209
is then called here, you don't need
to use a useCallback because what you

289
00:19:18,209 --> 00:19:19,939
are doing is calling the function.

290
00:19:20,439 --> 00:19:27,459
On the other hand, you need a prop that
is going to be an object, useUseMemo, or

291
00:19:27,459 --> 00:19:29,029
at least that is going to be an object.

292
00:19:29,529 --> 00:19:35,799
At least that it's going to be a prop,
useUseMemo, or a, another thing that

293
00:19:35,929 --> 00:19:41,459
you say, okay, it's a string, but
calculating this string requires some

294
00:19:41,519 --> 00:19:43,619
time, requires some complex calculation.

295
00:19:44,119 --> 00:19:49,309
Then instead of calling the
function every time, useUseMemo.

296
00:19:49,809 --> 00:19:51,289
So as a summary,

297
00:19:51,789 --> 00:19:56,879
useMemo is for reference types that
are used as props, reference types

298
00:19:56,879 --> 00:19:58,599
that are used as dependencies.

299
00:19:59,099 --> 00:20:00,559
and heavy calculations.

300
00:20:01,399 --> 00:20:03,029
That's all you need to use memo for.

301
00:20:03,529 --> 00:20:07,579
And use callbacks are for
functions used as prop and

302
00:20:07,579 --> 00:20:09,099
functions used as dependencies.

303
00:20:09,599 --> 00:20:12,989
But the function that are used as
prop, they are called to get the

304
00:20:12,989 --> 00:20:14,769
value that then will go into the prop.

305
00:20:14,779 --> 00:20:16,929
In those cases, you don't
need to use callback.

306
00:20:17,429 --> 00:20:19,289
And finally, the custom hooks.

307
00:20:19,519 --> 00:20:22,684
We are nearing the end,
so let's stay a bit more.

308
00:20:23,184 --> 00:20:29,464
Custom hooks is just hooks that you can
create yourself and what they're used for.

309
00:20:29,474 --> 00:20:35,724
For example, take this code that we
say, okay, if we create a listener

310
00:20:35,924 --> 00:20:40,804
that is a navigation button press
listener to receive a button ID.

311
00:20:40,864 --> 00:20:43,664
And I'm checking if the
button ID is the back button.

312
00:20:44,014 --> 00:20:49,924
And in that case, I call the callback
and then remove that listener.

313
00:20:49,925 --> 00:20:52,334
And this depends on the callback.

314
00:20:52,834 --> 00:20:53,524
Okay.

315
00:20:54,264 --> 00:20:58,324
That is a lot of code to
say, use back navigation.

316
00:20:58,824 --> 00:21:02,114
So we can create these hoops ourself.

317
00:21:02,709 --> 00:21:07,719
This code inside probably, or
something pretty similar to reduce

318
00:21:07,719 --> 00:21:09,659
the boilerplate and to share code.

319
00:21:10,159 --> 00:21:15,199
So yeah, with this we have, let's
call it repetition and it's way easier

320
00:21:15,219 --> 00:21:19,029
to maintain because now if we want
to change how the back navigation

321
00:21:19,029 --> 00:21:24,659
button works, we only change it
once inside the useBackNavigation.

322
00:21:24,999 --> 00:21:29,589
We don't have to change it in every single
place that we had all this boilerplate.

323
00:21:30,089 --> 00:21:34,629
And it's way easier to read because
you don't need to understand what

324
00:21:34,629 --> 00:21:37,429
is needed for back navigation.

325
00:21:37,439 --> 00:21:41,829
You only need to know that, yeah, you
are using the back navigation there.

326
00:21:42,329 --> 00:21:44,859
But hooks, with custom
hooks, we have to be careful.

327
00:21:45,459 --> 00:21:47,829
We have to make sure that they are stable.

328
00:21:48,329 --> 00:21:53,559
So for example, in this hook over here,
we have that is returning a function.

329
00:21:54,199 --> 00:21:56,649
But it's returning a different
function on every execution.

330
00:21:57,149 --> 00:22:00,349
So that may create problems to the caller.

331
00:22:00,849 --> 00:22:02,039
So what can we do?

332
00:22:02,739 --> 00:22:04,259
Just adding a use callback.

333
00:22:05,029 --> 00:22:06,479
Why do we want to do that?

334
00:22:06,480 --> 00:22:08,679
To be future proof.

335
00:22:09,449 --> 00:22:11,879
So we are most.

336
00:22:12,409 --> 00:22:13,969
stable as possible.

337
00:22:13,979 --> 00:22:20,999
So whenever someone uses us, don't have
to know if the hook is stable or not.

338
00:22:21,499 --> 00:22:24,659
And be more intuitive because
hooks are supposed to be a stable.

339
00:22:25,009 --> 00:22:28,479
You, you don't, you expect
that if you give the same.

340
00:22:29,009 --> 00:22:31,519
The arguments you receive the same value.

341
00:22:32,499 --> 00:22:34,559
that makes life easier for everyone.

342
00:22:35,059 --> 00:22:40,189
that's been all I hope you liked
the talk and thank you very much.

343
00:22:41,029 --> 00:22:46,649
If you want to contact me, as I said, you
can join the Mattermost community server.

344
00:22:46,649 --> 00:22:48,989
I'm over there every day.

345
00:22:49,779 --> 00:22:52,909
And if you want the slides,
you have there the link.

346
00:22:53,629 --> 00:22:54,579
Thank you very much.

347
00:22:54,839 --> 00:22:57,289
And great to have you here.

348
00:22:57,929 --> 00:22:58,529
Goodbye.

