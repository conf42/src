1
00:00:00,500 --> 00:00:01,130
Hi everyone.

2
00:00:01,310 --> 00:00:06,930
Today I'm excited to share with you the
story of our transitions from transitional

3
00:00:07,149 --> 00:00:11,950
cloud services to the serverless
architectures and a journey that not

4
00:00:11,950 --> 00:00:17,229
only simplified our operational, but also
delivered real and miserable benefits.

5
00:00:17,229 --> 00:00:22,034
Our ship to serverless was not just
about keeping up with the technology

6
00:00:22,034 --> 00:00:24,974
trends, it was driven by the need of.

7
00:00:25,025 --> 00:00:30,925
Tackle complexity, reduce cost, and
acceler accelerate our development

8
00:00:30,925 --> 00:00:35,735
process along the way we experience
significant cost saving and a

9
00:00:35,885 --> 00:00:41,645
drastic reduction in incident and a
boost in our deployment frequency.

10
00:00:41,645 --> 00:00:44,275
Also in the next few slides.

11
00:00:44,430 --> 00:00:49,780
I will talk you through the key
challenges we faced and how we implemented

12
00:00:49,780 --> 00:00:56,634
serverless ens, and the impact it had
on on our cost and incident management

13
00:00:56,634 --> 00:00:58,444
and overall developer productivity.

14
00:00:58,714 --> 00:00:59,524
Let's dive in.

15
00:00:59,614 --> 00:01:01,144
Let's move to the second slide.

16
00:01:01,644 --> 00:01:02,004
Okay.

17
00:01:02,544 --> 00:01:07,224
So in this slide our initial
infrastructure challenges, that is what

18
00:01:07,224 --> 00:01:08,984
I am just going to discuss all about.

19
00:01:09,554 --> 00:01:13,464
So at the outset, we are facing
mounting challenges with our

20
00:01:14,014 --> 00:01:15,754
like traditional infrastructures.

21
00:01:16,054 --> 00:01:20,054
So as our business grow did
our infrastructure expenses,

22
00:01:20,114 --> 00:01:22,804
unfortunately, this cost were growing.

23
00:01:23,074 --> 00:01:24,754
Then our actual business needs.

24
00:01:25,414 --> 00:01:30,764
So underutilized servers were
draining resources and leading to the

25
00:01:30,764 --> 00:01:34,024
inefficiency and unnecessary expenses.

26
00:01:34,524 --> 00:01:39,054
So our team were spending an over
William amount of time managing

27
00:01:39,054 --> 00:01:40,854
the servers and infrastructures.

28
00:01:40,904 --> 00:01:46,274
Those type of things and these constant
operational took focus away from what

29
00:01:46,484 --> 00:01:51,424
truly mattered and core innovations and
building new features for our users.

30
00:01:51,924 --> 00:01:56,504
Now our traditional architectures
was simply not built to

31
00:01:56,504 --> 00:01:58,384
handle sudden traffic spikes.

32
00:01:58,924 --> 00:02:03,634
So these limitations caused the
significant issues including the

33
00:02:03,634 --> 00:02:07,984
customer facing failures which
impacted user experience and trust.

34
00:02:08,433 --> 00:02:11,623
So these challenges made it
clear that we need the change.

35
00:02:12,123 --> 00:02:15,453
Okay, now let's move to
the second third slide.

36
00:02:15,953 --> 00:02:19,733
So here I'll be discussing like
why we choose the serverless.

37
00:02:20,423 --> 00:02:22,253
So there are a couple of
reasons like we choose.

38
00:02:22,283 --> 00:02:24,833
Serverless has a strategic
force multipliers.

39
00:02:24,883 --> 00:02:29,733
Not because it's a one size fits all
solution, but because it gives us a

40
00:02:29,763 --> 00:02:35,113
distinct advantage in terms of speeds,
cost, efficiency, and scalability.

41
00:02:35,613 --> 00:02:39,813
By adopting serverless, how our
engineers and can focus on building

42
00:02:40,173 --> 00:02:42,033
features and solving a business problem.

43
00:02:42,033 --> 00:02:46,033
Instead of spending time on managing
and maintenance infrastructures,

44
00:02:46,933 --> 00:02:51,333
serverless architectures automatically
scales to meet the traffic demands,

45
00:02:51,363 --> 00:02:56,013
ensuring the optimal resource
utilizations without manual intervention.

46
00:02:56,523 --> 00:02:59,244
Now paper use models
in these sections like.

47
00:02:59,419 --> 00:03:04,148
Where like with the serverless, we only
only pay the actual compute resource use.

48
00:03:04,148 --> 00:03:07,658
So that is the most important thing,
which provides the cost efficiency and

49
00:03:07,658 --> 00:03:09,919
reduce the need of over provisioning.

50
00:03:09,969 --> 00:03:14,219
And these combinations of agility
and the cost effectiveness and

51
00:03:14,219 --> 00:03:18,384
the scalability made serverless
the right choice for our needs.

52
00:03:18,884 --> 00:03:19,174
Yeah.

53
00:03:19,674 --> 00:03:23,454
Here I'll be discussing about the,
what the technical approaches we took.

54
00:03:23,454 --> 00:03:26,974
And because the initial project
I actually took like a we had

55
00:03:26,974 --> 00:03:28,924
decided to go with the AWS services.

56
00:03:29,314 --> 00:03:34,388
So to address our challenges,
we turned to the AWS Suite of

57
00:03:34,388 --> 00:03:35,859
Power Pool serverless services.

58
00:03:36,374 --> 00:03:42,313
So services like AWS Lambda the Core
Compute Service for running our business

59
00:03:42,313 --> 00:03:47,653
logic in a serverless environment, Lambda
allows us to execute the code without

60
00:03:47,813 --> 00:03:51,233
managing the servers, automatically
scaling based on the demands.

61
00:03:51,773 --> 00:03:55,313
And another one, like the Dynamo db
that is another service we choose.

62
00:03:55,313 --> 00:03:59,093
It is a fully managed NoSQL database
with auto scaling capabilities.

63
00:03:59,463 --> 00:04:04,803
DynamoDB adjust to traffic changes
in real time, ensuring that high

64
00:04:04,803 --> 00:04:08,903
availability and the performance
and seamless data management also.

65
00:04:09,713 --> 00:04:13,653
And and another thing is like a API
gateway, which is a fully managed

66
00:04:13,653 --> 00:04:15,763
service for creating and managing and.

67
00:04:15,808 --> 00:04:22,338
Securing the API endpoints at scale
API gateway simplifies API deployment,

68
00:04:22,338 --> 00:04:27,438
allowing us to connect our frontend
and backend services effortlessly.

69
00:04:28,369 --> 00:04:31,878
Another one like the S3 S3 is another
major component, like when we are

70
00:04:31,978 --> 00:04:36,328
driving through any development cycle
or any applications to store the data.

71
00:04:36,658 --> 00:04:41,038
So highly durable pro objects storage
for the static assets and the data.

72
00:04:41,368 --> 00:04:43,558
AWS S3 provides reliability.

73
00:04:43,648 --> 00:04:48,018
Reliability and the cost effective
storage for everything from image

74
00:04:48,108 --> 00:04:51,828
to backup, ensuring the seamless
data retrieval and the scalability.

75
00:04:52,328 --> 00:04:54,818
Another important thing
is the CloudWatch logs.

76
00:04:54,818 --> 00:04:59,708
So a monitoring and logging service
that helps us to track and analyze

77
00:04:59,708 --> 00:05:01,688
the log data in a real time.

78
00:05:02,468 --> 00:05:07,048
CloudWatch provides insights into the
system performance and operational health,

79
00:05:07,408 --> 00:05:09,928
enabling us to detect the issues early.

80
00:05:10,233 --> 00:05:12,423
And optimize optimize our infrastructure.

81
00:05:12,423 --> 00:05:16,423
So it is a really very important component
to choose like for the logging purpose.

82
00:05:16,783 --> 00:05:19,763
Another one like the though it is not
mentioned here, but there are a couple of

83
00:05:19,853 --> 00:05:24,083
other component like the Secret Manager,
which is a service to secure store

84
00:05:24,083 --> 00:05:28,553
manage sensitive informations like the
API keys currencies and other secrets.

85
00:05:28,553 --> 00:05:32,978
Secret Manager help us, helps us to
ensure the sensitivity data in securely

86
00:05:32,978 --> 00:05:35,553
handle without the risk of exposure.

87
00:05:36,133 --> 00:05:39,183
And the for izing
containerizing the applications.

88
00:05:39,183 --> 00:05:44,103
We use the Docker to ensure the
consistency across the environments and

89
00:05:44,373 --> 00:05:48,583
Kubernetes, specifically the Amazon elect
elastic Kubernetes service, like it is

90
00:05:48,583 --> 00:05:52,843
called, like EKS, allows us to scale
and manage microservices efficiently.

91
00:05:53,143 --> 00:05:57,273
Together, these services enable us
to build flexibility and reliable

92
00:05:57,273 --> 00:05:58,873
service serverless architectures.

93
00:05:59,533 --> 00:06:02,953
With these services in place, we were
able to achieve the scalability and

94
00:06:02,953 --> 00:06:04,333
the efficiency of what we needed.

95
00:06:04,833 --> 00:06:06,978
Let's move to the next one.

96
00:06:07,478 --> 00:06:11,623
And here I'll be discussing regarding
overcoming initial resistance.

97
00:06:11,623 --> 00:06:16,493
Like a, like any major change we face
some resistance along, along the way.

98
00:06:17,033 --> 00:06:20,893
So many engineers initially doubted
that the real world benefits

99
00:06:20,893 --> 00:06:22,123
and the serverless architecture.

100
00:06:22,123 --> 00:06:25,423
So there were the concern about
the performance, scalability,

101
00:06:25,423 --> 00:06:26,898
and the potential risk of.

102
00:06:27,893 --> 00:06:31,493
From that additional infrastructure
to address this concern, we

103
00:06:31,493 --> 00:06:35,063
conducted a couple of works of proof
of concepts like a POC projects.

104
00:06:35,063 --> 00:06:40,083
And these hands-on demonstration actually
helped the team to see the practical value

105
00:06:40,183 --> 00:06:44,418
of serverless and providing the clarity
and how it could solve our challenges.

106
00:06:44,918 --> 00:06:50,198
Now we identified the supported and
early adapters within the teams who

107
00:06:50,198 --> 00:06:54,948
embraced our list and the server, and
focused successful implementations.

108
00:06:55,638 --> 00:06:59,568
Their positive experience helped building
confidence across the organizations.

109
00:07:00,083 --> 00:07:03,833
And then finally, we use the metrics
to validate the business impact of

110
00:07:03,833 --> 00:07:08,823
the serverless transitions and data
on cost saving, incident reduction,

111
00:07:08,823 --> 00:07:13,864
and improved deployment frequency,
provided concrete evidence of benefits.

112
00:07:13,864 --> 00:07:17,924
So over the time this helps shift
the mindset across the team and

113
00:07:17,924 --> 00:07:20,414
build strong support for our journey.

114
00:07:21,404 --> 00:07:22,634
Let's move to the next.

115
00:07:23,134 --> 00:07:27,724
Our implementation strategy was
a step by step process to ensure

116
00:07:27,784 --> 00:07:29,254
a smooth transition actually.

117
00:07:29,794 --> 00:07:33,484
So the first step was to break
down our monolithic applications

118
00:07:33,674 --> 00:07:34,844
into the smaller applications.

119
00:07:34,894 --> 00:07:36,454
Functions side pieces.

120
00:07:36,724 --> 00:07:39,904
By identifying key components,
we were able to transition a more

121
00:07:39,904 --> 00:07:41,674
modular and scalable architecture.

122
00:07:41,674 --> 00:07:43,024
So that is the first point we took it.

123
00:07:43,744 --> 00:07:47,374
And then the pilot project, like
we began by launching the pilot

124
00:07:47,374 --> 00:07:49,254
project with non-critical workloads.

125
00:07:49,614 --> 00:07:54,294
And this allowed us to experiment
and refine our serverless approach

126
00:07:54,344 --> 00:07:58,684
without risking core operations
while also gaining valuable

127
00:07:58,684 --> 00:08:00,784
insight for larger implementations.

128
00:08:01,284 --> 00:08:05,754
Our next step was to refactor existing
applications to make them stateless,

129
00:08:05,754 --> 00:08:09,754
ensure they are they were like
optimized for serverless executions.

130
00:08:10,084 --> 00:08:14,144
This process involve adapting
our code and workflows to align

131
00:08:14,144 --> 00:08:14,919
with the serverless model.

132
00:08:15,479 --> 00:08:19,704
I. And again, like another
one, like the CICD pipeline.

133
00:08:19,704 --> 00:08:22,974
To ensure the smooth deployment, we
focused on building the optimized

134
00:08:23,424 --> 00:08:25,414
serverless specific CICD pipelines.

135
00:08:25,464 --> 00:08:29,004
This allowed for a continuous
integration and delivery tailored

136
00:08:29,004 --> 00:08:33,364
alert for a serverless environment,
enabling fast and reliable updates.

137
00:08:33,904 --> 00:08:39,594
This strategy allows allowed us actually
to success and scale progressively.

138
00:08:40,159 --> 00:08:44,489
And NCO, the transition was as
seamless as possible, moving to

139
00:08:44,489 --> 00:08:49,339
the next, yeah, as with the complex
system, observable observability

140
00:08:49,389 --> 00:08:50,949
become a significant challenge.

141
00:08:51,309 --> 00:08:55,199
And dis distributed tracing across
the multiple serverless functions

142
00:08:55,409 --> 00:09:00,349
was inherently more complex and
the execution context for each

143
00:09:00,349 --> 00:09:05,299
functions was more limited, making it
harder to gather detailed insights.

144
00:09:05,839 --> 00:09:06,889
We also had.

145
00:09:06,904 --> 00:09:12,524
To content with unpredictable
cold start latency with impacted

146
00:09:12,524 --> 00:09:16,724
performance, as well as highly valu,
highly variable resource consumptions.

147
00:09:17,304 --> 00:09:21,374
Making consistent monitoring and
difficulties to tackle these challenges.

148
00:09:21,374 --> 00:09:25,634
We implemented several keys of solutions
are like fastly introduced end to end

149
00:09:25,634 --> 00:09:29,984
correlation ID to track the request
across the functions, providing a

150
00:09:29,984 --> 00:09:32,494
full view of each request journey.

151
00:09:33,214 --> 00:09:38,374
And we then deployed the centralized
logging with structured data, ensuring we

152
00:09:38,374 --> 00:09:41,374
could capture and analyze log effectively.

153
00:09:42,094 --> 00:09:46,674
Custom function specific dashboards
allowed us to monitor performance on a

154
00:09:46,674 --> 00:09:51,624
granular level and a dynamic alerting
based on the statistical baselines

155
00:09:51,624 --> 00:09:54,234
helped us to detect issues early today.

156
00:09:54,234 --> 00:09:57,794
Our sophisticated monitor monitoring
infrastructure provides the comprehensive

157
00:09:57,794 --> 00:10:00,104
visibility into our wireless ecosystem.

158
00:10:00,149 --> 00:10:05,199
And allowing us to have proactive detect
issues and resolve them rapidly, ensuring

159
00:10:05,199 --> 00:10:07,358
a smooth and efficient operations.

160
00:10:07,858 --> 00:10:12,318
Now here to ensure our serverless
journey remain cost effective.

161
00:10:12,408 --> 00:10:17,459
And we implemented several key op cost
optimization strategies right side

162
00:10:17,969 --> 00:10:19,739
function resources is one of them.

163
00:10:19,739 --> 00:10:24,939
Memory allocation has a. Direct
impact on both performance and cost.

164
00:10:25,269 --> 00:10:28,479
To optimize these, we implemented
automated testing to determine the

165
00:10:29,289 --> 00:10:33,598
optimum memory settings for each
functions, and ensuring that we are

166
00:10:33,598 --> 00:10:35,549
using the resources efficiently.

167
00:10:35,579 --> 00:10:37,759
We without our provisioning.

168
00:10:38,628 --> 00:10:41,579
And another one, like a
optimized cold starts.

169
00:10:41,579 --> 00:10:44,968
And yeah, like cold start latencies can
significantly affect the performance,

170
00:10:44,968 --> 00:10:46,888
especially during traffic spike.

171
00:10:47,218 --> 00:10:50,459
So to mitigate this, we reduced
the size of our deployment package

172
00:10:50,459 --> 00:10:53,689
and implemented the provision
concurrency for critical parts.

173
00:10:53,868 --> 00:10:57,949
This strategy ensured a minimum cold
start impact even during the traffic

174
00:10:58,028 --> 00:10:59,168
traffic functionalities and all.

175
00:10:59,668 --> 00:11:05,183
And monitoring the execution s by closely
we were able to able to identify the

176
00:11:05,183 --> 00:11:07,403
functions approaching timeout thresholds.

177
00:11:07,703 --> 00:11:12,424
These proactive monitoring prevent
costly timeout loops and helped us to

178
00:11:12,429 --> 00:11:16,544
avoid the execution in efficiencies
and saving both time and money.

179
00:11:17,044 --> 00:11:21,634
We introduced the tagging standards
and deploy deployment policies to keep

180
00:11:21,634 --> 00:11:25,594
our serverless architecture organized
and avoid unnecessary resources.

181
00:11:26,134 --> 00:11:30,804
So governance ensured that serverless
resources were used strategically,

182
00:11:31,164 --> 00:11:35,004
and that the infrastructure remained
manageable and cost effective.

183
00:11:35,064 --> 00:11:39,874
Together these strategies allowed us to
optimize both performance cost across

184
00:11:39,874 --> 00:11:41,524
us across our serverless architecture.

185
00:11:42,024 --> 00:11:45,314
So this slide we'll discuss
about the measurable result.

186
00:11:45,314 --> 00:11:45,614
Yes.

187
00:11:46,094 --> 00:11:49,204
And looks looking at the result,
our serverless transitions.

188
00:11:49,214 --> 00:11:51,634
We have some truly impactful outcomes.

189
00:11:52,084 --> 00:11:56,944
So we successfully decreased our
infrastructure expenses by 62 percents.

190
00:11:57,334 --> 00:12:00,754
And thanks to the efficiency of
serverless architecture and optimize

191
00:12:00,814 --> 00:12:07,154
use of resources now, operational
failure were reduced by 78% leading to

192
00:12:07,154 --> 00:12:10,064
a more reliable and stable environment.

193
00:12:10,484 --> 00:12:14,274
So with few disruptions to our
services and customer experience.

194
00:12:15,009 --> 00:12:19,489
And our deployment frequency increased
by 3.5 times, enabling faster iter

195
00:12:19,489 --> 00:12:24,429
sense and more frequents driving
innovations and improvement for our

196
00:12:24,429 --> 00:12:25,809
users and which is a big achievement.

197
00:12:26,784 --> 00:12:30,874
Developers satisfactions
increase actually to 94%.

198
00:12:30,934 --> 00:12:36,064
And as the team spend more time focusing
on building the features less on managing

199
00:12:36,064 --> 00:12:40,274
infrastructure contributing to improved
improved user experience and productivity.

200
00:12:40,634 --> 00:12:44,324
So these reserves actually highlight
that, the tangible benefits observer

201
00:12:44,324 --> 00:12:48,104
list, both in terms of cost and
in terms of productivity as well.

202
00:12:48,604 --> 00:12:52,104
So as we reflect on our
serverless journey, we have

203
00:12:52,104 --> 00:12:54,054
learned a few keys of license.

204
00:12:54,834 --> 00:12:58,824
So the flexibility of serverless
architecture was allowed

205
00:12:58,854 --> 00:13:00,844
us to adapt quickly to.

206
00:13:01,339 --> 00:13:02,869
To changing her business needed.

207
00:13:03,089 --> 00:13:07,519
We have learned that this agility
is a key ops staying competitive

208
00:13:07,549 --> 00:13:09,989
in a fast and placed environment.

209
00:13:10,319 --> 00:13:12,689
Serverless is not only one-time solutions.

210
00:13:12,689 --> 00:13:17,229
We are constantly iterating on
architecture and process, ensuring

211
00:13:17,229 --> 00:13:20,139
that we are always optimizing
performance, cost, and efficiency.

212
00:13:20,654 --> 00:13:25,564
By freeing up the resource from
infrastructure management our teams

213
00:13:25,654 --> 00:13:30,484
have been able to focus more on product
development and innovations which is

214
00:13:30,514 --> 00:13:32,804
driving the future of our business.

215
00:13:32,804 --> 00:13:37,309
I. And looking ahead, we plan to
extend our serverless architecture

216
00:13:37,309 --> 00:13:41,509
to more workloads continuing refining
our harm monitoring systems as well.

217
00:13:41,509 --> 00:13:45,479
And explore new AWS services
that can drive even more

218
00:13:45,479 --> 00:13:47,009
efficiencies and capabilities.

219
00:13:47,069 --> 00:13:52,099
So the journeys from over and
the future looks bright, I think.

220
00:13:52,599 --> 00:13:54,969
Now as we continue our serverless journey.

221
00:13:54,969 --> 00:14:00,299
So we I want to provide the resources
to help you on our own path.

222
00:14:00,669 --> 00:14:02,589
It'll be like the next step as well.

223
00:14:02,959 --> 00:14:08,009
Access to our comprehensive serverless
templates and architectures patterns.

224
00:14:08,009 --> 00:14:11,059
These resources provide
a solid foundations.

225
00:14:11,819 --> 00:14:16,494
For your own serverless implementation
and saving your time and effort, and

226
00:14:16,494 --> 00:14:18,924
reviewing our architecture decisions and.

227
00:14:19,424 --> 00:14:21,164
We made throughout the journey.

228
00:14:21,234 --> 00:14:25,664
These records will help to guide
your decision making process and

229
00:14:25,664 --> 00:14:27,864
provide insight into the challenges.

230
00:14:27,914 --> 00:14:33,309
We overcome and use open source utilities
to taste and the benchmark performance.

231
00:14:33,309 --> 00:14:37,119
So that is mostly important thing,
and these tools are designed to help

232
00:14:37,119 --> 00:14:41,399
and you measure the efficiency of
your serverless architecture and

233
00:14:41,399 --> 00:14:43,754
optimize it for your own needs.

234
00:14:44,254 --> 00:14:47,904
Join these channels what I mentioned
here, and to connect with experts

235
00:14:47,904 --> 00:14:51,874
and peer who can actually provide
the valuable implementation advice

236
00:14:51,874 --> 00:14:55,584
and share with best practices and
collaborate and ask the questions and

237
00:14:55,614 --> 00:14:57,714
learn from others in the community.

238
00:14:57,714 --> 00:14:58,224
And same thing.

239
00:14:58,224 --> 00:15:02,919
I actually followed, like during my entire
journey, and these resources are here

240
00:15:02,919 --> 00:15:05,769
to help you, you help you and succeed.

241
00:15:06,294 --> 00:15:12,054
And I also look I also look forward to
supporting your serverless endeavor.

242
00:15:12,154 --> 00:15:13,384
In future if you want.

243
00:15:13,854 --> 00:15:14,364
That's fine.

244
00:15:14,364 --> 00:15:15,054
You can contact me.

245
00:15:15,104 --> 00:15:15,314
Okay.

246
00:15:15,644 --> 00:15:21,944
And so I appreciate your time and
today I hope my HR D has inspired you

247
00:15:22,374 --> 00:15:26,754
to explore the power and serverless
architecture and for your own project.

248
00:15:27,324 --> 00:15:30,474
If you have any questions, if
you want to learn more, feel free

249
00:15:30,474 --> 00:15:34,004
to reach out to me and I have my
contact informations and LinkedIn

250
00:15:34,004 --> 00:15:36,424
here so you can message me anytime.

251
00:15:36,484 --> 00:15:37,884
I will respond as per my time.

252
00:15:38,514 --> 00:15:39,504
Thank you so much.

