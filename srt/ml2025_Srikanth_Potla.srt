1
00:00:02,340 --> 00:00:02,820
Hey everyone.

2
00:00:04,470 --> 00:00:08,550
I'm Portola Senior product Security
engineer, and today I'll be talking

3
00:00:08,550 --> 00:00:12,450
about how machine learning is
transforming security in DevOps

4
00:00:12,450 --> 00:00:14,610
pipelines for cloud native applications.

5
00:00:15,570 --> 00:00:20,370
We are facing a critical inflection
point in cybersecurity with 94% of

6
00:00:20,375 --> 00:00:23,945
enterprises now using cloud services
and AI powered cyber attacks.

7
00:00:24,495 --> 00:00:27,015
Increasing by 63% since 2022.

8
00:00:27,435 --> 00:00:30,615
Traditional security approaches
simply can't keep the pace anymore.

9
00:00:31,275 --> 00:00:34,455
What I'll share today is how
the machine learning algorithms

10
00:00:34,485 --> 00:00:35,775
integrated into DevSecOps.

11
00:00:35,775 --> 00:00:39,915
Pipelines are revolutionizing the cloud
security while allowing the organizations

12
00:00:39,915 --> 00:00:41,715
to maintain rapid development cycles.

13
00:00:42,254 --> 00:00:46,785
The data is compelling that organizations
using machine learning powered security

14
00:00:46,785 --> 00:00:53,175
tools experience 71% fewer security
incidents and deploy the secure code

15
00:00:53,175 --> 00:00:56,504
three times faster than those using
the conventional security models.

16
00:00:59,295 --> 00:01:03,015
Now let's dive into the
changing security landscape.

17
00:01:03,345 --> 00:01:06,465
Let's first understand that
evolving security landscape that's

18
00:01:06,465 --> 00:01:09,795
driving this transformation,
we are seeing an unprecedented.

19
00:01:10,824 --> 00:01:15,534
Cloud adoption stage with 94% of
enterprises now using cloud services, this

20
00:01:15,534 --> 00:01:20,124
creates complex security challenges across
increasingly distributed architectures.

21
00:01:20,664 --> 00:01:23,784
At the same time, cyber attacks
leveraging artificial intelligence

22
00:01:23,784 --> 00:01:26,124
have increased 63% since 2022.

23
00:01:27,024 --> 00:01:30,774
Outpacing the traditional defense
mechanisms, the attackers are

24
00:01:30,774 --> 00:01:33,474
getting smarter and we need
to match that intelligence.

25
00:01:33,504 --> 00:01:36,954
This creates what I call the
security development gap.

26
00:01:37,659 --> 00:01:40,779
Conventional security models simply
cannot match the speed of modern

27
00:01:40,779 --> 00:01:44,020
development cycles, creating the
dangerous vulnerability windows.

28
00:01:44,469 --> 00:01:49,029
And the good news is a new defense
paradigm has emerged machine

29
00:01:49,029 --> 00:01:54,189
learning enhanced security tools
provide a 71% reduction in security

30
00:01:54,189 --> 00:01:58,270
incident while enabling the
three time faster deployments.

31
00:01:58,689 --> 00:02:00,904
This is the transformation
we'll explore today.

32
00:02:03,519 --> 00:02:07,949
Now coming to the machine learning
enhanced security tools performance

33
00:02:07,949 --> 00:02:12,690
metrics, the data behind machine learning
enhanced security tools is compelling.

34
00:02:13,019 --> 00:02:15,269
Let me walk you through the
key performance metrics.

35
00:02:16,109 --> 00:02:19,589
The organization's implementing
machine learning powered security tools

36
00:02:19,589 --> 00:02:24,119
have witnessed dramatic improvements
across the key performance indicators.

37
00:02:24,539 --> 00:02:29,399
The most significant gains have
been in container security with 89%

38
00:02:29,399 --> 00:02:33,419
reduction in vulnerabilities and the
meantime to remediation, which decrease

39
00:02:33,419 --> 00:02:35,909
from 38 days to just over four days.

40
00:02:36,599 --> 00:02:38,459
That's an 89% improvement.

41
00:02:38,940 --> 00:02:40,859
These are in the theoretical numbers.

42
00:02:40,859 --> 00:02:44,219
These metrics are based on the
data collected from over 500

43
00:02:44,219 --> 00:02:45,719
enterprise implementations.

44
00:02:46,289 --> 00:02:48,209
Notice the development speed bar.

45
00:02:48,359 --> 00:02:52,859
It's off the charts because these
tools enable security to become an

46
00:02:52,859 --> 00:02:54,779
accelerator rather than a blocker.

47
00:02:57,750 --> 00:03:00,479
So supervised learning for
vulnerability detection.

48
00:03:00,539 --> 00:03:04,005
Now let's look at these specific
machine learning approaches.

49
00:03:04,545 --> 00:03:10,334
Starting with supervised starting
with the supervised learning models

50
00:03:10,334 --> 00:03:13,664
that are trained on mass data sets
of known vulnerabilities, code

51
00:03:13,664 --> 00:03:15,614
patterns, and the associated risks.

52
00:03:16,004 --> 00:03:20,834
These models learn to identify similar
patterns in new code flagging potential

53
00:03:20,834 --> 00:03:22,874
security issues before the deployment.

54
00:03:23,114 --> 00:03:26,354
The crucial advantages that by
continuously learning from new

55
00:03:26,354 --> 00:03:31,304
vulnerability data, these systems
improve detection accuracy over time and

56
00:03:31,304 --> 00:03:32,714
adapt to the emerging threat patterns.

57
00:03:33,344 --> 00:03:38,424
Let me share a concrete implementation
example with Snyk In 2024 Snyk Machine

58
00:03:38,424 --> 00:03:42,684
Learning enhanced scanning detected
78% of vulnerabilities before the

59
00:03:42,684 --> 00:03:44,994
production compared to just 31%.

60
00:03:44,994 --> 00:03:48,474
With traditional static analysis
tool, the tool is analyzed both

61
00:03:48,474 --> 00:03:50,904
application code and the dependencies.

62
00:03:52,044 --> 00:03:55,824
The integration into Series CICD pipelines
allows for automatic vulnerability

63
00:03:55,824 --> 00:03:59,484
detection, identification, using
commit and build phases, allowing.

64
00:04:00,204 --> 00:04:02,664
Developers to address
the issues immediately.

65
00:04:04,554 --> 00:04:08,544
Now, let's dive into the unsupervised
learning for an anomaly detection.

66
00:04:09,114 --> 00:04:13,764
While supervised learning is excellent
for non threats, unsupervised learning

67
00:04:13,764 --> 00:04:18,594
excels at identifying previously unknown
threats by detecting deviations from

68
00:04:18,624 --> 00:04:20,424
the established behavioral patterns.

69
00:04:20,994 --> 00:04:25,134
This approach involves four key
elements, which is behavioral

70
00:04:25,134 --> 00:04:29,004
analysis, identifying the patterns
outside normal operational parameters.

71
00:04:29,755 --> 00:04:34,115
The baseline establishment, creating
normal operation profiles across

72
00:04:34,115 --> 00:04:38,795
the environments and the continuous
monitoring, the real time inspection of

73
00:04:38,825 --> 00:04:40,805
applications and infrastructure behavior.

74
00:04:41,315 --> 00:04:45,815
And the last one is self-learning models
adapting to evolving the environments

75
00:04:45,815 --> 00:04:47,495
without explicit programming.

76
00:04:48,005 --> 00:04:52,865
Unlike the rule-based systems, these
models can spot novel attack vectors

77
00:04:52,865 --> 00:04:57,275
and zero vulnerabilities by recognizing
when the systems behave abnormally.

78
00:04:57,875 --> 00:05:00,575
This approach has been particularly
effective for runtime threat

79
00:05:00,575 --> 00:05:02,615
detection in container environments.

80
00:05:04,325 --> 00:05:06,935
So the machine learning,
enhanced container security.

81
00:05:08,075 --> 00:05:11,675
Speaking of containers, organizations
implementing machine learning,

82
00:05:11,675 --> 00:05:16,655
enhanced container security solutions
have reduced vulnerabilities by 89%

83
00:05:16,655 --> 00:05:18,200
compared to the traditional approaches.

84
00:05:18,605 --> 00:05:20,465
This comprehensive prediction covers the.

85
00:05:21,109 --> 00:05:25,190
Entire container lifecycle from
build to runtime and ensuring that

86
00:05:25,190 --> 00:05:29,419
micro microservices remain secure
without sacrificing the development

87
00:05:29,419 --> 00:05:32,179
velocity, the production span.

88
00:05:32,719 --> 00:05:34,820
So like four critical areas.

89
00:05:35,179 --> 00:05:36,739
First thing is image scanning.

90
00:05:36,799 --> 00:05:39,950
Machine learning analyzes the container
images for non vulnerabilities

91
00:05:39,950 --> 00:05:41,390
and suspicious patterns.

92
00:05:41,719 --> 00:05:43,309
Second one is the runtime protection.

93
00:05:43,849 --> 00:05:47,809
The behavioral analysis identifies the
anonymous container activities in real

94
00:05:47,809 --> 00:05:52,759
time, and network security monitors the
container communications for unexpected

95
00:05:52,759 --> 00:05:58,429
connection patterns, and the configuration
analysis evaluates the configurations

96
00:05:58,429 --> 00:05:59,989
against the security best practices.

97
00:06:02,090 --> 00:06:07,429
So natural language processing for
ISE security infrastructure score has

98
00:06:07,969 --> 00:06:12,559
revolutionized cloud deployments, but it
also creates a new security challenges.

99
00:06:12,919 --> 00:06:17,270
Natural language processing techniques
have now transformed ISE security by

100
00:06:17,270 --> 00:06:21,199
understanding the semantic meaning
behind cloud configuration files.

101
00:06:22,249 --> 00:06:25,760
So this approach enables
security systems to identify the.

102
00:06:27,020 --> 00:06:31,010
Misconfigurations risks that
traditional rejects based scanning

103
00:06:31,010 --> 00:06:36,440
might miss, such as overly permissions,
the access policies or insecure

104
00:06:36,490 --> 00:06:38,440
default settings in cloud resources.

105
00:06:38,950 --> 00:06:44,320
The NLP approach involves like four
steps, which is the code analysis, the

106
00:06:44,320 --> 00:06:48,465
passing infrastructure code to understand
resources and the relationships.

107
00:06:49,315 --> 00:06:53,785
Context understanding, grasping
the infrastructure intent beyond

108
00:06:53,785 --> 00:06:57,235
the simple pattern matching
and the risk identification.

109
00:06:57,235 --> 00:07:01,615
Identifying the mis configuration risks
and compliance violations, remediation

110
00:07:01,615 --> 00:07:06,925
suggestions, providing the code level
fixes for identified security issues.

111
00:07:09,440 --> 00:07:13,345
Now let's dive into the machine learning
augmented CICD security pipeline.

112
00:07:14,110 --> 00:07:17,350
When we bring these technologies
together, we get comprehensive

113
00:07:17,350 --> 00:07:20,830
machine learning, augmented CICD
security pipeline that covers every

114
00:07:20,830 --> 00:07:22,930
stage of development in the code.

115
00:07:22,930 --> 00:07:26,590
Commit stage, pre-commit hooks, the
machine learning powered code analysis to

116
00:07:26,590 --> 00:07:30,460
catch vulnerabilities before they enter
the code base during the build stage,

117
00:07:30,460 --> 00:07:35,410
container measures and dependencies are
scanned by supervised learning models for

118
00:07:36,099 --> 00:07:38,105
non vulnerabilities in the test phase.

119
00:07:39,115 --> 00:07:42,745
Automated security testing users,
machine learning to generate test

120
00:07:42,745 --> 00:07:46,345
cases that target likely vulnerability
points at the deployment stage.

121
00:07:46,705 --> 00:07:51,565
Infrastructure scanning with NLP
ensures secure cloud configurations

122
00:07:51,565 --> 00:07:53,935
before provisioning during the runtime.

123
00:07:54,025 --> 00:07:58,105
Unsupervised learning models monitor
application behavior to detect

124
00:07:58,105 --> 00:08:00,370
anomalies and the potential breaches.

125
00:08:01,240 --> 00:08:03,370
Organizations implementing
machine learning.

126
00:08:03,370 --> 00:08:08,680
Augmented CI CD pipelines reduced
meantime to remediation from 38 days to

127
00:08:08,680 --> 00:08:14,050
just over four days, and a dramatic 89%
implement in vulnerability response time.

128
00:08:14,500 --> 00:08:17,830
This acceleration stems from
earlier detection and more

129
00:08:18,220 --> 00:08:19,810
accurate vulnerability information.

130
00:08:21,490 --> 00:08:23,395
Now let's deep dive into a case study.

131
00:08:24,310 --> 00:08:28,970
So a financial service organization
implemented one of the security measures.

132
00:08:29,180 --> 00:08:30,860
Let me share a real world case study.

133
00:08:31,550 --> 00:08:36,289
So a leading financial services company
struggled with releasing updates to their

134
00:08:36,380 --> 00:08:42,710
mobile blanking platform, which secure
peer reviews taking an over like 27 days.

135
00:08:43,100 --> 00:08:47,330
This created a significant
challenge for their business after

136
00:08:47,330 --> 00:08:50,930
implementing and machine learning
security pipeline that cloud con.

137
00:08:51,470 --> 00:08:55,170
The cloud that could prioritize
vulnerabilities and automatically

138
00:08:55,170 --> 00:08:57,030
generate full request for common issues.

139
00:08:57,820 --> 00:09:02,560
They reduced security review time to
just two days while simultaneously

140
00:09:02,560 --> 00:09:04,750
improving their overall security patterns.

141
00:09:05,170 --> 00:09:09,500
Most impressively, their automated
remediation system now handles 76% of

142
00:09:10,580 --> 00:09:14,540
common security issues without human
intervention, allowing the security

143
00:09:14,540 --> 00:09:19,310
team to more focus on more of the
complex threats and the strategic.

144
00:09:20,315 --> 00:09:21,095
Improvements.

145
00:09:22,865 --> 00:09:25,835
Now let's deep dive into the
implementation framework.

146
00:09:26,405 --> 00:09:30,935
If you convinced and want to implement
this approach in your organization, here's

147
00:09:30,935 --> 00:09:32,615
a practical implementation framework.

148
00:09:33,125 --> 00:09:34,895
Start with assessment and planning.

149
00:09:35,315 --> 00:09:37,865
Document the existing
security controls and gaps.

150
00:09:37,925 --> 00:09:40,625
Define the success metrics
aligned with the business goals.

151
00:09:41,225 --> 00:09:43,325
Build a cross-functional
implementation team.

152
00:09:44,435 --> 00:09:46,415
Then move on to the
initial implementation.

153
00:09:46,505 --> 00:09:48,755
Implement the code scanning
in the CI pipeline.

154
00:09:48,905 --> 00:09:51,775
There are a lot of tools in
the market that we could use.

155
00:09:52,225 --> 00:09:55,704
Deploy the container security
monitoring, establish the feedback

156
00:09:55,704 --> 00:09:57,025
loops for model improvement.

157
00:09:57,715 --> 00:10:00,655
Finally, advance to advanced integration.

158
00:10:00,895 --> 00:10:05,215
Deploy unsupervised models for runtime
protection in form of automation.

159
00:10:05,905 --> 00:10:10,074
Implement the automated remediation
workflows, create customized

160
00:10:10,135 --> 00:10:11,395
machine learning models too.

161
00:10:12,010 --> 00:10:13,540
For the unique environments.

162
00:10:16,400 --> 00:10:18,200
Key takeaways and next steps.

163
00:10:18,320 --> 00:10:22,700
Let me conclude this with a key
takeaway from our discussion today.

164
00:10:23,270 --> 00:10:24,530
Performance advantages.

165
00:10:24,560 --> 00:10:29,855
If we imp if we are able to implement
this, we will likely be having 71%

166
00:10:29,855 --> 00:10:33,495
fewer security incidents, three
times faster security deployments

167
00:10:34,065 --> 00:10:36,555
close to 90% reduction in M TTRs.

168
00:10:37,195 --> 00:10:41,675
Which is meantime to remediate the
vulnerabilities from like 38 to just

169
00:10:41,675 --> 00:10:47,615
over four days, 43% lower security
remediation costs, and the implementation

170
00:10:47,615 --> 00:10:49,655
strategy, as I discussed earlier.

171
00:10:49,685 --> 00:10:53,405
Start with the supervised learning
for non vulnerabilities layer in the

172
00:10:53,405 --> 00:10:55,500
unsupervised models for anomaly detection.

173
00:10:56,210 --> 00:11:00,245
Implement the across entire
pipeline from code to runtime.

174
00:11:00,935 --> 00:11:01,835
Establish.

175
00:11:02,210 --> 00:11:07,130
Machine learning model evaluation metrics
to use by 87% of high performance teams.

176
00:11:08,060 --> 00:11:12,650
Next steps for you after this presentation
is to just assess your current security

177
00:11:12,650 --> 00:11:17,870
automation maturity, identify high impact
integration points in your pipeline.

178
00:11:18,320 --> 00:11:21,740
Start with one machine learning
security tool and measure the results.

179
00:11:21,740 --> 00:11:25,430
Build internal expertise
through hands on implementation.

180
00:11:25,850 --> 00:11:29,570
By integrating this machine learning
into your DevSecOps pipeline, you can

181
00:11:29,570 --> 00:11:35,810
achieve the same contribute goals of
enhancing security while accelerating

182
00:11:35,810 --> 00:11:37,640
the deployment and the development.

183
00:11:38,210 --> 00:11:42,170
The key to implement machine learning
power tools strategically across

184
00:11:42,170 --> 00:11:43,760
your entire development lifecycle.

185
00:11:44,825 --> 00:11:48,245
So that it'll allow you to shift
from reactive security measures

186
00:11:48,245 --> 00:11:50,005
to predictive protection.

187
00:11:51,085 --> 00:11:53,515
Thank you all for paying
attention to this.

188
00:11:53,615 --> 00:11:54,035
Thank you.

189
00:11:54,035 --> 00:11:54,815
Have a great day.

