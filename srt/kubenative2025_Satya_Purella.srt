1
00:00:00,500 --> 00:00:00,830
Hi.

2
00:00:00,950 --> 00:00:01,560
Hi hi.

3
00:00:01,589 --> 00:00:02,429
Good morning everyone.

4
00:00:02,500 --> 00:00:05,895
My name is currently I'm working
as a tech lead at fifth Third Bank.

5
00:00:06,755 --> 00:00:11,135
Based on my experience today, I'm going to
talk about the architecting, secure, and

6
00:00:11,165 --> 00:00:13,445
scalable integration for transfer FinTech.

7
00:00:13,805 --> 00:00:17,495
Based on my experience, I'm going
to talk it, I have around 17 years

8
00:00:17,495 --> 00:00:23,215
experience as a Java backend developer
with the cloud and various database.

9
00:00:23,725 --> 00:00:29,725
So in, in this today agenda is the FinTech
integration challenge, current integration

10
00:00:29,725 --> 00:00:32,185
landscape security compliance framework.

11
00:00:33,090 --> 00:00:37,710
Advanced data protection, scalability,
architecture patterns, balancing

12
00:00:37,710 --> 00:00:43,860
act, security complaints, performance
implementation roadmap, and key takeaways.

13
00:00:44,310 --> 00:00:47,670
So basically in the FinTech
integration challenge, understanding

14
00:00:47,670 --> 00:00:51,239
the unique demands and evolving
requirements for integration.

15
00:00:51,739 --> 00:00:55,430
For example, while developing
microservice development, communication

16
00:00:55,430 --> 00:00:59,569
between two microservices, sometimes
the communication is a synchronous

17
00:00:59,569 --> 00:01:01,010
or a synchronous communication.

18
00:01:01,250 --> 00:01:05,390
It is a big challenge and the current
integration landscape, exploring

19
00:01:05,390 --> 00:01:10,065
the existing ecosystem, key trends
and modern FinTech, for example the

20
00:01:10,515 --> 00:01:14,145
legacy application was developed
in any other technologies, but the

21
00:01:14,295 --> 00:01:15,975
modern applications were using.

22
00:01:16,010 --> 00:01:20,570
Developing latest technologies and
also deploying to cloud is also one

23
00:01:20,570 --> 00:01:25,370
of the integration challenge security
complaints frameworks, implementing

24
00:01:25,700 --> 00:01:30,680
robust identity access control, AP
security images, and advanced data

25
00:01:30,680 --> 00:01:35,300
protection statuses for encryption,
tokenization, data masking to safeguard

26
00:01:35,360 --> 00:01:41,129
system information, for example while
while trans while doing transforming, any

27
00:01:41,129 --> 00:01:46,019
payment transaction, for example, we want
to mask, we don't, we want to encrypt

28
00:01:46,289 --> 00:01:49,949
the account numbers, send that account
number and receive your account number.

29
00:01:50,159 --> 00:01:53,129
So in that case, we can, we are
going to implement encryption,

30
00:01:53,129 --> 00:01:57,744
tokenization and masking the data in
the while printing logs in the server.

31
00:01:58,615 --> 00:02:00,684
And scalability architecture patterns.

32
00:02:00,925 --> 00:02:05,395
Designing the high ment systems
with synchronous processing service

33
00:02:05,395 --> 00:02:07,255
misses, event driven approaches.

34
00:02:07,255 --> 00:02:10,615
Example, if you wanna increase
the scalability based on

35
00:02:10,615 --> 00:02:11,845
the application, we have to.

36
00:02:12,345 --> 00:02:15,945
Increase the scalable the
component size will be increased.

37
00:02:16,215 --> 00:02:21,035
Then only we can balancing act security
complaints, performance achieving

38
00:02:21,065 --> 00:02:25,175
optimal integration solutions that
meet all integration challenge.

39
00:02:25,415 --> 00:02:29,355
Provide co to multi-agency support
for diverse financial products.

40
00:02:29,595 --> 00:02:31,815
Ensure data integrity, consistency.

41
00:02:32,060 --> 00:02:36,620
Across distributor system seamlessly
integrate legacy core banking system with

42
00:02:36,620 --> 00:02:40,820
modern microservices architectures process
high volume financial transactions.

43
00:02:40,880 --> 00:02:44,840
With the robust security measures
dynamically scaled to efficiency,

44
00:02:44,840 --> 00:02:49,235
manage peak transaction volumes,
facilitate rapid innovation and

45
00:02:49,235 --> 00:02:54,185
feature delivery while getting risk
guarantee complaints with dynamic

46
00:02:54,745 --> 00:02:56,545
regulatory frameworks, for example.

47
00:02:57,110 --> 00:03:02,160
PSG two G-D-P-R-C-C-P current
integration landscape.

48
00:03:02,660 --> 00:03:06,679
Traditional challenges, modern
requirements, the imperative for

49
00:03:06,679 --> 00:03:10,880
robust integration platforms in
the traditional challenges, high

50
00:03:10,880 --> 00:03:15,769
operation costs, drain budgets for
innovation, 0.2 point integration

51
00:03:16,109 --> 00:03:18,269
hinder maintenance and scalability.

52
00:03:18,420 --> 00:03:22,019
Monolithic middle layer slows
developments and market response.

53
00:03:22,230 --> 00:03:26,489
Outdated perimeter security
leaves internal services while.

54
00:03:26,989 --> 00:03:28,999
In modern requirements, zero.

55
00:03:28,999 --> 00:03:31,224
Trust, security,
authenticates and authors.

56
00:03:32,059 --> 00:03:37,399
Every request embedded complaints
supports dynamic regulators actions with

57
00:03:37,429 --> 00:03:43,279
automated ing real time fraud detection
integrates a ML for immediate response.

58
00:03:43,519 --> 00:03:48,199
Elastic scaling leverages
clouding autoscaling for volume.

59
00:03:48,564 --> 00:03:53,839
A PA first approach enables seamless
third party and open banking integration.

60
00:03:54,399 --> 00:03:57,609
The imperative for the robust
integration platform, a robust FinTech

61
00:03:57,609 --> 00:04:02,919
integration platform must enforce
security monitor confluence and optimize

62
00:04:03,729 --> 00:04:08,859
it needs to protect data, ensure
regulatory adherence, and maintain

63
00:04:09,039 --> 00:04:14,199
low latency for critical transactions,
all while fostering innovation.

64
00:04:14,930 --> 00:04:18,320
Distributed identity
access control 2.0 open.

65
00:04:18,320 --> 00:04:24,090
Id connect JWT JS and implementation
considerations while while using WA

66
00:04:24,510 --> 00:04:28,680
2.0 and authorization frameworks,
grants third party applications.

67
00:04:28,890 --> 00:04:30,810
Limited access to services without.

68
00:04:31,760 --> 00:04:34,160
User cred by using Springboard.

69
00:04:34,160 --> 00:04:39,050
I implemented WA two Pan zero Open
iConnect and authentication layer

70
00:04:39,080 --> 00:04:44,450
built on WA two zero enabling client
to verify user identity through

71
00:04:44,510 --> 00:04:46,580
essential profile information.

72
00:04:47,150 --> 00:04:53,390
JW Jason, A compact, self-contained middle
first security, transforming information

73
00:04:53,630 --> 00:04:55,610
in between parties as Jason object.

74
00:04:55,610 --> 00:04:57,425
Implementation considerations are establ.

75
00:04:57,785 --> 00:05:01,925
Key rotation schedules and secure
key management practices and

76
00:05:01,925 --> 00:05:06,725
optimizing broken lifetime for balance
between security and usability.

77
00:05:06,875 --> 00:05:08,945
Implementing scope
based authorization for.

78
00:05:09,445 --> 00:05:14,005
Granular access control, ensuring
a financial grade a PA complaints

79
00:05:14,005 --> 00:05:17,515
for enhancer protection, integrating
multifactor authentication.

80
00:05:17,725 --> 00:05:22,435
These frameworks facilitate a zero
trust model ensuring every service

81
00:05:22,435 --> 00:05:26,905
to service call is authenticated and
authorized, irrespective of network.

82
00:05:26,910 --> 00:05:27,030
Applic.

83
00:05:27,530 --> 00:05:33,525
A PA gateway Security controls, essential
security functions rate limiting secure

84
00:05:33,525 --> 00:05:38,115
breakers, request validation, web
application firewall authentication.

85
00:05:38,115 --> 00:05:43,155
Authorization enforcement, TLS
termination gate limiting control

86
00:05:43,155 --> 00:05:47,805
request is to prevent dust attacks,
ensure fair resource distribution and

87
00:05:47,805 --> 00:05:49,635
protecting services from overload.

88
00:05:49,875 --> 00:05:54,050
For example, while implementing rest,
we can implement this rate limit.

89
00:05:54,945 --> 00:06:00,165
Secure breaker prevents cascading failures
by quickly failing request to unhealthy

90
00:06:00,165 --> 00:06:05,595
services, maintaining system stability
during high load request validation.

91
00:06:06,405 --> 00:06:08,535
For example, in the restful services.

92
00:06:08,535 --> 00:06:12,075
While sending payload, we have to
validate the request violation,

93
00:06:12,255 --> 00:06:14,990
which are which fields are mandated,
fields, which will list our

94
00:06:15,090 --> 00:06:17,325
option values in the re violation.

95
00:06:18,015 --> 00:06:21,435
We can implement those
validation for all the fields.

96
00:06:22,185 --> 00:06:26,415
So validated to block mal form
request and injection attacks.

97
00:06:26,915 --> 00:06:32,105
Ation secure communication and offloads
encryption, centralizing certificate

98
00:06:32,285 --> 00:06:36,815
management, and optimizing performance
authentication authorization,

99
00:06:37,205 --> 00:06:41,465
validates identity tokens and
applies granular access policies.

100
00:06:41,645 --> 00:06:47,675
Ensuring only authorized access to
APAs by using this only authorized.

101
00:06:48,175 --> 00:06:51,594
Third parties only can access
our services by using this

102
00:06:51,655 --> 00:06:55,315
authentication authorization, even
if it is a internal application.

103
00:06:55,375 --> 00:07:00,085
Also, we can implement authentication
authorization web application firewall

104
00:07:00,355 --> 00:07:06,975
integration provides defense against
common vulnerabilities, OWS AP by

105
00:07:06,975 --> 00:07:08,655
detecting and blocking threats.

106
00:07:08,895 --> 00:07:14,115
So by using a web application firewall,
we can project the application

107
00:07:14,115 --> 00:07:15,680
if we can secure the end plan.

108
00:07:16,180 --> 00:07:20,440
So data production methods, data
production, we can I implement by

109
00:07:20,440 --> 00:07:25,400
using encryption tokenization, data
masking encryption, utilizes AEs 2 5

110
00:07:25,400 --> 00:07:31,280
6 for data rest with HSM backend key
enablement, TLS 1.3 for data transit.

111
00:07:31,609 --> 00:07:34,594
Implement forward secrecy
to protect data with.

112
00:07:34,999 --> 00:07:40,340
Non tokens that retain operational
utility without inherent value.

113
00:07:40,520 --> 00:07:43,669
This is crucial for handling
primary account numbers.

114
00:07:43,829 --> 00:07:49,349
For example, we can organize SSN account
numbers, user id, those things we can,

115
00:07:49,349 --> 00:07:53,789
by using tokenization we can implement
data masking, employee dynamic masking

116
00:07:53,789 --> 00:07:55,229
for non-production environments.

117
00:07:55,244 --> 00:07:59,444
Enabling realistic testing
with anonymized data.

118
00:07:59,444 --> 00:08:03,254
Applied techniques like format,
preserves, encryption, red

119
00:08:03,524 --> 00:08:05,445
reduction for the highly fields.

120
00:08:05,744 --> 00:08:09,169
So in this access control, for
example, code data production,

121
00:08:09,299 --> 00:08:15,075
encryption to tokenization and data
masking, pro protective perimeter

122
00:08:15,080 --> 00:08:17,489
network security monitoring and TLS.

123
00:08:18,385 --> 00:08:20,065
Asynchronous processing architecture.

124
00:08:20,364 --> 00:08:26,515
In the asynchronous flow, we can implement
a P gateway, mobile pay, mobile Q energy

125
00:08:26,575 --> 00:08:32,605
violation, service analytics engine,
and transfer and notification service.

126
00:08:32,875 --> 00:08:36,444
So in the the benefits for financial
transaction for asynchronous

127
00:08:36,614 --> 00:08:39,194
decouples transaction, ancy from.

128
00:08:39,764 --> 00:08:40,454
Processing.

129
00:08:40,574 --> 00:08:44,804
Improving responsiveness
enables batch processing for

130
00:08:44,864 --> 00:08:46,934
efficiency when appropriate.

131
00:08:47,714 --> 00:08:54,584
Facilities, retries and ator cues for
resilience allows back present mechanisms

132
00:08:54,584 --> 00:09:01,299
to handle drop traffic spikes supports
com compensation transactions for all.

133
00:09:01,934 --> 00:09:04,364
Failure scenarios, implementation.

134
00:09:04,364 --> 00:09:08,504
Note financial transactions require
guaranteed delivery and exactly

135
00:09:08,684 --> 00:09:13,064
once processing, choose message
brokers with a strong durability,

136
00:09:13,064 --> 00:09:15,224
guarantees and item consumers.

137
00:09:15,724 --> 00:09:17,014
Service Miss architecture.

138
00:09:17,254 --> 00:09:23,404
So by you in the service Miss, we can see
observability security, traffic management

139
00:09:23,554 --> 00:09:28,384
policy informers a service Miss provides
an infrastructure layer for handling

140
00:09:28,504 --> 00:09:30,874
service to service communication offering.

141
00:09:31,124 --> 00:09:33,884
Critical capabilities
for FinTech platforms.

142
00:09:34,154 --> 00:09:38,834
For example, observed offers
comprehensive metrics, logs, and traces

143
00:09:38,894 --> 00:09:44,264
essential for regulatory audit trails
and in-depth performance analysis.

144
00:09:44,654 --> 00:09:49,394
Traffic management enables sophisticated
routing, load balancing, and

145
00:09:49,394 --> 00:09:54,089
fault tolerance without requiring
application level change changes.

146
00:09:54,589 --> 00:09:55,629
Security facilitates.

147
00:09:56,489 --> 00:09:59,519
Mutual DL authentication
and streamline certificate

148
00:09:59,519 --> 00:10:01,829
management at the platform level.

149
00:10:02,309 --> 00:10:07,184
Policy enforcements ensures consistent
access control and rate limiting access.

150
00:10:08,069 --> 00:10:11,699
All services within the mesh,
even driven architecture.

151
00:10:11,789 --> 00:10:15,369
Even driven architectures are ideally
suit for financial transaction

152
00:10:15,369 --> 00:10:20,379
flows where every state change
represents a critical business event.

153
00:10:20,779 --> 00:10:25,009
For example, saga pattern coordinates,
distributed transaction across multiple

154
00:10:25,009 --> 00:10:30,109
services, even sourcing store state
changes as a immutable sequence of events.

155
00:10:30,559 --> 00:10:32,869
QRS separates read for.

156
00:10:33,369 --> 00:10:37,209
Optimizing performance, even
streaming enables real time processing

157
00:10:37,269 --> 00:10:39,249
for immediate fraud detection.

158
00:10:39,519 --> 00:10:43,599
This approach enables highly
responsive systems that can scale

159
00:10:44,289 --> 00:10:48,669
orally while maintaining a complete
audit trail for regulatory complaints.

160
00:10:49,169 --> 00:10:51,989
Balance in security,
compliance and performance.

161
00:10:52,269 --> 00:10:55,809
Striking the right balance among
security complaints and performance

162
00:10:55,809 --> 00:10:58,359
is a paramount for FinTech platforms.

163
00:10:58,509 --> 00:11:01,449
Either chart to demonstrate
a hybrid approach.

164
00:11:01,719 --> 00:11:04,749
Combining event driven
architectures with is service.

165
00:11:04,749 --> 00:11:10,869
Miss offers the most effective strategy
to achieve robust security, comprehensive

166
00:11:10,869 --> 00:11:12,429
complaints, and exceptional performance.

167
00:11:12,914 --> 00:11:16,054
So the balance security, we
have the traditional monolithic

168
00:11:16,144 --> 00:11:20,879
basic microservices, a P gateway
service mesh, event driven mesh.

169
00:11:21,424 --> 00:11:24,484
So the key elements for balance,
proactive complaints, head

170
00:11:24,484 --> 00:11:28,744
security optimization, performance,
observability, and traceability.

171
00:11:29,429 --> 00:11:30,929
Implementation roadmap.

172
00:11:31,229 --> 00:11:35,759
The phase one implement API
gateway with W2 YDC authentication.

173
00:11:35,849 --> 00:11:39,689
Establish secure CACD pipelines
with automated security.

174
00:11:39,929 --> 00:11:44,909
Deploy basic observability stack
metrics, lack traces, and phase

175
00:11:44,909 --> 00:11:49,259
two Security Harding implement
encryption and inion services.

176
00:11:49,529 --> 00:11:52,004
Deploy C Clearance management
solution established.

177
00:11:52,734 --> 00:11:54,954
Key rotation, schedule
and pro saleability.

178
00:11:55,014 --> 00:11:57,774
Introduce message brokers
for a synchronous processing.

179
00:11:58,044 --> 00:12:01,284
Implement service miss for
interservice communication.

180
00:12:01,584 --> 00:12:07,824
Develop after scaling policies based
on demand patterns, advance patterns.

181
00:12:07,854 --> 00:12:12,349
Implement event source for event
sourcing for critical transaction flows.

182
00:12:12,799 --> 00:12:16,189
Deploy CQRS for a highly
volume read operation.

183
00:12:16,249 --> 00:12:20,659
Establish Charles engineering
practices to verify resilience.

184
00:12:21,159 --> 00:12:22,089
Two takeaways.

185
00:12:22,659 --> 00:12:24,489
Adopt a Zero Trust Security Model.

186
00:12:24,519 --> 00:12:30,789
Leverage WA two, YDC, and J for end
security across all integration points.

187
00:12:30,999 --> 00:12:35,139
This requires continuous verification
and least privilege access at

188
00:12:35,619 --> 00:12:40,989
every relay critical for protecting
sensitive financial data, embedded

189
00:12:41,314 --> 00:12:45,729
comprehensive observability into
the platform to ensure operational.

190
00:12:46,419 --> 00:12:49,509
Excellence and streamline
regulatory complaints.

191
00:12:49,689 --> 00:12:55,809
Robust logging metrics and tracing
provide deep insights, enabling quick

192
00:12:55,809 --> 00:13:00,669
in issue resolution, performance
optimization, and complete audit

193
00:13:00,669 --> 00:13:02,094
trail for financial regulations.

194
00:13:02,894 --> 00:13:06,914
Implement layer data protection
with encryption tokenization, and

195
00:13:06,914 --> 00:13:11,324
make masking to safeguard sensitive
financial data, effectively protected

196
00:13:11,324 --> 00:13:17,264
data address in transit and in use
with the robust encryption tokenization

197
00:13:17,444 --> 00:13:20,684
for desensitization and masking.

198
00:13:20,684 --> 00:13:25,304
For secure testing, leverage, event
driven architecture and service, meh.

199
00:13:25,804 --> 00:13:29,914
Highly scalable and secure FinTech
platforms, even driven flood

200
00:13:30,124 --> 00:13:34,984
patterns, enable realtime processing
and auditing wireless service.

201
00:13:34,984 --> 00:13:38,674
MIS provides consistent
traffic management, policy

202
00:13:38,734 --> 00:13:40,774
enforcement, and mutual TLS.

203
00:13:41,614 --> 00:13:41,914
Thank you.

204
00:13:42,414 --> 00:13:42,954
Thank you.

