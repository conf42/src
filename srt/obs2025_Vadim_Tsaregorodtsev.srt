1
00:00:00,500 --> 00:00:01,040
Okay.

2
00:00:01,290 --> 00:00:02,040
Hello everyone.

3
00:00:02,309 --> 00:00:03,179
My name is Saddi.

4
00:00:03,659 --> 00:00:06,720
I work at ETG and I am currently
lead the front end team.

5
00:00:07,319 --> 00:00:11,809
I mainly work on improving front tops,
the wax and other technical areas

6
00:00:11,809 --> 00:00:13,249
in the transport product department.

7
00:00:13,969 --> 00:00:16,219
So what are we going to talk about today?

8
00:00:17,029 --> 00:00:19,324
Not long time ago, we
had a typical situation.

9
00:00:20,220 --> 00:00:24,779
With one of our products, something
broke following best practices.

10
00:00:24,900 --> 00:00:27,960
We returned the service off and
on again, but it didn't help.

11
00:00:28,619 --> 00:00:33,089
It also didn't help that there were
no errors in sent and we did not know

12
00:00:33,269 --> 00:00:34,830
where to look to for the problem.

13
00:00:35,730 --> 00:00:39,690
Only after some time, we found out
that the problem wasn't with us at all.

14
00:00:40,290 --> 00:00:43,770
One of our teams that depended
on our service through our common

15
00:00:43,770 --> 00:00:45,720
integration layer, released an update.

16
00:00:46,380 --> 00:00:49,320
Their CPU usage suddenly
increased and this affected

17
00:00:49,320 --> 00:00:51,540
our system without us noticing.

18
00:00:52,470 --> 00:00:55,440
This story made me think how
we can, I really know that the

19
00:00:55,440 --> 00:00:57,180
product works and works properly.

20
00:00:57,680 --> 00:01:00,620
Recently, our team launched
a new product car rental.

21
00:01:00,770 --> 00:01:04,099
The service is available for B2B
partners and corporate clients.

22
00:01:04,819 --> 00:01:06,139
We launched this service.

23
00:01:06,229 --> 00:01:11,020
I decided to approach this problem more
thoughtfully, so how we can know that

24
00:01:11,020 --> 00:01:12,910
the products works and works properly.

25
00:01:13,410 --> 00:01:16,530
The simplest way is to type the
application address in the browser

26
00:01:16,679 --> 00:01:20,640
and see that everything works, pages
open request present, and gone.

27
00:01:21,450 --> 00:01:24,390
But you'll agree that checking
the application this way

28
00:01:24,390 --> 00:01:25,800
every time is impossible.

29
00:01:25,899 --> 00:01:29,320
Especially when support comes to
us and say everything is broken.

30
00:01:29,710 --> 00:01:32,470
In this case, there is no
point in checking anything.

31
00:01:32,589 --> 00:01:34,660
We're already down and losing money.

32
00:01:35,160 --> 00:01:39,479
We want something that instead of
support, our clients will tell us in

33
00:01:39,479 --> 00:01:43,259
time that something is going wrong
and your developer should take a

34
00:01:43,259 --> 00:01:45,149
look before the application crashes.

35
00:01:45,649 --> 00:01:48,800
As you might guess, I'm talking about
the three pillars of observability,

36
00:01:49,300 --> 00:01:54,039
metrics, traces, end locks based
on which we can understand what

37
00:01:54,039 --> 00:01:55,250
happening with our application.

38
00:01:55,750 --> 00:02:01,510
So now we will learn what is observability
and what is monitoring, what are

39
00:02:01,510 --> 00:02:03,010
the key difference between them?

40
00:02:03,510 --> 00:02:07,220
What's the metrics and what types
are there pure technical metrics?

41
00:02:07,720 --> 00:02:13,195
How SLA different from SLO and
SLI and what is an observability

42
00:02:13,195 --> 00:02:14,395
passport and how does it help?

43
00:02:14,895 --> 00:02:17,365
So let's let's start with the basics.

44
00:02:18,220 --> 00:02:20,540
What is the metric and
what types are there?

45
00:02:20,810 --> 00:02:22,520
Let's start with a simple definition.

46
00:02:23,300 --> 00:02:27,080
A metric is an iCal indicator
that measures a cer certain

47
00:02:27,530 --> 00:02:28,880
aspect of system operation.

48
00:02:29,510 --> 00:02:33,530
For example, page load time,
number of errors or presentation of

49
00:02:33,530 --> 00:02:34,995
successful requests to the server.

50
00:02:35,330 --> 00:02:40,790
End goal metrics help us measure,
understand, and improve our applications.

51
00:02:41,290 --> 00:02:42,640
What types of metrics are there?

52
00:02:42,820 --> 00:02:44,250
For example technical ones.

53
00:02:44,940 --> 00:02:49,170
Technical metrics describe the internal
processes of the system they're

54
00:02:49,170 --> 00:02:52,770
most often needed by developers
to understand what's happening

55
00:02:52,860 --> 00:02:54,480
under the hood of your application.

56
00:02:55,170 --> 00:02:59,940
For example, CPU usage, RAM usage
peer response time, and go on then

57
00:03:00,090 --> 00:03:04,110
are also business metrics that show
how efficiently the application

58
00:03:04,110 --> 00:03:05,340
helps achieve business goals.

59
00:03:06,150 --> 00:03:11,340
For example, conversion in purchase
organization, user retention, or

60
00:03:11,340 --> 00:03:13,110
for example, giving you per user.

61
00:03:13,610 --> 00:03:18,410
But there are also metrics that difficult
to attribute the one category because they

62
00:03:18,410 --> 00:03:20,960
affect both technical and business sites.

63
00:03:21,950 --> 00:03:26,600
They are also called hybrid metrics, for
example performance and page load speed.

64
00:03:27,350 --> 00:03:29,510
The well known web vitals by Google.

65
00:03:30,010 --> 00:03:34,780
One hand metrics describe purely technical
characteristics of your application page,

66
00:03:34,780 --> 00:03:36,799
load speed reaction time, et cetera.

67
00:03:37,280 --> 00:03:42,809
But in the end, all this affect cell
user experience and in search in

68
00:03:42,809 --> 00:03:46,519
search results, which can affect your
business wallet, or, for example,

69
00:03:46,519 --> 00:03:48,119
the number of errors in the system.

70
00:03:48,719 --> 00:03:53,819
Frequent errors, areno users, and increase
the load on support and can affect

71
00:03:53,849 --> 00:03:55,619
business metrics such as user tention.

72
00:03:56,120 --> 00:04:00,689
Another good example of hybrid metrics,
which lay between developers and business

73
00:04:00,839 --> 00:04:03,139
can be availability and availability.

74
00:04:03,139 --> 00:04:05,894
Medics, S-L-A-S-L-O and SLA.

75
00:04:06,394 --> 00:04:11,374
This set of metrics focuses on measuring
fulfillment of commitments to deliver high

76
00:04:11,374 --> 00:04:13,954
quality, reliable, and stable services.

77
00:04:14,764 --> 00:04:16,654
What does it mean and why is it needed?

78
00:04:17,154 --> 00:04:21,174
So SLA service level agreement
is an agreement about providing

79
00:04:21,234 --> 00:04:24,174
a level of service made between
business and development.

80
00:04:24,674 --> 00:04:28,724
For example, agreements commit that
the service will be available 99

81
00:04:28,724 --> 00:04:31,184
and 9% of the time during amount.

82
00:04:31,684 --> 00:04:35,644
SLA in this case is used as a
formalization of business expectations.

83
00:04:36,144 --> 00:04:40,944
SLO service level objective is an internal
goal related to system availability.

84
00:04:41,634 --> 00:04:46,224
SLL defines more detailed indicators that
developers focus in their daily work.

85
00:04:46,724 --> 00:04:51,234
For example, API response API response
time should not exceed the 200

86
00:04:51,234 --> 00:04:53,964
milliseconds for 95% of requests.

87
00:04:54,624 --> 00:05:00,054
SLL helps technical teams focus on what
is important for their users and set

88
00:05:00,054 --> 00:05:01,734
realistic benchmarks for monitoring.

89
00:05:02,234 --> 00:05:07,424
SLA service level indicator
is directly a metric that

90
00:05:07,484 --> 00:05:09,464
measures the fulfillment of SLO.

91
00:05:10,154 --> 00:05:13,004
This is a numerical indicator
based on monitoring data.

92
00:05:13,814 --> 00:05:18,794
For example, if SLO says that 95%
of request should be proposed in

93
00:05:18,844 --> 00:05:23,524
200 milliseconds, then SLI is the
percentage request that actually fit.

94
00:05:23,624 --> 00:05:24,434
Within this time.

95
00:05:24,934 --> 00:05:26,914
How do this medics help to solve problems?

96
00:05:27,414 --> 00:05:31,074
Availability metrics help developers
evaluate the current service level.

97
00:05:31,614 --> 00:05:34,584
You know exactly how your
performance goals match reality.

98
00:05:35,084 --> 00:05:36,614
They help prioritize tasks.

99
00:05:37,064 --> 00:05:41,024
For example, if the availability
level approaches the SA boundary,

100
00:05:41,204 --> 00:05:44,764
this is a signal to immediately
address the problem and help

101
00:05:44,764 --> 00:05:46,704
communicate with business metrics.

102
00:05:46,734 --> 00:05:50,304
Allow you to talk to business in the
language of goals and priorities.

103
00:05:50,829 --> 00:05:53,649
Explaining how technical
problems can affect users.

104
00:05:54,149 --> 00:05:58,079
A special place in working with
SLO is occupied by error budget.

105
00:05:58,949 --> 00:06:02,879
This is concept that helps establish
a balance between stability and the

106
00:06:02,879 --> 00:06:04,709
speed of implementing new features.

107
00:06:05,579 --> 00:06:06,359
How does it work?

108
00:06:07,139 --> 00:06:10,319
Error budget is the alert level
of deviations that you can

109
00:06:10,319 --> 00:06:12,119
afford to stay within SLO limits.

110
00:06:12,619 --> 00:06:16,099
For example, if your SLO is
99 and 9% of trackable time,

111
00:06:16,519 --> 00:06:19,369
then your error budget is 0.1%.

112
00:06:19,869 --> 00:06:21,459
What does error budget affect?

113
00:06:22,359 --> 00:06:24,429
First, it determines priorities.

114
00:06:25,419 --> 00:06:29,379
If error budget is almost exhausted, the
implementation of new feature is frozen,

115
00:06:29,769 --> 00:06:31,689
and the team focuses on solving problems.

116
00:06:32,189 --> 00:06:36,069
Therefore error budget can be used
as part of sprint planning and to

117
00:06:36,069 --> 00:06:38,019
avoid chaotic switching between tasks.

118
00:06:38,519 --> 00:06:40,619
Second, it simplifies decision making.

119
00:06:41,519 --> 00:06:45,629
For example, you can explain to business
that implementing a risky feature now is

120
00:06:45,629 --> 00:06:48,539
a DI direct pass to violating your SLA.

121
00:06:49,039 --> 00:06:51,829
And third, it help find balance.

122
00:06:52,369 --> 00:06:56,839
If error budget is not exhausted, the team
can safely experiment with new features

123
00:06:56,869 --> 00:06:58,849
result fear of breaking production,

124
00:06:59,349 --> 00:07:00,449
and you have already.

125
00:07:00,979 --> 00:07:03,529
Notice it that collecting
metrics is not enough.

126
00:07:04,249 --> 00:07:07,549
This is the main difference between
regular monitoring and observability.

127
00:07:08,449 --> 00:07:12,889
Metrics should be mandatory dynamically
anticipating trends and proactively

128
00:07:12,919 --> 00:07:14,869
acting to prevent negative outcomes.

129
00:07:15,649 --> 00:07:19,549
When you have just set up Ming,
you can answer the question, is

130
00:07:19,549 --> 00:07:21,109
the system working as expected?

131
00:07:21,889 --> 00:07:22,969
You looked at the medics.

132
00:07:23,209 --> 00:07:27,979
Yes, requests are going through no
errors, and if the load is increased

133
00:07:28,169 --> 00:07:29,549
monitoring will show you an alert.

134
00:07:30,049 --> 00:07:34,169
But if your system has the properly
property of observability, then you can

135
00:07:34,199 --> 00:07:38,009
already answer the question, why does
the system work in the way it works?

136
00:07:38,849 --> 00:07:43,689
For example, after launch time the
load increases and during this time,

137
00:07:43,689 --> 00:07:44,889
it's better to not release anything.

138
00:07:45,389 --> 00:07:48,974
And this is will help you more when
you're analyzing complex incidents.

139
00:07:49,474 --> 00:07:52,535
In the end, ator helps understand
that something's broke.

140
00:07:53,035 --> 00:07:54,805
Observability helps figure
out why it's happening.

141
00:07:55,305 --> 00:08:00,255
So now that we'll know everything we
learned let's turn to our mind question.

142
00:08:00,495 --> 00:08:03,255
How can I understand that
product works and works properly?

143
00:08:03,755 --> 00:08:07,865
Now, we know that this question consists
of two parts, how to understand that it

144
00:08:07,955 --> 00:08:12,695
works, the part related to monitoring and
how to understand that it works properly.

145
00:08:12,905 --> 00:08:14,690
The part about observability in general.

146
00:08:15,190 --> 00:08:18,760
When I asked myself this question, I
thought that I needed just the page in

147
00:08:18,760 --> 00:08:21,460
Confluence or a folder with benchmark.

148
00:08:21,620 --> 00:08:24,920
From where I can see everything that
I want to know about my application.

149
00:08:24,920 --> 00:08:27,820
Of course, without ever
thinking, I call this list of

150
00:08:27,820 --> 00:08:29,260
links, observability, passport.

151
00:08:30,250 --> 00:08:33,930
So what's my, so what's an insight
of my observability passport?

152
00:08:34,430 --> 00:08:38,000
The first things I set up was,
of course, an error tracker.

153
00:08:38,780 --> 00:08:41,900
In our case, it's Sentry, but
it can be absolutely anything.

154
00:08:42,410 --> 00:08:43,370
Whatever you like.

155
00:08:43,430 --> 00:08:44,690
Even a simple concern log.

156
00:08:45,560 --> 00:08:49,520
The main things is that this solution
should let you understand that something

157
00:08:49,520 --> 00:08:51,395
went wrong and you know how to fix it.

158
00:08:51,895 --> 00:08:54,885
Next, after finishing quiz
monitoring part, it's time

159
00:08:54,885 --> 00:08:56,245
to think about observability.

160
00:08:56,745 --> 00:09:00,885
Would it be enough to close the question
of errors by catching and analyze them?

161
00:09:01,385 --> 00:09:05,645
Analysis is good, but still setting
up work in such way that errors do

162
00:09:05,645 --> 00:09:07,535
not occur at all is another level.

163
00:09:08,135 --> 00:09:12,955
How to achieve this obviously conduct
analysis before an error occurs, and that

164
00:09:12,955 --> 00:09:14,845
means we need to analyze the court itself.

165
00:09:15,345 --> 00:09:20,145
The range of tools for this is simply
huge from basic s and test runners,

166
00:09:20,265 --> 00:09:25,005
providing cut coverage metrics to static
analyzers, detecting vulnerabilities

167
00:09:25,155 --> 00:09:26,655
in the app and its dependencies.

168
00:09:27,155 --> 00:09:31,635
And if test and coverage are more
about monitoring, then finding

169
00:09:31,665 --> 00:09:34,545
and analyzing vulnerabilities
is more about observability.

170
00:09:35,045 --> 00:09:38,165
One of such tools that allow
analyzing found vulnerabilities,

171
00:09:38,675 --> 00:09:40,625
which we use is the defect Dodger.

172
00:09:41,125 --> 00:09:44,795
Defect dodger offers many
metrics to get visual information

173
00:09:44,795 --> 00:09:48,275
about trends and insights of
vulnerabilities in your organization.

174
00:09:48,695 --> 00:09:53,465
Similar to 99 and 9% availability
targets, defect dodger helps set

175
00:09:53,465 --> 00:09:58,115
SLA specifically for resolving
issue based on their severity.

176
00:09:58,615 --> 00:10:03,455
In our case, obviously the SLO for the
number of critical vulnerabilities in

177
00:10:03,455 --> 00:10:08,325
production is zero, and the time to fix
already found ones seven days, which by

178
00:10:08,325 --> 00:10:10,425
the way, the facto suggests by default.

179
00:10:10,925 --> 00:10:16,135
Then based on the criticality of the found
problem and the basis of your agreements

180
00:10:16,135 --> 00:10:20,375
in the team the problem is taken into
work and should be fixed within a certain

181
00:10:20,375 --> 00:10:22,710
period, which corresponds to your SLA.

182
00:10:23,210 --> 00:10:23,600
All right.

183
00:10:24,230 --> 00:10:29,150
Coly, this tool vary, but the main idea is
using SLAs to manage application stability

184
00:10:29,450 --> 00:10:35,870
like API availability centric errors or
code big discount it to, it always comes

185
00:10:35,870 --> 00:10:37,520
down to the following set of actions.

186
00:10:38,020 --> 00:10:42,580
It dify area to monitor API
errors, vulnerabilities, and go on.

187
00:10:43,390 --> 00:10:44,980
Define error boundaries.

188
00:10:45,400 --> 00:10:45,610
What?

189
00:10:45,610 --> 00:10:47,290
Devi deviates from normal behavior.

190
00:10:47,790 --> 00:10:53,010
Set an error budget, acceptable
tolerance level, collect your

191
00:10:53,010 --> 00:10:54,900
errors, metrics, and go on.

192
00:10:55,800 --> 00:11:01,890
Visualize data in dashboards, set up
alerts as needed, and assign owners and

193
00:11:01,890 --> 00:11:04,080
define response protocols for incidents.

194
00:11:04,580 --> 00:11:08,470
Of course, the observability passport
will not complete will not be complete

195
00:11:08,500 --> 00:11:13,300
without collecting basic medics such as
memory consumption, CPO load, or others.

196
00:11:14,140 --> 00:11:18,240
In our case provided by the pro
client package, and it'll also not

197
00:11:18,240 --> 00:11:21,130
be complete without informative
logs from our application.

198
00:11:21,630 --> 00:11:24,060
As logs are rec, are records of events.

199
00:11:24,630 --> 00:11:25,620
They're easy to create.

200
00:11:25,650 --> 00:11:26,880
For example, a simple concern.

201
00:11:26,880 --> 00:11:31,200
Log logs give us detailed
information about specific types

202
00:11:31,200 --> 00:11:32,700
of events that interested us.

203
00:11:33,200 --> 00:11:37,070
For example, logging all requests.com
to our application or that we make.

204
00:11:37,570 --> 00:11:42,410
But logging as a rule happens only
within one component of the system

205
00:11:42,530 --> 00:11:44,690
for which we are responsible.

206
00:11:45,680 --> 00:11:49,460
We write type of intent application,
therefore we can add login only here.

207
00:11:49,880 --> 00:11:53,940
theEnd might be the responsibility
of the completely different team and

208
00:11:53,940 --> 00:11:55,680
they made write logs at their purpose.

209
00:11:56,180 --> 00:12:00,230
But as you understand, there are
cases when error secure and one

210
00:12:00,230 --> 00:12:01,700
component of the system is not enough.

211
00:12:02,390 --> 00:12:06,480
The reason maybe much deeper to
understand and you need the whole picture.

212
00:12:06,980 --> 00:12:09,060
This is where traces comes to help.

213
00:12:09,560 --> 00:12:14,610
Traces are similar to logs but except
that is, is a summary list of all

214
00:12:14,610 --> 00:12:16,470
events from all involved components.

215
00:12:16,970 --> 00:12:20,390
Often to ensure the correct output
of logs from different components.

216
00:12:20,600 --> 00:12:24,150
They use some global identifiers
that allow taking the pass of

217
00:12:24,150 --> 00:12:25,680
the request to all components.

218
00:12:25,980 --> 00:12:27,900
Like request ID or slash id.

219
00:12:28,400 --> 00:12:32,340
And to collect all this beautifully
into a nice graph you can connect

220
00:12:32,340 --> 00:12:34,680
tools like Open Telemetry plus Jagger.

221
00:12:35,180 --> 00:12:39,820
Next, another related concept
of logs is profiling like logs.

222
00:12:39,850 --> 00:12:45,070
Profiles are records of some emails
within one component only profiles use

223
00:12:45,130 --> 00:12:47,950
the most detailed information about
what is happening under the hood.

224
00:12:48,450 --> 00:12:52,200
Most often profiles are used
to analyze bottlenecks along

225
00:12:52,200 --> 00:12:53,280
the path of your request.

226
00:12:53,780 --> 00:12:57,500
The part of the request that takes
the longest to execute is most likely

227
00:12:57,500 --> 00:13:02,500
can be optimized to speed up the time
of your entire request for profile.

228
00:13:02,920 --> 00:13:04,940
We also use senti.

229
00:13:05,300 --> 00:13:06,800
We look at similar dashboards.

230
00:13:06,890 --> 00:13:10,385
We see which endpoints and
pages work the longest and they

231
00:13:10,520 --> 00:13:11,690
to profiles for improvement.

232
00:13:12,190 --> 00:13:17,410
Okay, updating the passport and the
cherry on top is or why is product

233
00:13:17,410 --> 00:13:20,590
analytics, how users use your application.

234
00:13:21,550 --> 00:13:22,000
That's it.

235
00:13:22,280 --> 00:13:26,420
You choose events in your application
that you want to track, and based

236
00:13:26,420 --> 00:13:30,060
on them, you build a typical user
scenarios for your application.

237
00:13:30,780 --> 00:13:34,740
Then together with your product
owner, you decide what this means and

238
00:13:34,740 --> 00:13:36,330
how to improve the user experience.

239
00:13:36,585 --> 00:13:40,775
So that they make a decision to buy
your product faster, even though product

240
00:13:40,775 --> 00:13:45,435
analytics is as far as possible from the
technical indicators of the application.

241
00:13:45,815 --> 00:13:48,755
We managed to catch several
cases in practice for not

242
00:13:48,755 --> 00:13:49,955
properly working components.

243
00:13:50,465 --> 00:13:54,095
For example the currency switching
even integrated rated an extra

244
00:13:54,125 --> 00:13:57,660
trigger and we realized that the
component was not working correctly.

245
00:13:58,160 --> 00:14:03,050
Or for example, an EBIT that should only
trigger on the listing page for some

246
00:14:03,050 --> 00:14:05,070
reason it was sent on the booking page.

247
00:14:05,490 --> 00:14:08,340
We also figured this out and
found a problem in the cash.

248
00:14:08,840 --> 00:14:10,030
And that's basically it.

249
00:14:10,840 --> 00:14:14,600
We add to the past per the SLA for
availability, which we talked about

250
00:14:14,630 --> 00:14:16,940
earlier, test coverage and swagger.

251
00:14:17,210 --> 00:14:18,365
And my passport is ready.

252
00:14:18,865 --> 00:14:23,335
Now having such a passport, I can
generally find out the domain of

253
00:14:23,335 --> 00:14:25,075
my application for a quick checkup.

254
00:14:25,585 --> 00:14:29,945
I can track errors by their name, see
the number of events for certain period,

255
00:14:30,335 --> 00:14:31,865
and receive detailed information.

256
00:14:32,015 --> 00:14:36,865
The user data, browser calls, stack
request responses, and on I can collect

257
00:14:36,865 --> 00:14:40,735
and analyze system logs for quick
identification and resolution of problems.

258
00:14:41,560 --> 00:14:45,310
I can receive real time indicators
of performance and system status,

259
00:14:45,940 --> 00:14:49,330
response time, aggregate, or
resource usage, and et cetera.

260
00:14:50,230 --> 00:14:53,560
I can see the number of potential
vulnerabilities, assess the

261
00:14:53,560 --> 00:14:54,885
risk and take proper action.

262
00:14:55,385 --> 00:14:59,225
I can see metrics collected directed from
the container such as the amount of memory

263
00:14:59,225 --> 00:15:01,325
used or the number of open connections.

264
00:15:02,315 --> 00:15:05,975
I track which service characteristics
like availability or latency

265
00:15:06,245 --> 00:15:10,415
have SLO define and monitor their
performance against those targets.

266
00:15:10,915 --> 00:15:15,115
I monitor the error budget, align with
SLO targets to balance availability

267
00:15:15,175 --> 00:15:18,855
with feature delivery, and I can
see the current percentage of code

268
00:15:18,915 --> 00:15:20,235
that is covered by unit tests.

269
00:15:21,135 --> 00:15:25,095
And I can see the current swag you're
describing, the IPI for other services.

270
00:15:25,595 --> 00:15:26,465
And that's all.

271
00:15:26,585 --> 00:15:27,925
That's all for my site.

272
00:15:27,975 --> 00:15:30,015
Thank you for your attention, help you.

273
00:15:30,015 --> 00:15:34,050
This observability passport also will
help you build your applications.

274
00:15:34,850 --> 00:15:35,070
Bye.

