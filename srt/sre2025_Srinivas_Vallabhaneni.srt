1
00:00:00,500 --> 00:00:01,160
Hey everyone.

2
00:00:01,489 --> 00:00:05,270
I'm really excited to be
here at Con 42 SRE 2025.

3
00:00:05,770 --> 00:00:10,210
Today I want to talk about something
that's been gaining a lot of momentum,

4
00:00:10,930 --> 00:00:15,040
especially in the world of distributed
systems and that's edge intelligence.

5
00:00:15,640 --> 00:00:21,150
As more and more data is generated outside
traditional data centers like in factories

6
00:00:21,150 --> 00:00:23,400
on vehicles or in remote locations.

7
00:00:24,390 --> 00:00:29,060
We are seeing seeing a shift in how
we build and manage reliable systems.

8
00:00:29,870 --> 00:00:32,060
And that's what the stock is all about.

9
00:00:32,750 --> 00:00:37,940
How we can apply SRE principles to this
new decentralized environments in a way

10
00:00:37,940 --> 00:00:40,490
that's practical, scalable, and reliable.

11
00:00:40,990 --> 00:00:44,320
Before we dive in, let me give
you a quick intro about myself.

12
00:00:44,820 --> 00:00:48,270
I am a senior software engineer where.

13
00:00:48,810 --> 00:00:53,790
I work on building systems that are
designed to scale reliably and securely.

14
00:00:54,720 --> 00:00:59,089
My focus has been on cloud native
platforms, distributed architecture

15
00:00:59,300 --> 00:01:02,740
and observability, basically
making sure things are running

16
00:01:02,740 --> 00:01:05,170
smoothly, even as complexity grows.

17
00:01:05,920 --> 00:01:10,039
Over the past few years, I've
started looking more closely at Edge

18
00:01:10,039 --> 00:01:15,244
Computing and what it means to bring
the reliability mindset of SRE.

19
00:01:15,589 --> 00:01:20,149
Into environments that are far more
unpredictable and decentralized.

20
00:01:20,649 --> 00:01:23,109
That's the foundation for today's session.

21
00:01:23,609 --> 00:01:29,309
So now that we've got that set,
let's talk about what's actually

22
00:01:29,309 --> 00:01:31,139
driving the shift to the edge.

23
00:01:31,639 --> 00:01:32,089
Perfect.

24
00:01:32,419 --> 00:01:36,429
So what's actually driving the
shift towards edge computing?

25
00:01:36,729 --> 00:01:42,579
For a long time, the default approach was
to send everything to the cloud, collect

26
00:01:42,579 --> 00:01:47,979
data from devices, send it upstream, and
process it centrally, and then respond.

27
00:01:48,879 --> 00:01:53,319
That worked when data volumes
were manageable and latency

28
00:01:53,319 --> 00:01:54,399
wasn't a huge concern.

29
00:01:54,899 --> 00:01:59,169
But now we are in a world with
millions of sensors, real time

30
00:01:59,169 --> 00:02:01,539
feedback loops and limited bandwidth.

31
00:02:02,484 --> 00:02:06,805
Especially in industries
and or remote settings.

32
00:02:07,705 --> 00:02:13,435
So what we're seeing instead is a move to
process data, right where it's generated,

33
00:02:14,365 --> 00:02:18,760
whether that's on a factory floor,
inside a vehicle, or the network edge.

34
00:02:19,260 --> 00:02:24,180
This has massive benefits, like
lower latency, better responsiveness,

35
00:02:24,180 --> 00:02:26,359
and reduced cloud costs.

36
00:02:26,859 --> 00:02:27,079
But.

37
00:02:27,810 --> 00:02:30,330
It also changes how we architect systems.

38
00:02:30,830 --> 00:02:36,050
We are no longer relying on
centralized infrastructure, and we are

39
00:02:36,050 --> 00:02:37,910
building intelligence into the edge.

40
00:02:38,480 --> 00:02:42,410
And that introduces new
reliability challenges.

41
00:02:43,250 --> 00:02:48,270
And that's where we start thinking
how do we bring in SRE principles

42
00:02:48,270 --> 00:02:50,100
into these kind of environments?

43
00:02:50,600 --> 00:02:58,350
So now if, if worked in SRE or reliability
Engineering, a lot of the core ideas

44
00:02:58,620 --> 00:03:06,030
like error budgets, SLOs, automation, and
observability are probably familiarity.

45
00:03:06,900 --> 00:03:11,290
But when we take those ideas and try
to apply them to edge environments,

46
00:03:11,890 --> 00:03:13,279
things get a little trickier.

47
00:03:13,779 --> 00:03:15,339
The edge is messy.

48
00:03:15,999 --> 00:03:18,519
Devices might be low power, they.

49
00:03:18,909 --> 00:03:23,289
Might have limited connectivity and
they're often running in conditions

50
00:03:23,379 --> 00:03:29,109
we can't fully control, so we
can't always expect five nines

51
00:03:29,109 --> 00:03:33,519
liability or seamless deployments
like we do in the cloud, right?

52
00:03:34,019 --> 00:03:38,929
That means we need to adapt SR
PRI principles or practices to

53
00:03:38,929 --> 00:03:40,819
fit this particular context.

54
00:03:41,809 --> 00:03:46,069
For example error budgets might
need to account for connectivity

55
00:03:46,069 --> 00:03:48,499
gaps or power limitations.

56
00:03:48,999 --> 00:03:55,029
And SLOs should reflect what's
realistic for each location or device

57
00:03:55,029 --> 00:03:57,699
type, not just a global average.

58
00:03:58,199 --> 00:04:03,569
And coming to automation, it still
plays a huge role, but it needs to be

59
00:04:03,569 --> 00:04:07,139
lightweight, resilient, and designed for.

60
00:04:07,470 --> 00:04:08,400
Patchy networks.

61
00:04:09,270 --> 00:04:14,369
When it comes to observability, we have
to rethink how we collect data because

62
00:04:14,409 --> 00:04:19,029
shipping logs and metrics to the cloud
in real time isn't always feasible.

63
00:04:19,529 --> 00:04:26,559
So overall, it's not about abandoning SRE,
but it's more about reshaping it to work

64
00:04:26,559 --> 00:04:28,599
in the real world conditions of the edge.

65
00:04:29,099 --> 00:04:29,450
Great.

66
00:04:29,950 --> 00:04:34,259
Now coming to the DevOps and container
containerization at the edge.

67
00:04:34,469 --> 00:04:38,789
One of the ways we've brought
consistency and speed to backend

68
00:04:38,789 --> 00:04:43,389
systems is through this meaning
DevOps practices and containerization.

69
00:04:43,889 --> 00:04:47,459
And now we are extending
those same ideas to the edge.

70
00:04:47,959 --> 00:04:51,859
But of course edge environments
have very different constraints,

71
00:04:51,859 --> 00:04:54,579
so we have to adapt accordingly.

72
00:04:54,829 --> 00:04:59,299
For starters, our traditional containers
can be way too heavy for edge devices,

73
00:04:59,959 --> 00:05:04,719
so we lean on lightweight container
ima images using things like apen

74
00:05:04,779 --> 00:05:10,239
based belts or even dustless containers
that strip out everything you don't

75
00:05:10,239 --> 00:05:15,949
need that helps reduce memory usage
and start up time dramatically.

76
00:05:16,469 --> 00:05:18,609
Sometimes over 90%.

77
00:05:18,909 --> 00:05:20,169
Then there's CSED.

78
00:05:20,669 --> 00:05:24,539
Edge deployments need a different
approach, especially because

79
00:05:24,539 --> 00:05:28,559
devices may have limited bandwidth
or unreliable connections.

80
00:05:29,059 --> 00:05:33,429
So we use more progressive rollout
strategies, automated canneries,

81
00:05:33,429 --> 00:05:38,019
rollback mechanisms and smart sync
pipelines that can resume where they

82
00:05:38,169 --> 00:05:39,969
left off if the connection drops.

83
00:05:40,899 --> 00:05:43,149
And finally, configuration management.

84
00:05:44,044 --> 00:05:48,794
We still want GitHub style
workflows, but tailored to the edge.

85
00:05:49,274 --> 00:05:53,804
That means treating device configs
like version code and using

86
00:05:53,804 --> 00:05:57,764
tooling that can sync and enforce
config states even at scale.

87
00:05:58,264 --> 00:06:02,059
And it should be across hundreds
or maybe thousands of devices.

88
00:06:02,559 --> 00:06:06,804
So DevOps at the edge is
absolutely possible, but it

89
00:06:07,254 --> 00:06:09,624
just needs to be tuned for the.

90
00:06:10,194 --> 00:06:12,434
Environment it runs in.

91
00:06:12,934 --> 00:06:18,324
So once we've deployed applications
to the edge, how do we know they're

92
00:06:18,324 --> 00:06:20,394
actually working the way we expect?

93
00:06:20,894 --> 00:06:22,934
That's where observability comes in.

94
00:06:23,804 --> 00:06:27,144
But again just like with
automation, we have to rethink

95
00:06:27,144 --> 00:06:28,644
how we approach it for the edge.

96
00:06:29,144 --> 00:06:34,949
In a typical centralized setup, we might
collect a ton of logs, metrics, traces,

97
00:06:35,399 --> 00:06:40,559
and send them all to the cloud and
analyze them there in our general setup.

98
00:06:40,709 --> 00:06:43,659
But at the edge, that's
not always practical.

99
00:06:44,469 --> 00:06:47,529
We might not have the bandwidth
or the connection might be

100
00:06:47,559 --> 00:06:51,069
intermittent, so the strategy shifts.

101
00:06:51,569 --> 00:06:56,399
We focus on collecting the right data
and doing smart aggregation locally

102
00:06:56,909 --> 00:06:58,499
before pushing anything upstream.

103
00:06:59,339 --> 00:07:02,939
For example, instead of sending
every log line, we might detect

104
00:07:02,999 --> 00:07:07,649
anomalies at the edge and only
forward summarized or critical data.

105
00:07:08,149 --> 00:07:12,469
Some platforms now even support
lightweight anomaly detection directly on

106
00:07:12,469 --> 00:07:18,874
the device so we can catch issues early
without waiting for any cloud analysis.

107
00:07:19,374 --> 00:07:23,984
And we still aim for end-to-end
visibility using distributed

108
00:07:23,984 --> 00:07:28,634
tracing so we can follow requests
across the edge and into the cloud.

109
00:07:29,174 --> 00:07:33,774
But we build it in a way that
respects the resource constraints.

110
00:07:34,734 --> 00:07:39,654
So in short, observability at
the edge is about being smart,

111
00:07:40,014 --> 00:07:41,784
selective, and efficient.

112
00:07:42,324 --> 00:07:45,594
So we stay informed without.

113
00:07:46,059 --> 00:07:47,289
Overwhelming the system.

114
00:07:48,029 --> 00:07:48,329
Okay.

115
00:07:48,779 --> 00:07:53,869
Now here's where things get really
interesting because we are not just

116
00:07:53,869 --> 00:07:55,849
collecting data at the edge anymore.

117
00:07:56,209 --> 00:07:58,879
We're actually running
intelligence at the edge.

118
00:07:59,599 --> 00:08:04,069
With the help of lightweight AI
models, we can now deploy logic that

119
00:08:04,069 --> 00:08:08,869
doesn't just react, but actually
predicts and heals right on the device.

120
00:08:09,649 --> 00:08:11,749
A great example is predictor maintenance.

121
00:08:12,249 --> 00:08:16,929
Instead of waiting for a sensor to
fail, edge devices can run small models

122
00:08:17,259 --> 00:08:22,319
that look at vibration or temperature
trends, detect anomalies and trigger

123
00:08:22,379 --> 00:08:24,269
alerts before something breaks.

124
00:08:24,769 --> 00:08:26,479
One real world use case.

125
00:08:26,579 --> 00:08:32,879
Manufacturing facility reduced downtime
by 37% just by deploying local models

126
00:08:32,884 --> 00:08:34,799
that caught early signs of machine wear.

127
00:08:35,299 --> 00:08:37,219
Then there's autonomous healing.

128
00:08:38,059 --> 00:08:43,569
Imagine a system that detects performance
degradation or corrects it automatically

129
00:08:44,279 --> 00:08:49,979
by rerouting traffic, restarting services,
or simply adjusting resource usage

130
00:08:50,519 --> 00:08:52,599
without any human inter intervention.

131
00:08:53,099 --> 00:08:54,149
And this is happening.

132
00:08:54,209 --> 00:08:57,959
We are seeing this in smart grids
where devices can reconfigure

133
00:08:58,139 --> 00:08:59,339
power distribution path.

134
00:09:00,014 --> 00:09:04,944
When there's an outage keeping critical
infrastructure online, what's amazing

135
00:09:04,944 --> 00:09:08,844
is that these capabilities are running
on resource constrained edge hardware

136
00:09:08,904 --> 00:09:11,224
and not some big cloud clusters.

137
00:09:11,474 --> 00:09:16,724
It's a huge leap forward in reliability
and a perfect complement to the kind of

138
00:09:16,724 --> 00:09:19,635
self-healing systems we aim for in SRA.

139
00:09:20,135 --> 00:09:25,435
We've talked about the why and the
hub, but let's take a look at what this

140
00:09:25,435 --> 00:09:27,505
actually looks like in the real world.

141
00:09:28,005 --> 00:09:31,915
There are just a few examples of
industrial IOT systems that have

142
00:09:31,975 --> 00:09:35,635
embraced edge intelligence with
the really powerful outcomes.

143
00:09:36,475 --> 00:09:38,965
The first one comes from
smart manufacturing.

144
00:09:39,805 --> 00:09:44,455
A major automotive company
deployed edge based analytics

145
00:09:44,455 --> 00:09:46,315
for realtime quality control.

146
00:09:46,690 --> 00:09:47,890
On their assembly lines.

147
00:09:48,640 --> 00:09:53,980
By analyzing sensor data right
onsite, they were able to reduce

148
00:09:53,990 --> 00:09:59,680
defect rates by 23% and at the same
time, they cut down on cost cloud

149
00:09:59,680 --> 00:10:02,680
data transfer costs by nearly 80%.

150
00:10:03,180 --> 00:10:08,300
And coming to the oil and gas
sector remote well monitoring

151
00:10:08,300 --> 00:10:09,980
is a perfect edge use case.

152
00:10:10,040 --> 00:10:12,140
One setup was able to maintain.

153
00:10:12,560 --> 00:10:17,810
Visibility and control during a full
three day cloud outage, avoiding

154
00:10:17,870 --> 00:10:21,230
any downtime that would've cost
over a million dollars per day.

155
00:10:21,730 --> 00:10:26,390
That kind of resilience simply isn't
possible without edge first design.

156
00:10:26,890 --> 00:10:32,490
And in maritime logistics where
connectivity is often unreliable, edge

157
00:10:32,490 --> 00:10:36,480
devices on shipping containers allowed
real time tracking and monitoring.

158
00:10:37,305 --> 00:10:42,135
Even when completely offline,
ensuring end-to-end supply chain

159
00:10:42,135 --> 00:10:44,305
visibility possible in this use case.

160
00:10:44,805 --> 00:10:49,665
So what ties these together isn't
just the use of edge, it's the

161
00:10:49,665 --> 00:10:54,495
way SRE principles were adapted to
environments that are unpredictable,

162
00:10:54,495 --> 00:10:56,805
distributed, and often disconnected.

163
00:10:57,305 --> 00:11:01,485
It shows that with the right
architecture and mindset, we can build

164
00:11:01,485 --> 00:11:06,135
highly reliable systems anywhere,
even in the harshest conditions.

165
00:11:06,635 --> 00:11:12,425
Now, let's talk about how we actually
design these edge systems to be resilient

166
00:11:12,515 --> 00:11:18,590
by default, especially in environments
where failure isn't a matter of f, but.

167
00:11:19,090 --> 00:11:24,190
We often say everything fails eventually,
and at the edge that's even more true.

168
00:11:24,790 --> 00:11:28,360
So we built with that in mind always.

169
00:11:29,260 --> 00:11:34,720
One of the most effective tools is
circuit breaking, where a component that's

170
00:11:34,720 --> 00:11:40,510
struggling or unstable can be isolated
before it causes a chain reaction.

171
00:11:41,320 --> 00:11:45,035
This helps us contain problems instead of
letting them spread across the network.

172
00:11:45,535 --> 00:11:51,085
We also use intelligent failover
mechanisms where systems can automatically

173
00:11:51,085 --> 00:11:55,255
switch to backup nodes or fallback
services when something goes wrong

174
00:11:55,755 --> 00:11:57,585
and then comes data replication.

175
00:11:58,185 --> 00:11:59,295
It is another big one.

176
00:11:59,805 --> 00:12:04,965
When devices are scattered across
locations, we need to make sure that

177
00:12:04,965 --> 00:12:10,785
data isn't lost if one node fails, so we
replicate it smartly often in real time.

178
00:12:11,285 --> 00:12:15,455
And then there's mesh networking,
which is super valuable in

179
00:12:15,455 --> 00:12:17,105
remote or mobile environments.

180
00:12:17,825 --> 00:12:21,695
Devices can talk to each other
directly rerouting around failed

181
00:12:21,695 --> 00:12:26,835
connections, forming self-healing
networks that maintain uptime even

182
00:12:26,835 --> 00:12:28,935
when parts of the system go dark.

183
00:12:29,925 --> 00:12:34,485
So together these patents gives us
a foundation for building robust

184
00:12:34,605 --> 00:12:38,835
edge systems that stay operational
even in unpredictable conditions.

185
00:12:39,335 --> 00:12:39,845
Perfect.

186
00:12:39,905 --> 00:12:44,045
So once we have designed these edge
systems for resilience, the next

187
00:12:44,045 --> 00:12:49,385
question is, how do we manage them
at scale without losing our minds?

188
00:12:50,025 --> 00:12:52,635
That's where infrastructure
automation becomes critical.

189
00:12:53,135 --> 00:12:55,985
First, we start with
infrastructure as code.

190
00:12:56,855 --> 00:13:00,995
This let's us define edge
environments declaratively, just

191
00:13:00,995 --> 00:13:02,675
like we would with cloud resources.

192
00:13:03,005 --> 00:13:08,555
We voice and control everything, so we can
re reply repeat deployments consistently,

193
00:13:09,065 --> 00:13:11,925
whether it's 10 devices or 10,000 devices.

194
00:13:12,425 --> 00:13:18,215
Next, we bring in policy as code
Before any deployment goes live,

195
00:13:18,485 --> 00:13:22,955
we validate it against security,
performance, and reliability rules.

196
00:13:23,825 --> 00:13:26,765
It's like a safety net that
prevents bad configurations

197
00:13:26,765 --> 00:13:28,535
from going out to edge devices.

198
00:13:29,045 --> 00:13:31,745
Where rollback might
be slow or impossible.

199
00:13:32,245 --> 00:13:35,185
And finally, we layer on GitHubs.

200
00:13:35,685 --> 00:13:40,725
The, this gives us a clean, automated
sync between what we've defined and get

201
00:13:40,995 --> 00:13:42,675
and what's actually running in the field.

202
00:13:43,395 --> 00:13:46,695
If something drifts, it gets
reconciled automatically.

203
00:13:47,195 --> 00:13:50,355
What's great about this approach
is that it gives us a single source

204
00:13:50,355 --> 00:13:52,635
of truth and repeatable workflows.

205
00:13:53,385 --> 00:13:56,505
Even across disconnected
resource constraint environments.

206
00:13:57,465 --> 00:14:01,965
In other words, we bring the
discipline and automation of cloud

207
00:14:01,965 --> 00:14:07,465
operations to the edge without
compromising reliability or control.

208
00:14:07,765 --> 00:14:08,125
Okay.

209
00:14:08,625 --> 00:14:15,275
One of the biggest architectural decisions
we face with edge systems is this.

210
00:14:15,775 --> 00:14:19,135
What should run locally and
what should stay in the cloud?

211
00:14:19,635 --> 00:14:22,815
Not everything makes
sense to push to the edge.

212
00:14:23,385 --> 00:14:28,245
Some workloads are better centralized,
especially when they're compute

213
00:14:28,305 --> 00:14:30,495
heavy or require global view.

214
00:14:31,395 --> 00:14:37,205
But for the other tasks like real time
control, anomaly detection, or basic

215
00:14:37,205 --> 00:14:43,265
analytics, we often can't afford the
latency of cloud round reps. These

216
00:14:43,265 --> 00:14:47,075
are the kinds of operations that
need to happen right at the source.

217
00:14:47,885 --> 00:14:52,145
So what this slide shows is a
way to think about that balance.

218
00:14:53,105 --> 00:14:58,135
On the left, we have workloads real
time decisions, anomaly detection, and

219
00:14:58,135 --> 00:15:04,035
basic analytics, things that benefit
most from being processed at the edge as

220
00:15:04,035 --> 00:15:09,645
we move to the right, into things like
historical analysis or machine learning.

221
00:15:09,895 --> 00:15:14,035
Model training, those are
typically still better handled in

222
00:15:14,035 --> 00:15:15,505
centralized cloud environments.

223
00:15:16,375 --> 00:15:20,815
So successful edge architectures
find the speed bot.

224
00:15:21,415 --> 00:15:27,815
They combine local autonomy for fast,
reliable reactions with centralized

225
00:15:27,815 --> 00:15:32,035
intelligence, like for learn for
learning, optimization and visibility.

226
00:15:32,535 --> 00:15:33,825
This hybrid model.

227
00:15:34,365 --> 00:15:38,175
Where we combine both is really
the key to getting the best of both

228
00:15:38,175 --> 00:15:43,685
worlds which has, which will have low
latency, local action, and high level

229
00:15:43,985 --> 00:15:45,875
coordination and insight from the cloud.

230
00:15:46,375 --> 00:15:50,965
Alright, let's wrap it all
up with a few key takeaways.

231
00:15:51,465 --> 00:15:56,115
First, implementing edge intelligence
isn't just about performance.

232
00:15:56,615 --> 00:15:59,455
It delivers real measurable impact.

233
00:16:00,295 --> 00:16:05,635
On average, we have seen a 40% reduction
in latency when not time sensitive

234
00:16:05,725 --> 00:16:07,495
operations are processed locally.

235
00:16:07,995 --> 00:16:12,605
That's the difference between reacting
on time and reacting too late On the cost

236
00:16:12,605 --> 00:16:19,115
side, moving analytics to the edge can
cut cloud data transfer by up to 65%,

237
00:16:19,685 --> 00:16:24,855
especially in data heavy environments
like, manufacturing or logistics.

238
00:16:25,575 --> 00:16:31,485
And when we combine that with the proper
SRE practices, customized for edge

239
00:16:31,485 --> 00:16:39,595
environments, we can realistically aim
for 99.99% reli reliability, even in

240
00:16:39,655 --> 00:16:42,235
decentralized resource constraint systems.

241
00:16:42,485 --> 00:16:46,625
So with all these key takeaways
in mind, what are the next steps?

242
00:16:47,125 --> 00:16:49,215
Start by looking at your architecture.

243
00:16:49,845 --> 00:16:53,895
Identify which workloads need
real time processing and which

244
00:16:53,895 --> 00:16:55,635
ones can stay centralized.

245
00:16:56,565 --> 00:17:00,105
Then define SLOs for your edge systems.

246
00:17:00,645 --> 00:17:02,715
Think locally, not just globally.

247
00:17:03,615 --> 00:17:08,925
And finally, build in the right
observability, automation and

248
00:17:08,925 --> 00:17:12,735
infrastructure management so
you can scale with confidence.

249
00:17:12,735 --> 00:17:15,365
It's Edge computing isn't a future trend.

250
00:17:15,455 --> 00:17:20,645
It's already here, and with the right
mindset and tools, we can make it just

251
00:17:21,245 --> 00:17:23,285
as reliable as anything in the cloud.

252
00:17:23,785 --> 00:17:24,055
Great.

253
00:17:24,475 --> 00:17:27,235
Thank you so much for
joining me for this session.

254
00:17:27,775 --> 00:17:34,645
I hope it gave you a fresh perspective
on how SRE can evolve for the edge

255
00:17:34,735 --> 00:17:37,045
where systems are more distributed.

256
00:17:37,545 --> 00:17:40,925
The stakes are higher and
the challenges are different.

257
00:17:41,425 --> 00:17:43,675
But remember, no less solvable.

258
00:17:44,425 --> 00:17:47,545
So if you're working on anything
in this piece or just curious about

259
00:17:47,635 --> 00:17:52,525
edge infrastructure, observability
or reliability, allow to connect and

260
00:17:52,575 --> 00:17:53,835
learn from your experience as well.

261
00:17:54,825 --> 00:17:57,435
You can scan the QR code on
the slide to connect with me on

262
00:17:57,435 --> 00:18:01,305
LinkedIn, or you can just use the
handle attached to connect with me.

263
00:18:02,280 --> 00:18:05,025
Thanks again for your time and
enjoy the rest of the conference.

