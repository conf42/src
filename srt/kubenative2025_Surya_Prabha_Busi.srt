1
00:00:00,500 --> 00:00:01,610
Greetings everyone.

2
00:00:01,689 --> 00:00:07,430
I'm Surya Busi coming with 18 plus years
of IT experience and currently working

3
00:00:07,430 --> 00:00:12,020
as technical lead for an automotive
industry for the past 11 years.

4
00:00:12,129 --> 00:00:17,020
So I have been closely looking and working
with the emerging cloud technologies.

5
00:00:17,020 --> 00:00:22,750
So the topic for today's conference
is how to be future ready for the.

6
00:00:22,895 --> 00:00:27,115
Cloud which includes discussions
about different architectures like

7
00:00:27,175 --> 00:00:33,414
the monolithic microservice and the
concepts of edge com, edge computing.

8
00:00:33,474 --> 00:00:37,724
And also we will look into
the future technologies, the

9
00:00:37,724 --> 00:00:40,004
emerging technologies at scale.

10
00:00:40,214 --> 00:00:44,084
So with this, my agenda for today.

11
00:00:44,584 --> 00:00:50,775
Is, comes with the cloud evolution, how
the landscape has shifted from monoliths

12
00:00:51,315 --> 00:00:54,595
to the futuristic distributor systems.

13
00:00:54,655 --> 00:00:59,724
And next we'll look into the microservices
how they have brought a big difference

14
00:00:59,724 --> 00:01:05,395
and also their adoption trends, benefits,
and the implementation challenges.

15
00:01:06,164 --> 00:01:10,785
Later we'll be looking into the edge
computing, which is a process of bringing

16
00:01:10,815 --> 00:01:16,274
the data and analysis closely to the
source of data instead of relying on

17
00:01:16,274 --> 00:01:18,974
the centralized cloud data centers.

18
00:01:19,074 --> 00:01:23,154
And to the very end, we'll be
looking into the future technologies

19
00:01:23,154 --> 00:01:27,864
like the hybrid clouds, serverless
architecture, and quantum computing.

20
00:01:28,364 --> 00:01:33,464
With all this in view, let's
begin our presentation.

21
00:01:33,494 --> 00:01:38,054
Join me for the actionable insights
from the real world implementation

22
00:01:38,174 --> 00:01:42,524
and the practical strategies for
your organization's cloud journey.

23
00:01:43,024 --> 00:01:46,954
With this, we'll move into the
very first part of our agenda.

24
00:01:47,454 --> 00:01:50,004
Which is the cloud native evaluation.

25
00:01:50,814 --> 00:01:55,314
So for years we have been stuck with
the monolithic applications where

26
00:01:55,314 --> 00:02:00,514
it's a software system where all the
features and the functionality is

27
00:02:00,544 --> 00:02:05,144
developed as a single unit and with all
its features and functionalities like.

28
00:02:05,209 --> 00:02:10,489
The user interface, the business logic
and the data access layers are all

29
00:02:10,489 --> 00:02:15,170
being developed as one single unit
and one exec executable application.

30
00:02:15,890 --> 00:02:21,290
So this single unit of application
enables us to have a simple deployment

31
00:02:21,290 --> 00:02:22,970
and development and deployment.

32
00:02:23,600 --> 00:02:28,360
Whereas going, moving on,
it'll have impacts on the.

33
00:02:28,860 --> 00:02:34,950
Maintainability and update maintainability
of the application and any updates

34
00:02:34,950 --> 00:02:40,830
related to technologies as the,
everything is tightly coupled as one unit.

35
00:02:41,340 --> 00:02:46,035
So the key characteristics of this
monolithic involves the unified code.

36
00:02:46,280 --> 00:02:51,680
Pace, tight coupling, single
deployment and simplified development.

37
00:02:52,380 --> 00:02:55,740
So looking at these, the
advantages of monolithics are

38
00:02:55,790 --> 00:03:00,320
the simplicity, the performance,
and the centralized management.

39
00:03:00,430 --> 00:03:05,560
But it has the disadvantages as
well which are with the, as we

40
00:03:05,560 --> 00:03:07,390
mentioned, the full scalability.

41
00:03:07,860 --> 00:03:13,480
The limited flex flexibility since
being a sim single unit of application,

42
00:03:13,480 --> 00:03:17,590
any technology upgrades has to be
done to the entire application, which

43
00:03:17,590 --> 00:03:21,610
might cause a significant delay in
the releases and the challenges in

44
00:03:21,610 --> 00:03:26,950
maintenance, which also adds to the
deployment risks of being a single unit.

45
00:03:27,880 --> 00:03:33,460
The typical use cases of the monolithic
applications include a small and

46
00:03:33,510 --> 00:03:38,860
small applications where with little
complexity and also an a startup

47
00:03:38,980 --> 00:03:46,030
applications where the prototype with
simplicity as the paramount that's the

48
00:03:46,030 --> 00:03:47,890
typical use cases of the monolithic.

49
00:03:47,940 --> 00:03:51,180
With all these challenges with the
monolithic architecture, we move

50
00:03:51,180 --> 00:03:56,090
on to the microservices, which
gives a greater advantages which is

51
00:03:56,090 --> 00:04:01,760
basically a collection of, collection
of autonomous units with their own

52
00:04:01,760 --> 00:04:07,790
individual responsibilities, business
responsibilities and its own data store.

53
00:04:07,859 --> 00:04:11,489
So the complexity being divided
into multiple units which can

54
00:04:11,489 --> 00:04:13,230
be maintained by themselves.

55
00:04:13,619 --> 00:04:17,549
And these services communicate
through the different protocols,

56
00:04:17,549 --> 00:04:19,579
be it BHTP or through the.

57
00:04:20,495 --> 00:04:22,855
Message queues or different sources.

58
00:04:23,245 --> 00:04:27,555
And this enables this being
smaller units, it's easy.

59
00:04:27,555 --> 00:04:32,835
It enables the easy maintenance and
gives us the flexibility, scalability,

60
00:04:32,895 --> 00:04:37,405
and all these advantages when compared
to the legacy monolithic applications.

61
00:04:37,905 --> 00:04:43,655
With that the typical use cases of both
the microservices are the large and

62
00:04:43,655 --> 00:04:49,395
complex applications which involves
complexity to be dealt with ease.

63
00:04:49,495 --> 00:04:53,755
That's about the microservice
architecture, the key use

64
00:04:53,755 --> 00:04:55,195
cases, as I mentioned.

65
00:04:55,295 --> 00:04:59,675
Involves the enterprise systems, the
e-commerce platforms example, and

66
00:04:59,675 --> 00:05:04,785
the streaming services where high
availability and resilience are critical.

67
00:05:05,285 --> 00:05:11,465
And the upcoming and technology is the
edge computing which involves processing

68
00:05:11,465 --> 00:05:18,015
data closer to the source of generation,
such as I OT devices, sensors, or local

69
00:05:18,015 --> 00:05:23,235
server, rather than relying solely on
the centralized cloud infrastructure.

70
00:05:23,735 --> 00:05:27,575
We'll look into it closely into
the later part of the presentation,

71
00:05:27,575 --> 00:05:31,685
but for now, edge Computing is a
process where the data and analysis

72
00:05:31,685 --> 00:05:33,515
are close to the source of data.

73
00:05:34,415 --> 00:05:36,020
With this, I'll move to the next.

74
00:05:36,520 --> 00:05:40,480
Which is with the benefits we
have seen with the microservices

75
00:05:40,480 --> 00:05:46,220
architecture this driving pri, this
being driving the enterprise agility.

76
00:05:46,220 --> 00:05:51,100
So we look into the various, advantages
of the micro ARC microservices

77
00:05:51,100 --> 00:05:52,810
architecture in detail here.

78
00:05:52,840 --> 00:05:58,560
With the widespread adoption, we have
seen huge surge in the industry where the

79
00:05:58,560 --> 00:06:06,150
microservices adoption has increased from
45% in 2019 to the dominant 91% in 2024.

80
00:06:06,960 --> 00:06:11,070
So this is clearly indicating
the industry shift.

81
00:06:11,190 --> 00:06:15,240
With all the proven advantages
of microservices, as we explained

82
00:06:15,240 --> 00:06:18,770
earlier, this smaller units
enable the faster deployments.

83
00:06:18,810 --> 00:06:24,120
With that being said, we have
seen a significant 76% reduction

84
00:06:24,120 --> 00:06:28,530
in the deployment time, enabling
faster iteration cycles and

85
00:06:28,530 --> 00:06:30,035
quicker delivery of new features.

86
00:06:30,535 --> 00:06:33,505
Which also includes the cost efficiency.

87
00:06:33,685 --> 00:06:39,595
So organization, organizations can
achieve up to 50% reduction in the cost

88
00:06:39,595 --> 00:06:42,535
as we scale only the resources we need.

89
00:06:42,935 --> 00:06:45,365
The services being
independent of each other.

90
00:06:45,865 --> 00:06:50,815
And then comes the enhanced
scalability which contribute to the 62%

91
00:06:50,815 --> 00:06:55,435
improvement in resource utilization,
allowing high demand components

92
00:06:55,435 --> 00:06:57,775
to scale precisely what as needed.

93
00:06:58,175 --> 00:07:01,445
These go, the enhanced scalability
and the cost efficiency

94
00:07:01,625 --> 00:07:03,005
goes hands in hand in hand.

95
00:07:03,760 --> 00:07:09,370
As we will be scaling only the units which
need, which is receiving huge traffic.

96
00:07:09,400 --> 00:07:14,260
Whereas the, which comes with the cost
efficiency of unnecessarily wasting the

97
00:07:14,260 --> 00:07:16,270
resources which need not to be scaled.

98
00:07:17,110 --> 00:07:21,560
Then comes the better fault
isolation as a critical advantage.

99
00:07:21,590 --> 00:07:25,190
We have seen 83% reduction
in the system-wide failures.

100
00:07:25,825 --> 00:07:31,485
The failure of a service, one individual
service easily can be pinpointed with

101
00:07:31,485 --> 00:07:36,445
the with the with the business lodging
being scaled into different services.

102
00:07:36,945 --> 00:07:41,445
With all these advantages will
move to the next, which is.

103
00:07:41,945 --> 00:07:45,945
As we have seen the pros, now we
have to look into the cons of the

104
00:07:45,945 --> 00:07:49,925
microservice architecture with
its implementation challenges.

105
00:07:49,955 --> 00:07:56,655
The first being is the technical depth
because 60%, 67% of the enterprises.

106
00:07:57,395 --> 00:08:02,205
Are all stuck with the legacy code
where code integration, which has

107
00:08:02,205 --> 00:08:07,345
the complexity of understanding and
trying to divide into the simple units

108
00:08:07,395 --> 00:08:09,135
with the microservice architecture.

109
00:08:09,135 --> 00:08:15,465
So this huge technical depth is causing
the impediment of the moving to.

110
00:08:16,165 --> 00:08:21,205
Moment to the microservice implementation,
then comes the service decomposition.

111
00:08:21,205 --> 00:08:25,455
As we understand the business logic
in microservice architecture is being

112
00:08:25,545 --> 00:08:30,835
divided into autonomous units, it's
highly critical to better understand

113
00:08:30,835 --> 00:08:36,435
the business and to the level it has
to be optimally set the boundaries

114
00:08:36,435 --> 00:08:38,355
and being divided into the units.

115
00:08:38,845 --> 00:08:39,505
So without.

116
00:08:39,810 --> 00:08:44,640
A good business knowledge and the
boundaries to be set on the domains.

117
00:08:45,030 --> 00:08:49,080
It makes it difficult for a proper
design of the microservices.

118
00:08:49,950 --> 00:08:54,040
And with all this in mind, the
operational complex complexity,

119
00:08:54,140 --> 00:08:59,300
which says that 71% report increased
complexity in monitoring, debugging,

120
00:08:59,300 --> 00:09:01,760
and maintaining the service depend.

121
00:09:01,760 --> 00:09:06,690
As we understand microservices are
different services which communicate

122
00:09:06,960 --> 00:09:10,400
and and can grow in number as
the complexity of the application

123
00:09:10,400 --> 00:09:15,040
grows, and the difficulty of
maintaining them as well grows.

124
00:09:15,070 --> 00:09:15,675
That's what the optic.

125
00:09:16,030 --> 00:09:18,880
Cost, operational
complexity being increased.

126
00:09:19,480 --> 00:09:25,480
And also with the different services,
having different data stores, it becomes

127
00:09:25,560 --> 00:09:27,540
great difficulty with the data management.

128
00:09:27,540 --> 00:09:32,280
As we see, there's a 64% struggle
with data consistency between these

129
00:09:32,280 --> 00:09:36,900
different single units and the
distributor transactions and the data

130
00:09:36,900 --> 00:09:38,910
accuracy between these several units.

131
00:09:38,960 --> 00:09:42,530
This what we understand about
the implementation challenges of

132
00:09:42,530 --> 00:09:44,540
the microservices architecture.

133
00:09:45,110 --> 00:09:47,450
Now let's move on to with all.

134
00:09:48,350 --> 00:09:53,020
This knowledge as we move to
the next step, which is the

135
00:09:53,020 --> 00:09:57,340
architecture foundations needed
for the microservice architecture.

136
00:09:57,590 --> 00:10:00,920
This involves the infrastructure
components to be understood, the

137
00:10:00,920 --> 00:10:05,570
design, different design patterns
available as of today to better

138
00:10:05,570 --> 00:10:07,760
implement the microservice architecture.

139
00:10:08,260 --> 00:10:11,560
When coming to the infrastructure
components, we have the container

140
00:10:12,220 --> 00:10:18,430
orchestration with which the greater
scale and the management of this different

141
00:10:18,430 --> 00:10:20,650
business units is, would be possible.

142
00:10:21,040 --> 00:10:25,390
As we understand, as the application
grows to be complex, it's very key.

143
00:10:25,475 --> 00:10:30,235
To be able to deploy and scale with a
greater accuracy in the performance.

144
00:10:30,595 --> 00:10:34,015
So the Kubernetes Container
Organization orchestration is one

145
00:10:34,015 --> 00:10:37,955
of the key components when come,
when it comes to the infrastructure.

146
00:10:38,295 --> 00:10:43,195
Similarly with the huge traffic
as we expect it to be scaled to a

147
00:10:43,225 --> 00:10:45,955
huge level of the traffic expected.

148
00:10:46,495 --> 00:10:51,265
It is important to have a proper
traffic routing, load balancing, and,

149
00:10:51,345 --> 00:10:55,355
observability between the services
where in this scenario the service

150
00:10:55,355 --> 00:10:59,595
mesh for this traffic management
is a good option available for

151
00:10:59,895 --> 00:11:01,815
as an infrastructure component.

152
00:11:02,325 --> 00:11:06,770
And the proper routing
enables proper performance and

153
00:11:06,820 --> 00:11:08,310
deliverance of the results.

154
00:11:08,745 --> 00:11:12,285
So the API Gateways for client
service communication is one

155
00:11:12,345 --> 00:11:14,115
another infrastructure component.

156
00:11:14,685 --> 00:11:19,875
So this gives us a controlled way of
organizing the request, routing them and

157
00:11:19,875 --> 00:11:25,125
handling them with the authentication
necessary for the proper security.

158
00:11:25,625 --> 00:11:29,945
Then comes the centralized logging
and monitoring which is very key

159
00:11:29,945 --> 00:11:35,355
in where the complexity being
properly managed and to provide a

160
00:11:35,515 --> 00:11:37,795
accuracy of the information provided.

161
00:11:38,425 --> 00:11:43,455
This relates to the aggregating the logs
metrics from all the microservices to

162
00:11:43,455 --> 00:11:47,955
enable the e debugging and operational
visibility at a higher level.

163
00:11:48,455 --> 00:11:53,135
So as we see the inspir sector components
moving onto the design patterns which

164
00:11:53,135 --> 00:11:58,245
comes with the domain driven design for
service boundaries, as we understand

165
00:11:58,275 --> 00:12:03,555
the business complex complexity to be
divided into an operatable single unit,

166
00:12:04,065 --> 00:12:09,055
it the domain driven knowledge is very
key to set the boundaries and to develop

167
00:12:09,055 --> 00:12:14,305
the individual services and maintaining
them properly and held complexity.

168
00:12:15,215 --> 00:12:19,565
And similarly, the event driven
architecture decoupling uses events

169
00:12:19,565 --> 00:12:23,875
of, like we, as we mentioned, where the
responses need not be synchronous, where

170
00:12:24,265 --> 00:12:28,705
the event driven architecture helps
with the loose coupling and the per

171
00:12:28,795 --> 00:12:32,995
increase in performance and scalability
and the improved responsiveness.

172
00:12:33,535 --> 00:12:39,465
So these are the key while designing the
microservice patterns architecture and

173
00:12:39,615 --> 00:12:42,015
the CQRS for complex, as we understand.

174
00:12:42,425 --> 00:12:47,575
As the scalability increases the data
being to be operated becomes complex.

175
00:12:47,575 --> 00:12:53,195
So separate, read and write operations
to manage this data and the the

176
00:12:53,195 --> 00:12:57,395
performance with this complex data
is being achieved with the QRS.

177
00:12:58,385 --> 00:13:02,405
As we all know with this many point
touch points and the network ops we

178
00:13:02,405 --> 00:13:06,755
take with the microservice architecture,
a proper circuit breaker is much

179
00:13:06,755 --> 00:13:08,465
more important for the resilience.

180
00:13:08,835 --> 00:13:12,735
Which prevents the failures at a
certain point and not cascading

181
00:13:12,735 --> 00:13:15,255
it to the respective systems.

182
00:13:15,975 --> 00:13:19,455
So with these architectural
foundations needed for the microservice

183
00:13:19,455 --> 00:13:22,035
architecture, we'll move to the next.

184
00:13:22,535 --> 00:13:27,675
So now we understand the legacy challenges
with the legacy monolithic obligations,

185
00:13:27,675 --> 00:13:32,655
and we overcome what we've overcome
with the microservice architecture and

186
00:13:32,655 --> 00:13:36,095
the different challenges implementing
the microservice architecture.

187
00:13:36,635 --> 00:13:41,015
We'll move on to the next emerging
technology, which is edge computing, which

188
00:13:41,015 --> 00:13:47,085
is a process where, the huge data involved
today with this, all these applications

189
00:13:47,135 --> 00:13:49,805
need to be processed efficiently.

190
00:13:50,135 --> 00:13:54,515
So edge computing is a process
where the data is being brought

191
00:13:54,515 --> 00:14:00,085
closer to the for analysis to the
source of the data, and which has

192
00:14:00,085 --> 00:14:02,365
proven to be providing many results.

193
00:14:02,365 --> 00:14:05,485
So here are some numbers
proving its efficiency.

194
00:14:06,055 --> 00:14:10,575
So with the data being, analysis and it's
being closed to the source of the data.

195
00:14:10,575 --> 00:14:16,575
It, the latency reduction, the 45%
latency reduction, decrease in processing

196
00:14:16,575 --> 00:14:19,755
delays, and for very time applications.

197
00:14:19,925 --> 00:14:24,395
And which with which there's
a 42% real time improvement.

198
00:14:24,895 --> 00:14:29,725
Enhanced data handling capabilities for
mission critical systems, as example such

199
00:14:29,725 --> 00:14:37,045
as healthcare and manufacturing, and which
also comes with the 78% bandwidth savings.

200
00:14:37,135 --> 00:14:41,825
As we understand the data being close to
the source, the bandwidth the reduction

201
00:14:41,825 --> 00:14:47,285
in the network hoops being decreased
greatly increases the bandwidth savings.

202
00:14:47,785 --> 00:14:54,055
And the response acceleration is proven
to be 56% increased with the emergency

203
00:14:54,055 --> 00:14:56,065
response, wherein all it's needed.

204
00:14:56,195 --> 00:14:59,745
As I mentioned in the healthcare
applications and the manufacturing

205
00:14:59,745 --> 00:15:03,465
applications and need not be
necessarily the same, we, it can

206
00:15:03,465 --> 00:15:08,445
be applied across multiple domains
like banking and e-commerce or

207
00:15:08,715 --> 00:15:10,335
where the response is critical.

208
00:15:10,835 --> 00:15:11,015
It.

209
00:15:11,105 --> 00:15:14,795
Looking into the numbers,
we'll move on to the next.

210
00:15:15,295 --> 00:15:19,565
Which is the edge computing applications
where it can be applied in different

211
00:15:19,565 --> 00:15:23,205
industries which involves the two
examples being mentioned here.

212
00:15:23,205 --> 00:15:25,335
The manufacturing and the healthcare.

213
00:15:25,475 --> 00:15:30,795
As we understand manufacturing, were huge
volumes of data is being processed to

214
00:15:30,795 --> 00:15:33,825
pro efficiently run the production lines.

215
00:15:33,855 --> 00:15:36,945
There has been a 33% efficiency boost.

216
00:15:37,460 --> 00:15:41,750
Seen and the realtime quality control
of the different data and to provide

217
00:15:41,750 --> 00:15:48,120
any defects is being the de defect
detection being increased by 87%.

218
00:15:48,620 --> 00:15:51,790
So this predictive maintenance
this cost to the predictive

219
00:15:51,790 --> 00:15:54,580
maintenance reduced by 41%.

220
00:15:54,680 --> 00:15:56,810
That's what we see in the
manufacturing industry.

221
00:15:57,290 --> 00:16:01,040
Coming to the healthcare, there
was there's been a significant

222
00:16:01,040 --> 00:16:07,690
increase in the response up to 56%
faster emergency response with a 93%

223
00:16:07,690 --> 00:16:12,420
accuracy, which is very key where
the life of the patients is online.

224
00:16:12,920 --> 00:16:16,850
Where immediate data processing is
very critical for taking for the

225
00:16:16,880 --> 00:16:18,890
medical staff to take decisions.

226
00:16:19,550 --> 00:16:24,510
So edge computing is very proven to
be very valuable in such environments

227
00:16:24,540 --> 00:16:29,260
where time sensitive data is key
for the day-to-day operations,

228
00:16:29,760 --> 00:16:33,645
and we move to the next, where with
this edge computing with all that

229
00:16:33,645 --> 00:16:37,665
we learned there are definitely some
architectural considerations to be made.

230
00:16:38,265 --> 00:16:41,675
Where with this as mentioned,
different sources of data with

231
00:16:41,675 --> 00:16:46,175
the quality and quantity of data
being processed, it is key to

232
00:16:46,175 --> 00:16:48,005
understand the resource constraints.

233
00:16:48,035 --> 00:16:51,455
With the hardware limitations
of the CPU storage.

234
00:16:52,265 --> 00:16:57,065
It is key to understand the amount of,
hardware needed to process such data.

235
00:16:57,695 --> 00:17:02,015
So as of today, the K three s
and the Micro Ks are designed for

236
00:17:02,015 --> 00:17:06,035
these environments, optimizing
and giving a huge results.

237
00:17:06,535 --> 00:17:09,605
Same with the connectivity
where it need to be considered.

238
00:17:09,685 --> 00:17:14,185
The emergency of, and the criticality
of the data need to be presented.

239
00:17:14,665 --> 00:17:18,555
It is important to have a
reliable and high performing

240
00:17:18,555 --> 00:17:20,625
connectivity, network connectivity.

241
00:17:21,285 --> 00:17:24,950
So Kubernetes architecture is
being proven to be a solution

242
00:17:24,950 --> 00:17:26,980
with all these in consideration.

243
00:17:27,820 --> 00:17:32,170
As we mentioned, with all the huge data
and the critical data being over spread

244
00:17:32,410 --> 00:17:34,810
on the attack surface is being increased.

245
00:17:35,170 --> 00:17:41,245
Security becomes the paramount with the
amount of PIA and SPIA being on net.

246
00:17:41,965 --> 00:17:42,715
So the robust.

247
00:17:42,915 --> 00:17:47,865
Security process necessities, like
the zero trust models, hardware based

248
00:17:47,865 --> 00:17:52,605
security features, and the strong
encryption is very much needed for all

249
00:17:52,605 --> 00:17:54,725
this communications over the network.

250
00:17:55,355 --> 00:17:59,075
So when it comes to edge computing
these concentrations are need to be

251
00:17:59,075 --> 00:18:01,895
made when designing the applications.

252
00:18:02,395 --> 00:18:04,600
Now that we move to the next.

253
00:18:05,100 --> 00:18:10,150
So with all the current solutions
available in market today for this

254
00:18:10,150 --> 00:18:15,830
hybrid and multi-cloud approaches,
which involves the Amazon Web services,

255
00:18:15,860 --> 00:18:21,170
the Microsoft Azure, the Google Cloud
and on-premises are proven to be in

256
00:18:21,170 --> 00:18:26,610
different, providing great results in
different business areas like the AWS

257
00:18:26,610 --> 00:18:31,980
being, the production and scalable
services and Azure being good for the

258
00:18:31,980 --> 00:18:34,720
enterprise apps and identity integration.

259
00:18:35,530 --> 00:18:40,470
And whereas Google Cloud is coming up
with the data analytics and ml workloads

260
00:18:40,550 --> 00:18:44,690
being proven with the on-premises,
the latency sensitivity and the

261
00:18:44,690 --> 00:18:46,850
legacy systems are being well handled.

262
00:18:47,345 --> 00:18:52,325
That's what the solutions available
helps us to understand better

263
00:18:52,325 --> 00:18:55,075
design our applications as of today.

264
00:18:55,575 --> 00:18:57,090
With that, we'll move to the next slide.

265
00:18:57,590 --> 00:19:02,250
So with all this available in the
market, it makes us easy to have a

266
00:19:02,250 --> 00:19:06,470
development focus on the key business
logic rather than worrying about

267
00:19:06,470 --> 00:19:10,760
the infrastructure where all this
infrastructure as service is providing.

268
00:19:10,840 --> 00:19:15,480
In the, by many organizations
in the marketplace, this leads

269
00:19:15,600 --> 00:19:18,180
to the constant cost efficiency.

270
00:19:18,235 --> 00:19:23,555
With the zero cost as it's paper per
use with all the services provided,

271
00:19:23,705 --> 00:19:26,345
if not in use, we need not be paying.

272
00:19:26,845 --> 00:19:32,475
As we mentioned, it's a zero cost for the
ideal resources and the, and with the old

273
00:19:32,475 --> 00:19:37,425
being small and the market being growing,
the auto-scaling plays a key role, which

274
00:19:37,425 --> 00:19:42,895
is hugely enabled with this flexibility
of opting the paper use models available.

275
00:19:43,380 --> 00:19:46,610
Which enables of instance,
scaling whenever depending

276
00:19:46,610 --> 00:19:49,640
on the traffic automatically.

277
00:19:50,180 --> 00:19:53,930
This enables organizations using
serverless architectures report

278
00:19:54,050 --> 00:19:59,600
61% shorter development cycles and
45% reduced operational overhead.

279
00:20:00,100 --> 00:20:03,145
With all this emerging
technologies, we move on to.

280
00:20:03,645 --> 00:20:07,295
Another very futuristic application,
which is the quantum computing.

281
00:20:07,865 --> 00:20:12,400
So quantum computing is basically
implement, makes use of the quantum

282
00:20:12,400 --> 00:20:17,730
mechanic concept of quantum mechanics
to process information using quantum

283
00:20:17,730 --> 00:20:22,900
bits or qubits which can, which enables
computers to perform at much higher

284
00:20:22,900 --> 00:20:25,210
speed than the classical computers.

285
00:20:25,840 --> 00:20:28,620
City has a great potential
and this can help.

286
00:20:29,390 --> 00:20:34,500
In various key areas like the material
science, pharmaceuticals, and machine

287
00:20:34,500 --> 00:20:40,050
learning by solving problems with a
with a much more higher speed with this.

288
00:20:40,550 --> 00:20:44,640
But coming to the disadvantage of
quantum computing, it's still under

289
00:20:44,640 --> 00:20:47,250
development and it's still emerging.

290
00:20:47,250 --> 00:20:48,840
It's in the very early stages.

291
00:20:49,110 --> 00:20:53,370
And with, with the amount of speed
we are expecting, the infrastructure

292
00:20:53,370 --> 00:20:55,140
involved comes at high cost.

293
00:20:55,140 --> 00:20:59,390
So these services as we
understand are still emerging.

294
00:20:59,890 --> 00:21:04,180
As we understand this all being in the
cloud, there are certain concerns with

295
00:21:04,180 --> 00:21:06,760
the security of these distributed systems.

296
00:21:07,250 --> 00:21:11,600
Proper mechanisms have been in
place with like different mechanisms

297
00:21:11,600 --> 00:21:16,100
like the zero trust architecture,
the runtime protection, the secret

298
00:21:16,100 --> 00:21:18,080
management, and the service membership.

299
00:21:18,100 --> 00:21:20,650
Security and the supply chain security.

300
00:21:21,190 --> 00:21:25,630
So coming to the zero trust architecture,
it's like the least privilege being

301
00:21:25,630 --> 00:21:30,950
provided and the fine-grain identity
controls being set in place to avoid any

302
00:21:30,950 --> 00:21:36,050
security concerns and secret management
is encrypting and storage of the necessary

303
00:21:36,050 --> 00:21:41,410
secrets in a more secured area and
providing a least privileged access.

304
00:21:41,410 --> 00:21:44,980
And GP Secret Manager is one
of the examples for this.

305
00:21:45,440 --> 00:21:49,010
Similarly, the SEC service mesh
securities at the network layer, the

306
00:21:49,010 --> 00:21:54,520
TLS layer providing the certificate
management automation at a great level.

307
00:21:55,020 --> 00:21:59,110
And the runtime protection being
detecting the any behavioral analysis

308
00:21:59,110 --> 00:22:04,170
anomaly with the container workloads,
the health checking, the timely health,

309
00:22:04,800 --> 00:22:10,490
and providing dashboard with the analysis
and the supply chain security is where

310
00:22:10,580 --> 00:22:15,140
the verifying the bills, identifying
the dependency vulnerabilities in

311
00:22:15,140 --> 00:22:18,060
advance to avoid any disturbances.

312
00:22:18,560 --> 00:22:24,090
With all this security and distributed
clouds, we'll move to the next.

313
00:22:24,590 --> 00:22:28,700
So what we have understood with
the legacy monolithic applications,

314
00:22:28,700 --> 00:22:32,820
the micro upcoming microservice
architecture and the hybrid cloud and

315
00:22:33,000 --> 00:22:38,820
the edge computing, and the very much
emerging quantum quantum computing.

316
00:22:39,645 --> 00:22:43,594
Now we have all the tools with
her within us with our hands.

317
00:22:44,495 --> 00:22:48,625
We are trying to understand how
we can apply all this to be a

318
00:22:48,625 --> 00:22:50,514
future ready cloud strategy.

319
00:22:51,054 --> 00:22:55,245
So with all these technologies
available and having having them in

320
00:22:55,245 --> 00:23:01,315
our radar enables us to assess and our
organizational requirements and try to.

321
00:23:02,015 --> 00:23:05,975
Use the proper tools for designing
the organization requirements.

322
00:23:06,695 --> 00:23:11,955
So with this, we can enable the
progressive adoption patterns with the,

323
00:23:11,985 --> 00:23:16,814
by adopting the less clear critical
requirements and trying to use the

324
00:23:16,814 --> 00:23:21,464
tools and prove the value of them, and
then expand whatever we learned to the

325
00:23:21,464 --> 00:23:25,794
different areas of the organization
which enables us a progressive

326
00:23:25,794 --> 00:23:28,594
adaption instead of, a bulk modulation.

327
00:23:29,415 --> 00:23:30,585
And that involves.

328
00:23:30,899 --> 00:23:35,290
That involves investing in the platform
engineering as well, where a developer

329
00:23:35,290 --> 00:23:39,190
platform where we can put all the
learnings in one place and then, and

330
00:23:39,190 --> 00:23:44,190
enabling the rest of the development
teams utilize what we learn and making

331
00:23:44,190 --> 00:23:46,110
and enforcing the best practices.

332
00:23:46,190 --> 00:23:50,900
To have the learning curves
being reduced at a high level.

333
00:23:51,400 --> 00:23:52,960
So not just learning.

334
00:23:52,990 --> 00:23:55,900
And definitely the performance
need to be measured.

335
00:23:56,050 --> 00:24:00,900
Measured what matters with all the Dora
metrics and measuring the cost efficiency

336
00:24:00,900 --> 00:24:05,870
and setting up the key performance
indicate indexes enables us to build

337
00:24:05,870 --> 00:24:08,240
a very future ready cloud strategy.

338
00:24:08,740 --> 00:24:11,890
Hope this all helps, and with this.

339
00:24:12,295 --> 00:24:12,565
Oh.

340
00:24:13,065 --> 00:24:17,055
We come to the key takeaways of this
presentation of what we learn and what

341
00:24:17,445 --> 00:24:19,215
are supposed to be our next steps.

342
00:24:19,255 --> 00:24:22,645
So coming to the what we
learn microservices adoption.

343
00:24:23,490 --> 00:24:28,490
Has reached the 91% delivering proven
benefits as we understand with the

344
00:24:28,610 --> 00:24:32,990
huge benefits of microservices, it
being adopted and has been growing

345
00:24:33,090 --> 00:24:34,979
widely throughout the industry.

346
00:24:35,759 --> 00:24:38,699
And Edge computing being delivering 45%.

347
00:24:39,030 --> 00:24:40,259
Latency reductions.

348
00:24:40,320 --> 00:24:43,710
As we understand in the very time
sensitive industries like the healthcare

349
00:24:43,710 --> 00:24:48,170
and the manufacturing and the hybrid
cloud approaches, reducing downtime

350
00:24:48,170 --> 00:24:53,600
by 41% as the infrastructure is of a
less burden now and the key business.

351
00:24:54,260 --> 00:24:59,600
Focus is being increased with all
this emergency, and we understand the

352
00:24:59,600 --> 00:25:05,110
emerging technologies like the serverless
architecture and the quantum computing,

353
00:25:05,470 --> 00:25:11,070
which greatly benefits in research areas
and helps in the growing industries.

354
00:25:11,820 --> 00:25:15,330
So with all these understandings,
our next steps include SS or.

355
00:25:16,205 --> 00:25:20,855
Current requirements of our industry
and the better design applications

356
00:25:20,855 --> 00:25:26,745
using the emerging technologies against
the cloud native patterns and identify

357
00:25:26,835 --> 00:25:32,655
the opportunities of analysis of the
data using the edge computing and,

358
00:25:32,680 --> 00:25:36,700
setting up the right tools, having
the right technology radar within

359
00:25:37,150 --> 00:25:43,240
set within the organization help us
develop a much business focused and

360
00:25:43,240 --> 00:25:46,480
much and highly performing applications.

361
00:25:46,980 --> 00:25:51,440
And with this it helps the
organizations grow at a great level.

362
00:25:51,940 --> 00:25:55,960
With this, I end my presentation
and thank you for this opportunity.

