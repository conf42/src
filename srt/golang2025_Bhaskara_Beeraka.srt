1
00:00:00,330 --> 00:00:01,980
Hi, this is Baskar America.

2
00:00:02,530 --> 00:00:06,189
today our topic is,
revolutionizing telecom BS with go.

3
00:00:06,689 --> 00:00:11,070
So in this presentation, we will
explore how go based solution have

4
00:00:11,070 --> 00:00:14,580
enabled the telecom companies to
handle them millions of transaction

5
00:00:14,610 --> 00:00:18,180
while achieving the significant cost
saving and performance improvement.

6
00:00:18,680 --> 00:00:23,229
Join us, as we shared that practical
insight and real world implementation for

7
00:00:23,229 --> 00:00:28,109
the, engineering team looking into the
build a next generation telecom, infras.

8
00:00:28,609 --> 00:00:29,664
So what are the DSS.

9
00:00:30,589 --> 00:00:34,389
BSS is I better been a support
system in telecom, industries.

10
00:00:34,439 --> 00:00:39,429
it's a kind of pyramid architecture
like, network layer and VSS layer on

11
00:00:39,429 --> 00:00:43,059
top of BSS layer on top of, customer
experience layer kind of thing.

12
00:00:43,109 --> 00:00:47,659
telecom industries, they have a.
Which we have to translating to the

13
00:00:47,659 --> 00:00:52,129
digital, using the GO programming
and apply the microservice

14
00:00:52,129 --> 00:00:54,139
architecture and in data cloud.

15
00:00:54,639 --> 00:01:01,239
the digital BSS market, landscapes, so
8.9 billion, projected, global digital

16
00:01:01,239 --> 00:01:05,899
BSS market value markets size back, 2026.

17
00:01:05,989 --> 00:01:10,759
So they're expecting,
almost, $9 billion, in 2026.

18
00:01:11,345 --> 00:01:18,664
The compound annual growth rate is
almost 18%, 70.8%, and cost is 75%,

19
00:01:18,725 --> 00:01:20,884
and 40% is operational production.

20
00:01:21,095 --> 00:01:25,175
So telecommunication BSS
market is experience.

21
00:01:25,175 --> 00:01:28,925
A rapid growth has provided,
transition from the legacy

22
00:01:28,925 --> 00:01:30,695
system to a digital solution.

23
00:01:31,294 --> 00:01:34,384
This c is, driven by the
increasing customer, demand

24
00:01:34,384 --> 00:01:35,764
for the real time services.

25
00:01:36,484 --> 00:01:41,535
The need for operation efficiency and,
competition, competition from the digital

26
00:01:41,535 --> 00:01:47,415
need to company entering the space that
go programming is emerged as a key enabler

27
00:01:47,955 --> 00:01:52,705
in this, transformation offering the
performance benefit that translates that

28
00:01:52,705 --> 00:01:56,535
directly to the business value through
the, through reduce their development

29
00:01:56,535 --> 00:01:58,065
cost and the operational savings.

30
00:01:58,565 --> 00:02:02,104
So when we are applying the,
transformation from the legacy application

31
00:02:02,104 --> 00:02:08,315
to the digital, so it's almost a percent
cost sale and 40% operational traditions.

32
00:02:08,814 --> 00:02:10,155
why go, for the telecom bss.

33
00:02:10,655 --> 00:02:14,675
So go programming language,
having a special features.

34
00:02:15,175 --> 00:02:20,885
using these features we can, efficiently
develop the, transformation from,

35
00:02:20,935 --> 00:02:22,774
legacy application to the, digital.

36
00:02:23,644 --> 00:02:28,014
So high performance, concurrency
model and a memory efficiency

37
00:02:28,314 --> 00:02:29,634
cross platform supports.

38
00:02:29,984 --> 00:02:34,424
concurrency model means, go, go
routine for the efficient processing.

39
00:02:34,924 --> 00:02:39,494
and memory efficiency to go programming,
having, language, having a special,

40
00:02:39,654 --> 00:02:44,344
garbage collection, features and
class platform support means it's

41
00:02:44,344 --> 00:02:46,054
compiled once and put anywhere.

42
00:02:46,554 --> 00:02:50,754
So go doesn't philosophy
aligns there perfectly with

43
00:02:50,754 --> 00:02:52,734
the telecom BSS requirement.

44
00:02:53,534 --> 00:02:58,504
It's, compiled the natural delivery
and performance needed for the high

45
00:02:58,504 --> 00:03:03,574
volume transaction processing while
maintaining the developer productivity

46
00:03:03,994 --> 00:03:05,884
through the clean accessible syntax.

47
00:03:06,634 --> 00:03:11,704
The language is built in the concurrency
model with the go routine, and the channel

48
00:03:11,704 --> 00:03:14,944
provided a solution for the handling them.

49
00:03:15,304 --> 00:03:21,844
Millions of simultaneous connections, a
common scenario in the telecom enrollment.

50
00:03:22,714 --> 00:03:27,364
Additionally, gross memory management
and garbage collection minimize

51
00:03:27,364 --> 00:03:33,514
the resource utilization and
making it a. But always on systems.

52
00:03:34,204 --> 00:03:38,364
So that is what earlier, we discussed go
programming language, having a special

53
00:03:38,364 --> 00:03:40,014
features like a congruency model.

54
00:03:40,254 --> 00:03:44,274
It has to, handling the, parallel process,
concurrency programming kind things.

55
00:03:44,774 --> 00:03:46,634
and, special garbage collections.

56
00:03:46,694 --> 00:03:50,489
so I, because of that, utilizing
the resources, very minimal.

57
00:03:51,454 --> 00:03:55,694
So when we are supposed to using the
any resources, once that, task is done,

58
00:03:55,694 --> 00:03:57,984
that resources immediately are released.

59
00:03:58,484 --> 00:03:59,670
So that's part

60
00:04:00,169 --> 00:04:01,669
microservice architecture in the tele.

61
00:04:02,169 --> 00:04:03,129
Service independence.

62
00:04:03,579 --> 00:04:07,810
Each business function operates as
a standalone service with, with it

63
00:04:08,079 --> 00:04:10,269
one data store and the AP interface.

64
00:04:10,659 --> 00:04:15,109
This independence allows the team to
develop and apply the scales, services

65
00:04:15,109 --> 00:04:17,089
without affecting other components.

66
00:04:18,019 --> 00:04:19,809
So service, independence.

67
00:04:19,890 --> 00:04:23,210
when we are, talking about
translating application to.

68
00:04:23,710 --> 00:04:28,480
we have to, I mean that, BSS
enterprise applications, we have to

69
00:04:28,480 --> 00:04:30,160
divide into the multiple services.

70
00:04:30,660 --> 00:04:35,000
So each services, it has a own
data source and, multiple a PA

71
00:04:35,000 --> 00:04:36,920
calls or multiple a p interfaces.

72
00:04:37,680 --> 00:04:42,600
because of that, it is very easy
to develop that services and it

73
00:04:42,600 --> 00:04:47,480
applied individually and, development
activity is very ly happening,

74
00:04:47,480 --> 00:04:49,880
so multiple services we have to.

75
00:04:50,380 --> 00:04:55,340
And the resilience and, for, to
isolation, failures in one service,

76
00:04:55,390 --> 00:04:56,920
don't catch cutting into the system.

77
00:04:57,280 --> 00:05:04,310
in the, in BSS side, we have a. Multiple
services, I suppose any services, is down

78
00:05:04,970 --> 00:05:07,550
so it do not cascade through the system.

79
00:05:08,030 --> 00:05:12,800
So we can apply some patterns like,
circuit, brake cards or time mode,

80
00:05:12,920 --> 00:05:17,390
and mechanism ensure that viral
system remains operationally even

81
00:05:17,870 --> 00:05:20,180
when individual component fails.

82
00:05:20,680 --> 00:05:25,780
At the same time, target scaling resources
can be allocated precisely where needed.

83
00:05:26,280 --> 00:05:29,970
High demand services like a
building or customer management

84
00:05:29,970 --> 00:05:34,715
can scale independently during the
peak period without, our project.

85
00:05:35,215 --> 00:05:36,190
Yeah, that's absolutely.

86
00:05:36,625 --> 00:05:40,315
So we no need to enter system
to scale up something like that.

87
00:05:40,855 --> 00:05:43,750
So what are the service, on demand?

88
00:05:43,870 --> 00:05:47,020
That particular service only
we have to scale up actually.

89
00:05:47,860 --> 00:05:49,330
So that is a targeted scaling.

90
00:05:49,995 --> 00:05:54,440
So the transac, transition from the
monolithic, VSS to the microservices

91
00:05:54,440 --> 00:05:58,610
has been, transformative to, for the
telecom approach, this architectural

92
00:05:58,610 --> 00:06:03,320
approach, based on the complex systems
into the manageable, manageable and

93
00:06:03,410 --> 00:06:06,995
specialized services that communicating
through the well defined a PS.

94
00:06:07,495 --> 00:06:10,015
Go small memory, footprint and fast.

95
00:06:10,065 --> 00:06:10,795
start, time.

96
00:06:10,795 --> 00:06:14,995
Make it, practically well suited
for the microservice implementation.

97
00:06:15,025 --> 00:06:20,375
Enable that rapid scaling in response
to change the demand pattern.

98
00:06:20,875 --> 00:06:22,435
performance metrics and benchmarks.

99
00:06:22,975 --> 00:06:29,215
So our real world implementation of core
base BSO solution have demonstrated signal

100
00:06:29,695 --> 00:06:32,325
performance improvement, legacy systems.

101
00:06:33,120 --> 00:06:37,440
Our benchmark shows that, go
implementation, consistently.

102
00:06:37,500 --> 00:06:41,870
our performance previous, generations
of telecom software across the

103
00:06:41,870 --> 00:06:46,820
critical metrics, they able to handle
the 2.5 million transaction per,

104
00:06:46,890 --> 00:06:50,600
our, representative of four times
of implement our legacy systems.

105
00:06:51,230 --> 00:06:55,940
While then 99.99% uptime
translate into just a minute of.

106
00:06:56,440 --> 00:07:00,250
A critical requirement with telecom
operation where service interruption

107
00:07:00,250 --> 00:07:03,100
to directly impact the revenue
and the customer satisfaction.

108
00:07:03,600 --> 00:07:08,480
So using this, transformation, so
it has to improve the performances.

109
00:07:08,980 --> 00:07:12,320
almost 2.5 million, transaction per hour.

110
00:07:12,950 --> 00:07:17,670
At the same time, using this,
transformations, our downtime

111
00:07:17,670 --> 00:07:18,960
means very minimal per year.

112
00:07:19,650 --> 00:07:24,060
So almost 1e-05% of downtime per year.

113
00:07:24,135 --> 00:07:28,575
so almost your system
is available, 99.999%.

114
00:07:29,075 --> 00:07:30,165
yeah, that's the, here.

115
00:07:30,665 --> 00:07:32,555
So security implementation.

116
00:07:32,705 --> 00:07:36,095
whenever, we have a services,
when we are developing that, go

117
00:07:36,095 --> 00:07:39,170
language with microservices and
enterprise B BSS applications.

118
00:07:39,670 --> 00:07:45,680
So each services have a multiple,
a Ps and those a Ps communicating

119
00:07:45,905 --> 00:07:51,650
internal a, internal a Ps or external
a Ps or third party, a Ps. Like that.

120
00:07:52,220 --> 00:07:56,770
So in these cases, we have to, provide
the security for the a PA calls.

121
00:07:57,580 --> 00:08:01,635
So we have to use the authentication
and author mechanism, implement the

122
00:08:02,115 --> 00:08:08,965
s to, and, implementing the J token
with, GO crypto package or identity

123
00:08:08,965 --> 00:08:10,520
management across the microservice.

124
00:08:11,020 --> 00:08:12,010
And data production.

125
00:08:12,370 --> 00:08:14,740
Data production is most crucial thing.

126
00:08:14,740 --> 00:08:20,170
So that's the reason we have to apply
the encryption, A ESO 2 56 algorithms.

127
00:08:20,800 --> 00:08:23,980
the data encryption where we need,
actually, we have a very, since

128
00:08:23,980 --> 00:08:27,700
two customer data at the same
time, financial transaction data.

129
00:08:28,305 --> 00:08:31,815
we need to provide that data
protection and correction at the,

130
00:08:31,905 --> 00:08:36,525
the rest and in transit using
the AS 2 56 with the customer.

131
00:08:36,525 --> 00:08:36,705
Go.

132
00:08:36,705 --> 00:08:40,905
Implementation optimization for
telecom workloads, threat monetary,

133
00:08:41,405 --> 00:08:46,685
a real time security event processing
with the go forward analysis in

134
00:08:46,685 --> 00:08:48,155
general for the pattern detection.

135
00:08:48,860 --> 00:08:55,010
Complaints adherent ITU, eight by 8
0 5 standard throughout, automated

136
00:08:55,010 --> 00:08:57,770
security control on the audit capability.

137
00:08:58,270 --> 00:09:00,820
So security is a paramount
in a telecom bss.

138
00:09:01,320 --> 00:09:05,010
Which handled us to customer
data and financial transactions.

139
00:09:05,640 --> 00:09:09,660
Our goal base security implementation,
leverage the languages performance

140
00:09:09,660 --> 00:09:15,480
to process the security even at the
unprecedented scale while maintaining

141
00:09:15,480 --> 00:09:16,890
the comprehensive protection.

142
00:09:17,670 --> 00:09:22,110
Go Standard Library provides a robust,
cryptographic tool that we have

143
00:09:22,170 --> 00:09:27,020
extended, with the telecom specific
security modules aligned with the in

144
00:09:27,020 --> 00:09:32,430
state standard like itt, GT TX, 8 0
5, ensuring the both regulatory and

145
00:09:32,430 --> 00:09:34,915
competence protection evolving threats.

146
00:09:35,415 --> 00:09:40,155
So in, in this, security implementation,
so we have to provide the APAs

147
00:09:40,245 --> 00:09:43,515
security at the same time, we have
to provide that at the protections.

148
00:09:44,015 --> 00:09:44,705
DevOps integration.

149
00:09:44,765 --> 00:09:49,280
DevOps integration is the most,
crucial part, while translating from

150
00:09:49,280 --> 00:09:51,090
legacy application to the, digital.

151
00:09:51,220 --> 00:09:52,485
DevOps, integration.

152
00:09:53,025 --> 00:09:55,595
It's, providing a very fast development.

153
00:09:56,435 --> 00:10:00,315
So continuous integration,
automated build, quality

154
00:10:00,315 --> 00:10:01,995
assurance, deployment, and monitor.

155
00:10:02,205 --> 00:10:06,015
So continuous integration is the,
about automated testing with the ghost

156
00:10:06,015 --> 00:10:07,665
building there, testing framework.

157
00:10:08,620 --> 00:10:14,380
Automated, build across, compilation
for multiple deployment, targets

158
00:10:14,410 --> 00:10:17,650
and the quality assurance of static
analysis and security scanning,

159
00:10:17,710 --> 00:10:22,600
deployment blue gate deployment with
the CAN testing, monitoring realtime

160
00:10:22,600 --> 00:10:24,060
metrics and distributor, tracing.

161
00:10:24,110 --> 00:10:25,930
In this, DevOps integration.

162
00:10:26,240 --> 00:10:31,540
that develop, develop the code and
they, we have automated, execution

163
00:10:31,540 --> 00:10:36,130
of journey integration test after
that, Build up, code actually.

164
00:10:36,130 --> 00:10:40,500
And that, that, once that build is
happened, then we have to deploy

165
00:10:41,100 --> 00:10:44,820
our services, into the, cloud
networks, actually cloud platforms.

166
00:10:45,600 --> 00:10:50,330
At the same time, we have to, check the
quality assurance like, sonar, sonar

167
00:10:50,360 --> 00:10:55,580
quality checks actually, once we applied
and services running in the production.

168
00:10:56,250 --> 00:11:01,710
we have to monitor the services, whether
the services is, down or up and, the

169
00:11:01,710 --> 00:11:06,360
particular services, how much, CPU time,
and how much memory it is, occupied.

170
00:11:06,720 --> 00:11:10,560
These things also, we can monitoring
actually, so using that DevOps

171
00:11:10,560 --> 00:11:12,640
integration, each and every services.

172
00:11:13,605 --> 00:11:18,615
We can monitor it and how much, CPU and
memory it is occupied actually, that

173
00:11:18,615 --> 00:11:23,725
we can monitoring it and the entire,
deployment and build and deployment

174
00:11:23,725 --> 00:11:25,795
process, we can automate it actually.

175
00:11:26,420 --> 00:11:31,430
So DevOps practices are essential
for realizing the full potential

176
00:11:31,430 --> 00:11:33,440
of go in the telecom environments.

177
00:11:34,280 --> 00:11:38,750
Our integrated pipeline enable us
to deploy the changes to production

178
00:11:38,750 --> 00:11:42,670
multiple times per day with the
confidence dynamically reduce the

179
00:11:42,670 --> 00:11:45,160
time to market for a new future.

180
00:11:45,660 --> 00:11:50,070
So when we are developing any new
feature, it's very less time we can

181
00:11:50,070 --> 00:11:55,830
deliver those things actually, and goes
to compilation speed and, comprehensive

182
00:11:55,890 --> 00:11:59,990
testing capability make it, particularly
well suited for CICD workflows.

183
00:12:00,800 --> 00:12:05,295
The ability to quickly build test
the plan changes has, transformed

184
00:12:05,435 --> 00:12:09,620
how telecom BSS evolves enabling a
continuous improvement rather than

185
00:12:09,620 --> 00:12:12,240
the, Infrequent high risk upgrades.

186
00:12:12,740 --> 00:12:17,030
overall, DevOps integration is the most
crucial part in the translating from

187
00:12:17,030 --> 00:12:18,770
the legacy application to the, digital.

188
00:12:19,270 --> 00:12:22,960
cloud data deployment,
so containerization,

189
00:12:22,960 --> 00:12:25,990
orchestration, multi-cloud
strategy, and the service mass.

190
00:12:26,500 --> 00:12:31,490
So cloud network deployment model enables,
telecom b to achieve the elastic scaling

191
00:12:31,490 --> 00:12:33,410
and the graphical distributions goes.

192
00:12:33,410 --> 00:12:38,210
Minimal random dependency and the
small boundary size make it ideal

193
00:12:38,210 --> 00:12:42,430
for the environments with typically
microservice required for, request.

194
00:12:42,930 --> 00:12:45,740
1520 MB for container space.

195
00:12:46,240 --> 00:12:50,510
So whenever we go with, when we are
using the GO programming language,

196
00:12:51,080 --> 00:12:52,490
the, what are the dependencies?

197
00:12:52,490 --> 00:12:56,990
It is very, 15 to 20 MB only
for container space occupation.

198
00:12:57,680 --> 00:13:00,350
And this container
radiation is, one of the.

199
00:13:01,315 --> 00:13:02,095
Crucial part.

200
00:13:02,515 --> 00:13:05,245
And, it is called as a
docker containerization.

201
00:13:05,305 --> 00:13:10,795
And, that container, we have to convert
as a docker, images, that images we

202
00:13:10,795 --> 00:13:13,865
can, apply into the, higher involvement.

203
00:13:14,245 --> 00:13:16,760
because of that, we have to award the.

204
00:13:17,480 --> 00:13:22,840
enrollment basis, discrepancies, any
issues, enrollment, lower enrollment,

205
00:13:22,840 --> 00:13:28,190
having, lot of issues one enrollment or
another when we are moving to our code.

206
00:13:28,910 --> 00:13:30,990
So it has a lot of, discrepancies.

207
00:13:31,380 --> 00:13:34,585
So to avoid those things, we can
use the docker container variations.

208
00:13:35,515 --> 00:13:41,515
So yeah, our cloud native approaches
has enabling to us to the 300%

209
00:13:41,515 --> 00:13:45,295
improvement in scalability with the
system automatically expanding and

210
00:13:45,565 --> 00:13:48,135
contracting based on demand patterns.

211
00:13:49,095 --> 00:13:53,585
This elasticity is, particularly
valuable for the telecom operators

212
00:13:53,675 --> 00:13:57,225
are dealing with, unpredictable
traffic spike during the network,

213
00:13:57,275 --> 00:13:59,045
events or marketing promotions.

214
00:13:59,545 --> 00:13:59,845
Okay.

215
00:14:00,415 --> 00:14:04,765
So yeah, this cloud NATO
deployment, mostly, we are using

216
00:14:04,765 --> 00:14:06,220
the docker containerization,

217
00:14:06,720 --> 00:14:08,280
open source tools and frameworks.

218
00:14:08,760 --> 00:14:12,930
using this open source tools
and frameworks, so it's

219
00:14:12,930 --> 00:14:14,600
obviously, reduce our cost.

220
00:14:14,840 --> 00:14:18,650
It's a open source, so using
that open source tool to start

221
00:14:18,650 --> 00:14:20,120
developing your activity.

222
00:14:20,735 --> 00:14:24,185
So you have to spend the
only development activity.

223
00:14:24,185 --> 00:14:28,835
There is no license cost for
the, or, tools or, so it is

224
00:14:28,835 --> 00:14:30,185
available on open source.

225
00:14:30,275 --> 00:14:30,635
Okay?

226
00:14:30,635 --> 00:14:37,175
we have to, use those things and we can
develop the, our entire transformation

227
00:14:37,175 --> 00:14:38,885
from the legacy application to digital.

228
00:14:39,455 --> 00:14:42,270
And, we can, implement
our, BSS application.

229
00:14:42,770 --> 00:14:44,210
Actually, okay.

230
00:14:44,270 --> 00:14:48,000
Data access and storages, go,
for our capabilities, cockroach

231
00:14:48,000 --> 00:14:49,410
for their distributor desk.

232
00:14:49,510 --> 00:14:54,095
cockroach distributed means cockroach, DB
is nothing but the NoSQL kind of things.

233
00:14:54,545 --> 00:14:56,585
Ready for caching with, go ready client.

234
00:14:56,635 --> 00:15:01,135
these tools provide the foundation
for that data per, persistency with

235
00:15:01,135 --> 00:15:04,525
the performance characteristics
required by the telecom workloads.

236
00:15:05,025 --> 00:15:08,515
So a PA development, again, an
E ECHO framework for the, high

237
00:15:08,515 --> 00:15:13,205
performance, rest, P-A-G-R-P-C for
the internal service communication

238
00:15:13,295 --> 00:15:15,995
and open a PA for the documentation.

239
00:15:16,445 --> 00:15:20,830
Our a PA handling, millions of
requests with, sub millisecond latency.

240
00:15:21,330 --> 00:15:26,480
Observability, premises for the metric,
collections for the distributor.

241
00:15:26,660 --> 00:15:29,060
Tracing and grafana for visualization.

242
00:15:29,570 --> 00:15:34,660
Complete observability has reduced
the MTTR from, hours, two minutes

243
00:15:35,530 --> 00:15:36,740
for the, production issues.

244
00:15:37,240 --> 00:15:41,760
Project structure, go module for the
dependency management and, project

245
00:15:41,760 --> 00:15:45,680
organization Following, domain,
domain driven, design principles,

246
00:15:46,370 --> 00:15:50,570
consistent structure, has improved
the developer onboarding time base

247
00:15:50,570 --> 00:15:55,600
system, the go ecosystem year rich
collection of open source tools,

248
00:15:55,700 --> 00:15:57,905
that, accelerate the BSS development.

249
00:15:58,405 --> 00:16:02,635
we have leveraged these tools to
create the modular maintainable and

250
00:16:02,695 --> 00:16:08,305
co maintainable code basis that reduce
the service time by 50% improving.

251
00:16:08,805 --> 00:16:11,615
So to, using this open
source tools and framework.

252
00:16:12,215 --> 00:16:16,265
So they're telling that we are
leveraging these tools to create the

253
00:16:16,265 --> 00:16:21,315
modular maintainability, code basis
that reduce the service ing 10 by 50%.

254
00:16:21,585 --> 00:16:22,005
Absolutely.

255
00:16:22,515 --> 00:16:25,930
So using these tools,
we can, protein 10, 50%.

256
00:16:26,430 --> 00:16:27,810
A real time data process.

257
00:16:27,870 --> 00:16:32,700
So yeah, real time data process,
nothing but Kafka streaming with, go

258
00:16:32,700 --> 00:16:35,220
consumer processing and enrichment.

259
00:16:35,260 --> 00:16:41,945
go powered streaming Processor analysis
is ML model with a go, inference engines.

260
00:16:42,845 --> 00:16:48,105
Action, automat response on three
A ps. real time data processing

261
00:16:48,105 --> 00:16:51,945
forms the backbone of the
modern telecom bss, enabling the

262
00:16:51,945 --> 00:16:53,805
intermediate insights and actions.

263
00:16:54,345 --> 00:16:59,160
Our go base, stream processing pipeline,
handle the millions of events, but second.

264
00:16:59,660 --> 00:17:05,120
From network performance metrics to
customer interaction, all process with,

265
00:17:05,180 --> 00:17:10,490
minimal latency, these capabilities
as, transformed how telecom operators

266
00:17:10,490 --> 00:17:15,225
will respond to the customer needs
with the EA driven system, reduce the.

267
00:17:15,995 --> 00:17:21,575
Shown by the 45 person through
proactive inter interventions, the

268
00:17:21,575 --> 00:17:27,645
net promoter score improvement of 25
points, demonstrate that the impact

269
00:17:27,645 --> 00:17:32,975
of the, technical capabilities as
customer experience of more respons

270
00:17:33,095 --> 00:17:36,935
and this realtime data processing,
we obviously use that Kafka.

271
00:17:37,385 --> 00:17:39,035
It's millions of transactions.

272
00:17:39,305 --> 00:17:43,985
So we have local transaction
mechanisms there.

273
00:17:44,015 --> 00:17:45,425
We have to apply this, kafa.

274
00:17:45,725 --> 00:17:48,815
It's nothing but a event
driven architectures.

275
00:17:48,905 --> 00:17:50,765
In the event driven architectures.

276
00:17:50,855 --> 00:17:53,285
Obviously each event triggering.

277
00:17:53,435 --> 00:17:57,395
And based on that, what
transactions we have to roll back.

278
00:17:57,895 --> 00:18:02,455
What are the transactions, rollbacks
or tasks or rollbacks that we can

279
00:18:02,455 --> 00:18:04,515
using, the Kafka streaming section.

280
00:18:04,545 --> 00:18:07,000
This is a real time
processing data processing.

281
00:18:07,500 --> 00:18:11,310
So implementing your go power
BSS transformation, start with

282
00:18:11,460 --> 00:18:12,960
the clear business objectives.

283
00:18:13,360 --> 00:18:17,990
when we are, implementing your go
power BSS transformation, so we

284
00:18:17,990 --> 00:18:22,995
have a clear business objective
and defining services properly.

285
00:18:23,495 --> 00:18:29,200
And each services, defining multiple,
aaps and, those a Ps, with, using

286
00:18:29,380 --> 00:18:34,420
the, securities and, that also more
protect and modular transformation.

287
00:18:34,480 --> 00:18:37,990
Begin with the bound context
that offer the high business

288
00:18:37,990 --> 00:18:39,790
value, but moderate risk.

289
00:18:39,840 --> 00:18:42,820
gradually expand your go, footprints.

290
00:18:43,320 --> 00:18:48,315
Build, build a Go expertise, investing
in training and, pair programming

291
00:18:48,315 --> 00:18:52,365
to build a solid foundation of Go
kill with your engineering team.

292
00:18:52,455 --> 00:18:57,245
Yeah, this is obviously so better
to do with, pair programming, learn

293
00:18:57,245 --> 00:19:01,515
the go programming language, and
understand the key features, of the

294
00:19:01,515 --> 00:19:06,895
go language and, Whenever we develop
any services, we have to apply

295
00:19:06,925 --> 00:19:10,755
these, go features and especially,
there is a parallel processing.

296
00:19:11,695 --> 00:19:17,885
so this go parallel processing is very,
effectively, and, provide the more

297
00:19:18,065 --> 00:19:23,365
performances, measure and optimizing,
establish the performance, baselines

298
00:19:23,365 --> 00:19:28,705
and, continuously optimize, based on your
real world telemetry and user feedback.

299
00:19:29,335 --> 00:19:35,335
As we conclude, remember that
successful BSS transformations technical

300
00:19:35,425 --> 00:19:40,935
excellence with a strategic, business
alignment, your journey to go forward.

301
00:19:40,995 --> 00:19:45,295
Bss, should follow the clear roadmap
that delivers the incremental

302
00:19:45,295 --> 00:19:49,100
value while building towards
comprehensive organization.

303
00:19:49,435 --> 00:19:54,055
By leveraging a growth performance
advantages, embracing cloud NATO

304
00:19:54,085 --> 00:19:59,785
architecture, and implementing the DevOps
practices, your team can achieve the,

305
00:19:59,835 --> 00:20:03,675
remarkable performance improvements and
the cost savings we have discussed today.

306
00:20:04,175 --> 00:20:08,525
The features of telecom BSS
belongs to those who can deliver

307
00:20:08,525 --> 00:20:13,675
the robust, scalable, and secure
systems and go provider, ideally

308
00:20:13,675 --> 00:20:17,785
foundation for this next generation
of telecommunication infrastructure.

309
00:20:18,685 --> 00:20:24,685
So as we discussed, on previous
slides, so go provide the, ideal

310
00:20:24,685 --> 00:20:28,315
foundation of this next generation
of telecommunication project.

311
00:20:28,985 --> 00:20:33,795
so far, whatever the legacy is on,
also, they are facing plenty of issues.

312
00:20:33,795 --> 00:20:36,025
So any, environmental
wise or whatever it is.

313
00:20:36,985 --> 00:20:38,785
and performance wise or whatever it is.

314
00:20:38,785 --> 00:20:43,495
when we are using this, go programming
language and translating into the

315
00:20:44,125 --> 00:20:49,285
microservice architecture, so definitely
we have to see that dramatic changes,

316
00:20:49,645 --> 00:20:52,015
and a lot of, performance improvements.

317
00:20:52,515 --> 00:20:52,845
Thank you.

318
00:20:52,845 --> 00:20:53,775
Thank you so much.

