1
00:00:00,500 --> 00:00:01,160
Hello everyone.

2
00:00:01,579 --> 00:00:02,660
Welcome to Con 42.

3
00:00:03,260 --> 00:00:06,410
My name is, and I'm a DevOps
consultant with over 15 years of

4
00:00:06,410 --> 00:00:07,760
experience in the IT industry.

5
00:00:08,420 --> 00:00:10,850
Twilio of those are deeply
focused in the DevOps.

6
00:00:11,570 --> 00:00:15,830
My areas of expectations include CICD,
automation, infrastructure, asset

7
00:00:15,830 --> 00:00:20,090
code, and cloud native solutions, and
more recently, governance and security

8
00:00:20,090 --> 00:00:23,990
within DevOps workflows, what I'm
especially passionate about is helping

9
00:00:23,990 --> 00:00:28,280
the teams build pipelines that are
not just fast and automated, but also

10
00:00:28,280 --> 00:00:29,930
secure and compliance from the start.

11
00:00:30,890 --> 00:00:35,300
In today's fast-paced DevOps environment,
speed and automations are essential.

12
00:00:35,300 --> 00:00:38,720
They often come at the cost
of security and compliances.

13
00:00:39,350 --> 00:00:43,040
Traditional manual six can keep up with
the velocity of modern software delivery.

14
00:00:43,520 --> 00:00:47,840
As a result is configurations,
compliance gaps and the security

15
00:00:47,840 --> 00:00:51,500
risk often go unnoticed until
it's too late The solution.

16
00:00:52,010 --> 00:00:56,240
Policy as code allows organization to
define and enforce governance rule as a

17
00:00:56,240 --> 00:01:01,310
code, ensuring security and compliances
are automated, scalable, and consistent

18
00:01:01,310 --> 00:01:02,960
throughout the development lifecycle.

19
00:01:03,680 --> 00:01:08,660
When integrated with the CICE tools
like Jenkins, PAC empowers teams in

20
00:01:08,660 --> 00:01:13,130
the shift left security, catching
the issues early in the pipeline

21
00:01:13,250 --> 00:01:14,539
before they reach the pipeline.

22
00:01:15,199 --> 00:01:16,340
So let's dive in.

23
00:01:16,840 --> 00:01:18,340
What are the challenges in the pack?

24
00:01:19,255 --> 00:01:22,225
What are the manual
securities that it's failing?

25
00:01:22,725 --> 00:01:27,225
The most alarming statistics in
modern DevOps engineering is 60%

26
00:01:27,225 --> 00:01:30,735
of security breaches are cast by
the mis config infrastructure.

27
00:01:31,365 --> 00:01:35,415
That means more than half of the
security incident organizations face

28
00:01:35,415 --> 00:01:41,085
three are not due to advanced trust or
zero to exploits, but because someone

29
00:01:41,085 --> 00:01:45,165
forgot to close a port, left default
settings on the production container.

30
00:01:45,225 --> 00:01:47,295
Or misconfigured cloud permissions.

31
00:01:47,895 --> 00:01:52,995
This especially critical in DevOps, where
we move fast, automate everything, and

32
00:01:52,995 --> 00:01:55,125
rely heavily on infrastructure as a code.

33
00:01:55,725 --> 00:02:00,525
Small misconfigurations can be replicated
across dozens of environments instantly.

34
00:02:01,095 --> 00:02:04,395
That's why integrating security
early in the DevOps pipeline

35
00:02:04,725 --> 00:02:07,065
through DevSecOps is essential.

36
00:02:07,804 --> 00:02:11,524
Things like policy as code, automatic
configuration, validation, and

37
00:02:11,524 --> 00:02:17,344
continuous monitoring can dramatically
reduce this 60 page, 60% each or less.

38
00:02:18,005 --> 00:02:22,625
In short, our goal is not just the
faster deployment, but the safer ones.

39
00:02:23,124 --> 00:02:24,924
So what are the challenges?

40
00:02:24,954 --> 00:02:28,194
And the other one is going
to be the human error.

41
00:02:28,609 --> 00:02:33,199
Staggering 87 percentage of security
issues across modern IT environments

42
00:02:33,589 --> 00:02:38,929
are caused by human errors and DevOps,
where teams are constantly deploying,

43
00:02:38,989 --> 00:02:40,729
configuring, and scaling system.

44
00:02:41,179 --> 00:02:44,779
Even a small O site, like
a misconfigured S3 bucket,

45
00:02:45,169 --> 00:02:46,849
forgotten an environment variable.

46
00:02:47,185 --> 00:02:51,084
Or incorrect firewall rule
can lead to a major breach.

47
00:02:51,505 --> 00:02:53,994
The takeaway manual steps are risky.

48
00:02:54,715 --> 00:02:58,644
Wherever we can eliminate the human
error through automation, validation,

49
00:02:58,674 --> 00:03:02,155
and the policy enforcement will
significantly reduce the risk.

50
00:03:02,584 --> 00:03:07,745
That's why practices like infrastructure
code CI ICD pipeline, security gates

51
00:03:07,864 --> 00:03:11,855
and an automated misconfiguration
scanning are no longer an optional.

52
00:03:12,305 --> 00:03:13,805
They are very essential.

53
00:03:14,645 --> 00:03:18,065
The financial impact of security
incidents is very massive.

54
00:03:18,755 --> 00:03:22,565
On average organization
spends around 3.9 to million

55
00:03:22,595 --> 00:03:24,095
recovering from a single breach.

56
00:03:24,515 --> 00:03:28,985
And this isn't just about fixing
the technical issue, it includes.

57
00:03:29,290 --> 00:03:31,659
Downtime that stalls
operation on the delivery.

58
00:03:32,200 --> 00:03:37,749
The data loss are corruption in impacting
the business integrity, the legal fees,

59
00:03:37,779 --> 00:03:40,299
the fines, and the compliance violations.

60
00:03:40,749 --> 00:03:45,459
Reputational damage that is hard to
rebuild, plus the cost of rebuilding

61
00:03:45,459 --> 00:03:47,349
the trust within the customers.

62
00:03:47,950 --> 00:03:51,249
For DevOps team, this
underlines the business critical

63
00:03:51,249 --> 00:03:53,170
role of secure practices.

64
00:03:53,720 --> 00:03:57,920
Investing in a secure pipeline's,
automated compliances and continuous

65
00:03:57,920 --> 00:04:02,299
monitoring does not just reduce the
risk, it protects the bottom line.

66
00:04:03,109 --> 00:04:08,809
So what's policy of code Policy as
a code is a practice of writing and

67
00:04:08,809 --> 00:04:13,880
enforcing the security compliances
and the operational policies using the

68
00:04:13,880 --> 00:04:18,920
code, which can be version tested and
automatically executed just like an

69
00:04:18,920 --> 00:04:20,870
application or an infrastructure code.

70
00:04:21,755 --> 00:04:24,784
Policy as a code is about
shifting the compliance as left.

71
00:04:25,175 --> 00:04:29,405
So instead of waiting for the security
teams to cast the issues after deployment,

72
00:04:29,825 --> 00:04:35,044
we define the rules as a code and bake
them directly into our DevOps workflows.

73
00:04:35,495 --> 00:04:37,294
It's how we scale security.

74
00:04:37,865 --> 00:04:42,155
Reduce the risk and ensure the governance
without slowing down the deliveries.

75
00:04:42,995 --> 00:04:46,925
So policy as code policies are issued
written in mission readable formats

76
00:04:46,925 --> 00:04:52,475
such as Jason or YAML or Rego or
open policy agents, each format

77
00:04:52,505 --> 00:04:54,185
has its strengths and drop access.

78
00:04:54,305 --> 00:05:00,425
For example, Jason and Yam L are popular
for configuration files while Rego is a

79
00:05:00,425 --> 00:05:05,375
policy language tailored to validate the
complex policies and what's the benefit.

80
00:05:05,945 --> 00:05:10,984
Consistency, automation and
traceability automates governance,

81
00:05:10,984 --> 00:05:14,794
ensuring the uniform policies are
applied across the entire pipeline.

82
00:05:15,395 --> 00:05:19,745
It reduces the human intervention and
the chances of error leading to faster,

83
00:05:20,104 --> 00:05:25,685
more secure deployments, and it allows
to frame the track, the policy changes,

84
00:05:25,835 --> 00:05:29,914
ensuring the accountability and the
visibility into the government actions.

85
00:05:30,544 --> 00:05:35,044
So let's discuss about the policy as a
code throughout the DevOps lifecycle.

86
00:05:35,545 --> 00:05:39,835
As a developmental stage, our goal
is to catch security issues as

87
00:05:39,835 --> 00:05:44,335
early as possible before code even
reaches the staging or production.

88
00:05:44,845 --> 00:05:46,765
This is where policy as code comes in.

89
00:05:47,245 --> 00:05:50,305
By defining our security and
the compliance rule in the

90
00:05:50,305 --> 00:05:54,745
code, we can integrate them
directly in our DevOps workflows.

91
00:05:55,290 --> 00:05:59,760
So the moment the developer writes or
commence the code, it's automatically

92
00:05:59,820 --> 00:06:04,440
checked for violations like the
open ports, unencrypted data or

93
00:06:04,440 --> 00:06:06,330
the noncompliant address confis.

94
00:06:06,780 --> 00:06:10,110
If something violate its
policy, the pipeline fail fast.

95
00:06:10,380 --> 00:06:12,120
If it passes, we move forward.

96
00:06:12,300 --> 00:06:15,480
This approach ensure we are building
a secure software from the day

97
00:06:15,480 --> 00:06:17,790
on and not retrofitting it later.

98
00:06:18,775 --> 00:06:20,455
Once the build is done, sorry.

99
00:06:20,485 --> 00:06:24,835
Once the code is written uncommitted,
we move to the build station where

100
00:06:24,835 --> 00:06:26,395
things can start to get packaged.

101
00:06:26,995 --> 00:06:30,835
This is a critical point to validate
where we are actually building first.

102
00:06:30,835 --> 00:06:34,735
We are on the software compostion
analysis tools to identify any vulnerable

103
00:06:34,735 --> 00:06:36,715
libraries or outdated packages.

104
00:06:37,185 --> 00:06:39,225
These are common sources to exploits.

105
00:06:39,675 --> 00:06:42,825
Next, we scan the container
image for misconfigurations, like

106
00:06:42,855 --> 00:06:47,355
running as a rule, unnecessary
port open or insecure base images.

107
00:06:47,865 --> 00:06:52,545
We then use the policy as code to
enforce our bill standards if an image

108
00:06:52,545 --> 00:06:54,645
does not meet of a security criteria.

109
00:06:55,015 --> 00:06:55,825
We break the build.

110
00:06:56,425 --> 00:07:00,175
This ensures that only secure
complaint artifacts move forward.

111
00:07:00,675 --> 00:07:04,935
In the test stage, our focus is
on validating the security posture

112
00:07:05,055 --> 00:07:08,625
of an application itself, not
just the code or a container.

113
00:07:09,225 --> 00:07:14,175
We must run a mix of tools like SAST for
scanning the source code for a security

114
00:07:14,175 --> 00:07:19,785
box, DASD for checking the vulnerabilities
in the running apps, IASD for running the

115
00:07:19,785 --> 00:07:22,725
insights during the test executions, but.

116
00:07:23,040 --> 00:07:23,730
Testing isn't enough.

117
00:07:24,315 --> 00:07:25,665
We need to enforce policies.

118
00:07:26,115 --> 00:07:28,545
That's where policy as
code plays a critical role.

119
00:07:29,085 --> 00:07:32,865
It allows us to define the thresholds
like no critical vulnerabilities

120
00:07:32,865 --> 00:07:36,525
or 90% security test coverage,
and an automatically blocked

121
00:07:36,525 --> 00:07:37,905
bills that don't meet them.

122
00:07:38,685 --> 00:07:43,575
This ensures that we are not just
testing, but enforcing a minimum bar for

123
00:07:43,575 --> 00:07:46,065
a security quality before ever deployed.

124
00:07:46,980 --> 00:07:51,660
In the deploy stage, it's essential to
ensure that the infrastructure itself

125
00:07:51,690 --> 00:07:54,600
is secure and compliant before anything.

126
00:07:55,099 --> 00:08:00,499
We use the infrastructure code tools like
Terraform or a cloud formation, or define

127
00:08:00,529 --> 00:08:02,809
our environments, or before we provision

128
00:08:03,309 --> 00:08:05,469
policy as a code is integral here.

129
00:08:06,054 --> 00:08:11,064
It allows us to define security rules
in the code and automatically enforce

130
00:08:11,064 --> 00:08:13,525
them, making them an only complaint.

131
00:08:13,525 --> 00:08:14,965
Infrastructure gets deployed.

132
00:08:15,924 --> 00:08:20,124
If something offs like an insecurity S3
bucket of an improper IA permissions,

133
00:08:20,154 --> 00:08:24,984
the deployment fails by shifting
left security to the deploy phase and

134
00:08:24,984 --> 00:08:30,295
automate compliances be drastically
reduce the risk of misconfiguration and

135
00:08:30,295 --> 00:08:33,414
unauthorized access in the monitor stage.

136
00:08:33,914 --> 00:08:38,845
Detect and alert our runtime policy
violations does not end with just

137
00:08:38,845 --> 00:08:40,705
deploying the code or infrastructure.

138
00:08:41,695 --> 00:08:45,265
We need to keep the constant watch
on runtime operations to detect and

139
00:08:45,265 --> 00:08:49,095
respond to the security violations
in the real time by monitoring

140
00:08:49,095 --> 00:08:50,655
both application infrastructure.

141
00:08:50,984 --> 00:08:55,425
We can catch issues that occur like
the deployment, like an unexpected

142
00:08:55,425 --> 00:09:00,224
configuration change, or an unauthorized
access to the sensitive data policy

143
00:09:00,224 --> 00:09:01,910
as a code continues its role here.

144
00:09:02,655 --> 00:09:06,314
Providing runtime checks that
enforce security rules even

145
00:09:06,314 --> 00:09:07,874
after the resources are live.

146
00:09:08,624 --> 00:09:11,894
If the policy violation occurs,
say if a server start using a

147
00:09:11,894 --> 00:09:15,464
weak encryption or an unauthorized
user tries to access the resource,

148
00:09:15,795 --> 00:09:17,744
the system alerts us immediately.

149
00:09:18,525 --> 00:09:22,844
These realtime alerts combined with the
tools like SIEM systems for a centralized

150
00:09:22,844 --> 00:09:28,124
logging enable a rapid response to
any violations allowing us to respond

151
00:09:28,185 --> 00:09:30,134
to incidents before they escalate.

152
00:09:30,634 --> 00:09:33,574
So here comes the real question.

153
00:09:33,874 --> 00:09:36,154
Why Jenkins for policy as a code?

154
00:09:36,935 --> 00:09:40,685
It's because of the factors like
ecosystem integration, pipeline

155
00:09:40,685 --> 00:09:44,914
flexibility, community support,
and established infrastructure.

156
00:09:45,414 --> 00:09:49,134
Jenkins is well known for its ability
to integrate with various different

157
00:09:49,134 --> 00:09:54,144
tools, making it a very easy to integrate
policy enforcement without needing an

158
00:09:54,204 --> 00:09:56,124
overall of existing infrastructure.

159
00:09:56,624 --> 00:09:58,124
Jenkins provide flexibility.

160
00:09:58,454 --> 00:10:02,744
By allowing policy checks to be inserted
at any stage in the DevOps pipeline,

161
00:10:03,254 --> 00:10:07,214
whether it's during a code checking
or build, or testing or deployment.

162
00:10:07,874 --> 00:10:12,404
Jenkins offer with larger user
base and extensive documentation,

163
00:10:12,794 --> 00:10:16,904
which ensure that there is an ample
community support and the resources

164
00:10:16,904 --> 00:10:18,649
available when implementing the bank.

165
00:10:19,574 --> 00:10:23,534
Jenkins has already widely deployed
many organizations, so implementing

166
00:10:23,594 --> 00:10:28,094
PAC and Jenkins leverages the existing
infrastructure and tools that many

167
00:10:28,094 --> 00:10:29,924
DevOps teams are already using.

168
00:10:30,424 --> 00:10:33,364
And so how it's done,
how to implement the pac.

169
00:10:33,864 --> 00:10:38,124
Storing our policies in a source control
like GI gives us a powerful way to

170
00:10:38,124 --> 00:10:42,984
track the changes, manage the versions,
and keep a clear audit trail for the

171
00:10:42,984 --> 00:10:44,604
compliance on the security purposes.

172
00:10:45,204 --> 00:10:48,054
By version controlling our
policies, just like application

173
00:10:48,054 --> 00:10:50,484
code, we can see who changed.

174
00:10:50,724 --> 00:10:54,894
What and when, which are essential
for the compliance audits.

175
00:10:55,464 --> 00:10:58,164
We can even roll back to the
previous versions of the policies

176
00:10:58,164 --> 00:11:02,214
if needed, and if ensures the
transparency and the accountability

177
00:11:02,214 --> 00:11:04,614
in how policies evolve over time.

178
00:11:05,484 --> 00:11:09,654
Collaborations become much easier because
a team can propose review and approve

179
00:11:09,654 --> 00:11:13,554
the changes to the policies directly
in the version control repository.

180
00:11:13,644 --> 00:11:17,454
And of course, by trying the policies
back act as a policy, as code

181
00:11:17,454 --> 00:11:19,854
frameworks like open policy agents.

182
00:11:20,224 --> 00:11:24,334
We can automatically enforce these
policies in our CICD pipelines.

183
00:11:24,834 --> 00:11:28,854
To integrate the policy as a code in
our CICD pipelines, we installed the

184
00:11:28,854 --> 00:11:34,104
policy engines like A-O-P-A-O Ps,
or open policy agents or con contest

185
00:11:34,104 --> 00:11:35,484
directly into the Jenkins plugin.

186
00:11:36,204 --> 00:11:39,744
This allows us to enforce the
policies automatically whenever code

187
00:11:39,744 --> 00:11:41,574
or infrastructure changes are made.

188
00:11:42,564 --> 00:11:46,824
The open policy agent provides the
flexible engine for writing the policies

189
00:11:46,824 --> 00:11:51,924
in the Rigo, which can cover a wide range
of compliances and the security checks.

190
00:11:52,295 --> 00:11:56,074
The contest on the other hand,
is perfect for enforcing the

191
00:11:56,074 --> 00:11:59,704
policies on a configuration
files such as the A ML or json.

192
00:12:00,515 --> 00:12:03,275
Once the policy engines are
installed, we configure the

193
00:12:03,275 --> 00:12:07,114
Jenkins to run these policies at
a specific points in the pipeline.

194
00:12:07,474 --> 00:12:11,255
Usually during the build or
deployment, if any policy violation

195
00:12:11,255 --> 00:12:14,854
are detected, the bill fails, and
then team gets an alert preventing

196
00:12:14,854 --> 00:12:16,834
noncompliant code from going live.

197
00:12:17,614 --> 00:12:21,785
This seamless integration of a
policy as a code ensure we have a

198
00:12:21,785 --> 00:12:26,014
transparent, automated and a reliable
enforcement process within the dev

199
00:12:26,014 --> 00:12:30,414
workflows to integrate the policy
as a code in our CI ICD pipeline.

200
00:12:30,744 --> 00:12:34,164
We start by defining the pipeline
stages in our Jenkins file.

201
00:12:34,914 --> 00:12:37,404
These stages control the
flow of the pipeline.

202
00:12:37,694 --> 00:12:42,644
Include building, test, and the deploy
At the early critical checkpoint in the

203
00:12:42,644 --> 00:12:47,414
pipeline, we insert the policy validation
slips to make sure the code infrastructure

204
00:12:47,414 --> 00:12:51,374
and the deployment configuration meet
our security and compliance standards.

205
00:12:52,094 --> 00:12:56,869
Before the build, we an open policy agent
policies to validate the code itself.

206
00:12:57,494 --> 00:13:01,364
After the testing, we run the
contest to check for the compliance

207
00:13:01,515 --> 00:13:05,385
issues in the configuration files
and before the deployment, we

208
00:13:05,385 --> 00:13:08,295
validated the infrastructure and
the deployment configurations

209
00:13:08,295 --> 00:13:11,535
to ensure no misconfigurations
are going into productions.

210
00:13:12,194 --> 00:13:16,305
If any policy fails, the pipeline
automatically stops preventing

211
00:13:16,305 --> 00:13:18,489
non-compliant code from moving forward.

212
00:13:19,119 --> 00:13:23,324
This issues, we enforce security
and compliances consistently

213
00:13:23,714 --> 00:13:25,364
throughout the entire pipeline.

214
00:13:25,864 --> 00:13:29,884
One of the most important decisions
in integrating the policy as code

215
00:13:29,884 --> 00:13:31,804
is how we handle the violations.

216
00:13:32,704 --> 00:13:37,754
Should the pipeline stop immediately
or should it keep continuing if the

217
00:13:37,754 --> 00:13:41,894
violation is critical, such as a security
vulnerability or a compliance breach.

218
00:13:42,264 --> 00:13:46,104
We should stop the pipeline to prevent
non-compliant code from being deployed.

219
00:13:46,734 --> 00:13:49,554
This is the default behavior for
the critical security policies.

220
00:13:50,094 --> 00:13:54,264
For non-critical issues like a code
style violations or minor configuration

221
00:13:54,294 --> 00:13:58,914
issues, we must report them the violations
stopping instead of stopping the pipeline.

222
00:13:59,414 --> 00:14:03,134
This keeps the process moving while
flagging the issues for the future review.

223
00:14:03,854 --> 00:14:07,424
The beauty of policy as code
is that we can customize

224
00:14:07,424 --> 00:14:09,134
failure actions per policies.

225
00:14:09,494 --> 00:14:14,384
For example, a security policies might hal
the pipeline, but a performance policies

226
00:14:14,384 --> 00:14:16,634
might only log and report the violations.

227
00:14:17,324 --> 00:14:21,224
This flexibility ensures we can
balance the security enforcement

228
00:14:21,254 --> 00:14:25,099
and develop an agility, allowing us
to maintain a high quality without

229
00:14:25,099 --> 00:14:27,019
unnecessary slowing down the deliveries.

230
00:14:27,519 --> 00:14:29,529
So what's the popular.

231
00:14:30,114 --> 00:14:31,794
Policy enforcement tools.

232
00:14:32,294 --> 00:14:36,374
It's examples like a op
contest, HashiCorp Sentinel.

233
00:14:37,124 --> 00:14:38,774
So what's an open policy agent?

234
00:14:39,274 --> 00:14:41,974
One of the most popular
tools for a policy as a code

235
00:14:41,974 --> 00:14:43,624
enforcement is open policy agent.

236
00:14:44,124 --> 00:14:47,424
It's general purpose policy engine
that can validate and enforce

237
00:14:47,424 --> 00:14:52,134
policies across multiple system,
and it uses a declarative languages

238
00:14:52,134 --> 00:14:54,654
called rego for writing the policies.

239
00:14:55,494 --> 00:14:58,734
The key advantages of
OPA is its flexibility.

240
00:14:59,304 --> 00:15:03,894
It allows you to centralize the policy
enforcement across multiple platforms,

241
00:15:04,374 --> 00:15:08,994
reducing the complexity of managing the
policies across the diverse technologies.

242
00:15:09,444 --> 00:15:10,194
Additionally.

243
00:15:10,659 --> 00:15:14,559
The open policy agent integrates
seamlessly into the existing CICD

244
00:15:14,559 --> 00:15:19,509
workflows to enforce policies during the
build, test and the deployment stages.

245
00:15:20,349 --> 00:15:24,189
By using the open policy agents in
the policy as a code approach, you are

246
00:15:24,189 --> 00:15:28,989
ensuring that policies are consistently
enforced, which helps reduce the risk

247
00:15:29,349 --> 00:15:33,489
and ensure compliances across your
organization's entire infrastructure.

248
00:15:33,989 --> 00:15:37,469
Contest is a specialized tool for
the testing configuration file

249
00:15:37,469 --> 00:15:38,849
against the defined policies.

250
00:15:39,299 --> 00:15:42,599
It's particularly useful for validating
the YAML and the JSON files, which

251
00:15:42,599 --> 00:15:46,139
are commonly used into the tools like
Kubernetes, Terraform, and Health.

252
00:15:46,639 --> 00:15:50,689
With contest, you can write the
policies in rego and apply them

253
00:15:50,689 --> 00:15:52,039
to your configuration files.

254
00:15:52,369 --> 00:15:56,299
This ensures that your configurations
are in line with your organizational

255
00:15:56,299 --> 00:15:58,099
standards before they are deployed.

256
00:15:59,089 --> 00:16:01,669
Contrast integrates easily
with the CICD pipelines.

257
00:16:01,869 --> 00:16:06,369
During the build or deploy stages, it
can automatically test your configuration

258
00:16:06,369 --> 00:16:10,149
files, block the non-compliant
configuration, and provide detailed

259
00:16:10,149 --> 00:16:15,189
feedback for the developers to quickly
address the issues using comp as a

260
00:16:15,189 --> 00:16:17,589
part of your policy as a code strategy.

261
00:16:17,589 --> 00:16:21,339
Issues that configuration across
your enter environment or secure.

262
00:16:21,784 --> 00:16:23,524
Compliant and consistent.

263
00:16:24,024 --> 00:16:28,224
The HashiCorp Sentinel is a powerful
policy as a code tool embedded directly

264
00:16:28,224 --> 00:16:30,024
within the several HashiCorp product.

265
00:16:30,774 --> 00:16:35,154
Unlike other standalone policy engines,
Sentinel is natively integrated into

266
00:16:35,154 --> 00:16:40,194
the tools like Terraform Vault and
Console making it ideal choice for

267
00:16:40,194 --> 00:16:41,439
the in infrastructure governance.

268
00:16:42,249 --> 00:16:46,089
The integration of the Sentinel
within the HashiCorp products ensure

269
00:16:46,149 --> 00:16:49,989
that the policies are automatically
applied and enforced as a part

270
00:16:49,989 --> 00:16:51,639
of normal deployment process.

271
00:16:52,119 --> 00:16:54,189
Without the need for the external tools.

272
00:16:54,609 --> 00:16:58,959
It also provides a scalable solution
to the policy enforcement across

273
00:16:58,959 --> 00:17:00,579
the cloud native infrastructure.

274
00:17:01,299 --> 00:17:05,079
Decentralized policy enforcement
ensures that the governance is

275
00:17:05,079 --> 00:17:10,269
consistent and automated across the
environment, saving time and reducing.

276
00:17:10,484 --> 00:17:11,564
The manual oversight.

277
00:17:12,284 --> 00:17:17,204
So here comes the real world
policy examples, like preventing

278
00:17:17,204 --> 00:17:21,974
public S3 buckets, enforce resource
tagging and container security,

279
00:17:22,364 --> 00:17:24,404
and identity and access management.

280
00:17:24,904 --> 00:17:28,294
Policy as a code can be used to
enforce the security policies that

281
00:17:28,294 --> 00:17:32,284
prevent exposing the sensitive
data, such as rejecting AWS

282
00:17:32,284 --> 00:17:34,114
infrastructure, changes that might have.

283
00:17:34,114 --> 00:17:39,654
An SD public pocket described a policy
that requires a special tax to be applied

284
00:17:39,684 --> 00:17:43,749
on all cloud resources, making it easier
to track and the managed cloud costs.

285
00:17:44,684 --> 00:17:48,734
The policy as a code can block the
deployment of a container that's

286
00:17:49,034 --> 00:17:53,354
either have known vulnerabilities
or configured or run as a route,

287
00:17:53,834 --> 00:17:55,394
reduce the attack surfaces.

288
00:17:55,894 --> 00:17:59,465
Fact ensures that the IDD and
access management policies follow

289
00:17:59,465 --> 00:18:05,104
at least the privilege principle,
ensuring the users or a service only

290
00:18:05,104 --> 00:18:06,874
have the permission they need it.

291
00:18:07,374 --> 00:18:09,445
Let's quickly walk through of a sample.

292
00:18:10,130 --> 00:18:12,170
Jenkins Pipeline with
the policy as a code.

293
00:18:12,670 --> 00:18:14,740
So as you see, we have
multiple different stages.

294
00:18:15,340 --> 00:18:20,950
First stage code is checked from the
version control, then use contest to test

295
00:18:20,950 --> 00:18:25,600
the Terraform files for policy violations
before resources are provisioned.

296
00:18:26,100 --> 00:18:28,529
We had another stage to
generate the Terraform plan.

297
00:18:28,889 --> 00:18:33,929
Which outlines the infrastructure changes
and the Terraform plan is tested again

298
00:18:33,929 --> 00:18:39,749
against the policies to ensure the
compliances and the deploy stage only if

299
00:18:39,749 --> 00:18:43,439
the policy is passed, the infrastructure
changes are deployed using the Terraform.

300
00:18:43,939 --> 00:18:48,229
How to integrate the pack into the
deployment development workflows.

301
00:18:48,729 --> 00:18:52,359
One of the best ways to integrate the
policy as a code into the development

302
00:18:52,359 --> 00:18:58,569
workflows is by providing instant policy
validation, directing within the I IDs.

303
00:18:59,394 --> 00:19:03,444
This means that as a developer write
code, whether it's an infrastructure

304
00:19:03,444 --> 00:19:06,684
as a code, like a Terraform, or an
application configuration like a

305
00:19:06,684 --> 00:19:11,334
Kubernetes yaml, they get real time
feedback about whether there are changes

306
00:19:11,334 --> 00:19:15,834
are compliant with security or compliances
and other organizational policies.

307
00:19:16,524 --> 00:19:17,364
Tools like VS.

308
00:19:17,364 --> 00:19:22,044
Code Intelli and other popular
IDs allow developers to install.

309
00:19:22,669 --> 00:19:27,469
Plugins that validated configuration or
code against the predefined policies.

310
00:19:28,069 --> 00:19:32,179
This provide immediate feedback on
the issues like insect configuration

311
00:19:32,359 --> 00:19:34,309
or non-compliant resource definition.

312
00:19:34,609 --> 00:19:38,809
Allow developers to resolve the issues
instantly before moving forward.

313
00:19:39,559 --> 00:19:40,669
The benefits are very huge.

314
00:19:41,169 --> 00:19:44,739
Increased productivity because
developers don't have to wait until

315
00:19:44,739 --> 00:19:49,389
the pipeline runs to find out if there
is an issue improved, code quality

316
00:19:49,509 --> 00:19:53,889
as a violation, or cut early leading
to a better and more compliant code.

317
00:19:54,639 --> 00:19:57,579
The faster delivery asset
development process does not get.

318
00:19:57,754 --> 00:20:00,874
Delayed by the last minute policy
violations or a manual check.

319
00:20:01,714 --> 00:20:05,314
By bringing the policy enforcement
right into the development environment,

320
00:20:05,494 --> 00:20:09,274
we make sure that policies are
continuously enforced in the real time,

321
00:20:09,724 --> 00:20:13,984
reducing the friction and ensuring
the consistent compliant deployments.

322
00:20:14,484 --> 00:20:19,014
The pull request enforcement is a powerful
way to integrate the policy as a code into

323
00:20:19,014 --> 00:20:23,604
the development workflows by automatically
running the policy checks during the code

324
00:20:23,604 --> 00:20:28,134
reviews, you ensure that only compliant
code and the secure configurations

325
00:20:28,164 --> 00:20:30,024
are merged into your main branch.

326
00:20:30,639 --> 00:20:35,049
Before a pool request is approved,
automated tools such as run policy

327
00:20:35,049 --> 00:20:38,499
checks that validate the code
or infrastructure against your

328
00:20:38,499 --> 00:20:42,129
predefined security compliance,
and the best practices policies.

329
00:20:42,519 --> 00:20:46,959
For example, the policies can ensure
that the Kubernetes CML file contain

330
00:20:46,959 --> 00:20:50,649
the necessary resource limits or
data, terraform code compliance

331
00:20:50,649 --> 00:20:52,209
with the access control policies.

332
00:20:52,549 --> 00:20:53,599
Benefits are clear.

333
00:20:54,049 --> 00:20:58,159
Prevention of non-compliant changes
by catching violations Early in

334
00:20:58,159 --> 00:21:01,759
the poll request process, you
can prevent non-compliant code

335
00:21:01,759 --> 00:21:03,229
from making it to the production.

336
00:21:03,729 --> 00:21:05,019
The streamlined code reviews.

337
00:21:05,079 --> 00:21:09,729
This reduces with the burden on the
reviews since the policy checks that are

338
00:21:09,729 --> 00:21:13,839
automatically handled, letting them focus
on the logic and the design of the code.

339
00:21:14,774 --> 00:21:18,854
As every change is checked against
the policies, you maintain a high

340
00:21:18,854 --> 00:21:22,514
level of consistency in the code
quality and the security practices.

341
00:21:23,294 --> 00:21:27,644
Integrating PAC into a pool request
process helps ensure that the development

342
00:21:27,644 --> 00:21:33,074
process is not only fast, but also
secure and compliant, which the key

343
00:21:33,104 --> 00:21:34,784
delivering high quality software.

344
00:21:35,284 --> 00:21:39,304
The critical component of the integrating
policy as a code into the development

345
00:21:39,304 --> 00:21:41,494
workflow is the use of pipeline gates.

346
00:21:42,154 --> 00:21:44,434
These gates are automated policies.

347
00:21:44,434 --> 00:21:48,784
Enforcement points into the CICD
pipeline, that block non-compliant

348
00:21:48,784 --> 00:21:52,564
changes from progressing to the
next stage, whether it's a build.

349
00:21:53,009 --> 00:21:56,969
Test or deploy the gates ensure
that only compliant code and

350
00:21:56,969 --> 00:21:58,469
the infrastructure gets through.

351
00:21:58,969 --> 00:22:02,569
For example, in the build stage,
we can configure the pipeline to

352
00:22:02,629 --> 00:22:06,799
check the security vulnerabilities
like insecure, hot coded credentials

353
00:22:06,829 --> 00:22:10,159
or compliance violations, such as
missing required resource limits

354
00:22:10,549 --> 00:22:12,049
in the Kubernetes YAML files.

355
00:22:12,529 --> 00:22:15,469
If the violation is
detected, the pipeline stops.

356
00:22:15,719 --> 00:22:18,329
Preventing the deployment from
the non-compliant changes.

357
00:22:19,079 --> 00:22:23,309
The main benefit of the pipeline gates is
that they automatically enforce policies

358
00:22:23,639 --> 00:22:28,559
as a key stages of the pipeline, reducing
the need of a manual interventions and

359
00:22:28,559 --> 00:22:30,629
ensuring compliances at every step.

360
00:22:31,139 --> 00:22:34,979
This provides faster feedback to the
developers so they can fix issues.

361
00:22:34,979 --> 00:22:39,179
Earliest consistency in enforcing the
policies across all the environments.

362
00:22:39,729 --> 00:22:44,169
Most secure under compliant code
base by ensuring the only policy

363
00:22:44,169 --> 00:22:45,789
compliant code can be deployed.

364
00:22:46,479 --> 00:22:51,549
By incorporating pipeline gates into the
CICD pipelines, you are ensuring that

365
00:22:51,549 --> 00:22:55,329
the every piece of code that reaches
the production is properly vetted

366
00:22:55,329 --> 00:22:59,889
for security compliances and the best
practices providing stronger governance

367
00:22:59,889 --> 00:23:02,219
and the reducing risk The compliances.

368
00:23:02,719 --> 00:23:04,489
Reporting is a key factor.

369
00:23:04,639 --> 00:23:08,239
The key aspect of a policy as
a code that ENS ensures you are

370
00:23:08,239 --> 00:23:10,039
prepared for regulatory audits.

371
00:23:10,539 --> 00:23:14,289
These automated reports track and
they document policy violations

372
00:23:14,289 --> 00:23:17,889
in the real time and they include
the essential information such as

373
00:23:17,889 --> 00:23:22,299
timestamp, who made the change, and
what specific policy was violated.

374
00:23:22,809 --> 00:23:26,619
This level of documentation is
invaluable when it comes to providing

375
00:23:26,619 --> 00:23:28,569
a regulatory compliances in the audits.

376
00:23:29,169 --> 00:23:31,179
The benefits of complying.

377
00:23:31,959 --> 00:23:36,609
Reporting includes the ability to
generate the auditable reports without

378
00:23:36,609 --> 00:23:40,659
manual efforts, a proven track record
of a compliance with the industry

379
00:23:40,659 --> 00:23:43,569
regulations such as GDPR or hipaa.

380
00:23:44,259 --> 00:23:48,219
The ability to continuously track
and improve the compliance approach

381
00:23:48,219 --> 00:23:52,714
over time by reviewing audit data
and taking proactive measures to

382
00:23:52,714 --> 00:23:54,219
correct the policy violations.

383
00:23:54,719 --> 00:23:59,249
By automating compliances reporting,
you ensure that your organization can

384
00:23:59,249 --> 00:24:04,439
always prove compliances and quickly
respond to regulatory requirements

385
00:24:04,769 --> 00:24:07,079
with up to date accurate reports.

386
00:24:07,579 --> 00:24:09,829
What should be done to
we get started today?

387
00:24:10,329 --> 00:24:14,439
So start by identifying the most
important security and the compliances

388
00:24:14,439 --> 00:24:19,029
policies, those that address the most
common or critical security risk.

389
00:24:19,529 --> 00:24:23,339
The recommendation is choosing the
tools that work with the existing stack.

390
00:24:23,729 --> 00:24:26,759
Example, the open policy
agent for the most cases.

391
00:24:27,479 --> 00:24:31,699
And should these tools integrate
seamlessly into your pipeline, always

392
00:24:31,699 --> 00:24:36,229
start small with the non-production
environment or with the policies set to

393
00:24:36,229 --> 00:24:41,719
one only mode before fully enforcing the
heart failures as a measure of success.

394
00:24:42,139 --> 00:24:43,249
Expand the policies.

395
00:24:43,749 --> 00:24:48,369
Always reassure the audience that
policy as a code is an IT process.

396
00:24:48,909 --> 00:24:54,729
Security improves as more policies
are gradually implemented as we go on.

397
00:24:55,719 --> 00:24:59,069
That we all hope we had a good
touch base with the policy

398
00:24:59,069 --> 00:25:00,629
as a code and it's useless.

399
00:25:01,379 --> 00:25:05,339
Please feel free to reach me or
email my profile for any assistance

400
00:25:05,339 --> 00:25:06,629
or help needed in the future.

401
00:25:07,409 --> 00:25:09,029
Let's get the environment safer.

402
00:25:09,529 --> 00:25:09,889
Policy.

403
00:25:10,389 --> 00:25:12,159
Thank you for your bye.

