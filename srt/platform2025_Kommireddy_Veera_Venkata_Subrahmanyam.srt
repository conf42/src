1
00:00:00,500 --> 00:00:03,149
Hello, my name is Community.

2
00:00:03,660 --> 00:00:06,869
I'm working as a senior
manager at Micro Technologies.

3
00:00:07,709 --> 00:00:11,389
I'm a leading, I'm leading team
of student developers who support

4
00:00:11,389 --> 00:00:16,784
enterprise applications such as Team
Center, rapid Response and building

5
00:00:17,504 --> 00:00:24,159
RPA tools, using UiPath, robotic
process automations, and our team also.

6
00:00:24,794 --> 00:00:28,185
Includes dashboard development
using Power BI and Tableau.

7
00:00:28,685 --> 00:00:32,855
Today I'm going to discuss about how,
why, how, and why we should build

8
00:00:32,944 --> 00:00:34,864
scalable platforms for developers

9
00:00:35,364 --> 00:00:35,815
in general.

10
00:00:36,324 --> 00:00:41,964
Engineering teams spent around like
40% of their time on the infrastructure

11
00:00:42,025 --> 00:00:44,995
tasks, especially for deployments.

12
00:00:45,495 --> 00:00:49,605
60% of this time can be reduced
using integrated development

13
00:00:49,785 --> 00:00:54,455
platform engineering tools and
IDPs also helps us to increase

14
00:00:54,545 --> 00:00:57,125
our delivery rate by three times.

15
00:00:57,625 --> 00:00:59,754
So typical key challenges
in platform engineering.

16
00:01:00,254 --> 00:01:05,849
Looks like they have disconnected tools
with inefficiencies and lot of repetitive.

17
00:01:06,679 --> 00:01:11,139
Manual tasks, and we always need
to upgrade our skillset because

18
00:01:11,139 --> 00:01:12,579
this requests special knowledge

19
00:01:13,079 --> 00:01:16,739
and lack of standardization
also causes quality issues and

20
00:01:16,739 --> 00:01:18,979
knowledge gaps for any tool.

21
00:01:19,309 --> 00:01:23,609
We always have resistance
to adapt especially for new

22
00:01:23,609 --> 00:01:24,869
platforms and workflows.

23
00:01:25,369 --> 00:01:28,879
It's always difficult to scale
the teams, especially when

24
00:01:28,879 --> 00:01:30,889
we have multi-skilled teams.

25
00:01:31,389 --> 00:01:36,099
In addition to that, there are overbearing
issues with respect to complexity

26
00:01:36,099 --> 00:01:40,119
of softwares, especially when we
are using microservice architectures

27
00:01:40,619 --> 00:01:42,689
and multi clouds deployments.

28
00:01:43,260 --> 00:01:47,390
So today every company is using
multiple clouds, including AWS.

29
00:01:47,640 --> 00:01:52,550
Azure or any kind of leading cloud
deployment and complex dependency

30
00:01:52,550 --> 00:01:55,120
management distributor system challenges.

31
00:01:55,270 --> 00:01:58,030
These are all related to all
the complexity of softwares.

32
00:01:58,530 --> 00:02:03,675
In addition to that, developers
has lot of issues with respect

33
00:02:03,675 --> 00:02:07,325
to inconsistent workflows, a lot
of infrastructure dependencies.

34
00:02:07,825 --> 00:02:11,925
Standardization problems, all these
things leading to cognitive overheads.

35
00:02:12,425 --> 00:02:17,675
So this sentence reduces the productivity
and increases the time to market.

36
00:02:18,175 --> 00:02:21,715
So platform engineering
integrated platform engineering

37
00:02:21,985 --> 00:02:23,395
solves these problems.

38
00:02:23,895 --> 00:02:27,885
All the challenges by creating
internal development platforms,

39
00:02:28,065 --> 00:02:28,920
we call it as I, dps.

40
00:02:29,420 --> 00:02:31,640
So always focuses on the developers.

41
00:02:32,480 --> 00:02:34,730
They, we want to give some
time back to developers.

42
00:02:35,360 --> 00:02:39,110
So developers, we need to think
about fitting them in the driver's

43
00:02:39,110 --> 00:02:40,960
seat wherever it is possible.

44
00:02:41,320 --> 00:02:46,330
These IDPs helps us to automate
manual tasks, which can reduce

45
00:02:47,020 --> 00:02:52,710
tasks and it all these IDPs comes
with clear APIs and interfaces.

46
00:02:53,670 --> 00:02:56,925
They have, they also comes with
lot of services and workflows,

47
00:02:57,425 --> 00:02:59,100
prebuilt services and workflows.

48
00:02:59,600 --> 00:03:02,350
Because IDP is also platform engineering.

49
00:03:02,620 --> 00:03:08,160
Tools also comes with lot of metrics
where we can use the metrics to

50
00:03:08,460 --> 00:03:13,670
adapt, increase the efficiency, and
also in term like we can increase the

51
00:03:13,670 --> 00:03:15,320
developer development satisfaction.

52
00:03:15,820 --> 00:03:19,390
So core components in the
platform engineering starts with

53
00:03:19,390 --> 00:03:21,100
self-service infrastructure.

54
00:03:21,600 --> 00:03:26,255
It's a key component for IDPs, which
will help to reduce the wait time, remove

55
00:03:26,255 --> 00:03:32,755
the bottlenecks, they'll improve the
teams, empower the teams, and reduce the

56
00:03:32,755 --> 00:03:35,515
deployment complexities by 60% or more.

57
00:03:36,015 --> 00:03:42,495
So integrated toolkit is a core
component which has key components

58
00:03:42,495 --> 00:03:47,535
such as version control, security
scanning, performance testing, compliance

59
00:03:47,535 --> 00:03:48,615
checks and deployment automations.

60
00:03:49,115 --> 00:03:53,405
They helps in increasing the productivity
and develop developer components

61
00:03:53,905 --> 00:03:54,955
like I mentioned earlier.

62
00:03:55,435 --> 00:03:57,474
Observability and monitoring frameworks.

63
00:03:58,075 --> 00:04:02,765
This is a key factor for platform
engineering, which comes with logging

64
00:04:03,454 --> 00:04:10,024
metrics, traces, and also some of the
advanced capabilities like how to detect

65
00:04:10,024 --> 00:04:16,579
the anomalies, interactive visualization
and proactive alerting with automation.

66
00:04:17,079 --> 00:04:20,209
So here are the best industry,
best platform engineering tools

67
00:04:20,569 --> 00:04:26,059
like, like I mentioned earlier,
each component has its own flavors.

68
00:04:26,539 --> 00:04:31,369
So self-service infrastructure,
Kubernetes, Terraform, omi, cross plan.

69
00:04:31,759 --> 00:04:39,429
These are the tools widely used for
CICD, Argo C Teton, GitHub actions,

70
00:04:39,519 --> 00:04:46,589
Jenkins X. These are the tools managers
for CICD, for observability, especially

71
00:04:46,589 --> 00:04:52,049
for metrics, parameters, Grafana,
open Telemetry, Datadog, other tools

72
00:04:52,979 --> 00:04:54,689
for incident and service management.

73
00:04:54,809 --> 00:04:58,589
Backstage, human tech query are the tools.

74
00:04:59,309 --> 00:05:04,689
And finally, for security, we
can use vault OPA and sync.

75
00:05:05,189 --> 00:05:07,979
So what are the strategies we
should use for implementing?

76
00:05:08,479 --> 00:05:14,189
So for develop, for developers
centric, we need to follow the best

77
00:05:14,189 --> 00:05:19,209
practices, a PA design following
the A PA design principles and

78
00:05:19,269 --> 00:05:21,909
command line tools for automations.

79
00:05:22,409 --> 00:05:27,179
So establishing metrics, this is
a key 'cause we need to monitor

80
00:05:27,209 --> 00:05:33,349
active users and deployments
time and how much platform usage.

81
00:05:33,849 --> 00:05:36,699
In addition to that, we should
monitor productivity metrics

82
00:05:37,199 --> 00:05:38,609
and satisfaction metrics.

83
00:05:38,814 --> 00:05:39,034
So

84
00:05:39,534 --> 00:05:40,404
another strategy is.

85
00:05:41,184 --> 00:05:42,744
Creating feedback loops.

86
00:05:43,244 --> 00:05:49,334
So we should be analyzing the,
collecting the data usage data errors,

87
00:05:49,514 --> 00:05:55,054
performance metrics, gather the feedback,
analyze the patterns, and identify the

88
00:05:55,054 --> 00:05:59,214
improvements, and we should communicate
the plan to gain the confidence.

89
00:05:59,714 --> 00:06:01,994
Finally, we need to deliver
the improvements based

90
00:06:01,994 --> 00:06:03,284
on the constant feedback.

91
00:06:03,434 --> 00:06:05,684
So this is a cycle we need to continue.

92
00:06:06,074 --> 00:06:09,014
To evolve in the platform
engineering implementations.

93
00:06:09,514 --> 00:06:12,274
So now I'm going to explain
about few success stories.

94
00:06:12,774 --> 00:06:15,534
The first story is
about e-commerce change.

95
00:06:16,034 --> 00:06:19,844
The biggest challenge they faced up
is like how to scale up the team.

96
00:06:20,344 --> 00:06:24,844
So they build the platform in
engineering tool by building the

97
00:06:24,844 --> 00:06:28,284
platform, focusing on provisioning
standard development environment.

98
00:06:28,784 --> 00:06:33,134
Integrated CICD pipeline
automation and centralized

99
00:06:33,194 --> 00:06:35,804
observator observability metrics.

100
00:06:36,304 --> 00:06:38,404
So this helped this e-commerce chain.

101
00:06:38,904 --> 00:06:42,864
They increased the feature velocity
by three times and they reduced the

102
00:06:42,864 --> 00:06:49,879
production bug by 75% and they have fewer
deployment failures and that improved

103
00:06:49,879 --> 00:06:52,919
60% of their deployment failures.

104
00:06:53,419 --> 00:06:55,069
Pure deployment failures.

105
00:06:55,569 --> 00:06:58,599
Of course, it comes up with
the developer satisfaction.

106
00:06:59,099 --> 00:07:03,239
The next success story is
financial services firm.

107
00:07:03,739 --> 00:07:08,284
So they struggle with operational
overheads, manual security reviews, audit

108
00:07:08,284 --> 00:07:10,999
trials, and change management processes.

109
00:07:11,059 --> 00:07:16,849
They create a lot of bottlenecks and they
delayed the future religious by month.

110
00:07:17,149 --> 00:07:19,739
So that's a good challenge they have.

111
00:07:20,239 --> 00:07:25,609
So they developed the platform
by embedding complaints, enabling

112
00:07:25,609 --> 00:07:29,949
automated security and policy
as a code implementation.

113
00:07:29,949 --> 00:07:33,679
They adapted and self-service
provisioning, which helped

114
00:07:33,679 --> 00:07:36,099
them to available on demand.

115
00:07:36,599 --> 00:07:40,769
Finally, the register overhead by
50% and improved the time to market.

116
00:07:41,639 --> 00:07:43,139
And less security incidents.

117
00:07:43,639 --> 00:07:48,619
The third success story is with the
technology startup by enabling golden

118
00:07:48,619 --> 00:07:54,399
parts in the ideas and by automating
onboarding and technology flexibility.

119
00:07:54,899 --> 00:07:59,879
The startup company scaled from
10 to hundred users, and this

120
00:07:59,879 --> 00:08:03,269
is achieved by investing in the
platform engineering early in the.

121
00:08:03,869 --> 00:08:04,499
Growth journey.

122
00:08:04,999 --> 00:08:05,179
Okay.

123
00:08:05,179 --> 00:08:09,969
Lot of times we have the confusion
about platform engineering, DevOps,

124
00:08:10,119 --> 00:08:12,699
and software relat engineering.

125
00:08:12,969 --> 00:08:15,189
So here are the key differences.

126
00:08:15,879 --> 00:08:19,929
Platform engineering main goal
is to build internet development

127
00:08:20,079 --> 00:08:21,759
platforms to make it consistent.

128
00:08:22,509 --> 00:08:26,799
Whereas DevOps focuses on the bridging the
gap between development and operations.

129
00:08:27,639 --> 00:08:32,259
Software Reliability engineering focuses
on the reliability of the software.

130
00:08:32,559 --> 00:08:36,609
And there are different tools
in the market and different

131
00:08:36,609 --> 00:08:38,439
metrics for each section.

132
00:08:38,679 --> 00:08:42,639
So like I outlined here, like platform
engineering focuses on the productivity

133
00:08:42,639 --> 00:08:47,189
and adoption, whereas SRE focuses
on uptime and latency, and DevOps

134
00:08:47,219 --> 00:08:49,619
focuses on MTTR and deploy frequencies.

135
00:08:50,119 --> 00:08:51,769
So these DI disciplines.

136
00:08:52,129 --> 00:08:54,949
Often overlap, but they
have distant focus.

137
00:08:55,449 --> 00:08:55,749
Okay.

138
00:08:55,779 --> 00:08:59,619
What is the future of how is
how this platform engineering

139
00:08:59,619 --> 00:09:02,019
is going to evolve in future?

140
00:09:02,679 --> 00:09:06,959
The biggest challenge currently
is how can we how can we work

141
00:09:06,959 --> 00:09:08,369
on the multi-cloud environments?

142
00:09:08,609 --> 00:09:13,939
So basically enabling workload
portability between the cloud providers.

143
00:09:14,269 --> 00:09:16,129
If we can achieve that
is the biggest success.

144
00:09:16,219 --> 00:09:18,369
I think things are
going in that direction.

145
00:09:18,869 --> 00:09:24,719
The next biggest thing is lot of
Gene and a agent DK Innovations.

146
00:09:25,019 --> 00:09:30,119
They helps this platform engineering in
big way, cell LMS for code generation,

147
00:09:30,929 --> 00:09:35,599
intelligent automation, robotic process
automation, predictive analysis.

148
00:09:36,289 --> 00:09:38,989
So that looks promising
for future innovation.

149
00:09:39,489 --> 00:09:40,689
And finally.

150
00:09:41,189 --> 00:09:45,299
These tools should move beyond reactive
operations to proactive capacity planning.

151
00:09:45,629 --> 00:09:50,019
So that way we can sustainably
impact, we can do, make sustainable

152
00:09:50,019 --> 00:09:52,149
impact on the platform operations.

153
00:09:52,649 --> 00:09:53,069
Okay?

154
00:09:53,099 --> 00:09:55,019
How do we build platform engineering?

155
00:09:55,849 --> 00:09:57,649
And what are the strategies
we should be using?

156
00:09:58,149 --> 00:10:01,899
First and foremost, we need to
have clear vision of the future and

157
00:10:01,959 --> 00:10:03,009
understand the problem statement.

158
00:10:03,509 --> 00:10:08,479
Always start with a narrow scope,
then we can scale it up and focus on

159
00:10:08,479 --> 00:10:12,819
building the team with unique skillset
by using the observability metrics,

160
00:10:13,239 --> 00:10:19,709
constantly measure the success and
evolve continuously and keep on getting

161
00:10:19,709 --> 00:10:21,854
feedback from developers to innovate

162
00:10:22,354 --> 00:10:23,494
the key, key takeaways.

163
00:10:24,174 --> 00:10:28,304
From the platform engineering
perspective is it's no.

164
00:10:28,364 --> 00:10:31,714
It is complexity of
today's software ecosystem.

165
00:10:32,554 --> 00:10:35,014
It is demanding the need
of platform engineering.

166
00:10:35,884 --> 00:10:39,724
Successful platforms prioritize
on the developer needs.

167
00:10:39,849 --> 00:10:44,359
They establish clear metrics for
adoption and increase the productivity.

168
00:10:44,859 --> 00:10:45,879
As I mentioned earlier.

169
00:10:46,179 --> 00:10:48,354
Always start with narrow
scope and scale it.

170
00:10:48,854 --> 00:10:52,454
Finally, platform engineering
is not an optional anymore.

171
00:10:52,784 --> 00:10:56,954
It is a foundation for software
excellence given the direction

172
00:10:56,954 --> 00:11:01,464
of future citizen development and
lot of, non code environments.

173
00:11:01,964 --> 00:11:02,384
Thank you.

