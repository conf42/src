1
00:00:00,010 --> 00:00:00,930
Hello, everyone.

2
00:00:01,060 --> 00:00:04,740
This is Vivek Kumar, a senior
software engineer at FANG.

3
00:00:05,510 --> 00:00:09,170
I am very excited to be here today
to talk about something that's

4
00:00:09,170 --> 00:00:13,630
crucial for modern application
hosting, that is VPS and Docker.

5
00:00:14,370 --> 00:00:18,859
We will dive into key differences, how
they impact deployment and scalability,

6
00:00:19,369 --> 00:00:21,440
and also explore best practices.

7
00:00:21,940 --> 00:00:27,510
Plus, I will also share a real world
success story about the Sue app and

8
00:00:27,510 --> 00:00:29,580
how they optimize their infrastructure.

9
00:00:30,450 --> 00:00:31,790
Let's get started.

10
00:00:32,290 --> 00:00:36,790
First of all, let me give you a
snapshot of what we will cover today.

11
00:00:37,290 --> 00:00:42,390
We will compare VPS hosting with Docker
container based approach and talk about

12
00:00:42,400 --> 00:00:47,470
how Docker can improve deployment,
efficiency, team productivity, and

13
00:00:47,480 --> 00:00:53,370
resource optimization, and don't worry,
I will keep it practical with insight

14
00:00:53,440 --> 00:00:55,590
you can actually use sound good.

15
00:00:56,090 --> 00:00:58,010
Here is our roadmap for today.

16
00:00:58,510 --> 00:01:01,960
So first we will go through
the introduction to VPS and

17
00:01:01,960 --> 00:01:06,810
Docker key differences and
deployment and team productivity.

18
00:01:07,220 --> 00:01:12,260
Then we will also discuss about resource
efficiency and cost optimization.

19
00:01:13,030 --> 00:01:17,710
We will also look for application
management and scalability, and we

20
00:01:17,710 --> 00:01:21,550
will also walk through practical
example of su app migration.

21
00:01:21,770 --> 00:01:22,050
Then.

22
00:01:22,630 --> 00:01:27,240
We will also touch base on
Kubernet, the orchestration tool.

23
00:01:27,860 --> 00:01:32,109
We will also talk about the best
practices for hosting application

24
00:01:32,110 --> 00:01:33,590
and migrating to Docker.

25
00:01:34,090 --> 00:01:37,480
Let's start by defining what
VPS and Docker actually are.

26
00:01:37,980 --> 00:01:44,000
VPS hostings provide a dedicated virtual
environment on a shared physical server.

27
00:01:44,000 --> 00:01:49,120
You can think of it like a renting
an apartment in a big building.

28
00:01:49,875 --> 00:01:53,155
You have your own space, but
you are still sharing the

29
00:01:53,155 --> 00:01:55,275
physical structure with others.

30
00:01:55,925 --> 00:01:59,575
It's great for running applications
with stable infrastructure needs.

31
00:02:00,565 --> 00:02:04,415
With VPS, you get a virtual
slash of a physical server.

32
00:02:04,525 --> 00:02:08,175
You have dedicated resources
like CPU, RAM and storage.

33
00:02:08,975 --> 00:02:15,115
It's flexible and gives you control,
but it can be resource intensive and

34
00:02:15,185 --> 00:02:17,595
scaling is not always straightforward.

35
00:02:18,095 --> 00:02:19,725
Now let's talk about Docker.

36
00:02:20,515 --> 00:02:25,935
Imagine you or your belongings
neatly packed in a container that

37
00:02:25,955 --> 00:02:29,015
you can move anywhere that's Docker.

38
00:02:29,515 --> 00:02:31,375
Docker takes a different approach.

39
00:02:31,845 --> 00:02:37,985
Instead of virtualizing hardware, it
allows you to package application and

40
00:02:37,985 --> 00:02:44,415
their dependency into lightweight portable
container that can run consistently

41
00:02:44,455 --> 00:02:45,625
across different environments.

42
00:02:46,125 --> 00:02:51,455
This means you can run the same
application on your laptop, a test

43
00:02:51,455 --> 00:02:57,365
server, or in production without
worrying about environment differences.

44
00:02:57,865 --> 00:03:03,155
That's why it makes deployments
much more consistent and scalable.

45
00:03:03,655 --> 00:03:09,085
Basically, containers share the host OS
kernel, which makes them lightweight.

46
00:03:09,585 --> 00:03:10,765
Here is a quick comparison.

47
00:03:11,265 --> 00:03:18,835
If you look at isolation, with VPH, each
server has its own full operating system,

48
00:03:19,335 --> 00:03:21,755
providing complete isolation from others.

49
00:03:22,255 --> 00:03:28,355
This means that if one server crashes or
is compromised, it won't affect the other.

50
00:03:28,605 --> 00:03:33,095
On the other hand, Docker uses
process level isolation, where each

51
00:03:33,095 --> 00:03:36,965
container shares the same kernel
as the host operating system.

52
00:03:37,465 --> 00:03:42,025
While this provides some level
of isolation, it's not as robust

53
00:03:42,085 --> 00:03:44,875
as having a full OS per server.

54
00:03:45,375 --> 00:03:50,395
If you let's look at the resource usage,
when it comes to resource usage, VPS

55
00:03:51,235 --> 00:03:56,765
requires a full operating system for
each instances, which can be heavy.

56
00:03:57,265 --> 00:04:01,565
While Docker containers share the
host OS, making them lightweight.

57
00:04:02,065 --> 00:04:04,065
Now talk about the portability.

58
00:04:04,065 --> 00:04:07,665
Portability is a major
advantage of docker.

59
00:04:07,735 --> 00:04:12,575
With docker you can create a
container on one machine and deploy

60
00:04:12,605 --> 00:04:16,105
it to another without worrying
about compatibility issues.

61
00:04:16,605 --> 00:04:21,685
This makes it easy to move
applications between environments,

62
00:04:21,955 --> 00:04:23,175
such as from Dev to Prod.

63
00:04:23,675 --> 00:04:27,325
VPS, on the other hand, requires
manual configuration and setup

64
00:04:27,325 --> 00:04:31,205
for each server, which can be time
consuming and prone to errors.

65
00:04:31,705 --> 00:04:36,415
Even for deployment and scaling
in Docker are automated, whereas

66
00:04:36,415 --> 00:04:38,895
VPS often involves manual effort.

67
00:04:39,395 --> 00:04:43,045
Now look at some differences
in terms of the boot time, auto

68
00:04:43,185 --> 00:04:45,035
scaling, and cost optimization.

69
00:04:45,535 --> 00:04:51,150
Imagine being able to deploy
your application under a second.

70
00:04:51,650 --> 00:04:56,200
With containers, that's not
possible because it loads very fast.

71
00:04:56,930 --> 00:05:01,330
By using lightweight Dix image,
you can get your application up

72
00:05:01,440 --> 00:05:06,600
and running quickly without having
to wait for a full OS to boot.

73
00:05:07,170 --> 00:05:10,390
This is especially important
for applications that require

74
00:05:10,390 --> 00:05:15,410
fast deployment, such as real
time analytics or live updates.

75
00:05:15,910 --> 00:05:20,320
One of the biggest challenges with
traditional VPS hosting is provisioning

76
00:05:20,330 --> 00:05:21,960
the right amount of hardware.

77
00:05:22,460 --> 00:05:27,500
Too little and your application may not
have enough resources to run smoothly.

78
00:05:28,000 --> 00:05:31,670
Too much and you are wasting
money on unused resources.

79
00:05:32,170 --> 00:05:36,309
With containers, you can
provision exactly what you need.

80
00:05:36,809 --> 00:05:42,579
When you need it, this not only
saves you money, but also improve

81
00:05:42,639 --> 00:05:45,219
efficiency and reduces waste.

82
00:05:45,719 --> 00:05:49,839
Imagine being able to handle
millions of users with ease.

83
00:05:50,339 --> 00:05:52,179
With containers, that's not possible.

84
00:05:53,169 --> 00:05:59,294
By using this image, You can quickly
deploy new containers to meet changing

85
00:05:59,294 --> 00:06:05,424
demands, ensuring that your application
remains responsive and performant.

86
00:06:05,924 --> 00:06:10,014
This is especially important for
applications that experience sudden

87
00:06:10,094 --> 00:06:15,004
spikes in traffic, such as gaming
sites, during live gaming sessions.

88
00:06:15,504 --> 00:06:17,094
Let's move to the next slide.

89
00:06:17,594 --> 00:06:20,764
Let's talk about deployment
and team productivity.

90
00:06:21,264 --> 00:06:26,804
With VPS, setting up environments can
be time consuming and error prone tasks.

91
00:06:27,424 --> 00:06:33,014
Developers have to spend time to manually
configure environments, leading to

92
00:06:33,034 --> 00:06:35,764
inconsistency between dev and production.

93
00:06:36,264 --> 00:06:40,104
But Docker simplifies this by
standardizing environments.

94
00:06:40,344 --> 00:06:46,364
You get faster onboarding for new team
members and smoother CI CD integration.

95
00:06:46,864 --> 00:06:51,044
This means your team can spend more
time coding and less time dealing

96
00:06:51,044 --> 00:06:53,504
with dependent deployment headaches.

97
00:06:54,004 --> 00:06:57,764
So basically it improves
also the team productivity.

98
00:06:58,264 --> 00:07:01,534
Managing application with
VPS can be challenging.

99
00:07:02,034 --> 00:07:06,964
You often need manual intervention
to scale and balance loads.

100
00:07:07,014 --> 00:07:11,769
You might need to provision new
server Manually to cope with sudden

101
00:07:12,089 --> 00:07:16,699
traffic spike Docker especially when
combined with orchestration tools

102
00:07:16,699 --> 00:07:22,149
like kubernetes offers centralized
app management and easier scaling This

103
00:07:22,159 --> 00:07:30,029
ensures better stability And performance
even under high traffic condition now

104
00:07:30,529 --> 00:07:32,489
Now look at the next slide.

105
00:07:32,489 --> 00:07:39,314
Let's take A look at this real world
example of how containerization

106
00:07:39,354 --> 00:07:41,074
can improve efficiency.

107
00:07:41,574 --> 00:07:45,134
We are going to explore the
case study of Su App migration.

108
00:07:45,634 --> 00:07:50,474
The Su App was initially running
on 85 EC2 instances to support

109
00:07:50,764 --> 00:07:56,399
various services such as search,
user management and authentication.

110
00:07:56,399 --> 00:08:01,319
As you can see from the architecture
diagram on the left, each instance

111
00:08:01,319 --> 00:08:07,139
was dedicated to a specific
service, which resulted in a lot

112
00:08:07,139 --> 00:08:10,279
of wasted of CPU and RAM resources.

113
00:08:11,239 --> 00:08:15,819
This is because each instance was
provisioned with a fixed amount of

114
00:08:15,819 --> 00:08:21,489
resources, regardless of whether they
were being fully utilized or not.

115
00:08:21,989 --> 00:08:27,739
This approach may have worked when
the app was smaller, but as it grew,

116
00:08:28,399 --> 00:08:33,819
it became clear that this was not an
efficient way to manage resources.

117
00:08:34,319 --> 00:08:38,659
The team was facing challenges
such as underutilized resources,

118
00:08:39,009 --> 00:08:43,569
high costs, and difficulty scaling
to meet challenging demands.

119
00:08:44,069 --> 00:08:45,344
So what they did?

120
00:08:46,104 --> 00:08:49,474
They decided to migrate
to Docker and Kubernetes.

121
00:08:50,004 --> 00:08:54,894
Let's take a look at new architecture
and see how it improves their efficiency.

122
00:08:55,394 --> 00:09:01,064
After migrating to Docker and Kubernetes,
the Su F team was able to reduce the

123
00:09:01,064 --> 00:09:05,634
number of EC2 instances from 85 to 67.

124
00:09:06,134 --> 00:09:10,114
While maintaining the same
performance as you can see from

125
00:09:10,114 --> 00:09:17,574
the updated diagram on the left The
new setup allows for more efficient

126
00:09:18,074 --> 00:09:20,314
resource allocation and utilization

127
00:09:20,814 --> 00:09:26,684
The result of this migration was a 20
percent reduction AWS cost That's a

128
00:09:26,684 --> 00:09:28,944
significant improvement in efficiency.

129
00:09:29,544 --> 00:09:34,144
By using Container and Kubernetes,
the team was able to optimize

130
00:09:34,164 --> 00:09:38,984
resource allocation, reduce waste,
and improve the scalability.

131
00:09:39,484 --> 00:09:44,324
This case study demonstrated the
power of containerization in improving

132
00:09:44,354 --> 00:09:46,329
efficiency and reducing cost.

133
00:09:46,329 --> 00:09:50,713
Now let's talk about what
makes all this possible.

134
00:09:50,713 --> 00:09:52,174
That is Kubernetes.

135
00:09:52,674 --> 00:09:57,524
As we discussed, containers are a
powerful way to deploy applications.

136
00:09:58,344 --> 00:10:03,534
But as the number of containers
grows, managing them can

137
00:10:03,534 --> 00:10:05,754
become increasingly complex.

138
00:10:06,134 --> 00:10:09,674
That's where orchestration
tools like Kubernetes come in.

139
00:10:10,174 --> 00:10:13,189
Kubernetes is an open source
container orchestration tool.

140
00:10:13,579 --> 00:10:17,599
Restaurant platform that automate
that deployment, scaling and

141
00:10:17,599 --> 00:10:19,069
management of containers.

142
00:10:19,759 --> 00:10:23,989
With Kubernete, you can easily
manage hundreds or even thousands of

143
00:10:23,989 --> 00:10:30,049
container across multiple host, but
what really set Kubernetes apart is

144
00:10:30,049 --> 00:10:33,319
its ability to autoscale and self heal.

145
00:10:33,819 --> 00:10:37,329
It's basically like a traffic
controller for your application,

146
00:10:37,739 --> 00:10:40,229
ensuring everything runs smoothly.

147
00:10:40,729 --> 00:10:42,169
So let's move to the next slide.

148
00:10:42,669 --> 00:10:46,229
So what is more preferred, VPS or Docker?

149
00:10:46,729 --> 00:10:51,689
The answer depends on several factors,
including project management approach,

150
00:10:52,189 --> 00:11:00,619
microservice compatibility, web traffic
scale, budget, and deployment capability.

151
00:11:00,619 --> 00:11:06,759
Both VPS and container orchestration
platforms support web and

152
00:11:06,759 --> 00:11:09,049
mobile apps using microservices.

153
00:11:09,959 --> 00:11:16,569
But containers offer better
service, isolation, and scalability.

154
00:11:17,069 --> 00:11:22,249
When deciding between VPS and Docker,
team must consider infrastructure

155
00:11:22,289 --> 00:11:27,829
cost, scaling expenses, and complexity
of managing the chosen solution.

156
00:11:28,329 --> 00:11:33,099
If you have a simple application with
stable traffic, VPS might be enough.

157
00:11:34,059 --> 00:11:38,994
But if you need dynamic scaling,
Or run a microservice architecture,

158
00:11:39,304 --> 00:11:40,684
Docker is the way to go.

159
00:11:41,184 --> 00:11:44,574
Think about your project
requirements, budget, and a long

160
00:11:44,574 --> 00:11:46,944
term goal when making this decision.

161
00:11:47,444 --> 00:11:49,634
Industry adoption varies widely.

162
00:11:50,134 --> 00:11:54,334
VPS is preferred by web
publishers, e commerce websites,

163
00:11:54,464 --> 00:11:58,584
and multi domain developers for
their web hosting requirements.

164
00:11:59,084 --> 00:12:05,044
On the other hand, Docker is preferred
by corporate IP deployment in support

165
00:12:05,044 --> 00:12:10,624
of web and mobile applications at a
scale in datacenter operations through

166
00:12:10,644 --> 00:12:13,804
elastic cluster web server networks.

167
00:12:14,304 --> 00:12:16,854
Now let's talk about some best practices.

168
00:12:16,854 --> 00:12:17,824
For

169
00:12:18,324 --> 00:12:24,574
VPS, using configuration management
tools like Ansible, Puppet and Monitor

170
00:12:24,584 --> 00:12:25,994
resource uses to avoid overflow.

171
00:12:26,494 --> 00:12:32,414
Provisioning for Docker use multi stage
build to reduce image size and regularly

172
00:12:32,434 --> 00:12:35,504
update Docker image for security patches.

173
00:12:36,024 --> 00:12:39,404
Don't forget to implement
orchestration tools like Kubernetes.

174
00:12:39,904 --> 00:12:44,774
If you are thinking about migrating
to Docker, here are some useful tips.

175
00:12:45,274 --> 00:12:48,584
Start by assessing and
reflecting your microservices.

176
00:12:48,894 --> 00:12:54,084
To make sure you can build
docker or container out of this.

177
00:12:54,584 --> 00:13:01,924
Develop a small prototype before going
all in to find out any issue early.

178
00:13:02,424 --> 00:13:07,714
Use docker compose for testing
and multi container application.

179
00:13:08,214 --> 00:13:12,844
Integrate with CICD pipeline and train
your team on Docker and Kubernetes

180
00:13:12,914 --> 00:13:15,564
or whatever tools you are using.

181
00:13:16,064 --> 00:13:22,354
Implement monitoring tools like
ELK, Prometheus, or you can use

182
00:13:22,854 --> 00:13:26,324
any other tools as you prefer.

183
00:13:27,044 --> 00:13:30,644
And finally, migrate gradually
using a hybrid approach.

184
00:13:31,144 --> 00:13:37,634
To wrap up, Docker offers superior
efficiency, scalability, and automation

185
00:13:38,174 --> 00:13:42,274
compared to traditional VPS solutions.

186
00:13:42,274 --> 00:13:47,264
When paired with Kubernetes, managing
large scale containerized applications

187
00:13:47,274 --> 00:13:49,424
becomes seamless and highly efficient.

188
00:13:49,924 --> 00:13:55,344
So let's talk about the key takeaway
for today's Docker provides significant

189
00:13:55,384 --> 00:14:02,004
advantage over VPS in terms of efficiency,
scalability, and team productivity.

190
00:14:02,704 --> 00:14:07,954
By migrating to Docker organization
can achieve cost reduction while

191
00:14:08,514 --> 00:14:12,804
simultaneously enhancing team
productivity, making it a powerful

192
00:14:12,824 --> 00:14:16,084
choice for modern application
deployment and management.

193
00:14:16,584 --> 00:14:17,414
We also look at.

194
00:14:18,114 --> 00:14:23,614
The real world example today for the
sue app case study that proved that

195
00:14:23,944 --> 00:14:29,604
magneting to Docker can lead to cost
saving and better resource utilization.

196
00:14:30,104 --> 00:14:35,474
This demonstrates the real world benefit
of adopting Docker and Kubernetes for

197
00:14:35,494 --> 00:14:37,524
containerized application management.

198
00:14:38,024 --> 00:14:39,424
That's it for me.

199
00:14:39,924 --> 00:14:41,534
Thank you so much for your attention.

200
00:14:41,624 --> 00:14:43,974
I'm happy to answer any
question if you have.

201
00:14:44,554 --> 00:14:45,094
Thank you.

