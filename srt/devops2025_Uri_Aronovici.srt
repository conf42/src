1
00:00:00,500 --> 00:00:02,639
Hello everyone and welcome to my session.

2
00:00:02,909 --> 00:00:05,310
Today I'm going to talk about
the potential risk of using

3
00:00:05,370 --> 00:00:08,060
Terraform providers and Terraform
modules in cloud environment.

4
00:00:08,800 --> 00:00:11,240
But before we jump to that, I
would like to introduce myself.

5
00:00:11,740 --> 00:00:14,219
I'm Uri, the CEO and co
founder of Zest Security.

6
00:00:14,540 --> 00:00:18,529
I spent over decades working in the cyber
security, specializing in both offensive

7
00:00:18,529 --> 00:00:20,000
and defensive security practices.

8
00:00:20,810 --> 00:00:24,740
As the former lead security
architect, I've tackled countless

9
00:00:24,759 --> 00:00:26,259
security challenges in my career.

10
00:00:26,759 --> 00:00:29,379
And today I will be sharing some
of those experiences with you.

11
00:00:29,879 --> 00:00:31,159
So the agenda for today.

12
00:00:31,359 --> 00:00:34,779
First, we will discuss Terraform
and why I began researching

13
00:00:34,790 --> 00:00:36,339
its security application.

14
00:00:37,250 --> 00:00:40,450
Growing from my experience leading cloud
security strategy and vulnerability

15
00:00:40,450 --> 00:00:44,419
management in large enterprise
organizations, I will explain how critical

16
00:00:44,420 --> 00:00:48,990
it is to evaluate the risk of new tools
introduced into a production environment.

17
00:00:49,490 --> 00:00:53,130
Next, I will share the analysis we
conduct on Terraform providers modules

18
00:00:54,120 --> 00:00:55,610
and the key insights we uncover.

19
00:00:56,110 --> 00:00:59,110
After that, we will explore the
potential impact of this risk.

20
00:00:59,605 --> 00:01:01,285
and what they mean for your organization.

21
00:01:01,785 --> 00:01:06,035
Then I will walk you through two real
world attack flows that demonstrate

22
00:01:06,095 --> 00:01:09,224
how this risk could cause significant
damage to your organization.

23
00:01:09,724 --> 00:01:13,604
And finally, we'll wrap up by discussing
best practice and mitigation strategy

24
00:01:13,604 --> 00:01:17,564
to reduce and prevent these risks,
ensuring a more secure environment.

25
00:01:18,064 --> 00:01:23,564
So, as a security architect or
security engineer, your main goal is

26
00:01:23,694 --> 00:01:25,164
to ensure your organization is secure.

27
00:01:25,664 --> 00:01:28,244
To do that, you often need to
understand how the software or

28
00:01:28,284 --> 00:01:31,534
tool work in your environment to
spot the potential security gaps.

29
00:01:32,034 --> 00:01:34,754
In this case, the tool we
are looking at is Terraform.

30
00:01:35,254 --> 00:01:38,174
Terraform is a powerful tool that
allows DevOps or SRE to manage

31
00:01:38,174 --> 00:01:42,184
their cloud resources by code
or ISE, infrastructure as code.

32
00:01:42,684 --> 00:01:44,844
With great power comes
a great responsibility.

33
00:01:45,464 --> 00:01:48,794
So, to find the security
gaps in Terraform, I went

34
00:01:48,834 --> 00:01:49,874
and read the documentation.

35
00:01:50,194 --> 00:01:52,784
By the way, Ashikov did a great
job with the documentation.

36
00:01:53,284 --> 00:01:57,950
One section really caught my eye about the
malicious Terraform providers and modules.

37
00:01:57,950 --> 00:02:00,944
Terraform configuration
will have full access to the

38
00:02:00,964 --> 00:02:02,254
variable and Terraform state.

39
00:02:02,754 --> 00:02:06,544
Also, Terraform cannot prevent
malicious providers and modules

40
00:02:07,374 --> 00:02:09,514
from exfiltrating sensitive data.

41
00:02:10,014 --> 00:02:11,774
That raised a few questions for me.

42
00:02:12,394 --> 00:02:14,194
What is exactly Terraform providers?

43
00:02:14,234 --> 00:02:15,464
What is Terraform modules?

44
00:02:15,724 --> 00:02:17,404
And how can an attacker exploit this?

45
00:02:18,254 --> 00:02:20,034
Let's break down these questions.

46
00:02:20,035 --> 00:02:20,109
Thanks.

47
00:02:20,609 --> 00:02:23,669
Terraform is based on plug in called
providers to interact with cloud

48
00:02:23,669 --> 00:02:25,399
providers, SaaS providers, and other APIs.

49
00:02:25,899 --> 00:02:29,679
Each provider has a set of
resource types and data resources

50
00:02:29,929 --> 00:02:31,179
that Terraform can manage.

51
00:02:31,919 --> 00:02:35,009
It's important to mention, without
providers, Terraform cannot

52
00:02:35,039 --> 00:02:36,559
manage any kind of infrastructure.

53
00:02:37,059 --> 00:02:40,049
In other hand, modules is a
collection of TF files kept

54
00:02:40,049 --> 00:02:41,169
together in the same directory.

55
00:02:41,669 --> 00:02:44,259
Modules are the main way to
package and reuse resource

56
00:02:44,399 --> 00:02:45,579
configuration with Terraform.

57
00:02:46,079 --> 00:02:50,119
When a user creates or deploys a
resource to the cloud, what happens

58
00:02:50,119 --> 00:02:53,969
is the user will define the desired
resource he wants to create by

59
00:02:53,989 --> 00:02:56,179
creating a modules or a Terraform file.

60
00:02:56,679 --> 00:03:00,699
Once you execute the command Terraform
unit, Terraform will check which

61
00:03:00,709 --> 00:03:04,219
providers need to perform this action,
and will download it to the machine.

62
00:03:04,719 --> 00:03:08,089
Now, the user executes Terraform
plan, and after, apply.

63
00:03:08,429 --> 00:03:11,149
This is where the provider sends
the instruction to the cloud.

64
00:03:11,649 --> 00:03:15,749
From a tag surface perspective, Terraform
provides a rating in Go language program.

65
00:03:16,119 --> 00:03:20,169
The communication between Terraform core
and the Terraform provider is with RPC.

66
00:03:21,139 --> 00:03:24,349
And finally, the Terraform
providers communicate with the

67
00:03:24,349 --> 00:03:26,279
target cloud API using HTTPS.

68
00:03:26,779 --> 00:03:30,959
Terraform is built to make managing
cloud resources easy, but it

69
00:03:30,969 --> 00:03:32,209
doesn't mean it's bulletproof.

70
00:03:32,709 --> 00:03:35,819
And let's be honest, the attack surface
here is something we cannot ignore.

71
00:03:36,319 --> 00:03:39,399
Before we get into the potential
risks, it's important to note that

72
00:03:39,409 --> 00:03:42,469
HashiCorp managed providers in
modules into three different tiers.

73
00:03:43,164 --> 00:03:46,554
The official, provided on and
maintained by Ashicorp itself.

74
00:03:47,054 --> 00:03:51,794
Partners, provided modules on and
maintained by other company that

75
00:03:51,804 --> 00:03:53,154
has a partnership with Ashicorp.

76
00:03:53,654 --> 00:03:57,974
Community, provided modules published
and maintained by individual contributor.

77
00:03:58,474 --> 00:04:02,564
Ashicorp recommends to use provided
modules from the official or partner

78
00:04:02,644 --> 00:04:04,934
as they are more secure than others.

79
00:04:05,434 --> 00:04:09,314
All the reports are stored in
GitHub as a public repository.

80
00:04:09,609 --> 00:04:12,499
This makes it incredibly easy
for attackers to exploit the

81
00:04:12,519 --> 00:04:15,589
code and for vulnerabilities
and even take it a step further.

82
00:04:16,059 --> 00:04:19,299
Crafting a malicious pull
request that could sneak its way

83
00:04:19,309 --> 00:04:20,779
into the providers or modules.

84
00:04:21,279 --> 00:04:22,819
Think about it for one second.

85
00:04:23,439 --> 00:04:27,979
Open access to the code means
open access to new opportunities.

86
00:04:28,479 --> 00:04:31,949
Let's keep those tiers in our mind
because we will get back to it.

87
00:04:32,449 --> 00:04:34,169
Let's talk about the
analysis we performed.

88
00:04:34,569 --> 00:04:38,299
We closely tested 10 of the most
widely used providers modules across

89
00:04:38,299 --> 00:04:40,159
the three tiers I mentioned before.

90
00:04:40,659 --> 00:04:44,059
What we found was a critical
vulnerability exists across all tiers.

91
00:04:44,309 --> 00:04:47,329
However, community provider
had the highest number of open

92
00:04:47,329 --> 00:04:49,649
critical vulnerability, almost 60%.

93
00:04:50,149 --> 00:04:53,489
While community provider present
the most significant risk, the

94
00:04:53,489 --> 00:04:56,919
reality is that any type of provider
or module can introduce risk.

95
00:04:57,419 --> 00:05:01,439
We have 12 of critical vulnerability
related to the official and

96
00:05:01,489 --> 00:05:04,919
another 29 percent of critical
are part of the partners.

97
00:05:05,419 --> 00:05:08,589
Even if the risk is low, which
we'll explore later, it still

98
00:05:09,059 --> 00:05:10,509
creates a potential of attack back.

99
00:05:11,009 --> 00:05:15,739
So, does having more and non vulnerability
make you more or less secure?

100
00:05:16,239 --> 00:05:17,239
It's a tricky question.

101
00:05:17,679 --> 00:05:20,509
If you have a lot of vulnerability,
maybe it's because you are actively

102
00:05:20,809 --> 00:05:23,159
looking for them in order to fix them.

103
00:05:23,914 --> 00:05:28,514
But if you have very few, it's
because you're, secure or because

104
00:05:28,524 --> 00:05:30,194
maybe, you're not even checking.

105
00:05:30,694 --> 00:05:32,714
So, I have another question for you.

106
00:05:33,694 --> 00:05:35,414
Are you using Terraform in production?

107
00:05:35,914 --> 00:05:39,314
Do you actually know which
providers or modules you are using?

108
00:05:39,814 --> 00:05:44,294
And last, are you scanning those
providers or modules for vulnerabilities?

109
00:05:44,794 --> 00:05:46,964
Let's continue and see
why I ask those questions.

110
00:05:47,464 --> 00:05:51,034
Let's take a closer look at the
community providers specifically.

111
00:05:51,524 --> 00:05:53,834
They are one of the biggest
potential risk factors.

112
00:05:54,334 --> 00:05:57,534
To put it in perspective, the
downloads number are huge.

113
00:05:57,564 --> 00:06:01,684
In just one month, we are talking
about millions of downloads.

114
00:06:02,544 --> 00:06:04,134
Millions of downloads per month.

115
00:06:04,634 --> 00:06:08,134
Now thinking about this, every
single download could be introducing

116
00:06:08,144 --> 00:06:10,634
a vulnerability to production
environment around the world.

117
00:06:11,134 --> 00:06:12,834
And these aren't just the numbers.

118
00:06:12,904 --> 00:06:15,874
They represent real opportunity
for attackers to exploit

119
00:06:15,914 --> 00:06:17,414
insecure or malicious code.

120
00:06:17,914 --> 00:06:21,224
It's a powerful reminder of knowing what
you are pulling into your environment.

121
00:06:21,724 --> 00:06:22,954
So why is it so important?

122
00:06:23,854 --> 00:06:27,604
As we saw earlier, the millions of
downloads of each month, these providers

123
00:06:27,624 --> 00:06:29,934
modules become a goldmine for attackers.

124
00:06:30,434 --> 00:06:31,114
The problem?

125
00:06:31,454 --> 00:06:33,144
They are often left out of the loop.

126
00:06:33,524 --> 00:06:37,274
When it comes to the security, providers
models aren't typically scanned for

127
00:06:37,284 --> 00:06:40,604
vulnerability as part of the SDLC
or application security processes.

128
00:06:41,104 --> 00:06:46,314
And while IC scanners are great at
catching a misconfiguration, they

129
00:06:46,314 --> 00:06:49,704
don't dive deep into the vulnerability
scan for this third party component.

130
00:06:50,204 --> 00:06:54,584
And let's face it, remediating security
issues manually is nothing new.

131
00:06:54,844 --> 00:06:57,614
It's time consuming, expensive,
and far from efficient.

132
00:06:58,114 --> 00:07:01,024
We have already covered what
error proof providers modules

133
00:07:01,024 --> 00:07:04,934
are, and I've shared with you the
risk analysis we perform on them.

134
00:07:05,434 --> 00:07:07,204
Now it's time for the exciting part.

135
00:07:07,554 --> 00:07:10,414
I'm going to walk with you
through two attack flows.

136
00:07:10,774 --> 00:07:14,404
The first one is exploiting
non vulnerable provider that

137
00:07:14,414 --> 00:07:16,854
happened to me, in my career.

138
00:07:17,364 --> 00:07:20,354
Second one is using malicious
terraform modules that also

139
00:07:20,404 --> 00:07:21,464
happened to me in my career.

140
00:07:21,964 --> 00:07:25,704
So, let's dive into the first attack
flow, exploiting vulnerable provider.

141
00:07:26,204 --> 00:07:28,644
For this example, I'm
going to use CVE from 2021.

142
00:07:29,144 --> 00:07:32,714
It may be a bit old, but I
actually ran into this in

143
00:07:33,204 --> 00:07:34,884
production just two years ago.

144
00:07:35,384 --> 00:07:39,134
In this case, the Terraform Vault provider
had a vulnerability where it failed to

145
00:07:39,154 --> 00:07:44,474
properly configure GCE type bound labels
for Vault GCP authentication method.

146
00:07:44,974 --> 00:07:49,174
As a result, security policy meant
to bind resources to specific GCP

147
00:07:49,174 --> 00:07:53,604
labels were ignored, which opened
the door for unauthorized access to

148
00:07:53,604 --> 00:07:55,224
Vault managed secrets and services.

149
00:07:55,724 --> 00:07:58,344
Remember when we talk
about the different tiers?

150
00:07:58,614 --> 00:08:03,274
So, Vault is part of the official tiers,
which should be more secure than others.

151
00:08:03,664 --> 00:08:05,854
Yet this vulnerability slipped through.

152
00:08:06,354 --> 00:08:09,984
Now let's take a look a how an attacker
could explore this vulnerability

153
00:08:09,984 --> 00:08:11,334
to gain full access to the cloud.

154
00:08:11,834 --> 00:08:15,374
First, the attacker obtained the
JWT token, which read only access

155
00:08:15,944 --> 00:08:19,094
As we have seen in previous attacks
in the world, it's pretty common

156
00:08:19,094 --> 00:08:23,354
to find secret and tokens in public
repositories making this step easier.

157
00:08:24,354 --> 00:08:29,334
Next, the attacker identify that the user
has configured vault using Terraform.

158
00:08:29,834 --> 00:08:32,114
By the way, the user set
everything up correctly.

159
00:08:32,579 --> 00:08:36,119
From the code at the top, we can
see that the user has a defined

160
00:08:36,119 --> 00:08:39,829
bound service account, in this case
the admin role, with bound label.

161
00:08:40,329 --> 00:08:44,054
But when you run terminal type
command, The Vault provider mapped

162
00:08:44,054 --> 00:08:48,154
it incorrectly in the configuration,
leaving the bound label empty.

163
00:08:48,654 --> 00:08:51,784
At this point, all the attacker
has to do is to authenticate

164
00:08:51,914 --> 00:08:53,314
with Vault using the admin room.

165
00:08:53,664 --> 00:08:56,084
And surprisingly, it's going
to, it's going to work.

166
00:08:56,584 --> 00:09:01,974
From here, it can escalate privileges to
admin by using gcloud API to bypass the

167
00:09:01,974 --> 00:09:04,074
authentication and do whatever you want.

168
00:09:04,754 --> 00:09:09,264
Lateral movement, data exfiltration,
service disruption, you name it.

169
00:09:09,764 --> 00:09:13,124
And again, I'm sharing this case
because it's actually happened to me.

170
00:09:13,434 --> 00:09:18,074
We were lucky enough to cut it in and
no one tried to exploit it before us.

171
00:09:18,574 --> 00:09:22,304
But sometimes, attackers don't need to put
in much effort to exploit vulnerabilities.

172
00:09:22,804 --> 00:09:26,744
As you can see here, many times
the provider themselves exposed

173
00:09:26,744 --> 00:09:30,004
sensitive information, like
secret and token by mistake.

174
00:09:30,504 --> 00:09:34,644
The interesting part is that you won't
find any related CVE for those issues.

175
00:09:35,364 --> 00:09:38,554
However, if you dig into the
Terraform provider repository,

176
00:09:39,054 --> 00:09:40,524
you will find security issues.

177
00:09:41,074 --> 00:09:43,854
Some of them have been closed,
but others are still open.

178
00:09:44,354 --> 00:09:49,664
And many don't even have
a CV associated with them.

179
00:09:50,164 --> 00:09:53,414
This is just to emphasize how important
it is to perform code review before

180
00:09:53,414 --> 00:09:55,324
you use any providers or modules.

181
00:09:55,824 --> 00:09:58,704
Even if there is no CV, it
doesn't mean the code is secure.

182
00:09:59,204 --> 00:10:02,164
Now, let's move on to the second
example, malicious modules.

183
00:10:02,664 --> 00:10:04,274
An attacker creates a malicious module.

184
00:10:04,504 --> 00:10:08,124
When it's ready, the attacker has
plenty of options to convince, how to

185
00:10:08,124 --> 00:10:11,184
manipulate the user into installing the
malicious module from many resources,

186
00:10:11,944 --> 00:10:16,484
such as GitHub, Terraform Registry,
and S3 bucket, or even local path.

187
00:10:16,984 --> 00:10:20,354
In this example, I'm going to show
you a malicious module that creates

188
00:10:20,354 --> 00:10:24,494
an EC2 instance in AWS, but also
injects a backdoor using user data.

189
00:10:24,994 --> 00:10:27,374
Let's take a look at how, how that works.

190
00:10:28,094 --> 00:10:31,824
By the way, if you don't, if you're not
aware of the user data, user data is a

191
00:10:31,824 --> 00:10:37,000
script of configuration file that executes
automatically when the EC2 instance is

192
00:10:37,000 --> 00:10:41,894
launched, allowing you to perform initial
setup tasks, like installing software or

193
00:10:41,894 --> 00:10:44,304
configuring settings or even a backdoor.

194
00:10:44,804 --> 00:10:47,774
The attacker uses a social engineering
technique to convince the user

195
00:10:47,774 --> 00:10:49,654
to install the malicious modules.

196
00:10:50,154 --> 00:10:52,464
From the victim perspective,
the code looks legit.

197
00:10:52,704 --> 00:10:53,124
Nothing.

198
00:10:53,274 --> 00:10:57,084
Nothing seems, suspicious can expect
the, except the word malicious,

199
00:10:57,724 --> 00:10:59,464
which in reality would not be there.

200
00:10:59,964 --> 00:11:02,274
Once the victim execute the
Terraform, apply command.

201
00:11:02,424 --> 00:11:06,864
Terraform will not only create a C
two stances expected, but also deploy

202
00:11:06,864 --> 00:11:08,064
the back door for the attacker.

203
00:11:08,634 --> 00:11:08,994
Why?

204
00:11:09,054 --> 00:11:11,844
Because no one reviewed,
the modules before, use it.

205
00:11:12,784 --> 00:11:15,514
Now let's take a look at how
the malicious code looks like.

206
00:11:16,014 --> 00:11:19,074
As you can see, the Terraform malicious
module is actually quite simple.

207
00:11:19,344 --> 00:11:22,604
It's create an EC2 instance with
the user data scripts that is

208
00:11:22,634 --> 00:11:24,714
obviously using Base64 encoding.

209
00:11:25,294 --> 00:11:29,394
If we will decode the user data, in this
case, we will get the command line that

210
00:11:29,454 --> 00:11:31,184
initialize the backdoor for the attacker.

211
00:11:31,684 --> 00:11:35,064
In my career, I've been, I've
seen many DevOps teams use

212
00:11:35,074 --> 00:11:36,854
user data to run legit scripts.

213
00:11:37,024 --> 00:11:40,414
And they often use Base64 encoding
to make the code more compact.

214
00:11:40,914 --> 00:11:44,704
This will just, show how easy it is
for an attacker to create a malicious

215
00:11:44,704 --> 00:11:46,784
module that can bypass security.

216
00:11:47,284 --> 00:11:49,464
So, we have covered two attack scenarios.

217
00:11:49,924 --> 00:11:52,664
The first one involving a
vulnerable telephone provider.

218
00:11:52,984 --> 00:11:55,604
The second one involving
a malicious modus.

219
00:11:56,434 --> 00:12:00,274
Now, let's discuss how can we reduce
this risk by following best practices

220
00:12:00,514 --> 00:12:02,194
in implementing effective mitigation.

221
00:12:02,694 --> 00:12:07,234
So, for best practice, what you need
to do is to read the documentation

222
00:12:07,234 --> 00:12:08,944
and look for potential security gaps.

223
00:12:09,444 --> 00:12:12,994
Read the code carefully to identify any
code injection or other vulnerabilities.

224
00:12:13,864 --> 00:12:16,154
Check for feedback from other users.

225
00:12:16,164 --> 00:12:16,224
Thank you.

226
00:12:16,539 --> 00:12:20,889
It can provide valuable insight into any
issues or concerns with the repository.

227
00:12:21,389 --> 00:12:23,569
Keep scanning the repository
you use for vulnerability.

228
00:12:23,639 --> 00:12:26,529
Even if it's difficult to exploit
a vulnerability, it will help

229
00:12:26,529 --> 00:12:29,789
you understand how the repository
owner handles vulnerabilities.

230
00:12:30,289 --> 00:12:33,319
Pin the version of your providers
to avoid unexpected changes.

231
00:12:33,819 --> 00:12:37,029
Enable state locking to prevent
unauthorized user from modifying

232
00:12:37,029 --> 00:12:38,499
or manipulating your state file.

233
00:12:39,309 --> 00:12:42,269
This can cause a real
damage to our file version.

234
00:12:42,269 --> 00:12:46,499
Control the Terraform lock eight
CM file to keep track the or, to

235
00:12:46,499 --> 00:12:50,119
keep track of Terraform providers
version audit your Terraform plan

236
00:12:50,119 --> 00:12:53,509
and state file for misconfiguration
that could create a security risk.

237
00:12:54,369 --> 00:12:58,389
And last use IC security tool to
scan your configuration and fight

238
00:12:58,389 --> 00:13:00,159
potential security issues earlier.

239
00:13:00,659 --> 00:13:02,129
Now let's talk about the mitigation.

240
00:13:02,629 --> 00:13:05,419
You can implement control to reduce
the risk in your environment.

241
00:13:06,099 --> 00:13:10,069
You can use IAM role and policy to
limit access to your CI CD system

242
00:13:10,079 --> 00:13:13,179
and application logs, ensuring that
only authorized users have access.

243
00:13:13,679 --> 00:13:17,379
Use only temporary credentials to
minimize the risk of long lived

244
00:13:17,379 --> 00:13:19,289
credentials being compromised.

245
00:13:19,789 --> 00:13:25,049
Implement controls like VPC, load
balancer, and WAF to restrict access to,

246
00:13:25,149 --> 00:13:27,379
to only, to only known, communication.

247
00:13:27,879 --> 00:13:32,399
Leverage the CWPP or SUS to
detect any malicious communication

248
00:13:32,409 --> 00:13:33,219
with your environment.

249
00:13:33,719 --> 00:13:37,909
And last, set up CloudWatch alert
in AWS to monitor and detect

250
00:13:37,949 --> 00:13:40,909
any attempt to, to read or write
to your Terraform state file.

251
00:13:41,629 --> 00:13:44,889
This will help you to prevent unauthorized
modification of your state file.

252
00:13:45,389 --> 00:13:47,109
I hope this session
was insightful for you.

253
00:13:47,469 --> 00:13:50,329
Feel free to reach out
to me for any question.

254
00:13:51,019 --> 00:13:53,419
Enjoy the talks on Conference 42.

255
00:13:53,989 --> 00:13:54,419
Bye bye.

