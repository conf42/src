1
00:00:00,010 --> 00:00:00,790
Welcome everyone.

2
00:00:00,830 --> 00:00:01,600
I'm Ludovico.

3
00:00:01,620 --> 00:00:05,030
And today we're going to explore how
prompt engineering can enhance test

4
00:00:05,030 --> 00:00:08,420
automation by improving the accuracy,
speed, and overall reliability

5
00:00:08,420 --> 00:00:10,100
of AI driven quality assurance.

6
00:00:10,410 --> 00:00:12,530
But before starting,
let me introduce myself.

7
00:00:12,780 --> 00:00:14,330
I'm Ludovico, nice to meet you.

8
00:00:14,380 --> 00:00:17,849
I'm the senior test engineer
at NearForm, also SheTech

9
00:00:17,920 --> 00:00:19,600
ambassador and Grafana champion.

10
00:00:19,920 --> 00:00:23,090
As well, I co founded different
startups in the tech field.

11
00:00:23,530 --> 00:00:26,250
I like to contribute to open source
work, mainly in the educational field.

12
00:00:26,919 --> 00:00:30,730
And also have some passions like
cars, animals, and video games.

13
00:00:31,300 --> 00:00:36,820
But let's start to introduce my
company near form in quick words

14
00:00:36,870 --> 00:00:40,879
Near from is a company from ireland
that makes software and as well.

15
00:00:40,879 --> 00:00:45,220
We are really Love open source
contribution and doing open source as

16
00:00:45,220 --> 00:00:51,430
well And you can find right here in this
slide the numbers About ours contribution

17
00:00:51,450 --> 00:00:55,040
in the open source world If you're
interested to see more you can check the

18
00:00:55,040 --> 00:00:56,920
website and that's why we are hiring.

19
00:00:56,920 --> 00:01:00,010
So check this out You
let's start with the talk.

20
00:01:00,510 --> 00:01:04,750
this session will address critical
challenges in test automation.

21
00:01:04,900 --> 00:01:08,410
We will introduce some practical
techniques and show how Prompt

22
00:01:08,530 --> 00:01:09,429
Engineering can help you.

23
00:01:09,910 --> 00:01:15,260
Let's say increase your skills for
future proofing QA processes with AI.

24
00:01:15,690 --> 00:01:21,500
So let me Say why I bring you this
talk because we want to solve real QA

25
00:01:21,500 --> 00:01:27,110
challenges that we have in the QA world
Gain, maybe some practical skills and

26
00:01:27,110 --> 00:01:33,310
also hands on skills to check if this
prompt engineering can solve the our

27
00:01:33,310 --> 00:01:39,260
problems And also stay ahead with the
high driven qa trends that are going on

28
00:01:39,260 --> 00:01:42,130
right there So what is prompt engineering?

29
00:01:42,250 --> 00:01:46,930
I created a simple quick definition
of it And for me is designing precise

30
00:01:46,930 --> 00:01:51,650
contextual inputs to guide AI models
towards specific outputs but in other

31
00:01:51,660 --> 00:01:56,140
words We can say that is the art and
science of creating the right inputs so

32
00:01:56,140 --> 00:02:02,020
that the model responses aligns closely
with your goals But what is the context?

33
00:02:02,475 --> 00:02:07,085
between a prompt engineering and QA
in the context of quality assurance.

34
00:02:07,105 --> 00:02:10,695
Prompt engineering is particularly
valuable because it allows us to

35
00:02:10,695 --> 00:02:15,595
create test cases, simulate real
world user actions, various, let's

36
00:02:15,595 --> 00:02:17,204
say handle various edge cases.

37
00:02:17,760 --> 00:02:22,450
And also validate some outputs
produced by the model itself.

38
00:02:22,540 --> 00:02:28,010
this is essential to ensuring that AI
driven products are available and perform

39
00:02:28,099 --> 00:02:30,229
as expected in different scenarios.

40
00:02:30,729 --> 00:02:36,989
And, before starting, let's see,
let's see what we need to clarify.

41
00:02:37,554 --> 00:02:42,084
because, I think that success in
this case for prompt engineering

42
00:02:42,134 --> 00:02:44,284
can be something like this.

43
00:02:44,464 --> 00:02:49,074
So we need to define, as you
can see, miserable outcomes

44
00:02:49,114 --> 00:02:50,954
that aligns with your use case.

45
00:02:51,274 --> 00:02:57,185
Ask yourself what is a successful,
successful response for the AI model

46
00:02:57,185 --> 00:02:58,969
should look like in your specific context.

47
00:02:59,250 --> 00:03:04,350
And as well, this can be accuracy,
relevance, clarity, and any

48
00:03:04,350 --> 00:03:09,600
kinds of, formal output that is
essential for you and for your case.

49
00:03:10,030 --> 00:03:14,830
as well, the evaluation method, because,
with the success criteria in place,

50
00:03:15,220 --> 00:03:19,620
you can set up evaluation methods to
measure how well your prompt performs.

51
00:03:19,940 --> 00:03:24,390
Are performing because for example,
if you start writing down In a

52
00:03:24,390 --> 00:03:29,290
plain text what are the outputs that
you want to have for a test case?

53
00:03:29,300 --> 00:03:34,700
For example, I want to create the task for
a button and I want that the output of my

54
00:03:34,700 --> 00:03:38,010
prompt Will be that particular test cases.

55
00:03:38,060 --> 00:03:44,040
I can write that down and this involves
a testing prompt Because you have let's

56
00:03:44,040 --> 00:03:48,240
say an outcome writing down and you
can test if the prompts that you are

57
00:03:48,240 --> 00:03:54,030
using Are giving you the right output
that you let's say ticket before so

58
00:03:54,040 --> 00:03:59,110
it's important to track performance
Over the time because this will improve

59
00:03:59,290 --> 00:04:04,030
it directly the expectations and the
performance of the prompt itself.

60
00:04:04,920 --> 00:04:11,080
As well, the last point that I've written
down that you need to do for reaching

61
00:04:11,090 --> 00:04:19,610
the goal and is to start simple with the
first draft prompt and refine that through

62
00:04:19,610 --> 00:04:25,350
different many iterations because your
initial prompt doesn't have, let's say, to

63
00:04:25,350 --> 00:04:32,465
be perfect because, you can think, at this
point, with this prompt as a baseline that

64
00:04:32,495 --> 00:04:38,275
you can use to improve upon in the time,
because you need to begin with some kinds

65
00:04:38,275 --> 00:04:45,415
of idea and, maybe you want to, know that,
that idea is something that, that the,

66
00:04:45,465 --> 00:04:47,635
the eye that you are using can accomplish.

67
00:04:48,015 --> 00:04:53,885
And as you go, during the time, you can
use that, to, let's say, reach your goal.

68
00:04:54,255 --> 00:04:58,675
as well, you can use many different
tools if you have, problems

69
00:04:58,755 --> 00:05:00,535
during structuring the prompt.

70
00:05:00,875 --> 00:05:04,265
like the Antropic console
that you can find online.

71
00:05:04,575 --> 00:05:09,175
I know that Antropic, if you
search on it, does have a prompt

72
00:05:09,175 --> 00:05:10,675
generator that you can use.

73
00:05:11,010 --> 00:05:16,540
so if you have some struggles during the
prompt, iteration, improving performance,

74
00:05:16,540 --> 00:05:21,360
you can use as well, different tools
like this one, that maybe, can help

75
00:05:21,360 --> 00:05:27,120
you generate and improve, better the
prompts that will align with your needs.

76
00:05:27,700 --> 00:05:34,050
So moving on, we have this, we
have this, engineering workflow.

77
00:05:34,635 --> 00:05:38,415
That is a screenshot from
Anthropic Documentation.

78
00:05:38,475 --> 00:05:43,575
As you can see, we have this flow
that is a step by step workflow

79
00:05:43,865 --> 00:05:47,125
for prompt engineering, for the
effective prompt engineering.

80
00:05:47,125 --> 00:05:50,685
And we can see that we start with the
developed test cases because we need

81
00:05:50,685 --> 00:05:55,965
to start, as we heard before by me,
defining some test cases that can,

82
00:05:56,165 --> 00:06:00,795
let's say, cover different variety of
scenarios, and different typical cases.

83
00:06:01,635 --> 00:06:05,125
Moving to the, let's say
engineer primarily prompt.

84
00:06:05,155 --> 00:06:11,355
So with the test cases in mind, we can
create an initial version of our prompts.

85
00:06:11,705 --> 00:06:16,625
and this will guide us to, towards
the, desired outputs that we want.

86
00:06:17,000 --> 00:06:25,150
To have, this move to the test process
where we actually test the prompt against

87
00:06:25,150 --> 00:06:31,815
we, against our test cases to see, how
well it performs and as well to evaluate

88
00:06:31,815 --> 00:06:36,620
the model's responses for each of the
scenarios that we have tinkered and

89
00:06:36,620 --> 00:06:39,025
notes where the improvements are needed.

90
00:06:39,025 --> 00:06:45,415
So after that, we have executed our, word
prompts, we can write down every single

91
00:06:45,655 --> 00:06:51,365
outputs and see where we can improve that
outputs and we move to refine prompt.

92
00:06:51,465 --> 00:06:56,625
So based on that results, we can refine
our prompt to address any possible

93
00:06:56,675 --> 00:06:58,595
issues found during the testing.

94
00:06:59,005 --> 00:07:03,305
And this can be something like
rephrasing, adding more context or

95
00:07:03,305 --> 00:07:08,765
just adjusting instructions to make
the prompt more effectively effective.

96
00:07:09,375 --> 00:07:13,915
And the last point here is to
share polished prompt because once

97
00:07:14,305 --> 00:07:18,565
let's say the prompt consistently
produce the desired outcome.

98
00:07:18,565 --> 00:07:23,565
So we are, let's say, good to go across
all the test cases that we are thinking.

99
00:07:24,250 --> 00:07:25,300
it's ready to be shared.

100
00:07:25,310 --> 00:07:29,790
So we are confident that our prompt is
performing good and we can share the

101
00:07:29,810 --> 00:07:31,980
prompt with the other team members.

102
00:07:32,310 --> 00:07:35,840
So they can say, Hey, okay,
this prompt is working fine.

103
00:07:36,040 --> 00:07:38,280
And they have the, the
thing that they need.

104
00:07:38,550 --> 00:07:45,280
the final, let's say, polished prompt
that we have is, The relevant version that

105
00:07:45,300 --> 00:07:51,010
we have in production and, this, let's
say is the, the goal of this process.

106
00:07:51,740 --> 00:07:56,350
also what we can say about this,
that is this cycle of testing and

107
00:07:56,350 --> 00:07:58,866
refining, is also called, evils.

108
00:07:58,866 --> 00:08:02,833
And it's crucial for me
and for also Anthropic.

109
00:08:03,403 --> 00:08:09,073
To achieve a dyke level of accuracy and
reliability in the AI responses, because

110
00:08:09,103 --> 00:08:14,353
if we talk with the AI and every time
we need to create a prompt from zero,

111
00:08:14,573 --> 00:08:20,103
so from scratch, the result will not be
something that is quality like, because

112
00:08:20,153 --> 00:08:25,288
every time that we let's say, start
executing a new prompt, we don't have

113
00:08:25,368 --> 00:08:29,048
the, let's say, trust of the outcomes.

114
00:08:29,048 --> 00:08:32,318
And this is, this can be
really a pain during the time.

115
00:08:32,728 --> 00:08:36,238
So really keep in mind this
process and start doing like that.

116
00:08:36,738 --> 00:08:41,678
so now I'm giving you some examples
that I've creating to, show you

117
00:08:41,678 --> 00:08:44,378
what a good prompt should be like.

118
00:08:44,838 --> 00:08:48,228
this is a simple prompt that
I'm creating and, as you can

119
00:08:48,228 --> 00:08:50,128
read, I giving the context.

120
00:08:50,178 --> 00:08:55,158
the, I will start acting like a test
engineers with 10 years of experience.

121
00:08:55,498 --> 00:08:57,328
after that, I will say.

122
00:08:57,613 --> 00:09:02,953
that I will give in the input some
screens and after the screens, will

123
00:09:02,963 --> 00:09:07,803
be given to the prompt, it will output
all the test cases in the given one,

124
00:09:07,803 --> 00:09:10,253
then format in both Excel files.

125
00:09:10,698 --> 00:09:15,228
And in the, chat, so you will
see in a bit what is the result.

126
00:09:15,228 --> 00:09:19,488
This is the input that I've,
inserted inside the prompt.

127
00:09:19,498 --> 00:09:21,238
This is just a simple website.

128
00:09:21,238 --> 00:09:22,828
It's just an e commerce one.

129
00:09:23,098 --> 00:09:24,858
And you can see now the output.

130
00:09:24,868 --> 00:09:30,658
So you have a table with plenty
of test cases formatted in

131
00:09:30,658 --> 00:09:32,438
the way that I defined it.

132
00:09:32,738 --> 00:09:37,698
And you can see on the right, The
file, the Excel files, and as well

133
00:09:37,918 --> 00:09:40,068
the link to download, the file.

134
00:09:40,758 --> 00:09:46,398
So this is just, it's just a quick
example, and we can move to the challenges

135
00:09:46,728 --> 00:09:49,178
in the traditional test automation field.

136
00:09:49,188 --> 00:09:55,538
Because we can see that during the,
the time, the test automation world

137
00:09:55,708 --> 00:09:57,838
have encountered different problems.

138
00:09:58,183 --> 00:10:04,103
Because, traditional test automation
faces multiple challenges in real life.

139
00:10:04,453 --> 00:10:09,453
From adaptability issues to
high manual effort to maintain,

140
00:10:09,503 --> 00:10:11,763
stability in the CICD pipelines.

141
00:10:12,083 --> 00:10:16,913
I think that prompt engineering can
help address these challenges, by

142
00:10:16,913 --> 00:10:21,333
enabling, more adaptive test cases and
also increasing the speed of testing.

143
00:10:21,663 --> 00:10:23,573
Of the, fixes as well.

144
00:10:24,073 --> 00:10:30,413
And here we are with some key techniques
that we can use, in prompt engineering,

145
00:10:30,633 --> 00:10:34,963
each of these techniques from zero
shot, few shot and chain of thought

146
00:10:34,983 --> 00:10:39,913
prompting are essentials for creating
precise and adaptable responsive.

147
00:10:40,298 --> 00:10:46,268
In responses in a different testing
scenarios and moving on beyond manual

148
00:10:46,328 --> 00:10:51,558
prompt engineering is because, while
manual prompt engineering relies

149
00:10:51,598 --> 00:10:58,228
on trial and error frameworks like
DSP, why allow us to, let's say,

150
00:10:58,478 --> 00:11:00,648
structure the prompts like code.

151
00:11:00,978 --> 00:11:03,768
So we don't have, let's
say the prompt that we.

152
00:11:04,068 --> 00:11:09,128
right with simple plain text,
we can actually use this DSPY

153
00:11:09,138 --> 00:11:12,108
framework to code the prompt, right?

154
00:11:12,498 --> 00:11:18,808
And so we can achieve more data driven
results and we get as well an output that

155
00:11:18,838 --> 00:11:21,198
is much way better than the single prompt.

156
00:11:21,348 --> 00:11:25,878
So manual prompt can be a starting
point, but maybe in the future,

157
00:11:26,668 --> 00:11:29,408
give it a try to the DSPY framework.

158
00:11:29,908 --> 00:11:33,418
How can we efficiently manage and
track the performance of different

159
00:11:33,428 --> 00:11:35,698
prompts in a dynamic QA environment?

160
00:11:35,708 --> 00:11:40,298
This is a question that, different
people asked me and I answered

161
00:11:40,298 --> 00:11:42,048
it with this prompt layer.

162
00:11:42,098 --> 00:11:47,138
Prompt layer is a tool that, That,
allows you to create and manage different

163
00:11:47,148 --> 00:11:49,678
prompt versions in one platform easily.

164
00:11:50,138 --> 00:11:53,728
And you can track, you can track
different versions of the prompt.

165
00:11:53,898 --> 00:11:58,118
You can log and analyze how
the prompt is actually, going,

166
00:11:58,148 --> 00:11:59,588
if it's going good or not.

167
00:11:59,688 --> 00:12:04,078
So you can track the effectiveness
to see which of the different prompts

168
00:12:04,118 --> 00:12:06,398
performs better during the time.

169
00:12:06,458 --> 00:12:11,783
And this is, I think, a really good
A way to, let's say, iteratively,

170
00:12:11,883 --> 00:12:15,513
upgrade and improve the prompts
with a platform like this.

171
00:12:15,543 --> 00:12:23,063
Because for the qa, for example, we
can, use these to identify what are the

172
00:12:23,483 --> 00:12:28,548
prompts that are performing good and
quickly applied updates, for the cases

173
00:12:28,548 --> 00:12:32,848
that we have, written before using the,
flow that they presented you before.

174
00:12:33,348 --> 00:12:35,658
This is some screens about prompt layer.

175
00:12:35,658 --> 00:12:38,508
As you can see, it's
a simple PLA platform.

176
00:12:38,508 --> 00:12:42,988
You can have different, features
like create the prompt template,

177
00:12:43,198 --> 00:12:46,918
log the request, blah, blah, blah,
and use as well the templates.

178
00:12:47,778 --> 00:12:52,098
And this is the editor that you can
use to write actually the prompt

179
00:12:52,158 --> 00:12:56,178
and to check, after that if the,
the prompt is performing good.

180
00:12:56,678 --> 00:12:59,288
right now I'm giving you
some advice that I use.

181
00:12:59,698 --> 00:13:04,808
So for my side, I build actually a
custom GPT for each of the project

182
00:13:04,848 --> 00:13:06,438
where I'm working on, because.

183
00:13:06,748 --> 00:13:11,988
I think that right now, custom GPT
is the much, let's say much easy

184
00:13:11,988 --> 00:13:16,328
way to create something that really
can help you out with your work.

185
00:13:17,098 --> 00:13:18,488
Let me dig it out for you.

186
00:13:18,548 --> 00:13:19,888
What is a custom GPT?

187
00:13:20,128 --> 00:13:24,108
So chat GPT itself, if you pay
the plan, you get the plan.

188
00:13:24,478 --> 00:13:30,058
Can allows you to create this custom
GPT that are actually some chatbots

189
00:13:30,318 --> 00:13:36,638
that you can Customize by inserting
the instructions that the chatbot Will

190
00:13:36,878 --> 00:13:41,503
execute for you and also you can give
the instructions and the data That

191
00:13:41,543 --> 00:13:46,623
you can, give to the chatbot and we
will use them, for, generating the

192
00:13:46,623 --> 00:13:49,053
outputs better, based off the data.

193
00:13:49,293 --> 00:13:53,653
using the user story, take, sorry, taking
the user story, taking the technical

194
00:13:53,653 --> 00:13:58,888
details, and the screens of a project
and building a custom GPT for that

195
00:13:59,178 --> 00:14:05,148
will increase the chance to get outputs
better, in the context of your project.

196
00:14:05,148 --> 00:14:06,688
So please give it a try.

197
00:14:06,968 --> 00:14:10,748
And I think in this case, as well
as you can read in the second

198
00:14:10,748 --> 00:14:14,818
line, you will have for each of the
prompt that we will create, maybe

199
00:14:14,818 --> 00:14:16,898
using prompt layer or other tools.

200
00:14:17,718 --> 00:14:24,168
Let's say more project specific for you,
so you will have better outputs as well.

201
00:14:24,278 --> 00:14:28,978
Another thing that they really, let's say
having the value to use is to create some

202
00:14:28,978 --> 00:14:32,958
documentations, chatbots with custom GPT.

203
00:14:33,298 --> 00:14:38,908
So for each tool, like maestro
playwrights or anything else, the

204
00:14:38,908 --> 00:14:44,638
thing that I'm doing is to create a
chatbots that takes the markdown pages.

205
00:14:45,023 --> 00:14:47,683
of each website documentation.

206
00:14:47,823 --> 00:14:52,963
And after that, let's say I have
a powerful, chatbot that knows

207
00:14:53,033 --> 00:14:57,923
everything about single tool and,
can answer my questions based on

208
00:14:57,923 --> 00:15:00,003
the latest versions of the tools.

209
00:15:00,003 --> 00:15:04,603
Because, sometimes when you ask
ChatGPT for some questions, It will

210
00:15:04,623 --> 00:15:10,073
gives you the, let's say, unupdated
code and, versions about, the tools

211
00:15:10,073 --> 00:15:11,763
that you are using and asking for.

212
00:15:11,903 --> 00:15:17,123
So I think using this approach can
leverage the code that's actually being

213
00:15:17,123 --> 00:15:19,693
generated by, chatGPT in this case.

214
00:15:20,668 --> 00:15:21,978
And this is an example.

215
00:15:22,058 --> 00:15:27,858
So I just take the maestro for you
and you can see that I'm giving some

216
00:15:27,858 --> 00:15:32,038
instructions, for example, to answer
questions about maestro and generate

217
00:15:32,038 --> 00:15:35,588
code based on the provided official
documentation that I'm giving.

218
00:15:36,028 --> 00:15:37,718
To, ChatGPT with this upload.

219
00:15:37,858 --> 00:15:43,428
So I take it every single page from the
Maestro, Official documentation, put it

220
00:15:43,428 --> 00:15:45,778
in this chatbot and actually it works.

221
00:15:45,918 --> 00:15:50,248
So the outputs that I, let's say
receiving from this chatbot, are much

222
00:15:50,248 --> 00:15:56,608
way better than the single outputs that
I will have when trying to prompt inside

223
00:15:56,868 --> 00:15:59,488
a single official page of ChatGPT.

224
00:15:59,778 --> 00:16:03,668
So this is something that you can try
and, Check if it's working for you.

225
00:16:04,578 --> 00:16:11,438
And also another topic is this the
agents because if for example For

226
00:16:11,438 --> 00:16:16,508
the prompts you will have let's
say a static result with agents.

227
00:16:16,528 --> 00:16:23,203
You will have much more dynamic
Interaction because agents Can pull real

228
00:16:23,223 --> 00:16:28,723
data from the outside, interacts with
APIs and adapt, in different contexts

229
00:16:28,783 --> 00:16:31,343
and making the responses more precise.

230
00:16:31,533 --> 00:16:35,673
we don't have the time to check and
see some agents, but they know that

231
00:16:35,674 --> 00:16:40,633
there are some agents in the world
that are starting, let's say, relying

232
00:16:40,663 --> 00:16:42,583
on the software testing field as well.

233
00:16:42,753 --> 00:16:47,443
So check this out, please, because it's
something that can improve as well your

234
00:16:47,463 --> 00:16:49,753
outputs if you need something like that.

235
00:16:50,253 --> 00:16:54,543
Also, let's move to the understanding
knowledge memory, topic because,

236
00:16:54,593 --> 00:16:59,903
knowledge memory, as the first that we
have seen, in the chat GPT with custom

237
00:16:59,903 --> 00:17:07,113
GPT, when we are passing actually the,
markdown files enables you, to let the

238
00:17:07,113 --> 00:17:09,613
eye remember the past interactions.

239
00:17:09,613 --> 00:17:12,053
So previous prompts, previous outcomes.

240
00:17:12,403 --> 00:17:17,063
as well, previous data that you have
passed inside the chat that is really

241
00:17:17,063 --> 00:17:22,713
beneficial for your test that you have,
let's say, in mind to, reach, for,

242
00:17:22,713 --> 00:17:27,583
involving sequential possible actions
or complex workflow, for your AI.

243
00:17:27,593 --> 00:17:31,704
So knowledge memory is really
important because, this can improve,

244
00:17:32,194 --> 00:17:35,734
as we told before, iteratively
the outcome of the prompts.

245
00:17:36,724 --> 00:17:41,053
And as well, we define the
word prompt tuning that you

246
00:17:41,054 --> 00:17:43,104
can hear in the future, maybe.

247
00:17:43,554 --> 00:17:47,494
That is something that
optimizes the prompt itself.

248
00:17:47,674 --> 00:17:49,324
not the model, okay?

249
00:17:49,444 --> 00:17:50,224
Just the prompt.

250
00:17:50,254 --> 00:17:53,594
Because we can't improve
the model by ourselves.

251
00:17:53,904 --> 00:18:00,694
The model has some, let's say, rules
and some formulas that are behind that.

252
00:18:00,734 --> 00:18:00,764
Okay?

253
00:18:01,089 --> 00:18:05,449
So we can't improve the model, but we
can actually prompt tuning the prompt.

254
00:18:05,769 --> 00:18:10,789
So the technique, this technique is
really useful, when we, let's say, want

255
00:18:10,789 --> 00:18:16,609
to expand our detailed test cases, or
we want to also evolve the test cases

256
00:18:16,619 --> 00:18:20,289
that we are using for checking if the
prompts are actually working fine.

257
00:18:20,789 --> 00:18:25,269
And, yes, these are for me the
best prompting techniques that

258
00:18:25,269 --> 00:18:28,929
you can use, the few shots, the
chain of thought and the react.

259
00:18:29,239 --> 00:18:34,359
So a few shot, let's say, as you can
read, use example for nuisance task,

260
00:18:34,979 --> 00:18:39,819
a chain of thought, helps AI expanding
its reasoning and react dynamic

261
00:18:39,819 --> 00:18:42,439
responses based on observations.

262
00:18:42,939 --> 00:18:48,439
right now we are moving to these four
phases that I've prepared for you,

263
00:18:48,889 --> 00:18:51,889
for me, it's like going to the design.

264
00:18:51,889 --> 00:18:57,749
So when we in QA, word, start writing
down the test cases, starting thinking

265
00:18:57,749 --> 00:19:02,469
all scenarios, start thinking if,
the things that we are, wanted to

266
00:19:02,469 --> 00:19:05,349
do during the user story creation.

267
00:19:05,779 --> 00:19:08,169
Actually are missing something.

268
00:19:08,409 --> 00:19:13,909
So with all of these phases, let's
say I'm reaching you The possible

269
00:19:14,019 --> 00:19:18,829
way to use prompt engineering to help
you out if you are test engineer in a

270
00:19:18,839 --> 00:19:24,069
real world scenarios So starting from
the design phases prompt Engineering

271
00:19:24,069 --> 00:19:28,889
is possibly used to score the
automatability on, the test of the

272
00:19:28,889 --> 00:19:31,499
test cases that we want to, implement.

273
00:19:31,649 --> 00:19:35,179
So if you have, list of possible
test cases that you want to do,

274
00:19:35,329 --> 00:19:40,789
maybe you can ask with the prompt
they are to check what are the, mail

275
00:19:40,879 --> 00:19:42,569
test cases that you need to start.

276
00:19:42,779 --> 00:19:43,329
Automate.

277
00:19:43,779 --> 00:19:49,089
And this can be also done better
if you use a custom GPT like the

278
00:19:49,089 --> 00:19:50,579
one that I showed you before.

279
00:19:50,819 --> 00:19:54,019
one, the one that have the
context of the project as well.

280
00:19:54,249 --> 00:19:59,019
this really can help you out if you
have some troubles and you can't really

281
00:19:59,019 --> 00:20:05,809
know if some test cases can, let's say,
automated Before someone else as well.

282
00:20:05,939 --> 00:20:11,249
Another one is to generate diverse,
diverse user personas because, I

283
00:20:11,249 --> 00:20:15,689
think, having in mind that, a possible
user that will use your website

284
00:20:16,379 --> 00:20:19,369
can be, let's say a normal one.

285
00:20:19,659 --> 00:20:26,569
so maybe using, the, hands, not both
hands, but maybe just using one hands.

286
00:20:26,989 --> 00:20:34,259
So I think, having different user personas
can be, useful when you need to create

287
00:20:34,329 --> 00:20:40,379
a more inclusive and comprehensive,
test cases for your, test plan as well.

288
00:20:41,119 --> 00:20:45,479
So if we can move to the implementation
phase, when we actually want to

289
00:20:45,529 --> 00:20:48,149
implement our, code, our test.

290
00:20:48,614 --> 00:20:52,894
We can say that during implementation,
prompt engineering aids in

291
00:20:52,894 --> 00:20:57,584
identifying UI elements and generating
diverse test data dynamically.

292
00:20:57,714 --> 00:21:02,384
Because, as you can see, we have the
xpath name suggester that is Something

293
00:21:02,384 --> 00:21:07,834
that I've tried on, you can pass some
images with some rules for each part

294
00:21:07,914 --> 00:21:11,734
and you will, it will tell you the
name that you need to use for each of

295
00:21:11,774 --> 00:21:13,854
the possible, components in the page.

296
00:21:14,094 --> 00:21:15,664
A data driven test generator.

297
00:21:16,464 --> 00:21:20,274
that can help you out, maybe
with the data to generate

298
00:21:20,274 --> 00:21:22,323
diverse, test data dynamically.

299
00:21:22,333 --> 00:21:25,563
So not talking about the test
itself, but the test data.

300
00:21:25,563 --> 00:21:30,653
So maybe, the possible configuration
of the users, the possible ways,

301
00:21:30,723 --> 00:21:34,643
of a user that can use your, your,
your software, something like this.

302
00:21:34,983 --> 00:21:39,283
And also automated code generation,
because some tools like autoplay write,

303
00:21:39,293 --> 00:21:44,573
can actually generate, code inside
Playwright based on some prompts.

304
00:21:44,613 --> 00:21:47,283
So if you use this
keyword driven approach.

305
00:21:47,638 --> 00:21:51,188
It will start, let's say,
replacing the code itself.

306
00:21:51,378 --> 00:21:57,978
this, actually, if you use the tools
like chatgpt before, can, let's say,

307
00:21:58,078 --> 00:22:03,253
allows you to implement also the test
automation, Faster, instead of doing

308
00:22:03,253 --> 00:22:09,663
it with only code and reporting phase,
because, this is really important

309
00:22:09,773 --> 00:22:15,753
one, because, in the reporting phases,
prompts help you detect maybe a recooling

310
00:22:15,773 --> 00:22:22,738
failure, because if you can pass the
logs and also the, let's say, the reports

311
00:22:22,968 --> 00:22:26,838
that are made by the frameworks that
you can use like PreWrite on Node RES.

312
00:22:27,728 --> 00:22:32,368
Maybe you will can, you can, let's
say, prioritize some issues that

313
00:22:32,368 --> 00:22:37,368
you have, ask, promise you to,
fix something before, another one.

314
00:22:37,748 --> 00:22:41,328
And so this maybe will make it
easier for you to focus on that.

315
00:22:41,588 --> 00:22:46,568
more on the critical areas for remediation
instead of checking it manually.

316
00:22:46,798 --> 00:22:53,078
Also, maybe, as you can see, creating some
kinds of strategy behind this failure.

317
00:22:53,128 --> 00:22:57,638
creating some, let's say, fixing
practices based on risk, based on

318
00:22:57,648 --> 00:23:00,248
the issues that we are going on.

319
00:23:01,238 --> 00:23:05,298
And the last one is the reading
reports phase because, in this case,

320
00:23:05,798 --> 00:23:10,308
I can translate the test results
into some accessible summaries

321
00:23:10,618 --> 00:23:11,908
for those that are not technical.

322
00:23:12,708 --> 00:23:16,348
And this is, I think, is a really great
feature because if you take something

323
00:23:16,348 --> 00:23:20,988
that is really technical, It is really
techy, and you can translate this in

324
00:23:21,198 --> 00:23:27,218
really seconds, to let some other one
in the team, like the stakeholders, read

325
00:23:27,238 --> 00:23:32,048
what you have done, what are the reports,
what are the data that maybe you can't

326
00:23:32,048 --> 00:23:34,368
understand with the initial report.

327
00:23:34,398 --> 00:23:35,478
This can really help.

328
00:23:36,268 --> 00:23:40,838
help you out, assess the possible
impact that the tests, are, are

329
00:23:40,888 --> 00:23:44,288
making also in the, in your team.

330
00:23:44,428 --> 00:23:49,478
And this maybe can guide also
the QA focus of the team.

331
00:23:49,978 --> 00:23:56,343
As well, the last thing is to, suggest
focus on the testing focus for the new

332
00:23:56,353 --> 00:24:02,893
features, because if we have all of this
data stored in a place and we can remember

333
00:24:02,993 --> 00:24:09,563
this with the memory that we have seen
before, this can also guide ourselves

334
00:24:09,843 --> 00:24:14,563
to, improve the strategy behind creating
a new feature, because actually when you

335
00:24:14,563 --> 00:24:18,833
have collected all of this information
and we want to, let's say, start and

336
00:24:18,833 --> 00:24:24,008
create a new feature, Another feature
we can ask the eye with all of this data

337
00:24:24,058 --> 00:24:29,188
if It's a good one or it's a not good
one because we have the data to think if

338
00:24:29,248 --> 00:24:35,368
that feature Maybe can address some the
issues that we have found And yes, some

339
00:24:35,368 --> 00:24:41,003
three takeaways from this talk I think
prompt engineering transforms QA, as

340
00:24:41,003 --> 00:24:47,203
you can see, and I think you will try to
have a chance to create something like

341
00:24:47,203 --> 00:24:51,153
the things that I've shown you before,
maybe the custom GPT, maybe trying some

342
00:24:51,183 --> 00:24:56,213
out, trying out some prompts or prompt
layer, because I think, for my opinion,

343
00:24:56,463 --> 00:25:01,093
prompt engineering really can help you
out doing your job, also if you are a QA.

344
00:25:02,058 --> 00:25:06,408
The effective tools and techniques as it
exists, like the Anthropic that we have

345
00:25:06,408 --> 00:25:09,858
seen before and also the prompt layer.

346
00:25:09,908 --> 00:25:13,178
But, really in the web
world, many tools exist.

347
00:25:13,428 --> 00:25:17,688
Maybe you can start by yourself
using the chat GPT prompts.

348
00:25:17,758 --> 00:25:22,878
And after that, improving, maybe
using some auto prompting strategy.

349
00:25:23,228 --> 00:25:28,268
so this is let's say a way to, how
to insert prompts inside the eye

350
00:25:28,328 --> 00:25:32,418
to iterate automatically, until
we get the output that we need.

351
00:25:32,918 --> 00:25:38,848
Or as well using maybe an agent that
is a let's say next step For does not

352
00:25:38,928 --> 00:25:43,778
have so many skills in this field But
you can for sure start with the chat

353
00:25:43,778 --> 00:25:48,618
gpt tools or prompt layer ones And
also the last thing that I want to say

354
00:25:48,858 --> 00:25:54,038
that you need to remember is that these
things are really cost efficiency for

355
00:25:54,038 --> 00:25:59,208
the qa processes because Think that,
there are in the world a lot of persons

356
00:25:59,258 --> 00:26:02,108
that are thinking test cases every day.

357
00:26:02,318 --> 00:26:07,718
So with these kinds of technologies,
we can, let's say, bypass having a

358
00:26:07,718 --> 00:26:13,348
lot of tip, a lot of people that are
working in these test cases writing.

359
00:26:13,458 --> 00:26:20,118
And let's say, focus ourselves more on
automate things and, check if the software

360
00:26:20,288 --> 00:26:23,938
is good or not manually or automated way.

361
00:26:24,233 --> 00:26:27,623
I think these are the three main
points that I want to, remember.

362
00:26:28,123 --> 00:26:32,423
experiment with the promise engineering
in your testing workflow, and also,

363
00:26:33,023 --> 00:26:38,013
start small and iterate, because if
you want to do this at once, you will,

364
00:26:38,353 --> 00:26:43,783
fail, because it's not something that
you can accomplish, in an easy manner.

365
00:26:44,253 --> 00:26:44,883
Thank you.

366
00:26:45,093 --> 00:26:48,853
I hope that you are really happy
now, having discovered these things.

367
00:26:49,118 --> 00:26:51,738
And these are my contacts.

368
00:26:51,738 --> 00:26:55,298
You can meet me, write me a message,
and I'm really happy to see you.

369
00:26:55,648 --> 00:26:55,938
Bye!

