1
00:00:00,500 --> 00:00:01,270
Hello everyone.

2
00:00:02,050 --> 00:00:07,029
I'm Ti pdi, pa, currently working
at one of the leading multinational

3
00:00:07,029 --> 00:00:09,250
company as a lead software engineer.

4
00:00:09,910 --> 00:00:15,069
I completed my masters at the
University of Akron, Ohio, and today

5
00:00:15,429 --> 00:00:20,380
I will be presenting at conference
42, incident management, 2025.

6
00:00:20,880 --> 00:00:24,360
Now, retail has always been
about customer experience.

7
00:00:25,050 --> 00:00:30,210
Today, that experience is delivered
almost entirely through technology,

8
00:00:30,840 --> 00:00:36,660
and that technology has to operate at a
scale and speed that is unprecedented.

9
00:00:37,530 --> 00:00:43,920
Black Friday alone can generate over 20%
of annual revenue in just a few days.

10
00:00:44,850 --> 00:00:50,310
That means if your systems fail,
the consequences are immediate and

11
00:00:50,310 --> 00:00:53,850
long-term revenue losses, brand damage.

12
00:00:54,350 --> 00:00:55,879
Customer trust erosion.

13
00:00:56,809 --> 00:01:01,309
This is why Cloudnative
approaches are no longer optional.

14
00:01:01,309 --> 00:01:02,240
They're essential.

15
00:01:02,740 --> 00:01:06,850
In this talk, we will explore how
retailers are using Cloudnative

16
00:01:06,880 --> 00:01:11,770
architecture, not just to survive
these high stakes events, but to

17
00:01:11,800 --> 00:01:17,440
thrive achieving agility, resilience,
and cost efficiency at the same time.

18
00:01:18,280 --> 00:01:22,479
By the end, I want you to
leave with practical ideas.

19
00:01:22,870 --> 00:01:25,750
That you can apply in
your own organizations.

20
00:01:26,250 --> 00:01:28,639
Here is how I have structured our journey.

21
00:01:28,639 --> 00:01:33,259
Today, we will begin with
the digital retail evolution.

22
00:01:34,039 --> 00:01:39,199
What's driving this transformation and
why cloud native is the inevitable answer.

23
00:01:39,889 --> 00:01:44,569
Then we will explore the
architecture foundations such as.

24
00:01:45,019 --> 00:01:50,179
Auto scaling microservices and
resilient patterns that are at

25
00:01:50,179 --> 00:01:52,399
the core of surviving peak demand.

26
00:01:53,269 --> 00:02:00,379
Next, we will look at the real world
impact concrete case studies on

27
00:02:00,379 --> 00:02:04,249
cost efficiency, personalization,
and inventory management.

28
00:02:05,210 --> 00:02:09,709
After that, we will dive into
incident management because

29
00:02:09,800 --> 00:02:11,599
resiliency is only real.

30
00:02:12,050 --> 00:02:15,440
If you can detect and recover
from failures quickly.

31
00:02:15,940 --> 00:02:21,490
Finally, we will cover migration
frameworks, especially the Strangler Big

32
00:02:21,490 --> 00:02:26,740
pattern, which shows how to modernize
without risky Big bang Cutovers.

33
00:02:27,460 --> 00:02:32,710
So this agenda moves us from the
big picture, why changes needed into

34
00:02:32,710 --> 00:02:37,750
the nuts and bolts of how to make it
work, and finally into strategies.

35
00:02:37,810 --> 00:02:40,330
To future proof retail platforms,

36
00:02:40,830 --> 00:02:41,970
let's set the stage.

37
00:02:42,630 --> 00:02:45,990
Retail today operates in a
high stakes digital arena.

38
00:02:46,620 --> 00:02:51,710
Events like Black Friday and Cyber
Monday are no longer just busy days.

39
00:02:52,220 --> 00:02:58,035
They can account for more than 20% of
annual revenue in a single weekend.

40
00:02:58,770 --> 00:03:04,830
That means one outage even for minutes,
can wipe out millions of dollars.

41
00:03:05,330 --> 00:03:09,950
Customers now expect subsecond
response times across all channels.

42
00:03:10,520 --> 00:03:14,060
Mobile web, in store kiosks.

43
00:03:14,560 --> 00:03:17,470
If the site is slow, they
don't wait, they leave.

44
00:03:17,970 --> 00:03:20,550
Inventory visibility must be in real time.

45
00:03:20,940 --> 00:03:24,090
So if someone buys the
last pair of shoes online.

46
00:03:24,795 --> 00:03:27,255
That's instantly reflected
in the store system.

47
00:03:27,945 --> 00:03:30,195
Personalization isn't optional anymore.

48
00:03:30,825 --> 00:03:33,915
Customers expect tailored
recommendations every time.

49
00:03:34,425 --> 00:03:37,005
And let's not forget
compliance and security.

50
00:03:37,545 --> 00:03:40,125
A breach can cause existential damage.

51
00:03:40,625 --> 00:03:44,855
Retailers who can't deliver
resilient experiences using peak

52
00:03:44,855 --> 00:03:49,530
traffic face, both immediate revenue
impact and long-term brand erosion.

53
00:03:50,480 --> 00:03:51,700
So the message is clear.

54
00:03:52,550 --> 00:03:58,580
The retail battlefield is unforgiving
and the only way forward is cloudnative.

55
00:03:59,480 --> 00:04:04,580
With that urgency in mind, let's
explore the first foundation.

56
00:04:05,300 --> 00:04:07,070
Auto-scaling infrastructure.

57
00:04:07,570 --> 00:04:09,580
Traditionally retailers.

58
00:04:10,494 --> 00:04:14,904
Had to prepare for peak events
by massively over provisioning

59
00:04:14,934 --> 00:04:17,654
infrastructure that is very traditional.

60
00:04:18,314 --> 00:04:24,044
To handle Black Friday, they might buy
servers that were three to four times

61
00:04:24,044 --> 00:04:29,864
more than their normal demand, and those
servers would sit idle most of the year.

62
00:04:30,374 --> 00:04:31,754
That's wasted money.

63
00:04:32,534 --> 00:04:36,254
Cloud native flips the model
with elastic auto scaling.

64
00:04:36,870 --> 00:04:40,140
Resources expand and
contract in real time.

65
00:04:40,890 --> 00:04:46,320
Predictive models forecast demand
spikes while real time monitoring

66
00:04:46,380 --> 00:04:51,259
adjusts capacity Minute by minute,
during Black Friday, traffic

67
00:04:51,710 --> 00:04:53,959
might spike 10 or 20 times.

68
00:04:54,889 --> 00:04:58,579
Auto scaling seamlessly adds
servers to meet the load.

69
00:04:59,389 --> 00:05:04,009
When traffic drops back to normal,
resources scale down automatically.

70
00:05:04,509 --> 00:05:05,379
What is the result?

71
00:05:05,679 --> 00:05:12,279
So the result is leading retailers
see 50% infrastructure cost savings

72
00:05:12,789 --> 00:05:16,299
while still maintaining 99.99% uptime.

73
00:05:16,899 --> 00:05:19,479
It's efficiency and
resilience hand in hand.

74
00:05:20,319 --> 00:05:24,099
This is why I call autoscaling
the foundation of agility.

75
00:05:24,669 --> 00:05:29,889
Without it, retailers either waste
millions or risk outages with it.

76
00:05:30,399 --> 00:05:31,994
They strike the perfect balance.

77
00:05:32,494 --> 00:05:35,585
But scaling infrastructure
alone isn't enough.

78
00:05:36,275 --> 00:05:38,945
What happens when one service fails?

79
00:05:39,395 --> 00:05:41,434
That's where microservices come in.

80
00:05:41,934 --> 00:05:43,974
Monolithic systems are fragile.

81
00:05:44,514 --> 00:05:48,054
One bug in checkout could
take down the entire site.

82
00:05:48,894 --> 00:05:55,254
Cloud native retailers avoid this by
adopting microservices in this model.

83
00:05:55,749 --> 00:06:03,189
Each domain, like catalog cart, checkout
payments, is its own independent service.

84
00:06:03,909 --> 00:06:08,049
They can scale individually,
pale individually, and

85
00:06:08,049 --> 00:06:09,819
be updated independently.

86
00:06:10,319 --> 00:06:16,319
Retailers use resilience patterns such
as circuit breakers to prevent cascading

87
00:06:16,319 --> 00:06:23,034
failures, bulkheads to isolate resources,
back pressure to avoid overload.

88
00:06:23,534 --> 00:06:27,194
A synchronous communication
to reduce tight coupling.

89
00:06:27,694 --> 00:06:29,584
The impact is powerful.

90
00:06:29,974 --> 00:06:35,434
Teams can deploy three to five, three
to five times more frequently, and the

91
00:06:35,434 --> 00:06:38,944
blast radius of incidents is cut by 75%.

92
00:06:39,934 --> 00:06:46,264
This means retailers can innovate faster,
recover faster, and maintain stability

93
00:06:46,594 --> 00:06:48,329
even when parts of the system fail.

94
00:06:48,829 --> 00:06:51,769
And this architecture doesn't
just improve reliability.

95
00:06:52,219 --> 00:06:57,169
It enables advanced capabilities
like real time personalization.

96
00:06:57,669 --> 00:06:59,409
Let's talk about personalization.

97
00:06:59,409 --> 00:07:01,374
We all experienced it.

98
00:07:01,914 --> 00:07:06,549
You browse for a product and the site
instantly recommends something relevant.

99
00:07:07,360 --> 00:07:09,580
Today, that's not a nice to have.

100
00:07:09,610 --> 00:07:11,110
It's a baseline expectation.

101
00:07:11,710 --> 00:07:16,630
The challenge is that delivering
personalization in real time across

102
00:07:16,630 --> 00:07:21,969
billions of sessions without slowing
down performance is incredibly complex.

103
00:07:22,570 --> 00:07:26,740
You are running machine learning
models, crunching data, and serving

104
00:07:26,740 --> 00:07:28,599
recommendations in milliseconds.

105
00:07:29,560 --> 00:07:33,720
Cloud native retailers solve
this with microservices based

106
00:07:34,410 --> 00:07:35,850
machine learning platforms.

107
00:07:36,824 --> 00:07:43,124
Recommendation engines are isolated into
independent services scale separately

108
00:07:43,124 --> 00:07:49,364
using GPUs for fast inference and
paid with session specific caching.

109
00:07:49,865 --> 00:07:55,895
This means that even during peak traffic,
the system can deliver personalized

110
00:07:55,954 --> 00:08:00,929
recommendations with sub 20 millisecond
latency, and here is the impact.

111
00:08:01,704 --> 00:08:06,234
Retailers see 25 to 35%
higher conversion rates.

112
00:08:07,074 --> 00:08:13,374
That's customers, not just browsing,
but actually completing purchases, all

113
00:08:13,374 --> 00:08:15,954
without sacrificing the site performance.

114
00:08:16,734 --> 00:08:19,764
So personalization at
scale proves a key point.

115
00:08:20,364 --> 00:08:23,784
Cloud native design doesn't
just keep systems alive.

116
00:08:24,354 --> 00:08:29,184
It actually drives revenue growth,
but to make personalization work.

117
00:08:29,739 --> 00:08:32,079
You also need something equally critical.

118
00:08:32,589 --> 00:08:34,059
The real time inventory.

119
00:08:34,059 --> 00:08:34,779
Visibility

120
00:08:35,279 --> 00:08:38,009
inventory is a nervous system of retail.

121
00:08:38,189 --> 00:08:43,849
If your system says an item is
in stock, but the store says,

122
00:08:43,879 --> 00:08:48,889
shows that it's already sold
out, you break trust instantly.

123
00:08:49,549 --> 00:08:50,719
Legacy systems relied on.

124
00:08:51,219 --> 00:08:56,859
Batch updates, meaning inventory
might lag by 15 to 60 minutes.

125
00:08:57,309 --> 00:09:00,149
That is like one hour 15 to one hour.

126
00:09:00,209 --> 00:09:03,719
In an omnichannel world,
that's unacceptable.

127
00:09:04,219 --> 00:09:09,079
Cloud native retailers move to
an event driven architecture.

128
00:09:09,559 --> 00:09:11,124
The movement is sale have happens.

129
00:09:11,869 --> 00:09:15,084
An event is published into
Kafka or Kinesis streams.

130
00:09:15,584 --> 00:09:24,044
Those updates flow into distributed caches
like Redis across regions, and a graph ql.

131
00:09:24,044 --> 00:09:27,944
API layer ensures fast, consistent access.

132
00:09:28,444 --> 00:09:29,314
What's the result?

133
00:09:30,034 --> 00:09:35,494
Inventory visibility in under
200 milliseconds across both

134
00:09:35,614 --> 00:09:37,804
digital and physical channels.

135
00:09:38,494 --> 00:09:42,184
This reduces talk outs by 40%.

136
00:09:42,754 --> 00:09:45,784
Enables true omnichannel fulfillment.

137
00:09:46,534 --> 00:09:49,954
Buy online, pick up in
store, return anywhere.

138
00:09:50,454 --> 00:09:53,304
Inventory is no longer
a back office function.

139
00:09:53,394 --> 00:09:58,164
It's a realtime digital nervous
system powered by cloud native design.

140
00:09:58,884 --> 00:10:05,334
But even with personalization and time,
inventory failures are inevitable.

141
00:10:05,814 --> 00:10:09,294
The real question is how do you
prevent them from cascading?

142
00:10:09,794 --> 00:10:10,754
Failures happen.

143
00:10:11,354 --> 00:10:15,974
What separates resilient systems from
fragile ones is how they handle those

144
00:10:15,974 --> 00:10:19,184
failures in tightly coupled systems.

145
00:10:19,244 --> 00:10:24,464
A single slow or failing service can
ripple through the entire platform.

146
00:10:25,034 --> 00:10:29,774
That's what leads to checkout
crashes on Black Friday.

147
00:10:30,274 --> 00:10:32,374
Cloud native retailers design.

148
00:10:32,764 --> 00:10:40,264
For failure from day one, they use
circuit breakers to stop endless retries

149
00:10:40,264 --> 00:10:47,944
on failing services, fallback mechanisms
to serve, cashed or simplify data and

150
00:10:47,944 --> 00:10:51,484
rate limiting to control traffic surges.

151
00:10:51,984 --> 00:10:53,274
Here is a simple example.

152
00:10:53,424 --> 00:10:58,404
Imagine the product detail service slows
down instead of showing an error page.

153
00:10:59,289 --> 00:11:04,269
The platform can serve cashed content
or a simplified version of the page.

154
00:11:04,749 --> 00:11:09,729
The customer still completes their
purchase revenue still flows, and

155
00:11:09,729 --> 00:11:11,289
the incident doesn't escalate.

156
00:11:12,009 --> 00:11:16,449
This is resilience in action
keeping critical purchase parts

157
00:11:16,479 --> 00:11:19,539
open even during partial outages.

158
00:11:20,039 --> 00:11:24,599
And resilience isn't just about
uptime, it's also about keeping your

159
00:11:24,749 --> 00:11:27,509
environment secure while moving fast.

160
00:11:28,009 --> 00:11:29,029
Now let's talk.

161
00:11:29,089 --> 00:11:35,089
Security retailers may deploy
hundreds of times per day.

162
00:11:35,589 --> 00:11:39,909
Each deployment introduces risk,
but in a cloud native world,

163
00:11:40,119 --> 00:11:45,849
security must be baked into the
pipeline, not bolted on afterwards.

164
00:11:46,689 --> 00:11:48,279
Here is how leading retailers.

165
00:11:49,209 --> 00:11:54,539
Secure containers by
using immutable images.

166
00:11:55,039 --> 00:12:00,619
Every image is scanned for
vulnerabilities before deployment.

167
00:12:01,119 --> 00:12:02,349
Runtime protection.

168
00:12:02,849 --> 00:12:06,629
Behavioral analysis
monitors live containers for

169
00:12:07,049 --> 00:12:09,499
anomalies, secret management.

170
00:12:09,999 --> 00:12:13,059
So say like credentials
are rotated dynamically.

171
00:12:13,644 --> 00:12:21,304
Only exists temporarily the timeout in
a certain time, like not producing long

172
00:12:21,304 --> 00:12:23,134
lived tokens or anything like that.

173
00:12:23,674 --> 00:12:28,404
Basically we need to produce like
short-lived tokens and compliance

174
00:12:28,404 --> 00:12:35,749
automation, continuous checks for PCI and
GDPR with automatic evidence generation.

175
00:12:36,249 --> 00:12:40,929
This approach allows retailers to stay
compliant while deploying at scale.

176
00:12:41,409 --> 00:12:45,429
In other words, cloud native security
pipelines let you move fast and

177
00:12:45,429 --> 00:12:48,249
safely without slowing innovation.

178
00:12:48,749 --> 00:12:54,239
But even with scaling resilience
and security in place,

179
00:12:54,629 --> 00:12:56,339
incidents will still happen.

180
00:12:56,849 --> 00:12:59,429
So how do we detect and
resolve them faster?

181
00:12:59,929 --> 00:13:04,519
Before cloud native practices, incident
management was slow and painful.

182
00:13:05,149 --> 00:13:11,329
The average MTTD mean time to
detect was over 45 minutes.

183
00:13:11,899 --> 00:13:17,419
The average MTTR mean time to
recovery was over four hours.

184
00:13:17,959 --> 00:13:21,379
That's half a day of lost
sales and frustrated customers.

185
00:13:22,144 --> 00:13:28,234
With cloud native and site reliability
engineer practices, everything changes.

186
00:13:29,014 --> 00:13:34,144
Detection drops to under 60
seconds thanks to automated alerts

187
00:13:34,144 --> 00:13:35,794
and observability pipelines.

188
00:13:36,294 --> 00:13:42,894
Resolution times improve by 75
to 80% with cannery analysis.

189
00:13:43,344 --> 00:13:47,184
Automated rollbacks and
playbooks for partial failures.

190
00:13:47,684 --> 00:13:52,514
The result is that incidents that used
to cripple retailers for hours now

191
00:13:52,514 --> 00:13:54,764
get detected and resolved in minutes.

192
00:13:55,304 --> 00:14:01,184
This doesn't just protect uptime, it
protects revenue, brand trust, and

193
00:14:01,184 --> 00:14:07,424
customer loyalty, and that brings us
naturally to observability the backbone

194
00:14:07,454 --> 00:14:09,689
of rapid detection and response.

195
00:14:10,189 --> 00:14:13,249
Monitoring tells you
when things are broken.

196
00:14:13,759 --> 00:14:19,299
Observability tells you why Cloud
native observability combines metrics.

197
00:14:19,799 --> 00:14:26,299
That gives us like latency, throughput,
error rates with anomaly detection.

198
00:14:26,799 --> 00:14:30,369
And also sometimes like metrics
can include like how many.

199
00:14:31,179 --> 00:14:35,719
API API calls count, error
count which I already mentioned.

200
00:14:35,899 --> 00:14:37,939
And other important thing is logs.

201
00:14:38,439 --> 00:14:44,529
Logs are structured with trace IDs so
you can connect errors across services.

202
00:14:45,029 --> 00:14:46,859
And then finally the traces.

203
00:14:47,429 --> 00:14:52,199
So traces will give us full
end-to-end visibility of a request

204
00:14:53,069 --> 00:14:55,199
through multiple microservices.

205
00:14:55,699 --> 00:14:57,139
But here is the game changer.

206
00:14:57,619 --> 00:15:03,349
Leading retailers align observability
directly with business outcomes.

207
00:15:03,919 --> 00:15:09,709
They track metrics like cart
abandonment, rate against service

208
00:15:09,709 --> 00:15:12,439
latency, or revenue impact.

209
00:15:12,499 --> 00:15:16,729
During incidents, they run
synthetic shopping journeys

210
00:15:17,089 --> 00:15:18,724
to test checkout continuously.

211
00:15:19,224 --> 00:15:23,394
This means incident response isn't
just about restoring servers,

212
00:15:23,994 --> 00:15:27,264
it's about restoring customer
experience and revenue flow.

213
00:15:27,764 --> 00:15:29,654
So what about legacy systems?

214
00:15:29,684 --> 00:15:32,804
How do we bring them along
without breaking everything?

215
00:15:33,304 --> 00:15:36,514
This is where the strangler
fixed pattern comes in.

216
00:15:37,464 --> 00:15:41,964
Inspired by the tree that grows around
its host and gradually replaces it.

217
00:15:42,654 --> 00:15:47,544
This pattern allows us to modernize
without a risky big bang cutover.

218
00:15:48,204 --> 00:15:53,634
Here is how it works, and API gateway
intercepts traffic and routes it to either

219
00:15:53,664 --> 00:15:56,574
the legacy system or new microservices.

220
00:15:57,414 --> 00:16:03,384
New services are built alongside the
old, gradually traffic shifts to the

221
00:16:03,384 --> 00:16:05,964
new services as they prove reliable.

222
00:16:06,609 --> 00:16:11,559
Over time, the legacy system is
strangled and quietly retired.

223
00:16:12,059 --> 00:16:16,949
This incremental approach means you
deliver value, continuously, reduce

224
00:16:16,949 --> 00:16:19,619
risk, and never disrupt customers.

225
00:16:19,649 --> 00:16:22,319
Its evolution, not just revolution.

226
00:16:22,819 --> 00:16:26,874
And to make this possible, you need
the right team structure to support it.

227
00:16:27,374 --> 00:16:30,884
Technology patterns only work if
the organization supports them.

228
00:16:31,484 --> 00:16:34,874
Leading retailers adopt
structures that accelerate both

229
00:16:34,904 --> 00:16:37,484
innovation and incident response.

230
00:16:38,234 --> 00:16:43,454
They use product align squads,
cross-functional teams that own a

231
00:16:43,454 --> 00:16:49,124
business domain, and to end they rely on
platform engineering teams that provide

232
00:16:49,574 --> 00:16:51,914
self-service infrastructure to developers.

233
00:16:52,514 --> 00:16:57,274
They embed, so they integrate SRE,
like site reliability, engineering

234
00:16:57,274 --> 00:17:02,644
best practices within squads, guided
by a central team, and they integrate

235
00:17:02,644 --> 00:17:05,584
security as code into CSCD pipelines.

236
00:17:06,304 --> 00:17:11,464
This structure leads to three to
five times faster incident resolution

237
00:17:12,124 --> 00:17:16,834
because teams own their services
and have the tools to act quickly.

238
00:17:17,434 --> 00:17:19,774
It also enables constant innovation.

239
00:17:20,389 --> 00:17:23,149
Because safety nets are
built into the process.

240
00:17:23,649 --> 00:17:26,109
Now let's recap what
we have learned today.

241
00:17:26,609 --> 00:17:30,634
So these are like four key
messages to leave you with Cloud.

242
00:17:30,634 --> 00:17:33,514
Native is existential, not optional.

243
00:17:34,354 --> 00:17:37,194
Retailers see 50% cost
reductions and higher resilience.

244
00:17:37,694 --> 00:17:40,594
Second one is designed for
failure from the start.

245
00:17:41,094 --> 00:17:45,594
Circuit breakers, bulkheads,
fallbacks, reserve revenue flow.

246
00:17:46,094 --> 00:17:49,784
Third one is observability must
connect to business outcomes.

247
00:17:50,774 --> 00:17:56,774
That is tying metrics to key performance
indicators like conversions and revenue.

248
00:17:57,274 --> 00:18:02,344
The fourth one and last is the migrate
with evolution, not revolution.

249
00:18:03,094 --> 00:18:07,054
The strangler thick pattern lets you
modernize safely and incrementally.

250
00:18:07,639 --> 00:18:12,799
If you remember nothing else from today,
remember, just this cloud native retail

251
00:18:12,829 --> 00:18:16,669
is about survival and competitiveness.

252
00:18:17,239 --> 00:18:22,879
It's about delivering resilient
experiences when it matters most.

253
00:18:23,379 --> 00:18:24,999
And with that, let's close.

254
00:18:25,499 --> 00:18:27,904
Thank you all for your
time and attention today.

255
00:18:28,054 --> 00:18:31,114
Detail is in the middle of
a massive transformation.

256
00:18:31,614 --> 00:18:34,314
Cloud native architecture
is at the heart of it.

257
00:18:35,214 --> 00:18:40,254
I hope this session has given you some
practical ideas, whether you're thinking

258
00:18:40,254 --> 00:18:46,464
about scaling systems for peak traffic,
modernizing legacy platforms, or aligning

259
00:18:46,704 --> 00:18:48,984
observability with business impact.

260
00:18:49,014 --> 00:18:50,554
Thank you all once again.

