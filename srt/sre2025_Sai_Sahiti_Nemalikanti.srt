1
00:00:00,500 --> 00:00:01,250
Hello everyone.

2
00:00:01,470 --> 00:00:07,480
This is Sathi and today I'm going
to talk about designing for failure

3
00:00:07,750 --> 00:00:12,820
and how to build a resilient
system that can take failures.

4
00:00:13,320 --> 00:00:15,810
Let's start with a quick
thought experiments.

5
00:00:15,840 --> 00:00:19,930
Imagine it's a busiest day, like
some black Friday day if you're

6
00:00:19,930 --> 00:00:25,450
in retail or month end, close if
you're in finance or tax season.

7
00:00:25,480 --> 00:00:31,600
If you are filing tax on April 15th
or the last day, suddenly a critical

8
00:00:31,600 --> 00:00:33,400
part of your system goes offline.

9
00:00:33,670 --> 00:00:39,340
Customers are frustrated, maybe
revenue stops flowing, this scenario

10
00:00:39,370 --> 00:00:44,020
isn't hypothetical, but it's the
reality of the complex systems today.

11
00:00:44,930 --> 00:00:45,980
Things will fail.

12
00:00:46,400 --> 00:00:51,350
Hardware breaks, networks get congested
of warehouse bugs, dependencies become

13
00:00:51,350 --> 00:00:53,600
un, unavailable humans make mistakes.

14
00:00:54,350 --> 00:00:58,530
So for decades, our primary
focus has been to make.

15
00:00:59,030 --> 00:01:01,490
Systems resilient to failure.

16
00:01:01,490 --> 00:01:05,120
So we are trying to prevent
failure at all costs.

17
00:01:05,300 --> 00:01:08,750
We aim for perfect systems
that never will go down.

18
00:01:09,560 --> 00:01:11,630
But here's the reality.

19
00:01:12,130 --> 00:01:17,800
Preventing failures is impossible,
especially as system grow

20
00:01:17,800 --> 00:01:19,690
more complex and distributed.

21
00:01:20,190 --> 00:01:24,900
So what if instead of trying to prevent
failure, we are designed for it.

22
00:01:25,770 --> 00:01:30,270
So what if we accepted failure
as inevitable and build systems

23
00:01:30,270 --> 00:01:32,130
that could gracefully handle it?

24
00:01:32,460 --> 00:01:37,240
So that's what we are going to talk
about today designing for failure.

25
00:01:37,430 --> 00:01:43,610
In the next 10 minutes, we'll explore
why this mindset is crucial and look

26
00:01:43,790 --> 00:01:49,370
at some of the core principles for
building truly resilient systems.

27
00:01:50,360 --> 00:01:51,950
Okay, getting to the next slide.

28
00:01:52,450 --> 00:01:54,250
So why design for failure?

29
00:01:54,370 --> 00:01:55,670
So let's talk about that.

30
00:01:56,170 --> 00:02:00,220
Firstly, as I said, prevention
of failure is a myth.

31
00:02:00,700 --> 00:02:04,610
Chasing a hundred time, a hundred
percent of time will only is

32
00:02:04,610 --> 00:02:06,260
a prevention tactics that.

33
00:02:06,635 --> 00:02:11,105
Leads to diminishing returns, it
becomes exponentially harder and more

34
00:02:11,105 --> 00:02:14,795
complex and expensive to prevent.

35
00:02:14,825 --> 00:02:17,465
Make systems up a hundred
percent of the time.

36
00:02:18,260 --> 00:02:23,060
Secondly, impact of failure in
unprepared systems is often catastrophic.

37
00:02:23,240 --> 00:02:27,560
For example, a small glitch in
one service can cascade and break

38
00:02:27,560 --> 00:02:30,770
down all the entire application.

39
00:02:31,310 --> 00:02:34,070
So think of something
like a Dom domino effect.

40
00:02:35,030 --> 00:02:39,470
So this leads to prolonged outages,
terrible user experience, and

41
00:02:39,470 --> 00:02:42,020
significant business and customer impact.

42
00:02:42,520 --> 00:02:44,829
Designing for failure on the other hand.

43
00:02:45,565 --> 00:02:47,995
Aims to limit blast radius.

44
00:02:48,055 --> 00:02:52,585
It's about building systems
that can withdraw turbulence

45
00:02:52,705 --> 00:02:57,245
without fully collapsing
gracefully degrade functionality

46
00:02:57,425 --> 00:02:59,345
instead of completely failing.

47
00:03:00,215 --> 00:03:04,019
Recover quickly when
failures inevitably occur.

48
00:03:04,810 --> 00:03:06,300
It's not truly about.

49
00:03:07,125 --> 00:03:12,165
Giving up on stability, but achieving
true reliability by acknowledging

50
00:03:12,165 --> 00:03:13,935
and planning for imperfection.

51
00:03:14,435 --> 00:03:19,175
So moving on to what core principles
and techniques we could use.

52
00:03:20,005 --> 00:03:24,385
So let's talk about the core principles
and techniques that we can use.

53
00:03:24,885 --> 00:03:31,185
So this boils down to how do we actually
do this now that we agreed that.

54
00:03:32,005 --> 00:03:34,885
Preparing for failure is a good idea.

55
00:03:34,975 --> 00:03:38,005
Let's talk about what are the
different ways we could do it

56
00:03:38,005 --> 00:03:39,865
and what works for your systems.

57
00:03:40,804 --> 00:03:43,204
On a high level, there are
several key principles and

58
00:03:43,204 --> 00:03:45,064
patterns that we could follow.

59
00:03:45,184 --> 00:03:47,224
Let's touch on a few core ones.

60
00:03:48,004 --> 00:03:49,864
First is redundancy.

61
00:03:50,084 --> 00:03:52,664
So this is one of the fundamental pillars.

62
00:03:53,479 --> 00:03:56,479
Never have a single point of
failure for critical components.

63
00:03:56,539 --> 00:04:01,849
Run multiple instances of your service
services databases, load balances,

64
00:04:01,880 --> 00:04:05,510
ideally across different physical
locations or availability zone.

65
00:04:06,380 --> 00:04:10,979
So if one instance fails the
traffic can be routed to healthier

66
00:04:11,599 --> 00:04:13,369
redundant or backup system.

67
00:04:14,359 --> 00:04:17,869
This is a simple concept,
but it has a massive impact.

68
00:04:18,019 --> 00:04:20,229
Okay, next is isolation.

69
00:04:20,419 --> 00:04:23,739
So think of bulk heads on a ship.

70
00:04:23,889 --> 00:04:28,209
If one compartment floods, the bulk
heads contain the water and prevent

71
00:04:28,209 --> 00:04:29,649
the entire ship from sinking.

72
00:04:30,609 --> 00:04:34,589
And similarly, in our distributed
or complex systems that we are

73
00:04:34,589 --> 00:04:36,794
building, lets isolate components.

74
00:04:37,499 --> 00:04:43,139
A failure in a user profile service
shouldn't bring down the entire processing

75
00:04:43,169 --> 00:04:44,909
payment processing service, for example.

76
00:04:45,409 --> 00:04:47,809
We can achieve this
through techniques, right?

77
00:04:48,229 --> 00:04:54,909
Assigning different resource pools for
different parts of the service following

78
00:04:54,909 --> 00:05:00,369
microservice architecture or Q based
communication and things of that sort.

79
00:05:00,869 --> 00:05:03,419
Next, let's talk about circuit breakers.

80
00:05:03,659 --> 00:05:07,709
Imagine calling a service that
currently is overloaded or down.

81
00:05:08,684 --> 00:05:14,294
Continuously hammering it to make
things works for everyone and making

82
00:05:14,294 --> 00:05:20,064
it, in worst cases, unrecoverable, a
circuit break breaker pattern is used

83
00:05:20,064 --> 00:05:21,834
to address these kind of situation.

84
00:05:22,584 --> 00:05:29,854
For example, if certain failures
reach a threshold the breaker trips

85
00:05:30,304 --> 00:05:34,404
and it stops sending requests for a
short period, returning an immediate.

86
00:05:34,989 --> 00:05:36,189
Error will fall back.

87
00:05:36,919 --> 00:05:40,309
This protect the calling service from
wasting resources and it also gives

88
00:05:40,309 --> 00:05:42,259
the failing service time to recover.

89
00:05:43,219 --> 00:05:48,859
After a timeout, it might let a few
test requests go through to see before

90
00:05:49,159 --> 00:05:51,319
the system is deemed healthy again.

91
00:05:51,979 --> 00:05:56,149
So think of this as like a circuit
breaker in electronic terms.

92
00:05:56,649 --> 00:05:58,899
Next is timeouts and retries.

93
00:05:59,399 --> 00:06:03,989
Don't let your service wait indefinitely
for a response from another service.

94
00:06:04,199 --> 00:06:05,999
Implement aggressive time modes.

95
00:06:05,999 --> 00:06:10,259
Either if a call times out, you
might retry, but do it carefully.

96
00:06:10,259 --> 00:06:16,089
You can use techniques like exponential
back off and limited number of e retries.

97
00:06:16,119 --> 00:06:21,539
Otherwise, you can accidentally create a
retry storm that intensifies the request

98
00:06:21,539 --> 00:06:25,139
to an extent that instead of solving
the problem, it creates a new problem.

99
00:06:25,639 --> 00:06:28,699
Okay, next, let's talk
about graceful degradation.

100
00:06:29,699 --> 00:06:34,829
Sometimes offering partial functionality
is much better than offering nothing.

101
00:06:35,399 --> 00:06:42,149
If a non-critical feature falls, like
for example, displaying some news

102
00:06:42,149 --> 00:06:47,209
articles on a news site can the core
functionality like reading the main

103
00:06:47,209 --> 00:06:50,209
article still work or design new systems?

104
00:06:50,214 --> 00:06:54,554
Keeping this in mind, try to make
your core functionality separate

105
00:06:54,614 --> 00:06:59,354
from the noncritical functionality
so that if noncritical ones fail, it

106
00:06:59,354 --> 00:07:01,724
doesn't affect the core functionality.

107
00:07:01,774 --> 00:07:07,414
And next we talk about now that we have
discussed various strategies, now coming

108
00:07:07,414 --> 00:07:12,284
to the monitoring and observability
aspect which is an absolute must.

109
00:07:12,729 --> 00:07:14,949
Into understanding your system's health.

110
00:07:14,949 --> 00:07:20,789
So add robust logging metrics
failure detection, understanding

111
00:07:20,789 --> 00:07:25,069
the impact, diagnose the root cause,
and verify that your resilience

112
00:07:25,069 --> 00:07:26,779
methods are working as expected.

113
00:07:27,279 --> 00:07:29,799
So you can't really manage
what you can't measure.

114
00:07:29,889 --> 00:07:35,639
So it'll be both helpful in recovering
from a failure as well as doing a

115
00:07:35,639 --> 00:07:37,829
root cause analysis once your failure.

116
00:07:38,229 --> 00:07:41,799
Has been recovered so that you can
prevent it from happening again.

117
00:07:42,639 --> 00:07:46,429
So monitoring is one of the most
important things that you would def

118
00:07:46,579 --> 00:07:48,469
should definitely add to your system.

119
00:07:48,969 --> 00:07:52,389
Alright, now let's move
on to the next slide.

120
00:07:52,669 --> 00:07:57,109
Now that we understood what are the
different ways you can make your system.

121
00:07:57,609 --> 00:07:59,289
Resilient towards a failure.

122
00:07:59,689 --> 00:08:05,009
Let's just try to see how to shift
your mindset because this is, we are

123
00:08:05,009 --> 00:08:10,499
entirely shifting from a prevention
of error to making sure your system

124
00:08:10,499 --> 00:08:12,419
actually works when an error comes.

125
00:08:13,269 --> 00:08:14,709
Let's just talk about that.

126
00:08:14,739 --> 00:08:19,359
Implementing these patterns is not just
about code, it's about a cul cultural

127
00:08:19,359 --> 00:08:22,449
and architectural and mindset shift.

128
00:08:23,319 --> 00:08:29,919
It means developers, testers, operating
teams, operation teams, SREs should

129
00:08:29,919 --> 00:08:35,259
be constantly asking, what happens if
this part that I'm working on fails?

130
00:08:35,799 --> 00:08:37,059
How will the system behave?

131
00:08:37,239 --> 00:08:38,709
How can we contain the impact?

132
00:08:39,654 --> 00:08:44,309
So it encourages practices like kiosk
engineering intentionally we should

133
00:08:44,549 --> 00:08:48,300
encourage, but, practices like kios
engineering, where you intentionally

134
00:08:48,300 --> 00:08:53,849
inject control failures into production
environments to test how the system

135
00:08:53,910 --> 00:08:59,849
actually responds and uncovers weakness
before they actually cause real outages.

136
00:09:00,839 --> 00:09:05,060
So it's about proactively
validating your s resilience.

137
00:09:05,560 --> 00:09:07,760
Alright moving to the next slide.

138
00:09:07,870 --> 00:09:10,740
Concluding I would to talk about.

139
00:09:11,235 --> 00:09:16,935
Failures in our complex systems especially
distributed systems or machine learning,

140
00:09:17,265 --> 00:09:23,285
engineering included systems isn't
an if, but when, or trying to prevent

141
00:09:23,285 --> 00:09:26,615
every single failure is losing battle.

142
00:09:27,155 --> 00:09:33,005
So by embracing the designing for failure
mindset and implementing patterns like

143
00:09:33,005 --> 00:09:35,705
redundancy, isolation, circuit breakers.

144
00:09:36,515 --> 00:09:41,665
Graceful degradation and timeouts
enterprise all supported by strong

145
00:09:41,665 --> 00:09:43,315
monitoring and observability.

146
00:09:43,405 --> 00:09:47,955
We can build systems that are
truly resilient systems that handle

147
00:09:47,985 --> 00:09:52,755
failures gracefully, minimize
user impact and recover quickly.

148
00:09:53,255 --> 00:09:57,305
This leads to higher availability,
better customer trust, and

149
00:09:57,365 --> 00:09:59,855
ultimately more successful product.

150
00:10:00,355 --> 00:10:04,345
Go back to your teams and start asking
this question, what happens if this fail?

151
00:10:05,185 --> 00:10:06,085
Start small.

152
00:10:06,115 --> 00:10:09,325
Pick one critical component
and analyze its failure modes.

153
00:10:09,385 --> 00:10:14,035
Introduce one resilience pattern,
build that muscle, expect failure.

154
00:10:14,335 --> 00:10:20,245
Test it out by injecting the failure,
design for it and build resilience.

155
00:10:21,055 --> 00:10:22,315
Alright, that's all I have.

156
00:10:22,765 --> 00:10:23,185
Thank you.

157
00:10:23,875 --> 00:10:27,715
Let me know if you have any
questions or you can contact me.

