1
00:00:00,290 --> 00:00:05,820
Today, we'll be talking about DevSecOps
and we'll focus on the best practices

2
00:00:05,970 --> 00:00:11,900
and strategies for integrating
security into DevOps at scale.

3
00:00:12,400 --> 00:00:17,350
Before we discuss the best practices,
strategies, and realities when rolling

4
00:00:17,360 --> 00:00:22,690
out DevSecOps in company, we'll introduce
first DevSecOps using a simple analogy,

5
00:00:23,410 --> 00:00:25,300
a coffee shop with CCTV cameras.

6
00:00:25,810 --> 00:00:29,440
RJ, that's an image of a cup of coffee.

7
00:00:30,010 --> 00:00:31,590
Not a coffee shop.

8
00:00:32,090 --> 00:00:33,530
Oh, my bad, Sir Arbs.

9
00:00:33,950 --> 00:00:35,210
There you go, Sir Arbs.

10
00:00:36,000 --> 00:00:39,700
We now have an image of a
coffee shop with a CCTV camera.

11
00:00:40,530 --> 00:00:44,270
Just like a software, coffee
shop needs to be efficient,

12
00:00:44,810 --> 00:00:47,150
customer friendly, and secure.

13
00:00:47,370 --> 00:00:49,290
And that's where DevSecOps comes in.

14
00:00:49,790 --> 00:00:52,210
DevSecOps is about
integrating development.

15
00:00:52,685 --> 00:00:55,555
Security and operations
into seamless process.

16
00:00:56,115 --> 00:01:01,254
It ensures new features and created
quickly, securely, and reliably.

17
00:01:02,165 --> 00:01:05,824
Let's dive into how a coffee
shop with CCTV cameras can

18
00:01:05,865 --> 00:01:08,055
help us understand this better.

19
00:01:08,815 --> 00:01:12,534
Imagine the developers are like the
interior designers of a coffee shop.

20
00:01:13,384 --> 00:01:14,584
They design the layout.

21
00:01:14,870 --> 00:01:20,400
where the coffee bars, tables, and chairs
go to create a smooth customer experience.

22
00:01:21,090 --> 00:01:25,500
But without considering security,
blind spots can be overlooked.

23
00:01:26,410 --> 00:01:29,440
Security is like installing CCTV cameras.

24
00:01:30,170 --> 00:01:34,339
These cameras watch for
theft or suspicious activity,

25
00:01:34,980 --> 00:01:36,890
ensuring everything is safe.

26
00:01:37,490 --> 00:01:41,410
In DevSecOps, security is
built into the process.

27
00:01:41,835 --> 00:01:45,655
Continuously monitoring of
vulnerabilities and threats.

28
00:01:46,655 --> 00:01:48,775
Like CCTVs monitoring the shop.

29
00:01:49,565 --> 00:01:53,785
Operations is like the shop manager
ensuring the CCTV system works.

30
00:01:54,475 --> 00:01:58,635
The manager makes sure cameras
are functioning, recording,

31
00:01:58,934 --> 00:02:01,165
and storing footage properly.

32
00:02:01,974 --> 00:02:07,304
Similarly, Ops ensures that
servers and infrastructure run

33
00:02:07,304 --> 00:02:09,564
smoothly with minimal downtime.

34
00:02:10,064 --> 00:02:13,194
you could possibly start with
a coffee shop with an empty

35
00:02:13,194 --> 00:02:14,934
room and a coffee machine.

36
00:02:15,434 --> 00:02:19,874
The room represents the foundational
infrastructure where the framework

37
00:02:19,874 --> 00:02:22,174
is set for everything that follows.

38
00:02:22,574 --> 00:02:27,324
The coffee machine symbolizes the core
system or application that will serve

39
00:02:27,334 --> 00:02:32,174
the customers just as the software
provides the functionality for users.

40
00:02:32,714 --> 00:02:35,564
However, without any furniture,
seating, or decoration.

41
00:02:36,064 --> 00:02:40,924
The space feels incomplete and
uninviting, much like how a system

42
00:02:40,924 --> 00:02:43,494
without features lacks value.

43
00:02:44,184 --> 00:02:48,034
To create a smooth experience for
customers, you need to carefully design

44
00:02:48,034 --> 00:02:53,794
the layout, just as developers design
software features to ensure usability.

45
00:02:54,564 --> 00:03:00,134
Finally, you add security features,
such as CCTV cameras, as well

46
00:03:00,204 --> 00:03:02,254
as a secure payment system.

47
00:03:03,019 --> 00:03:06,149
to ensure the safety of both
customers and the coffee shop.

48
00:03:06,689 --> 00:03:11,199
Just as DevSecOps integrates
security throughout the software

49
00:03:11,199 --> 00:03:15,209
lifecycle to protect against threats.

50
00:03:15,709 --> 00:03:20,279
The coffee shop CCTV provides real
time monitoring, just like continuous

51
00:03:20,309 --> 00:03:23,299
integration and deployment in DevSecOps.

52
00:03:24,149 --> 00:03:29,219
New features or updates Can be
added without disrupting the system,

53
00:03:29,999 --> 00:03:35,889
ensuring security checks are constant
and seamless automation in DevSecOps

54
00:03:36,199 --> 00:03:38,459
is like motion detection in CCTV.

55
00:03:38,959 --> 00:03:44,359
Instead of constantly watching the
footage, the system automatically

56
00:03:44,390 --> 00:03:47,309
detect unusual activity and send alerts.

57
00:03:48,229 --> 00:03:53,799
Similarly, automated testing
identifies bugs and vulnerabilities

58
00:03:53,879 --> 00:03:55,419
before they become serious issue.

59
00:03:55,919 --> 00:04:00,959
Monitoring is like reviewing CCTV
footage to find patterns like spotting

60
00:04:00,989 --> 00:04:03,179
if a door is repeatedly left open.

61
00:04:03,769 --> 00:04:09,039
In DevSecOps, monitoring tools
help identify unusual behavior or

62
00:04:09,039 --> 00:04:13,909
performance issue, allowing teams
to address problems proactively.

63
00:04:14,809 --> 00:04:19,754
As we'll see later, budget and
resource constraints often limit the

64
00:04:19,754 --> 00:04:24,279
ability to implement advanced security
measures or even upgrade tools.

65
00:04:24,749 --> 00:04:30,099
In this coffee shop analogy, This would
be like not having enough funds to

66
00:04:30,099 --> 00:04:35,759
install high quality CCTV cameras or
hire security personnel to monitor them.

67
00:04:36,259 --> 00:04:40,129
Despite the desire to improve security,
financial limitations may force the shop

68
00:04:40,819 --> 00:04:43,189
to simply rely on basic surveillance.

69
00:04:43,679 --> 00:04:49,679
Similarly, in DevSecOps, teams may need
to prioritize which security tools to use.

70
00:04:49,934 --> 00:04:54,594
And sometimes must make compromises
based on the available resources.

71
00:04:54,924 --> 00:04:59,054
However, even with limited
resources, the goal remains to

72
00:04:59,054 --> 00:05:00,844
ensure the core system functions.

73
00:05:01,724 --> 00:05:03,244
securely and reliably.

74
00:05:03,744 --> 00:05:10,244
In a well run coffee shop, baristas,
CCTV cameras, and managers work

75
00:05:10,244 --> 00:05:12,404
together to provide great service.

76
00:05:13,024 --> 00:05:20,074
Similarly, DevSecOps ensures developers,
security, and operations collaborate to

77
00:05:20,114 --> 00:05:25,554
deliver secure, high quality software
without disrupting the user experience.

78
00:05:26,084 --> 00:05:27,824
RJ, I have a question for you.

79
00:05:28,744 --> 00:05:32,164
Where does a DevSecOps
pipeline come into play?

80
00:05:32,664 --> 00:05:34,084
Good question, Sir Arps.

81
00:05:34,584 --> 00:05:39,144
In DevSecOps, the pipeline automates
the entire process of building,

82
00:05:39,834 --> 00:05:43,304
testing, securing, and deploying code.

83
00:05:43,854 --> 00:05:49,054
It's like a conveyor belt that ensures
every step is completely efficiently

84
00:05:49,054 --> 00:05:51,114
while maintaining quality and security.

85
00:05:51,614 --> 00:05:54,134
The first stage is continuous integration.

86
00:05:54,634 --> 00:05:59,904
When developers push new code, the
pipeline automatically builds it

87
00:06:00,334 --> 00:06:02,664
and run tests to catch bugs early.

88
00:06:03,164 --> 00:06:07,244
This ensures the code integrates
smoothly without introducing errors.

89
00:06:08,114 --> 00:06:12,184
For example, imagine each code
change is like a puzzle piece.

90
00:06:12,684 --> 00:06:17,494
CI ensures the pieces fit together
perfectly by testing them frequently.

91
00:06:17,994 --> 00:06:20,784
Next is continuous delivery or deployment.

92
00:06:21,284 --> 00:06:25,604
After testing, the pipeline
packages the application and either

93
00:06:25,624 --> 00:06:29,854
prepares it for manual release
or deploys it automatically.

94
00:06:30,354 --> 00:06:33,264
Security is included as
part of the pipeline.

95
00:06:33,764 --> 00:06:38,854
Automated tools scan for vulnerabilities,
check for insecure dependencies,

96
00:06:39,414 --> 00:06:42,434
and ensure compliance with policies.

97
00:06:43,414 --> 00:06:48,764
Finally, Operations monitoring ensures
the deployed application is healthy.

98
00:06:49,664 --> 00:06:55,264
The pipeline deploys monitoring tools
that track performance, log errors, and

99
00:06:55,264 --> 00:06:57,884
send alerts if something goes wrong.

100
00:06:58,384 --> 00:07:02,204
The pipeline is critical because
it automates repetitive tasks.

101
00:07:02,884 --> 00:07:06,944
ensures consistency, speeds
up releases, and integrates

102
00:07:06,954 --> 00:07:08,694
security throughout the process.

103
00:07:09,304 --> 00:07:13,864
It allows teams to innovate quickly
without compromising quality or security.

104
00:07:14,364 --> 00:07:16,994
Sir Arbs, I have also a question for you.

105
00:07:17,494 --> 00:07:22,734
What are some realities that teams have
to face when starting out with DevSecOps?

106
00:07:22,914 --> 00:07:24,044
Good question, RJ.

107
00:07:24,654 --> 00:07:26,884
We'll discuss that in the next section.

108
00:07:27,384 --> 00:07:34,424
Okay, so here on the screen, we can
see So number one, Basically, we want

109
00:07:34,434 --> 00:07:37,254
to handle the resistance to change.

110
00:07:37,544 --> 00:07:40,864
Second would be speed versus
security, where we have to

111
00:07:40,864 --> 00:07:43,124
balance speed and security.

112
00:07:43,594 --> 00:07:48,964
And third would be integration challenges,
which involves tool overload as well

113
00:07:48,964 --> 00:07:54,499
as the inability of development teams
to integrate with the needed tools.

114
00:07:55,189 --> 00:08:01,229
So for number one, the reality is that
DevSecOps requires a mindset change

115
00:08:01,499 --> 00:08:05,959
where development, security, and
operations collaborate continuously.

116
00:08:06,459 --> 00:08:09,459
So the challenge is that
breaking down traditional silos

117
00:08:09,489 --> 00:08:11,179
between teams can be difficult.

118
00:08:11,769 --> 00:08:13,809
Developers may view security as a blocker.

119
00:08:14,214 --> 00:08:18,684
And security teams might be
used to working independently.

120
00:08:19,484 --> 00:08:20,424
So what's the solution?

121
00:08:20,434 --> 00:08:24,394
The solution is to encourage cross
team communication and provide

122
00:08:24,424 --> 00:08:27,814
training to foster a shared
responsibility for security.

123
00:08:28,314 --> 00:08:32,574
Again, the reality is that not
everyone will be on board with

124
00:08:32,574 --> 00:08:34,844
the changes DevSecOps introduces.

125
00:08:35,784 --> 00:08:40,454
The challenge is that teams may resist
changes due to fear of increased workload.

126
00:08:40,879 --> 00:08:43,879
new processes, or even tool fatigue.

127
00:08:44,379 --> 00:08:49,819
So the solution is to focus on small
wins and celebrate early successes to

128
00:08:49,819 --> 00:08:51,949
demonstrate the value of DevSecOps.

129
00:08:52,519 --> 00:08:57,039
And of course, involve key
stakeholders early to build buy in.

130
00:08:57,539 --> 00:09:00,719
So how about the second one,
balancing speed and security?

131
00:09:01,269 --> 00:09:05,389
So the reality is that teams
must integrate security without

132
00:09:05,389 --> 00:09:07,419
slowing down the delivery process.

133
00:09:08,309 --> 00:09:12,049
The challenge is that there's
often a perception that

134
00:09:12,049 --> 00:09:14,069
security slows down development.

135
00:09:14,999 --> 00:09:20,159
Early stages can feel slower as security
processes are embedded into workflows.

136
00:09:20,659 --> 00:09:25,059
The solution, of course, is to
implement lightweight automated

137
00:09:25,059 --> 00:09:29,739
security checks that run in the
background and focus on fast feedback.

138
00:09:30,609 --> 00:09:33,699
And the third one would, of course,
be the integration challenges.

139
00:09:33,749 --> 00:09:39,034
So the reality is that DevSecOps
involves multiple tools for CICD,

140
00:09:39,514 --> 00:09:41,954
security scanning, monitoring, and more.

141
00:09:42,574 --> 00:09:46,874
So the challenge here is that teams may
struggle with integrating various tools,

142
00:09:47,274 --> 00:09:52,874
especially if they have existing legacy
systems or even pragmatic tool sets.

143
00:09:53,614 --> 00:09:58,994
The solution is to start small by
integrating a few key tools and focus on

144
00:09:59,064 --> 00:10:01,284
automating critical security checks first.

145
00:10:01,784 --> 00:10:03,334
There's four, there's three more.

146
00:10:03,834 --> 00:10:05,974
So for items four, five, and six.

147
00:10:06,404 --> 00:10:09,724
Number four would be developers with
a lack of expertise and security.

148
00:10:10,594 --> 00:10:13,774
Number five would be how do
we tackle legacy systems?

149
00:10:14,034 --> 00:10:17,714
And number six, budget
and resource constraints.

150
00:10:18,314 --> 00:10:21,484
So let's start with number four,
lack of expertise in security.

151
00:10:21,874 --> 00:10:25,874
So the reality is that developers
are not always trained in security.

152
00:10:26,374 --> 00:10:29,624
And security teams, on the
other hand, may not be fully

153
00:10:29,744 --> 00:10:32,194
understand development workflows.

154
00:10:32,694 --> 00:10:36,004
The challenge is that teams may
lack the necessary skills to

155
00:10:36,004 --> 00:10:40,744
implement secure coding practices
or even automate security processes.

156
00:10:41,324 --> 00:10:42,324
So what's the solution?

157
00:10:42,824 --> 00:10:45,954
The solution is to provide
training on secure coding

158
00:10:45,964 --> 00:10:47,894
and DevSecOps best practices.

159
00:10:48,674 --> 00:10:51,524
It's important to consider
bringing in security champions

160
00:10:51,954 --> 00:10:53,384
within the development team.

161
00:10:53,884 --> 00:10:56,644
Let's go straight to number
five, managing legacy systems.

162
00:10:56,684 --> 00:11:02,244
The reality is that many organizations
have legacy systems that don't easily

163
00:11:02,244 --> 00:11:05,094
fit into modern DevSecOps pipelines.

164
00:11:05,544 --> 00:11:10,654
The challenge is that legacy systems
may lack APIs or automated testing

165
00:11:10,674 --> 00:11:14,984
frameworks, making it hard to incorporate
them into automated workflows.

166
00:11:15,854 --> 00:11:16,654
What's the solution?

167
00:11:17,224 --> 00:11:21,204
The solution is to gradually
modernize legacy systems by

168
00:11:21,224 --> 00:11:26,104
introducing APIs or wrapping them
with automation where possible.

169
00:11:26,764 --> 00:11:29,094
Then finally at number six,
what's the reality here?

170
00:11:29,724 --> 00:11:35,214
The reality is that implementing
DevSecOps can require new tools, training,

171
00:11:35,854 --> 00:11:37,944
and possibly additional staffing.

172
00:11:38,494 --> 00:11:43,409
The challenge is teams may face
budget limitations Or resource

173
00:11:43,409 --> 00:11:45,359
constraints that slow adoption.

174
00:11:46,239 --> 00:11:47,109
So what's the solution?

175
00:11:47,119 --> 00:11:50,729
Start with open source tools
and then gradually scale up.

176
00:11:51,359 --> 00:11:54,959
Demonstrate cost savings
from reduced vulnerabilities.

177
00:11:55,284 --> 00:11:58,694
and faster releases to
justify further investment.

178
00:11:59,194 --> 00:12:03,124
So now, imagine a coffee
shop without CCTV cameras.

179
00:12:03,794 --> 00:12:07,554
Do you think your coffee business
would last more than five years?

180
00:12:08,104 --> 00:12:09,374
it's challenging, sir.

181
00:12:10,174 --> 00:12:14,754
The coffee shop can still run,
but without CCTV cameras, the

182
00:12:14,754 --> 00:12:19,274
shop would be vulnerable to theft,
vandalism, and other security risks.

183
00:12:19,774 --> 00:12:23,364
Customers and staff would feel
unsafe and without a way to

184
00:12:23,374 --> 00:12:25,194
monitor or review incidents.

185
00:12:25,714 --> 00:12:28,644
It would be difficult to
address problems effectively.

186
00:12:29,334 --> 00:12:34,324
Just like in a coffee shop in
software development without property

187
00:12:34,544 --> 00:12:38,284
security measures like continuous
monitoring and automated tests.

188
00:12:38,654 --> 00:12:43,164
Your system could be at risk of
vulnerabilities or cyber attacks.

189
00:12:43,164 --> 00:12:46,934
In DevSecOps, we integrate
security right from the start.

190
00:12:47,449 --> 00:12:51,359
To prevent such threats and ensure
that the business, or in this

191
00:12:51,359 --> 00:12:55,439
case, the software remains secure
and functional in the long run.

192
00:12:55,939 --> 00:12:57,039
that's pretty much it.

193
00:12:57,539 --> 00:12:59,689
Hope you learned something new.

194
00:13:00,209 --> 00:13:00,919
Bye bye.

195
00:13:00,999 --> 00:13:01,559
Thank you.

