1
00:00:00,500 --> 00:00:01,310
Hello everyone.

2
00:00:01,460 --> 00:00:07,089
I'm Ti Ira Herrera an independent
researcher based in Canada.

3
00:00:07,539 --> 00:00:13,180
Today I'll show how cross cloud campaign
analytics and modern JavaScript come

4
00:00:13,180 --> 00:00:18,400
together to deliver past trustworthy
in insights for marketing and growth.

5
00:00:18,900 --> 00:00:24,839
So if we, if you have ever waited
on a slow dashboard or try to

6
00:00:24,839 --> 00:00:29,109
connect data that lives in different
places the session is for you.

7
00:00:29,609 --> 00:00:31,169
So here's our path.

8
00:00:31,229 --> 00:00:35,729
I will outline the real
problems, team faces, and then

9
00:00:35,819 --> 00:00:37,559
the end to end architecture.

10
00:00:38,059 --> 00:00:44,359
I will open the data engineering layer
and connect it to the browser, explain the

11
00:00:44,419 --> 00:00:50,789
react patterns, show how we handle large
data sets, discuss embedding business

12
00:00:50,789 --> 00:00:56,789
intelligence and end with storytelling,
role-based views and performance

13
00:00:56,789 --> 00:01:02,729
disciplines, collaboration and concise
takeaways before a brief set of questions.

14
00:01:03,229 --> 00:01:05,799
So here the modern analytics challenge.

15
00:01:05,979 --> 00:01:10,960
So the marketing teams collect more
data than ever, and yet struggle

16
00:01:10,960 --> 00:01:13,210
to answer simple questions quickly.

17
00:01:13,839 --> 00:01:15,549
Channels report differently.

18
00:01:16,059 --> 00:01:19,779
Schemas drift and extract arrive late.

19
00:01:20,769 --> 00:01:24,459
So the confident erodes when
two dashboards disagree.

20
00:01:25,149 --> 00:01:31,659
So what decision markers want
is fresh, reliable number

21
00:01:31,749 --> 00:01:34,089
that respond as they explore.

22
00:01:34,689 --> 00:01:39,039
JavaScript is the bridge between
the distributed computation

23
00:01:39,369 --> 00:01:41,049
and the human understanding.

24
00:01:41,349 --> 00:01:47,469
It turns, aggregates and applications
into an interface that invites discovery.

25
00:01:48,309 --> 00:01:56,470
Imagine a campaign manager asking
which creative drove a stronger re

26
00:01:56,619 --> 00:02:01,509
returns last week in major cities
after a specific budget share.

27
00:02:02,289 --> 00:02:08,109
So the backend may already hold
the truth, but without a responsive

28
00:02:08,109 --> 00:02:10,359
interface, it stays locked away.

29
00:02:10,720 --> 00:02:16,450
Our aim is to reduce the distance between
the question and a trustworthy answer.

30
00:02:16,950 --> 00:02:21,970
So here is the architecture of
the fueling market intelligence.

31
00:02:22,660 --> 00:02:29,564
So a picture of flow from ingest to
transform to serve to visualization.

32
00:02:29,894 --> 00:02:34,754
So data first lands in the
durable object store that welcomes

33
00:02:34,754 --> 00:02:37,274
partitioning by date and by the source.

34
00:02:37,774 --> 00:02:41,885
Orchestration service schedules,
movement and health checks.

35
00:02:41,885 --> 00:02:47,844
So late or missing data is obvious
rather than mysterious, scalable

36
00:02:47,844 --> 00:02:54,504
compute performs a transformation
and model scoring, producing tidy

37
00:02:54,504 --> 00:02:57,124
queries which have like ready table.

38
00:02:57,624 --> 00:03:02,664
We expose only the shapes that the
application needs through the guarded

39
00:03:02,724 --> 00:03:08,814
application programming interface with
strict limit caching and Page Nation.

40
00:03:09,314 --> 00:03:15,404
The React application is the translation
layer that turns small, precise payloads

41
00:03:15,434 --> 00:03:18,074
into filters, narrators, and chart.

42
00:03:18,574 --> 00:03:22,324
Each stage is optimized
for a different constraint.

43
00:03:23,134 --> 00:03:26,584
Storage focuses on cost and durability.

44
00:03:27,084 --> 00:03:30,264
Compute focuses on
throughput and correctness.

45
00:03:30,764 --> 00:03:34,064
Serving focuses on safety and latency.

46
00:03:34,564 --> 00:03:38,284
The browser focuses on
clarity and the flow.

47
00:03:38,784 --> 00:03:40,524
Why do we need cross-cloud?

48
00:03:41,024 --> 00:03:46,664
Cross Cloud is a choice to combine
strengths while keeping options

49
00:03:46,694 --> 00:03:53,224
open storage lives where economics
and ecosystems are stor strongest.

50
00:03:53,944 --> 00:03:58,564
Transformation runs where
entity identity, governance,

51
00:03:58,564 --> 00:04:00,539
and managed sparks you the team.

52
00:04:01,039 --> 00:04:06,739
We reduce data movement by processing
close to sources and returning aggregates

53
00:04:06,739 --> 00:04:13,209
that the user will actually consume when
prices, compliance and scale needs change.

54
00:04:13,420 --> 00:04:17,319
The system can shift workloads
without rewriting the entire

55
00:04:17,319 --> 00:04:22,809
product because the contract to
the front end remains constant.

56
00:04:23,309 --> 00:04:28,499
When we are deep diving into the
data engineering, we majorly focus

57
00:04:28,499 --> 00:04:33,989
on the storage layer history,
Azure Data Factory for ETL and

58
00:04:33,989 --> 00:04:35,969
Azure Databricks for processing.

59
00:04:36,960 --> 00:04:43,259
So in the lake we partition by
day and by source, so queries

60
00:04:43,259 --> 00:04:45,329
scan only what they need.

61
00:04:45,829 --> 00:04:52,459
Lifecycle rules push cold data to
cheaper triers without breaking lineage.

62
00:04:52,969 --> 00:04:58,609
Incoming drops are checked with
manifest files, so missing partitions

63
00:04:58,609 --> 00:05:01,249
and record count mismatches surface.

64
00:05:01,249 --> 00:05:06,639
Early in orchestration, we run
batch and micro batch pipelines.

65
00:05:07,139 --> 00:05:10,829
These have the parameters
for the dates sources.

66
00:05:10,949 --> 00:05:13,439
So one pattern covers many feeds.

67
00:05:13,939 --> 00:05:19,219
Let's include the failing step,
the impacted partition, and a list

68
00:05:19,399 --> 00:05:25,269
link to the run, which shortens
the recovery in the compute layer.

69
00:05:25,479 --> 00:05:32,529
We store curated tables in columnar
formats with constrained schema evolution.

70
00:05:33,504 --> 00:05:39,564
Deterministic, transforms, make
outputs, reproducible, attribution,

71
00:05:39,564 --> 00:05:44,054
logic, and deduplication
happen here not in the browser.

72
00:05:44,924 --> 00:05:49,124
And aggregates arrive at the
cranes that product managers

73
00:05:49,184 --> 00:05:54,804
actually use, such as daily by
geography, by channel, by creative.

74
00:05:55,304 --> 00:06:01,394
So role level security applies at the
query time using user identity claims.

75
00:06:01,694 --> 00:06:05,654
So each tenant sees only their own groups.

76
00:06:06,464 --> 00:06:11,654
The serving layer enforces payload
caps and compresses responses.

77
00:06:12,014 --> 00:06:16,109
Hot endpoints benefit from
short server side caches.

78
00:06:16,394 --> 00:06:19,634
So surges do not herd downstream systems.

79
00:06:20,549 --> 00:06:26,960
What reaches the browser is small and
honest and reliable and repeatable.

80
00:06:27,460 --> 00:06:35,020
Processing scale in numbers, these have
like the daily data volumes even per

81
00:06:35,020 --> 00:06:37,750
day and query response and the uptime.

82
00:06:37,750 --> 00:06:38,080
SLA.

83
00:06:38,580 --> 00:06:45,710
So the daily data volume can be
anywhere between one TB to number of

84
00:06:45,710 --> 00:06:52,810
gbs and even per day individual user
interactions are like tracked and

85
00:06:52,810 --> 00:06:55,570
analyzed across like all the campaigns.

86
00:06:56,070 --> 00:07:03,270
So the SLA time is maintained to keep
guaranteed availability of the dashboards.

87
00:07:03,770 --> 00:07:09,430
So from backend to the browser is the
point where the understanding happens.

88
00:07:10,060 --> 00:07:14,500
We request only what we need,
render quickly, and design

89
00:07:14,500 --> 00:07:16,960
interactions around real questions.

90
00:07:17,650 --> 00:07:24,760
A small initial payload confirms that
the system is responsive, deeper details

91
00:07:24,820 --> 00:07:27,040
arrive when the user shows intents.

92
00:07:27,540 --> 00:07:30,960
The feeling should be of the
focus rather than the noise.

93
00:07:31,460 --> 00:07:37,640
Here is the React dashboard architecture,
which has four major components like the

94
00:07:37,640 --> 00:07:43,065
component library, state management, API
integration, and the performance layer.

95
00:07:43,565 --> 00:07:47,555
In React, we separate data
state and presentation.

96
00:07:47,615 --> 00:07:51,935
So the code base stays
calm and the features grow.

97
00:07:52,435 --> 00:07:53,335
Reusable.

98
00:07:53,335 --> 00:08:00,495
Chart components share the same grammar,
so title access, and empty states.

99
00:08:00,945 --> 00:08:07,035
Feel familiar filters such as date,
geography, channel, and creative.

100
00:08:07,970 --> 00:08:12,120
Live in the central store
with memorized selectors that

101
00:08:12,120 --> 00:08:14,070
prevent unnecessary updates.

102
00:08:14,570 --> 00:08:18,740
Network re requests automatically
include authentication.

103
00:08:19,160 --> 00:08:26,090
The retry with care and still requests
are canceled when the user changes direct.

104
00:08:26,590 --> 00:08:31,030
The interface updates immediately
when the, when a filter changes and

105
00:08:31,030 --> 00:08:33,730
the data fills in a moment later.

106
00:08:34,330 --> 00:08:38,350
This patent gives confidence
that every action was understood.

107
00:08:38,850 --> 00:08:43,850
So handling the large data sets on
the client side, large data sets

108
00:08:43,850 --> 00:08:46,370
do not require heavy interfaces.

109
00:08:46,835 --> 00:08:52,265
We virtualize long tables, so the
document only contains what is visible.

110
00:08:52,625 --> 00:08:56,855
We load progressively sending
a high level summary first and

111
00:08:56,855 --> 00:08:58,715
fetching details on demand.

112
00:08:59,555 --> 00:09:05,975
Small roll ups, run in background worker,
so the main thread stays responsive.

113
00:09:06,695 --> 00:09:12,275
Rapid filter changes are ou, so
only the final intent triggers work.

114
00:09:12,775 --> 00:09:15,265
Payloads are cabbed and compressed.

115
00:09:15,265 --> 00:09:20,185
So ordinary laptops on
ordinary networks feel fast.

116
00:09:20,685 --> 00:09:26,385
Coming to the integration pattern with
the power ai, many organization rely on

117
00:09:26,385 --> 00:09:29,115
the existing business intelligent assets.

118
00:09:29,625 --> 00:09:34,485
We embed those reports so they
feel native single sign on

119
00:09:34,725 --> 00:09:37,065
carries identity into the frame.

120
00:09:37,950 --> 00:09:43,890
Event handlers keep filters synchronized
in both directions, so a choice in react

121
00:09:43,890 --> 00:09:49,890
reflects in the embedded visual in visual,
and a selection in the visual updates.

122
00:09:49,890 --> 00:09:54,990
The surrounding state exports to
portable documents and spreadsheets

123
00:09:55,050 --> 00:09:59,760
are initiated from application
itself, which keeps people in one

124
00:09:59,760 --> 00:10:02,070
place while sharing the results.

125
00:10:02,570 --> 00:10:07,100
So visualization, storytelling
with the data, every chart

126
00:10:07,160 --> 00:10:09,350
should speak in full sentence.

127
00:10:09,860 --> 00:10:16,550
The title states the conclusion rather
than the category such as Creative

128
00:10:16,550 --> 00:10:22,775
B outperformed creative A by 18% in
cities with population above 1 million.

129
00:10:23,275 --> 00:10:30,085
A timeline shows what changed before
and after the key end benchmarks.

130
00:10:30,085 --> 00:10:33,625
Provide context for whether
a number is good or may.

131
00:10:33,625 --> 00:10:39,975
Really loud and annotations connect
movement in line to business decisions,

132
00:10:40,245 --> 00:10:43,695
which is how numbers become actions,

133
00:10:44,195 --> 00:10:45,965
role-based analytics view.

134
00:10:46,465 --> 00:10:53,785
So executives need a comp summary
of return on investment spend,

135
00:10:53,785 --> 00:10:56,215
pacing and notable movers.

136
00:10:57,145 --> 00:11:02,485
Campaign manager, on the other hand,
would require a tactical surface

137
00:11:02,490 --> 00:11:07,630
that crosses channel, creative and
geography with a clear next step.

138
00:11:08,130 --> 00:11:13,710
And analysts need freedom to
slice and export the data.

139
00:11:14,640 --> 00:11:20,310
We present distinct entry points
that share a single source of truth

140
00:11:20,810 --> 00:11:24,410
performance of optimization strategies.

141
00:11:24,910 --> 00:11:30,380
There are majorly four strategies we could
focus on starting with the code splitting.

142
00:11:30,785 --> 00:11:36,145
Smart caching data page Nation
debouncing and trotting performance

143
00:11:36,145 --> 00:11:37,915
is not a finishing touch.

144
00:11:38,065 --> 00:11:39,145
It is a promise.

145
00:11:39,355 --> 00:11:44,275
We split codes, so heavy
areas load only when visited.

146
00:11:44,775 --> 00:11:49,815
We cache on the server and in the
browser with lifetimes that match

147
00:11:49,965 --> 00:11:56,025
how fast the data changes, we page
it on the server and prefetch the

148
00:11:56,025 --> 00:11:58,185
next page while the user reads.

149
00:11:58,685 --> 00:12:05,285
We track time to interactive
first content, full paint and the

150
00:12:05,285 --> 00:12:10,415
95th percentile of application
programming interface latency.

151
00:12:10,805 --> 00:12:15,305
And we treat regression alerts as
product bugs to fix immediately.

152
00:12:15,805 --> 00:12:22,020
Speed comes from alignment, and we
write interface contracts first, so

153
00:12:22,020 --> 00:12:23,970
the front end and the back end build.

154
00:12:24,600 --> 00:12:31,070
In parallel, we review payload sizes,
query patterns, and frame rates together.

155
00:12:31,910 --> 00:12:37,070
We keep a living page for
decisions and objectives, so the

156
00:12:37,070 --> 00:12:39,680
newcomers join the story quickly.

157
00:12:40,610 --> 00:12:46,760
After incidents, we write short
harness notes about what changed

158
00:12:47,420 --> 00:12:48,890
that freedom keeps us shipping.

159
00:12:49,390 --> 00:12:54,600
So the key takeaways that I got from
this project is that JavaScript is

160
00:12:54,600 --> 00:12:59,670
the bridge from complex cross-cloud
analytics to human decisions.

161
00:13:00,570 --> 00:13:02,610
Performance is not negotiable.

162
00:13:03,180 --> 00:13:08,970
The biggest wins appear when platform
data and design teams works as

163
00:13:09,210 --> 00:13:10,710
one and measure their promises.

164
00:13:11,210 --> 00:13:15,790
I am happy to take a few questions if
you are deciding what belongs on the

165
00:13:15,790 --> 00:13:17,920
server and what belongs in the browser.

166
00:13:17,920 --> 00:13:22,540
Keep joins and heavy aggregation
on the server and leap only small

167
00:13:22,540 --> 00:13:24,430
roll-ups to the background worker.

168
00:13:24,820 --> 00:13:30,445
If you are thinking about tenant safety,
enforce roll level filters on the

169
00:13:30,860 --> 00:13:36,320
server using identity claims and never
rely on the client provided filters.

170
00:13:36,635 --> 00:13:41,435
If your stack uses a different
warehouse or cloud, the architecture

171
00:13:41,435 --> 00:13:46,805
is still portable because the contract
to the browser remains the constant.

172
00:13:47,375 --> 00:13:48,665
Thank you for your time.

173
00:13:48,945 --> 00:13:53,715
I'm ra and if this session sparks
some ideas for your ATech stack,

174
00:13:53,985 --> 00:13:57,375
your friend and performance or
your cross cloud strategies, I'm

175
00:13:57,375 --> 00:13:59,835
glad to continue the conversation.

176
00:14:00,295 --> 00:14:01,885
Enjoy the rest of the conference.

