1
00:00:00,290 --> 00:00:05,289
Hi everyone, my name is Bianca Popo and
I am a DevOps engineer at Analog Devices.

2
00:00:05,859 --> 00:00:09,530
Thank you for joining me today for
my presentation on GitHub integration

3
00:00:09,800 --> 00:00:11,290
within a private Jenkins server.

4
00:00:11,790 --> 00:00:15,070
The problem that we're going to
tackle during this presentation

5
00:00:15,410 --> 00:00:19,619
is integrating a privately hosted
Jenkins server with GitHub.

6
00:00:20,480 --> 00:00:23,980
The biggest hurdle in achieving
this would be ensuring that

7
00:00:23,980 --> 00:00:25,460
the server is not compromised.

8
00:00:25,920 --> 00:00:31,970
library tags, while also providing as much
information as possible to contributors

9
00:00:32,080 --> 00:00:34,200
about the status of their projects.

10
00:00:34,700 --> 00:00:38,480
The first question someone may
ask is, why not just use cloud?

11
00:00:39,159 --> 00:00:43,930
There are so many available CI CD cloud
services that offer out of the box

12
00:00:43,930 --> 00:00:49,540
solutions that are already integrated
with GitHub, for example, GitHub Actions,

13
00:00:49,930 --> 00:00:52,609
Azure Pipelines, GitLab, and so on.

14
00:00:53,109 --> 00:00:56,989
And these are also highly secure,
so why not just use these?

15
00:00:57,489 --> 00:01:02,059
The answer is that the software
product that is tested may impose some

16
00:01:02,059 --> 00:01:04,999
limitations on the CI CD infrastructure.

17
00:01:05,819 --> 00:01:09,089
These are only some examples
that I've encountered so far.

18
00:01:09,589 --> 00:01:14,159
For example, the produced artifacts
might be too big, and most cloud

19
00:01:14,159 --> 00:01:17,739
services impose a limit on the
artifact size that they can store.

20
00:01:18,239 --> 00:01:22,419
or the software product may require
third party tools for building or

21
00:01:22,419 --> 00:01:27,369
testing, which may be too big or
they may require a paid license.

22
00:01:27,869 --> 00:01:30,399
And last but not least,
building the software project

23
00:01:30,499 --> 00:01:31,889
may be too resource intensive.

24
00:01:32,389 --> 00:01:38,050
There's also a possibility that some
developers might just prefer a self

25
00:01:38,050 --> 00:01:40,150
hosted open source CICD platform.

26
00:01:40,650 --> 00:01:47,535
Based on a 2023 study made by JetBrains,
Jenkins is the most widely used CI

27
00:01:47,545 --> 00:01:50,085
system among developers and companies.

28
00:01:50,705 --> 00:01:53,785
So this presentation is going
to mostly focus on Jenkins.

29
00:01:54,285 --> 00:01:55,445
Let's visualize our goal.

30
00:01:56,254 --> 00:01:58,055
And for that, I've prepared this diagram.

31
00:01:58,905 --> 00:02:03,085
In the center there is our Jenkins
server that is inside a private network.

32
00:02:04,075 --> 00:02:07,055
This server contains all of
our build and test pipelines.

33
00:02:08,030 --> 00:02:12,230
Now, we could have this server run the
pipelines once in a while, just to check

34
00:02:12,230 --> 00:02:16,809
that our application doesn't contain any
bugs, or we could manually run it every

35
00:02:16,809 --> 00:02:19,200
time a commit is added to the main branch.

36
00:02:19,910 --> 00:02:23,980
But this approach would not work for
large repositories, which have frequent

37
00:02:24,019 --> 00:02:25,399
commits and many pull requests.

38
00:02:25,899 --> 00:02:29,629
We could drastically improve the bug
finding process if we could associate

39
00:02:29,629 --> 00:02:31,049
a specific build with a commit.

40
00:02:31,769 --> 00:02:35,969
This means that every time a commit
is made to an important branch, such

41
00:02:35,969 --> 00:02:40,259
as main or release branches, the
pipelines on our server should be

42
00:02:40,259 --> 00:02:42,319
triggered and verify that very commit.

43
00:02:42,819 --> 00:02:46,529
Next, we would like to make these
results available to all contributors

44
00:02:46,909 --> 00:02:48,699
and non contributors on GitHub.

45
00:02:49,199 --> 00:02:53,099
But we can't just provide them access
to our local Jenkins instance, because

46
00:02:53,139 --> 00:02:54,609
that could expose us to attacks.

47
00:02:55,109 --> 00:02:58,459
So now that we've defined our
goals, let's take a look at what's

48
00:02:58,459 --> 00:02:59,729
stopping us from achieving them.

49
00:03:00,569 --> 00:03:04,779
In this next diagram, we can see that our
local Jenkins instance within our private

50
00:03:04,789 --> 00:03:06,689
network is protected by a firewall.

51
00:03:07,189 --> 00:03:11,069
This means that while traffic can
go from our server to the GitHub

52
00:03:11,069 --> 00:03:15,319
servers, our server can't accept
any incoming traffic from GitHub.

53
00:03:15,819 --> 00:03:20,659
If our aim is to trigger a Jenkins
pipeline each time a commit or PR is

54
00:03:20,659 --> 00:03:25,419
made, we would need to enable webhook
triggers inside our repository settings.

55
00:03:26,339 --> 00:03:30,769
These webhook triggers can be configured
to send a notification to a certain

56
00:03:30,769 --> 00:03:33,739
URL every time a certain event occurs.

57
00:03:34,409 --> 00:03:38,839
For example, push, pull request
update, new issue, and so on.

58
00:03:39,649 --> 00:03:43,169
If we try and configure a webhook
trigger to send notifications to

59
00:03:43,169 --> 00:03:47,709
our local Jenkins server, we will
notice that our server does not

60
00:03:47,709 --> 00:03:52,239
receive any data sent from GitHub,
due to this firewall being in place.

61
00:03:52,739 --> 00:03:57,079
The second issue would be displaying the
results of the pipeline runs on GitHub,

62
00:03:57,699 --> 00:03:59,889
without compromising our server security.

63
00:04:00,759 --> 00:04:04,369
We'll talk more about that in
a second, but first let's try

64
00:04:04,369 --> 00:04:05,519
and solve the first issue.

65
00:04:06,019 --> 00:04:08,669
We've established that we need
to enable communication from

66
00:04:08,669 --> 00:04:10,199
GitHub to our local server.

67
00:04:10,709 --> 00:04:13,969
Now, we wouldn't necessarily want
to disable the firewall, since

68
00:04:14,009 --> 00:04:17,309
that's what's keeping our private
infrastructure, well, private.

69
00:04:17,809 --> 00:04:21,339
There are a number of solutions to this
problem, but the most straightforward

70
00:04:21,339 --> 00:04:23,089
one would be to set up web tunneling.

71
00:04:23,589 --> 00:04:28,069
Web tunneling is used to create a secure
path between your local machine and

72
00:04:28,069 --> 00:04:29,949
another server to send data safely.

73
00:04:30,849 --> 00:04:34,449
It works by encrypting data,
routing it through the tunnel, and

74
00:04:34,449 --> 00:04:36,099
forwarding it to its destination.

75
00:04:36,719 --> 00:04:40,399
The most popular web tunneling
service is NgRock, because of

76
00:04:40,399 --> 00:04:42,459
its reliability and security.

77
00:04:43,299 --> 00:04:47,449
We can see in this diagram that running
the data through this web tunnel safely

78
00:04:47,599 --> 00:04:49,369
bypasses the private network's firewall.

79
00:04:50,324 --> 00:04:53,844
When running the ng rok client
on the local server with a chosen

80
00:04:53,844 --> 00:04:58,304
port, ng rok creates a secure tunnel
between that specific endpoint on

81
00:04:58,304 --> 00:05:01,014
your machine and the ng rok servers.

82
00:05:01,594 --> 00:05:04,814
Their servers then forward this
data to the correct location,

83
00:05:04,894 --> 00:05:06,434
in our case, the github servers.

84
00:05:06,934 --> 00:05:10,724
This doesn't mean that ng rok can see
your data though, because it offers

85
00:05:10,794 --> 00:05:12,354
end to end encryption of your data.

86
00:05:12,854 --> 00:05:15,724
With enabled access through
our web tunnel, we can go ahead

87
00:05:15,754 --> 00:05:18,934
and set up our pipelines to
be triggered by GitHub events.

88
00:05:19,774 --> 00:05:23,604
The webhook triggers sent by
GitHub will have to be interpreted

89
00:05:23,694 --> 00:05:24,794
and processed by Jenkins.

90
00:05:25,294 --> 00:05:28,904
There are several plugins that
offer such functionalities, but

91
00:05:28,904 --> 00:05:30,834
these are the most popular ones.

92
00:05:30,835 --> 00:05:35,664
A GitHub plugin offers a lot of
functionalities, but the one we're

93
00:05:35,664 --> 00:05:39,154
interested in is the processing
of push events sent from GitHub.

94
00:05:39,654 --> 00:05:42,734
So, this will only work for new commits.

95
00:05:43,234 --> 00:05:47,464
Each one of these plugins has a
different endpoint that accepts requests.

96
00:05:48,464 --> 00:05:52,964
In the case of the GitHub plugin,
the endpoint is github webhook.

97
00:05:53,464 --> 00:05:56,554
You can see in the image below
that I've configured GitHub to send

98
00:05:56,554 --> 00:06:01,204
requests to the interrupt tunnel,
followed by this specific endpoint.

99
00:06:01,704 --> 00:06:05,944
After the plugin is installed on
Jenkins, inside the Job Configuration

100
00:06:05,944 --> 00:06:09,334
tab, you will now have the option
to trigger the job automatically.

101
00:06:09,834 --> 00:06:14,034
The same is valid for the GitHub
Pull Request Builder plugin, only

102
00:06:14,034 --> 00:06:17,404
this plugin accepts the issue
comment or pull request events.

103
00:06:17,904 --> 00:06:20,584
The endpoint for this plugin is ghprbhook.

104
00:06:21,084 --> 00:06:25,924
The option to select inside the Jenkins
Job Config is GitHub Pull Request Builder.

105
00:06:26,424 --> 00:06:30,324
Just a heads up, this plugin has
some security vulnerabilities,

106
00:06:30,394 --> 00:06:33,274
so you should probably make
sure you configure it properly.

107
00:06:33,774 --> 00:06:38,304
The generic webhook trigger plugin
is a plugin that accepts all kinds of

108
00:06:38,374 --> 00:06:43,314
HTTP requests, so it's more flexible,
but less configured for GitHub itself.

109
00:06:44,294 --> 00:06:48,244
Nevertheless, you get more control
over what happens to your triggers.

110
00:06:48,744 --> 00:06:53,714
After configuring GitHub webhooks, you
should see a job get triggered every

111
00:06:53,714 --> 00:06:55,904
time a commit or pull request is made.

112
00:06:56,404 --> 00:07:00,484
We still have one more issue left
though, and that is how we're going to

113
00:07:00,624 --> 00:07:03,134
let contributors know the test results.

114
00:07:03,634 --> 00:07:08,314
So, our goal here is to update the
status on each commit or pull request

115
00:07:08,604 --> 00:07:10,384
after the Jenkins job is finished.

116
00:07:11,384 --> 00:07:14,654
Inside the Jenkins job, you could
use the GitHub plugin once again.

117
00:07:15,394 --> 00:07:19,004
It offers highly customizable
solutions for updating the status.

118
00:07:19,504 --> 00:07:23,634
You can run it with parameters, such
as the status message, the context,

119
00:07:24,174 --> 00:07:26,174
the result, or the reference URL.

120
00:07:26,864 --> 00:07:30,744
The latter is the most important one in
my opinion, since it's what populates

121
00:07:30,744 --> 00:07:33,874
the hyperlink under the details
section of the GitHub check stack.

122
00:07:34,374 --> 00:07:39,284
By default, the value of this parameter
is set to be the URL of the Jenkins server

123
00:07:39,284 --> 00:07:42,104
itself, so not the ngrok web tunnel.

124
00:07:42,604 --> 00:07:47,124
This is an issue, because it could expose
your private IP to anyone on GitHub.

125
00:07:47,624 --> 00:07:52,744
You could set it to the ngrok web
tunnel URL, but then anyone who wants

126
00:07:52,744 --> 00:07:57,034
to see the results would have to either
authenticate on your Jenkins server,

127
00:07:57,449 --> 00:08:01,349
Or you would have to provide anonymous
users with read all access rights.

128
00:08:01,849 --> 00:08:05,969
Neither of these options are secure
and could expose malicious actors

129
00:08:06,019 --> 00:08:07,979
to your internal infrastructure.

130
00:08:08,039 --> 00:08:12,079
So how can we make sure that anyone
can see the test results without

131
00:08:12,109 --> 00:08:14,079
compromising on infrastructure security?

132
00:08:14,579 --> 00:08:17,939
You could process these results and
then host them on a public webpage.

133
00:08:18,439 --> 00:08:21,089
A quick and easy solution
would be to use guests.

134
00:08:21,589 --> 00:08:26,009
These are small Git repositories hosted
by GitHub, and they are primarily

135
00:08:26,019 --> 00:08:27,759
used for easily sharing code segments.

136
00:08:28,259 --> 00:08:32,849
Gists support markdown, so you could
pre process the Jenkins output so that

137
00:08:32,849 --> 00:08:37,149
it's easier to read and understand
by all contributors, even those

138
00:08:37,219 --> 00:08:38,569
that are unfamiliar with Jenkins.

139
00:08:39,069 --> 00:08:42,159
You should also sanitize this
output before publishing the

140
00:08:42,299 --> 00:08:45,779
gist, so that no credentials or
secrets are accidentally posted.

141
00:08:46,279 --> 00:08:50,059
Creating GISTs is also quite easy
to integrate into your existing

142
00:08:50,119 --> 00:08:54,309
pipeline scripts, since GitHub
offers a command line interface

143
00:08:54,609 --> 00:08:56,169
that has such a functionality.

144
00:08:56,669 --> 00:09:01,329
In this way, you could easily add a
PostBuild stage into your pipelines,

145
00:09:01,449 --> 00:09:04,984
which handles preprocessing and
posting the job output to GIST.

146
00:09:04,985 --> 00:09:11,954
In this example image, I had to create
pipelines for a repository which

147
00:09:11,954 --> 00:09:16,024
contains multiple projects that need
to be built and tested separately.

148
00:09:16,524 --> 00:09:21,154
So, my approach with this was to
generate a markdown table containing

149
00:09:21,164 --> 00:09:26,484
the status of each project and whatever
errors or warnings were thrown up

150
00:09:26,554 --> 00:09:28,114
during the build or the test stages.

151
00:09:28,614 --> 00:09:32,554
You could post the entire Jenkins
console output, or You could get

152
00:09:32,594 --> 00:09:37,154
creative on how to automatically prepare
the output into a nice final form

153
00:09:37,244 --> 00:09:38,894
for your repository's contributors.

154
00:09:39,394 --> 00:09:43,194
In the rightmost column in this
example, you can see the results

155
00:09:43,214 --> 00:09:44,844
from another pipeline actually.

156
00:09:45,474 --> 00:09:49,954
So this method can be used to merge
results from multiple pipelines as well.

157
00:09:50,454 --> 00:09:54,154
This other pipeline tests each
available project directly on

158
00:09:54,464 --> 00:09:56,334
the hardware on a remote server.

159
00:09:56,834 --> 00:10:00,214
If you're interested in that, one
of my colleagues has a presentation

160
00:10:00,224 --> 00:10:05,384
on that topic called Advanced Test
Harness Infrastructure for Validating

161
00:10:05,454 --> 00:10:09,874
ARM and FPGA Based Systems, which
is also a part of this event.

162
00:10:10,374 --> 00:10:14,714
I would recommend setting up a bot
account for your repository, which will

163
00:10:14,724 --> 00:10:17,534
be responsible for setting the status.

164
00:10:18,004 --> 00:10:20,524
This account will need
reading and writing rights.

165
00:10:21,024 --> 00:10:24,964
Now that we tackled the last issue
as well, you should get a fully

166
00:10:25,004 --> 00:10:29,464
automated process of building and
testing your GitHub projects, and

167
00:10:29,604 --> 00:10:33,484
have the Jenkins results posted
back to GitHub in a nice format.

168
00:10:33,984 --> 00:10:37,834
The screenshot is of a pull request
that shows our Jenkins job result

169
00:10:38,204 --> 00:10:39,844
posted inside the Checks tab.

170
00:10:40,344 --> 00:10:44,894
Before ending this presentation, let's
recap what we achieved and highlight

171
00:10:44,944 --> 00:10:46,984
some benefits that came from all this.

172
00:10:47,484 --> 00:10:51,714
We managed to automate the process
of building and testing our GitHub

173
00:10:51,724 --> 00:10:53,874
projects on our local Jenkins server.

174
00:10:54,374 --> 00:10:58,004
We have also set up a process
of automatically posting back

175
00:10:58,054 --> 00:11:02,084
the Jenkins job results, and we
did all this while maintaining

176
00:11:02,124 --> 00:11:03,864
a secure testing infrastructure.

177
00:11:04,364 --> 00:11:09,254
This means that it will now be easier
to catch bugs, since we can identify

178
00:11:09,264 --> 00:11:10,964
the faulty commit at any time.

179
00:11:11,944 --> 00:11:17,054
We also have a more detailed history for
projects, because each commit now has

180
00:11:17,074 --> 00:11:19,534
the full test details attached to it.

181
00:11:20,034 --> 00:11:24,074
And in the case of pull requests,
the review process is much easier,

182
00:11:24,404 --> 00:11:28,044
because each pull request is tested
in the same controlled environment.

183
00:11:28,764 --> 00:11:32,484
So we won't get any more it
works on my computer bugs.

184
00:11:32,984 --> 00:11:37,454
Both the reviewers and the contributors
will have access to the test results,

185
00:11:38,004 --> 00:11:41,484
so everyone is on the same page
when reviewing the proposed changes.

186
00:11:41,984 --> 00:11:45,244
If you have any questions or if
you'd like to send me some feedback,

187
00:11:45,844 --> 00:11:50,554
feel free to message me on LinkedIn
or hit me up on my email here.

188
00:11:51,494 --> 00:11:54,974
Thank you so much for tuning into
my presentation and happy coding.

