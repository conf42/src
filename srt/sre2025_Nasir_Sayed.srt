1
00:00:00,500 --> 00:00:03,620
Jumping into how micro frontends
are changing the way big

2
00:00:03,620 --> 00:00:05,570
companies build their front ends.

3
00:00:06,020 --> 00:00:10,220
These big all in one monolith
system, comes with a lot of

4
00:00:10,220 --> 00:00:14,780
headaches, like everything being
connected too tightly, teams getting

5
00:00:14,780 --> 00:00:16,970
block and tricky deployments.

6
00:00:17,360 --> 00:00:19,880
Micro frontend, fix that
by splitting things into a

7
00:00:19,880 --> 00:00:22,430
smaller parts, separated parts.

8
00:00:22,700 --> 00:00:25,340
That way it easier to manage and scale.

9
00:00:25,669 --> 00:00:31,539
The shift isn't just some new trend, it's
really a future for the modern apps and

10
00:00:31,569 --> 00:00:37,359
with the AI stepping in, imagine the tools
that auto front end layouts based on user

11
00:00:37,359 --> 00:00:39,849
behavior pattern it closer than you think.

12
00:00:40,349 --> 00:00:43,289
Let's take a look at why
monolith front ends are tough.

13
00:00:43,799 --> 00:00:47,609
When things are tightly connected,
changing one part can break

14
00:00:47,609 --> 00:00:50,039
others that makes updates risky.

15
00:00:50,549 --> 00:00:52,439
Then you are got team bottleneck.

16
00:00:53,279 --> 00:00:58,709
When a lot of teams have to work on
the same code they get in each other

17
00:00:58,709 --> 00:01:04,160
ways and deployments, they need ton
of testing and perfect timing, which

18
00:01:04,160 --> 00:01:05,810
makes the whole thing stressful.

19
00:01:06,740 --> 00:01:11,660
Over time, this builds up a technical
depth and everything slow down.

20
00:01:12,140 --> 00:01:16,550
Microfund end helps by letting
you build a small, separated part

21
00:01:16,820 --> 00:01:18,560
that don't mess with each other.

22
00:01:19,490 --> 00:01:23,479
Microfund ends are all about
breaking things into smaller

23
00:01:23,479 --> 00:01:26,930
parts, each with its own clear job.

24
00:01:27,380 --> 00:01:31,670
Each part work on its own
and can use its own tools.

25
00:01:32,090 --> 00:01:35,720
That means a team can pick whatever
framework and the libraries.

26
00:01:36,104 --> 00:01:37,035
Work best for them.

27
00:01:37,664 --> 00:01:42,435
They can also fully own a section of the
products from building to launching it.

28
00:01:43,065 --> 00:01:48,164
And because each part can be launched
on its own, things move faster and there

29
00:01:48,164 --> 00:01:49,634
are fewer dependencies to deal with.

30
00:01:50,135 --> 00:01:54,455
It's a great way to give teams more
control and speed things up and

31
00:01:54,455 --> 00:01:59,015
in the future, AI could even help
spot which part of your monolith

32
00:01:59,075 --> 00:02:04,835
are ideal for splitting based on
code complexity and team velocity.

33
00:02:05,615 --> 00:02:09,755
When building microfund 10, there
are some important ideas to follow.

34
00:02:10,115 --> 00:02:12,185
First is domain driven design.

35
00:02:12,935 --> 00:02:17,105
That means we split the app
based on real business areas.

36
00:02:17,560 --> 00:02:21,370
On each part makes sense
and fit together well.

37
00:02:21,820 --> 00:02:26,380
Next is loose coupling, which
just means the different part.

38
00:02:26,380 --> 00:02:30,160
Don't rely too much on each
other so they can grow and

39
00:02:30,160 --> 00:02:31,810
change without breaking things.

40
00:02:32,680 --> 00:02:36,490
Resilient integrations
means if one part goes down.

41
00:02:37,400 --> 00:02:38,690
The rest will works fine.

42
00:02:39,050 --> 00:02:44,060
And finally, a team ownership means
each other in the charge of the P

43
00:02:44,060 --> 00:02:46,280
pieces from building to shipping it.

44
00:02:46,850 --> 00:02:51,590
That kind of ownership helps team
move faster and try new things.

45
00:02:52,280 --> 00:02:56,900
And in the future, AI power
assistance could even guide teams

46
00:02:56,900 --> 00:03:02,570
through a domain modeling base on
user flow and feature requests.

47
00:03:02,960 --> 00:03:04,970
There are three main.

48
00:03:05,855 --> 00:03:09,185
Way to build macro Frontends
first web component.

49
00:03:09,815 --> 00:03:12,065
These are browser friendly
customer elements.

50
00:03:12,785 --> 00:03:15,935
They use something called shadow
down to keep things separate, and

51
00:03:15,935 --> 00:03:17,674
they works with any framework.

52
00:03:18,245 --> 00:03:21,484
Second is Module Federation,
which comes with a web pack file.

53
00:03:21,845 --> 00:03:25,505
It let different apps shared
JavaScripts on the fly, which is

54
00:03:25,505 --> 00:03:28,174
great for loading only what you need.

55
00:03:29,015 --> 00:03:31,085
And lastly, the server side composition.

56
00:03:31,565 --> 00:03:34,415
This is when the backend put
together the different part.

57
00:03:35,269 --> 00:03:36,200
Into one page.

58
00:03:36,769 --> 00:03:42,259
Mostly, PHP language and awesome
for SEO and fast loading, so it's

59
00:03:42,259 --> 00:03:44,509
works well for the public websites.

60
00:03:44,959 --> 00:03:48,649
We are also seeing early tools that
use machine learning to recommend which

61
00:03:48,649 --> 00:03:54,739
strategy, web components model federation
or server side composition best fit your

62
00:03:54,799 --> 00:03:57,349
app based on traffic and usage pattern.

63
00:03:58,099 --> 00:03:59,209
Let's talk results.

64
00:03:59,290 --> 00:04:03,609
Teams using microphone time often
cut their deployment time by 60%.

65
00:04:04,209 --> 00:04:05,200
That's a big deal.

66
00:04:05,500 --> 00:04:10,450
Around 70% of teams say they have
more freedoms since they don't need

67
00:04:10,450 --> 00:04:12,520
to check in with everyone else.

68
00:04:12,520 --> 00:04:16,929
For every changes, rigs drop by
40% because changes are smaller and

69
00:04:16,929 --> 00:04:22,299
more focused, and the best of all
releases, release speed, triples

70
00:04:22,689 --> 00:04:24,189
this number, unadjusted theory.

71
00:04:24,189 --> 00:04:26,890
They come from the real
companies and the real project.

72
00:04:27,275 --> 00:04:31,684
You get faster innovation,
safer changes, and happier user.

73
00:04:32,345 --> 00:04:36,635
Some teams are already using AI
tools to test their front end

74
00:04:36,635 --> 00:04:41,264
automatically catching edge cases
and traditional test misses.

75
00:04:41,264 --> 00:04:44,419
In those cases, performance
is super important.

76
00:04:45,064 --> 00:04:48,214
Start by loading the most
important stuff first.

77
00:04:48,724 --> 00:04:55,354
There is called progressive lazy loading
weight to load the rest until it needed.

78
00:04:55,854 --> 00:05:01,554
Keep file sizes small by sharing common
stuff instead of repeating it, you

79
00:05:01,554 --> 00:05:06,984
share component libraries to keep things
consistent and avoid redoing work and

80
00:05:06,984 --> 00:05:09,204
set up real time performance monitoring.

81
00:05:09,744 --> 00:05:14,364
It's not just about keeping the site
online, it's about knowing how each

82
00:05:14,364 --> 00:05:18,884
part is doing so you can improve
things quickly and in the future.

83
00:05:18,884 --> 00:05:22,574
The AI power observability
tools are getting smart enough

84
00:05:22,574 --> 00:05:24,164
to predict performance dips.

85
00:05:24,289 --> 00:05:25,389
They happen.

86
00:05:25,959 --> 00:05:29,349
Big companies are already seeing
a great result with micro.

87
00:05:29,849 --> 00:05:36,659
HSBC redesigned their online banking
using their setup, and teams were able

88
00:05:36,659 --> 00:05:40,529
to deploy faster and cut bug by 70%.

89
00:05:41,279 --> 00:05:45,779
Ikea used micro frontend to build
out product pages by category,

90
00:05:46,319 --> 00:05:50,429
and each team focused on their own
sections made it better for customers.

91
00:05:51,059 --> 00:05:55,559
Providence helped build a separate
micro frontend for different part.

92
00:05:55,894 --> 00:06:00,604
Of their patient system, which held their
privacy rules and made update easier.

93
00:06:01,264 --> 00:06:04,564
These real stories shows that
microfunding really scales

94
00:06:04,564 --> 00:06:06,394
across all kind of industries.

95
00:06:07,054 --> 00:06:11,044
Some enterprises are even starting
to use machine learning to

96
00:06:11,044 --> 00:06:15,454
personalize microfund content based
on the real time user behavior.

97
00:06:15,724 --> 00:06:17,224
Of course, nothing.

98
00:06:17,524 --> 00:06:18,514
Is perfect.

99
00:06:19,024 --> 00:06:23,344
Sometimes the user experience
can feel messy if different teams

100
00:06:23,344 --> 00:06:25,054
design things in a different way.

101
00:06:25,294 --> 00:06:29,524
And you can fix this with the
shared design systems, common

102
00:06:29,524 --> 00:06:33,694
components, libraries, and a UX
team to keep everything aligned.

103
00:06:34,384 --> 00:06:36,424
Another issue is performance.

104
00:06:36,794 --> 00:06:40,634
And hit per performance hits and
when combining product run time.

105
00:06:41,354 --> 00:06:46,604
But you can solve that by optimizing how
things load and caching share models.

106
00:06:47,174 --> 00:06:50,834
And even though micro front and
lead teams work independently,

107
00:06:51,104 --> 00:06:53,474
they still need to talk clear API.

108
00:06:53,534 --> 00:06:57,359
Good documentation and
regular team check-ins help.

109
00:06:57,729 --> 00:06:59,739
Keep everything working together.

110
00:06:59,979 --> 00:07:05,739
In future, we may see a very driven
code linker that ensure every team

111
00:07:05,739 --> 00:07:07,779
stick to share design guideline.

112
00:07:08,139 --> 00:07:11,469
Switching to micro frontend
is a step by step process.

113
00:07:11,969 --> 00:07:15,599
First, take a good look at your
current setup and figure out

114
00:07:15,659 --> 00:07:17,549
where the natural boundaries are.

115
00:07:18,329 --> 00:07:24,689
Then pick a simple low risk project to
try things out, set up your pipeline

116
00:07:24,989 --> 00:07:26,684
and tools to get ready for the future.

117
00:07:27,404 --> 00:07:30,449
I. Growth after that,
break things up slowly.

118
00:07:30,899 --> 00:07:35,159
Moving pieces by pieces based
on what makes the most sense for

119
00:07:35,159 --> 00:07:39,389
the business features, and keep
checking in with your teams.

120
00:07:39,809 --> 00:07:43,094
Watch how things performs and
make improvement as you go.

121
00:07:44,084 --> 00:07:48,704
That way, your shift to the micro front
end will be solid and long lasting.

122
00:07:49,214 --> 00:07:54,374
Imagine using machine learning to simulate
different migration path and pick a safe

123
00:07:54,374 --> 00:07:57,164
first one based on predicted user impact.

124
00:07:57,704 --> 00:07:59,474
The future is looking awesome.

125
00:08:00,134 --> 00:08:06,164
Pretty soon AI will help build an improve
component on its own saving ton of time.

126
00:08:06,584 --> 00:08:10,634
Smart tools will help you see how
everything connect and suggest

127
00:08:10,634 --> 00:08:12,344
better way to link things up.

128
00:08:12,884 --> 00:08:14,924
Macro frontend won't just power website.

129
00:08:14,924 --> 00:08:19,514
They support mobile apps, IOT
devices and even AR and vr.

130
00:08:20,014 --> 00:08:23,704
That and eventually, we'll, we
will have a standard rules for how

131
00:08:23,704 --> 00:08:26,644
to connect micro frontend across
different companies and tools.

132
00:08:27,304 --> 00:08:31,624
We likely see AI recommending
how your frontend should adapt

133
00:08:31,624 --> 00:08:33,514
to new platform in a real time.

134
00:08:34,014 --> 00:08:38,064
Let's talk about web
assembly or WASM for short.

135
00:08:38,769 --> 00:08:41,379
This is some next level technology.

136
00:08:41,679 --> 00:08:46,929
It runs super fast code, almost like
a native app right in the browser.

137
00:08:47,229 --> 00:08:50,619
You can even use languages
like c, c plus or rest.

138
00:08:50,949 --> 00:08:54,309
Web assembly runs safest
in its own little sandbox.

139
00:08:55,159 --> 00:08:59,389
So it's put, so it's fit perfectly
with the way macro frontend works.

140
00:09:00,050 --> 00:09:03,680
It not just faster, it's safer and
more flexible, tool and secure.

141
00:09:04,369 --> 00:09:07,189
And with AI optimized compilers even.

142
00:09:07,814 --> 00:09:13,844
Non-expert will be able to convert
code into high performing wa SM module.

143
00:09:14,594 --> 00:09:15,434
So try it out.

144
00:09:16,304 --> 00:09:21,014
A powerful combination when you put
micro frontend and web assembly together.

145
00:09:21,514 --> 00:09:27,425
You are unlocking the whole new level of
frontend power web assembly boosts the

146
00:09:27,425 --> 00:09:29,675
speed of your most important features.

147
00:09:30,094 --> 00:09:34,714
Team can use whatever language
suits on, suits their job best.

148
00:09:35,074 --> 00:09:41,369
And because web assembly itself save,
contain, it fit well with the micro

149
00:09:41,374 --> 00:09:44,074
frontend ideas of keeping things separate.

150
00:09:44,574 --> 00:09:46,015
This compote you.

151
00:09:46,775 --> 00:09:51,545
Up for the future From mobile apps
to AR platform, start by finding the

152
00:09:51,545 --> 00:09:56,405
lowest part of your apps and try adding
a web assembly to speed things up.

153
00:09:56,765 --> 00:10:01,834
We are heading toward AI models that
can recommend when to switch a JS

154
00:10:01,834 --> 00:10:05,495
module to WSM for peak efficiency.

155
00:10:05,995 --> 00:10:09,084
Thank you so much for sticking
with me through this deep

156
00:10:09,084 --> 00:10:10,525
dive into micro frontend.

157
00:10:10,944 --> 00:10:15,954
I hope you pick some useful
ideas, not just what they are,

158
00:10:16,314 --> 00:10:18,745
but how to actually use them.

159
00:10:19,375 --> 00:10:23,214
Whether you just exploring or already
on this path, micro frontend, especially

160
00:10:23,214 --> 00:10:27,745
when you pair them with tools like
WebAssembly, give you the way to

161
00:10:27,745 --> 00:10:32,785
build a front end that are best,
flexible and ready for whatever next.

162
00:10:33,285 --> 00:10:39,359
The next wave is maybe a ai co-pilot that
help architect your front end from scratch

163
00:10:39,359 --> 00:10:42,599
based on business goal and user data.

164
00:10:43,409 --> 00:10:45,089
So try it out.

165
00:10:45,589 --> 00:10:45,979
Thank you.

