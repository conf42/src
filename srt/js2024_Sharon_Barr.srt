1
00:00:00,280 --> 00:00:01,049
Hello, everyone.

2
00:00:01,390 --> 00:00:02,640
My name is Sharon Bar.

3
00:00:02,760 --> 00:00:06,090
I'm going to talk about unit test
today, who likes unit testing.

4
00:00:06,689 --> 00:00:09,300
Actually, most developers
don't like testing at all.

5
00:00:10,180 --> 00:00:15,030
But let's see how generative AI dev
tools can worry about the tests for you.

6
00:00:15,530 --> 00:00:17,310
But first, a little bit about myself.

7
00:00:17,500 --> 00:00:19,650
I used to live 17 years in the Bay Area.

8
00:00:20,080 --> 00:00:21,240
I worked for Yahoo.

9
00:00:21,560 --> 00:00:24,829
I was the first VP of Engineering
at Couchbase, a NoSQL database

10
00:00:24,830 --> 00:00:28,849
company, a CTO at Lifesign, a startup
called Bina Technologies, acquired

11
00:00:28,870 --> 00:00:31,910
by Roche, a former developer.

12
00:00:32,470 --> 00:00:33,860
I recently founded Early.

13
00:00:33,920 --> 00:00:38,460
At Early, we build high quality working
unit tests for pull requests and scale.

14
00:00:39,355 --> 00:00:42,114
I like to call myself the
Chief Test Code Generator here.

15
00:00:42,165 --> 00:00:45,375
I generated over half a million
lines of test code in the past year.

16
00:00:45,985 --> 00:00:48,324
I love travel and do outdoor activities.

17
00:00:48,344 --> 00:00:52,754
Tremont Blanc was one of the
recent highlights and more.

18
00:00:53,754 --> 00:00:56,405
So let's dive into our talk.

19
00:00:56,905 --> 00:01:01,235
We all know CrowdStrike outage, where
a tiny bug leads to a massive crisis.

20
00:01:01,885 --> 00:01:06,384
If you read about it, what happened
over there, a simple auto array out

21
00:01:06,384 --> 00:01:10,624
of bound exception caused the null
pointer exception added to the fact

22
00:01:10,624 --> 00:01:14,214
that the software was running at the
low level of the Windows operating

23
00:01:14,214 --> 00:01:15,954
system caused blue screen of death.

24
00:01:16,564 --> 00:01:20,425
And since then we all know what
happened, the highest cost of bug

25
00:01:20,425 --> 00:01:22,935
ever over 5 billion in losses.

26
00:01:23,395 --> 00:01:29,260
CrowdStrike alone, sorry, CEO of Delta
said that, Microsoft outage cost them half

27
00:01:29,260 --> 00:01:32,740
a million, 500 million dollars in revenue.

28
00:01:33,240 --> 00:01:39,370
if we dive a little bit into the anatomy
of bugs, you can see that the cost of bug

29
00:01:39,370 --> 00:01:41,419
is something that can go up exponentially.

30
00:01:42,220 --> 00:01:45,570
If you catch it early, close
to coding, which is unit

31
00:01:45,580 --> 00:01:47,890
tests, the cost is pretty low.

32
00:01:47,890 --> 00:01:53,560
If you catch it post production, Then
the cost of the bar goes up for the roof

33
00:01:53,610 --> 00:01:55,390
and CrowdStrike is an extreme example.

34
00:01:55,890 --> 00:02:01,079
So let's Look at an analogy over
here, Henry Ford used to say if I had

35
00:02:01,199 --> 00:02:05,209
asked people what they wanted They
would have said a faster horse And

36
00:02:05,299 --> 00:02:06,899
Henry Ford listened to the problem.

37
00:02:07,109 --> 00:02:10,209
People were trying to solve the problem
of moving from point A to point B.

38
00:02:10,239 --> 00:02:11,459
So he invented the car.

39
00:02:12,399 --> 00:02:16,219
And, what happened then, when people
had cars in their hands, they said,

40
00:02:16,219 --> 00:02:20,079
OK, what can I do with a car that
I could not have done with horses?

41
00:02:20,550 --> 00:02:24,370
I could, go work on the next town and come
back and sleep at home with my family.

42
00:02:24,730 --> 00:02:26,890
I can build a travel business.

43
00:02:26,890 --> 00:02:29,230
I can invent a truck and move goods.

44
00:02:30,140 --> 00:02:34,900
And if you look at the, what's happening
today with the new waves of GNI tools

45
00:02:35,200 --> 00:02:40,100
that are focusing on the problem of code
quality, the question is really, are

46
00:02:40,100 --> 00:02:44,760
we, how can we use these new DevTools
that, where we are used to horses, for

47
00:02:44,890 --> 00:02:49,240
example, for test code generation, and
today we are starting to have cars.

48
00:02:49,320 --> 00:02:53,120
How can we use these tools, to
generate test code automatically?

49
00:02:53,860 --> 00:02:56,510
focus on the problem is not the
testing, the problem is the code

50
00:02:56,510 --> 00:03:01,410
quality, and the test tools are really
helping us achieve that end goal.

51
00:03:01,910 --> 00:03:06,420
Now if you look at how developers are
spending their time, developers are, and

52
00:03:06,420 --> 00:03:10,360
this is based on different studies, about
30 percent of the time is spent on new

53
00:03:10,390 --> 00:03:14,620
code, half of it on tests related tasks,
and half of it on the application code.

54
00:03:15,400 --> 00:03:20,250
about 20 percent on maintenance, again,
half on the application, half on the

55
00:03:20,250 --> 00:03:25,620
test on 13 percent time about debugging
and finding issues and fixing them.

56
00:03:26,505 --> 00:03:31,065
A quarter of the time on meetings,
security, and people, like to drink a

57
00:03:31,065 --> 00:03:34,595
lot of coffee and obviously lunch, and
breaks about 10 percent of the time.

58
00:03:34,595 --> 00:03:38,725
So overall, about a third of developers
time is spent on tests or test

59
00:03:38,725 --> 00:03:41,425
related tasks around fixing bugs.

60
00:03:42,245 --> 00:03:46,105
So clearly, developers
want to test their code.

61
00:03:46,605 --> 00:03:49,125
The question is, how can they
spend their time effectively?

62
00:03:49,435 --> 00:03:54,205
And again, if you look at the, what
types of tests exist, we talked about the

63
00:03:54,205 --> 00:03:59,985
functional test, unit test, component,
integration system, UAT, non functional,

64
00:04:00,005 --> 00:04:02,569
security, localization, usability.

65
00:04:03,000 --> 00:04:06,760
Manual test, exploratory, ad hoc can
happen throughout the life cycle.

66
00:04:07,110 --> 00:04:11,770
Automated tests, white box, black box,
and there are many other types of testing.

67
00:04:12,170 --> 00:04:16,230
really, what will bring developers
the highest value for their

68
00:04:16,260 --> 00:04:20,830
time in terms of minimizing the
number of bugs in their code?

69
00:04:21,330 --> 00:04:24,090
So today, let's see unit test.

70
00:04:24,090 --> 00:04:26,750
How, what is the value
of unit test generation?

71
00:04:26,770 --> 00:04:30,759
So as we said, it helps you catch
the bugs early, very early, where

72
00:04:30,760 --> 00:04:32,269
the cost is really the lowest.

73
00:04:32,710 --> 00:04:36,870
It frees up a lot of the developer's
time so you can spend it on, on the

74
00:04:36,870 --> 00:04:41,530
application code, on higher level tasks,
on bringing value to the business.

75
00:04:42,060 --> 00:04:44,640
It speeds up the release cycles
because you have the, you're

76
00:04:44,640 --> 00:04:45,790
catching the bugs earlier.

77
00:04:46,185 --> 00:04:48,615
And it can be used on multiple use cases.

78
00:04:49,405 --> 00:04:52,135
During development, we'll
talk about a few examples.

79
00:04:53,050 --> 00:04:57,810
If you now look at the DevTools, there are
roughly two groups, there are assistant

80
00:04:58,730 --> 00:05:03,670
DevTools for test code generation, like
GitHub Copilot, like Cursor, and there

81
00:05:03,760 --> 00:05:06,989
are other companies that are raising a
lot of money to help solve this problem.

82
00:05:07,680 --> 00:05:11,830
And our test code, AI agents,
and we'll talk a little bit what

83
00:05:11,830 --> 00:05:13,570
the AI agent means down the road.

84
00:05:13,570 --> 00:05:17,850
But first, let's look at
a couple of those tools.

85
00:05:18,350 --> 00:05:22,430
So today, I'm going to show you the
two, maybe more popular or main tools

86
00:05:22,450 --> 00:05:25,910
around these two distinct areas.

87
00:05:25,910 --> 00:05:31,050
So cursor is A fork of a GitHub
of a, visual Studio Code.

88
00:05:31,440 --> 00:05:37,010
It's a, an assistant tool that helps
you generate code, across the board.

89
00:05:37,010 --> 00:05:41,210
It's general purpose, all languages,
all type of code application, front

90
00:05:41,210 --> 00:05:43,670
end backend testing, unit testing.

91
00:05:44,190 --> 00:05:47,380
whereas, on the other side we
have early, which is an AI agent.

92
00:05:47,480 --> 00:05:50,450
and the difference on AI agent
is that it's very specific

93
00:05:50,450 --> 00:05:51,770
to one task and it does it.

94
00:05:52,270 --> 00:05:56,480
trying to do it better than anyone else
in that case, generating unit tests.

95
00:05:56,980 --> 00:05:59,120
So let's switch to an example.

96
00:05:59,620 --> 00:06:00,930
I'll increase my screen.

97
00:06:01,700 --> 00:06:06,270
And we'll start by looking at the
backend code, the server code that

98
00:06:06,270 --> 00:06:08,390
we wrote around the user services.

99
00:06:08,875 --> 00:06:11,135
And, we'll generate unit
tests using, Cursor.

100
00:06:12,005 --> 00:06:13,155
let me, so I install Cursor.

101
00:06:13,415 --> 00:06:16,445
Cursor, you install it, from, you
install any other application,

102
00:06:16,455 --> 00:06:17,725
VSCode, you install Cursor.

103
00:06:18,685 --> 00:06:23,205
What's specific about Cursor that makes
it so popular is that it's very tuned for

104
00:06:23,205 --> 00:06:25,925
AI and using AI for your code development.

105
00:06:25,925 --> 00:06:28,932
So if you look at the configuration,
obviously there are general parameters.

106
00:06:28,932 --> 00:06:31,966
There is a, pro version that is paid.

107
00:06:32,376 --> 00:06:35,906
You can select different
models, or they support most of

108
00:06:35,906 --> 00:06:37,286
the popular models out there.

109
00:06:37,286 --> 00:06:40,426
You can actually plug in your
own API key, and generate,

110
00:06:40,876 --> 00:06:42,166
results that are good for that.

111
00:06:42,666 --> 00:06:43,716
So how do I use it?

112
00:06:43,776 --> 00:06:49,406
I go to my method, so I can, for example,
look at Check Max, number of, users.

113
00:06:49,406 --> 00:06:52,436
Actually, let me just quickly
explain the method we are going to

114
00:06:52,436 --> 00:06:56,366
look at, as an example, check Max,
number of users settings, right?

115
00:06:56,366 --> 00:06:57,236
It's a method that they.

116
00:06:57,836 --> 00:07:03,196
Returns if you have capacity for more
users and throw an exception if you don't.

117
00:07:03,206 --> 00:07:05,756
So if the user is defined, you
don't need to check your return.

118
00:07:06,196 --> 00:07:11,016
Otherwise, you compare the number of
user counts to the max number of users

119
00:07:11,116 --> 00:07:12,636
that you get from a configuration.

120
00:07:13,106 --> 00:07:16,416
And if the user count is above the max
number count, you throw an exception.

121
00:07:16,966 --> 00:07:19,556
going back to the code,
if I, Highlight the code.

122
00:07:19,556 --> 00:07:21,706
I can see here chat and edit.

123
00:07:22,016 --> 00:07:26,936
Chat opens the tab, the cursor tab, that
enables you to interact with the LLM

124
00:07:27,436 --> 00:07:29,786
in a very easy manner with your code.

125
00:07:29,786 --> 00:07:31,156
So over here, I have the method.

126
00:07:31,156 --> 00:07:39,176
I'll ask you to please generate
happy path and edge cases,

127
00:07:39,236 --> 00:07:41,796
unit tests for this method.

128
00:07:42,296 --> 00:07:46,286
And the cursor will immediately
start generating these tests.

129
00:07:46,736 --> 00:07:49,886
As soon as it's done, I
can create a new test file.

130
00:07:50,426 --> 00:07:51,726
So let's apply.

131
00:07:52,226 --> 00:07:53,836
The code is copied over here.

132
00:07:53,886 --> 00:07:55,756
A new file is created.

133
00:07:56,696 --> 00:08:01,826
Let's change the file name to test,
because that's my format on this project.

134
00:08:02,326 --> 00:08:05,086
And what I can see, all the tests
that are generated over here.

135
00:08:05,086 --> 00:08:06,456
Let me close this for a second.

136
00:08:07,296 --> 00:08:11,346
So we can see that the tests, actually
are not, have some compilation issues.

137
00:08:11,516 --> 00:08:13,776
We'll look at them, but
first let's fix those.

138
00:08:13,866 --> 00:08:17,356
So if I highlight an error, I
can do a quick fix, fix with AI.

139
00:08:17,796 --> 00:08:20,946
Over here there is an object, that
the LLM did not get the property

140
00:08:20,946 --> 00:08:23,406
right, so it's fixing the properties.

141
00:08:23,696 --> 00:08:25,936
Let's fix this one, there are a few cases.

142
00:08:25,946 --> 00:08:30,376
It would be nice if there is a feature of,
fix, for all, but, probably doesn't know.

143
00:08:30,396 --> 00:08:31,466
We'll fix this one as well.

144
00:08:31,966 --> 00:08:34,216
Fix with AI, fixing the object.

145
00:08:34,626 --> 00:08:37,776
So those are the three cases of,
it didn't get the object right.

146
00:08:38,276 --> 00:08:40,586
There is another case where
it didn't get the type right.

147
00:08:40,586 --> 00:08:43,196
So this is a big int, and
over here, put a number.

148
00:08:43,236 --> 00:08:47,276
So if we do a quick
fix, we'll fix, the ID.

149
00:08:47,966 --> 00:08:49,356
And now it's, one n.

150
00:08:49,846 --> 00:08:53,606
And then we have a similar problem
to before, that the object is not,

151
00:08:54,176 --> 00:08:56,716
So it's basically editing the object.

152
00:08:57,216 --> 00:08:58,926
And so I'll accept.

153
00:08:59,456 --> 00:09:01,016
And then initialBalance.

154
00:09:01,016 --> 00:09:04,376
Something on the, probably,
needs to be decimal.

155
00:09:04,826 --> 00:09:08,776
So accepting that, and decimal, this is
a simple fix, let's just add library.

156
00:09:08,776 --> 00:09:12,486
So now, we fixed, after generating
the test, we fixed all the,

157
00:09:12,536 --> 00:09:16,866
Issues, Now I can look at, another
extension here that is Jest.

158
00:09:16,956 --> 00:09:19,806
Jest is a test framework
that we are using over here.

159
00:09:19,836 --> 00:09:22,526
and it visualizes all the tests for me.

160
00:09:22,776 --> 00:09:25,446
in this particular case, now
I'm running all the tests.

161
00:09:25,506 --> 00:09:28,556
and I can look at, the user service.

162
00:09:28,606 --> 00:09:29,656
sorry, where is it?

163
00:09:29,696 --> 00:09:31,426
user service dot, test.

164
00:09:31,556 --> 00:09:32,436
where is the file?

165
00:09:33,326 --> 00:09:33,936
Hold on.

166
00:09:34,436 --> 00:09:36,366
Okay, it's not this one.

167
00:09:36,366 --> 00:09:36,436
Hold on.

168
00:09:36,436 --> 00:09:38,296
Oh,

169
00:09:38,796 --> 00:09:39,626
yes, it is.

170
00:09:40,126 --> 00:09:42,936
what I can see over here
that there are four red tests

171
00:09:42,956 --> 00:09:44,436
that are covering the cases.

172
00:09:44,476 --> 00:09:45,426
should, let's see.

173
00:09:45,886 --> 00:09:48,836
Should not throw an error
if the user already exists.

174
00:09:49,336 --> 00:09:53,486
It's basically first initializing the
objects, should not throw an error,

175
00:09:54,386 --> 00:09:59,016
and then should not throw an error if
the user count is below limit, happy

176
00:09:59,046 --> 00:10:04,986
path, and other edge cases we are
seeing if the count is at the limit and

177
00:10:04,986 --> 00:10:06,976
if the count is exceeding the limit.

178
00:10:07,476 --> 00:10:10,296
So that's one way, that is
called, Code Assist, right?

179
00:10:10,296 --> 00:10:11,896
So we asked it to generate a test.

180
00:10:11,896 --> 00:10:13,316
It wasn't completely running.

181
00:10:13,316 --> 00:10:14,816
There are still issues, by the way.

182
00:10:14,826 --> 00:10:17,206
It's not running, more some, dependencies.

183
00:10:17,236 --> 00:10:19,316
But let's pause over here
and try another tool.

184
00:10:19,816 --> 00:10:21,076
But this is an assistant tool.

185
00:10:21,206 --> 00:10:23,506
So the other tool we'll try is Early.

186
00:10:23,696 --> 00:10:25,626
Early, unlike, Cursor, is an extension.

187
00:10:25,656 --> 00:10:29,776
So it's an add on to the,
Visual Studio, or to the IDE.

188
00:10:29,796 --> 00:10:32,676
You install it for the
marketplace, do a sign in.

189
00:10:32,716 --> 00:10:34,116
And then what you can see over here.

190
00:10:34,916 --> 00:10:39,056
is a view of all your files and the
classes and the methods within the file.

191
00:10:39,601 --> 00:10:44,671
So we look at this method, what else I
can see here is, if there is a test unit

192
00:10:44,671 --> 00:10:48,121
test, that was generated for that file,
I can see the test and I can see what is

193
00:10:48,121 --> 00:10:51,811
the coverage of the test at the method
level, not just at the file level, like

194
00:10:51,811 --> 00:10:53,521
most, tools, but at the method level.

195
00:10:54,011 --> 00:10:57,101
So if you look at the check
marks, number of users, now

196
00:10:57,101 --> 00:10:58,541
I can generate test for this.

197
00:10:58,591 --> 00:11:00,331
I can generate test for that method.

198
00:11:00,331 --> 00:11:02,491
I can also generate it for other methods.

199
00:11:02,921 --> 00:11:06,161
when I generate a test, I
can do it through the magic

200
00:11:06,161 --> 00:11:07,631
wand or I can go through the.

201
00:11:08,131 --> 00:11:13,111
And when the test generation starts,
I can also see a window over here that

202
00:11:13,121 --> 00:11:16,801
opens and help me increase the quality
of the code, not just generating tests.

203
00:11:16,901 --> 00:11:19,321
So it can suggest
documentation for the method.

204
00:11:19,651 --> 00:11:22,361
I can decide I choose to
insert it to my method.

205
00:11:22,801 --> 00:11:25,781
It can actually suggest some
improvements to the code.

206
00:11:25,781 --> 00:11:28,531
So consider caching the
max number of users.

207
00:11:28,731 --> 00:11:31,101
Value to reduce database
calls if there is one.

208
00:11:31,251 --> 00:11:33,361
So that's another good idea.

209
00:11:33,911 --> 00:11:35,741
And then the tests are being generated.

210
00:11:36,191 --> 00:11:39,281
Once they are ready, I have a link
over here that says go to test.

211
00:11:39,821 --> 00:11:41,611
And I can see the links over here.

212
00:11:42,121 --> 00:11:45,551
And at the same time, there is
a coverage calculation that is

213
00:11:45,551 --> 00:11:49,691
happening behind the scenes to see
what is the coverage for these tests.

214
00:11:50,536 --> 00:11:51,996
let's have a look at these tests.

215
00:11:52,416 --> 00:11:55,226
Normally, if there is a high coverage,
it means that the tests are actually

216
00:11:55,276 --> 00:11:56,956
compiling and running and are good.

217
00:11:57,346 --> 00:12:01,936
You can see that an agent can actually
do a deeper dive into the code.

218
00:12:01,936 --> 00:12:05,486
It can generate mocks to
generate better tests.

219
00:12:05,986 --> 00:12:07,656
You can see different types of tests.

220
00:12:07,676 --> 00:12:09,436
There is a happy path test.

221
00:12:10,226 --> 00:12:10,966
Probably same.

222
00:12:11,466 --> 00:12:14,086
Should not throw an error
if the user already exists.

223
00:12:14,106 --> 00:12:15,366
which is what we had before.

224
00:12:15,376 --> 00:12:17,226
It's under, it's now grouped.

225
00:12:17,336 --> 00:12:20,196
should not for an error if user
count is below maximum, etc.

226
00:12:20,246 --> 00:12:25,866
if I look at the, Jest extension, I
can actually see the test over here.

227
00:12:25,916 --> 00:12:30,416
what's nice about it is, If I run them,
let's run all the tests over here,

228
00:12:30,916 --> 00:12:35,816
I can see whether they're actually
running, green, red, or not compiling.

229
00:12:36,316 --> 00:12:38,626
Let's see how they are performing.

230
00:12:39,246 --> 00:12:44,376
It takes a little bit of time because
when I record, my computer uses CPU

231
00:12:44,386 --> 00:12:46,156
heavily and that slows down everything.

232
00:12:47,056 --> 00:12:50,696
But when it will finish running, it
should take normally a few seconds.

233
00:12:50,696 --> 00:12:53,076
We can see the number of green tests.

234
00:12:53,576 --> 00:12:56,856
So what I can see over here, that I
have, two happy paths, should not throw

235
00:12:56,856 --> 00:13:01,186
an error if the user exists, should
throw error user limit, and so on.

236
00:13:01,566 --> 00:13:05,286
And that explains why I got 100
percent coverage, if I look at the

237
00:13:05,296 --> 00:13:09,646
method level, for all these three
methods for which I generated tests.

238
00:13:10,576 --> 00:13:14,216
Let's see another thing over
here, I can see, some red tests,

239
00:13:14,226 --> 00:13:17,606
so it means that there might be
an issue with some of the tests.

240
00:13:17,926 --> 00:13:23,756
this could be actually expected anything,
sometimes the red test are an issue

241
00:13:23,756 --> 00:13:27,136
of the test and sometimes the red
test could actually indicate a bug.

242
00:13:27,636 --> 00:13:29,986
Expected email received undefined.

243
00:13:30,196 --> 00:13:31,736
could be a real bug on the code.

244
00:13:32,236 --> 00:13:34,426
So let's, we saw two tools.

245
00:13:34,596 --> 00:13:36,736
One is a code assist, one is an agent.

246
00:13:36,736 --> 00:13:43,401
There is an interesting, let's
say, Let's see how an agent and

247
00:13:43,401 --> 00:13:44,721
an assistant can collaborate.

248
00:13:44,721 --> 00:13:48,901
So let's say I would like to see
if this is a real problem and

249
00:13:48,901 --> 00:13:52,381
let the assistant, in this case
a cursor, try and fix the test.

250
00:13:52,431 --> 00:13:53,751
Understand why is it red.

251
00:13:54,251 --> 00:13:57,501
If it's a problem on the test,
maybe it can actually fix it.

252
00:13:58,491 --> 00:14:01,501
If it doesn't fix it,
it could be a real bug.

253
00:14:01,591 --> 00:14:05,201
And it's worth looking into it, but
that's for a different presentation.

254
00:14:06,191 --> 00:14:10,041
So let's go back And
discuss, what we've seen.

255
00:14:10,791 --> 00:14:15,871
what we've seen is really, the
differences, about the types of, AI

256
00:14:15,871 --> 00:14:19,911
agent dev tools, and the, I would
like to talk a little bit about

257
00:14:19,911 --> 00:14:22,551
assistance versus agents, AI agents.

258
00:14:22,551 --> 00:14:23,976
we hear this terms a lot.

259
00:14:24,711 --> 00:14:29,651
Assistant, is a general purpose, tool
where the user interact with the LLM,

260
00:14:29,711 --> 00:14:33,841
could be really amazing user experience,
like cursor, could be more simplified,

261
00:14:33,861 --> 00:14:38,291
chat GPT is still very good, but the user
ask a question, get a response, ask a

262
00:14:38,291 --> 00:14:42,401
question, get response, analyze it, until
they are satisfied with the results.

263
00:14:43,061 --> 00:14:47,661
As we are transitioning to the world of,
agents, we are starting to look about what

264
00:14:47,791 --> 00:14:50,891
humans are doing, more at the task level.

265
00:14:51,441 --> 00:14:55,741
our daily job, or job in general,
is composed of many different tasks.

266
00:14:55,821 --> 00:14:58,621
One minute task, five minute
task, thirty minutes, all the

267
00:14:58,621 --> 00:14:59,851
way to completing the job.

268
00:15:00,601 --> 00:15:04,131
When we talk about AI agents, the
goal of an agent is not to replace

269
00:15:04,131 --> 00:15:07,201
the human, but replace the task
the human is doing, completely.

270
00:15:07,221 --> 00:15:11,976
in this case, the human is asking the
product, or solution to perform a task.

271
00:15:12,356 --> 00:15:15,406
The solution is now talking to
the LLM multiple times, talking

272
00:15:15,406 --> 00:15:17,356
to itself, improving the results.

273
00:15:17,466 --> 00:15:21,016
When ready, handing it back to the
user, get the feedback, or just build

274
00:15:21,016 --> 00:15:25,336
a trust, continuously improving it
until it gives back a result that is

275
00:15:25,366 --> 00:15:28,466
working, high quality, and completed.

276
00:15:28,966 --> 00:15:32,016
If we now take that approach and
understand how it looks like the

277
00:15:32,056 --> 00:15:36,236
test code agents, how does test code
assistant look compared to test code

278
00:15:36,236 --> 00:15:41,666
agents, if we compare the output, how
The code suggestions, the code assistant

279
00:15:41,826 --> 00:15:45,986
are generating suggestions for code,
as we've seen, where AI agents are

280
00:15:45,986 --> 00:15:48,096
generating working code, everything.

281
00:15:48,616 --> 00:15:52,106
The quality on the assistant is
low to medium, even if you fix it,

282
00:15:52,166 --> 00:15:55,356
sometimes it works, sometimes you
still need to do more logical work.

283
00:15:55,706 --> 00:15:58,506
The quality of agents is
high quality, comprehensive,

284
00:15:58,506 --> 00:16:00,226
happy path edge cases, mocks.

285
00:16:00,726 --> 00:16:02,586
There is still effort behind Assistant.

286
00:16:02,716 --> 00:16:04,516
You need to continuously fix it.

287
00:16:04,556 --> 00:16:07,746
Using the AI is still much faster
than writing it from scratch.

288
00:16:08,246 --> 00:16:12,336
Where agents are closer to completion,
and it saves you a lot of time.

289
00:16:12,356 --> 00:16:15,376
Even if you need the Assistant
after the agent completed its part,

290
00:16:16,146 --> 00:16:20,256
It's trying to complete something
that started at 90%, not 50%.

291
00:16:21,066 --> 00:16:25,206
And the impact is that you can actually
generate not one test suggestion

292
00:16:25,206 --> 00:16:29,376
at a time, but dozens of quality
working tests for your few files, many

293
00:16:29,376 --> 00:16:31,926
methods, all your project very quickly.

294
00:16:32,426 --> 00:16:36,186
So now let's see how it
really helps us as developers.

295
00:16:36,206 --> 00:16:40,656
in the flow, there are various use
cases, and if you use them wisely,

296
00:16:40,676 --> 00:16:45,256
it can help you generate or develop,
much more complicated applications,

297
00:16:45,566 --> 00:16:47,556
high quality at a higher speed.

298
00:16:48,126 --> 00:16:50,916
first, do continuous
testing during development.

299
00:16:51,086 --> 00:16:52,566
Test early and often.

300
00:16:53,386 --> 00:16:54,436
Then test your PR.

301
00:16:54,446 --> 00:16:58,026
You can do it continuously, or when you're
done with your PR, you think it's good,

302
00:16:58,096 --> 00:17:03,096
now generate all the tests, protect from
bugs, find the bugs for the red test,

303
00:17:03,146 --> 00:17:05,716
protect the bug for the green test.

304
00:17:05,716 --> 00:17:06,876
Testing private methods.

305
00:17:07,336 --> 00:17:10,876
Something that could be fairly
complicated if you are trying

306
00:17:10,876 --> 00:17:12,306
to do it for end to end testing.

307
00:17:12,516 --> 00:17:15,786
Your end to end testing have to touch
so many branches of the code, and

308
00:17:15,796 --> 00:17:19,696
whether it's your use cases or your
data, It's becoming pretty painful.

309
00:17:20,436 --> 00:17:24,266
Now you can turn the private method
into a public method, generate unit

310
00:17:24,266 --> 00:17:29,186
tests for it, test it, return it to
private, and you tested it very easily.

311
00:17:30,046 --> 00:17:34,366
And last one is TDD, test driven
development, which is done very

312
00:17:34,366 --> 00:17:36,176
differently in a simplified manner.

313
00:17:36,916 --> 00:17:39,246
In fact, let me talk
about that a little bit.

314
00:17:40,186 --> 00:17:41,776
So we'll use a different example.

315
00:17:41,776 --> 00:17:43,516
In this case, it's a to do app.

316
00:17:44,356 --> 00:17:51,056
So I already made a flow of how
developers are building an update project.

317
00:17:51,056 --> 00:17:53,546
This is an app that
manages different projects.

318
00:17:53,676 --> 00:17:56,806
How they can update builder software.

319
00:17:56,986 --> 00:17:59,306
It starts with a simple method signature.

320
00:17:59,307 --> 00:18:00,606
I called it Simple Docker.

321
00:18:00,996 --> 00:18:04,876
User can generate some documentation.

322
00:18:05,371 --> 00:18:09,571
And they can generate tests using the
chat, or they can generate tests using

323
00:18:10,071 --> 00:18:12,161
the agent, clicking on the magic wand.

324
00:18:12,951 --> 00:18:13,771
That's first step.

325
00:18:14,591 --> 00:18:18,731
What we'll see is that once tests are
generated, they are somewhat basic.

326
00:18:19,231 --> 00:18:22,661
I can now insert the documentation
and try again and generate tests.

327
00:18:22,681 --> 00:18:24,411
And this is where I have an example.

328
00:18:24,851 --> 00:18:26,751
Generate tests that are more complicated.

329
00:18:27,321 --> 00:18:30,431
And then I will start
implementing, let me close this.

330
00:18:30,431 --> 00:18:33,991
I will start implementing my method
and continuously generating tests.

331
00:18:33,991 --> 00:18:36,741
And what we'll see, That
slowly the tests are becoming

332
00:18:36,741 --> 00:18:38,671
better and more, comprehensive.

333
00:18:38,751 --> 00:18:42,341
And finally, I will add all the edge
cases and generate more tests for that.

334
00:18:42,871 --> 00:18:47,241
The outcome for this, and we have,
the examples is, I can see, the

335
00:18:47,241 --> 00:18:49,211
test for, the simplified version.

336
00:18:49,416 --> 00:18:53,416
where I have a very simple
documentation, happy path, edge cases.

337
00:18:53,706 --> 00:18:56,506
I can see how the tests are
becoming more elaborated, right?

338
00:18:56,506 --> 00:19:01,436
If I look at the step 3 and step 4, where
I already started implementing the cases.

339
00:19:01,856 --> 00:19:05,606
So step 3, I still have, where I have
the happy path, I can see actually

340
00:19:05,606 --> 00:19:09,076
the unit tests that are generated for
the happy path green, and the unit

341
00:19:09,076 --> 00:19:10,766
tests for the edge cases are red.

342
00:19:11,386 --> 00:19:15,816
And when I finish the implementation,
we can see that I have four green tests.

343
00:19:16,316 --> 00:19:22,846
So going back, to the presentation, just
to summarize the use case of TDD, you

344
00:19:22,846 --> 00:19:25,276
can see the different, types of, methods.

345
00:19:25,286 --> 00:19:27,346
Step one, very simple test.

346
00:19:27,716 --> 00:19:29,546
when I have, once I have
more documentation, the

347
00:19:29,546 --> 00:19:31,106
tests become more precise.

348
00:19:31,136 --> 00:19:35,036
Instead of just, simple edge cases,
the edge cases of the test generated

349
00:19:35,036 --> 00:19:39,416
are more, should return 404 if the
project is not found and, and so on.

350
00:19:40,166 --> 00:19:43,946
And when I'm ready and have all the
implementations, then I have all

351
00:19:43,946 --> 00:19:48,086
the test cases and also have high
coverage for that particular case.

352
00:19:48,586 --> 00:19:50,816
So that's, another big example.

353
00:19:50,856 --> 00:19:53,026
Again, cars versus horses.

354
00:19:53,136 --> 00:19:55,186
It's very interesting to
see how developers will

355
00:19:55,196 --> 00:19:56,601
start to adapt these tools.

356
00:19:56,911 --> 00:19:59,981
And build different ways and
use them in different ways to

357
00:20:00,051 --> 00:20:02,491
basically solve the problem of bugs.

358
00:20:02,491 --> 00:20:05,751
So all of those examples are just some.

359
00:20:06,251 --> 00:20:09,371
Final step is how do you test the tests?

360
00:20:09,441 --> 00:20:12,041
high coverage does not
necessarily mean high quality.

361
00:20:12,291 --> 00:20:14,771
And for that there are
different techniques.

362
00:20:14,951 --> 00:20:17,231
One I will talk about today
is called mutation testing.

363
00:20:18,201 --> 00:20:21,941
In briefly, what mutation testing
means is that mutation testing are

364
00:20:21,941 --> 00:20:25,491
introducing changes to your code,
like mutants, or bugs, if you will.

365
00:20:26,001 --> 00:20:28,891
And then it runs your unit
test against those changes.

366
00:20:29,181 --> 00:20:31,451
It expects that your unit test will fail.

367
00:20:32,011 --> 00:20:35,291
And if they don't fail, it means
that you either have A bad test

368
00:20:35,291 --> 00:20:36,581
or not even enough coverage.

369
00:20:36,891 --> 00:20:38,991
ultimately it produces a mutation score.

370
00:20:39,991 --> 00:20:43,241
let's, let me show you,
an example of fire run it.

371
00:20:43,241 --> 00:20:46,301
It's, heavy in compute, so I
hope it'll run nicely over here.

372
00:20:46,781 --> 00:20:49,841
So over here we generated,
test for three files.

373
00:20:50,111 --> 00:20:53,561
We have a hundred percent coverage,
and I run, I have the command line over

374
00:20:53,561 --> 00:21:00,311
here to run the mutation test for, the
file user service, which is this file.

375
00:21:00,811 --> 00:21:01,381
And.

376
00:21:01,921 --> 00:21:05,751
And, we'll see, oh, so in order to run
mutation tests, you cannot actually

377
00:21:05,751 --> 00:21:09,352
have, red tests, because if you
have red test, it doesn't run them.

378
00:21:09,352 --> 00:21:11,712
So I'll, I will skip them, skip.

379
00:21:12,212 --> 00:21:15,082
So every time I have a red
test, I will need to skip it.

380
00:21:15,242 --> 00:21:18,462
and when all my tests are
green, let's skip this one.

381
00:21:19,422 --> 00:21:21,312
If you add more times, I
will actually try and fix it.

382
00:21:21,982 --> 00:21:26,292
But, and then those are
the tests from a cursor.

383
00:21:26,292 --> 00:21:27,832
So I will even delete them.

384
00:21:28,597 --> 00:21:30,407
So let's just verify everything is green.

385
00:21:31,157 --> 00:21:33,387
And let's try again, running striker.

386
00:21:33,887 --> 00:21:37,347
What we'll see with Striker is that it's
actually starting to work pretty heavily

387
00:21:37,347 --> 00:21:39,097
to generate mutants for this file.

388
00:21:39,597 --> 00:21:42,557
The file that we saw
over here, user service.

389
00:21:43,427 --> 00:21:46,017
It calculated that there are 34 mutants.

390
00:21:46,387 --> 00:21:50,207
And as we speak, it generates more
mutants and running the tests.

391
00:21:50,807 --> 00:21:55,077
When it will finish it, it will generate
a report that tells us what is a mutation

392
00:21:55,077 --> 00:21:59,187
score for that particular file, given that
all the tests, all the tests that exist.

393
00:21:59,917 --> 00:22:03,637
And, just maybe, to fast forward,
I will show you the results.

394
00:22:03,717 --> 00:22:05,207
actually, it's almost finished.

395
00:22:05,247 --> 00:22:05,707
Nice.

396
00:22:05,877 --> 00:22:10,487
Okay, so what we are seeing over here
is a mutation score, which is 96.

397
00:22:10,487 --> 00:22:11,797
55, which is pretty nice.

398
00:22:12,377 --> 00:22:16,077
Overall, there were 36 mutants.

399
00:22:16,567 --> 00:22:18,787
Only one survived, which
means that we missed it.

400
00:22:19,157 --> 00:22:21,737
And there are some errors
sometimes, and killed 28.

401
00:22:21,767 --> 00:22:25,167
So most mutants were killed, and that's
how it got to the mutation score.

402
00:22:26,097 --> 00:22:29,827
One thing that we'll do over here,
so let's actually delete some

403
00:22:29,827 --> 00:22:31,507
of the files that we created.

404
00:22:31,507 --> 00:22:35,247
So create user test, we can,
we'll generate, we'll remove

405
00:22:35,267 --> 00:22:37,896
that test is current admin.

406
00:22:38,277 --> 00:22:41,667
We'll go back over here and
let's recalculate the coverage.

407
00:22:42,147 --> 00:22:44,327
So you see now I don't have
links to the test files.

408
00:22:44,327 --> 00:22:49,857
I just deleted, and we'll wait to see
what will be the updated coverage.

409
00:22:50,727 --> 00:22:55,207
It was around the 87 for the file, if I
recall correctly, that's how we started.

410
00:22:55,707 --> 00:22:57,327
Let me refresh it again.

411
00:22:57,327 --> 00:23:01,917
Sometimes, so what we can see over here
that now we have, 87 percent coverage.

412
00:23:02,027 --> 00:23:06,347
Those files have lower than a hundred
percent, check max numbers is 66

413
00:23:06,347 --> 00:23:08,397
percent is current user is zero percent.

414
00:23:08,397 --> 00:23:11,737
So three tests are missing for
three methods on this file.

415
00:23:12,327 --> 00:23:14,397
but the coverage is pretty high, 87%.

416
00:23:14,397 --> 00:23:17,737
so running, the mutation,
tool against striker, really

417
00:23:17,737 --> 00:23:19,077
fantastic tool, by the way.

418
00:23:19,557 --> 00:23:22,337
and let's see what score it
comes up with, right now.

419
00:23:22,837 --> 00:23:25,607
Out of the 34 mutants, it's
the same number of mutants.

420
00:23:25,937 --> 00:23:28,787
Obviously, just less tests,
because there are less unit tests.

421
00:23:28,787 --> 00:23:32,597
And we see that the mutation
score dropped down significantly.

422
00:23:32,627 --> 00:23:34,647
Only six mutants were killed.

423
00:23:35,087 --> 00:23:36,257
Seven survived.

424
00:23:36,277 --> 00:23:37,677
Six has no coverage.

425
00:23:37,747 --> 00:23:40,727
almost half of the mutants are
not being tested by the fact that

426
00:23:40,747 --> 00:23:42,427
these three unit tests are missing.

427
00:23:43,027 --> 00:23:46,867
It gives you an indication how
important unit tests for the quality

428
00:23:46,867 --> 00:23:50,297
of the tests, because it really
touches everything on your code.

429
00:23:50,847 --> 00:23:54,837
If we summarize, testing has
never been so easy, right?

430
00:23:55,227 --> 00:23:59,077
Really, go out and try and use
all the AI dev tools that you have

431
00:23:59,077 --> 00:24:01,087
to generate test code for you.

432
00:24:01,657 --> 00:24:03,897
mainly learn how to use
them effectively, right?

433
00:24:03,927 --> 00:24:05,957
how to embed it into
your development flow.

434
00:24:06,437 --> 00:24:09,697
and the outcome is deliver high
quality code faster and become

435
00:24:09,697 --> 00:24:11,947
the 100x engineer of the future.

436
00:24:12,447 --> 00:24:13,727
I hope you enjoyed this talk.

437
00:24:14,307 --> 00:24:20,027
If you have any questions, if you want to
contact me, happy, Sharon at starterly.

438
00:24:20,027 --> 00:24:21,187
ai.

439
00:24:21,187 --> 00:24:22,477
Thank you so much for listening.

