1
00:00:00,500 --> 00:00:01,940
Hello to community.

2
00:00:02,360 --> 00:00:07,550
I'm Anmar Senior Cloud architect at
Unstack, and I have a question for you.

3
00:00:08,050 --> 00:00:12,340
How much time did you or your
developers spend last week fighting

4
00:00:12,340 --> 00:00:16,840
with infrastructures related issues
instead of building core futures

5
00:00:16,900 --> 00:00:19,299
that your customers actually want?

6
00:00:20,049 --> 00:00:22,630
If you said 40% or more, welcome aboard.

7
00:00:22,930 --> 00:00:23,405
You are not alone.

8
00:00:23,905 --> 00:00:29,185
Today I'm going to show you how the
industry leaders like Netflix, Spotify,

9
00:00:29,275 --> 00:00:36,265
and Capital One, have solved this
problem using platform engineering, and

10
00:00:36,385 --> 00:00:41,845
more importantly, how can you implement
these strategies in your organization.

11
00:00:42,345 --> 00:00:46,964
Over the next couple of minutes,
we'll cover the evolution from

12
00:00:47,414 --> 00:00:49,125
DevOps to platform engineering.

13
00:00:49,364 --> 00:00:51,885
Dive deep into internal
developer platform.

14
00:00:52,694 --> 00:00:56,624
And give you a concrete
action plan to get started.

15
00:00:57,285 --> 00:00:58,304
Let's get started.

16
00:00:58,804 --> 00:01:01,774
Before we dive in, let me
beautifully introduce myself.

17
00:01:02,044 --> 00:01:07,734
I am an and over the past two decades, I
have been helping organizations transform

18
00:01:07,734 --> 00:01:09,414
their software delivery practices.

19
00:01:10,374 --> 00:01:13,824
I have worked with major financial
institutions like Wells Fargo,

20
00:01:13,945 --> 00:01:17,874
first Republic Bank, US Bank,
tech, and technology like.

21
00:01:18,445 --> 00:01:20,304
Persistent Systems and Capgemini.

22
00:01:20,804 --> 00:01:24,615
I have personally led the migration of
monolith applications to microservices

23
00:01:24,615 --> 00:01:29,195
architectures that have dramatically
improved deployment efficiency.

24
00:01:29,795 --> 00:01:35,145
I recently published research on
this topic in the world General

25
00:01:35,190 --> 00:01:40,145
of Advanced engineering technology
and sciences, and today I will be

26
00:01:40,145 --> 00:01:42,604
sharing both the academic insights.

27
00:01:43,580 --> 00:01:46,190
And real world implementation strategies.

28
00:01:46,690 --> 00:01:49,780
Okay, let's start with
the uncomfortable truth.

29
00:01:50,440 --> 00:01:55,510
DevOps has been incredibly successful,
but we have hit a scaling ball.

30
00:01:56,050 --> 00:02:00,339
The practices that work beautifully
for the team of 10, ISTs becoming

31
00:02:00,399 --> 00:02:04,300
nightmarish for organizations
with a hundred plus microservices

32
00:02:04,480 --> 00:02:06,100
across multiple cloud environments.

33
00:02:06,600 --> 00:02:12,240
Our research shows that 69% of enterprise
struggle with DevOps scalability,

34
00:02:12,570 --> 00:02:14,640
but here is what's really happening.

35
00:02:15,480 --> 00:02:17,760
Your developers are
drowning in complexity.

36
00:02:18,000 --> 00:02:24,780
They are spending 40% of their time and
efforts rustling with infrastructure

37
00:02:24,810 --> 00:02:27,120
instead of solving business problems.

38
00:02:27,620 --> 00:02:31,700
Think about the last time your
team need a new environment.

39
00:02:31,940 --> 00:02:32,795
Did it take days?

40
00:02:33,500 --> 00:02:34,160
Weeks.

41
00:02:34,880 --> 00:02:39,980
I have seen organizations where spinning
up a test environment requires approval

42
00:02:39,980 --> 00:02:45,650
from six different teams and takes weeks,
such as like an approximately three weeks.

43
00:02:46,310 --> 00:02:50,270
Meanwhile, your competitors are
deploying multiple times per day.

44
00:02:50,770 --> 00:02:55,840
This isn't just a productivity problem,
it's an existential business risk.

45
00:02:56,340 --> 00:03:01,080
When your deployment lead, lead
time is measured in weeks while your

46
00:03:01,080 --> 00:03:06,000
competition measures stays in us, you
are not competing with in the same game.

47
00:03:06,500 --> 00:03:09,860
Platform Engineering isn't
replacing DevOps, it's evolving it.

48
00:03:10,370 --> 00:03:15,230
Instead of expecting every developer
to become an infrastructure expert,

49
00:03:15,800 --> 00:03:19,505
we are rebuilding platforms that
makes infrastructure invisible.

50
00:03:20,295 --> 00:03:21,440
Here is the key insight.

51
00:03:22,280 --> 00:03:24,290
We treat infrastructure as a product.

52
00:03:24,980 --> 00:03:30,080
With the developers as our customers,
this fundamental shift changes everything.

53
00:03:30,560 --> 00:03:34,970
Suddenly, we are optimizing for developers
experience measuring satisfaction,

54
00:03:35,030 --> 00:03:38,240
and iterating based on user feedback.

55
00:03:38,330 --> 00:03:40,340
Here, the users are our developers.

56
00:03:41,150 --> 00:03:42,380
The difference is profound.

57
00:03:42,980 --> 00:03:47,180
In traditional DevOps, if a developer
needs a database, they might

58
00:03:47,180 --> 00:03:51,740
spend two days learning Terraform,
configuring security groups,

59
00:03:52,160 --> 00:03:53,540
and debugging networking issues.

60
00:03:54,290 --> 00:03:58,100
With platform engineering, they
click a button, answer a few

61
00:03:58,100 --> 00:04:02,420
questions, and have a production
release database within minutes.

62
00:04:03,020 --> 00:04:04,280
This isn't theoretical.

63
00:04:04,460 --> 00:04:09,080
Companies like Next, Netflix
deploys thousands of times per day.

64
00:04:09,440 --> 00:04:12,680
Spotify onboards new developers
in ads instead of weeks.

65
00:04:13,040 --> 00:04:17,660
Capital One reduced the time to
production by 40% while actually

66
00:04:17,660 --> 00:04:19,519
improving security and compliance.

67
00:04:20,019 --> 00:04:24,700
An internal developer platform isn't
just a collection of tools, it's just

68
00:04:24,700 --> 00:04:27,520
a COO system with five core components.

69
00:04:28,240 --> 00:04:32,770
Let me share some concrete numbers
from our research configuration

70
00:04:32,770 --> 00:04:37,060
management alone, just standardizing
how applications define their

71
00:04:37,060 --> 00:04:42,010
requirements reduced to configuration
related incidents by over 40%.

72
00:04:42,520 --> 00:04:45,850
That's not a small improvement,
that's a transformational.

73
00:04:46,719 --> 00:04:50,080
Infrastructure provisioning is
a biggest bank for the buck.

74
00:04:50,920 --> 00:04:55,900
Organizations implementing self-service
provisioning reduced enrollment

75
00:04:55,900 --> 00:04:57,940
creation time from weeks to minutes.

76
00:04:58,330 --> 00:05:04,360
Imagine the productivity impact
when developers can spin up a

77
00:05:04,360 --> 00:05:08,110
complete test enrollment faster
than they can get a cup of copy.

78
00:05:08,610 --> 00:05:11,490
Notice that infrastructure
provisioning and deployment

79
00:05:11,490 --> 00:05:13,920
pipelines get the largest focus.

80
00:05:14,415 --> 00:05:16,085
Which is like a, 50% combined.

81
00:05:16,925 --> 00:05:20,375
These are your highest
impacting starting points.

82
00:05:21,095 --> 00:05:24,665
The beauty is you don't need to
build all five components at once.

83
00:05:24,725 --> 00:05:27,455
Start with your biggest pain point.

84
00:05:28,085 --> 00:05:32,405
If your developers are waiting weeks for
enrollments, start with provisioning.

85
00:05:32,585 --> 00:05:38,735
If developers are fragile and slow,
start with pipelines and like that.

86
00:05:39,235 --> 00:05:41,755
Let's look at the concrete
results from industry leaders.

87
00:05:42,369 --> 00:05:44,409
These aren't theoretical case studies.

88
00:05:44,590 --> 00:05:47,859
These are real implementations
with measurable outcomes.

89
00:05:48,359 --> 00:05:50,279
Spotify story is particularly compelling.

90
00:05:50,759 --> 00:05:56,279
They had over a thousand microservices
and developers were spending hours just

91
00:05:56,279 --> 00:05:58,439
figuring out which service did what.

92
00:05:58,939 --> 00:06:05,169
Backstage cut service discovery time in
half, but more importantly, it reduced

93
00:06:05,864 --> 00:06:07,914
developer onboarding from weeks to days.

94
00:06:08,414 --> 00:06:13,304
They were so successful that
they open source of it, and it's

95
00:06:13,304 --> 00:06:17,354
now A-C-C-N-F incubating project
used by hundreds of companies.

96
00:06:17,854 --> 00:06:22,594
Netflix took a different approach focusing
on development deployment sophistication.

97
00:06:23,464 --> 00:06:28,384
Spinnaker enables them to deploy
thousands of times per day across

98
00:06:28,384 --> 00:06:34,335
multiple cloud enrollments with advanced
strategies, including Canary STA releases.

99
00:06:34,835 --> 00:06:41,794
They maintain 99.99% availability while
deploying constantly something that would

100
00:06:41,794 --> 00:06:44,405
be impossible without platform automation.

101
00:06:44,905 --> 00:06:49,134
Capital One's success is especially
relevant for regulated industries.

102
00:06:49,854 --> 00:06:54,585
They achieved 40% faster time
to production while actually

103
00:06:54,645 --> 00:06:57,044
improving security and compliance.

104
00:06:57,645 --> 00:07:00,344
The reduced security
vulnerabilities by 60%.

105
00:07:01,304 --> 00:07:06,824
Do automated scanning and policy
enforcement built into their platform?

106
00:07:07,544 --> 00:07:15,194
The common thread each started with the
biggest pain point see delivered early

107
00:07:15,194 --> 00:07:21,119
values that the expanded the business
based on their developer feedback.

108
00:07:21,619 --> 00:07:23,599
Let's talk about the technology stack.

109
00:07:23,809 --> 00:07:27,019
The good news is that the ecosystem
has matured significantly.

110
00:07:27,139 --> 00:07:29,479
You don't need to build
everything from scratch.

111
00:07:30,349 --> 00:07:32,989
Kubernetes has become
the defacto standard.

112
00:07:33,049 --> 00:07:37,279
78% of elite performing
organizations use it as their

113
00:07:37,279 --> 00:07:38,869
container orchestration platform.

114
00:07:39,319 --> 00:07:40,969
But here is the critical insight.

115
00:07:41,419 --> 00:07:43,939
Do not expose Kubernetes
to your developers.

116
00:07:44,029 --> 00:07:46,249
Abstract it behind simpler interfaces.

117
00:07:46,749 --> 00:07:49,719
This Golden rule guides
all platform decisions.

118
00:07:49,809 --> 00:07:52,659
Abstract the complex,
expose the necessary.

119
00:07:53,199 --> 00:07:57,069
Your developers don't need to understand
Kubernetes networking or storage classes.

120
00:07:57,729 --> 00:08:03,309
They just simply need to say, I
want a scalable web service and

121
00:08:03,429 --> 00:08:05,439
have it provisioned automatically.

122
00:08:05,939 --> 00:08:07,919
GitHubs is your operational backbone.

123
00:08:08,369 --> 00:08:13,199
Everything including infrastructures,
applications, configurations, lifts in it.

124
00:08:13,699 --> 00:08:17,869
This makes everything auditable,
roll backable, and reproducible.

125
00:08:18,349 --> 00:08:21,979
When something breaks, you can
trace exactly what changed and when.

126
00:08:22,479 --> 00:08:25,689
Service meshes handle this
networking complexity that

127
00:08:25,689 --> 00:08:26,949
kills developer productivity.

128
00:08:27,449 --> 00:08:30,629
Instead of each team figuring
out service to service

129
00:08:30,629 --> 00:08:34,859
authentication, circuit breakers and
observability, the mesh provides it

130
00:08:34,949 --> 00:08:36,719
automatically, which is auto box.

131
00:08:37,219 --> 00:08:39,019
The key is composition over creation.

132
00:08:39,519 --> 00:08:41,739
Backstage for developer portals.

133
00:08:42,069 --> 00:08:45,029
Argo City for GitHubs
IST for service mesh.

134
00:08:45,689 --> 00:08:51,149
Focus on your custom development on
the unique aspects of your business

135
00:08:51,149 --> 00:08:53,969
needs, not the infrastructure plumbing.

136
00:08:54,469 --> 00:08:56,599
This is probably the most
common question I get.

137
00:08:56,809 --> 00:08:58,489
Should we build or buy?

138
00:08:58,969 --> 00:09:02,809
The answer depends entirely on your
context, on our con constraints.

139
00:09:03,309 --> 00:09:07,089
If you are a financial institution
with 2000 plus engineers, unique

140
00:09:07,089 --> 00:09:11,169
compliance requirements and
multi-year timeline building

141
00:09:11,169 --> 00:09:13,809
common custom one makes more sense.

142
00:09:14,309 --> 00:09:18,209
You have the scale to justify
the investment and the need

143
00:09:18,209 --> 00:09:19,349
for deep customization.

144
00:09:19,849 --> 00:09:23,509
If you are a mid-sized company
with standard Technologies stack

145
00:09:23,599 --> 00:09:28,549
and 200 plus engineers adopting
executive solutions is best.

146
00:09:29,049 --> 00:09:32,679
Backstage is production ready,
has a thriving community and can

147
00:09:32,679 --> 00:09:34,179
be customized for your needs.

148
00:09:34,929 --> 00:09:36,819
But here is the reality check.

149
00:09:37,599 --> 00:09:41,109
Building a custom platform from
scratch requires at least a 10 to

150
00:09:41,109 --> 00:09:42,909
15 full-time engineers minimum.

151
00:09:43,409 --> 00:09:47,664
I have seen organizations
underestimate this by 50% or more.

152
00:09:48,564 --> 00:09:51,779
Factor the true cost into
your ROA calculations.

153
00:09:52,279 --> 00:09:55,219
Most successful implementations
take a hybrid approach.

154
00:09:55,399 --> 00:10:00,439
Start with backstage for your developer
portal, Argo City for GitHubs and custom

155
00:10:00,439 --> 00:10:02,149
components for your specific needs.

156
00:10:02,599 --> 00:10:07,489
This gives you at least 80% of
the value in 20% of the time.

157
00:10:07,989 --> 00:10:10,599
The key is starting
somewhere and iterating.

158
00:10:10,929 --> 00:10:12,759
Perfect is the enemy of good.

159
00:10:13,259 --> 00:10:17,279
Remember this and good
is the enemy of shit.

160
00:10:17,779 --> 00:10:19,879
Okay, let's make this actionable.

161
00:10:20,509 --> 00:10:23,419
Here is a proven implementation
roadmap that minimizes the risk

162
00:10:23,479 --> 00:10:26,599
while maximizing EV early values.

163
00:10:27,529 --> 00:10:31,399
Phase one is all about quick wins
and building organizational momentum.

164
00:10:31,899 --> 00:10:35,920
Pick your biggest developer's pain
point, usually CSAD, or environment

165
00:10:35,920 --> 00:10:38,109
provisioning and solve it really well.

166
00:10:38,609 --> 00:10:42,779
Your goal is to get one capability
that developers love using.

167
00:10:43,709 --> 00:10:50,459
I cannot overemphasize this, that you
need a product owner, not just engineers.

168
00:10:50,910 --> 00:10:56,550
Successful platforms treat developers
as customers, measure satisfaction,

169
00:10:56,910 --> 00:10:59,219
and it treat based on feedback.

170
00:10:59,729 --> 00:11:03,149
This isn't a technology project,
it's a product development effort.

171
00:11:03,649 --> 00:11:08,449
Phase two is where you build the
platform foundation add observability.

172
00:11:08,949 --> 00:11:11,709
So developers can debug their own issues.

173
00:11:12,489 --> 00:11:16,029
Integrate security so it's
automated rather than a gate.

174
00:11:16,989 --> 00:11:17,949
Create templates.

175
00:11:17,979 --> 00:11:21,279
So new projects start with best practices.

176
00:11:21,279 --> 00:11:26,549
Built in phase three is where
you get advanced AI assisted

177
00:11:26,549 --> 00:11:30,404
development, sophisticated deployment
strategies cloud orchestration.

178
00:11:31,305 --> 00:11:34,034
But do not skip phase one and phase two.

179
00:11:34,154 --> 00:11:37,364
I have seen organizations try to
build the ultimate platform from

180
00:11:37,364 --> 00:11:41,654
day one and fail because they didn't
establish developers trust first.

181
00:11:42,154 --> 00:11:46,144
The key metrics phase one success
is measured in our environment.

182
00:11:46,144 --> 00:11:47,914
Creation is less than a day.

183
00:11:48,214 --> 00:11:53,914
Phase two, successes, adoption, 80%
of applications using your platform.

184
00:11:54,604 --> 00:11:59,374
Phase three's, elite performance
deployment, frequency, lead times.

185
00:11:59,989 --> 00:12:02,270
And reliability matching industry leaders.

186
00:12:02,869 --> 00:12:08,119
I know it's like in a 12 to 18
months, sounds long, but remember,

187
00:12:08,629 --> 00:12:12,979
your competitors are either already
building this or starting now.

188
00:12:13,479 --> 00:12:19,804
The question comes here isn't whether to
start, it's whether to lead or follow.

189
00:12:20,304 --> 00:12:24,864
Let's talk about measuring success,
because what gets measured gets managed,

190
00:12:25,104 --> 00:12:27,474
and what gets managed gets funded.

191
00:12:27,974 --> 00:12:29,775
These aren't vanity metrics.

192
00:12:30,405 --> 00:12:32,895
They directly correlate
with business outcomes.

193
00:12:33,344 --> 00:12:38,295
Elite performance deployment deploys
6,000, finance 70 times more frequently

194
00:12:38,295 --> 00:12:42,170
than low performance, while maintaining
three times lower failure TR rates.

195
00:12:42,670 --> 00:12:46,720
When your competition can deploy
features in us while you take

196
00:12:46,720 --> 00:12:49,000
Wix, that's not technical problem.

197
00:12:49,390 --> 00:12:55,570
It's an existential business threat,
but here is what's really compelling

198
00:12:56,560 --> 00:12:58,060
the infrastructure cost savings.

199
00:12:58,120 --> 00:13:02,290
Organizations with mature
platforms achieve 30 to 50%

200
00:13:02,560 --> 00:13:04,060
lower costs per transaction.

201
00:13:04,560 --> 00:13:08,550
Using the better resource utilization,
automation and standardization.

202
00:13:09,450 --> 00:13:13,080
For a large enterprises, that's
millions of dollars annually.

203
00:13:13,580 --> 00:13:17,810
Developer retention is equally important
in today's competitive talent market.

204
00:13:17,960 --> 00:13:22,160
Developer satisfaction directly
impacts recruiting and retention costs.

205
00:13:22,700 --> 00:13:26,390
We have seen 25% improvements
in satisfaction scores of

206
00:13:26,390 --> 00:13:27,650
the platform implementation.

207
00:13:28,150 --> 00:13:29,410
Start measuring immediately.

208
00:13:30,055 --> 00:13:32,725
Even if your numbers are
terrible, that's still fine.

209
00:13:33,475 --> 00:13:36,385
You need the baseline to
demonstrate improvement.

210
00:13:36,925 --> 00:13:40,735
I have worked with organizations
that reduced deployment time from few

211
00:13:40,765 --> 00:13:43,495
weeks to two hours within 12 months.

212
00:13:44,245 --> 00:13:48,925
The ROI is unbelievable when you
can quantify the transformation.

213
00:13:49,425 --> 00:13:52,334
Let me save you significant
pain by sharing the most common

214
00:13:52,364 --> 00:13:53,859
implementation failures I have observed.

215
00:13:54,359 --> 00:13:58,109
The I trap kills more platforms
than technical issues.

216
00:13:58,229 --> 00:14:02,639
I have seen beautifully architecture
platforms that nobody uses because

217
00:14:02,939 --> 00:14:06,060
they solve theoretical problems
instead of real developer's.

218
00:14:06,060 --> 00:14:06,420
Pain.

219
00:14:07,170 --> 00:14:10,769
Start with user research,
not architecture diagrams.

220
00:14:11,459 --> 00:14:13,439
This is a very important
point to remember.

221
00:14:14,369 --> 00:14:18,800
The perfect platform always
falls equally dangerous.

222
00:14:19,790 --> 00:14:21,410
One organization is worked.

223
00:14:21,910 --> 00:14:25,660
Where I worked with spent 18 months
building the ultimate platform.

224
00:14:26,380 --> 00:14:32,310
When they launched, developers complained
it was too complex to use and went

225
00:14:32,310 --> 00:14:34,260
back to their old developer tools.

226
00:14:34,950 --> 00:14:39,390
They had to start over with A
simpler approach not invented.

227
00:14:39,390 --> 00:14:41,455
Here is syndrome is very expensive.

228
00:14:42,315 --> 00:14:45,570
Do not build a custom
service mesh when exists.

229
00:14:46,020 --> 00:14:49,800
Do not create a deployment pipeline
when Argo CD is proven at scale.

230
00:14:50,300 --> 00:14:52,340
It means and you don't
need to reinvent the wheel.

231
00:14:52,819 --> 00:14:58,280
Focus your custom development on
what makes your business unique.

232
00:14:58,780 --> 00:15:03,600
Governance balance is tricky, too
rigid, and you still innovation

233
00:15:04,100 --> 00:15:06,680
too permissive, and you get chaos.

234
00:15:07,640 --> 00:15:12,380
Start with lightweight guidelines
and tighten based on actual

235
00:15:12,380 --> 00:15:14,810
problems, not theoretical risks.

236
00:15:15,350 --> 00:15:17,990
Most importantly, this
isn't a technology project.

237
00:15:18,260 --> 00:15:21,350
Remember, it's an
organizational transformation.

238
00:15:21,850 --> 00:15:26,650
You need executive sponsorship, change
management, and clear communication about

239
00:15:26,650 --> 00:15:29,620
how roles and responsibilities evolves.

240
00:15:30,370 --> 00:15:34,410
Technical excellence without
organizational alignment leads to

241
00:15:34,410 --> 00:15:36,285
beautiful systems that nobody uses.

242
00:15:36,785 --> 00:15:37,555
Looking ahead.

243
00:15:38,194 --> 00:15:41,495
The next 2, 3, 2 to three
years will bring transformative

244
00:15:41,495 --> 00:15:43,115
changes to platform engineering.

245
00:15:43,925 --> 00:15:46,085
AI integration is the
biggest game changer.

246
00:15:46,625 --> 00:15:50,765
We are already seeing platforms that
generate deployment configurations

247
00:15:50,765 --> 00:15:52,984
from natural language descriptions.

248
00:15:53,825 --> 00:15:57,605
Imagine describing your infrastructure
needs in plain English and having

249
00:15:57,605 --> 00:16:00,484
production ready environments
provisioned automatically

250
00:16:00,545 --> 00:16:02,180
with security best practices.

251
00:16:02,180 --> 00:16:05,899
Built in GitHub copay showed
us, yeah, as a coding.

252
00:16:06,399 --> 00:16:11,319
The next wave is AI assisted
infrastructure management Platforms that

253
00:16:11,319 --> 00:16:17,169
can predict scaling needs, automatically
remediate common issues and suggest

254
00:16:17,229 --> 00:16:19,569
optimizations based on UCS patterns.

255
00:16:20,069 --> 00:16:26,190
Democratization through low code means
your business analyst can build workflow

256
00:16:26,190 --> 00:16:28,230
automation without bothering developers.

257
00:16:28,770 --> 00:16:32,160
This isn't replacing
developers, it's freeing them.

258
00:16:32,579 --> 00:16:35,850
To work on harder and
more valuable problems.

259
00:16:36,350 --> 00:16:37,670
Multi-cloud isn't coming.

260
00:16:37,760 --> 00:16:38,570
It's here.

261
00:16:38,780 --> 00:16:42,560
84% of enterprise uses
multi-cloud providers.

262
00:16:43,060 --> 00:16:47,110
The platforms that when will abstract
those differences seamlessly,

263
00:16:47,620 --> 00:16:51,250
your developers shouldn't need to
know whether their service runs on

264
00:16:51,370 --> 00:16:56,380
AWS Azure, Google Cloud, or IBM.

265
00:16:56,800 --> 00:17:00,765
Or LL Boomi and any of the cloud different
clouds, they don't need to know about it.

266
00:17:01,695 --> 00:17:06,735
Platform engineering is becoming a
special career path with dedicated

267
00:17:06,765 --> 00:17:10,935
training, pro training programs,
and premium compensations.

268
00:17:11,435 --> 00:17:12,845
This is a high demanding

269
00:17:13,345 --> 00:17:13,695
rules.

270
00:17:14,595 --> 00:17:18,650
The demand for platform engineers
has grown 300% in the last two

271
00:17:18,650 --> 00:17:20,540
years, and it's exhilarating.

272
00:17:21,040 --> 00:17:25,420
The organizations that invent
invest in platform capabilities now

273
00:17:25,420 --> 00:17:30,100
will have sustainable competitive
advantages in developer productivity,

274
00:17:30,610 --> 00:17:33,160
operational efficiency, and innovation.

275
00:17:33,160 --> 00:17:33,520
Speed.

276
00:17:34,020 --> 00:17:37,380
Okay, so now we already have
discussed it quite a lot.

277
00:17:37,770 --> 00:17:39,365
Let's make this immediately actionable.

278
00:17:39,935 --> 00:17:42,720
Don't leave this presentation
with your just inspiration.

279
00:17:43,050 --> 00:17:44,490
Live with the concrete plan.

280
00:17:44,850 --> 00:17:46,590
You can start executing this week.

281
00:17:47,130 --> 00:17:49,380
Week one, send a developer
experience survey.

282
00:17:49,800 --> 00:17:50,910
Ask one simple question.

283
00:17:51,120 --> 00:17:54,060
What's the most frustrating
part of getting code from

284
00:17:54,240 --> 00:17:55,410
your laptop to production?

285
00:17:56,190 --> 00:18:01,040
The answers will be given to you
based on the developer's experience

286
00:18:01,100 --> 00:18:06,860
and your platform roadmap, and create
organizational awareness for the

287
00:18:06,860 --> 00:18:09,650
problems your platform team needs.

288
00:18:09,650 --> 00:18:12,470
Someone with product management
skills, not just engineers.

289
00:18:13,055 --> 00:18:16,535
This person will be responsible
for developer satisfaction,

290
00:18:17,345 --> 00:18:20,165
roadmap prioritization, and
stakeholder communication.

291
00:18:20,255 --> 00:18:22,625
This role is very critical for success.

292
00:18:23,465 --> 00:18:28,355
Your MEP should solve one problem
extremely well, not 10 problems poorly.

293
00:18:29,225 --> 00:18:34,520
Pick something you can deliver in six
to eight weeks, maximum enrollment.

294
00:18:34,520 --> 00:18:39,335
Provisioning and CICD standardizations
are usually good starting points.

295
00:18:40,205 --> 00:18:41,640
Success measure starts immediately.

296
00:18:42,410 --> 00:18:45,800
Track time to enrollment creation,
deployment frequency, and

297
00:18:45,860 --> 00:18:47,300
developer satisfaction codes.

298
00:18:48,140 --> 00:18:52,310
These metrics will justify
continued investment and guide you

299
00:18:52,430 --> 00:18:54,970
decisions towards your decisions.

300
00:18:55,470 --> 00:18:57,030
Here is your homework assignment.

301
00:18:57,090 --> 00:18:57,480
Okay.

302
00:18:57,980 --> 00:19:00,140
Start your developer survey this week.

303
00:19:00,530 --> 00:19:04,520
Do not wait for perfect
conditions or complete buy-in.

304
00:19:05,000 --> 00:19:07,880
Create momentum through
small actions and early wins.

305
00:19:08,380 --> 00:19:14,740
The orations that start will now, the
orination who are starting right now

306
00:19:14,770 --> 00:19:19,570
will have 12 to 18 month advantages
over those that are still waiting.

307
00:19:20,350 --> 00:19:22,540
Platform engineering
isn't optional anymore.

308
00:19:22,900 --> 00:19:24,520
It's table stakes.

309
00:19:24,610 --> 00:19:27,040
Table stakes for competitive
software delivery.

310
00:19:27,540 --> 00:19:31,290
Let me leave you with five principles
that separate successful platform

311
00:19:31,290 --> 00:19:33,480
implementations from expensive values.

312
00:19:33,945 --> 00:19:34,515
Fast.

313
00:19:35,295 --> 00:19:37,815
This isn't about collecting more tools.

314
00:19:38,235 --> 00:19:43,515
I have seen organizations with
47 different development tools

315
00:19:43,755 --> 00:19:47,265
who is thinking that they
may need another 40th one.

316
00:19:48,015 --> 00:19:52,125
Platform engineering is about creating
coherent developer experiences.

317
00:19:52,845 --> 00:19:55,125
That high complexity not add to it.

318
00:19:55,905 --> 00:20:01,125
Second, start with problems that your
developers actually have, not problems

319
00:20:01,125 --> 00:20:03,225
you think they should be having it.

320
00:20:03,725 --> 00:20:08,675
The most elegant technical solution is
worthless if it doesn't solve real pain.

321
00:20:09,175 --> 00:20:13,945
The third product mindset is what
separates winners from losers.

322
00:20:14,365 --> 00:20:18,205
Your platform succeeds when
developers choose to use it,

323
00:20:18,895 --> 00:20:20,935
not when they are forced to.

324
00:20:21,435 --> 00:20:27,435
That changes everything about how you
design, build, and evolve your platform.

325
00:20:28,125 --> 00:20:30,305
Fourth measurement isn't optional.

326
00:20:30,545 --> 00:20:34,985
You need data to justify continued
investment, guide roadmap decisions

327
00:20:35,045 --> 00:20:39,745
and prove your business that
impacted start measuring immediately.

328
00:20:39,805 --> 00:20:43,105
Even if your numbers are
embarrassing, that's still fine.

329
00:20:43,605 --> 00:20:47,205
Fifth, think evolution, not revolution.

330
00:20:48,075 --> 00:20:49,950
Small improvements compound over time.

331
00:20:50,500 --> 00:20:52,110
Perfect platforms shipped.

332
00:20:52,480 --> 00:20:53,070
Never beat.

333
00:20:53,570 --> 00:20:55,610
Good platforms improved continuously.

334
00:20:56,110 --> 00:20:57,850
Here is the reality platform.

335
00:20:57,850 --> 00:21:00,209
Engineering is rapidly
becoming table stakes.

336
00:21:00,929 --> 00:21:02,610
Not competitive advantage.

337
00:21:03,120 --> 00:21:07,020
Every major technology company
already has sophisticated platforms.

338
00:21:07,520 --> 00:21:11,630
The question isn't whether you will
be implementing platform engineering.

339
00:21:12,290 --> 00:21:18,110
It's whether you will do it before or
after your competitors gain an advantage.

340
00:21:18,610 --> 00:21:21,939
Okay, let's connect and
continue the conversations.

341
00:21:22,059 --> 00:21:28,089
So here are my details, my personal
id, email id, and my LinkedIn and the

342
00:21:28,089 --> 00:21:35,134
research paper, what I have done on
this topic and the available resources.

343
00:21:35,134 --> 00:21:38,544
What we are going to discuss
further down now the detailed

344
00:21:38,544 --> 00:21:40,794
survey questions are available.

345
00:21:41,335 --> 00:21:43,585
You can ping me, you
can send an email to me.

346
00:21:43,675 --> 00:21:47,335
I can share under this template.

347
00:21:47,835 --> 00:21:52,395
Let me give you a concrete framework
for calculating ROI On the cost side,

348
00:21:52,635 --> 00:21:54,195
calculate developers time waste.

349
00:21:54,975 --> 00:21:59,070
Take your number of developers,
multiply by hours per week spent on

350
00:21:59,070 --> 00:22:04,635
infrastructure issues, multiply by
hourly rate and multiply by 52 weeks.

351
00:22:05,235 --> 00:22:06,885
Add infrastructure inefficiency costs.

352
00:22:07,385 --> 00:22:11,045
Incident response costs and
revenue loss due to the slow

353
00:22:11,045 --> 00:22:13,075
delivery on the investment side.

354
00:22:13,525 --> 00:22:18,445
Plan for 10 to 15 fts for your
platform team over three years,

355
00:22:18,985 --> 00:22:22,645
technology licenses, migration
costs, and ongoing operations.

356
00:22:22,975 --> 00:22:25,765
Most organizations with a hundred
plus developers to see 300

357
00:22:25,765 --> 00:22:27,745
to 500% ROA over three years.

358
00:22:28,375 --> 00:22:31,525
This math is compelling when
you quantify the transformation.

359
00:22:32,025 --> 00:22:35,685
Here is a practical edition metrics
for your technology stack for developer

360
00:22:35,685 --> 00:22:42,225
portals backstage for open source
compost for commercial AWS per proton

361
00:22:42,225 --> 00:22:47,895
for cloud, native for GitHubs, Argo
cd, or flux for open source GitLab.

362
00:22:47,895 --> 00:22:48,495
For commercial.

363
00:22:49,395 --> 00:22:53,745
Choose open source for customization
and large teams commercial for

364
00:22:53,775 --> 00:22:55,575
enterprise support and compliance.

365
00:22:56,025 --> 00:22:58,095
Cloud native for rapid deployment and.

366
00:22:58,440 --> 00:23:01,040
Managed services before you start.

367
00:23:01,160 --> 00:23:02,810
Here is your plea flight, pre-flight.

368
00:23:02,810 --> 00:23:04,130
Check-in checklist.

369
00:23:05,120 --> 00:23:07,970
Organizationally secure
executive sponsorship.

370
00:23:08,210 --> 00:23:12,920
Identify a platform product owner,
document developer pain points, and

371
00:23:12,920 --> 00:23:14,450
create a change management plan.

372
00:23:15,170 --> 00:23:18,920
Technically document your
current architecture, make

373
00:23:18,920 --> 00:23:23,090
technology stack decisions, and
select your pilot application.

374
00:23:23,590 --> 00:23:27,820
For team readiness, high platform
engineers ensure you have product owners,

375
00:23:27,820 --> 00:23:33,430
project, sorry, product management
skills, and establish your support model.

376
00:23:33,760 --> 00:23:37,660
Don't skip these steps, they
determine success or failure.

377
00:23:38,160 --> 00:23:43,040
I have included some extension resources
in the slides, books like team topologies,

378
00:23:43,190 --> 00:23:48,370
industry reports, and community links to
continue our platform engineering journey.

379
00:23:49,044 --> 00:23:54,135
Feel free to search them and Google them
and join them and continue your journey.

380
00:23:54,635 --> 00:23:59,255
And finally, thank you for your
time investing in this presentation.

381
00:24:00,215 --> 00:24:00,635
Platform.

382
00:24:00,635 --> 00:24:04,505
Engineering rep represents one of
the most significant evolutions in

383
00:24:04,505 --> 00:24:09,845
software delivery practices, and
I'm exited to see how you all apply

384
00:24:09,845 --> 00:24:11,310
these concepts in your organizations.

385
00:24:11,810 --> 00:24:17,419
I'm here if you need any help,
feel free to contact me and I'm

386
00:24:17,419 --> 00:24:22,459
ready to share my knowledge and my
experiences for your team success.

387
00:24:23,059 --> 00:24:28,579
And once again, thank you and thanks
for Con 42 providing this opportunity.

388
00:24:29,299 --> 00:24:29,809
Thank you.

389
00:24:29,929 --> 00:24:30,589
Have a great day.

