1
00:00:00,439 --> 00:00:02,050
Hi, Tim Spann here.

2
00:00:02,570 --> 00:00:07,640
my talk today is codeless generative
AI pipelines prompt automation.

3
00:00:08,230 --> 00:00:09,910
Now I want to apologize.

4
00:00:10,540 --> 00:00:12,570
I was in the hospital this week.

5
00:00:12,960 --> 00:00:18,519
So my talk today may not be as
fast or as fun as normal, but

6
00:00:18,550 --> 00:00:20,500
we'll do as well as we can.

7
00:00:20,800 --> 00:00:23,610
And the slides are available
to you and all the source code.

8
00:00:24,085 --> 00:00:25,955
So thanks, and bear with me.

9
00:00:26,505 --> 00:00:29,525
If you have any questions,
please contact me.

10
00:00:30,015 --> 00:00:35,054
You can get me on LinkedIn,
social media, or email.

11
00:00:35,275 --> 00:00:35,785
Thank you.

12
00:00:36,285 --> 00:00:39,905
Now these slides, again,
The link is right there.

13
00:00:40,265 --> 00:00:44,855
You can also hit the QR code and
pet my cat on the way to the slides.

14
00:00:45,355 --> 00:00:51,994
before we get into it, prompt automation
is really about making prompts as

15
00:00:52,064 --> 00:00:54,324
powerful and as easy as possible.

16
00:00:54,969 --> 00:00:56,659
and taking out the drudgery.

17
00:00:56,849 --> 00:00:57,699
Very awesome.

18
00:00:57,759 --> 00:01:02,469
Often there's a lot of extra
work that people need to do and

19
00:01:02,469 --> 00:01:03,719
we're going to minimize that.

20
00:01:04,469 --> 00:01:07,399
But first, what is this all about?

21
00:01:07,909 --> 00:01:12,249
recently, if you haven't heard, and
I'm sure you have, with the power

22
00:01:12,330 --> 00:01:18,790
of the new gen of AI unstructured
data is now extremely useful,

23
00:01:19,160 --> 00:01:22,110
whether it's documents, images.

24
00:01:22,805 --> 00:01:26,155
spreadsheets, notes, emails, audio.

25
00:01:26,655 --> 00:01:29,565
Lots of things in your knowledge
base, tons of documents.

26
00:01:30,095 --> 00:01:36,885
With using these, date learning models,
we can now convert them into vectors,

27
00:01:37,195 --> 00:01:44,065
which are just array, big arrays,
thousand or more dimensions of an array

28
00:01:44,435 --> 00:01:46,495
that can be stored in a vector database.

29
00:01:46,775 --> 00:01:53,505
And this makes your unstructured data
available for very fast searching and

30
00:01:53,515 --> 00:01:56,295
for, utilizing whatever you need to do.

31
00:01:56,545 --> 00:01:59,395
And the power of this is because
of these vector embeddings.

32
00:01:59,895 --> 00:02:03,895
And, like we mentioned,
unstructured data is everywhere.

33
00:02:04,465 --> 00:02:08,785
Because, as you imagine, it's social
media posts, it's logs, it's email,

34
00:02:09,135 --> 00:02:13,805
text from anywhere, documents, legal
documents, PDFs, whatever you have.

35
00:02:14,645 --> 00:02:19,375
And, images, obviously,
videos, and a ton more.

36
00:02:19,875 --> 00:02:23,925
Now, we have to be able to
find it before we can use it.

37
00:02:24,485 --> 00:02:28,855
Now, once we've gotten this data
stored, we want to be able to

38
00:02:28,855 --> 00:02:35,135
search, and make these things readily
available to whoever needs them.

39
00:02:36,045 --> 00:02:41,135
And so we take them, transform them into
vectors, we get our embeddings, they're

40
00:02:41,135 --> 00:02:44,335
stored and now someone's gonna do a query.

41
00:02:44,585 --> 00:02:48,835
Now this is where we could automate
a lot of things around the prompts

42
00:02:48,835 --> 00:02:50,035
that people are putting in.

43
00:02:50,535 --> 00:02:55,845
because maybe they just put the
most basic, query here to get back,

44
00:02:56,515 --> 00:03:00,615
whatever makes sense from the vector
database, using an approximate

45
00:03:00,635 --> 00:03:02,675
nearest neighbor similarity search.

46
00:03:03,075 --> 00:03:07,325
We'll do the math to get whatever is
close to what you need, which is nice.

47
00:03:07,325 --> 00:03:11,865
You get Just what you want, especially
if it's been stored properly, we

48
00:03:11,865 --> 00:03:16,255
use these results, send them to
the LLM, and everything's good.

49
00:03:17,035 --> 00:03:22,075
Now, Milvus is the open source
product that I'm talking about.

50
00:03:22,845 --> 00:03:28,675
It has at this point over 30, 000
stars, tons of users, tons of download.

51
00:03:28,675 --> 00:03:29,875
It's easy to use.

52
00:03:30,215 --> 00:03:34,835
Pip install it in a notebook and use
it right there or use it as docker or

53
00:03:34,835 --> 00:03:37,155
in a big cluster or in Zillow's cloud.

54
00:03:37,845 --> 00:03:42,155
So you can write code once in the
notebook and it is available wherever

55
00:03:42,155 --> 00:03:45,155
you need it to be, which makes it great.

56
00:03:45,185 --> 00:03:48,425
And it's integrated with everything
you need it to be, whether it's

57
00:03:48,425 --> 00:03:52,045
different models, people hosting
models, different libraries.

58
00:03:52,725 --> 00:03:58,215
sources and support for dense and
sparse embedding filtering re ranking

59
00:03:58,215 --> 00:04:00,115
and all the features you expect.

60
00:04:00,965 --> 00:04:02,525
Very easy to get started.

61
00:04:03,025 --> 00:04:04,385
And why is this?

62
00:04:05,165 --> 00:04:07,015
Why are you automating these prompts?

63
00:04:07,845 --> 00:04:12,055
With the support of RAG, this
makes us even more powerful.

64
00:04:12,735 --> 00:04:19,975
We can easily take whatever you use your
question and we can also cache these.

65
00:04:20,405 --> 00:04:26,315
Like keep the most popular ones in
a collection in the vector database.

66
00:04:27,045 --> 00:04:31,515
Map ones that are the same or nearly
the same, and we can do that with scalar

67
00:04:31,535 --> 00:04:33,915
filtering, as well as vector search.

68
00:04:34,695 --> 00:04:36,565
So this makes that pretty easy.

69
00:04:37,145 --> 00:04:38,945
This will improve the accuracy.

70
00:04:39,445 --> 00:04:44,255
Reduce, hallucinations and make
it specific to your domain of

71
00:04:44,265 --> 00:04:45,655
data that you put in there.

72
00:04:46,115 --> 00:04:50,235
I think this is really important and
we could do that against any model.

73
00:04:50,235 --> 00:04:52,855
It is not tied to any platform or model.

74
00:04:53,165 --> 00:04:56,465
Whatever's in your vector
database can be used.

75
00:04:56,985 --> 00:04:57,855
This is important.

76
00:04:57,865 --> 00:05:00,135
So cached queries.

77
00:05:00,990 --> 00:05:06,730
finding, documents and information
that makes the prompts easy and using

78
00:05:06,730 --> 00:05:11,680
libraries like lang chain mama index
that automate a lot of this rag and

79
00:05:11,680 --> 00:05:13,470
build some of these prompts for you.

80
00:05:13,750 --> 00:05:16,500
And of course you could use
prompt templates as well.

81
00:05:17,000 --> 00:05:18,600
And again, you own the data.

82
00:05:18,600 --> 00:05:20,270
You don't have to worry where it's going.

83
00:05:20,680 --> 00:05:25,030
And often you may not even need to call
the LLM if we've got things cached.

84
00:05:25,530 --> 00:05:28,640
Now, how can I get data in?

85
00:05:29,315 --> 00:05:32,605
How can I automate building the prompts?

86
00:05:32,935 --> 00:05:34,555
take this a level up.

87
00:05:35,475 --> 00:05:40,405
Now often you just write a Python
app and those can be really good and

88
00:05:40,405 --> 00:05:45,025
there are libraries for automating
a lot of the prompts, but what

89
00:05:45,025 --> 00:05:46,895
if you don't want to do that?

90
00:05:46,895 --> 00:05:49,945
What if you have real time workloads?

91
00:05:49,945 --> 00:05:55,105
You could do dataflow pipelines and
these could be from a number of real

92
00:05:55,105 --> 00:05:58,025
time, tools such as Apache NiFi.

93
00:05:58,435 --> 00:06:02,165
there's some tools in Flink and
there's some, other open source

94
00:06:02,165 --> 00:06:03,895
ones in the real time space.

95
00:06:04,755 --> 00:06:10,605
But the major things that they do
are make sure we can get the context

96
00:06:10,695 --> 00:06:13,775
externally from, wherever it needs to be.

97
00:06:13,775 --> 00:06:19,585
So ingest this data, route it, clean
it, enrich it, transform it, parse

98
00:06:19,585 --> 00:06:23,885
it, chunk it into pieces, vectorize
it, get it everything you need there.

99
00:06:24,385 --> 00:06:28,265
Crafting these prompts for you
automatically, again from either templates

100
00:06:28,305 --> 00:06:33,525
or applying different logic from, what
decisions you've made, pre parsing your,

101
00:06:34,205 --> 00:06:39,795
initial query or suggestion to build out
a proper prompt that'll get the results

102
00:06:39,795 --> 00:06:46,165
we need and obviously augment that with,
a context we retrieve from, external

103
00:06:46,165 --> 00:06:48,245
sources, especially a vector database.

104
00:06:48,245 --> 00:06:48,295
Thanks.

105
00:06:48,920 --> 00:06:54,180
And round triplets so we can talk
to things like Discord, Slack, REST

106
00:06:54,180 --> 00:06:58,230
Interface, Kafka, SQL, whatever those are.

107
00:06:58,620 --> 00:07:02,680
So we can make that managed
for you, get the results back.

108
00:07:03,290 --> 00:07:08,600
With the latest version of NiFi,
which is finally in production 2.

109
00:07:08,600 --> 00:07:09,339
0.

110
00:07:09,340 --> 00:07:10,730
Use the latest Java.

111
00:07:11,420 --> 00:07:14,380
It is very fast and it lets us run Python.

112
00:07:14,780 --> 00:07:19,700
So we can take those really powerful
Python libraries and apps we had and

113
00:07:19,700 --> 00:07:23,990
make them in a manner that makes it
easy to automate things enrich things

114
00:07:23,990 --> 00:07:28,450
and improve our prompts very easily
without having to hand code and

115
00:07:28,450 --> 00:07:32,835
connect all these things and be able
to scale it out so I can take anything

116
00:07:32,835 --> 00:07:35,075
that comes from Kafka and do that.

117
00:07:35,505 --> 00:07:38,355
I've got one that gets company names out.

118
00:07:38,355 --> 00:07:42,825
So if I want to parse your prompt
before we do some things, I

119
00:07:42,825 --> 00:07:45,155
can get your company names out.

120
00:07:46,105 --> 00:07:51,675
when we have stuff coming through,
this may be on a, towards the end.

121
00:07:52,065 --> 00:07:55,905
I want to be able to show
captions with my images.

122
00:07:56,235 --> 00:07:57,805
Very easy to do that.

123
00:07:58,305 --> 00:08:01,395
And, add additional classification
and information there.

124
00:08:01,895 --> 00:08:06,905
we do not want any, problematic
images coming through the system.

125
00:08:07,185 --> 00:08:12,025
So we'll use a model to detect those
and we could automate that as well in

126
00:08:12,025 --> 00:08:15,345
regular Python or in our NiFi automation.

127
00:08:15,845 --> 00:08:20,145
detecting facial, emotions could
be helpful for me right now with

128
00:08:20,225 --> 00:08:22,715
what's going on with, surgery.

129
00:08:23,435 --> 00:08:29,935
And finally, next part is, we have it, I
need to distribute these workloads, maybe

130
00:08:29,935 --> 00:08:38,225
to Flink, to Ray, to Spark, maybe directly
dump them into Milvus, Kafka is the key,

131
00:08:38,755 --> 00:08:43,585
Kafka is an awesome writer, there's a
great museum in Prague that I visited,

132
00:08:43,585 --> 00:08:47,685
but it is also a really powerful tool.

133
00:08:48,420 --> 00:08:53,870
central data hub to move your data
around, and that becomes really important.

134
00:08:54,260 --> 00:08:59,180
If you want to run NiFi, you
can do that extremely easily

135
00:08:59,730 --> 00:09:01,900
by just, running it in Docker.

136
00:09:02,180 --> 00:09:04,194
And you can use the 128 or 2.

137
00:09:04,194 --> 00:09:04,572
0.

138
00:09:04,572 --> 00:09:04,949
2.

139
00:09:04,950 --> 00:09:06,260
0 is the one to go with.

140
00:09:06,790 --> 00:09:10,100
That gives you the Python, lets
you do all this automation.

141
00:09:11,020 --> 00:09:12,840
And I have an example here.

142
00:09:13,180 --> 00:09:19,590
where we are streaming street cameras
and we use this so we can chat with

143
00:09:19,680 --> 00:09:26,290
slack makes it very easy to do if you
want more information check out our

144
00:09:26,290 --> 00:09:34,130
discord give us a star in github i
have a couple of interesting use cases

145
00:09:34,130 --> 00:09:40,210
there you could try out one of them
using text one of them on a raspberry

146
00:09:40,220 --> 00:09:43,475
pi So that one's a cool edge use case.

147
00:09:44,235 --> 00:09:48,115
And every week I have a newsletter
out, please check it out.

148
00:09:48,965 --> 00:09:52,795
let's take a look at
some of the systems here.

149
00:09:53,615 --> 00:09:58,445
Now I have a number of
different collections of data.

150
00:09:59,125 --> 00:10:04,215
This one is specifically for I'm
doing a quick search here for chatting

151
00:10:04,215 --> 00:10:11,315
with airplanes because I capture live
airplane data as it's in flight and we

152
00:10:11,315 --> 00:10:13,435
could take a look at what that data is.

153
00:10:13,905 --> 00:10:18,945
It's things like, images, latitude,
where things are, and when you have

154
00:10:18,945 --> 00:10:24,755
this sort of data here in, there's the
metadata, there's the vector, it makes

155
00:10:24,755 --> 00:10:30,755
it very easy to do a conversational,
things with your We see here we

156
00:10:30,755 --> 00:10:33,725
have to rerun this query, timed out.

157
00:10:34,675 --> 00:10:37,435
I had this running since last
night, probably shouldn't do that.

158
00:10:38,425 --> 00:10:42,285
Okay, so we could look,
there's a lot of them here.

159
00:10:43,135 --> 00:10:44,635
Too much data to show.

160
00:10:45,025 --> 00:10:47,675
and you can see we're getting
back all the data we need.

161
00:10:48,605 --> 00:10:50,935
And then we could do
that with whatever data.

162
00:10:51,385 --> 00:10:55,175
Now if you're doing a standard
RAG, it's a little more simple.

163
00:10:55,675 --> 00:10:59,415
But this data is useful
when you're building up your

164
00:10:59,415 --> 00:11:01,995
prompts and automating it.

165
00:11:02,555 --> 00:11:06,025
But just to show you the power of
what we can do with the visualization.

166
00:11:06,575 --> 00:11:08,545
Now I have an example rag here.

167
00:11:09,355 --> 00:11:15,285
We will load it, have the embeddings
come through and then with the power

168
00:11:15,325 --> 00:11:21,195
of a Lang chain, this'll build up
the proper prompt from my query.

169
00:11:21,505 --> 00:11:26,185
My query is like what's in this
image and then it just passes back

170
00:11:26,185 --> 00:11:27,745
the results to what I need here.

171
00:11:28,235 --> 00:11:30,805
It is pretty straightforward on your part.

172
00:11:31,225 --> 00:11:33,055
You don't have to do too much hard work.

173
00:11:33,555 --> 00:11:37,105
thanks for attending my
session and I'll see you again.

