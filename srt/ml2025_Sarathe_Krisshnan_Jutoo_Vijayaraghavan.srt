1
00:00:00,900 --> 00:00:01,590
Hello everyone.

2
00:00:02,070 --> 00:00:03,060
Welcome to Con 42.

3
00:00:03,570 --> 00:00:06,750
My name is, I'm a senior DevOps
consultant with over 15 years

4
00:00:06,750 --> 00:00:08,220
of experience in IT industry.

5
00:00:08,910 --> 00:00:12,510
My areas of expertise include
CICD automation, infrastructure

6
00:00:12,510 --> 00:00:16,860
as code cloud native solutions,
and more recently governance and

7
00:00:16,860 --> 00:00:18,870
security within DevOps workflows.

8
00:00:19,500 --> 00:00:23,550
What I'm especially passionate about is
helping teams build pipelines that are

9
00:00:23,550 --> 00:00:27,030
not just fast and automated, but also
secure and compliant from the start.

10
00:00:28,005 --> 00:00:32,655
Today security can no longer be something
we bolt on at the end of development.

11
00:00:33,135 --> 00:00:36,525
It's no longer enough to have a
manual reviews, static checklist,

12
00:00:36,525 --> 00:00:38,625
or gates that delay delivery.

13
00:00:39,195 --> 00:00:42,285
As of infrastructure, applications
and operations move faster,

14
00:00:42,945 --> 00:00:45,975
powered by automation and cloud
native technologies and DevOps.

15
00:00:46,215 --> 00:00:48,465
Security must move just as fast.

16
00:00:48,885 --> 00:00:51,015
This is where security as code comes in.

17
00:00:51,495 --> 00:00:53,115
Security as code means.

18
00:00:53,115 --> 00:00:56,865
We input security principle and
control directly into the code

19
00:00:57,195 --> 00:00:59,055
pipelines and infrastructure we deploy.

20
00:00:59,400 --> 00:01:01,019
It's about automating trust.

21
00:01:01,200 --> 00:01:05,670
It's about trading security, not as
an obstacle, but as an integrated,

22
00:01:05,700 --> 00:01:09,660
continuous, and a measurable part of
the way we build and run technology.

23
00:01:10,170 --> 00:01:14,220
Trey, I'm going to walk you through
why security of code is essential,

24
00:01:14,610 --> 00:01:19,020
how we transform risk management
into proactive discipline, and how

25
00:01:19,020 --> 00:01:25,020
organization that embrace it, not only
safer, they are faster, more resilient,

26
00:01:25,259 --> 00:01:26,880
and better prepared for the future.

27
00:01:28,304 --> 00:01:31,935
Today's rapidly evolving software
landscapes, security can no

28
00:01:31,935 --> 00:01:33,164
longer be an afterthought.

29
00:01:33,555 --> 00:01:38,445
Security as a code is revolutionizing
how we approach software security

30
00:01:38,655 --> 00:01:41,745
by embedding it directly into
the continuous integration and

31
00:01:41,745 --> 00:01:43,275
continuous deployment pipelines.

32
00:01:43,634 --> 00:01:47,475
Instead of treating security as
a post development task, security

33
00:01:47,475 --> 00:01:49,185
as a code automates checks.

34
00:01:49,950 --> 00:01:53,340
For the security within every
phase of the development lifecycle,

35
00:01:53,670 --> 00:01:57,360
ensuring vulnerabilities are
detected and addressed in real time.

36
00:01:57,870 --> 00:02:02,220
This integration not only ensures
consistence, scalable security

37
00:02:02,220 --> 00:02:06,330
practices across all stages of our
development, but only accelerate.

38
00:02:06,809 --> 00:02:11,840
Involve innovation by eliminating
traditional security bottlenecks with

39
00:02:11,840 --> 00:02:16,459
security as a code, teams can focus on
building features while maintaining a

40
00:02:16,459 --> 00:02:20,959
robust security posture, all without
slowing down the deployment process.

41
00:02:21,320 --> 00:02:26,030
The true power of security as a code
lies in its ability to offer a real time

42
00:02:26,030 --> 00:02:28,795
visibility into a system security posture.

43
00:02:29,315 --> 00:02:34,475
Enabling teams to proactively address
risk before they escalate by scaling

44
00:02:34,475 --> 00:02:36,304
security alongside applications.

45
00:02:36,635 --> 00:02:41,315
Security as a code ensures that
growing system can remain secure and

46
00:02:41,315 --> 00:02:45,755
resilient In the world where speed
and agility are paramount, secure as

47
00:02:45,755 --> 00:02:47,614
a code is in just a best practice.

48
00:02:47,855 --> 00:02:51,829
It's essential enabler of fast,
secure, and efficient after delivery.

49
00:02:52,345 --> 00:02:56,695
As we move forward, integrating
security into our deployment pipelines

50
00:02:56,935 --> 00:03:00,895
is in just a choice, is the future
of a secure software delivery.

51
00:03:01,345 --> 00:03:03,685
So what is the challenges that we have?

52
00:03:04,285 --> 00:03:06,535
The challenges is the
speed versus security.

53
00:03:07,195 --> 00:03:11,665
In today's fast-paced software
development, world speed is crucial.

54
00:03:12,055 --> 00:03:16,225
Businesses demand quicker delivery
cycles to stay competitive, and teams

55
00:03:16,225 --> 00:03:20,935
are under constant pressure to release
software faster than ever before.

56
00:03:21,265 --> 00:03:21,865
However.

57
00:03:22,200 --> 00:03:25,470
This agency often comes
at a cost security.

58
00:03:26,390 --> 00:03:31,250
Traditional security approaches typically
implemented as an afterthought, and

59
00:03:31,250 --> 00:03:35,570
at the end of development process
create significant bottleneck that

60
00:03:35,630 --> 00:03:40,730
disrupts the flow of development and
slow down the release cycles was still.

61
00:03:40,885 --> 00:03:45,084
Relying on manual and inconsistent
security practices can lead

62
00:03:45,084 --> 00:03:48,804
to serious vulnerabilities
slipping through the cracks and

63
00:03:48,804 --> 00:03:50,304
reaching production environments.

64
00:03:50,635 --> 00:03:55,135
This compromises both the speed of
development and the safety of the product.

65
00:03:55,524 --> 00:03:59,695
The challenge then is finding a
balance between the rapid delivery

66
00:03:59,785 --> 00:04:04,345
and a robust security, ensuring that
innovation does not come at an expense

67
00:04:04,405 --> 00:04:07,075
of safeguarding against the risk.

68
00:04:07,150 --> 00:04:11,260
What is the impact of the security
of the code Organization that

69
00:04:11,260 --> 00:04:15,670
successfully integrates security of a
code into their development Practices

70
00:04:15,670 --> 00:04:17,410
are seeing remarkable results.

71
00:04:17,530 --> 00:04:22,150
In fact, studies show that significant
percentage of organization that

72
00:04:22,150 --> 00:04:27,610
mature dev six ops programs have
automated security frameworks directly

73
00:04:27,670 --> 00:04:29,770
embedded into their CI ICD pipelines.

74
00:04:30,045 --> 00:04:35,205
This not only enhances the security,
but also leads to a faster remediation

75
00:04:35,205 --> 00:04:39,435
of critical vulnerabilities compared
to the traditional security approaches.

76
00:04:39,735 --> 00:04:44,475
Security as a code drastically reduces
the time it takes to address an issue.

77
00:04:44,715 --> 00:04:48,285
Enabling teams to fix vulnerabilities
before they escalate into the

78
00:04:48,645 --> 00:04:52,515
bigger problems beyond quicker
remediation, security as a code

79
00:04:52,725 --> 00:04:56,775
significantly improves the overall
security posture of an enterprise.

80
00:04:57,005 --> 00:05:01,505
Those with a mature security support
practices report far fewer security

81
00:05:01,505 --> 00:05:06,455
incidents and enhance compliances
outcomes, reducing risk across the board.

82
00:05:06,965 --> 00:05:11,825
Additionally, by integrating the security
seamlessly into the development process,

83
00:05:11,825 --> 00:05:16,415
organizations can accelerate delivery with
their compromising the security standards.

84
00:05:17,175 --> 00:05:22,215
Team are able to deploy more frequently,
keeping up the demand for a rapid release

85
00:05:22,215 --> 00:05:24,855
while maintaining a high level of safety.

86
00:05:25,515 --> 00:05:30,015
So what's the theoretical foundation
of security of code as the heart

87
00:05:30,015 --> 00:05:33,670
of security as a code lies a
foundation built on automation.

88
00:05:34,230 --> 00:05:36,755
I. Consistency and an early integration.

89
00:05:37,325 --> 00:05:42,335
One of the core principle of security
as a code is ous feedback, automated

90
00:05:42,335 --> 00:05:47,165
security scans that provide developers
with the immediate actionable insights.

91
00:05:47,705 --> 00:05:51,995
This approach ensures that security
is continuously monitored and

92
00:05:51,995 --> 00:05:55,985
vulnerabilities are caught before
they can even become issues.

93
00:05:56,105 --> 00:05:59,885
Additionally, security controls
are treated as a first class

94
00:05:59,915 --> 00:06:02,315
artifacts, meaning they are codified.

95
00:06:02,570 --> 00:06:06,500
Version control and subject to
peer review and rigorous testing.

96
00:06:06,590 --> 00:06:10,730
Just like any other piece of code,
a key tenant of security as a code

97
00:06:10,790 --> 00:06:14,960
is a shift left principle, which
most security integration earlier

98
00:06:14,960 --> 00:06:16,280
in the development life cycle.

99
00:06:16,670 --> 00:06:20,000
By addressing security from the
beginning, organizations can

100
00:06:20,060 --> 00:06:24,260
avoid costly and time consuming
remediation later in the process.

101
00:06:24,830 --> 00:06:27,710
Another foundational
element is immutability.

102
00:06:27,915 --> 00:06:31,845
Security controls are defined
once and deployed consistency

103
00:06:31,845 --> 00:06:35,775
across all environments, ensuring
a uniform security posture.

104
00:06:36,105 --> 00:06:40,305
This is similar to the principle of
infrastructure code where automated

105
00:06:40,365 --> 00:06:44,835
version control methodologies are
applied to a security allowing for a

106
00:06:44,835 --> 00:06:47,085
greater consistency and reliability.

107
00:06:47,685 --> 00:06:50,840
Researchers show that organization
embracing the immutable

108
00:06:50,895 --> 00:06:53,325
security controls experience 94.

109
00:06:53,350 --> 00:06:58,510
Percentage fewer security misconfiguration
across environments and reduce

110
00:06:58,540 --> 00:07:02,860
compliances verification efforts
by as much just 78 percentage.

111
00:07:03,430 --> 00:07:07,510
This data underscores how security
as a code can significantly

112
00:07:07,510 --> 00:07:11,435
improve security posture while
reducing optional complexity.

113
00:07:12,345 --> 00:07:14,860
What is the economics
of a shiftless security?

114
00:07:15,190 --> 00:07:15,970
Let's talk about that.

115
00:07:16,355 --> 00:07:19,625
The financial impact of
integrating security early in the

116
00:07:19,625 --> 00:07:22,115
development process is undeniable.

117
00:07:22,565 --> 00:07:26,075
Research reveals that vulnerabilities
directed during the design

118
00:07:26,075 --> 00:07:31,535
phase cost an average of just
approximately $25 to remediate.

119
00:07:32,015 --> 00:07:33,215
In contrast, this.

120
00:07:33,235 --> 00:07:39,385
Costs skyrockets is over $5,000 during
the testing, and over approximately

121
00:07:39,385 --> 00:07:45,205
$15,000 during the implementation and
a staggering cost of dollars 75,000

122
00:07:45,205 --> 00:07:47,065
approximately during the production.

123
00:07:47,665 --> 00:07:50,335
This creates a dramatic 3000.

124
00:07:50,595 --> 00:07:54,375
Dollars fold 3000 times fold
differences in the remediation

125
00:07:54,375 --> 00:07:58,635
costs between the earliest and
the latest stages of detection.

126
00:07:59,265 --> 00:08:04,215
This tax contrast illustrates why
adopting shift left security and

127
00:08:04,215 --> 00:08:05,715
burdening the security controls early.

128
00:08:06,594 --> 00:08:10,135
The development lifecycle
makes not only technical sense,

129
00:08:10,135 --> 00:08:11,815
but also a financial sense.

130
00:08:12,235 --> 00:08:16,615
By identifying and addressing the
security issues during the design phase,

131
00:08:16,825 --> 00:08:21,445
organizations can avoid escalating
costs, reduce the risk of breaches, and

132
00:08:21,534 --> 00:08:23,784
ultimately save significant resources.

133
00:08:24,205 --> 00:08:28,405
This financial case reinforce the
importance of prioritizing security

134
00:08:28,765 --> 00:08:33,235
for our outset, making it a critical
component of a cost effective.

135
00:08:33,595 --> 00:08:35,875
Efficient development strategy.

136
00:08:36,810 --> 00:08:39,790
So let's talk about the implementation
in the Jenkins pipeline.

137
00:08:40,610 --> 00:08:44,270
Implementing a security as a code
in the Jenkin pipelines involves

138
00:08:44,270 --> 00:08:48,740
several key integrations that
helps automate and enforce security

139
00:08:48,740 --> 00:08:50,210
throughout the development lifecycle.

140
00:08:50,780 --> 00:08:55,610
First, security scanning integration
plays a crucial role by integrating

141
00:08:55,610 --> 00:08:56,990
static application security.

142
00:08:57,295 --> 00:09:01,225
Software COMPOSTION analysis,
dynamic application security

143
00:09:01,225 --> 00:09:05,305
testing, and container scanning
stages into your Jenkins pipeline.

144
00:09:05,574 --> 00:09:09,235
Using a declarative syntax,
security scans are automatically

145
00:09:09,235 --> 00:09:10,555
triggered with every build.

146
00:09:10,944 --> 00:09:14,485
Ensuring vulnerabilities
are identify early and next.

147
00:09:14,485 --> 00:09:17,530
The policy as a code implementation
allows the teams to define

148
00:09:17,574 --> 00:09:20,545
security vulnerabilities in
the declarative languages.

149
00:09:20,845 --> 00:09:24,715
These policies verify configuration
and enforce compliances

150
00:09:24,805 --> 00:09:26,515
automatically ensuring.

151
00:09:26,980 --> 00:09:31,360
Security standards are consistently
applied across all the environments.

152
00:09:31,780 --> 00:09:36,250
The secret management is also critical
By implementing a secure credential

153
00:09:36,250 --> 00:09:41,920
storage and a retrieval mechanism, teams
can prevent exposure of a sensitive

154
00:09:41,920 --> 00:09:47,320
information, ensuring that credentials are
security handled throughout the pipeline.

155
00:09:47,710 --> 00:09:52,180
Finally, compliance verification is
integrated by defining compliance's

156
00:09:52,180 --> 00:09:56,470
rules as a code, which are then
validated during the pipeline execution.

157
00:09:56,685 --> 00:10:01,785
This ensures that every artifact passing
through the pipeline is compliant

158
00:10:01,995 --> 00:10:05,564
with the necessary regulatory and
the security standards, offering a

159
00:10:05,564 --> 00:10:10,425
realtime feedback to the developers
and mitigating the compliances risk.

160
00:10:11,025 --> 00:10:13,275
So what's the security scanning benefits?

161
00:10:13,875 --> 00:10:15,230
The security scanning benefits.

162
00:10:15,300 --> 00:10:18,735
Integrating security scanning
tools into the Jenkins pipeline

163
00:10:18,855 --> 00:10:22,814
can dramatically enhance an
organization's security posture.

164
00:10:23,820 --> 00:10:28,800
Research shows that organizations
leveraging these tools identify

165
00:10:28,860 --> 00:10:34,350
vulnerabilities 17 times faster than
those relying on a periodic manual.

166
00:10:34,350 --> 00:10:35,250
Security reviews.

167
00:10:35,640 --> 00:10:39,750
This period is crucial, especially
as a gap between the vulnerability,

168
00:10:39,750 --> 00:10:44,400
discovery, and the active exploitation
continues to shrink in today's

169
00:10:44,400 --> 00:10:46,410
rapidly evolving threat landscape.

170
00:10:46,980 --> 00:10:51,210
By incorporating automated scans,
vulnerabilities can be detected

171
00:10:51,300 --> 00:10:53,010
and remediated much easier.

172
00:10:53,505 --> 00:10:57,645
By much earlier, significantly
reducing the risk of breaches.

173
00:10:58,035 --> 00:11:00,915
The comprehensive coverage
is another major benefit.

174
00:11:01,334 --> 00:11:05,685
By utilizing a combination of a
scanning approaches, our organization

175
00:11:05,685 --> 00:11:09,290
gains robust protection against
a wide range of threat vectors.

176
00:11:09,910 --> 00:11:13,329
Static application security
testing to identify.

177
00:11:14,135 --> 00:11:19,595
An average of 26 potential vulnerabilities
per thousand lines of code, offering

178
00:11:19,595 --> 00:11:23,795
a deep insight into the code quality
and the security f flos software.

179
00:11:23,795 --> 00:11:27,814
COMPOSTION analysis scanners
focus at evaluating third party

180
00:11:27,814 --> 00:11:32,074
dependencies, which make up around
80% of modern application code.

181
00:11:32,435 --> 00:11:35,735
Ensuring that known vulnerabilities
in these components are

182
00:11:35,735 --> 00:11:37,235
flagged before they cause harm.

183
00:11:37,750 --> 00:11:41,530
Lastly, the container scanning
has proven to be highly effective

184
00:11:41,530 --> 00:11:46,089
in preventing 60% of the security
incidents that stem from deploying uns

185
00:11:46,089 --> 00:11:48,130
scanned or insecure container images.

186
00:11:48,490 --> 00:11:52,870
This comprehensive approach ensures
that security is embedded throughout

187
00:11:52,900 --> 00:11:57,219
the development pipeline, providing
defense against a wide variety of risk.

188
00:11:57,819 --> 00:12:01,030
So what's the organizational
transformation on this?

189
00:12:01,660 --> 00:12:05,500
The shift of a security as a code
doesn't just impact the technology.

190
00:12:05,824 --> 00:12:08,285
It drives the organizational
transformation as well.

191
00:12:08,765 --> 00:12:12,964
One of the most significant changes
is the breakdown of silos between

192
00:12:12,964 --> 00:12:14,734
security and the development teams.

193
00:12:15,155 --> 00:12:20,765
Study shows that 78 percentage or 79
percentage of organization reports

194
00:12:20,765 --> 00:12:25,895
significantly improved collaborations
between these team resulting in a faster

195
00:12:25,895 --> 00:12:27,724
delivery of a secure applications.

196
00:12:27,950 --> 00:12:32,210
This collaboration is essential for
ensuring that security is integrated

197
00:12:32,210 --> 00:12:37,400
seamlessly into every stage of the
development cycle, reducing the friction

198
00:12:37,430 --> 00:12:39,320
and the accelerating time to the market.

199
00:12:39,950 --> 00:12:43,730
Another critical shift is in
the security role evaluation.

200
00:12:43,829 --> 00:12:44,520
I'm sorry.

201
00:12:44,520 --> 00:12:49,470
So evolution security professionals are
transitioning from being gatekeepers to

202
00:12:49,470 --> 00:12:54,600
enablers as an automation and a security
scanning take over manual reviews.

203
00:12:55,050 --> 00:12:59,370
Security teams spend around 62%
less time on the manual task and

204
00:12:59,370 --> 00:13:03,689
are able to focus 48% of most
strategic architecture planning.

205
00:13:04,199 --> 00:13:08,490
This allows them to focus on a
proactive security measures, aligning

206
00:13:08,490 --> 00:13:10,199
securities with the business goals.

207
00:13:10,495 --> 00:13:14,485
In tandem, developers are gaining
ownership of the security with the

208
00:13:14,485 --> 00:13:19,135
right tooling and training developers
are now solving 77 percentage of

209
00:13:19,135 --> 00:13:23,605
security issues on their own without
needing to involve a security team.

210
00:13:24,175 --> 00:13:29,035
This shift of culture empowers developers
to take responsibility for security

211
00:13:29,065 --> 00:13:30,685
early in the development cycle.

212
00:13:31,015 --> 00:13:36,625
Finally, organizations are seeing improved
metrics with over 75% of reduction.

213
00:13:36,835 --> 00:13:40,315
In the meantime to remediate the
vulnerabilities, significantly

214
00:13:40,315 --> 00:13:43,969
shrinking the windows of exposure
to the potential threats.

215
00:13:44,030 --> 00:13:47,120
So what are the challenges on
the implementation on these?

216
00:13:47,935 --> 00:13:52,255
While security as a code offer
numerous benefit, its implementation

217
00:13:52,255 --> 00:13:53,935
is not without challenges.

218
00:13:54,415 --> 00:13:57,564
Technical complexity is one of
the most significant hurdles.

219
00:13:57,985 --> 00:14:03,115
Research shows that 78% of organization
face substantial technical obstacles.

220
00:14:03,260 --> 00:14:04,850
In their DevSecOps journey.

221
00:14:05,240 --> 00:14:09,890
With the complexity of tool integration
being the primary challenge, a key issue

222
00:14:09,890 --> 00:14:16,370
is that only 36% of security tools offer
robust API capabilities, sustainable or

223
00:14:16,370 --> 00:14:21,230
suitable for the C seamless integration
into the CICD pipelines, making it

224
00:14:21,230 --> 00:14:25,100
a difficult to automate security
checks effectively and consistently.

225
00:14:25,699 --> 00:14:30,740
Another critical challenge in the skill
gap, a striking 82% of organizations site.

226
00:14:31,020 --> 00:14:33,329
Talent shortages as a major obstacle.

227
00:14:33,660 --> 00:14:36,480
Effective security as a code
implementation requires an

228
00:14:36,839 --> 00:14:39,600
expectance in the development,
security, and the automation.

229
00:14:39,630 --> 00:14:44,400
A skillset that is often difficult to
find in the traditional roles without the

230
00:14:44,400 --> 00:14:48,930
right talent organization struggles to
implement and maintain the security as a

231
00:14:48,930 --> 00:14:53,970
code practices effectively for companies
in the highly regulated industries.

232
00:14:54,180 --> 00:14:56,250
Government requirements present.

233
00:14:56,755 --> 00:14:57,985
Another big challenge.

234
00:14:58,314 --> 00:15:02,635
67% of these organizations
reports extend the timelines for

235
00:15:02,635 --> 00:15:04,194
security as a code implementation.

236
00:15:04,495 --> 00:15:09,145
During to compliance concerns, auditors
unfamiliar with the audit date or

237
00:15:09,145 --> 00:15:13,645
automated security controls often
face difficulties in understanding

238
00:15:13,704 --> 00:15:18,145
and validating these controls, which
can slow down the adoption process.

239
00:15:18,535 --> 00:15:21,025
Lastly, cultural resistance is common.

240
00:15:21,280 --> 00:15:24,459
71% of security professionally,
initially worried about that

241
00:15:24,459 --> 00:15:26,170
automation will diminish their role.

242
00:15:26,530 --> 00:15:30,640
While 68% of developer resist
adding extra pipeline steps,

243
00:15:30,699 --> 00:15:34,870
fearing that it may slow down the
delivery, overcoming these cultural

244
00:15:34,870 --> 00:15:40,510
barriers is crucial for a successful
implementation of so security as a code.

245
00:15:41,079 --> 00:15:43,120
So let's talk about the adaption journey.

246
00:15:43,974 --> 00:15:47,994
The journey of a security of a code
unfolds in several distinct phases,

247
00:15:48,385 --> 00:15:52,885
each with its own set of challenges and
opportunities during the resistance phase.

248
00:15:52,974 --> 00:15:58,285
The first 90 days team often questions the
business value of security as a code raise

249
00:15:58,285 --> 00:16:02,334
concern about the technical complexity
and the fear that will be slowing down the

250
00:16:02,334 --> 00:16:04,795
delivery cycles by up to 23 percentage.

251
00:16:04,944 --> 00:16:09,594
In fact, 84% of organization
reports facing initial pushback.

252
00:16:10,169 --> 00:16:14,549
This phase is crucial for addressing
concerns, demonstrating the value of

253
00:16:14,549 --> 00:16:19,199
security as a code, and aligning the
stakeholders in an experimented phase

254
00:16:19,499 --> 00:16:24,779
About 92, 180 days, teams begin to
implement the targeted pilots integrating

255
00:16:24,779 --> 00:16:26,759
two to three baseline security tools.

256
00:16:27,279 --> 00:16:31,329
These early efforts often result
in 41 percentage of detection, rate

257
00:16:31,329 --> 00:16:35,049
of vulnerabilities with minimal
disruption and existing pipeline.

258
00:16:35,529 --> 00:16:39,819
This stage is focused on testing,
learning, and refining the security

259
00:16:39,819 --> 00:16:44,289
process before broader implementation
by the acceleration phase.

260
00:16:44,780 --> 00:16:46,729
180 to 1 365 days.

261
00:16:47,060 --> 00:16:51,740
Security as a core option expands
significantly with 65% of development

262
00:16:51,740 --> 00:16:56,990
teams implementing compressive and
comprehensive security control, including

263
00:16:56,990 --> 00:16:59,714
the S-A-S-D-D-A-S-D, and SCA tools.

264
00:17:00,290 --> 00:17:05,060
This results in a 57% of reduction in
the critical vulnerability, showcasing

265
00:17:05,360 --> 00:17:09,949
the power of security as a code in a
significantly improving security while

266
00:17:09,949 --> 00:17:11,659
maintaining the development velocity.

267
00:17:12,290 --> 00:17:17,360
Finally, in the optimization phase,
that is beyond the 365 days mark team

268
00:17:17,360 --> 00:17:21,259
focus on streamlining the process
and reducing the inefficiency.

269
00:17:21,650 --> 00:17:24,259
False positives drop by 60 percentage.

270
00:17:24,574 --> 00:17:29,675
The organization established a matrix
dive and governance that shows a 79% of

271
00:17:29,675 --> 00:17:31,685
improvement in overall security posture.

272
00:17:32,195 --> 00:17:34,804
High performing organization
accelerate their journey

273
00:17:34,804 --> 00:17:36,514
through three key strategies.

274
00:17:36,545 --> 00:17:40,534
First, by established in the dedicated
center of excellence, which is

275
00:17:40,534 --> 00:17:42,605
71% of successful organization.

276
00:17:42,695 --> 00:17:46,615
Implement the second one by
investing in the robust developer

277
00:17:46,615 --> 00:17:50,905
security training averaging around
32 hours annually per developer.

278
00:17:51,050 --> 00:17:55,820
And the third by creating an incentive
programs that reward secure coding

279
00:17:55,820 --> 00:17:58,610
practices with measurable results.

280
00:17:59,060 --> 00:18:04,220
So what's the future of security as a code
Looking ahead, security as a code is PO

281
00:18:04,460 --> 00:18:06,409
to evolve beyond its current practices.

282
00:18:07,034 --> 00:18:12,044
Driving even greater security
automation under RES today, security

283
00:18:12,044 --> 00:18:16,034
has a code implementation focus
on foundational practices like a

284
00:18:16,034 --> 00:18:19,784
basic scanning integration, policy
enforcement, and the security

285
00:18:19,784 --> 00:18:22,215
management within the CICD pipelines.

286
00:18:23,115 --> 00:18:27,495
These foundational practices ensure
that security is embedded early and

287
00:18:27,495 --> 00:18:31,544
continuously throughout the development
lifecycle, providing essential safeguard

288
00:18:31,544 --> 00:18:34,215
of the applications as we move forward.

289
00:18:34,460 --> 00:18:39,230
The evolution of a security code will
introduce more advanced practices such

290
00:18:39,230 --> 00:18:43,640
as a security Charles engineering,
and a continuous verification in this

291
00:18:43,640 --> 00:18:49,460
generation, security controls will undergo
a regular testing through SI simulated

292
00:18:49,490 --> 00:18:54,080
attack within the pipeline, allowing
teams to assess and effectiveness of

293
00:18:54,080 --> 00:18:55,940
the security measures in the real time.

294
00:18:56,510 --> 00:18:59,240
This dynamic, proactive
approach will ensure.

295
00:18:59,535 --> 00:19:04,275
Security is continuously validated and
reinforced as a part of development

296
00:19:04,275 --> 00:19:06,795
cycle, not just the point of a deployment.

297
00:19:07,365 --> 00:19:11,625
Looking even further into the
future, AI driven security automation

298
00:19:11,625 --> 00:19:13,305
will transform and landscape.

299
00:19:13,665 --> 00:19:17,595
Emerging technologies will enable
predictive vulnerability detection,

300
00:19:17,895 --> 00:19:21,460
offering an early warnings before
the vulnerabilities even emerge

301
00:19:21,680 --> 00:19:25,725
as well, and automated remediation
suggestions that allows the team to

302
00:19:25,725 --> 00:19:28,635
quickly address potential risk content.

303
00:19:28,995 --> 00:19:33,044
Context of our security policies will be
enforced across the entire development

304
00:19:33,044 --> 00:19:38,955
lifecycle, ensuring that security measures
evolve dramatically, drastically, and

305
00:19:39,465 --> 00:19:44,024
dynamically with the changing needs of
a application and the threat landscape.

306
00:19:45,040 --> 00:19:49,750
As deployment environments grow increasing
complex and the threat landscape evolves,

307
00:19:49,870 --> 00:19:53,620
the automation consistency and the
scalability offered by the security

308
00:19:53,620 --> 00:19:56,110
as a code will become indispensable.

309
00:19:56,110 --> 00:20:01,120
For organizations, this capability will
enable teams to maintain both security

310
00:20:01,390 --> 00:20:06,100
and the agility, ensuring that software
delivery remains fast, reliable, and

311
00:20:06,100 --> 00:20:07,990
safe, ever-changing digital world.

312
00:20:08,530 --> 00:20:09,430
That should be all for now.

313
00:20:09,820 --> 00:20:10,240
Thank you.

