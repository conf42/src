1
00:00:00,210 --> 00:00:00,970
Hello everyone.

2
00:00:01,390 --> 00:00:02,160
Happy New Year.

3
00:00:02,470 --> 00:00:03,410
I'm Jaspreet Kumar.

4
00:00:04,330 --> 00:00:08,890
Welcome to the session on data driven
mobile app performance optimization.

5
00:00:09,390 --> 00:00:13,389
Mobile applications play a
pivotal role in our lives today.

6
00:00:13,889 --> 00:00:18,659
No matter how innovative an
app is, its performance can

7
00:00:18,669 --> 00:00:21,349
make or break user experience.

8
00:00:21,849 --> 00:00:27,249
In this session, we'll deep dive
into The strategies and tools that

9
00:00:27,309 --> 00:00:33,349
enable you to deliver high performing
apps, from reducing load times and

10
00:00:33,469 --> 00:00:39,259
optimizing resources to leveraging
AI for proactive issue resolutions,

11
00:00:39,959 --> 00:00:44,599
will cover everything you need to
create a seamless user experience.

12
00:00:45,099 --> 00:00:46,459
The need for speed.

13
00:00:46,959 --> 00:00:49,449
Let's start with a critical insight.

14
00:00:49,949 --> 00:00:52,649
Speed is everything in
the mobile apps today.

15
00:00:53,439 --> 00:00:55,929
Performance is no longer a luxury.

16
00:00:56,429 --> 00:00:57,619
It's a necessity.

17
00:00:58,119 --> 00:01:05,870
Research shows that more than half of the
users are likely to abandon an app if it

18
00:01:05,970 --> 00:01:08,350
takes more than three seconds to load.

19
00:01:08,850 --> 00:01:11,830
That's a huge loss of potential users.

20
00:01:12,750 --> 00:01:16,594
Users expect speed and any delay in speed.

21
00:01:16,845 --> 00:01:23,335
can translate to lost engagement, lower
retention, and missed opportunities.

22
00:01:24,305 --> 00:01:27,555
The solution lies in
focusing on two key goals.

23
00:01:28,435 --> 00:01:31,565
First, 30 percent optimization goal.

24
00:01:32,285 --> 00:01:36,514
It can reduce app size through
resource compression and

25
00:01:36,614 --> 00:01:38,054
efficient asset management.

26
00:01:38,954 --> 00:01:43,894
Second, targeting 50 percent
or more improvement in speed.

27
00:01:44,245 --> 00:01:49,745
By implementing techniques like lazy
loading and progressive rendering,

28
00:01:50,285 --> 00:01:56,655
these strategies not only make
your app faster, but also ensure a

29
00:01:56,655 --> 00:01:59,325
smoother and better user experience.

30
00:01:59,725 --> 00:02:04,805
So the speed is everything that matters
today along with the performance.

31
00:02:05,305 --> 00:02:06,714
Optimizing app size.

32
00:02:07,214 --> 00:02:11,505
Optimizing app size plays a crucial
role in improving in improving

33
00:02:11,505 --> 00:02:14,494
performance and user experience.

34
00:02:14,994 --> 00:02:21,404
One of the easiest wins in performance
optimization is reducing app size.

35
00:02:21,904 --> 00:02:27,604
Large apps not only discourage
downloads but also consume more

36
00:02:27,605 --> 00:02:32,855
device storage and that can lead to
potential uninstalls from the users.

37
00:02:33,355 --> 00:02:39,354
Resource optimizations by applying
Advanced compression algorithms to

38
00:02:39,384 --> 00:02:42,594
images, videos, and other assets.

39
00:02:43,224 --> 00:02:48,644
We can reduce their size by great
extent while maintaining the quality.

40
00:02:49,144 --> 00:02:53,334
Code minification by streamlining
source code through advanced

41
00:02:53,334 --> 00:02:55,114
minification techniques.

42
00:02:56,045 --> 00:03:01,334
Removing unnecessary codes,
comments, extra space, unused

43
00:03:01,334 --> 00:03:07,290
variable, and reducing removing The
files which are not necessary, it

44
00:03:07,359 --> 00:03:09,739
makes the app leaner and faster.

45
00:03:10,239 --> 00:03:11,659
Dependency management.

46
00:03:12,579 --> 00:03:18,849
By auditing and eliminating redundant
libraries and leveraging tree

47
00:03:18,849 --> 00:03:24,339
shaking techniques to remove unused
code, we ensure that only essential

48
00:03:24,399 --> 00:03:26,819
components remain in the app.

49
00:03:27,699 --> 00:03:31,959
These steps collectively
result in smaller, faster,

50
00:03:32,259 --> 00:03:34,169
and more user friendly app.

51
00:03:34,669 --> 00:03:36,099
Lazy loading techniques.

52
00:03:36,599 --> 00:03:41,569
Lazy loading is a key strategy for
improving perceived performance.

53
00:03:42,069 --> 00:03:43,569
The principle is simple.

54
00:03:44,069 --> 00:03:46,669
Prioritize what's most important.

55
00:03:47,359 --> 00:03:52,440
Load what users need
first and defer the rest.

56
00:03:52,940 --> 00:03:59,000
Critical UI components should load
first within the first second, creating

57
00:03:59,050 --> 00:04:01,670
an optimal first contentful paint.

58
00:04:02,170 --> 00:04:08,069
For non critical elements, APIs like
IntersectionObserver can dynamically

59
00:04:08,070 --> 00:04:13,300
load images, scripts, or other
resources as the user scrolls.

60
00:04:13,800 --> 00:04:17,420
We can further enhance the
visual experience by using

61
00:04:17,980 --> 00:04:19,550
progressive loading techniques.

62
00:04:20,340 --> 00:04:26,770
For instance, SkeletonScreen gives user
A preview of the layout while content

63
00:04:26,780 --> 00:04:33,740
loads and blur up effects make image
loading transitions seamless together.

64
00:04:34,160 --> 00:04:39,870
These techniques ensure users
remain engaged even during

65
00:04:40,060 --> 00:04:42,100
resource intensive operations.

66
00:04:42,600 --> 00:04:47,470
Efficient data management is fundamental
for maintaining a responsive app.

67
00:04:47,970 --> 00:04:50,260
It ensures your app runs smoothly.

68
00:04:50,745 --> 00:04:53,715
And responsively, caching
is the first step.

69
00:04:54,575 --> 00:05:00,145
Implement start caching strategies to
store excess data locally, reducing

70
00:05:00,245 --> 00:05:07,764
server requests by up to 40%, and
cutting average load times from 2.

71
00:05:07,764 --> 00:05:08,584
5 seconds to 1.

72
00:05:08,585 --> 00:05:10,785
5 seconds or more.

73
00:05:11,635 --> 00:05:17,165
Utilize both memory and disk
caching for optimal performance.

74
00:05:17,665 --> 00:05:22,575
E Synchronous CPU Processing
Leverage background threads and

75
00:05:22,705 --> 00:05:27,125
event driven architecture to
process UI updates independently,

76
00:05:27,675 --> 00:05:34,045
maintaining 60 FPS responsiveness
even during intensive data operations.

77
00:05:34,545 --> 00:05:41,255
Implement debouncing and throttling
for smooth scrolling and animations.

78
00:05:41,755 --> 00:05:43,795
Monitoring and analytic tools.

79
00:05:44,295 --> 00:05:51,035
Effective monitoring and analytics are
the backbone of data driven optimization.

80
00:05:51,535 --> 00:05:57,565
Optimization is impossible
without insights and this is where

81
00:05:58,165 --> 00:06:00,455
monitoring tools come into play.

82
00:06:00,955 --> 00:06:07,185
Tools like firebase performance monitoring
tools track metrics like startup

83
00:06:07,185 --> 00:06:14,460
times, HTTP requests, frame rates,
network slowness and other metrics.

84
00:06:15,210 --> 00:06:19,900
These insights pinpoint bottlenecks
down to the milliseconds

85
00:06:20,540 --> 00:06:21,950
and performance of the app.

86
00:06:22,450 --> 00:06:27,820
New Relic adds deeper visibility
by providing distributed tracing

87
00:06:28,230 --> 00:06:33,790
and code level diagnostics,
custom dashboards, further enhance

88
00:06:33,840 --> 00:06:37,900
our monitoring capabilities,
allowing us to set thresholds.

89
00:06:38,515 --> 00:06:40,655
and receive real time alerts.

90
00:06:41,155 --> 00:06:46,415
These tools ensure that we are
always aware of app health and

91
00:06:46,565 --> 00:06:48,985
can proactively address issues.

92
00:06:49,485 --> 00:06:53,055
Predictive AI and Anomaly Detection.

93
00:06:53,795 --> 00:06:56,755
AI is redefining performance optimization.

94
00:06:57,255 --> 00:07:03,825
Predictive AI systems analyze real time
data to detect anomalies and patterns.

95
00:07:04,645 --> 00:07:09,705
enabling us to resolve issues
before user experiences them.

96
00:07:10,205 --> 00:07:15,785
This proactive approach reduces
crash rates extensively and

97
00:07:15,895 --> 00:07:18,015
improves user satisfaction.

98
00:07:18,515 --> 00:07:25,965
Moreover, real time data collection and
advanced algorithms continuously learn

99
00:07:26,165 --> 00:07:29,525
and adapt to evolving usage trends.

100
00:07:30,025 --> 00:07:36,630
These systems are not just reactive,
they are predictive, empowering us to

101
00:07:36,670 --> 00:07:44,350
stay ahead of potential problems and
deliver a seamless user experience.

102
00:07:44,850 --> 00:07:47,020
Harnessing telemetry insights.

103
00:07:47,520 --> 00:07:54,770
Telemetry insights offer a window into
your app's performance in the real world.

104
00:07:55,270 --> 00:08:02,020
By tracking technical metrics like API
response times, memory utilizations,

105
00:08:02,970 --> 00:08:10,300
battery consumptions, and other metrics,
we identify areas for optimization.

106
00:08:10,800 --> 00:08:16,110
Behavioral insights reveal how
users interact within the app,

107
00:08:16,860 --> 00:08:21,600
highlighting popular features
and pinpointing pinpoints.

108
00:08:22,100 --> 00:08:30,060
Finally, operational altimetry ensures app
stability by monitoring crashes, errors,

109
00:08:30,570 --> 00:08:33,390
and other anomalies in the real time.

110
00:08:34,270 --> 00:08:39,630
Combining these three dimensions
of insights gives us a holistic

111
00:08:39,630 --> 00:08:44,790
view, enabling us to make
informed data driven decisions.

112
00:08:45,290 --> 00:08:51,710
AP Testing for Continuous Improvement A
B testing allows us to validate changes

113
00:08:52,520 --> 00:08:56,200
and ensure they have a positive impact.

114
00:08:56,700 --> 00:09:01,110
We start by forming hypotheses
based on data insights.

115
00:09:01,610 --> 00:09:07,980
Control tests are then deployed to
user segments to compare variations

116
00:09:08,480 --> 00:09:14,360
and metrics like load times,
interaction rates, and feedback.

117
00:09:14,795 --> 00:09:20,285
are monitored over a defined period
of time based on the results.

118
00:09:20,715 --> 00:09:28,365
And once we identify the better performing
variant, it's implemented across the app.

119
00:09:28,885 --> 00:09:34,445
It can result in improvements of
up to 40 percent in key metrics

120
00:09:34,975 --> 00:09:42,275
like retention, engagement, user
satisfaction, and that can drive in more.

121
00:09:42,775 --> 00:09:49,845
users into the application, improving
the users into the application and, app

122
00:09:49,845 --> 00:09:51,985
improvements like user satisfaction.

123
00:09:52,485 --> 00:09:55,235
AI driven monitoring systems.

124
00:09:55,735 --> 00:10:02,720
AI driven monitoring systems are the
future of app performance optimization.

125
00:10:03,530 --> 00:10:08,030
They bring unparalleled efficiency
to performance optimizations.

126
00:10:08,530 --> 00:10:14,350
These systems analyze millions
of data points, improving anomaly

127
00:10:14,350 --> 00:10:16,960
detection accuracy to 95%.

128
00:10:17,460 --> 00:10:24,189
Machine learning models predict issues
well in advance, enabling proactive fixes.

129
00:10:24,689 --> 00:10:29,800
Automated diagnostics trace
performance bottlenecks to their

130
00:10:29,800 --> 00:10:32,834
source, reducing debugging time.

131
00:10:33,455 --> 00:10:39,805
by up to 60 percent with real time
monitoring of over 100 metrics.

132
00:10:40,575 --> 00:10:46,815
The systems ensure that your app
remains fast, stable, and reliable.

133
00:10:47,315 --> 00:10:50,984
Impact on user retention and revenue.

134
00:10:50,985 --> 00:10:57,915
Optimized performance has a
measurable impact on business metrics.

135
00:10:58,415 --> 00:11:04,330
Faster load times can lead up
to a 7 percent increase in user

136
00:11:04,470 --> 00:11:07,830
retention within the first 30 days.

137
00:11:08,330 --> 00:11:15,230
Revenues can grow up to by 10 percent
or even more driven by smoother

138
00:11:15,230 --> 00:11:21,679
user experiences that encourage in
app purchases and subscriptions.

139
00:11:22,569 --> 00:11:29,070
Perhaps most importantly, user
satisfaction jumps by 30%.

140
00:11:29,955 --> 00:11:35,965
As reflected in surveys and app
reviews, these outcomes highlight

141
00:11:36,345 --> 00:11:41,764
the value of a data driven approach
to performance optimization.

142
00:11:42,264 --> 00:11:43,464
Key takeaways.

143
00:11:44,374 --> 00:11:48,634
To conclude, let's focus on key takeaways.

144
00:11:49,134 --> 00:11:53,384
First, prioritize
performance from day one.

145
00:11:53,884 --> 00:11:56,469
Make speed and efficiency a priority.

146
00:11:57,319 --> 00:12:06,499
The co development principles, even a 15
percent improvement in load times can lead

147
00:12:06,509 --> 00:12:10,869
to a 35 percent increase in retention.

148
00:12:11,369 --> 00:12:17,110
Leverage data and AI insights
to guide every decision.

149
00:12:17,610 --> 00:12:25,609
Harnessing real time analytics and AI
insights Make data driven decisions that

150
00:12:25,929 --> 00:12:32,699
consistently improve app performance
and user satisfaction metrics.

151
00:12:33,199 --> 00:12:40,469
Adopt continuous improvement and
optimization practices like implementing

152
00:12:40,879 --> 00:12:49,294
A B testing using concrete metrics and
user feedback to guide decision making.

153
00:12:49,574 --> 00:12:58,924
Each optimization decision last stay
ahead of any issues in the app deploy

154
00:12:59,334 --> 00:13:06,015
AI powered monitoring systems to detect
and resolve potential performance

155
00:13:06,064 --> 00:13:12,854
issues before they affect your users
maintaining optimal app health.

156
00:13:13,354 --> 00:13:17,574
By implementing these
strategies, you can create apps.

157
00:13:18,329 --> 00:13:24,759
that are not only high performing
but also delightful for the users.

158
00:13:25,259 --> 00:13:31,189
Thank you for being part of the
session on data driven mobile

159
00:13:31,369 --> 00:13:33,669
apps performance optimization.

160
00:13:34,459 --> 00:13:39,259
I hope you have gained valuable
insights and actionable strategies

161
00:13:39,349 --> 00:13:41,899
to enhance your apps performance.

162
00:13:42,319 --> 00:13:42,909
Thank you.

