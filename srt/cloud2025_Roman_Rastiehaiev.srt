1
00:00:00,110 --> 00:00:02,440
Hello, thanks for joining.

2
00:00:02,550 --> 00:00:07,520
today we will be navigating
the world of API gateways.

3
00:00:07,619 --> 00:00:10,730
So I hope you enjoy, let's get started.

4
00:00:11,439 --> 00:00:14,250
over the years, applications
have transitioned from

5
00:00:14,250 --> 00:00:16,299
monolithic architecture to.

6
00:00:16,390 --> 00:00:20,070
microservices and cloud
native environments as the

7
00:00:20,070 --> 00:00:21,600
number of services grows.

8
00:00:21,680 --> 00:00:27,379
So that's the complexity of managing
API traffic, security and performance.

9
00:00:28,109 --> 00:00:33,620
So, in the scope of, these, presentation,
we will answer the question.

10
00:00:33,670 --> 00:00:35,420
What is API gateway?

11
00:00:35,490 --> 00:00:36,570
Why do we need them?

12
00:00:37,010 --> 00:00:41,720
Then we will, compare, five,
open source API gateways.

13
00:00:42,480 --> 00:00:47,010
And, in the end of presentation,
we will look at, future trends

14
00:00:47,040 --> 00:00:51,009
of, developing the, API gateways.

15
00:00:51,999 --> 00:00:52,209
Yeah.

16
00:00:52,209 --> 00:00:53,359
let's get started.

17
00:00:53,799 --> 00:00:57,239
why do we actually need, API gateways?

18
00:00:57,469 --> 00:01:02,789
There are, a lot of challenges
that, modern systems face every day.

19
00:01:02,829 --> 00:01:08,409
the first is, uncontrolled API traffic,
then, security risks, performance

20
00:01:08,409 --> 00:01:12,029
bottlenecks, and, lack of observability.

21
00:01:12,729 --> 00:01:15,949
So API gateway tries to solve.

22
00:01:16,159 --> 00:01:17,189
those problems.

23
00:01:17,369 --> 00:01:23,519
So API gateway, is a reverse proxy
that sits between clients, which

24
00:01:23,569 --> 00:01:30,499
are users, applications, or external
services and, backend, services acting

25
00:01:30,499 --> 00:01:33,189
as a centralized traffic manager.

26
00:01:33,689 --> 00:01:38,169
it controls how API requests
are routed and authenticated,

27
00:01:38,169 --> 00:01:40,309
transformed and monitored.

28
00:01:41,194 --> 00:01:46,134
API gateways are essential in
microservices architecture, cloud native

29
00:01:46,134 --> 00:01:49,574
applications, and distributed systems.

30
00:01:50,074 --> 00:01:57,194
as I mentioned before, it solves those
problems, the problems like traffic

31
00:01:57,194 --> 00:02:01,194
management and request routing.

32
00:02:01,534 --> 00:02:05,474
API gateways route incoming API requests.

33
00:02:05,679 --> 00:02:13,079
to the correct backend services based on
URL paths, headers, query parameters, user

34
00:02:13,119 --> 00:02:16,609
identity, and other, requests, properties.

35
00:02:17,229 --> 00:02:22,529
they also support L7, AKA application
layer, routing for REST, gRPC,

36
00:02:22,529 --> 00:02:25,774
GraphQL, WebSockets, and even.

37
00:02:25,840 --> 00:02:29,879
TCP, UDP traffic, and they
also provide traffic splitting,

38
00:02:29,909 --> 00:02:36,079
enabling, AB testing, blue green
deployments and canary releases.

39
00:02:36,579 --> 00:02:44,039
API gateways also, improve performance,
by load balancing requests across

40
00:02:44,719 --> 00:02:50,489
multiple backend instances, by
caching frequently used responses.

41
00:02:50,804 --> 00:02:56,064
By compression, to reduce response
payload size and also request response,

42
00:02:56,084 --> 00:03:01,574
transformation like, changing headers,
payloads, or protocol versions,

43
00:03:02,074 --> 00:03:07,684
and, also, they act as a central
security layer for all API calls

44
00:03:08,024 --> 00:03:15,564
implementing, authentication mechanisms
like OAuth2, JWT, OpenID Connect.

45
00:03:15,774 --> 00:03:18,024
MTLS and, many others.

46
00:03:18,944 --> 00:03:24,374
and they also, provide detailed,
analytics for, on API traffic, like

47
00:03:24,374 --> 00:03:29,534
metrics collection, logging, tracing,
and they usually provide real time,

48
00:03:29,584 --> 00:03:32,614
dashboards for, API traffic insights.

49
00:03:33,114 --> 00:03:36,274
and they're usually,
extensible and customized.

50
00:03:36,794 --> 00:03:40,014
they provide built in
plugins for rate limiting,

51
00:03:40,024 --> 00:03:42,684
authentication, logging, and so on.

52
00:03:42,964 --> 00:03:47,504
And, they also provide you with
the capability of, writing your,

53
00:03:47,834 --> 00:03:51,154
own custom plugins to extend.

54
00:03:51,649 --> 00:03:53,199
the functionality.

55
00:03:53,619 --> 00:03:58,139
so we will, discussing, in the scope
of this presentation, we will be

56
00:03:58,139 --> 00:04:01,029
discussing five, open source, solutions.

57
00:04:01,519 --> 00:04:04,869
And, but first we would need
to answer, why open source?

58
00:04:04,869 --> 00:04:09,809
Why I chose, open source API gateways
in the scope of, this presentation.

59
00:04:09,809 --> 00:04:16,749
So first of all, it's a cost effective,
large, enterprise, enterprises save

60
00:04:16,789 --> 00:04:21,469
millions annually, by switching from
commercial gateways to self hosted

61
00:04:21,739 --> 00:04:24,449
open source solution solutions.

62
00:04:24,529 --> 00:04:27,039
also, it's, transparent.

63
00:04:27,399 --> 00:04:28,909
So no black box.

64
00:04:28,919 --> 00:04:34,749
So you can, See the code, you can, I don't
know, add, your own feature or bug fixes.

65
00:04:35,159 --> 00:04:37,269
and, and it's community driven.

66
00:04:37,619 --> 00:04:43,229
open source projects usually evolve
faster than commercial products

67
00:04:43,709 --> 00:04:48,909
and, large developer communities
contributes new features regularly.

68
00:04:49,429 --> 00:04:53,749
So we will be discussing five,
open source API gateways.

69
00:04:54,129 --> 00:05:01,133
And, I chose, Apache API 6, Con,
Tick, Kraken D and, Glue Edge.

70
00:05:01,963 --> 00:05:03,633
So let's start with the first.

71
00:05:04,133 --> 00:05:09,623
Apache API 6 is an open source,
high performance API gateway built

72
00:05:09,633 --> 00:05:13,873
for cloud native, multi protocol
and high throughput applications.

73
00:05:14,183 --> 00:05:18,143
It provides dynamic configuration,
rich, plugin support.

74
00:05:18,408 --> 00:05:21,948
While maintaining, ultralow latency.

75
00:05:22,798 --> 00:05:26,668
so key, technical details
you can see on the screen.

76
00:05:26,718 --> 00:05:31,318
it's written in, open rest
team in Jinx plus, logic.

77
00:05:31,928 --> 00:05:37,628
it's, licenses, Apache 2.0, which
means that it's, fully open source.

78
00:05:38,283 --> 00:05:47,542
storage options is, etcd and, files
configuration options, admin API, YAML

79
00:05:47,542 --> 00:05:53,852
files or declarative configuration
like, Kubernetes, CRDs if deployed

80
00:05:53,872 --> 00:05:56,622
to Kubernetes, plugin system.

81
00:05:57,122 --> 00:06:02,132
contains built in plugins for security,
traffic control, observability, and

82
00:06:02,132 --> 00:06:08,562
transformations, and it supports
custom plugins written in Lua,

83
00:06:08,572 --> 00:06:11,992
Go, Python, and WebAssembly.

84
00:06:12,492 --> 00:06:17,852
For security authentication, and
authentication plugins, they have, OAuth2,

85
00:06:18,342 --> 00:06:24,992
OpenID Connect, JWT authentication, API
key based authentication, and many others.

86
00:06:25,582 --> 00:06:32,282
For observability, they have
metrics collection with, Prometheus

87
00:06:32,282 --> 00:06:34,152
plugin, also OpenTelemetry.

88
00:06:34,607 --> 00:06:39,227
data doc and, for distributed
tracing, skywalking.

89
00:06:39,717 --> 00:06:43,687
And, I want to, I want to
pay your attention that this,

90
00:06:43,737 --> 00:06:48,547
presentation, it contains the links
to the official documentation.

91
00:06:48,867 --> 00:06:52,317
Of API, of API six and,
other gateways as well.

92
00:06:52,317 --> 00:06:57,097
So you can, go, to these links
and, see what they actually provide

93
00:06:57,097 --> 00:07:00,452
because, obviously I couldn't,
add, everything to this present.

94
00:07:01,107 --> 00:07:04,417
presentation, it would
be, not readable at all.

95
00:07:04,417 --> 00:07:10,077
So I just, mentioned the main
things and, hot reload is supported.

96
00:07:10,147 --> 00:07:16,087
So you can apply dynamic updates
via admin API without restarting.

97
00:07:16,477 --> 00:07:22,207
You can add, plugins, you can change
your routing configuration and so on,

98
00:07:22,207 --> 00:07:25,357
and it will not require the restart.

99
00:07:25,857 --> 00:07:29,977
So let's move on to the
second API gateway, it's Kong.

100
00:07:30,847 --> 00:07:34,297
It's also a high performance open
source API gateway designed for

101
00:07:34,297 --> 00:07:36,477
scalability, security, and extensibility.

102
00:07:36,977 --> 00:07:40,087
It's built on Jinx and OpenResty.

103
00:07:40,127 --> 00:07:45,112
It offers a powerful Plugin system,
multi cloud compatibility and

104
00:07:45,132 --> 00:07:47,472
enterprise ready security features.

105
00:07:48,182 --> 00:07:50,552
licenses, Apache 2.

106
00:07:50,552 --> 00:07:58,562
0, as previous one, for storage, options,
they support, DBLS, storage, they,

107
00:07:58,912 --> 00:08:04,772
support, their own storage, connect,
also you can use, database like Postgres.

108
00:08:05,032 --> 00:08:11,842
For, persistence, and, yeah, for
configuration options, the files are

109
00:08:11,862 --> 00:08:16,067
available, Kubernetes CRDs and, admin API.

110
00:08:16,687 --> 00:08:22,707
plugin system, has over 50, built in
plugins for rate limiting, caching,

111
00:08:22,717 --> 00:08:28,497
security, traffic, traffic control, and
it also supports, custom plugins written

112
00:08:28,507 --> 00:08:32,157
in Lua, Go, Python, and WebAssembly.

113
00:08:33,047 --> 00:08:38,387
among the authentication plugins
they have OAL two JWT OpenID

114
00:08:38,387 --> 00:08:46,287
Connect, L-D-A-P-A-H-M-A-C, and,
other authentication mechanisms.

115
00:08:46,787 --> 00:08:50,207
For observability, for metrics,
they support Prometheus,

116
00:08:50,257 --> 00:08:55,977
OpenTelemetry, Datadog, and
Zipkin for distributed tracing.

117
00:08:56,477 --> 00:09:02,957
They also support hot reloading via
admin API and you can also apply

118
00:09:02,957 --> 00:09:05,047
dynamic updates without restarting.

119
00:09:05,547 --> 00:09:10,507
So The next, gateway is, TIC, TIC,
is, a high performance open source

120
00:09:10,527 --> 00:09:15,427
gateway designed for scalability,
security, and multi protocol support.

121
00:09:16,317 --> 00:09:21,317
it's built in Go, not, Lua and
Jinx like previous API gateways.

122
00:09:21,327 --> 00:09:27,352
It provides native GraphQL support,
authentication, and rate limiting.

123
00:09:27,582 --> 00:09:33,362
And flexible deployment option for cloud,
hybrid and on premises environments.

124
00:09:33,862 --> 00:09:39,012
as I said, it's written in Go, high
performance and multi threaded.

125
00:09:39,742 --> 00:09:43,022
The license is MPL.

126
00:09:43,202 --> 00:09:46,212
For storage, they use Redis.

127
00:09:46,712 --> 00:09:51,842
It's used for caching, rate
limiting and state management.

128
00:09:52,752 --> 00:09:57,872
And, also optionally for,
dashboard, for analytics, they,

129
00:09:58,112 --> 00:10:01,252
use MongoDB and, SQL, database.

130
00:10:01,872 --> 00:10:05,202
So configuration options are admin API.

131
00:10:05,552 --> 00:10:11,843
and declarative configuration using,
JSON, YAML, or Kubernetes, CRDs, plug

132
00:10:11,843 --> 00:10:18,183
in, system has, built in middleware,
plugins for security transformation

133
00:10:18,213 --> 00:10:23,213
and observability, and, it supports,
supports custom plugins in Go.

134
00:10:23,523 --> 00:10:29,093
Python, and JavaScript,
Lua, and also WebAssembly.

135
00:10:29,863 --> 00:10:36,313
they provide a lot of authentication
plugins like Vauth2, JWT, MTLS,

136
00:10:36,333 --> 00:10:41,603
authentication tokens, and, like
advanced rate limiting plugins, throat

137
00:10:41,603 --> 00:10:43,803
link, quota enforcement, many others.

138
00:10:43,833 --> 00:10:46,523
You can see, by the link provided in the.

139
00:10:46,948 --> 00:10:51,578
presentation, for metrics, they
support Prometheus open telemetry,

140
00:10:51,628 --> 00:10:57,108
data doc, and also just visit, the
links and, you will see the whole list.

141
00:10:57,608 --> 00:10:59,438
I want to also mention.

142
00:10:59,813 --> 00:11:05,603
that, this, gateway supports,
GraphQL, natively, and also, gRPC

143
00:11:05,713 --> 00:11:08,823
proxying and, transformation.

144
00:11:09,313 --> 00:11:13,113
TIC supports hot reloading
via API and dashboard dynamic

145
00:11:13,113 --> 00:11:13,833
updates without restarts.

146
00:11:14,333 --> 00:11:20,798
the next, gateway In the list is
Kraken D. It's a lightweight, high

147
00:11:20,798 --> 00:11:25,958
performance API gateway designed for
API aggregation, request transformation,

148
00:11:25,978 --> 00:11:27,557
and stateless architecture.

149
00:11:27,898 --> 00:11:29,707
It's built in Go as well.

150
00:11:29,798 --> 00:11:35,168
It's optimized for low latency
microservices, offering high scalability

151
00:11:35,208 --> 00:11:36,838
with minimal resource consumption.

152
00:11:37,338 --> 00:11:37,698
yeah.

153
00:11:37,728 --> 00:11:44,218
the licenses, Apache 2.0,
storage option, is, stateless.

154
00:11:44,218 --> 00:11:49,668
So they don't require any, database,
configuration options, are, files.

155
00:11:50,378 --> 00:11:52,928
Jason O or IL files.

156
00:11:53,318 --> 00:11:58,568
and, you can also actually, specify
configuration in environment variables

157
00:11:58,628 --> 00:12:05,298
and, in Kubernetes, CCRD if, deployed
to Kubernetes, they, have the middleware

158
00:12:05,298 --> 00:12:11,688
based architecture for plugins and you
can write your own plugins, using, go.

159
00:12:12,188 --> 00:12:13,118
They also provide.

160
00:12:13,363 --> 00:12:21,543
Provide the, JWT validation, plugins,
API key authentication, MTLS, Auth0,

161
00:12:21,553 --> 00:12:29,312
like a lot of, plugins for authentication
mechanisms, for, monitoring Prometheus,

162
00:12:29,373 --> 00:12:32,573
OpenTelemetry, Datadog, and many others.

163
00:12:33,458 --> 00:12:37,298
interesting that, they do not
support, the hot reloading.

164
00:12:37,678 --> 00:12:41,848
they have this option, but, on
their documentation, they say that,

165
00:12:41,848 --> 00:12:43,528
it's not recommended for prod.

166
00:12:43,528 --> 00:12:47,658
It can be used only for,
development, purposes.

167
00:12:48,158 --> 00:12:53,958
And the last but not least, API gateway
in the list is, Glue, Edge, it's high

168
00:12:53,958 --> 00:13:00,458
performance cloud native API gateway built
on Envoy proxy designed for Kubernetes

169
00:13:00,458 --> 00:13:03,298
multi cloud and hybrid environments.

170
00:13:03,648 --> 00:13:07,468
It offers a deep integration
with Kubernetes, advanced

171
00:13:07,478 --> 00:13:09,038
traffic control and enterprise.

172
00:13:09,128 --> 00:13:11,118
price security features.

173
00:13:11,728 --> 00:13:17,938
So yeah, it's written in Go, built
on Envoy Proxy, multi threaded.

174
00:13:18,318 --> 00:13:21,338
The license is Apache 2.

175
00:13:21,338 --> 00:13:23,158
0, so also fully open source.

176
00:13:24,118 --> 00:13:26,528
Storage options are Docker for.

177
00:13:27,028 --> 00:13:31,568
Storage options are, sorry,
files, file based configuration,

178
00:13:31,848 --> 00:13:35,273
like YAML, or Kubernetes CRDs.

179
00:13:35,333 --> 00:13:38,504
Configuration options is declarative,
declarative configuration via

180
00:13:38,885 --> 00:13:43,225
Kubernetes CRDs, or Helm charts.

181
00:13:44,135 --> 00:13:44,395
Yeah.

182
00:13:44,395 --> 00:13:48,935
And, you can write plugins, In
goal, among the security and

183
00:13:49,375 --> 00:13:57,735
authentication, plugins, they have
the O2 JWT authentication and LDAP for

184
00:13:57,735 --> 00:14:00,045
observability, for metrics support.

185
00:14:00,605 --> 00:14:04,695
they have Prometheus, Grafana,
and, Datadog, plugins.

186
00:14:05,195 --> 00:14:05,945
sorry.

187
00:14:06,445 --> 00:14:12,425
they also support the hot reload
and zero downtime, configuration.

188
00:14:12,925 --> 00:14:16,985
yeah, when, choosing an API
gateway performance is a critical

189
00:14:16,995 --> 00:14:21,315
factor, especially for high traffic
applications, microservices and

190
00:14:21,315 --> 00:14:23,385
latency sensitive workloads.

191
00:14:23,785 --> 00:14:29,595
here's how the API 6, Con, Tick,
Kraken D and Glue H compare.

192
00:14:29,950 --> 00:14:32,730
In terms of latency and, throughput.

193
00:14:33,700 --> 00:14:41,450
So I, I ordered, those API gateways,
from, the fastest ones to slowest.

194
00:14:41,870 --> 00:14:47,620
of course, like I, I looked at the
benchmarks, on their websites and,

195
00:14:47,670 --> 00:14:49,440
I looked at the information on the.

196
00:14:49,765 --> 00:14:53,925
internet, and, it seems like
the situation is like this.

197
00:14:53,925 --> 00:15:00,825
API 6 is the first, is the fastest
API gateway because, it's built, on

198
00:15:00,865 --> 00:15:07,005
open resting Jinx and Lua JIT, it's,
optimized for ultra low latency.

199
00:15:07,540 --> 00:15:13,620
this G Jett, compilation just in time
compilation in Ji, it runs, plugins

200
00:15:13,620 --> 00:15:17,510
faster than traditional Lua used by Kong.

201
00:15:18,510 --> 00:15:22,470
So Kong, is, the latest,
the last in this, least.

202
00:15:22,970 --> 00:15:28,430
so why is D fast cracking D is optimized
for API, aggregation and stateless

203
00:15:28,430 --> 00:15:30,770
performance make it ultra fast.

204
00:15:30,770 --> 00:15:32,924
So it's it's fully written in Go.

205
00:15:33,759 --> 00:15:39,279
no scripting overhead, unlike Lua
based gate, gateways, it's stateless.

206
00:15:39,329 --> 00:15:45,839
so no need for etcd, Postgres or Redis,
and it's designed for API aggregation.

207
00:15:45,869 --> 00:15:50,639
It merges multiple API calls into
a single, response efficiently.

208
00:15:51,219 --> 00:15:56,309
And it's, it has the high
concurrency, thanks to coroutines.

209
00:15:56,639 --> 00:15:59,669
It can handle thousands
of, simultaneous requests.

210
00:15:59,939 --> 00:16:01,639
with, low resource usage.

211
00:16:02,479 --> 00:16:04,909
so why is tick a strong performer?

212
00:16:04,959 --> 00:16:09,129
tick balances, performance
and extensibility.

213
00:16:09,159 --> 00:16:14,609
It's built in go and u and
usually, in, many properties,

214
00:16:14,669 --> 00:16:16,829
go is, faster than law based.

215
00:16:17,064 --> 00:16:17,764
gateways.

216
00:16:18,614 --> 00:16:22,874
yeah, it's optimized for security heavy
workloads, but it's slightly slower than

217
00:16:22,884 --> 00:16:26,124
API 6 and cracking D in a raw performance.

218
00:16:26,624 --> 00:16:30,244
yeah, glue edge optimized for Kubernetes.

219
00:16:30,594 --> 00:16:32,434
It's built on and avoid proxy.

220
00:16:32,434 --> 00:16:35,454
And so provides strong
Kubernetes native performance.

221
00:16:35,954 --> 00:16:42,314
it's highly optimized for L7
routing, and, yeah, it's best suited

222
00:16:42,324 --> 00:16:44,264
for Kubernetes heavy deployments.

223
00:16:44,744 --> 00:16:50,894
And, why is Korn slower than, API 6
is because, it's based on OpenResty

224
00:16:50,894 --> 00:16:53,314
without JIT, JIT compilation.

225
00:16:53,354 --> 00:16:58,854
So slower than API 6 and it relies
on Postgres, for persistence.

226
00:16:58,914 --> 00:17:04,724
That's database latency, but, it's
worse saying that DBLS, mod improves

227
00:17:04,754 --> 00:17:12,074
performance, but it's still not as fast
as APS XO or Kraken D. And it's, it also

228
00:17:12,114 --> 00:17:17,794
contains like a strong plugin ecosystem,
but plugin execution, adds overhead.

229
00:17:18,114 --> 00:17:20,364
And you can see, I specified here, the.

230
00:17:20,864 --> 00:17:25,994
Links to benchmarks, those are,
benchmarks in their official sites.

231
00:17:26,334 --> 00:17:30,774
and, some of those gateways
provide, versus like comparison.

232
00:17:30,994 --> 00:17:37,764
APS six, versus cone, crack, crack and D
versus cone and versus tick versus cone.

233
00:17:37,924 --> 00:17:40,574
it, it can be useful like, day here.

234
00:17:41,069 --> 00:17:44,659
they use, different, machines,
different configurations.

235
00:17:44,659 --> 00:17:50,029
So it's hard to say who, who is, the
best, but this is the general picture.

236
00:17:50,779 --> 00:17:52,069
And, if you see the.

237
00:17:52,509 --> 00:17:57,869
Con benchmarks, they had, done a
lot of, a lot of tests in a lot of,

238
00:17:57,939 --> 00:18:00,379
machines, with different configurations.

239
00:18:00,379 --> 00:18:02,759
So worth checking.

240
00:18:03,379 --> 00:18:07,859
So the second thing I want to
mention is WebSocket support.

241
00:18:08,584 --> 00:18:13,124
Cracking D, doesn't support it
in, open source version, only in

242
00:18:13,204 --> 00:18:19,694
enterprise version, for gRPC cracking
D, doesn't support it as well.

243
00:18:20,124 --> 00:18:26,824
and also, the license for TIC, you
may have noticed that, it's MPL and,

244
00:18:26,874 --> 00:18:29,444
it's, less permissive than, Apache.

245
00:18:29,459 --> 00:18:36,239
2. 0, and I think that it's also
useful to see, which customers,

246
00:18:36,319 --> 00:18:40,519
like which, technologies use,
those, gateways in production.

247
00:18:40,519 --> 00:18:45,539
So here's the list and maybe it
will help to, to make decision,

248
00:18:45,659 --> 00:18:48,369
when choosing the right gateway.

249
00:18:48,869 --> 00:18:52,579
yeah, let's move on to the final part.

250
00:18:52,939 --> 00:18:57,709
So future trends, as modern
applications evolve, API gateways

251
00:18:58,139 --> 00:19:03,199
must adapt to new challenges in
performance, security, and scalability.

252
00:19:03,219 --> 00:19:08,379
And here the key feature,
Trans shaping API gateways.

253
00:19:08,779 --> 00:19:15,679
So first is a AI powered API gateways
like, AI will predict traffic patterns

254
00:19:15,699 --> 00:19:18,849
and auto scale APIs dynamically.

255
00:19:18,929 --> 00:19:23,209
And, AI driven, anomaly detection
will prevent failures before.

256
00:19:23,544 --> 00:19:25,044
They impact users.

257
00:19:25,154 --> 00:19:31,134
and I saw actually in the documentations
of those API gateways that API 6

258
00:19:31,134 --> 00:19:37,654
and con also already look in this
direction, but, and they already

259
00:19:37,684 --> 00:19:39,934
have some plugins for this, but.

260
00:19:40,629 --> 00:19:45,799
Those plugins are just, simplifying
access to LLLM, providers.

261
00:19:46,099 --> 00:19:52,319
So they, work, only on transformation,
like adding headers, transforming,

262
00:19:52,509 --> 00:19:56,199
requests, body to, to make the.

263
00:19:56,534 --> 00:20:00,454
requesting those, APIs,
more eff efficiently.

264
00:20:01,034 --> 00:20:01,454
yeah.

265
00:20:01,664 --> 00:20:07,764
So the next thing is, Kubernetes,
gateway AP API replacing, ingress.

266
00:20:08,094 --> 00:20:13,479
as, as, and, I actually checked
this, last year and, gateway, API

267
00:20:13,509 --> 00:20:15,819
but by Kubernetes was, in beta.

268
00:20:16,284 --> 00:20:17,764
But, now it's not.

269
00:20:17,814 --> 00:20:23,844
they provide the gateway API and, this
gateway API will, replace traditional,

270
00:20:23,964 --> 00:20:27,234
ingress controllers that, have, some.

271
00:20:27,404 --> 00:20:28,244
Trade-offs.

272
00:20:28,274 --> 00:20:34,894
So a, Kubernetes gateway, API, aims to
resolves, to resolve, those, trade-offs.

273
00:20:35,254 --> 00:20:41,534
yeah, API Gateways will fully integrate
with Kubernetes NA native net networking.

274
00:20:41,984 --> 00:20:43,024
and actually.

275
00:20:43,524 --> 00:20:48,124
glue h and con ingress
controller are early adopters

276
00:20:48,144 --> 00:20:50,774
of the Kubernetes Gateway API.

277
00:20:51,274 --> 00:20:57,034
The next thing is GraphQL
and gRPC native support.

278
00:20:57,384 --> 00:21:00,374
REST APIs are no longer the default.

279
00:21:00,474 --> 00:21:07,224
It's the standard more API gateways
will support GraphQL and gRPC natively,

280
00:21:07,544 --> 00:21:13,184
including GraphQL query introspection
and validation, gRPC proxying with

281
00:21:13,184 --> 00:21:18,084
real time transformation, GraphQL
caching and schema enforcement.

282
00:21:18,584 --> 00:21:24,994
And, I already mentioned this, TIC has
full GraphQL support and API 6 offers

283
00:21:25,014 --> 00:21:28,724
GraphQL rate limiting and query filtering.

284
00:21:29,224 --> 00:21:34,054
And the last but not least is API
monetization and marketplaces.

285
00:21:34,234 --> 00:21:38,894
So companies are turning APIs
into revenue generating products.

286
00:21:38,949 --> 00:21:44,669
so API gateways will provide, built
in, monetization, including billing

287
00:21:44,699 --> 00:21:50,459
and API usage metering, subscription
based API models and, self service

288
00:21:50,689 --> 00:21:52,789
API portals for developers.

289
00:21:53,309 --> 00:21:56,469
for example, TIC and Con
Enterprise, already offer.

290
00:21:57,079 --> 00:21:59,739
yeah, this is it for my presentation.

291
00:21:59,759 --> 00:22:04,929
I hope you enjoyed it and, maybe
took, some, something, useful for you.

292
00:22:05,259 --> 00:22:06,109
so yeah.

293
00:22:06,604 --> 00:22:14,824
If you have any questions, or, I provided
the link to, my, LinkedIn account and,

294
00:22:14,924 --> 00:22:21,974
yeah, here the references, the links to
references I used, for, this presentation.

295
00:22:22,104 --> 00:22:24,774
yeah, thank you for attention.

296
00:22:24,804 --> 00:22:26,454
I hope you enjoyed it.

