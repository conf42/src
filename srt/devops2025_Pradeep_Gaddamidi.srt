1
00:00:00,400 --> 00:00:02,340
Hey guys, my name is Pradeep Gaddamedi.

2
00:00:02,400 --> 00:00:05,680
I'm a site reliability engineer
at a startup called Radar.

3
00:00:06,180 --> 00:00:09,430
So, every day brings new
challenges and victories.

4
00:00:10,070 --> 00:00:14,080
And here I'll share my adventure
in deploying monitoring and logging

5
00:00:14,140 --> 00:00:18,939
platforms in the cloud without breaking
the bank, as budget could be the

6
00:00:18,959 --> 00:00:23,110
constraint for many startups and not
everyone can afford paid versions.

7
00:00:23,610 --> 00:00:26,130
so with that, I'm gonna
go over my agenda today.

8
00:00:26,280 --> 00:00:30,260
So, I just did my introduction,
and I'm gonna, next time I'm

9
00:00:30,260 --> 00:00:34,730
gonna de discuss about, you know,
how to deploy the cost effective

10
00:00:34,730 --> 00:00:36,830
monitoring and, logging solutions.

11
00:00:37,240 --> 00:00:39,940
And then I'm gonna talk a
little bit about the automation.

12
00:00:40,510 --> 00:00:44,220
And then, you know how I did set
up the S-L-A-S-L-O-S-L-I monitoring

13
00:00:44,220 --> 00:00:47,930
dashboards, and I'm gonna discuss
my experience with incidents.

14
00:00:48,410 --> 00:00:51,850
you know, in my organization
and then, about the toil and,

15
00:00:51,850 --> 00:00:55,240
you know, time constraints and
challenges and how I manage them.

16
00:00:56,000 --> 00:00:58,700
So, let's diri dive into it.

17
00:00:59,490 --> 00:01:03,860
So the first thing, you know, and I
wanted to discuss is the software.

18
00:01:03,960 --> 00:01:07,580
You know, open source software and
the infrastructure we choose for

19
00:01:07,620 --> 00:01:12,300
monitoring and logging infrastructure,
or in fact, any other setup.

20
00:01:12,800 --> 00:01:17,200
So, especially when your company or
the startup which you're working for

21
00:01:17,240 --> 00:01:21,170
is a budget constraint, obviously
you want to choose, you're compelled

22
00:01:21,230 --> 00:01:22,790
to choose the open source version.

23
00:01:23,340 --> 00:01:29,390
So the main important, You know criteria
we need to keep in mind is always research

24
00:01:29,890 --> 00:01:34,470
a lot before we actually choose this
software and also check mark all the

25
00:01:34,599 --> 00:01:39,999
requirements which your organization
needed that and then then choose

26
00:01:40,000 --> 00:01:42,657
the software Let me take an example.

27
00:01:42,657 --> 00:01:48,700
So I did choose elastic search For
logging and I did set up elastic search

28
00:01:48,730 --> 00:01:52,280
on virtual machines and everything
went fine You there was, there

29
00:01:52,280 --> 00:01:54,300
were some problems I encountered.

30
00:01:54,810 --> 00:01:59,210
So, I cannot send Slack alerts
from Elasticsearch because

31
00:01:59,240 --> 00:02:01,579
only paid version, allows it.

32
00:02:01,820 --> 00:02:05,340
So, since I was using open
source, I can't send Slack alerts.

33
00:02:05,389 --> 00:02:08,219
So, I have to, you know,
use a workaround for that.

34
00:02:08,240 --> 00:02:12,970
So, I wrote a Python script and then,
I used the kibana server log and

35
00:02:12,970 --> 00:02:17,450
then you know filtered the alerts and
used a slack web hook and then you

36
00:02:17,450 --> 00:02:19,230
know Sent it to the slack channel.

37
00:02:19,259 --> 00:02:21,910
So it was kind of a Backdoor way.

38
00:02:22,460 --> 00:02:26,399
So that's an example, but there could
be something more important for your

39
00:02:26,400 --> 00:02:30,009
organization So make sure like you
check mark all those requirements

40
00:02:30,020 --> 00:02:33,610
before choosing any open source,
you know, and that way like, Yeah.

41
00:02:33,610 --> 00:02:37,120
And there is, and, and, and next,
like, choosing the right hardware.

42
00:02:37,770 --> 00:02:41,529
So there is, there are certain
ways where you can save some money,

43
00:02:42,459 --> 00:02:43,830
by choosing the correct hardware.

44
00:02:44,610 --> 00:02:49,280
you have to identify the correct
platform to run your application in.

45
00:02:49,900 --> 00:02:53,370
And, also the, you have to
compare the cost with different,

46
00:02:54,070 --> 00:02:55,500
components available in the cloud.

47
00:02:56,030 --> 00:03:00,080
I mean to say different infrastructure
available in the cloud and decide based

48
00:03:00,080 --> 00:03:04,700
on the cost and, you know, You have to
weigh in advantages versus cost when

49
00:03:04,700 --> 00:03:10,200
I did elastic setup I actually read
through their documentation and I found

50
00:03:10,210 --> 00:03:14,475
like not all the instances require
the same amount of memory or CPU.

51
00:03:14,475 --> 00:03:18,805
So some instances consume less, some
consume more, like master nodes doesn't

52
00:03:19,165 --> 00:03:21,185
doesn't require a lot of, resources.

53
00:03:21,185 --> 00:03:26,295
So I use the virtual machines which
are of less skew for master nodes,

54
00:03:26,385 --> 00:03:31,754
whereas the data nodes, they are CPU
intensive because there are a lot of

55
00:03:31,825 --> 00:03:36,075
data comes in there and then a lot of
indexing and searching happens there.

56
00:03:36,215 --> 00:03:39,649
So I have chosen virtual
machines with high CPU.

57
00:03:40,410 --> 00:03:44,490
So, you have to, look at, you had
to weigh in the, advantages and

58
00:03:44,490 --> 00:03:47,670
disadvantages and, you know, which
costs you more and then choose

59
00:03:47,670 --> 00:03:50,130
accordingly and try to save costs there.

60
00:03:50,630 --> 00:03:53,530
That's all about, you know,
how do you, select software

61
00:03:53,530 --> 00:03:56,209
and hardware, to save the cost.

62
00:03:56,619 --> 00:03:58,249
So let's talk about the automation.

63
00:03:58,700 --> 00:04:05,030
So, so far I've talked about logging
and I installed all of the monitoring

64
00:04:05,030 --> 00:04:07,160
components I choose again for monitoring.

65
00:04:07,160 --> 00:04:07,960
I have chosen open source.

66
00:04:08,460 --> 00:04:12,150
Grafana, Prometheus, Mimir, InfluxDB.

67
00:04:12,150 --> 00:04:15,890
So all those components, I installed
it on a Kubernetes cluster.

68
00:04:16,690 --> 00:04:21,210
either it could be monitoring or logging
solutions, everything I use Terraform.

69
00:04:21,710 --> 00:04:24,609
It's better to go with, you
know, Terraform or Ansible.

70
00:04:24,610 --> 00:04:28,160
Ansible I use to configure
the Elastic instances.

71
00:04:28,670 --> 00:04:33,210
So, actually creating, sometimes you
feel like, okay, creating infrastructure

72
00:04:33,210 --> 00:04:36,695
manually, you know, It's very easy,
but you know in the long run, it's

73
00:04:36,695 --> 00:04:41,455
not a good practice because you You
might you tend to forget the whole

74
00:04:41,475 --> 00:04:46,035
process how to create or if something
happens it's going to take time And

75
00:04:46,125 --> 00:04:49,765
the documentation could be tedious,
you know, there are a lot of things.

76
00:04:49,835 --> 00:04:55,834
so it's better to go with Uh, I mean
any automation of any kind terraform

77
00:04:55,834 --> 00:05:00,442
ansible or any other automation And for
my dashboards for my grafana dashboards

78
00:05:00,442 --> 00:05:08,510
You I, I use CICD, and then I, I checked
in them, checked in the code in, Git

79
00:05:08,530 --> 00:05:12,520
and then use CICD that way, like if
anybody messes with Grafana dashboards.

80
00:05:13,065 --> 00:05:15,675
I can recreate them, by
running the CI CD pipeline.

81
00:05:16,635 --> 00:05:19,575
And I used Helm Charts to
deploy, you know, monitoring

82
00:05:19,575 --> 00:05:20,875
components into Kubernetes.

83
00:05:21,495 --> 00:05:28,235
So all this, you know, using automation
at first could take some time, or, it

84
00:05:28,305 --> 00:05:31,925
could seem, I mean, it could seem a little
bit hard in the beginning, but, in the

85
00:05:31,925 --> 00:05:35,855
long run, they are really useful, and
That makes your system very resilient.

86
00:05:36,355 --> 00:05:36,915
All right.

87
00:05:36,955 --> 00:05:39,575
So, yeah on the same context
I would like to highlight like

88
00:05:39,865 --> 00:05:41,755
in my elastic search cluster.

89
00:05:41,785 --> 00:05:46,905
Let's say i'm running out of I
mean my Data nodes are growing.

90
00:05:46,925 --> 00:05:48,455
There is a lot of logs coming in.

91
00:05:48,465 --> 00:05:52,625
All I have to do is like adding some
entries new nodes in the terraform and

92
00:05:52,625 --> 00:05:56,765
run it And that way it just creates
those data nodes in just few minutes.

93
00:05:57,185 --> 00:06:02,045
So So automation makes things
really easy Let me discuss a

94
00:06:02,085 --> 00:06:04,585
little bit about SLA, SLO, and SLI.

95
00:06:05,065 --> 00:06:08,895
I know these are very, important
parameters in DevOps world.

96
00:06:09,245 --> 00:06:10,575
Let me start with SLI.

97
00:06:10,635 --> 00:06:15,975
SLI is basically, the metric that
measures how well a, service performs.

98
00:06:16,455 --> 00:06:20,865
Based on that metrics, you know,
you basically set up SLOs and you

99
00:06:20,865 --> 00:06:24,375
come to some you know, you also
set up SLAs with the customers.

100
00:06:24,875 --> 00:06:27,905
So how do you basically
Go with setting up SLIs.

101
00:06:28,655 --> 00:06:34,165
So, I mean I I did basically, Set up a
lot of SLIs, but what I recommend is, you

102
00:06:34,165 --> 00:06:39,085
know, start with the basic level So if
you have VMs or if you have if you are

103
00:06:39,085 --> 00:06:43,495
running some pipelines data pipelines,
you know So set up the basic alerts first

104
00:06:43,535 --> 00:06:48,095
instead of going with the fancy dashboards
That way like you cover the basic

105
00:06:48,095 --> 00:06:50,615
stuff, you know There are a lot of slis.

106
00:06:50,625 --> 00:06:55,475
In fact, like you can set up availability
latency error rate throughput saturation

107
00:06:55,515 --> 00:07:00,455
traffic you know, they all help you
decide on SLOs But when you're starting

108
00:07:00,465 --> 00:07:04,805
up right, you know in a startup, I
think saturation is the important SLI

109
00:07:05,155 --> 00:07:10,135
We should first focus on saturation
indicates how full a service is, you

110
00:07:10,135 --> 00:07:16,170
know, it could be measured to various
resources resource metrics such as cpu cpu

111
00:07:16,805 --> 00:07:21,405
load memory usage or network bandwidth,
you know saturation helps predict

112
00:07:21,465 --> 00:07:26,500
and prevent potential You performance
degradation, degradations this way.

113
00:07:26,550 --> 00:07:30,570
we make sure our system is well designed
to support the load before we consider

114
00:07:30,570 --> 00:07:35,060
setting up other SLIs like error
rate, availability, or throughput.

115
00:07:35,560 --> 00:07:36,060
All right.

116
00:07:36,070 --> 00:07:42,390
So let's move on to, incidents, you know,
incidents, happens, there are basically,

117
00:07:42,430 --> 00:07:44,210
in every, you know, in DevOps world.

118
00:07:44,240 --> 00:07:48,615
And then There are two types of
incidents, there are some self

119
00:07:48,615 --> 00:07:50,905
inflicted and some natural incidents.

120
00:07:51,425 --> 00:07:54,745
The reason I call self inflicted
incidents is because, you

121
00:07:54,745 --> 00:07:56,344
know, there could be some toil.

122
00:07:56,344 --> 00:08:01,245
Toil is basically the repetitive manual
work that could be automated, you know.

123
00:08:01,925 --> 00:08:05,815
And, you know, that could prevent an
incident, you know, occurrence of an

124
00:08:05,815 --> 00:08:12,455
incident or setting up proper alerts for,
you know, those, the, I mean, setting

125
00:08:12,455 --> 00:08:15,635
up proper alerts for the infrastructure
could prevent some incidents.

126
00:08:16,385 --> 00:08:17,415
Let me take an example.

127
00:08:17,445 --> 00:08:22,545
So I was really, I had time
constraints and I have a lot to do.

128
00:08:22,545 --> 00:08:27,445
So I miss setting up the, Alerts
for disk on elastic and every time

129
00:08:27,445 --> 00:08:29,985
the disk failed Slash temp disk.

130
00:08:29,985 --> 00:08:34,305
I manually went in and you know
cleaned it I could have automated but

131
00:08:34,305 --> 00:08:37,590
I have my own reasons for not doing
that Like I said, time constraint.

132
00:08:37,590 --> 00:08:41,970
So one day, like an incident
happened and, you know, I had to

133
00:08:41,990 --> 00:08:43,370
manually go and fix the stuff.

134
00:08:44,000 --> 00:08:47,390
So, so this repetitive
task that's called toil.

135
00:08:47,570 --> 00:08:49,310
So we should address toil.

136
00:08:49,730 --> 00:08:53,260
So basically we could,
there are various ways.

137
00:08:53,280 --> 00:08:56,670
Maybe we could create a separate
project, separate JIRA tickets and

138
00:08:56,740 --> 00:08:57,830
work as a team to address toil.

139
00:08:58,380 --> 00:09:01,850
and set up proper alerts to
prevent these self infected events.

140
00:09:02,460 --> 00:09:05,410
And there are some natural, incidents
which, which actually occur.

141
00:09:05,940 --> 00:09:09,940
So, when natural incidents occur,
proper, you know, root cause,

142
00:09:09,980 --> 00:09:13,110
root cause analysis and proper
post mortems are really important.

143
00:09:13,610 --> 00:09:16,200
And moreover, we should
play blameless game.

144
00:09:16,220 --> 00:09:19,720
So, because blamelessness is
very important, to the success

145
00:09:19,720 --> 00:09:21,160
of a team or organization.

146
00:09:21,540 --> 00:09:23,230
So post mortem should be blameless.

147
00:09:23,730 --> 00:09:29,410
And, for RCS, we generally follow a
five, why methods you could search

148
00:09:29,420 --> 00:09:34,900
for five, number five, why, root
cause analysis in Atlassian JIRA,

149
00:09:35,360 --> 00:09:38,600
or you could Google, you will, that
basically applies to any scenarios.

150
00:09:38,870 --> 00:09:42,940
So basically you ask the same
question five times until you

151
00:09:42,940 --> 00:09:44,380
get to the bottom of the problem.

152
00:09:44,530 --> 00:09:47,590
So if the disc fails, you
say white field, and then.

153
00:09:48,070 --> 00:09:52,650
Okay, the disk was not scaled and white
not scaled and there was no time white

154
00:09:52,680 --> 00:09:57,930
but there was no time for the DevOps,
then it could be a you know planning

155
00:09:57,940 --> 00:10:03,330
issue then You will get to the bottom of
the issue after you question five times

156
00:10:03,550 --> 00:10:09,430
so you could follow such strategies To
you know improve rcs and push buttons.

157
00:10:09,930 --> 00:10:14,110
Finally, let me discuss about toil
time constraints and challenges

158
00:10:14,935 --> 00:10:19,040
So, workload, workload is, one
important aspect, in DevOps.

159
00:10:19,040 --> 00:10:23,410
So you might, you might be already,
overburdened with a lot of, you know,

160
00:10:23,510 --> 00:10:27,050
vast amount of work to get to be
accomplished in limited timeframe,

161
00:10:27,770 --> 00:10:31,520
commit only to what you can realistically
handle and set clear expectations to

162
00:10:31,520 --> 00:10:34,250
avoid the stress of overcommitting.

163
00:10:35,120 --> 00:10:37,599
while it's not, always
possible not to overcommit.

164
00:10:38,374 --> 00:10:42,994
And if in any urgent task, you know
requires you to implement a solution

165
00:10:42,994 --> 00:10:46,444
with minimum functionality inform
management about the limitations of

166
00:10:46,444 --> 00:10:50,664
the setup, this change this ensures
they do not, you know, perceive it

167
00:10:50,664 --> 00:10:53,944
as a perfect and Resilient system.

168
00:10:53,954 --> 00:10:59,519
So let me take an example So I have been
given like a week or two to set up like

169
00:10:59,519 --> 00:11:05,929
complete logging and monitoring system So
I had to take a hard decision and set up

170
00:11:05,929 --> 00:11:12,219
a system which was not resilient Which was
a single point of failure but You know, I

171
00:11:12,219 --> 00:11:16,729
made it clear to the team and management,
like the system I'm going to design is,

172
00:11:16,769 --> 00:11:18,399
you know, could fail back at any time.

173
00:11:18,399 --> 00:11:23,439
So we were in an agreement, you know,
that way, like, if some surprises come, I

174
00:11:23,439 --> 00:11:27,519
mean, when the system fails, there are no
surprises to the, you know, management.

175
00:11:27,519 --> 00:11:33,379
So, also, you know, like proper tracking
proper tracking where jira, system

176
00:11:33,429 --> 00:11:38,599
jira tickets or you know Whatever
the ticketing system you use, right?

177
00:11:39,089 --> 00:11:43,969
that will help you track the issues that
will help your track track your work and

178
00:11:43,969 --> 00:11:49,219
then Even that will showcase your work
that way like Management understands like

179
00:11:49,219 --> 00:11:52,919
what you're working on and what is the
workload you could take more and that

180
00:11:53,029 --> 00:11:56,724
actually helps you You know, organize
your work and reduce the stress level.

181
00:11:57,474 --> 00:12:01,184
yeah, proper tracking and
documentation are also critical.

182
00:12:01,244 --> 00:12:05,694
So you basically document whatever
you do and you basically transition

183
00:12:05,884 --> 00:12:08,654
to other teammates that way, like you
don't get disturbed when you, while

184
00:12:08,654 --> 00:12:12,214
you're on vacation, or, you know, some
of the important, You know, aspects you

185
00:12:12,214 --> 00:12:13,939
should consider, in the DevOps world.

186
00:12:14,439 --> 00:12:17,399
Alright, so these are some
of the, you know, learnings,

187
00:12:17,499 --> 00:12:19,209
I, learned in this startup.

188
00:12:19,979 --> 00:12:21,629
like I know I'm still learning.

189
00:12:21,689 --> 00:12:23,099
We are all, we all are learning.

190
00:12:23,099 --> 00:12:26,139
So, please let me know if
you guys have any questions.

191
00:12:26,499 --> 00:12:29,739
please feel free to, send me
an email or please feel free

192
00:12:29,739 --> 00:12:31,029
to connect me on LinkedIn.

193
00:12:31,689 --> 00:12:33,309
Alright, thank you very
much for listening.

194
00:12:33,889 --> 00:12:34,849
You guys have a good day.

195
00:12:34,909 --> 00:12:35,149
Bye-bye.

