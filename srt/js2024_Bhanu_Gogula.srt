1
00:00:00,240 --> 00:00:01,180
Hey, hello, everyone.

2
00:00:01,180 --> 00:00:07,510
I am a full stack web engineer, and
thank you for joining my session on

3
00:00:07,510 --> 00:00:12,000
optimizing AEM performance and user
experience with a single page application

4
00:00:12,740 --> 00:00:14,590
before we proceed with the discussion.

5
00:00:14,769 --> 00:00:18,330
I have a disclaimer to share
the views and opinions shared

6
00:00:18,349 --> 00:00:20,029
in this presentation are my own.

7
00:00:20,720 --> 00:00:23,319
And do not represent the views
or official position of my

8
00:00:23,349 --> 00:00:24,869
current and previous employees.

9
00:00:25,569 --> 00:00:28,659
The content is based on
general industry knowledge and

10
00:00:28,659 --> 00:00:30,119
publicly available information.

11
00:00:30,519 --> 00:00:34,870
No sensitive or confidential information
will be shared during this talk.

12
00:00:35,370 --> 00:00:38,980
Today, we'll talk about the importance
of AEM single page application,

13
00:00:39,459 --> 00:00:41,619
issues, advantages, and resolutions.

14
00:00:41,964 --> 00:00:45,684
And how it will improve the server
performance and user experience.

15
00:00:46,184 --> 00:00:48,954
A little bit background about
me before starting into, talk.

16
00:00:49,474 --> 00:00:52,894
I'm a technology professional with
more than 10 years of experience.

17
00:00:53,394 --> 00:00:55,744
Developing software
for, various industries.

18
00:00:55,804 --> 00:00:58,554
I hold a master degree in computer
science from the University

19
00:00:58,554 --> 00:01:00,584
of Central Missouri, USA.

20
00:01:01,264 --> 00:01:06,225
As a full stack developer, I bring
exceptional proficiency in both front end

21
00:01:06,225 --> 00:01:11,075
and back end development, adding value
and innovation to every project I work on.

22
00:01:11,575 --> 00:01:14,474
In this talk, we'll talk about
introduction to single page

23
00:01:14,474 --> 00:01:19,654
application, before SPA, how it was in
a traditional multi page application,

24
00:01:20,195 --> 00:01:24,614
how single page application work,
traditional multi page application

25
00:01:25,014 --> 00:01:26,444
versus single page application.

26
00:01:26,944 --> 00:01:31,494
How SPA integrated in the EM
issue software, SPA implementation

27
00:01:31,994 --> 00:01:33,854
resolving SPA issues In the EM

28
00:01:34,354 --> 00:01:38,634
overview of single page application, a
single page application is a modern web

29
00:01:38,634 --> 00:01:44,284
application architecture where users
load a single page initially, and that

30
00:01:44,284 --> 00:01:48,574
page dynamically updates the content
without requiring a full page reload every

31
00:01:48,574 --> 00:01:50,344
time the user interacts with the app.

32
00:01:50,944 --> 00:01:55,194
Unlike traditional websites, the reload,
each time you navigate to your new

33
00:01:55,194 --> 00:01:57,684
page, SPA remains on the same page.

34
00:01:58,049 --> 00:02:02,049
and make small data requests
behind the scenes, updating only

35
00:02:02,049 --> 00:02:03,499
the relevant part of the page.

36
00:02:03,999 --> 00:02:06,769
before talking about the
single page application, let's

37
00:02:06,769 --> 00:02:10,169
talk about a few minutes for
traditional multi page application.

38
00:02:11,019 --> 00:02:15,799
a multi page application is a traditional
web architecture where every user action,

39
00:02:15,850 --> 00:02:21,349
for example, clicking a link or submitting
a form, result in a full page reload.

40
00:02:21,914 --> 00:02:25,074
Each interaction sends a
new request to the server.

41
00:02:25,464 --> 00:02:28,614
Then the server sends back
a complete new HTML page.

42
00:02:29,314 --> 00:02:31,594
Let's look into the
flow here in this slide.

43
00:02:32,014 --> 00:02:36,874
When the browser requests to go to server
and it responds with a complete HTML.

44
00:02:37,204 --> 00:02:41,754
Each request it will go to the server
and respond back with a complete HTML.

45
00:02:41,934 --> 00:02:43,864
Like a full page reloads.

46
00:02:43,944 --> 00:02:46,400
Every time the user navigates to a new
page or performance in action, the browser

47
00:02:46,400 --> 00:02:47,697
make a request to the server and it
will respond with a complete HTML page.

48
00:02:47,697 --> 00:02:48,907
or performance in action, the browser
make a request to the server and it

49
00:02:48,907 --> 00:02:49,426
responds with a complete HTML page.

50
00:02:49,426 --> 00:02:50,544
and it responds with a complete HTML page.

51
00:02:51,074 --> 00:02:55,094
which process the request and sends
a full rendered HTML page back.

52
00:02:55,594 --> 00:02:59,844
Client server interactions, each time
the user clicks a link or performs any

53
00:02:59,844 --> 00:03:04,984
actions, the server generates a new page
and the client loads it from scratch.

54
00:03:05,734 --> 00:03:08,934
Let's take an example like, think
of a traditional e commerce site.

55
00:03:09,579 --> 00:03:12,629
you browse through categories,
select a product, and each

56
00:03:12,669 --> 00:03:14,389
click requires a full reload.

57
00:03:14,869 --> 00:03:19,359
Every new product page sends a fresh
request to the server, making the

58
00:03:19,359 --> 00:03:21,829
experience feel slower and more segmented.

59
00:03:22,329 --> 00:03:25,939
Let's talk about some common issues
before SPI implementing in AEM.

60
00:03:26,509 --> 00:03:30,279
Like a slow navigation, every time
the user clicks to go to another

61
00:03:30,279 --> 00:03:32,379
section, a full page reload occurs.

62
00:03:33,324 --> 00:03:36,394
leading to slow transition
and a fragmented experiences.

63
00:03:37,044 --> 00:03:40,874
SEO challenges for interactive
or frequently updated websites.

64
00:03:41,284 --> 00:03:45,364
Multi page applications generally
work well, but SEO optimization

65
00:03:45,364 --> 00:03:48,934
becomes challenging when rich
interactive content is delivered,

66
00:03:49,374 --> 00:03:50,984
especially with client side rendering.

67
00:03:51,484 --> 00:03:55,084
Complex user interactions like
creating smooth and complex

68
00:03:55,084 --> 00:03:58,284
user interactions in multi page
applications is often challenging.

69
00:03:58,814 --> 00:04:02,864
Especially for applications that require
real time updates like online chat

70
00:04:02,864 --> 00:04:08,854
systems or live dashboards increase
server load With every user interaction

71
00:04:08,904 --> 00:04:13,944
triggering a new server request,
every new server request, there is a

72
00:04:13,954 --> 00:04:18,234
heavier load on the server, leading to
potential slowdowns and scaling issues.

73
00:04:18,854 --> 00:04:20,254
Impact user experience lag.

74
00:04:20,414 --> 00:04:23,494
With every page refresh, the
user may lose their context.

75
00:04:23,504 --> 00:04:28,084
Example, form data might disappear
if they navigate away and come back.

76
00:04:28,584 --> 00:04:30,954
And higher bandwidth usage.

77
00:04:31,374 --> 00:04:35,114
Reloading full page, including
redundant parts like header and

78
00:04:35,114 --> 00:04:39,209
footer, consumes more bandwidth,
increasing the data sent and received.

79
00:04:40,189 --> 00:04:44,969
Let's consider an example like a in
traditional new site where every click

80
00:04:44,969 --> 00:04:49,329
on a new article to get a full page
reload over time, this can slow down

81
00:04:49,339 --> 00:04:53,389
navigation, interrupt the user experience
and increase the workload on the

82
00:04:53,389 --> 00:04:55,609
server, especially when traffic spikes.

83
00:04:55,610 --> 00:04:59,167
Let's talk about, how single
page application works detail.

84
00:04:59,167 --> 00:05:02,329
Now let's talk about
technical structure of SBA.

85
00:05:02,829 --> 00:05:08,729
SPA are primary built using modern
JavaScript framework such as React, js.

86
00:05:09,319 --> 00:05:13,609
These frameworks manage the
applicant's behavior and user interface

87
00:05:13,609 --> 00:05:16,829
directly in the browser instead of
constantly communicating with the

88
00:05:16,829 --> 00:05:19,399
server to reload entire web pages.

89
00:05:19,469 --> 00:05:23,759
SPA work by dynamically updating
only the necessary part of the page.

90
00:05:24,259 --> 00:05:27,389
The core difference lies in the
shift of logic and rendering

91
00:05:27,389 --> 00:05:28,659
from the server to client.

92
00:05:29,159 --> 00:05:32,719
When we talk about technical
structure of SPAs, we talk about

93
00:05:32,729 --> 00:05:34,059
a JavaScript as a controller.

94
00:05:34,519 --> 00:05:39,019
The framework act as a controller that
respond to user action like clicks, form

95
00:05:39,019 --> 00:05:41,239
submissions, and navigation changes.

96
00:05:41,579 --> 00:05:45,409
The JavaScript is loaded initially
and dynamically manage the state

97
00:05:45,409 --> 00:05:50,429
of application, ensuring only the
relevant content is fetched or updated.

98
00:05:50,959 --> 00:05:52,289
Asynchronous data fetching.

99
00:05:52,729 --> 00:05:57,389
SPS use Ajax or Fetch API to send
asynchronous requests to the server.

100
00:05:57,929 --> 00:06:01,639
These requests retrieve only the
necessary data like a specific portion

101
00:06:01,639 --> 00:06:03,104
of text, image, or product details.

102
00:06:03,104 --> 00:06:06,979
Ajax or Fetch API is And update the page
instantly without requiring any updates.

103
00:06:07,279 --> 00:06:08,349
Complete reload.

104
00:06:08,849 --> 00:06:09,849
Browser side logic.

105
00:06:10,429 --> 00:06:14,589
SPA shift most of the rendering and
navigation control to the client side,

106
00:06:14,589 --> 00:06:18,829
the browser, which result in smoother
transition and less load on the server.

107
00:06:19,629 --> 00:06:21,849
Let's talk about how, SPA load data.

108
00:06:22,489 --> 00:06:27,955
In initial load, when a user first visits
the SPA, a browser download a single HTML

109
00:06:27,955 --> 00:06:30,595
page and associated JavaScript files.

110
00:06:31,225 --> 00:06:34,375
This include all necessary code
for the application's layout,

111
00:06:34,425 --> 00:06:35,905
structure, and initial logic.

112
00:06:36,845 --> 00:06:40,275
Then dynamic updates instead of
reloading the entire page, when the

113
00:06:40,275 --> 00:06:45,075
user interacts, example like clicks,
clicking on a link or submitting a form.

114
00:06:45,515 --> 00:06:49,445
Only the specific part of the page
that need to be changed or updated.

115
00:06:50,015 --> 00:06:53,315
This could involve fetching new
content from the server without

116
00:06:53,335 --> 00:06:54,605
disturbing the rest of the page.

117
00:06:55,105 --> 00:06:56,125
Server interaction.

118
00:06:56,435 --> 00:07:00,945
Unlike traditional multi page
applications, SPA do not send full

119
00:07:00,995 --> 00:07:02,555
page reload request to the server.

120
00:07:02,935 --> 00:07:07,185
Instead, asynchronous data requests
are made, fetching only the required

121
00:07:07,185 --> 00:07:08,945
data and displaying it instantly.

122
00:07:09,625 --> 00:07:13,985
These reduces overall server load and
ensures fast interactions for the user.

123
00:07:14,485 --> 00:07:19,275
Let's give you an one example like
considering gmail when you open an email

124
00:07:19,355 --> 00:07:24,255
the rest of the interface the sidebar
header all those things remains unchanged.

125
00:07:24,575 --> 00:07:27,035
Only the content of
selected email is updated.

126
00:07:27,605 --> 00:07:31,795
This allows the app to feel fast
and responsive as there is no

127
00:07:31,795 --> 00:07:33,475
need to reload the entire page.

128
00:07:33,865 --> 00:07:38,145
This is a core benefit of SPA
reducing unnecessary page reloads to

129
00:07:38,145 --> 00:07:39,495
create a seamless user experience.

130
00:07:39,995 --> 00:07:44,965
Let's talk about the some key benefits
like a drastically reduced load time

131
00:07:45,395 --> 00:07:48,815
in traditional websites like a multi
page applications navigation to your

132
00:07:48,815 --> 00:07:54,785
new section or page involves reloading
and JavaScript from the server.

133
00:07:55,385 --> 00:07:56,425
This can result in.

134
00:07:56,795 --> 00:08:00,945
Noticeable delays, especially, for a
website with heavy content or media.

135
00:08:01,445 --> 00:08:06,345
In SPAs, only the necessary data
or, content is fetched and updated,

136
00:08:06,435 --> 00:08:08,135
leaving the rest of the app intact.

137
00:08:08,735 --> 00:08:12,705
This leads to faster interactions
and a more responsive application.

138
00:08:13,295 --> 00:08:17,465
Improved user experience, like a
user expects immediate response from

139
00:08:17,465 --> 00:08:19,125
modern web applications with SPA.

140
00:08:20,055 --> 00:08:23,255
Actions such as clicking links,
submitting forms, or updating

141
00:08:23,315 --> 00:08:25,275
content happen instantly.

142
00:08:25,545 --> 00:08:27,805
because the app does not
reload the entire page.

143
00:08:28,495 --> 00:08:33,525
SPS creates a user experience similar to a
native mobile or desktop applications with

144
00:08:33,525 --> 00:08:35,845
fast transitions and fluid interactions.

145
00:08:36,265 --> 00:08:40,115
Example on, example on Facebook,
liking a post or leaving a

146
00:08:40,115 --> 00:08:44,785
comment happens almost immediately
without reloading the entire page.

147
00:08:44,785 --> 00:08:48,175
This creates an engaging and
seamless experience for users.

148
00:08:49,160 --> 00:08:53,630
As I talk about reduced server load,
traditional multi page applications

149
00:08:53,630 --> 00:08:57,420
place a heavy load on the server
because each user interacts requires

150
00:08:57,420 --> 00:08:59,700
generating a new page from scratch.

151
00:09:00,350 --> 00:09:03,950
This can slow down the performance,
especially when many users are

152
00:09:04,100 --> 00:09:05,410
interacting simultaneously.

153
00:09:06,080 --> 00:09:09,150
Since SPS shift, much of the
rendering to the browser.

154
00:09:09,580 --> 00:09:13,200
The server only needs to provide
data, not full HTML pages.

155
00:09:13,670 --> 00:09:17,300
This makes SBA more scalable,
especially for applications

156
00:09:17,760 --> 00:09:19,920
with heavy user interactions.

157
00:09:20,420 --> 00:09:21,770
Real time updates and interactions.

158
00:09:21,810 --> 00:09:27,560
SBA is very good in applications
requiring real time data updates.

159
00:09:27,900 --> 00:09:31,280
For instance, messaging apps,
live dashboards, and project

160
00:09:31,310 --> 00:09:35,070
management tools, benefit greatly
from the ability to update.

161
00:09:35,480 --> 00:09:37,150
Content without page reloads.

162
00:09:37,820 --> 00:09:40,240
Let's give you like some
real time examples like,

163
00:09:40,240 --> 00:09:42,550
Gmail, Google Maps, Facebook.

164
00:09:43,120 --> 00:09:48,520
when users zoom in, search for a
location, or, or across the, or pan

165
00:09:48,520 --> 00:09:52,275
across the map, Only the relevant
part of the map updates, the rest of

166
00:09:52,275 --> 00:09:54,955
the page, search bar, menu bar, etc.

167
00:09:55,135 --> 00:09:55,925
remains static.

168
00:09:56,175 --> 00:09:59,925
Even in the Facebook, scrolling
through the feed, linking posters,

169
00:10:00,065 --> 00:10:04,015
or commenting happens without
any noticeable page reload.

170
00:10:04,595 --> 00:10:07,705
The content updates dynamically
as you interact with it.

171
00:10:08,225 --> 00:10:12,355
SVAs are ideal for applications that
need to handle real time updates.

172
00:10:12,755 --> 00:10:15,345
dynamic content, and a
high level of interactions.

173
00:10:16,245 --> 00:10:20,805
SBAs are commonly used in applications
like dashboards, project management

174
00:10:20,815 --> 00:10:23,165
tools, social networks, video platforms.

175
00:10:23,665 --> 00:10:26,635
Let's talk about differentiations
between the traditional multi

176
00:10:26,635 --> 00:10:28,065
page application and SBA.

177
00:10:28,575 --> 00:10:31,585
Imagine a traditional website
is an old online store.

178
00:10:31,745 --> 00:10:35,575
Every time you click on a new
product, the whole page reloads.

179
00:10:36,350 --> 00:10:37,870
which can slow and frustrating.

180
00:10:38,430 --> 00:10:41,760
With an SPA, when you click on
your product, only the product

181
00:10:41,760 --> 00:10:45,660
details update, making for a
smoother and faster experience.

182
00:10:46,160 --> 00:10:51,210
Even if you see in this slide, we have two
diagrams where one represents traditional

183
00:10:51,210 --> 00:10:52,140
application and one is for SPA.

184
00:10:52,140 --> 00:10:56,746
In traditional, each request going
from the client, it's coming out like

185
00:10:56,746 --> 00:10:59,433
a complete HTML and regulates the page.

186
00:10:59,433 --> 00:11:03,905
But in SPA, Only portion of Ajax
call went to the server and get

187
00:11:03,935 --> 00:11:05,455
that JSON and update the page.

188
00:11:05,955 --> 00:11:09,655
Let's compare tabular format
side by side to make it more

189
00:11:10,175 --> 00:11:12,635
understand like a navigation.

190
00:11:13,075 --> 00:11:17,555
in multi page application, each
click lead to new page load causing

191
00:11:17,555 --> 00:11:19,505
slower transition and higher latency.

192
00:11:20,005 --> 00:11:24,095
In single page application, handle
navigation inside the browser fetching

193
00:11:24,265 --> 00:11:28,505
only the required data so the user
experience fast and seamless transition.

194
00:11:29,205 --> 00:11:30,255
Server request.

195
00:11:30,835 --> 00:11:34,705
Multi page application sends a new request
to the server for every interaction.

196
00:11:35,245 --> 00:11:39,695
While in single page application, only
load the full page once, then make

197
00:11:39,695 --> 00:11:41,585
subsequent data request as needed.

198
00:11:42,330 --> 00:11:45,030
This reduces server load
and bandwidth usage.

199
00:11:45,530 --> 00:11:46,520
User experience.

200
00:11:46,710 --> 00:11:51,100
In multi page application, can
feel sluggish as users wait

201
00:11:51,100 --> 00:11:53,350
for entire page to reload.

202
00:11:53,710 --> 00:11:58,250
In SPA, on the other hand, offer
a more app like feel, where

203
00:11:58,250 --> 00:11:59,730
interactions feel immediately.

204
00:12:00,230 --> 00:12:03,220
Performance and, in multi page
applications can be slower

205
00:12:03,270 --> 00:12:06,320
because each time you click
something, the whole page reloads.

206
00:12:06,960 --> 00:12:10,340
which puts more work on the
server and takes longer for users.

207
00:12:11,200 --> 00:12:16,140
SVO only loads what's needed after
the first load, making them faster

208
00:12:16,230 --> 00:12:18,000
and reducing the strain on the server.

209
00:12:18,590 --> 00:12:23,040
Coming to SVO perspective, in traditional
multi page applications are naturally

210
00:12:23,190 --> 00:12:28,340
more SEO friendly, because each page
has its own distinct URL and content.

211
00:12:28,750 --> 00:12:30,490
The search engines can easily crawl.

212
00:12:30,900 --> 00:12:34,960
SBA requires additional techniques like
server side rendering or dynamic rendering

213
00:12:35,410 --> 00:12:36,740
to make their content searchable.

214
00:12:37,240 --> 00:12:38,500
Development complexity.

215
00:12:39,000 --> 00:12:43,140
Multi page applications are more often
simpler to develop since they rely on

216
00:12:43,170 --> 00:12:44,800
established server side frameworks.

217
00:12:45,300 --> 00:12:49,850
SBAs introduce more complexity as they
require mastering JavaScript frameworks.

218
00:12:50,760 --> 00:12:52,470
client side routing and
handling dynamic data.

219
00:12:53,350 --> 00:12:57,260
Coming to caching, multi page
applications use simple caching

220
00:12:57,630 --> 00:13:02,290
where entire page or static content
can be saved and reused easily.

221
00:13:02,890 --> 00:13:06,500
Single page applications like however
need more advanced caching methods.

222
00:13:07,195 --> 00:13:11,255
like serving workers because they
load data dynamically, making

223
00:13:11,255 --> 00:13:12,815
caching a bit more complicated.

224
00:13:13,315 --> 00:13:16,335
Coming to best use cases, as I
mentioned, multi page applications

225
00:13:16,335 --> 00:13:20,665
work best for websites with a lot
of content like blogs or news sites.

226
00:13:21,035 --> 00:13:24,465
SPS are perfect for interactive
apps like social networks or online

227
00:13:24,465 --> 00:13:28,815
stores, when users expect real time
updates and a smooth experience.

228
00:13:29,315 --> 00:13:32,555
Let's talk about how we can integrate
in, Single page application in

229
00:13:32,555 --> 00:13:37,685
AEM like a client side rendering
SPS in AEM use modern JavaScript

230
00:13:37,685 --> 00:13:38,875
frameworks like React or Vue.

231
00:13:38,875 --> 00:13:42,035
js to handle rendering the browser.

232
00:13:42,565 --> 00:13:43,475
Edible templates.

233
00:13:43,805 --> 00:13:48,265
Even though single page application
or JavaScript based AEM allows content

234
00:13:48,265 --> 00:13:53,285
author to still create and edit
pages easily integrated authoring

235
00:13:53,285 --> 00:13:58,945
experience in AEM content authors can
edit single page application content

236
00:13:58,965 --> 00:14:03,465
dynamically seeing the changes as
they make them without needing coding

237
00:14:03,465 --> 00:14:08,565
knowledge like in react based single
page application integrated with AEM.

238
00:14:08,925 --> 00:14:14,095
Content authors can add a new sections or
images in real time with the JavaScript

239
00:14:14,105 --> 00:14:16,455
handles the page updates instantly.

240
00:14:16,955 --> 00:14:19,625
Current issues after the SPA
implementation, even after integrating

241
00:14:19,705 --> 00:14:26,055
AEM, we have some issues to talk
about, like SEO optimization.

242
00:14:26,545 --> 00:14:31,105
By default, heavily on client side
rendering, which can cause search

243
00:14:31,105 --> 00:14:34,905
engines to struggle with indexing
dynamically generated content,

244
00:14:35,165 --> 00:14:37,075
leading to poor SEO performance.

245
00:14:37,675 --> 00:14:42,015
Debugging complexities, SPS are heavily
dependent on JavaScript, making them

246
00:14:42,015 --> 00:14:44,755
harder to debug compared to standard.

247
00:14:45,185 --> 00:14:46,235
traditional application.

248
00:14:47,075 --> 00:14:50,985
And as I mentioned that caching
difficulties SPA fetch data

249
00:14:50,985 --> 00:14:55,385
dynamically and this can be tricky to
implement proper caching strategies.

250
00:14:55,845 --> 00:14:57,045
Compatibility issues.

251
00:14:57,375 --> 00:15:01,095
Some older AEM components might
not work as smoothly in SPA.

252
00:15:02,005 --> 00:15:04,365
Require development to
create custom solutions.

253
00:15:04,875 --> 00:15:06,325
Content authoring experience.

254
00:15:06,715 --> 00:15:10,025
Initially, content authors faced
challenges managing content in

255
00:15:10,025 --> 00:15:13,835
SPS because traditionally visual
editing tools and in context

256
00:15:13,835 --> 00:15:17,205
editings were difficult to implement
in client rendering applications.

257
00:15:17,705 --> 00:15:21,445
for example, with an SPA might offer
a sleek experience troubleshooting

258
00:15:21,485 --> 00:15:23,125
a bug related to dynamic data.

259
00:15:23,495 --> 00:15:25,055
Loading can be much more complex.

260
00:15:25,505 --> 00:15:27,135
And compared to traditional website.

261
00:15:27,635 --> 00:15:30,675
Let's talk about how we
can overcome these issues.

262
00:15:31,225 --> 00:15:34,755
Like a SCVO solution like
a server side rendering.

263
00:15:35,275 --> 00:15:40,195
Pre render pages on the server to help
search engines index Content effect

264
00:15:40,565 --> 00:15:45,705
efficiently, dynamic rendering use
tools like a Google dynamic rendering

265
00:15:45,705 --> 00:15:50,055
to show pre rendered content to
search engines while still delivering

266
00:15:50,055 --> 00:15:53,985
an SPI experience to user debugging
techniques like a source map.

267
00:15:53,995 --> 00:15:58,825
These map compile JavaScript
code back to the original source

268
00:15:58,865 --> 00:16:00,565
code and make it easier to debug.

269
00:16:01,195 --> 00:16:02,475
Like a caching strategies.

270
00:16:02,485 --> 00:16:06,745
These allow us to cache dynamic
content more effectively

271
00:16:06,755 --> 00:16:08,465
enabling offline capabilities.

272
00:16:08,965 --> 00:16:10,345
And, API caching.

273
00:16:10,925 --> 00:16:14,935
So frequently access data can be
cast to minimize the load time.

274
00:16:14,935 --> 00:16:21,125
Also coming to compatibility, custom
components, build components specifically

275
00:16:21,125 --> 00:16:27,125
for SBA to ensure smooth functionality,
hybrid approach, use a mix of SBA and

276
00:16:27,125 --> 00:16:31,115
traditional multi page application
where necessary to maintain flexibility,

277
00:16:31,615 --> 00:16:33,015
content, authoring, underwriting.

278
00:16:33,015 --> 00:16:36,715
AEM SBA editor is designed
to overcome this, but it

279
00:16:36,805 --> 00:16:38,335
required proper configuration.

280
00:16:38,700 --> 00:16:41,870
ensure that SPA editor is
correctly integrated to content

281
00:16:41,870 --> 00:16:46,640
authors can use in, in context
editing and preview functionality.

282
00:16:47,410 --> 00:16:50,870
This requires a close coordination
between front end developers

283
00:16:50,870 --> 00:16:52,360
and the AEM implementation team.

284
00:16:52,860 --> 00:16:56,910
Now let's talk about a case study
like a large e commerce site

285
00:16:57,100 --> 00:16:59,390
faced issues with slow page loads.

286
00:16:59,770 --> 00:17:02,880
Taking up to three seconds
after implementing an SPA

287
00:17:03,690 --> 00:17:05,250
load time drop to one second.

288
00:17:05,550 --> 00:17:08,890
Additionally, server,
request were reduced by 20%.

289
00:17:09,390 --> 00:17:11,870
improving overall performance
and user experience.

290
00:17:12,370 --> 00:17:16,060
Let's see the, let's see, revisit
the advantage and everything what we

291
00:17:16,060 --> 00:17:18,170
discussed so far, like in conclusion.

292
00:17:18,550 --> 00:17:24,590
So SPA role in modern web development,
like a performance boost, a single

293
00:17:24,590 --> 00:17:28,040
page application offers faster load
time and smoother interactions,

294
00:17:28,390 --> 00:17:32,930
enhanced user experience, fluid
navigation and real time updates keep

295
00:17:32,930 --> 00:17:35,805
user engaged, Developer flexibility.

296
00:17:35,805 --> 00:17:40,955
JavaScript frameworks give developers
the tools to build robust applications.

297
00:17:41,405 --> 00:17:42,365
Competitive edge.

298
00:17:42,635 --> 00:17:45,385
Businesses that use single page
applications deliver content

299
00:17:45,385 --> 00:17:48,725
faster, ensuring they stay
ahead in the digital landscape.

300
00:17:49,605 --> 00:17:54,345
As the AEM continues to evolve, single
page applications will become even more

301
00:17:54,385 --> 00:17:59,555
integrated, helping business creating
faster and more dynamic, and, giving like

302
00:17:59,565 --> 00:18:01,895
a very smooth and, great web experience.

303
00:18:02,530 --> 00:18:07,110
By addressing challenges like SEO and
caching, SPA can offer you a future proof

304
00:18:07,130 --> 00:18:09,520
solution for modern web applications.

305
00:18:10,020 --> 00:18:10,550
Thank you.

306
00:18:10,910 --> 00:18:12,040
I hope you enjoyed the talk.

