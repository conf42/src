1
00:00:00,500 --> 00:00:05,150
Hello everyone and welcome
to Con 42 Observability 2025.

2
00:00:05,490 --> 00:00:08,790
My name is Ashwin and I'm
joined by my colleague Devan.

3
00:00:09,360 --> 00:00:12,809
I'm a senior engineering manager
at Adobe, and Devan is a product

4
00:00:12,809 --> 00:00:14,700
manager in our payments organization.

5
00:00:15,120 --> 00:00:18,300
Together we have spent years
building and scaling, high volume

6
00:00:18,540 --> 00:00:20,100
commerce and payments platform.

7
00:00:20,759 --> 00:00:23,610
Today's stock is titled
beyond the Dashboard Building

8
00:00:23,610 --> 00:00:26,940
End-to-End, observability for
Commerce and Payment Systems.

9
00:00:27,655 --> 00:00:28,975
I want to start with a question.

10
00:00:29,245 --> 00:00:34,075
How many of you have experienced that
sinking feeling when your revenue drops,

11
00:00:34,255 --> 00:00:36,265
but all your dashboards show green?

12
00:00:36,970 --> 00:00:40,660
Your servers are up, your APIs
are responding, but somehow

13
00:00:40,690 --> 00:00:42,190
there is a loss in your business.

14
00:00:42,760 --> 00:00:45,370
That's exactly the problem
we are here to solve today.

15
00:00:45,699 --> 00:00:49,840
During the course of this talk, we'll
talk to you on a journey from reactive

16
00:00:49,840 --> 00:00:53,920
monitoring to proactive business
observability, sharing real world

17
00:00:53,920 --> 00:00:58,160
examples, practical frameworks and
lessons learned from managing commerce

18
00:00:58,160 --> 00:00:59,860
and payments platforms at Adobe.

19
00:01:00,460 --> 00:01:01,090
Let's dive in.

20
00:01:01,340 --> 00:01:03,980
Let me start by putting this
challenge in a perspective with

21
00:01:03,980 --> 00:01:05,420
some numbers that might shock you.

22
00:01:05,810 --> 00:01:07,670
First, let's talk about downtime costs.

23
00:01:07,670 --> 00:01:12,200
Amazon loses $220,000 per
minute during downtime.

24
00:01:12,200 --> 00:01:14,120
It's in, its, that's not a typo.

25
00:01:14,390 --> 00:01:20,420
$220,000 Every single minute test systems
are down, but it's not just about downtime

26
00:01:20,720 --> 00:01:22,960
during peak traffic periods numbers.

27
00:01:23,025 --> 00:01:28,695
Get even most staggering Shopify processes
around 4.6 million in orders per minute

28
00:01:28,815 --> 00:01:30,615
during Black Friday peak traffic.

29
00:01:31,245 --> 00:01:33,345
Imagine the pressure on
their engineering teams.

30
00:01:33,765 --> 00:01:37,635
Every second of degraded
performance could cost millions.

31
00:01:38,515 --> 00:01:41,515
And here's perhaps the
most sobering statistics.

32
00:01:41,575 --> 00:01:44,605
62% of customers abandon their purchase.

33
00:01:44,960 --> 00:01:47,840
After just one failed payment attempt.

34
00:01:48,350 --> 00:01:50,720
They don't retry, they don't call support.

35
00:01:51,020 --> 00:01:54,440
They just leave, and many
of them never come back.

36
00:01:54,940 --> 00:01:58,820
This brings us to the
key insight in commerce.

37
00:01:58,850 --> 00:02:02,570
Observability isn't just about
uptime, it's about survival.

38
00:02:02,930 --> 00:02:06,080
When your payment systems fail,
you're not just dealing with an

39
00:02:06,080 --> 00:02:09,830
engineering problem, you're dealing
with an existential business threat.

40
00:02:10,715 --> 00:02:12,845
These aren't theoretical numbers.

41
00:02:12,845 --> 00:02:15,335
Every minute your systems are degraded.

42
00:02:15,395 --> 00:02:18,245
Every failure failed
payment that goes unnoticed.

43
00:02:18,635 --> 00:02:22,175
Every customer who hits an error,
that's direct revenue loss.

44
00:02:22,655 --> 00:02:26,675
And unlike other types of applications
in commerce, there's no such

45
00:02:26,675 --> 00:02:29,135
thing as acceptable downtime.

46
00:02:29,635 --> 00:02:32,155
Before we dive deep, let
me quickly establish our

47
00:02:32,155 --> 00:02:34,165
credentials at Adobe Commerce.

48
00:02:34,195 --> 00:02:37,405
We are scaling platforms that handle
millions of daily transactions.

49
00:02:37,685 --> 00:02:40,025
We have designed end-to-end
observability architecture

50
00:02:40,025 --> 00:02:42,175
for complex commerce platform.

51
00:02:42,630 --> 00:02:46,710
Most importantly, we have survived
the real world Battle Scars.

52
00:02:47,070 --> 00:02:52,090
Black Friday, cyber Monday, chaos
meeting payment mandates like three Ds.

53
00:02:52,150 --> 00:02:57,750
Many geospecific mandates where every
second counts and failure isn't an option.

54
00:02:58,250 --> 00:03:01,100
We are here to share what we
have learned in the trenches.

55
00:03:01,350 --> 00:03:04,710
Now let's talk about the fundamental
shift we need to make in how

56
00:03:04,710 --> 00:03:05,940
we think about observability.

57
00:03:06,440 --> 00:03:10,490
Traditional monitoring focuses
on basic service health checks.

58
00:03:11,150 --> 00:03:14,660
It answers simple uptime
questions like is my service app.

59
00:03:15,320 --> 00:03:19,640
It looks at the CPU and memory usage
response time metrics and HDP error

60
00:03:19,640 --> 00:03:22,310
rates like four XX codes, five x exports.

61
00:03:22,940 --> 00:03:27,080
This is the foundation, but in
commerce it's not nearly enough.

62
00:03:27,570 --> 00:03:30,900
Commerce Observability takes a
completely different approach.

63
00:03:31,200 --> 00:03:34,350
It tracks the complete customer
journey and business outcomes.

64
00:03:34,560 --> 00:03:38,760
It monitors the end-to-end experience
from customer's perspective instead

65
00:03:38,760 --> 00:03:40,230
of asking, is my service up?

66
00:03:40,695 --> 00:03:45,015
Commerce Observability asks the question
that actually matters to your business.

67
00:03:45,255 --> 00:03:49,305
Can customers complete purchase
because your checkout API might be

68
00:03:49,305 --> 00:03:53,265
responding with 200 status codes,
but if there's a bug in the payment

69
00:03:53,265 --> 00:03:55,185
flow, customers still can't buy.

70
00:03:55,950 --> 00:03:59,160
Is the fraud detection,
blocking good customers?

71
00:03:59,790 --> 00:04:03,720
Your fraud system might be working
perfectly from a technical standpoint

72
00:04:04,089 --> 00:04:07,390
but if it's too aggressive, you
are losing legitimate revenue.

73
00:04:08,320 --> 00:04:10,930
What's the actual customer experience?

74
00:04:11,229 --> 00:04:14,740
Maybe your API is so fast,
but the front end is broken.

75
00:04:15,039 --> 00:04:16,930
Our payment forms aren't loading.

76
00:04:17,274 --> 00:04:18,654
Customers are frustrated.

77
00:04:19,204 --> 00:04:22,474
Are payment failures
causing involuntary churn?

78
00:04:22,754 --> 00:04:25,964
This is particularly concerning
for a subscription business.

79
00:04:26,204 --> 00:04:30,844
Your billing system might appear
healthy, but customers could be churning

80
00:04:31,204 --> 00:04:32,854
silently due to failed payments.

81
00:04:33,064 --> 00:04:34,744
We'll talk about this
a little later as well.

82
00:04:35,474 --> 00:04:37,964
And here's one that's often overlooked.

83
00:04:38,354 --> 00:04:40,994
Are customers able to edit
their wallets correctly?

84
00:04:41,574 --> 00:04:42,294
Sometimes.

85
00:04:42,549 --> 00:04:46,449
Something as simple as updating
payment information can become

86
00:04:46,509 --> 00:04:48,519
a revenue killer if it's broken.

87
00:04:49,019 --> 00:04:52,019
Now, let me show you what full
funnel observability actually

88
00:04:52,019 --> 00:04:53,159
looks like in practice.

89
00:04:53,849 --> 00:04:56,909
This is the complete customer
transaction journey, and we need

90
00:04:56,909 --> 00:04:58,859
observability at every single step.

91
00:04:59,669 --> 00:05:02,619
Let let's walk through the journey
from a customer's perspective.

92
00:05:02,679 --> 00:05:04,619
It starts with product discovery.

93
00:05:04,919 --> 00:05:07,709
When a customer lands on your
site and starts browsing.

94
00:05:08,209 --> 00:05:11,689
Here we are monitoring page, load
times, and search performance.

95
00:05:11,929 --> 00:05:15,739
If your product pages are slow
or search isn't working, we are,

96
00:05:15,739 --> 00:05:19,339
you are losing customers before
they even find what they want.

97
00:05:19,729 --> 00:05:21,109
Next is car tradition.

98
00:05:21,499 --> 00:05:24,374
The customer decides they want
something and adds it to the cart.

99
00:05:25,144 --> 00:05:29,314
We monitor API response time here
because if the add to card button

100
00:05:29,734 --> 00:05:33,214
doesn't respond quickly, customer
will assume it's broken and leave.

101
00:05:33,934 --> 00:05:35,914
Then we hit the checkout process.

102
00:05:36,574 --> 00:05:39,964
Here we are monitoring form validation,
and payment method selection.

103
00:05:40,714 --> 00:05:44,224
Every friction point here
directly impacts conversion.

104
00:05:44,554 --> 00:05:49,504
If customers can't easily select their
payment methods, or if form validation

105
00:05:49,504 --> 00:05:51,724
is confusing, they'll abandon.

106
00:05:52,224 --> 00:05:55,604
Authorization and fraud is
where the complexity increases.

107
00:05:56,084 --> 00:05:59,204
Here there are many data points
that will have to be monitored.

108
00:05:59,664 --> 00:06:03,504
We are monitoring risk engine
decisions and payment approval rates.

109
00:06:03,874 --> 00:06:09,244
Your fraud detection needs to be smart
enough to block bad actors while keeping

110
00:06:09,244 --> 00:06:11,104
it smooth for the good customers.

111
00:06:11,139 --> 00:06:14,739
And the balance here directly
impacts your revenue.

112
00:06:15,519 --> 00:06:18,669
Finally, order fulfillment,
confirmation and order processing

113
00:06:18,849 --> 00:06:20,559
even after payment succeeds.

114
00:06:20,619 --> 00:06:24,689
If customers don't get proper
confirmation or if there are issues

115
00:06:24,689 --> 00:06:28,769
with auto processing, you'll get
chargebacks and customer support tickets.

116
00:06:29,739 --> 00:06:35,109
The key insight is that each touch point
represents critical revenue impact.

117
00:06:35,469 --> 00:06:39,099
A failure at any step doesn't
just affect that step.

118
00:06:39,399 --> 00:06:42,069
It affects your entire conversion funnel.

119
00:06:42,699 --> 00:06:46,059
This is why we need observability
across the complete journey, not

120
00:06:46,209 --> 00:06:48,249
just at individual service endpoint.

121
00:06:48,749 --> 00:06:52,559
Now let's look at this from a subscription
business perspective, because the

122
00:06:52,889 --> 00:06:55,529
observability challenges are quite
different when you're dealing with

123
00:06:55,529 --> 00:06:57,419
recurring revenue and subscriptions.

124
00:06:57,969 --> 00:07:01,089
There are different data points and
metrics that need to be observed.

125
00:07:01,529 --> 00:07:04,974
This is a typical subscription
lifecycle journey, and every

126
00:07:05,004 --> 00:07:08,939
step is a potential failure point
that impacts ERR and retention.

127
00:07:09,499 --> 00:07:11,329
Unlike one time transactions.

128
00:07:11,629 --> 00:07:14,719
Subscription businesses have to
worry about the entire customer

129
00:07:14,719 --> 00:07:16,609
journey, not just a single purchase.

130
00:07:16,939 --> 00:07:18,949
Let's walk around this cycle.

131
00:07:19,409 --> 00:07:21,349
It starts with trial signup.

132
00:07:21,589 --> 00:07:25,409
We are monitoring conversion metrics
and onboarding friction points.

133
00:07:25,709 --> 00:07:29,759
If users can't easily sign up
for trials or if the onboarding

134
00:07:29,759 --> 00:07:33,779
process is confusing, you are losing
potential subscribers before they

135
00:07:33,779 --> 00:07:35,699
even experience your product value.

136
00:07:36,379 --> 00:07:38,809
Moving to free to paid
conversion, this is critical.

137
00:07:39,299 --> 00:07:43,209
We monitor payment, set up success
rates and method preferences.

138
00:07:43,709 --> 00:07:47,759
Many potential customers drop off
here, not because they don't want to

139
00:07:47,759 --> 00:07:52,649
pay, but because the payment method
or the payment setup process is

140
00:07:52,649 --> 00:07:56,699
too complicated or doesn't support
their preferred payment method.

141
00:07:57,689 --> 00:08:00,599
Here it is critical to measure
payment method usage rates.

142
00:08:00,914 --> 00:08:05,594
And also when a new payment methods,
for example, cloud Now or LPMs

143
00:08:05,594 --> 00:08:07,034
are launched, how they're adopted.

144
00:08:07,754 --> 00:08:09,764
Then we have the billing cycle.

145
00:08:10,064 --> 00:08:13,334
This is where many subscription
businesses get caught off guard.

146
00:08:13,794 --> 00:08:17,064
We monitor recurring billing
events and schedule accuracy.

147
00:08:17,484 --> 00:08:21,144
A missed billing event, for
example, or an incorrect scheduling.

148
00:08:21,354 --> 00:08:24,504
Can cause revenue delays
or customer confusion.

149
00:08:24,964 --> 00:08:29,434
For example, if our billing system
is not able to charge the user for a

150
00:08:29,434 --> 00:08:34,354
month, entitled internet system might
remove access after a gray period,

151
00:08:34,414 --> 00:08:36,334
even though the user is at no fault.

152
00:08:37,174 --> 00:08:41,434
Payment processing is where the technical
complexity really starts showing up.

153
00:08:41,714 --> 00:08:45,254
We are monitoring multiple different
gateway performances and authorization

154
00:08:45,254 --> 00:08:49,164
rates in subscription payment failures
are particularly damaging because

155
00:08:49,164 --> 00:08:51,384
they can cause involuntary churn.

156
00:08:51,864 --> 00:08:53,304
Customers who want to stay.

157
00:08:53,724 --> 00:08:57,504
I can't because their
payment failed renewal.

158
00:08:57,684 --> 00:09:00,684
The next step here is the renewal
step, which is at the moment of

159
00:09:00,804 --> 00:09:03,924
truth for retention rates and
involuntary return prevention.

160
00:09:04,314 --> 00:09:08,604
This is where silent failures
can be devastating, but this

161
00:09:08,604 --> 00:09:11,634
is also an opportunity for us
to ride size subscriptions.

162
00:09:11,974 --> 00:09:17,324
Maybe a customer needs to be downgraded
so that their their plan is right sized.

163
00:09:17,849 --> 00:09:19,469
Rather than churn out completely.

164
00:09:19,919 --> 00:09:24,899
So without proper observability into their
usage patterns and payment behavior, we

165
00:09:24,899 --> 00:09:26,939
will miss these retention opportunities.

166
00:09:27,479 --> 00:09:29,279
Finally, usage and expansion.

167
00:09:29,689 --> 00:09:33,859
We monitor feature adoption and
upgrade revenue opportunities here.

168
00:09:34,619 --> 00:09:39,849
Understanding how customers use our
product helps us identify expansion

169
00:09:39,849 --> 00:09:41,574
opportunities and even preventing churn.

170
00:09:42,114 --> 00:09:47,124
The key insight here is that subscription
observability requires monitoring

171
00:09:47,454 --> 00:09:52,074
through the entire customer lifetime,
not just individual transactions.

172
00:09:52,464 --> 00:09:56,604
Each step in the cycle compounds
over time, making the impact of

173
00:09:56,604 --> 00:10:00,804
failures much more significant than
in traditional e-commerce business.

174
00:10:01,054 --> 00:10:04,849
Now let's talk about how the traditional
three pillars of observability.

175
00:10:05,479 --> 00:10:09,839
That's metrics, logs, and traces
will look when you're dealing with

176
00:10:09,869 --> 00:10:11,669
commerce and subscription businesses.

177
00:10:12,389 --> 00:10:13,979
First pillar, which is metrics.

178
00:10:14,459 --> 00:10:18,859
So beyond system health instead of just
tracking CPU and memory usage, we need to

179
00:10:18,859 --> 00:10:21,169
track revenue flow and business outcomes.

180
00:10:21,274 --> 00:10:24,494
We will have to focus on
customer-centric measurements.

181
00:10:25,034 --> 00:10:28,664
This means revenue flow metrics
like a RR conversion rates.

182
00:10:28,979 --> 00:10:32,729
These tell you about your business
health, not just your system.

183
00:10:32,729 --> 00:10:35,549
Health payment success rate by processors.

184
00:10:35,619 --> 00:10:41,229
Because a 99% success rate with one
processor might be 85 with another.

185
00:10:41,869 --> 00:10:44,269
And that difference is
millions in revenue.

186
00:10:44,889 --> 00:10:49,034
And then customer lifecycle metrics
like churn and LTV, these help you

187
00:10:49,034 --> 00:10:52,874
understand the long term impact of
the technical decisions that you make.

188
00:10:53,374 --> 00:10:55,384
And time to value percentage.

189
00:10:55,414 --> 00:10:59,174
How long does it take customers
to get value from your

190
00:10:59,174 --> 00:11:00,764
product after they sign up?

191
00:11:01,264 --> 00:11:02,194
Alright, second pillar.

192
00:11:02,255 --> 00:11:04,355
Logs with business context.

193
00:11:04,895 --> 00:11:06,965
Traditional logs tell you what happened.

194
00:11:06,965 --> 00:11:11,449
Technically, I. Commerce logs need
to capture decision, reasoning

195
00:11:11,509 --> 00:11:13,310
and customer journey context.

196
00:11:13,640 --> 00:11:17,359
They need to link technical
events to business impact.

197
00:11:17,839 --> 00:11:22,459
This includes payment processor
responses, not just payment failed, but

198
00:11:22,459 --> 00:11:27,630
why it failed and what that means for
specific customer journey breadcrumbs.

199
00:11:27,689 --> 00:11:30,789
That is basically understanding
the full path a customer took

200
00:11:30,819 --> 00:11:32,379
before they encounter an issue.

201
00:11:33,040 --> 00:11:35,020
Then business decision reasoning.

202
00:11:35,290 --> 00:11:38,110
Why did the fraud engine
block this transaction?

203
00:11:38,500 --> 00:11:43,630
What data points led to the decision and
the revenue weighted error classification?

204
00:11:44,200 --> 00:11:45,790
Not all errors are equal.

205
00:11:45,910 --> 00:11:48,130
Some cost you more money than others.

206
00:11:48,490 --> 00:11:50,140
Let's look at the third pillar.

207
00:11:50,690 --> 00:11:54,430
This traces across, revenue
systems we need to follow.

208
00:11:54,430 --> 00:11:57,790
Complete transaction flows across
all systems that affect revenue.

209
00:11:58,360 --> 00:12:02,160
This isn't just about following a
request through your microservices.

210
00:12:02,470 --> 00:12:06,040
It's about mapping dependencies
that affect your business.

211
00:12:06,880 --> 00:12:09,700
This means end-to-end transaction
flows from customers, click.

212
00:12:10,200 --> 00:12:13,570
To the money in the bank
payment gateway dependencies.

213
00:12:13,570 --> 00:12:16,210
Understanding how third party
services impact your revenue

214
00:12:16,210 --> 00:12:17,410
is also quite important.

215
00:12:17,830 --> 00:12:19,120
Third party services.

216
00:12:19,200 --> 00:12:23,610
Let's say when add in or PayPal
has issues, how does that affect

217
00:12:23,610 --> 00:12:25,140
your business and your customers?

218
00:12:25,640 --> 00:12:29,210
And now talking about subscription
lifecycle traffic tracking, we

219
00:12:29,210 --> 00:12:32,180
will have to follow the customer's
entire journey, like we looked

220
00:12:32,230 --> 00:12:36,570
looked at it a few slides up before
from trial to renewal to expansion.

221
00:12:36,990 --> 00:12:40,770
The key insight is that Commerce
Observability requests all three

222
00:12:40,770 --> 00:12:45,300
pillars to work together to give you a
complete picture of both your technical

223
00:12:45,300 --> 00:12:47,190
systems and your business outcomes.

224
00:12:47,440 --> 00:12:51,100
All the slides about bring us
to this fundamental mind shift.

225
00:12:51,805 --> 00:12:57,655
From reactive monitoring to proactive
observability, reactive monitoring wage

226
00:12:57,655 --> 00:13:03,485
for problems to surface you'll alert when
services down, customer complaints have

227
00:13:03,535 --> 00:13:06,185
gone up and then revenue is already lost.

228
00:13:06,740 --> 00:13:11,300
But proactive observability detects
patterns before they impact customers.

229
00:13:11,630 --> 00:13:16,720
You can detect degradation patterns
predict failure cascades implement

230
00:13:16,720 --> 00:13:20,050
automated remediation and operate
in revenue protection mode.

231
00:13:20,410 --> 00:13:21,160
Here's the difference.

232
00:13:21,220 --> 00:13:25,580
Instead of waiting for customers
to complain about failed payments a

233
00:13:25,580 --> 00:13:30,620
proactive observability can detect
a 2% increase in payment failures.

234
00:13:31,160 --> 00:13:35,060
And this can predict that this
could become a 20% involuntary term.

235
00:13:35,520 --> 00:13:41,160
This will give us time to fix it before it
starts impacting our business In commerce,

236
00:13:41,700 --> 00:13:43,950
reactive means revenues already lost.

237
00:13:44,280 --> 00:13:46,680
Proactive means we are
protecting the revenue.

238
00:13:47,180 --> 00:13:48,855
To drive this further home.

239
00:13:49,155 --> 00:13:54,455
Let's look at a real world example of why
this proactive mindset is so critical.

240
00:13:55,095 --> 00:13:58,875
This is about what we call a
silent killer of subscription

241
00:13:58,875 --> 00:14:00,435
business, involuntary churn.

242
00:14:01,320 --> 00:14:02,520
Let's start with the problem.

243
00:14:02,940 --> 00:14:07,680
20 to 40% of total churn in a
subscription business is involuntary.

244
00:14:08,260 --> 00:14:13,690
These are failed payments that silently
destroy subscriber basis without warning.

245
00:14:14,110 --> 00:14:14,710
Think about that.

246
00:14:14,710 --> 00:14:18,250
Nearly half of your customer
losses might not be because of

247
00:14:18,250 --> 00:14:22,000
customers wanting to leave, but
because of payment system failures.

248
00:14:22,560 --> 00:14:28,070
The re renewal failure rate is at a
staggering five to 18% of subscriptions

249
00:14:28,460 --> 00:14:30,290
failing at each billing cycle.

250
00:14:30,630 --> 00:14:35,980
That means one in eight of your customers
might not renew successfully, not

251
00:14:35,980 --> 00:14:39,670
because they don't want your product, but
because their payment didn't go through.

252
00:14:39,670 --> 00:14:42,220
And now let's look at this impact.

253
00:14:42,610 --> 00:14:47,200
On a global scale, so this would
be around 118 billion lost globally

254
00:14:47,200 --> 00:14:49,270
in 2020 due to payment failures.

255
00:14:49,960 --> 00:14:54,250
This creates massive revenue
hemorrhage across entire industries.

256
00:14:54,490 --> 00:14:57,250
That's not just a technical
problem, that's an economic crisis.

257
00:14:57,905 --> 00:14:59,375
Here's the observability challenge.

258
00:14:59,555 --> 00:15:02,495
Traditional monitoring
creates a blind spot.

259
00:15:02,825 --> 00:15:06,485
Your systems will show healthy
when customers quietly, oil

260
00:15:06,545 --> 00:15:08,075
customers will quietly disappear.

261
00:15:08,435 --> 00:15:10,415
Your billing systems report success.

262
00:15:10,685 --> 00:15:13,505
Your APIs are responding, your
databases are performing well,

263
00:15:13,775 --> 00:15:15,515
but customers are churning silent.

264
00:15:16,205 --> 00:15:19,325
The most critical issue
is zero time visibility.

265
00:15:20,145 --> 00:15:21,465
Zero real time visibility.

266
00:15:22,375 --> 00:15:27,055
Most businesses discover churn
after customers have already gone.

267
00:15:27,475 --> 00:15:31,345
By the time you realize there's a
problem, you've lost not just revenue,

268
00:15:31,495 --> 00:15:35,185
but customer relationships that
took months or even years to build.

269
00:15:35,755 --> 00:15:39,310
This is a perfect example of
why traditional monitoring

270
00:15:39,310 --> 00:15:40,430
will fail in commerce.

271
00:15:40,960 --> 00:15:45,160
Our subscription businesses, all
your technical metrics can be green.

272
00:15:45,400 --> 00:15:47,200
While your business is bleeding money.

273
00:15:47,590 --> 00:15:51,490
You need observability that focuses on
business outcome, not just system health.

274
00:15:51,740 --> 00:15:54,870
This is why we need a proactive
approach like we discussed earlier

275
00:15:55,320 --> 00:16:01,210
that can detect payment issues sooner
so that more customers can be saved

276
00:16:01,540 --> 00:16:03,610
and more revenue can be protected.

277
00:16:04,110 --> 00:16:07,110
This brings us to one of the
most challenging aspects of

278
00:16:07,110 --> 00:16:10,800
commerce observability, which is
dealing with unknown unknowns.

279
00:16:11,640 --> 00:16:14,790
These are problems you
don't even know to look for.

280
00:16:15,705 --> 00:16:18,495
Let me contrast that
with two, two approaches.

281
00:16:19,005 --> 00:16:21,015
The traditional approach is reactive.

282
00:16:21,055 --> 00:16:27,995
Teams define known failure modes upfront
and creates alerts for expected problems.

283
00:16:28,565 --> 00:16:30,575
This relies on reactive monitoring.

284
00:16:30,575 --> 00:16:34,715
While alert triggers after
impact, it'll contain blind spots

285
00:16:34,715 --> 00:16:37,030
for unexpected or novel issues.

286
00:16:37,810 --> 00:16:42,330
Investigations are typically
manual and slow, and it focuses on

287
00:16:42,390 --> 00:16:43,860
infrastructure or service health.

288
00:16:44,550 --> 00:16:47,400
Traditional monitoring will
answer questions like, are

289
00:16:47,400 --> 00:16:48,810
all services returning 200?

290
00:16:48,810 --> 00:16:49,260
Okay?

291
00:16:49,260 --> 00:16:50,970
Is the memory usage within limits?

292
00:16:51,420 --> 00:16:52,260
But here's the problem.

293
00:16:52,560 --> 00:16:55,440
This approach, miss misses the
business critical issues that

294
00:16:55,440 --> 00:16:56,190
you never thought to monitor.

295
00:16:56,440 --> 00:16:59,730
Unknown detection takes a
completely different approach.

296
00:17:00,060 --> 00:17:04,320
Proactive intelligent systems
surface insights from patterns

297
00:17:04,320 --> 00:17:05,640
you didn't know to look for.

298
00:17:06,060 --> 00:17:09,600
This includes anomaly detection on
both business and system metrics,

299
00:17:09,600 --> 00:17:15,330
not just CPU spikes, but unexpected
drop in conversion rates are unusual

300
00:17:15,360 --> 00:17:17,275
payment patterns, for example.

301
00:17:17,985 --> 00:17:22,215
Previous in France may be
failing for certain card types.

302
00:17:22,875 --> 00:17:25,965
Your systems are still healthy,
as this might be a very small dip

303
00:17:25,965 --> 00:17:28,635
for a small subset of your users.

304
00:17:29,155 --> 00:17:33,295
But in the overall revenue scheme,
this is still a revenue loss.

305
00:17:33,640 --> 00:17:37,750
Which goes unnoticed and could
have been easily avoided if you're

306
00:17:37,990 --> 00:17:40,000
looking for these unknown unknowns.

307
00:17:40,500 --> 00:17:44,710
Cross system correlation of logs, events
and telemetries will help you understand

308
00:17:44,800 --> 00:17:50,470
how issues in one system might be
causing problems in another behavioral

309
00:17:50,470 --> 00:17:54,700
pattern recognition to flag outliers like
say, detecting when customer behavior

310
00:17:54,790 --> 00:17:58,600
changes in ways that might indicate
that may, there may be some problem.

311
00:17:58,750 --> 00:18:01,540
For which reason the customer
are changing their behaviors.

312
00:18:02,040 --> 00:18:05,820
And we should also look at how to
automate root cause analysis with

313
00:18:05,820 --> 00:18:10,260
investigating while investigating
workflows system that can trace problems

314
00:18:10,260 --> 00:18:15,780
back to their source automatically
instead of asking, are services healthy?

315
00:18:16,380 --> 00:18:19,200
Unknown detection asks, why
is the conversion dropping?

316
00:18:19,200 --> 00:18:20,970
What things that we didn't expect?

317
00:18:21,420 --> 00:18:23,950
The key insight is
captured in this question.

318
00:18:24,160 --> 00:18:27,760
What we thing is happening that
we didn't think to monitor.

319
00:18:28,390 --> 00:18:32,710
In commerce, the most expensive problems
are often the ones you never saw coming.

320
00:18:33,070 --> 00:18:36,075
A payment processor starts
declining certain types of cards.

321
00:18:36,525 --> 00:18:41,345
Fraud detection rule suddenly
flags legitimate customers upfront.

322
00:18:41,345 --> 00:18:41,555
End.

323
00:18:41,765 --> 00:18:46,035
Checkout update breaks the checkout
workflow in a specific browser

324
00:18:46,365 --> 00:18:49,005
or a specific in-app experience.

325
00:18:49,605 --> 00:18:53,355
These are issues that can cost millions
before you even realize they exist.

326
00:18:53,745 --> 00:18:57,495
This is why modern commerce
observability needs to be intelligent

327
00:18:57,495 --> 00:18:59,235
and proactive, not just reactive.

328
00:18:59,735 --> 00:19:02,765
Now let's get practical with
lessons from the trenches.

329
00:19:03,245 --> 00:19:07,175
What you should do, start with the
subscriber's journey, not system

330
00:19:07,175 --> 00:19:11,915
architecture, instrument for ERR
outcomes, not just technical health.

331
00:19:12,215 --> 00:19:16,375
Create runbooks with churn impact context
so your team knows about the business.

332
00:19:16,375 --> 00:19:17,365
Impact immediately.

333
00:19:17,855 --> 00:19:21,965
And test your observability during
billing cycles when you need it the most.

334
00:19:22,520 --> 00:19:23,480
What not to do.

335
00:19:23,570 --> 00:19:24,860
Don't alert on everything.

336
00:19:24,890 --> 00:19:26,810
Focus on revenue and churn impact.

337
00:19:27,180 --> 00:19:29,550
Don't ignore payment
processor dependencies or

338
00:19:29,550 --> 00:19:30,840
other external dependencies.

339
00:19:31,260 --> 00:19:36,830
Don't forget about in-app mobile
experience metrics and don't neglect

340
00:19:36,830 --> 00:19:38,660
customer success team communication.

341
00:19:38,660 --> 00:19:40,520
They're often the first
to hear about issues.

342
00:19:40,970 --> 00:19:43,040
The key insight here
is effective commerce.

343
00:19:43,580 --> 00:19:48,080
Observability is as much about process
and communication as it is about.

344
00:19:48,340 --> 00:19:51,810
Tech technology and the stack that
we use, one of the biggest challenges

345
00:19:51,810 --> 00:19:56,580
in commerce, observability isn't
technical, it's also organizational.

346
00:19:57,060 --> 00:19:59,335
Getting everyone on the same page, I.

347
00:20:00,085 --> 00:20:03,115
The challenge is that different
teams have different priorities.

348
00:20:03,295 --> 00:20:08,335
Engineering most typically always
focuses on system uptime and performance.

349
00:20:08,395 --> 00:20:10,705
Product cares about feature
adoption and retention.

350
00:20:11,065 --> 00:20:14,425
BU and finance organizations
care about ERR churn.

351
00:20:14,995 --> 00:20:15,925
And churn reduction.

352
00:20:16,165 --> 00:20:19,255
Customer success team wants
seamless billing experience

353
00:20:19,255 --> 00:20:20,545
at a very low call volume.

354
00:20:21,445 --> 00:20:25,015
The solution here is an alignment
around shared business outcomes.

355
00:20:25,375 --> 00:20:29,155
We have to create shared dashboards
with the error context so everyone

356
00:20:29,155 --> 00:20:30,745
sees the same business metrics.

357
00:20:31,130 --> 00:20:34,820
You have to implement cross-functional
incident response for payment

358
00:20:34,820 --> 00:20:38,550
issues, not and treat, not just
treat them as engineering problems.

359
00:20:39,060 --> 00:20:43,620
We should use revenue impact scoring for
all alerts so teams understand business

360
00:20:43,620 --> 00:20:49,140
priority and hold regular business
reviews of subscription health metrics

361
00:20:49,470 --> 00:20:54,060
when everyone understands how their work
connects to revenue and customer success.

362
00:20:54,435 --> 00:20:57,615
Observability becomes a
shared responsibility, not

363
00:20:57,615 --> 00:20:59,025
just an engineering tool.

364
00:20:59,475 --> 00:21:03,345
And speaking of that product
perspective and a non-engineering

365
00:21:03,345 --> 00:21:07,355
perspective let me now hand it over
to my colleague Dave Wang, who will

366
00:21:07,355 --> 00:21:11,135
share insights on observability from
a product manager's perspective.

367
00:21:11,495 --> 00:21:12,275
Take it over everyone.

