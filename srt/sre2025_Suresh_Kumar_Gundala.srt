1
00:00:00,500 --> 00:00:01,520
Hello everyone.

2
00:00:01,549 --> 00:00:03,199
Hope you are all doing good.

3
00:00:03,619 --> 00:00:05,659
My name is Esh Maralla.

4
00:00:05,710 --> 00:00:11,410
I have around 17 plus years of experience
in it with major focus on enterprise

5
00:00:11,410 --> 00:00:17,419
architecture and designing distributed
systems, APIs and micro UI applications.

6
00:00:17,810 --> 00:00:22,159
Today I'm going to talk to you
about enhancing systems, resilience

7
00:00:22,159 --> 00:00:24,319
and efficiency with microservices.

8
00:00:24,919 --> 00:00:28,249
Practical applications
and its real world impact.

9
00:00:28,249 --> 00:00:33,289
And discover how microservices,
architecture, reshapes distributed systems

10
00:00:33,600 --> 00:00:36,180
with real world application examples.

11
00:00:36,690 --> 00:00:40,110
So during the whole talk, when
you watch the video, please feel

12
00:00:40,110 --> 00:00:41,820
free to connect me in LinkedIn.

13
00:00:42,220 --> 00:00:46,850
You can search for my name Kumar
Gun, and feel free to share your

14
00:00:46,850 --> 00:00:51,320
questions, our discussion points, and
I'm more than happy to talk to you.

15
00:00:51,990 --> 00:00:56,460
I will try to put in as much content as
I can with this presentation so that you

16
00:00:56,460 --> 00:01:01,010
can see how it is working and you can
leverage the knowledge on your day-to-day

17
00:01:01,010 --> 00:01:02,900
software development activities.

18
00:01:03,400 --> 00:01:06,100
Alright, let's let's jump on to the talk.

19
00:01:06,180 --> 00:01:11,790
So microservices as an architectural
style have revolutionized distributed

20
00:01:11,790 --> 00:01:16,140
systems offering unparalleled
flexibility and efficiency.

21
00:01:16,500 --> 00:01:22,200
In today's fast-paced business landscape
unlike traditional monolithic systems

22
00:01:22,200 --> 00:01:26,970
where all components are tightly
integrated, when the service go down,

23
00:01:26,970 --> 00:01:29,070
the entire application will go down.

24
00:01:29,350 --> 00:01:32,710
Thereby limiting access to
the application as a whole.

25
00:01:32,760 --> 00:01:36,930
The customers will not be able to
access the application at all since

26
00:01:36,930 --> 00:01:38,790
the entire service will go down.

27
00:01:39,625 --> 00:01:45,725
But microservices enable this division of
functionalities into independent services,

28
00:01:45,964 --> 00:01:49,685
thereby fostering agility and innovation.

29
00:01:50,045 --> 00:01:54,274
And when a specific service is down,
only the functionality related to

30
00:01:54,274 --> 00:01:58,594
that service will be affected and
the users can continue interacting

31
00:01:58,675 --> 00:01:59,470
with the rest of the application.

32
00:02:00,169 --> 00:02:05,839
And moreover, microservices offer
unparalleled benefits for the developers

33
00:02:05,839 --> 00:02:11,000
and the technical teams that are involved
in each of the microservices teams.

34
00:02:11,219 --> 00:02:15,829
So that they can work in parallel
in the different microservices

35
00:02:15,829 --> 00:02:17,569
teams that the developers are in.

36
00:02:18,329 --> 00:02:23,609
So today we will delve into the
transformation power of microservices,

37
00:02:23,819 --> 00:02:25,589
exploring their principles.

38
00:02:25,920 --> 00:02:29,339
Design patterns and
implementation strategies.

39
00:02:29,730 --> 00:02:33,590
So throughout the practical
applications and compelling case

40
00:02:33,590 --> 00:02:38,180
studies, we will uncover how
microservices empower companies

41
00:02:38,180 --> 00:02:44,030
to innovate, overcome challenges,
and achieve business acceleration.

42
00:02:44,820 --> 00:02:48,480
Join me as we navigate the
fascinating journey of financing

43
00:02:48,480 --> 00:02:50,850
system resilience and efficiency.

44
00:02:51,225 --> 00:02:53,654
Through the adoption of microservices.

45
00:02:53,904 --> 00:02:57,654
Let's move on to the second
slide where we will talk about

46
00:02:57,654 --> 00:02:59,545
the microservices revolution.

47
00:02:59,974 --> 00:03:04,684
The rise of microservices has
marked a transformative shift in

48
00:03:04,684 --> 00:03:06,515
how modern enterprises approach.

49
00:03:07,054 --> 00:03:12,935
Software architecture With 74% of
organizations now using microservices

50
00:03:12,935 --> 00:03:17,435
in production, it's clear that most
of the companies like this approach

51
00:03:17,435 --> 00:03:22,265
and has moved beyond the trend and
become a standard for scalable,

52
00:03:22,265 --> 00:03:24,665
efficient, and agile development.

53
00:03:25,204 --> 00:03:31,065
So the advantage of microservices
is microservices breakdown large and

54
00:03:31,065 --> 00:03:35,325
complex applications into smaller,
independently deployable service.

55
00:03:35,715 --> 00:03:39,165
Thereby allowing teams to
work on different components

56
00:03:39,165 --> 00:03:43,674
simultaneously without stepping
on each other's code base.

57
00:03:43,764 --> 00:03:48,594
And one of the most compelling reasons
that most of the companies are trying to

58
00:03:48,594 --> 00:03:54,315
adapt to microservices is the significant
boost in the development speed.

59
00:03:54,394 --> 00:03:59,435
On an average organizations report
up to 35% increase in development

60
00:03:59,435 --> 00:04:03,644
velocity when compared to our
traditional monolithic systems.

61
00:04:04,144 --> 00:04:09,574
In addition to speed, microservices also
offer considerable cost saving benefits.

62
00:04:09,964 --> 00:04:16,505
Enterprises have reported at 28% reduction
in infrastructure costs after migrating

63
00:04:16,505 --> 00:04:19,144
to a microservices based architecture.

64
00:04:20,070 --> 00:04:24,150
This is often achieved through more
efficient resource utilization,

65
00:04:24,390 --> 00:04:28,920
better scalability, and the ability
to tailor infrastructure more

66
00:04:28,920 --> 00:04:31,460
precisely to each services needs.

67
00:04:31,540 --> 00:04:37,300
So the microservices revolution is not
a, is not just a change in technology.

68
00:04:37,660 --> 00:04:40,900
It's a fundamental evolution
in how teams collaborate.

69
00:04:41,440 --> 00:04:44,180
Deploy and maintain software.

70
00:04:44,430 --> 00:04:49,200
Let us delve into some of the
core principles of microservices.

71
00:04:49,440 --> 00:04:53,219
At the heart of microservices,
architecture is the principle of

72
00:04:53,219 --> 00:04:58,110
service independence which means that
each microservice is designed to run

73
00:04:58,110 --> 00:05:02,430
as a self-contained unit, managing
its own processes and maintaining

74
00:05:02,430 --> 00:05:04,770
clear boundaries from other service.

75
00:05:05,320 --> 00:05:09,460
This separation enables teams
to develop, test, and deploy

76
00:05:09,460 --> 00:05:15,220
individual services without infra
in interfering with others, right?

77
00:05:15,610 --> 00:05:18,220
Another core principle is modularity.

78
00:05:18,500 --> 00:05:22,430
Where in rather than building
a single massive application,

79
00:05:22,730 --> 00:05:26,870
microservices are organized around
specific business capabilities.

80
00:05:27,170 --> 00:05:30,710
So each service represent
a distinct function.

81
00:05:30,965 --> 00:05:33,695
Such as user management, for example.

82
00:05:34,035 --> 00:05:38,545
And then typically in e-commerce we
have payment processing where you can

83
00:05:38,545 --> 00:05:43,605
separate it as its own microservice
or an inventory tracking can be

84
00:05:43,605 --> 00:05:46,835
taken it into its own microservice.

85
00:05:47,435 --> 00:05:51,034
Another core principle of
microservices architecture is.

86
00:05:51,364 --> 00:05:52,835
The fault isolation.

87
00:05:53,244 --> 00:05:58,984
Since each service operates independently
failures are contained within that

88
00:05:58,984 --> 00:06:03,304
service alone and do not necessarily
affect the rest of the system, right?

89
00:06:03,664 --> 00:06:08,764
This isolation improves overall
system reliability and resilience.

90
00:06:09,319 --> 00:06:14,490
Making it possible to identify or
even, troubleshoot and fix the problems

91
00:06:14,490 --> 00:06:19,059
without dis disrupting the entire
applications, as I told in the beginning.

92
00:06:20,049 --> 00:06:24,109
Alright another core principle
is the concept of loose coupling.

93
00:06:24,505 --> 00:06:29,865
Where microservices communicate with
each other through well-defined APIs,

94
00:06:30,105 --> 00:06:35,955
avoiding tight interdependencies, which
makes it easier to replace or upgrade

95
00:06:35,955 --> 00:06:41,185
individual services without having to make
widespread changes across your system.

96
00:06:41,705 --> 00:06:47,075
So loose coupling also allows teams to
use different technologies or languages.

97
00:06:47,615 --> 00:06:51,245
For different services, offering
flexibility in choosing the

98
00:06:51,245 --> 00:06:52,955
right tools for the job.

99
00:06:53,215 --> 00:06:58,384
Apart from the basic four found four
foundation principles that we spoke

100
00:06:58,634 --> 00:07:02,384
we have few other concepts like
decentralized data management, where

101
00:07:02,384 --> 00:07:08,114
each service typically owns its own
data store, and we have scalability and

102
00:07:08,114 --> 00:07:13,364
autonomy where each microservices can
be independently scaled based on the

103
00:07:13,364 --> 00:07:15,314
demand for that specific microservices.

104
00:07:15,564 --> 00:07:20,634
We have DevOps and continuous develop
continuous delivery alignment where each

105
00:07:20,634 --> 00:07:26,554
of the microservices can have its own
DevOps pipeline using CICD practices.

106
00:07:26,989 --> 00:07:32,079
And we have observable observability
and monitoring where each of the teams

107
00:07:32,079 --> 00:07:37,549
can detect, diagnose, and resolve
issues quickly just in case if there are

108
00:07:37,609 --> 00:07:40,829
issues arise with these microservices.

109
00:07:41,689 --> 00:07:43,489
Let's move on to the next slide.

110
00:07:43,619 --> 00:07:46,819
We'll talk about some of
the key design patterns.

111
00:07:47,249 --> 00:07:50,009
One of the most critical design pattern.

112
00:07:50,754 --> 00:07:54,114
That we use in microservices
is the circuit breaker pattern.

113
00:07:54,544 --> 00:08:00,205
Let's take an example of an electrical
circuit breaker where this pattern acts as

114
00:08:00,205 --> 00:08:06,325
a protective mechanism that Hals calls to
a failing service to prevent the failure

115
00:08:06,325 --> 00:08:08,305
from cascading throughout the system.

116
00:08:08,785 --> 00:08:13,255
Like when a service is unresponsive
or repeatedly written, errors,

117
00:08:13,555 --> 00:08:18,025
the circuit breaker trips and
redirects request to fallback logic.

118
00:08:18,415 --> 00:08:23,895
Or error messages and in implementing
the circuit breaker pattern can improve

119
00:08:23,985 --> 00:08:30,235
overall fall tolerance by up to 42%
which helps to maintain system stability

120
00:08:30,505 --> 00:08:35,985
even under a tremendous strain or, maybe
a partial out outages in the system.

121
00:08:36,855 --> 00:08:37,305
Alright.

122
00:08:37,845 --> 00:08:42,995
Another important pattern is the saga
pattern which is particularly useful

123
00:08:42,995 --> 00:08:47,555
for managing distributed transactions
across multiple microservices.

124
00:08:48,055 --> 00:08:52,105
The saga pattern coordinates a
series of local transactions with

125
00:08:52,105 --> 00:08:56,945
compensating actions in place in
case any part of the process fails.

126
00:08:56,975 --> 00:09:03,015
This ensures data consistency
and it has been shown to reduce

127
00:09:03,045 --> 00:09:05,715
transaction failures by 37%.

128
00:09:06,265 --> 00:09:11,585
Especially in environments with high
concurrency or fluctuating, fluctuating

129
00:09:11,585 --> 00:09:16,865
loads like in e-commerce web applications
where lot of shoppers shop and have

130
00:09:16,865 --> 00:09:18,695
heavy loads on the web applications.

131
00:09:18,945 --> 00:09:22,815
Another important pattern is the
API gateway pattern which plays

132
00:09:22,815 --> 00:09:27,615
a central role in managing how
clients interact with microservices.

133
00:09:27,865 --> 00:09:32,025
So rather than clients communicate
with each individual service directly,

134
00:09:32,475 --> 00:09:37,425
the API gateway acts as a single entry
point, which handles the routing.

135
00:09:38,010 --> 00:09:39,480
To specific services.

136
00:09:39,540 --> 00:09:43,590
It can handle authentication,
it can handle the rate limit

137
00:09:43,590 --> 00:09:45,330
and protocol translations.

138
00:09:45,330 --> 00:09:50,020
There are so many other features
available in API gateway, right?

139
00:09:50,020 --> 00:09:54,650
With the centralized handling like
API gateway in place most of the

140
00:09:54,650 --> 00:10:00,900
organizations have reported up to 56%
improvement in the request efficiency.

141
00:10:01,400 --> 00:10:05,660
Another important pattern is the
containerization, which is another

142
00:10:05,690 --> 00:10:10,600
powerful pattern that supports the
microservices to be packaged and

143
00:10:10,600 --> 00:10:13,030
deployed in its isolated containers.

144
00:10:13,475 --> 00:10:18,215
Typically we use containers like
sorry, container tools like Docker and

145
00:10:18,215 --> 00:10:23,355
Kubernetes, which helps us to ensure
consistency across environments.

146
00:10:23,835 --> 00:10:28,705
Implementing containerization leads to
an improved resource utilization by up

147
00:10:28,705 --> 00:10:35,275
to 62% as containers can be orchestrated
dynamically based on the workload demand.

148
00:10:35,775 --> 00:10:36,165
All right.

149
00:10:36,475 --> 00:10:40,765
Let's jump on to the next slide
and we will talk about the

150
00:10:40,765 --> 00:10:42,955
business impact of microservices.

151
00:10:43,435 --> 00:10:45,775
The first one being development speed.

152
00:10:46,025 --> 00:10:51,090
So by breaking down applications into
smaller independent services development

153
00:10:51,180 --> 00:10:56,650
teams can work on different components
simultaneously reducing bottlenecks and

154
00:10:56,650 --> 00:10:58,840
exhilarating the delivery of features.

155
00:10:59,365 --> 00:11:02,725
To achieve faster time to market, right?

156
00:11:02,725 --> 00:11:07,905
The companies leveraging microservices
reported 35% increase in development

157
00:11:07,905 --> 00:11:12,465
velocity compared to the traditional
monolithic architectures.

158
00:11:12,715 --> 00:11:16,645
Another one that we are going to
talk about is the operational cost.

159
00:11:17,105 --> 00:11:21,135
With precise scaling and better
resource utilization businesses can

160
00:11:21,135 --> 00:11:23,325
optimize their infrastructure costs.

161
00:11:23,665 --> 00:11:28,245
By better allocation of resources
with some of the organizations

162
00:11:28,245 --> 00:11:33,675
reporting even a 20 per 28% reduction
in infrastructure costs after

163
00:11:34,425 --> 00:11:36,225
transitioning to microservices.

164
00:11:36,475 --> 00:11:41,045
As, as the scaling and resource
utilization are much better

165
00:11:41,295 --> 00:11:46,365
in microservices most of the
organizations report a 28% reduction

166
00:11:46,365 --> 00:11:47,985
in the infrastructure costs.

167
00:11:48,475 --> 00:11:54,365
Another important aspect is systems
scalability where each of the service

168
00:11:54,365 --> 00:11:58,955
operates independently, allowing
it to scale horizontally without

169
00:11:59,095 --> 00:12:00,775
impacting the rest of the system.

170
00:12:01,160 --> 00:12:05,540
The modular design of microservices
ensures that systems remain

171
00:12:05,540 --> 00:12:11,510
flexible and capable of meeting
user demands no matter how complex

172
00:12:11,510 --> 00:12:14,120
or, unpredictable it may be right.

173
00:12:14,620 --> 00:12:17,760
Another important aspect
is time to market.

174
00:12:17,940 --> 00:12:22,280
Traditional monolithic architectures
often struggle with lengthy development

175
00:12:22,280 --> 00:12:24,230
cycles and deployment cycles.

176
00:12:24,675 --> 00:12:28,945
Thereby making time to market
of the product very slow.

177
00:12:29,285 --> 00:12:33,425
In contrast, microservices empower
teams to implement changes.

178
00:12:34,025 --> 00:12:38,055
Fix bugs and deploy updates on
its own on its own by means.

179
00:12:38,395 --> 00:12:42,755
What does it mean by on its own is that
each microservices has a responsible

180
00:12:42,755 --> 00:12:48,385
team so they can fix bugs and deploy
their updates much faster than a

181
00:12:48,415 --> 00:12:50,665
traditional monolithic application.

182
00:12:51,095 --> 00:12:57,475
The study shows that, this leads
to an improvement of 50% in the in

183
00:12:57,475 --> 00:13:02,435
the development time which makes
microservices to go to market quickly.

184
00:13:02,935 --> 00:13:07,445
Alright let us move to the next
slide where we will talk about an

185
00:13:07,445 --> 00:13:11,955
e-commerce case study which is one
of the luxury retailer where they,

186
00:13:12,265 --> 00:13:14,695
they converted to microservices.

187
00:13:15,005 --> 00:13:20,255
So before adapting to microservices,
the, this luxury retailer faced

188
00:13:20,255 --> 00:13:24,635
significant challenges stemming from
its rigid monolithic architecture

189
00:13:24,945 --> 00:13:27,495
because of its inflexible system.

190
00:13:27,735 --> 00:13:31,155
It hindered innovation, preventing
the company from responding

191
00:13:31,155 --> 00:13:33,785
quickly to the market demands.

192
00:13:33,995 --> 00:13:39,545
So deployment cycles were ex exceptionally
long, taking almost up to six weeks

193
00:13:39,545 --> 00:13:41,735
to roll out new updates or features.

194
00:13:42,075 --> 00:13:47,315
Such delays not only impact impacted
the time to market, but also limited the

195
00:13:47,315 --> 00:13:49,685
retailer's ability to stay competitive.

196
00:13:50,625 --> 00:13:51,015
All right.

197
00:13:51,255 --> 00:13:56,485
Additionally the monolithic nature of
the system made scaling very inefficient

198
00:13:56,935 --> 00:14:01,525
as it required, duplicating the entire
application, which consumed the extensive

199
00:14:01,525 --> 00:14:07,045
resources and entire resources as the
entire application will be replicated

200
00:14:07,045 --> 00:14:13,475
to a separate node which led to high
infrastructure utilization almost at 87%,

201
00:14:13,505 --> 00:14:15,635
resulting in performance bottlenecks.

202
00:14:16,085 --> 00:14:21,425
Once this retailer shifted to
microservices, this really marked

203
00:14:21,425 --> 00:14:23,255
a turning point for the retailer.

204
00:14:23,565 --> 00:14:27,345
By breaking down the monolithic
system into independent services,

205
00:14:27,615 --> 00:14:30,915
the company achieved remarkable
flexibility and agility.

206
00:14:31,560 --> 00:14:37,470
The transformation enabled rapid
innovation, empowering teams to implement

207
00:14:37,470 --> 00:14:42,150
new features more efficiently than a
traditional monolithic application.

208
00:14:42,400 --> 00:14:49,150
Infrastructure utilization dropped from
87% to 42%, enabling the company to reduce

209
00:14:49,150 --> 00:14:52,360
operational costs by an impressive of 35%.

210
00:14:52,990 --> 00:14:57,460
This efficient resource management ensured
the retailer could handle high traffic

211
00:14:57,460 --> 00:15:02,640
volumes during peak shopping periods,
while maintaining a very good performance.

212
00:15:03,345 --> 00:15:08,575
These ADMA advancements really help the
retailer to strengthen its reputation

213
00:15:08,575 --> 00:15:14,045
as a leader in luxury e-commerce
thereby driving customer loyalty

214
00:15:14,045 --> 00:15:16,245
and increasing customer revenue.

215
00:15:16,745 --> 00:15:18,815
Let's move on to the next slide.

216
00:15:18,855 --> 00:15:22,735
We will talk about some of the
implementation implementation challenges.

217
00:15:23,340 --> 00:15:28,050
Transitioning to microservices
architecture is a significant undertaking

218
00:15:28,380 --> 00:15:33,480
that requires addressing various
organizational and technical challenges.

219
00:15:34,140 --> 00:15:39,290
One of the most critical obstacle is
organizational change, which normally

220
00:15:39,290 --> 00:15:43,430
involves like restructuring teams
and fostering a shift in culture.

221
00:15:43,850 --> 00:15:45,170
And then, some learning curve.

222
00:15:45,950 --> 00:15:49,970
Alright moving from mono monolithic
structure to microservices.

223
00:15:50,295 --> 00:15:55,545
Demand decentralization where individual
team takes ownership of specific services.

224
00:15:56,255 --> 00:16:00,455
Another challenge that, that I
see is the service coordination

225
00:16:00,765 --> 00:16:02,745
like in a microservices ecosystem.

226
00:16:02,745 --> 00:16:07,365
Each microservice operates independently,
but they're interconnected,

227
00:16:07,365 --> 00:16:11,625
relying on each other to deliver
a unified experience for users.

228
00:16:11,875 --> 00:16:17,005
Another challenge that I see is in the
distributed testing, unlike monolithic

229
00:16:17,005 --> 00:16:21,355
system where testing is centralized
and straightforward because the

230
00:16:21,355 --> 00:16:25,735
entire application is monolith and
they can test the entire application

231
00:16:26,015 --> 00:16:31,175
whereas microservices require testing
across multiple independent services

232
00:16:31,455 --> 00:16:35,345
which are which, and the, these
services interact in dynamic ways.

233
00:16:35,595 --> 00:16:40,475
Another challenge that I see is the
technical complexity which seems to

234
00:16:40,475 --> 00:16:45,565
be a major hurdle in implementing
microservices because configuration

235
00:16:45,595 --> 00:16:51,575
management deployment and monitoring
become exceptionally challenging as

236
00:16:51,625 --> 00:16:53,605
the number of microservices increases.

237
00:16:53,895 --> 00:16:57,875
Lastly it's also vital to address
the learning curve for teams

238
00:16:57,925 --> 00:16:59,725
transitioning to microservices.

239
00:16:59,965 --> 00:17:05,275
As most of the engineers and developers
might have got accustomed to working

240
00:17:05,275 --> 00:17:09,945
in a specific monolithic style these
teams might find it challenging

241
00:17:09,945 --> 00:17:12,165
to adapt to the decentralized.

242
00:17:12,490 --> 00:17:15,195
And the distributed
nature of microservices.

243
00:17:15,695 --> 00:17:18,130
Okay, let's move on to the next slide.

244
00:17:18,460 --> 00:17:22,850
We will talk about some of the
observability strategies that we can

245
00:17:22,850 --> 00:17:28,550
use in microservices to ensure the
smooth operation and maintain the

246
00:17:28,550 --> 00:17:31,030
resilience of microservices architecture.

247
00:17:31,170 --> 00:17:34,850
Alright, metrics collection
is a foundational strategy for

248
00:17:34,850 --> 00:17:39,050
observability, which enables the
tracking of key performance indicators

249
00:17:39,320 --> 00:17:41,780
across all different microservices.

250
00:17:42,020 --> 00:17:47,060
Metrics like response times, error
rates, and resource utilization

251
00:17:47,360 --> 00:17:51,200
provide a quantitative understanding
of the system's performance.

252
00:17:51,620 --> 00:17:56,690
Another vital component of observability
is distributed tracing, which provides

253
00:17:56,690 --> 00:18:01,340
a comprehensive view of how requests
propagate through the service mesh.

254
00:18:01,590 --> 00:18:06,070
Distributed tracing helps us
identify bottlenecks, the latency

255
00:18:06,070 --> 00:18:10,810
issues and the service level
failures by actually pinpointing

256
00:18:10,810 --> 00:18:13,305
the exact service or the component.

257
00:18:13,810 --> 00:18:18,470
Responsible for the errors, or
you can say disruptions, right?

258
00:18:18,510 --> 00:18:23,110
Centralized logging is is is the
one that enhances observability

259
00:18:23,590 --> 00:18:25,600
by aggregating all the logs.

260
00:18:25,940 --> 00:18:29,810
From all the services into
a single platform, right?

261
00:18:30,010 --> 00:18:34,370
Logs capture valuable information
about events and errors.

262
00:18:34,620 --> 00:18:39,810
If you have centralized logging, enable
all of these logs can be aggregated and

263
00:18:39,910 --> 00:18:42,580
captured into a single platform, right?

264
00:18:42,580 --> 00:18:44,800
Thereby making troubleshooting easy.

265
00:18:45,050 --> 00:18:48,230
Another strategy is
implementing proactive alerting.

266
00:18:48,510 --> 00:18:52,430
Proactive alerting basically
enables teams to address potential

267
00:18:52,430 --> 00:18:55,260
issues before even it affect users.

268
00:18:55,560 --> 00:19:00,590
Because because developers can get
automatic alerts when a, when an error

269
00:19:00,590 --> 00:19:07,080
occurs in a specific microservices thereby
the developer can take a proactive step

270
00:19:07,080 --> 00:19:09,840
to identify the issue and then fix it.

271
00:19:10,140 --> 00:19:13,290
We will talk about testing
excellency in this slide.

272
00:19:13,320 --> 00:19:18,040
As for any application testing is the
backbone to ensure the reliability

273
00:19:18,040 --> 00:19:20,190
and performance of the application.

274
00:19:20,330 --> 00:19:24,110
Even for the microservices
testings testing become, becomes

275
00:19:24,110 --> 00:19:28,370
the backbone to make sure the
application is for good quality.

276
00:19:28,980 --> 00:19:33,420
So we have strategies like
unit testing where it serves

277
00:19:33,420 --> 00:19:34,890
as the first layer of defense.

278
00:19:35,215 --> 00:19:39,635
By testing each service independently
developers can verify that its

279
00:19:39,635 --> 00:19:41,405
core logic function, correct.

280
00:19:41,745 --> 00:19:45,945
Functions work correctly without
external dependencies, right?

281
00:19:45,945 --> 00:19:48,795
This method increases
the code coverage by.

282
00:19:49,295 --> 00:19:50,585
Almost 32%.

283
00:19:51,425 --> 00:19:54,515
Building on unit testing
integration testing.

284
00:19:54,565 --> 00:19:58,655
Basically verifies how services
work together when they are

285
00:19:58,655 --> 00:20:00,695
deployed together as a whole.

286
00:20:01,000 --> 00:20:05,300
To deliver seamless functionality
and integration testing checks.

287
00:20:05,300 --> 00:20:10,220
The compatibility and correctness of
communication protocols, data flows,

288
00:20:10,220 --> 00:20:13,290
and shared APIs between services.

289
00:20:13,470 --> 00:20:18,090
So it reduces integration
bugs by almost 47%.

290
00:20:18,340 --> 00:20:22,620
Another strategy is the contract
testing where which plays a

291
00:20:22,890 --> 00:20:26,080
vital role in maintaining a PA
stability across microservices.

292
00:20:26,340 --> 00:20:31,800
Contract testing ensures that APAs
remain compatible and fulfill agreed

293
00:20:31,800 --> 00:20:35,850
upon expectations between service
providers and different consumers.

294
00:20:36,190 --> 00:20:40,870
This not only improves a PA
stability by 56%, but also

295
00:20:40,870 --> 00:20:45,760
fosters trust and consistency in
within the service interactions.

296
00:20:46,010 --> 00:20:48,240
Another innovative testing approach.

297
00:20:48,810 --> 00:20:54,200
Is chaos testing, which validates the
system, re system's resilience under

298
00:20:54,200 --> 00:20:59,090
adverse conditions by intentionally
introducing failures or disruptions.

299
00:20:59,330 --> 00:21:04,040
Chaos testing evaluates how the system
responds to unexpected challenges.

300
00:21:04,350 --> 00:21:10,190
This practice usually enhances the
system reliability by around 38%.

301
00:21:10,480 --> 00:21:14,650
We will talk about some of the
migration strategies in this slide.

302
00:21:14,980 --> 00:21:19,330
So migrating from a monolithic
architecture to microservices

303
00:21:19,570 --> 00:21:23,980
is a strategic and also the
complex process, which requires

304
00:21:23,980 --> 00:21:24,850
careful planning and execution.

305
00:21:25,350 --> 00:21:30,060
So the first step in this transition
is decomposition analysis, which

306
00:21:30,060 --> 00:21:34,610
involves identifying bounded context
within the existing monolith.

307
00:21:34,910 --> 00:21:40,250
And by breaking down the monolith into
these smaller and independent units,

308
00:21:40,490 --> 00:21:45,700
organizations can lay the groundwork
for creating the microservices platform.

309
00:21:45,950 --> 00:21:52,240
Another widely used approach is the
strangler pattern which allows for gradual

310
00:21:52,240 --> 00:21:57,150
and risk minimized transition instead
of attempting complete system overhaul.

311
00:21:57,390 --> 00:22:01,350
The strangler pattern involves replacing
the specific functionalities of the

312
00:22:01,350 --> 00:22:04,620
monolith with microservices incrementally.

313
00:22:04,890 --> 00:22:09,450
So over the time, the monolith strings
as more functionalities are being

314
00:22:09,450 --> 00:22:11,100
trans transitioned to microservices.

315
00:22:11,400 --> 00:22:15,910
Another approach that is that
we can use is the pilot service.

316
00:22:16,120 --> 00:22:19,950
This approach involves identifying
a non-critical service within the

317
00:22:19,950 --> 00:22:24,940
application that can serve as a test
case for the migration by starting small.

318
00:22:25,440 --> 00:22:26,040
Excuse me.

319
00:22:26,800 --> 00:22:30,970
By starting small teams can learn
the nuances of deploying, managing,

320
00:22:31,030 --> 00:22:33,160
and monitoring microservices.

321
00:22:33,410 --> 00:22:36,680
Another key component of a
successful migration strategy

322
00:22:36,680 --> 00:22:38,950
is developing a full ecosystem.

323
00:22:39,475 --> 00:22:41,095
To support microservices.

324
00:22:41,305 --> 00:22:46,555
This involves setting up the necessary
infrastructure, tools and processes

325
00:22:46,915 --> 00:22:50,935
to manage the complexities of a
distribution distributed systems.

326
00:22:51,435 --> 00:22:54,075
And finally the key takeaways.

327
00:22:54,445 --> 00:22:58,765
So the adoption of microservices
architecture has revolutionized

328
00:22:58,795 --> 00:23:02,515
how businesses achieve
acceleration and agility.

329
00:23:03,070 --> 00:23:04,420
In their operations.

330
00:23:04,580 --> 00:23:08,540
So by breaking monolithic systems
into smaller, independent services,

331
00:23:08,750 --> 00:23:15,850
organizations have unlocked faster time to
market and enhanced customer satisfaction.

332
00:23:16,290 --> 00:23:23,200
Microservices over development teams to
deliver features rapidly often reducing

333
00:23:23,200 --> 00:23:26,230
delivery timelines by almost 45%.

334
00:23:26,855 --> 00:23:31,025
This capability not only helps
businesses respond quickly to market

335
00:23:31,025 --> 00:23:36,185
trends, but also provides a significant
competitive edge in dynamic industries.

336
00:23:36,235 --> 00:23:38,515
Say for example, like an e-commerce.

337
00:23:38,765 --> 00:23:43,775
Another critical takeaway is the
ability of microservices to enable

338
00:23:43,775 --> 00:23:48,725
operational excellence through
enhanced scalability and resilience.

339
00:23:49,385 --> 00:23:53,945
Traditional monolithic architectures
often struggle to scale efficiently,

340
00:23:54,215 --> 00:23:56,735
especially under varying traffic loads.

341
00:23:56,955 --> 00:24:02,795
Where however, microservices allow for
independent service scaling, optimizing

342
00:24:02,885 --> 00:24:09,280
resource utilization, and reducing
operational costs by as much as 32%.

343
00:24:09,580 --> 00:24:14,290
Microservices also foster technical
agility, allowing teams to innovate

344
00:24:14,290 --> 00:24:17,320
faster and adapt to changes seamlessly.

345
00:24:17,780 --> 00:24:22,040
With services operating independently,
teams can experiment with new

346
00:24:22,040 --> 00:24:25,940
technologies, frameworks and
approaches without affecting

347
00:24:25,940 --> 00:24:27,080
the overall architecture.

348
00:24:27,330 --> 00:24:32,970
This flex flexibility translates
to a 56% improvement in development

349
00:24:33,240 --> 00:24:37,560
velocity, enabling organizations
to continuously innovate and

350
00:24:37,560 --> 00:24:39,710
stay ahead of the disruptions.

351
00:24:40,010 --> 00:24:44,470
So in conclusion microservices
architecture is not just

352
00:24:44,470 --> 00:24:45,580
a technical framework.

353
00:24:46,030 --> 00:24:49,930
It's a paradigm shift that
empowers organizations to achieve

354
00:24:50,020 --> 00:24:54,770
agility, resilience, and innovation
in today's fast paced world.

355
00:24:55,170 --> 00:24:59,340
So from transforming rigid systems
to accelerating fisher delivery.

356
00:24:59,820 --> 00:25:05,520
Microservices offer a strategic advantage
that goes far beyond efficiency.

357
00:25:06,390 --> 00:25:10,770
As you have seen through practical
applications and real world case studies,

358
00:25:11,010 --> 00:25:16,650
microservices have the power to drive
business acceleration, reduced operational

359
00:25:16,650 --> 00:25:20,250
costs, and improved customer experiences.

360
00:25:20,770 --> 00:25:24,610
So with this I encourage you
all to take this opportunity to

361
00:25:24,610 --> 00:25:26,620
rethink how your systems are built.

362
00:25:27,115 --> 00:25:30,505
And embrace the future of
our distributed architecture.

363
00:25:31,005 --> 00:25:35,925
Let us all move forward together in
leveraging microservices to create

364
00:25:35,925 --> 00:25:41,855
smarter, scalable, and more innovative
systems that meet the demands of tomorrow.

365
00:25:41,930 --> 00:25:42,860
All right.

366
00:25:43,110 --> 00:25:45,730
I hope you like this content.

367
00:25:45,760 --> 00:25:49,730
Please feel free to leave your feedback
by connecting to me in LinkedIn.

368
00:25:49,760 --> 00:25:51,470
Again, my name is Smar Go.

369
00:25:51,980 --> 00:25:55,560
You can search for my name in
LinkedIn and please connect to

370
00:25:55,560 --> 00:25:57,450
me if you have any questions.

371
00:25:57,840 --> 00:25:58,260
Alright.

372
00:25:58,260 --> 00:26:02,100
On that note, thank you so much
for your time and attention.

373
00:26:02,460 --> 00:26:04,110
You all have a wonderful day.

374
00:26:04,950 --> 00:26:06,030
See you guys.

375
00:26:06,530 --> 00:26:07,160
Bye bye.

