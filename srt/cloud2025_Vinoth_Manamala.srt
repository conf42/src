1
00:00:00,040 --> 00:00:01,040
Welcome, everyone.

2
00:00:01,540 --> 00:00:06,330
This is Vinod Manamala, and
I'm a senior data scientist.

3
00:00:06,830 --> 00:00:10,820
Today, I'll show you like how AI
powered digital twins can transform

4
00:00:10,820 --> 00:00:12,360
the manufacturing operations.

5
00:00:13,270 --> 00:00:16,550
I'll also share the practical
solutions from real factories that

6
00:00:16,550 --> 00:00:18,619
I saved like millions of dollars.

7
00:00:19,309 --> 00:00:22,979
Now, let's start by looking
at what we'll cover today.

8
00:00:23,479 --> 00:00:25,549
So here's our plan for today.

9
00:00:25,899 --> 00:00:30,399
we'll start with why digital
twins often fail in factories.

10
00:00:31,029 --> 00:00:34,469
Then I'll share five patterns
that actually work, supported

11
00:00:34,469 --> 00:00:36,409
by a real, use case study.

12
00:00:36,999 --> 00:00:41,039
And, we'll also end with the practical
tips you can use immediately.

13
00:00:41,539 --> 00:00:46,189
So first let's, examine why so
many digital twin projects don't

14
00:00:46,189 --> 00:00:47,789
deliver the expected value.

15
00:00:48,339 --> 00:00:51,659
most digital twins fail in
factories for simple reasons, right?

16
00:00:51,709 --> 00:00:55,679
so they can't handle the messy
reality of manufacturing.

17
00:00:56,609 --> 00:00:57,579
That's the first thing.

18
00:00:58,199 --> 00:01:00,769
And they don't adapt
to changing conditions.

19
00:01:01,409 --> 00:01:04,039
And they also ignore, sensor uncertainty.

20
00:01:04,859 --> 00:01:07,319
And, they try to model everything at once.

21
00:01:07,759 --> 00:01:11,019
And, and they also break
when, the network fails.

22
00:01:11,259 --> 00:01:14,469
So these problems cost like
real money when production

23
00:01:14,469 --> 00:01:16,699
stops or the quality drops.

24
00:01:17,339 --> 00:01:20,709
Now let's look at the first
winning pattern that actually

25
00:01:20,709 --> 00:01:22,559
solved many of these challenges.

26
00:01:23,059 --> 00:01:26,819
The first winning pattern is what
I call the even first architecture.

27
00:01:27,624 --> 00:01:32,764
So instead of tracking, fixed dates,
here we track, every event that happens

28
00:01:32,954 --> 00:01:34,874
and calculate the states as needed.

29
00:01:35,854 --> 00:01:40,994
So this records complete history and helps
you trace problems back to their source.

30
00:01:41,714 --> 00:01:46,024
In a chip factory, this solved,
major headaches with tracking wafers

31
00:01:46,494 --> 00:01:50,404
through rework processes and saved,
countless hours of troubleshooting.

32
00:01:50,904 --> 00:01:55,024
And, on the next slide, I will examine
how AI can be taught to understand

33
00:01:55,034 --> 00:01:57,574
time in manufacturing processes.

34
00:01:58,074 --> 00:02:01,404
The second pattern is AI
that truly understands time.

35
00:02:02,184 --> 00:02:07,434
In manufacturing, different time periods
matter depending on what you're making.

36
00:02:07,934 --> 00:02:12,014
Our system uses special neural
networks that learn which time

37
00:02:12,014 --> 00:02:14,534
periods matter most for each process.

38
00:02:15,034 --> 00:02:20,664
This improved prediction accuracy by
27 percent and spotted problems hours

39
00:02:20,664 --> 00:02:25,494
or days earlier, giving operators time
to fix issues before causing, scrap.

40
00:02:25,994 --> 00:02:27,315
So this is really important.

41
00:02:27,835 --> 00:02:32,195
And now, next, let's look at how
we can make these models adapt

42
00:02:32,205 --> 00:02:34,745
automatically to changing conditions.

43
00:02:35,245 --> 00:02:38,235
So the third pattern here,
which is basically the models

44
00:02:38,235 --> 00:02:39,655
that adapt automatically.

45
00:02:40,500 --> 00:02:43,700
Actually solves a big
problem with AI in factories.

46
00:02:44,200 --> 00:02:46,830
Knowing when to learn
and when to hold steady.

47
00:02:46,860 --> 00:02:48,890
That is the, that is a big problem here.

48
00:02:49,390 --> 00:02:52,150
Our solution adjusts
learning rates automatically.

49
00:02:53,029 --> 00:02:57,420
During stable production, it increases the
learning to catch these subtle changes.

50
00:02:58,170 --> 00:03:02,030
And during unstable periods, it increases
learning to avoid overreactions.

51
00:03:02,530 --> 00:03:07,319
So this reduced the false alarm by 62
percent and kept the models accurate by 3.

52
00:03:07,319 --> 00:03:10,889
4 times longer without, manual retraining.

53
00:03:11,389 --> 00:03:15,189
Now, let's talk about how to deal
with another major challenge.

54
00:03:15,559 --> 00:03:17,809
basically it's the uncertain sensor data.

55
00:03:18,309 --> 00:03:21,499
The fourth pattern here
addresses the sensor reliability.

56
00:03:22,439 --> 00:03:26,159
The factory sensors get dirty,
drift out of calibration or fail.

57
00:03:26,734 --> 00:03:30,214
And our approach here is very
honest about uncertainty.

58
00:03:31,094 --> 00:03:36,194
The system here calculates the, confidence
levels for every prediction, and tells

59
00:03:36,194 --> 00:03:38,954
the operators when, data looks suspicious.

60
00:03:39,454 --> 00:03:45,074
When the data is questionable, it falls
back on physics based rules, and this

61
00:03:45,114 --> 00:03:48,984
cuts the false alarm by 45 percent
while catching the actual problem.

62
00:03:49,484 --> 00:03:54,584
Now, let's look into the, fifth pattern,
which addresses how manufacturing happens

63
00:03:54,994 --> 00:03:57,524
across multiple timeframes simultaneously.

64
00:03:58,024 --> 00:04:02,064
The fifth pattern here, recognizes
the manufacturing that happens

65
00:04:02,064 --> 00:04:03,884
at many timescales at once.

66
00:04:04,784 --> 00:04:09,204
Our solution here tracks processes at
multiple timescales, like simultaneously,

67
00:04:09,884 --> 00:04:13,534
and, this found problems that would
be invisible otherwise, right?

68
00:04:14,154 --> 00:04:18,014
in one factory, we discovered morning
temperature fluctuations were slowly

69
00:04:18,034 --> 00:04:20,294
degrading, a small catalyst over weeks.

70
00:04:21,094 --> 00:04:24,534
And, the system can connect a
brief even from, weeks, that

71
00:04:24,534 --> 00:04:27,754
happened, weeks ago to a quality
problem that's happening right now.

72
00:04:28,254 --> 00:04:29,754
this is pretty, amazing.

73
00:04:30,254 --> 00:04:34,574
And, now let's see, like, how these
patterns work together in, in a real

74
00:04:34,574 --> 00:04:37,234
semiconductor factory, in a real use case.

75
00:04:37,734 --> 00:04:40,724
So let me show you how these
patterns worked in a real semi,

76
00:04:40,834 --> 00:04:42,304
a real semiconductor factory.

77
00:04:43,274 --> 00:04:45,614
So their problem was
handling the wafer rework.

78
00:04:46,604 --> 00:04:50,814
so when wafers need to repeat like
certain process steps, and, they found

79
00:04:50,814 --> 00:04:52,984
this was like really problematic.

80
00:04:53,394 --> 00:04:58,104
So their first, digital twin actually
lost track of wafers and got confused.

81
00:04:58,604 --> 00:05:02,954
So we implemented like an event
based system with AI for like

82
00:05:02,954 --> 00:05:08,784
defect detection, anomaly detection
and process relationship mapping.

83
00:05:09,044 --> 00:05:14,354
So this resulted in 94 percent accuracy
predicting, reworks that were needed.

84
00:05:14,754 --> 00:05:18,184
And also like 12 percent
yield improvement and also 4.

85
00:05:18,184 --> 00:05:19,724
2 million in annual savings.

86
00:05:20,224 --> 00:05:24,614
Now let's take a closer look at how,
AI actually worked in this factory.

87
00:05:25,114 --> 00:05:28,094
So here the, AI had two key components.

88
00:05:28,104 --> 00:05:32,124
First is the defect detection using
the computer vision, which analyzed

89
00:05:32,124 --> 00:05:35,294
the wafer images with almost 99.

90
00:05:35,334 --> 00:05:38,264
2 percent accuracy for, critical defects.

91
00:05:38,884 --> 00:05:42,004
Second, the process relationship,
the process relationship mapping.

92
00:05:42,679 --> 00:05:45,679
Connected over, 1, 200 process parameters.

93
00:05:46,669 --> 00:05:50,469
So this revealed, cost effect
relationships nobody knew existed.

94
00:05:51,029 --> 00:05:54,719
And, the engineers who were working
there could ask, what would happen

95
00:05:54,719 --> 00:05:57,969
if you change this temperature
and get realistic predictions

96
00:05:57,979 --> 00:06:00,019
before making, the actual changes.

97
00:06:00,519 --> 00:06:04,229
Now, let's talk about some practical
implementation tips, starting

98
00:06:04,239 --> 00:06:07,889
with how to handle, all these
data, these systems generate.

99
00:06:08,389 --> 00:06:12,229
The factories generate, enormous
data, often terabytes daily, right?

100
00:06:12,279 --> 00:06:16,359
you can't keep it all, but you
can't just delete it either too.

101
00:06:16,649 --> 00:06:20,029
our approach here is keep high
frequency data for 24 hours.

102
00:06:20,709 --> 00:06:22,919
and save hourly summaries for months.

103
00:06:23,749 --> 00:06:28,349
The smart part is automatically,
detecting and preserving the anomalies

104
00:06:28,349 --> 00:06:32,249
while compressing the, the normal
data when nothing happened, generally.

105
00:06:33,019 --> 00:06:38,769
And this reduces the storage needs by
almost, by 78%, while keeping 95 percent

106
00:06:38,769 --> 00:06:40,669
of the analytical value from those data.

107
00:06:41,169 --> 00:06:44,779
So the next implementation challenge
we need to address is the, the network

108
00:06:44,779 --> 00:06:46,949
reliability in these factory environments.

109
00:06:47,429 --> 00:06:50,769
And, let's see, like, how we can
handle these, network problems.

110
00:06:51,269 --> 00:06:55,079
The factory networks, they fail
constantly due to, equipment

111
00:06:55,079 --> 00:06:56,569
interference and maintenance.

112
00:06:56,859 --> 00:06:59,989
and maintenance is the biggest
problem, in, day to day activities.

113
00:07:00,809 --> 00:07:04,654
our solution here, what we did
was, It puts the intelligence at

114
00:07:04,654 --> 00:07:06,804
the edge, next to the equipment.

115
00:07:07,314 --> 00:07:11,804
So the edge devices are like, they
run lightweight AI models, and

116
00:07:11,814 --> 00:07:15,814
they work independently during the
outages or, during the maintenance.

117
00:07:16,714 --> 00:07:20,894
So when the network reruns or when they
come back online, they automatically

118
00:07:20,894 --> 00:07:22,624
sync with the, the central system.

119
00:07:23,124 --> 00:07:29,604
So this happened in a chemical plant
and we achieved like almost 99.

120
00:07:29,604 --> 00:07:33,984
97 percent uptime despite all
these frequent network issues.

121
00:07:34,274 --> 00:07:38,094
Be it like, the equipment
interference or a maintenance process.

122
00:07:38,594 --> 00:07:44,774
Now let's also discuss how to keep the
AI models performing well over the time.

123
00:07:45,274 --> 00:07:49,534
So basically here, We're going to talk
about the ML model lifecycle management.

124
00:07:50,034 --> 00:07:54,924
So the AI models in the factories degrade
over the time as processes change.

125
00:07:55,834 --> 00:08:00,334
So our system continuously monitors
model performance, and also it detects

126
00:08:00,384 --> 00:08:02,324
drifts in the models automatically.

127
00:08:02,824 --> 00:08:06,604
So the new models are first tested
in something we call it as the shadow

128
00:08:06,604 --> 00:08:09,104
mode, before gradually taking control.

129
00:08:09,604 --> 00:08:13,084
So this reduced the, by doing this
we reduce the engineering time.

130
00:08:13,529 --> 00:08:16,329
on model maintenance by almost 67%.

131
00:08:17,019 --> 00:08:19,919
And extended the model life almost by 3.

132
00:08:19,919 --> 00:08:25,399
4 times with almost consistent performance
across all the product changes.

133
00:08:25,899 --> 00:08:29,849
Now let's look at how the
physical loss can make those AI

134
00:08:29,869 --> 00:08:31,499
predictions like more reliable.

135
00:08:31,999 --> 00:08:34,739
the manufacturing must
follow like, physical loss.

136
00:08:34,819 --> 00:08:38,549
You can't create or destroy
mass or energy, right?

137
00:08:39,169 --> 00:08:44,049
So here our system combines like AI
flexibility with physical constraints.

138
00:08:44,769 --> 00:08:48,579
So this ensures the predictions
obey the real world rules, even

139
00:08:48,579 --> 00:08:50,149
in conditions never seen before.

140
00:08:51,019 --> 00:08:54,399
In a chemical reactor, for
example, this approach reduced

141
00:08:54,399 --> 00:08:59,719
the impossible predictions by 94
percent 94 percent and improved the

142
00:09:00,189 --> 00:09:02,479
performance in new situations by 72%.

143
00:09:03,099 --> 00:09:04,879
making this operation really safe.

144
00:09:05,379 --> 00:09:09,379
So now let me wrap up with key
takeaways from, today's presentation.

145
00:09:09,929 --> 00:09:14,939
to summarize, the key takeaways
here, the basically use even based

146
00:09:14,939 --> 00:09:17,039
architecture for complex manufacturing.

147
00:09:17,799 --> 00:09:21,579
and the second key takeaway
is like implement AI that

148
00:09:21,599 --> 00:09:23,619
understands time and uncertainty.

149
00:09:24,384 --> 00:09:28,964
Third key takeaway is like build
systems that adapt automatically, right?

150
00:09:28,984 --> 00:09:32,924
And the fourth key takeaway is like
design for real world challenges like

151
00:09:32,924 --> 00:09:34,964
network failures that we spoke about.

152
00:09:35,864 --> 00:09:40,404
And the fifth key takeaway is
measure success by business impact

153
00:09:40,604 --> 00:09:42,944
and not by technical metrics.

154
00:09:43,444 --> 00:09:47,234
And also start with a focus problem
and then you can expand on it.

155
00:09:47,254 --> 00:09:52,714
So these are my key takeaways
and thank you for your attention.

156
00:09:53,264 --> 00:09:55,334
And I'm happy to take questions.

157
00:09:55,884 --> 00:09:59,384
on my, using my email ID, you can
connect with, also you can connect

158
00:09:59,384 --> 00:10:02,424
with me on my LinkedIn profile
that you can see in the bottom.

159
00:10:03,184 --> 00:10:07,464
so I'm happy, we met on this
Conf, 42 conference and I'm

160
00:10:07,464 --> 00:10:09,264
hoping to catch up with you guys.

161
00:10:09,604 --> 00:10:10,024
Thank you.

