1
00:00:00,900 --> 00:00:01,860
Hello everyone.

2
00:00:01,920 --> 00:00:03,240
I'm Paulette Baer.

3
00:00:03,300 --> 00:00:06,300
I'm a DevOps engineer
and a technical blogger.

4
00:00:06,600 --> 00:00:12,120
Today I'm so excited to talk about
synthetic monitoring for modern systems.

5
00:00:12,810 --> 00:00:16,740
So let's first understand why
synthetic monitoring, what

6
00:00:16,740 --> 00:00:18,270
problem does it really solve?

7
00:00:18,770 --> 00:00:23,795
Imagine you wake up to a flood
of emails, support ticket,

8
00:00:24,005 --> 00:00:26,705
frustrated users, and lost revenue.

9
00:00:27,470 --> 00:00:29,990
That's what happened with us once.

10
00:00:29,990 --> 00:00:35,870
We had a payment gateway, API, which
crashed at two M, and we found out only

11
00:00:35,870 --> 00:00:38,269
when 50 customers complained about it.

12
00:00:38,769 --> 00:00:43,089
So what if we could catch all
those problem before they happen?

13
00:00:43,749 --> 00:00:47,469
That's what synthetic monitoring
does, and I'll show you how.

14
00:00:47,969 --> 00:00:50,249
So now what is synthetic monitoring?

15
00:00:50,624 --> 00:00:55,874
Synthetic monitoring simulates the
user's interaction with your system.

16
00:00:56,374 --> 00:01:01,085
Think of it as a robot, acting
like your customers, like clicking

17
00:01:01,085 --> 00:01:06,695
through your website, submitting
forms, calling your APIs 24 into

18
00:01:06,695 --> 00:01:08,884
seven even when you are asleep.

19
00:01:09,634 --> 00:01:15,335
And it does all this taste every one
minutes, five minutes, or whatever

20
00:01:15,335 --> 00:01:19,175
the timeframe you choose and from
different places around the world.

21
00:01:19,675 --> 00:01:22,885
Now what is a problem with
traditional monitoring?

22
00:01:23,185 --> 00:01:27,025
So traditional monitoring
waits for something to break,

23
00:01:27,535 --> 00:01:29,365
and it's reactive process.

24
00:01:29,395 --> 00:01:32,575
On the other hand, synthetic
monitoring is proactive.

25
00:01:32,875 --> 00:01:36,595
It doesn't wait for real
users to find out the problem.

26
00:01:37,105 --> 00:01:40,075
So that's the power of
synthetic monitoring.

27
00:01:40,575 --> 00:01:43,605
Now, why synthetic monitoring matters?

28
00:01:44,205 --> 00:01:46,665
So I've got three key reasons for that.

29
00:01:46,665 --> 00:01:46,785
First.

30
00:01:47,285 --> 00:01:51,095
In today's world, our systems
are getting super complex.

31
00:01:51,455 --> 00:01:59,855
We have lots of microservices, serverless
applications, and APIs and second users.

32
00:01:59,855 --> 00:02:02,105
Expectations are higher than ever.

33
00:02:02,525 --> 00:02:05,345
Users want everything to be instant.

34
00:02:06,340 --> 00:02:07,980
2024 is studied.

35
00:02:08,370 --> 00:02:15,505
Said that just two seconds delay can make
20% of your customer leave your website.

36
00:02:15,519 --> 00:02:18,399
Right, and four online is stored.

37
00:02:18,399 --> 00:02:23,709
The data, say the downtime can even
cost you a hundred thousand dollars

38
00:02:23,739 --> 00:02:26,499
per hour, and that's a lot of money.

39
00:02:27,279 --> 00:02:30,969
Third, we have got our
customers all around the world.

40
00:02:31,209 --> 00:02:37,209
Your app might be used by customers
in Canada, USA, or India, so

41
00:02:37,209 --> 00:02:41,079
we want to make sure it works
for everyone from everywhere.

42
00:02:41,579 --> 00:02:44,790
Now synthetic monitoring trends in 2025.

43
00:02:45,510 --> 00:02:53,249
So as of 2024, the global synthetic
monitoring market valued at $1.42

44
00:02:53,249 --> 00:03:02,670
billion, and it is expected to reach
about $3.78 billion by 2033 with

45
00:03:02,670 --> 00:03:06,089
the annual growth rate of 11.5%.

46
00:03:06,589 --> 00:03:08,839
Now what's driving this growth?

47
00:03:09,049 --> 00:03:11,209
So let's see these points.

48
00:03:11,569 --> 00:03:14,419
So first, rapid cloud adoptions.

49
00:03:14,479 --> 00:03:21,049
Companies are moving to the cloud because
it's faster, easier, and it can help

50
00:03:21,049 --> 00:03:24,469
us save cost compared to data centers.

51
00:03:25,464 --> 00:03:31,129
Also, now company wants new solution for
monitoring, better ways to monitoring.

52
00:03:31,579 --> 00:03:34,999
So they are adopting
synthetic monitoring now.

53
00:03:35,989 --> 00:03:42,739
Monitoring tools have integrated AI
and ml, now they find out the issues

54
00:03:42,769 --> 00:03:46,099
much faster and with accuracy using ai.

55
00:03:47,089 --> 00:03:54,409
And third, there's a big shift going on
from reactive to proactive monitoring.

56
00:03:54,739 --> 00:04:00,409
So now companies are aiming
to identify and fix issues

57
00:04:00,559 --> 00:04:02,779
before even the real customer.

58
00:04:03,279 --> 00:04:07,954
So now let's see what are the types
of synthetic monitoring we have?

59
00:04:08,464 --> 00:04:14,344
So first we have got API Monitors
so IT test backend end points and

60
00:04:14,344 --> 00:04:16,834
make sure it is up and running it.

61
00:04:16,834 --> 00:04:22,684
Test your APIs and make sure it
returns 200 successful response and

62
00:04:22,684 --> 00:04:27,604
it is not failing so you can monitor
your critical APIs using this.

63
00:04:27,604 --> 00:04:28,895
API monitors.

64
00:04:28,939 --> 00:04:28,999
Yeah.

65
00:04:29,499 --> 00:04:32,349
Now second is browser based monitoring.

66
00:04:32,739 --> 00:04:36,009
So it simulates what a real user would do.

67
00:04:36,699 --> 00:04:39,549
So it'll click on add to card button.

68
00:04:39,549 --> 00:04:42,369
It'll place data, it'll make the payment.

69
00:04:42,699 --> 00:04:47,859
So all those browser related tests you
can do using browser based monitoring.

70
00:04:48,819 --> 00:04:56,409
Now, scripted monitors, so this type
of monitors follow some fixed steps.

71
00:04:56,909 --> 00:05:00,059
Like what a customer's
user journey looks like.

72
00:05:00,569 --> 00:05:07,769
It'll log into a account, it'll place
the order, maybe add to cart and all

73
00:05:07,769 --> 00:05:10,319
those flow one by one, step by step.

74
00:05:10,469 --> 00:05:15,059
And to end that to that, you can
test with a scripted monitors meters.

75
00:05:15,559 --> 00:05:19,849
Now, ping monitors, so ping
monitors is used to check the

76
00:05:19,849 --> 00:05:22,009
availability of your servers.

77
00:05:22,009 --> 00:05:23,149
Are they online?

78
00:05:23,599 --> 00:05:24,589
Is there any.

79
00:05:25,089 --> 00:05:28,869
Network error that you can
check using ping monitors.

80
00:05:29,369 --> 00:05:33,269
Now come SSL and TLS certificate monitors.

81
00:05:34,079 --> 00:05:42,819
So this monitor ensures safety certificate
of your websites, whether the certificate

82
00:05:42,819 --> 00:05:49,299
has expired or valid, that you can check
using SSL and TLS certificate monitor.

83
00:05:49,329 --> 00:05:53,219
Us now, we have learned so many
things about synthetic monitoring.

84
00:05:53,549 --> 00:05:57,269
Now see how to implement
synthetic monitoring.

85
00:05:57,809 --> 00:06:01,379
So I've got you three
steps to implement it.

86
00:06:02,219 --> 00:06:07,889
First thing is identify critical users
journey and transactions and API.

87
00:06:08,339 --> 00:06:12,719
So identify the problem,
what your users want.

88
00:06:13,139 --> 00:06:15,599
So for example, for.

89
00:06:15,989 --> 00:06:17,609
Healthcare applications.

90
00:06:17,669 --> 00:06:21,389
Users want to have it
always up and running.

91
00:06:21,629 --> 00:06:24,659
They want to access to their
prescription, they want to book

92
00:06:24,659 --> 00:06:26,549
appointment with their doctors.

93
00:06:27,239 --> 00:06:31,769
So this is a critical user journey
and you can't afford downtime in that.

94
00:06:32,219 --> 00:06:35,159
So make sure you test such a scenarios.

95
00:06:35,579 --> 00:06:38,429
So once you identify the
critical user's journey, now

96
00:06:38,429 --> 00:06:40,409
next step is create the script.

97
00:06:41,309 --> 00:06:45,539
Create the scripts for end-to-end
flow, what users would do one by.

98
00:06:46,039 --> 00:06:48,829
And the third point is
select the monitoring tools.

99
00:06:48,989 --> 00:06:52,349
There are several monitoring
tools available in the market.

100
00:06:52,679 --> 00:06:55,679
See what works for you for your use case.

101
00:06:56,179 --> 00:07:02,779
And the fourth step is schedule test to
run 24 to seven from global locations.

102
00:07:03,589 --> 00:07:09,019
So this flow that we have seen, you can
test it every one hour to make sure if

103
00:07:09,019 --> 00:07:14,419
in the last hour it fell, then you can
set up some alerts that you will receive

104
00:07:14,419 --> 00:07:16,729
when your team can take action on that.

105
00:07:17,569 --> 00:07:23,749
So schedule alerts and monitor it
24 into sevens from global location.

106
00:07:23,779 --> 00:07:27,619
If your users are based in USA,
then test it from USA if you

107
00:07:27,619 --> 00:07:30,649
have got your users globally.

108
00:07:31,084 --> 00:07:33,424
Then test it from multiple locations.

109
00:07:33,904 --> 00:07:39,244
Now, last step is analyze the data
regularly to optimize performance.

110
00:07:39,604 --> 00:07:45,964
So once you have data in last 24 hours
for how many times your system failed

111
00:07:46,354 --> 00:07:48,094
and what were the reasons of it.

112
00:07:48,664 --> 00:07:52,624
So once you find out the issue in
your system, you can plan to fix

113
00:07:52,624 --> 00:07:55,024
it so it doesn't break next time.

114
00:07:55,524 --> 00:07:57,744
Now, tools for synthetic monitoring.

115
00:07:58,119 --> 00:08:01,809
So there are many tools available
in the synthetic monitoring, new

116
00:08:01,809 --> 00:08:07,959
Relic, Dynatrace, Datadog, but all
these tools have some features in

117
00:08:07,959 --> 00:08:10,389
common that you should look for.

118
00:08:10,689 --> 00:08:13,029
So first is multi-region testing.

119
00:08:13,539 --> 00:08:20,169
So you can test your APIs and system from
around the world and multiple locations.

120
00:08:20,619 --> 00:08:26,109
Then observability integrations
so you can integrate your other.

121
00:08:26,649 --> 00:08:32,469
Logs into the observability, like
for your systems, logs, stresses and

122
00:08:32,469 --> 00:08:35,790
metrics, and then AI driven insights.

123
00:08:36,690 --> 00:08:41,820
So you can use AI to find
the patterns in your logs.

124
00:08:42,270 --> 00:08:46,260
If you have a huge logs and there
is some application failing,

125
00:08:46,560 --> 00:08:48,450
you cannot pinpoint the problem.

126
00:08:48,450 --> 00:08:52,080
Then you can use AI to
pinpoint the problem.

127
00:08:52,080 --> 00:08:57,390
So I have used this features one, for
one of my Java application, there was

128
00:08:57,390 --> 00:09:01,800
an null pointed exception and there was
a huge code base I couldn't identify

129
00:09:01,800 --> 00:09:04,690
from where it is failing using ai.

130
00:09:04,750 --> 00:09:08,620
It just given me the exact
method name where it is failing.

131
00:09:09,070 --> 00:09:14,830
So use AI and it also gives you some
tips how you can solve this problem

132
00:09:14,830 --> 00:09:17,290
and improve your system's performance.

133
00:09:18,100 --> 00:09:20,320
Now, custom scripting SU support.

134
00:09:20,620 --> 00:09:23,470
So all this tool have scripting support.

135
00:09:23,470 --> 00:09:28,720
You can write your scripts for
your test and nots, Python and

136
00:09:28,720 --> 00:09:30,640
different programming languages.

137
00:09:31,140 --> 00:09:33,990
Now, TIFs for writing synthetic tests.

138
00:09:34,260 --> 00:09:38,070
So there are some best practices
you, you should follow when

139
00:09:38,070 --> 00:09:39,810
you are writing scripting.

140
00:09:40,260 --> 00:09:42,150
So test from multiple region.

141
00:09:42,180 --> 00:09:46,760
We already talk about you should test
it for multiple region if you're.

142
00:09:47,135 --> 00:09:52,325
Users are best globally,
then set realistic threshold.

143
00:09:53,285 --> 00:09:58,325
And so it is very important for your
non-critical application you can afford

144
00:09:58,325 --> 00:10:00,605
if it fails one or two times in a day.

145
00:10:00,965 --> 00:10:06,035
But for critical ones like
payment or banking, you don't

146
00:10:06,035 --> 00:10:08,645
want it to be down even once.

147
00:10:08,915 --> 00:10:13,975
So set threshold realistically now
focus alerts on critical issues.

148
00:10:14,560 --> 00:10:19,150
If you keep setting up alerts for
everything, then you will be overwhelmed

149
00:10:19,180 --> 00:10:23,590
by the alerts and there is a chance
you will miss the critical one.

150
00:10:23,710 --> 00:10:29,290
So always set up alerts
only for critical issues.

151
00:10:30,100 --> 00:10:35,980
Now, validate end-to-end flows, so
you have to validate end-to-end flows.

152
00:10:36,290 --> 00:10:40,040
It doesn't work if add to
card feature is working or.

153
00:10:40,700 --> 00:10:42,200
Order placing is working.

154
00:10:42,230 --> 00:10:47,000
You have to make sure user is able
to log in, add to cart, place, order,

155
00:10:47,600 --> 00:10:50,270
and able to complete the payment.

156
00:10:50,690 --> 00:10:54,170
So always validate end
to end user's journey.

157
00:10:54,670 --> 00:10:56,890
Okay, now key takeaways.

158
00:10:57,790 --> 00:11:02,860
So the main problem, the synthetic
monitoring solves this, it catches

159
00:11:02,920 --> 00:11:06,130
issues before your customers or user do.

160
00:11:06,595 --> 00:11:10,855
So have it implemented and
focus on critical user journey.

161
00:11:10,915 --> 00:11:12,565
What is critical for you?

162
00:11:13,235 --> 00:11:17,855
As I said, for healthcare, it may be
booking appointment with the doctors

163
00:11:17,915 --> 00:11:20,285
or accessing their prescription.

164
00:11:20,615 --> 00:11:26,185
And for banking it may be transferring
funds from one accounts to another and

165
00:11:26,185 --> 00:11:29,065
integrate with your observability stacks.

166
00:11:29,185 --> 00:11:33,565
So you may have logs pure
AWS Cloud Kubernetes.

167
00:11:33,955 --> 00:11:37,375
Or different kinds of logs
so you can integrate it with

168
00:11:37,375 --> 00:11:39,745
your observability stack.

169
00:11:40,735 --> 00:11:45,985
And the last, and not least,
leverage AI to predictive insights.

170
00:11:46,195 --> 00:11:52,075
AI is really helpful when you have got
lots of logs, metrics, and presses.

171
00:11:52,525 --> 00:11:56,755
It can pinpoint the problem,
it can suggest tips to improve

172
00:11:56,815 --> 00:11:58,825
the performance of your system.

173
00:11:59,325 --> 00:12:01,365
Thank you so much for your time.

174
00:12:01,635 --> 00:12:05,115
If you have got any question,
please don't hesitate to reach me.

175
00:12:05,775 --> 00:12:08,145
You can reach out to me through LinkedIn.

176
00:12:08,995 --> 00:12:11,275
Here is the QR code on the screen.

177
00:12:11,845 --> 00:12:12,355
Thank you.

178
00:12:12,475 --> 00:12:13,255
Thank you so much.

