1
00:00:01,350 --> 00:00:03,270
Hello everyone and thank you for joining.

2
00:00:03,870 --> 00:00:04,470
My name is Vive.

3
00:00:04,620 --> 00:00:07,110
Koda and I work at Aryaka Networks.

4
00:00:07,890 --> 00:00:12,030
I have spent my career working on
secure and scalable identity systems

5
00:00:12,030 --> 00:00:14,070
for enterprises operating across Globe.

6
00:00:15,150 --> 00:00:19,695
Today I would like to explore with you how
we could scale identity for Secure Access,

7
00:00:19,695 --> 00:00:25,200
service Edge, or SE using Key Lock and the
model known as Regional Hub deployment.

8
00:00:26,340 --> 00:00:29,190
If you have ever waited several
seconds for a login page to load.

9
00:00:29,685 --> 00:00:34,425
You know how frustrating at
agency can be at a global scale.

10
00:00:35,175 --> 00:00:37,785
Those seconds might apply into
our self loss productivity.

11
00:00:38,474 --> 00:00:42,735
So let's explore how we could
design identity infrastructure

12
00:00:42,885 --> 00:00:43,875
to avoid that problem.

13
00:00:45,345 --> 00:00:47,535
Here is how we could
structure this discussion.

14
00:00:48,254 --> 00:00:52,155
First, let's talk about the challenges
SE presence when it comes to identity.

15
00:00:53,055 --> 00:00:57,315
Then we could look at regional hub
model, how it might work, and why it

16
00:00:57,315 --> 00:00:58,730
could solve some of these challenges.

17
00:00:59,685 --> 00:01:03,015
From there, I will show how Kilo
could be used as an identity

18
00:01:03,015 --> 00:01:04,394
solution in this architecture.

19
00:01:05,385 --> 00:01:10,395
Finally, we will walk through how we could
think about automation operations, and

20
00:01:10,395 --> 00:01:12,255
the challenges we expect along the way.

21
00:01:13,065 --> 00:01:16,815
By the end, you will hopefully
have a clear idea of what steps

22
00:01:16,815 --> 00:01:18,255
you could take in your own magnet.

23
00:01:18,945 --> 00:01:21,585
Traditionally, security
looked like a calendar model.

24
00:01:22,545 --> 00:01:24,884
If you were inside the
network, you were trusted.

25
00:01:25,634 --> 00:01:26,980
That model doesn't really work anymore.

26
00:01:28,289 --> 00:01:32,940
With the remote workforce applications
spread across the cloud and edge and

27
00:01:32,940 --> 00:01:37,200
regulation tightening across regions, the
perimeter has effectively disappeared.

28
00:01:38,130 --> 00:01:41,640
So instead of thinking about
securing networks, we could shift

29
00:01:41,640 --> 00:01:44,400
our thinking to securing identities.

30
00:01:44,880 --> 00:01:47,970
Identity could be the new
parameter, the factor that it

31
00:01:47,970 --> 00:01:52,175
remains, who gets access under what
conditions, and from which device.

32
00:01:54,060 --> 00:01:58,320
SE brings networking and security
together into cloud delivery service.

33
00:01:59,130 --> 00:02:01,770
Think of it like building
a network of airports.

34
00:02:02,310 --> 00:02:06,600
Instead of routing all travelers
through one central hub, we could have

35
00:02:06,600 --> 00:02:11,160
local airports where passengers check
in, pass through security, and head

36
00:02:11,160 --> 00:02:12,720
to their destinations more quickly.

37
00:02:13,710 --> 00:02:18,960
At the center of SASE is a zero
trust model, always redify our trust.

38
00:02:20,070 --> 00:02:23,760
And identity could act as the
passport in the system, the thing

39
00:02:23,760 --> 00:02:25,530
that makes or breaks access.

40
00:02:26,610 --> 00:02:31,320
By consolidating policy and access
decisions around identity, we

41
00:02:31,320 --> 00:02:35,970
could ensure consistency across
users, devices, and locations.

42
00:02:38,130 --> 00:02:42,360
By scaling identity in a global SAS E
environment could introduce challenges.

43
00:02:43,020 --> 00:02:44,025
Latency could be a big one.

44
00:02:45,255 --> 00:02:50,595
A Singapore user authenticating against
US based identity provider could face 200

45
00:02:50,595 --> 00:02:53,204
to 300 milliseconds of delay per request.

46
00:02:54,524 --> 00:02:56,385
Availability could be at risk.

47
00:02:56,984 --> 00:03:01,605
If a centralized system goes down, you
users across worldwide are locked out.

48
00:03:02,894 --> 00:03:05,024
Data sovereignty could complicate things.

49
00:03:05,385 --> 00:03:10,575
The regulations like GDPR or CCPA
could require local processing

50
00:03:10,605 --> 00:03:12,404
and storage of identity data.

51
00:03:13,635 --> 00:03:15,795
The scale itself could
become a bottleneck.

52
00:03:16,575 --> 00:03:19,995
A centralized identity and access
management systems might not

53
00:03:19,995 --> 00:03:24,135
be designed for the throughput
demands of global traffic.

54
00:03:25,155 --> 00:03:28,665
So the centralization might
look neat on paper and practice.

55
00:03:28,785 --> 00:03:30,555
It could introduce serious friction.

56
00:03:33,975 --> 00:03:37,965
One option could be to distribute
identity using regional hub model.

57
00:03:39,165 --> 00:03:43,845
In this model, we could deploy autonomous
key cloud clusters in major regions.

58
00:03:44,204 --> 00:03:48,945
For example, one each
in EDAs, EMEA and apac.

59
00:03:49,994 --> 00:03:54,584
Each hub could authenticate local
users independently reducing

60
00:03:54,644 --> 00:03:56,024
reliance on a central system.

61
00:03:56,864 --> 00:04:00,704
The same time the hubs could coordinate
with each other to synchronize

62
00:04:00,704 --> 00:04:02,415
policies and use of data globally.

63
00:04:03,524 --> 00:04:05,649
It's like opening a branch
office for identity.

64
00:04:06,735 --> 00:04:10,785
Each office could handle its own
local users while still staying in

65
00:04:10,845 --> 00:04:13,245
alignment with the overall organization.

66
00:04:17,205 --> 00:04:20,775
By moving to regional hubs,
we could see several benefits.

67
00:04:21,105 --> 00:04:25,005
First, latency could be reduced
since users authenticate

68
00:04:25,095 --> 00:04:26,120
closer to where they are.

69
00:04:26,940 --> 00:04:32,025
Second, availability could improve because
the regional outage wouldn't necessarily

70
00:04:32,085 --> 00:04:34,275
impact users in other parts of the world.

71
00:04:35,670 --> 00:04:38,880
And third, we could optimize
cost by handling authentication

72
00:04:38,880 --> 00:04:43,530
locally, reducing close and
traffic and cloud ingress chargers.

73
00:04:44,580 --> 00:04:48,570
So overall, the user experience could
improve while the operations remain

74
00:04:48,570 --> 00:04:50,400
more resilient and cost effective.

75
00:04:53,580 --> 00:04:55,050
Now, why Key clock?

76
00:04:55,830 --> 00:04:57,900
Key clock could be a
strong fit for this model?

77
00:04:58,380 --> 00:05:01,800
Because it's open source and
Kubernetes native, which makes

78
00:05:01,800 --> 00:05:03,510
it flexible to deploy anywhere.

79
00:05:04,710 --> 00:05:08,729
It support multi-tenancy through
rounds, which could be for separating

80
00:05:08,729 --> 00:05:10,380
business units or customers.

81
00:05:11,010 --> 00:05:16,650
It's standard compliant supporting OIDC,
both to SAML and web authentication,

82
00:05:17,190 --> 00:05:22,650
so it could, it easily integrate with
modern applications and it is extensible.

83
00:05:23,280 --> 00:05:26,969
There are special requirements,
custom extensions could be deployed

84
00:05:27,210 --> 00:05:29,340
through SPS or even listeners.

85
00:05:30,479 --> 00:05:33,000
So as we evaluate identity platforms.

86
00:05:33,345 --> 00:05:37,545
Key Cloud could provide the flexibility
needed for a distributed hub based model.

87
00:05:41,385 --> 00:05:45,885
Let's imagine what a regional hub
could look like at the center.

88
00:05:46,185 --> 00:05:48,645
There could be a key cloud
cluster handling authentication

89
00:05:48,645 --> 00:05:51,255
and single sign-on behind it.

90
00:05:51,615 --> 00:05:54,225
A database could store user
information and configuration.

91
00:05:55,155 --> 00:05:58,215
A load balancer could distribute
incoming traffic across key

92
00:05:58,215 --> 00:05:59,775
clock nodes for scalability.

93
00:06:00,930 --> 00:06:03,960
We could have direct desynchronization
to keep our user accounts

94
00:06:04,050 --> 00:06:05,940
aligned with corporates users.

95
00:06:08,190 --> 00:06:12,210
And finally, an observability
layer could give us insights into

96
00:06:12,210 --> 00:06:14,040
performance and security events.

97
00:06:14,640 --> 00:06:18,510
Each hub could follow the same
standardized pattern, but still adapt

98
00:06:18,510 --> 00:06:21,000
to local compliance requirements.

99
00:06:24,570 --> 00:06:26,505
How could we decide
where to place the hubs?

100
00:06:27,585 --> 00:06:30,164
We could start by
analyzing traffic patterns.

101
00:06:30,705 --> 00:06:31,875
Where are the users?

102
00:06:33,615 --> 00:06:37,815
We could align hubs with existing SSE
point of presence to minimize the hubs.

103
00:06:38,414 --> 00:06:42,284
We could consider regulatory
zones grouping res with

104
00:06:42,315 --> 00:06:43,965
similar compliance needs.

105
00:06:44,594 --> 00:06:48,255
We could look at cloud provider
capabilities, choosing regions with

106
00:06:48,255 --> 00:06:53,805
strong service and resilience, and
we could validate all this with

107
00:06:53,805 --> 00:06:56,294
latency test from real user locations.

108
00:06:57,330 --> 00:07:00,390
A practical starting point
could be three or four hubs

109
00:07:00,510 --> 00:07:02,340
across major business regions.

110
00:07:02,460 --> 00:07:05,250
Expanding as usage and metrices group

111
00:07:09,390 --> 00:07:10,890
synchronization would be key.

112
00:07:11,790 --> 00:07:15,090
We could synchronize usage and
policies through shared directory

113
00:07:15,090 --> 00:07:19,110
services like A DRL app or even
through database replication.

114
00:07:20,520 --> 00:07:24,420
Policies could be kept consistent
using ops workflows for

115
00:07:24,420 --> 00:07:25,740
token and session management.

116
00:07:26,100 --> 00:07:31,140
We could enable cross cluster token
validation, use distributed caches like

117
00:07:31,140 --> 00:07:38,040
infinite span, or allow token exchange
between hubs for operational consistency.

118
00:07:38,340 --> 00:07:43,620
We could manage configuration through
CICD centralized mattresses and stream

119
00:07:43,620 --> 00:07:46,260
events for auditing in this way.

120
00:07:46,635 --> 00:07:49,920
Each hub could operate
independently, but still remain

121
00:07:49,920 --> 00:07:51,810
in step with global architecture.

122
00:07:56,085 --> 00:07:59,775
To make this manageable, automation
could play a central role.

123
00:08:00,855 --> 00:08:05,295
We could adopt ops to treat all
key cloud configurations as code,

124
00:08:05,895 --> 00:08:08,145
ensuring consistency across regions.

125
00:08:09,135 --> 00:08:12,855
We could use Keylock operator
in Kubernetes to simplify

126
00:08:12,855 --> 00:08:13,905
deployment and scaling.

127
00:08:15,315 --> 00:08:19,245
We could apply Canary deployments
to rollout updates safely.

128
00:08:20,745 --> 00:08:24,794
We could implement observability
tools to track authentication flows,

129
00:08:25,005 --> 00:08:27,405
latency and errors across regions.

130
00:08:28,844 --> 00:08:32,205
With automation in place, a
distributed system could remain

131
00:08:32,205 --> 00:08:34,424
both reliable and predictable.

132
00:08:38,955 --> 00:08:42,135
Of course, this model
could bring challenges.

133
00:08:42,885 --> 00:08:46,095
Data consistency could be
difficult across regions.

134
00:08:47,115 --> 00:08:48,855
We could mitigate this by defining.

135
00:08:49,665 --> 00:08:54,405
Authoritative sources and conflict
resolution strategies, operational

136
00:08:54,405 --> 00:08:55,844
complexity could increase.

137
00:08:56,324 --> 00:09:00,375
We could address this with infrastructure
as a code and centralized monitoring

138
00:09:01,574 --> 00:09:03,194
failover coordination could be tricky.

139
00:09:03,885 --> 00:09:08,564
We could use health aware global load
balancers and automate failover testing.

140
00:09:09,915 --> 00:09:10,994
Cost could rise.

141
00:09:11,655 --> 00:09:17,084
We could manage this with autoscaling
and play full placement of hubs and

142
00:09:17,084 --> 00:09:18,675
complaints could get complicated.

143
00:09:19,335 --> 00:09:23,715
We could embed compliance checks
as code and automate audit trace.

144
00:09:24,465 --> 00:09:27,945
So while this is in without
challenges, the potential benefits

145
00:09:27,945 --> 00:09:29,475
could outweigh the complexity.

146
00:09:32,745 --> 00:09:35,955
To wrap up, let's reflect on
the key points we could take

147
00:09:35,955 --> 00:09:37,095
away from this discussion.

148
00:09:38,025 --> 00:09:42,795
First, identity could truly become the
foundation of SSE if it thinks about

149
00:09:42,795 --> 00:09:47,385
zero trust, it's only works and identity
is consistently verified and enforced.

150
00:09:48,209 --> 00:09:49,650
Without identity at the center.

151
00:09:49,949 --> 00:09:52,739
Zero trust is just a
theory, not a practice.

152
00:09:53,069 --> 00:09:55,949
So strengthening identity could
be the single most important

153
00:09:55,949 --> 00:09:57,810
step in making SASE effective.

154
00:09:58,770 --> 00:10:03,359
Second, we saw the regional hubs
could be a practical solution

155
00:10:03,540 --> 00:10:07,290
to the challenges of latency,
availability, compliance, and scale.

156
00:10:08,489 --> 00:10:11,969
By moving identity systems closer
to users, we could dramatic.

157
00:10:14,865 --> 00:10:19,365
Reduce dependency on a single
centralized provider and stay compliant

158
00:10:19,694 --> 00:10:21,495
with the regulations that we reach.

159
00:10:21,495 --> 00:10:26,204
And by reaching this distributed approach
might feel more complex at first,

160
00:10:26,324 --> 00:10:28,814
but it could solve video problems.

161
00:10:29,655 --> 00:10:33,194
And finally, Kiler could be an
excellent enabler for this vision.

162
00:10:34,005 --> 00:10:38,444
It's open source, Kubernetes native,
and is already designed to integrate

163
00:10:38,444 --> 00:10:40,425
with modern cloud native environments.

164
00:10:41,250 --> 00:10:45,540
With its extensibility and standard
compliance, it could give us flexibility

165
00:10:45,540 --> 00:10:49,710
to tailor identity to SASS e needs
while keeping core central control.

166
00:10:50,880 --> 00:10:52,440
So the main idea here is simple.

167
00:10:52,980 --> 00:10:56,580
In a well architectured SASS E model
usage shouldn't feel the distance

168
00:10:56,580 --> 00:11:00,960
between themselves and their additive
provider no matter where they are.

169
00:11:01,170 --> 00:11:04,410
Access should feel fast,
secure, and seamless.

170
00:11:07,680 --> 00:11:09,420
So what next steps we could take?

171
00:11:10,185 --> 00:11:13,605
We could start by evaluating our
current identity architecture.

172
00:11:14,625 --> 00:11:18,855
We could map where our users are
located and identify hotspots.

173
00:11:19,515 --> 00:11:22,905
We could pilot two region key
clock deployment and validate the

174
00:11:22,905 --> 00:11:28,395
improvements, and we could build
automation practices early to make

175
00:11:28,395 --> 00:11:30,105
operations smooth and repeatable.

176
00:11:31,545 --> 00:11:33,225
Thank you so much for your time today.

177
00:11:33,285 --> 00:11:36,950
I hope this session gives you some
practical ideas for scaling identity.

178
00:11:37,815 --> 00:11:42,495
In a global SSE environments, I would
like to hear your questions and then how

179
00:11:42,495 --> 00:11:44,235
you are approaching these challenges.

180
00:11:45,045 --> 00:11:45,625
Thank you all.

