1
00:00:00,000 --> 00:00:03,090
Hi everyone, and welcome
to this session at Con 42.

2
00:00:03,360 --> 00:00:07,050
I'm thena and I'm thrilled to be
a part of this incredible event.

3
00:00:07,230 --> 00:00:12,210
A big thank you to Con 42 for organizing
this and to all of you for tuning in,

4
00:00:12,330 --> 00:00:14,190
even though we are not in the same do.

5
00:00:14,250 --> 00:00:17,460
I'm excited to share some
valuable insights with you today.

6
00:00:17,580 --> 00:00:20,250
So I'm an open source
contributor at Gopher.

7
00:00:20,400 --> 00:00:24,390
Gopher is a Golang framework for
accelerated microservice development.

8
00:00:24,480 --> 00:00:27,240
In Golan, we focus on building resilient.

9
00:00:27,360 --> 00:00:30,060
Scalable and secure microservices.

10
00:00:30,150 --> 00:00:34,050
Over the years, we have faced numerous
challenges, building and scaling

11
00:00:34,050 --> 00:00:39,240
distributed systems, and Boer is the
result of all those hard earned lessons.

12
00:00:39,360 --> 00:00:42,450
Boer is designed for efficient
interservice communication.

13
00:00:42,600 --> 00:00:47,670
Observability and scalability By building
microservices, it removes the boilerplate

14
00:00:47,670 --> 00:00:52,199
code for you so you can focus on your
business logic with minimal lines of code.

15
00:00:52,320 --> 00:00:55,980
In this session, we'll explore the
challenges of interservice SGTP

16
00:00:55,980 --> 00:00:58,050
communication in microservices.

17
00:00:58,080 --> 00:01:02,430
Then I'll go on to introduce you to
gofer, which simplifies these challenges.

18
00:01:02,550 --> 00:01:06,240
We'll dive into the key features
of gofer that help you build

19
00:01:06,240 --> 00:01:10,050
efficient interservice, SGTP
communication architectures like

20
00:01:10,050 --> 00:01:12,000
circuit breakers and retry confis.

21
00:01:12,574 --> 00:01:15,725
Authentication observability
and health monitoring.

22
00:01:15,815 --> 00:01:20,884
Finally, we'll see a live demo to show
you how easy it is to set up Interservice

23
00:01:20,884 --> 00:01:23,945
SGTP communication architectures in Gofer.

24
00:01:24,125 --> 00:01:27,964
So let's not waste any more time
and let's get going with Gofer.

25
00:01:28,145 --> 00:01:32,014
Now, imagine you are building a
microservice based e-commerce store.

26
00:01:32,210 --> 00:01:36,350
So when a user places an order,
the user service calls the payment

27
00:01:36,350 --> 00:01:38,030
service to complete the payment.

28
00:01:38,180 --> 00:01:40,910
But what if the payment
service is unresponsive?

29
00:01:41,120 --> 00:01:42,260
Sounds familiar, right?

30
00:01:42,810 --> 00:01:46,980
This is one of the many challenges
that can arise while interservice

31
00:01:47,130 --> 00:01:49,170
communications in microservices.

32
00:01:49,350 --> 00:01:53,400
In today's world of distributed
systems, microservices are the

33
00:01:53,400 --> 00:01:58,080
backbone of modern applications because
they allow us to build scalable,

34
00:01:58,110 --> 00:01:59,910
modular, and maintainable systems.

35
00:02:00,495 --> 00:02:04,155
But one of the most critical
aspect of microservices is how

36
00:02:04,155 --> 00:02:05,835
they communicate with each other.

37
00:02:05,985 --> 00:02:10,574
SGDP is the defacto protocol for
this communication, but it is

38
00:02:10,574 --> 00:02:12,735
not without its own challenges.

39
00:02:12,855 --> 00:02:16,905
For example, every time one service
reaches out to another, it can face

40
00:02:16,905 --> 00:02:21,820
potential hurdles like latency issues,
security breaches, or unexpected failures.

41
00:02:22,000 --> 00:02:26,085
So let's break down these challenges
and discuss about them in detail.

42
00:02:26,435 --> 00:02:30,785
We talk about latency when
services communicate over HGTP.

43
00:02:30,875 --> 00:02:35,825
Every call adds latency, so if one
service is slow, it can create a

44
00:02:35,825 --> 00:02:40,535
domino effect slowing down the entire
system, even a minor delay in one

45
00:02:40,535 --> 00:02:42,575
service can ripple through the system.

46
00:02:42,750 --> 00:02:46,890
Needing to significant performance
bottlenecks by when we talk about

47
00:02:46,890 --> 00:02:51,570
failures in microservices, when no
system is immune to failures, be it

48
00:02:51,570 --> 00:02:55,920
hardware issues, unexpected spikes in
traffics, or simple misconfigurations

49
00:02:56,010 --> 00:03:00,150
failures are inevitable when one
service fail to respond as expected.

50
00:03:00,150 --> 00:03:05,459
It doesn't just affect that one component,
but has the potential to have a cascading

51
00:03:05,459 --> 00:03:07,829
effect into broader system-wide issues.

52
00:03:08,085 --> 00:03:11,835
When we talk about security,
with interservice communications

53
00:03:11,835 --> 00:03:15,375
actually happening over
potentially unsecured networks.

54
00:03:15,495 --> 00:03:18,915
Each SGTP call becomes a
point of vulnerability.

55
00:03:19,125 --> 00:03:24,315
Ensuring robust authentication and
secure data transmission is paramount.

56
00:03:24,435 --> 00:03:30,015
If a service security is compromised, it
could lead to unauthorized access data

57
00:03:30,015 --> 00:03:32,445
breaches or even further exploitation.

58
00:03:32,705 --> 00:03:34,745
Of other services in the network.

59
00:03:34,955 --> 00:03:40,055
Last but not the least, it is also very
important to tackle observability as

60
00:03:40,055 --> 00:03:44,015
without proper monitoring, diagnosing
issues becomes a guessing game,

61
00:03:44,015 --> 00:03:47,945
delaying resolution at increasing
the downtime of your services.

62
00:03:48,125 --> 00:03:51,965
So these challenges aren't just
technical, they are business critical.

63
00:03:52,115 --> 00:03:56,105
A single outage can cost millions
and a security breach can

64
00:03:56,105 --> 00:03:58,175
damage your entire reputation.

65
00:03:58,355 --> 00:04:01,625
That's why it's not enough to
just write code that works.

66
00:04:01,770 --> 00:04:04,920
We need to build systems that
are efficient, resilient,

67
00:04:04,920 --> 00:04:06,510
secure, and observable.

68
00:04:06,600 --> 00:04:10,050
And that's where Go For comes in
a framework that is designed to

69
00:04:10,050 --> 00:04:13,710
tackle these challenges Head on
making in the service communication

70
00:04:13,710 --> 00:04:16,230
not just manageable but effortless.

71
00:04:16,380 --> 00:04:20,519
'cause with Go For You don't just get a
framework, but you get an entire toolkit.

72
00:04:21,450 --> 00:04:25,650
Empowers you to focus on building
features and not start again with

73
00:04:25,650 --> 00:04:27,150
writing the whole boilerplate.

74
00:04:27,390 --> 00:04:31,349
Whether it is preventing cascading
failures with smart circuit breakers,

75
00:04:31,469 --> 00:04:35,729
securing every call with robust
authentication, or ensuring that your

76
00:04:35,729 --> 00:04:37,830
services stay healthy and monitored.

77
00:04:37,950 --> 00:04:40,380
Gopher does it all under one roof.

78
00:04:40,539 --> 00:04:44,229
And because it is modular, you
only use what you actually need.

79
00:04:44,380 --> 00:04:48,820
And since Gopher is open source, it has
evolved with its community to stay at its

80
00:04:48,820 --> 00:04:51,310
cutting edge with resilient system design.

81
00:04:51,460 --> 00:04:54,969
So let's dive deeper into its
key features that make it an

82
00:04:54,969 --> 00:04:59,229
efficient choice for Interservice
communications in microservices.

83
00:04:59,410 --> 00:05:04,060
In this section we'll be discussing few
of the gophers features like circuit

84
00:05:04,060 --> 00:05:09,130
breakers and retry configs in build
authentication observability, as well

85
00:05:09,220 --> 00:05:13,450
as health monitoring, which form the
pillars of resilient microservices.

86
00:05:13,510 --> 00:05:15,070
When we talk about retry confis.

87
00:05:15,575 --> 00:05:21,605
BofA allows you to add the number of
kind the framework must attempt or retry

88
00:05:21,815 --> 00:05:26,705
before actually returning your error in
case any downstream SGTP service fails.

89
00:05:26,795 --> 00:05:31,385
However, cost to remote resources and
services can fail due to temporary issues

90
00:05:31,385 --> 00:05:33,005
like slow network connections or timeouts.

91
00:05:33,810 --> 00:05:38,280
Service, UN availability, et cetera,
while transient falls can be mitigated

92
00:05:38,280 --> 00:05:42,270
using the RY pattern, there are cases
where continual ries are futile,

93
00:05:42,780 --> 00:05:44,670
such as severe service failures.

94
00:05:44,910 --> 00:05:49,650
In such scenarios, it is crucial for
applications to recognize where an

95
00:05:49,650 --> 00:05:54,000
operation is unlikely to succeed and
hand in the failure appropriately

96
00:05:54,270 --> 00:05:55,770
rather than persistently retrying.

97
00:05:56,250 --> 00:05:59,130
When we are talking about circuit
breakers are a design pattern

98
00:05:59,310 --> 00:06:01,229
inspired by electrical systems.

99
00:06:01,364 --> 00:06:05,174
Just like a circuit breaker stops the
flow of electricity during a fault.

100
00:06:05,414 --> 00:06:09,434
A software circuit breaker stops the
flow of requests to a failing service.

101
00:06:09,584 --> 00:06:13,544
This prevents cascading failures and
gives the system time to recover.

102
00:06:13,664 --> 00:06:16,634
Go makes implementing
circuit breakers effortless.

103
00:06:16,634 --> 00:06:20,539
With just a few lines of configuration,
you can set up the threshold

104
00:06:20,599 --> 00:06:22,400
and intervals for failing calls.

105
00:06:22,520 --> 00:06:25,879
For example, if a service fails
more than a specified number of

106
00:06:25,879 --> 00:06:30,409
times within a time window, gofer
automatically trips the circuit breaker.

107
00:06:30,530 --> 00:06:34,369
Once the service recovers, gofer
resets the breaker, allowing

108
00:06:34,369 --> 00:06:35,840
the request to flow again.

109
00:06:35,869 --> 00:06:38,014
Next, let's talk about authentication.

110
00:06:38,275 --> 00:06:43,280
In a microservices architecture, every
SGTP call is a potential security risk.

111
00:06:43,594 --> 00:06:47,284
Without proper authentication,
unauthorized access can lead to data

112
00:06:47,284 --> 00:06:50,135
breaches or even systemwide exploitation.

113
00:06:50,284 --> 00:06:54,094
Securing inter-service communication
here is non-negotiable.

114
00:06:54,185 --> 00:06:58,655
Gofer simplifies authentication with
built in support from multiple methods.

115
00:06:58,835 --> 00:07:03,365
Whether it is API, keys, basic
auth, or O gofer integrates these

116
00:07:03,365 --> 00:07:05,105
seamless into your services.

117
00:07:05,294 --> 00:07:09,555
You can configure authentication
globally or per service, ensuring

118
00:07:09,555 --> 00:07:11,775
that every call is secured by default.

119
00:07:11,984 --> 00:07:17,715
Now we encourage best practice like token
based authentication at award for secure

120
00:07:17,715 --> 00:07:22,844
and scale systems, and we also support
custom headers so we can pro, so you can

121
00:07:22,844 --> 00:07:27,765
propagate authentication tokens or other
metadata across services effortlessly.

122
00:07:27,765 --> 00:07:30,344
Next, let's talk about observability.

123
00:07:30,524 --> 00:07:33,404
Observability is a de
facto in a framework.

124
00:07:33,494 --> 00:07:36,944
It is one of the most unique
points that goer has to offer.

125
00:07:37,094 --> 00:07:41,444
Observability comprises of logs,
traces, and metrics, which comes by

126
00:07:41,444 --> 00:07:43,724
defaulting everything that GOER provides.

127
00:07:43,784 --> 00:07:47,139
And similar is the case for
Interservice, SGTP communication.

128
00:07:47,864 --> 00:07:52,934
All the outbound requests are actually
properly logged and the UN traces and

129
00:07:52,934 --> 00:07:57,945
metrics are exported to the specified
port as well as the tracer URL.

130
00:07:57,945 --> 00:08:02,744
We will dive deeper into this in the next
section where see a live demo of actually

131
00:08:02,744 --> 00:08:05,205
setting up STTP services in gofer.

132
00:08:05,394 --> 00:08:06,084
Moving on.

133
00:08:06,084 --> 00:08:10,314
If we discuss about health monitoring
in distributed systems, we need to know

134
00:08:10,314 --> 00:08:12,504
the health of the services all the time.

135
00:08:12,744 --> 00:08:16,194
And without proper monitoring,
issues can go unnoticed until

136
00:08:16,194 --> 00:08:18,384
they escalate into major outages.

137
00:08:18,504 --> 00:08:23,034
Gofer provides robust health monitoring
out of the box where we can configure

138
00:08:23,034 --> 00:08:25,224
the health endpoints for each services.

139
00:08:25,515 --> 00:08:27,969
And Gofo performs regular
health checks on them.

140
00:08:28,120 --> 00:08:31,749
It also collects the metrics
and logs giving us the realtime

141
00:08:31,749 --> 00:08:33,490
insights into our systems health.

142
00:08:33,670 --> 00:08:37,299
Many organizations usually pair
these health checks with alerting

143
00:08:37,299 --> 00:08:41,020
and dashboards, turning raw
data into actionable insights.

144
00:08:41,049 --> 00:08:45,490
For example, imagine a service that
starts responding slowly, go first's.

145
00:08:45,490 --> 00:08:49,060
Health monitoring can help you
detect this early, log the issue,

146
00:08:49,060 --> 00:08:51,040
and can even trigger alerts.

147
00:08:51,130 --> 00:08:54,700
This proactive approach can help
you resolve issues before they

148
00:08:54,700 --> 00:08:56,290
actually start impacting users.

149
00:08:56,774 --> 00:09:00,944
So all these features that is circuit
breakers authentication, observability,

150
00:09:01,694 --> 00:09:05,024
and health monitoring are just
the beginning of what GOER offers.

151
00:09:05,115 --> 00:09:09,315
In the next section, we see them in
action with a live demo, and you'll get

152
00:09:09,315 --> 00:09:14,145
to see how easy it is to build resilient,
secure, and observable systems with gofer.

153
00:09:14,234 --> 00:09:17,895
Let's not waste any more time,
and let's get coding with gofer.

154
00:09:18,554 --> 00:09:23,294
Gofer allows you to register SGTP
services at the application level

155
00:09:23,355 --> 00:09:25,665
using ADD SGTP service method.

156
00:09:26,040 --> 00:09:29,880
This means you can easily configure
interservice communication while

157
00:09:29,940 --> 00:09:31,980
keeping things clean and modular.

158
00:09:32,370 --> 00:09:37,079
So in our main function, we
can write app at sgtp service.

159
00:09:37,290 --> 00:09:40,710
We then give the service name with
which we would like to register

160
00:09:40,829 --> 00:09:42,450
as well as the service address.

161
00:09:42,990 --> 00:09:47,760
Services registered this way are managed
automatically by the gophers container.

162
00:09:48,259 --> 00:09:52,939
Once registered services can be accessed
anywhere using the method on gophers

163
00:09:52,939 --> 00:09:56,359
context as c PX dot get sgtp service.

164
00:09:57,319 --> 00:10:02,719
So let's define two routes in two
different projects in one of our projects.

165
00:10:02,719 --> 00:10:08,930
Let's set the STTP port and metrics
port as 80, 81 and 2020 respectively.

166
00:10:09,229 --> 00:10:10,099
And for the other.

167
00:10:10,459 --> 00:10:12,619
Let's keep it at 80, 80 and two.

168
00:10:12,619 --> 00:10:16,969
1 2 1. After setting up our
projects, let's define the

169
00:10:16,969 --> 00:10:18,800
routes in both of the projects.

170
00:10:19,189 --> 00:10:23,780
As for our applications workflow, for
simplicity purpose, we'll still be having

171
00:10:23,780 --> 00:10:28,130
just a Hello Handler, but the name that
we send in the response, we'll actually

172
00:10:28,130 --> 00:10:31,579
be fetched from the other service
that we call inside a Hello Handler.

173
00:10:32,079 --> 00:10:36,249
So for the other service, let's
go and define the name handler.

174
00:10:36,290 --> 00:10:38,145
And return a hardcoded name.

175
00:10:38,145 --> 00:10:40,245
Let's say my name, the we over there.

176
00:10:40,575 --> 00:10:44,085
So we write return the
We and Nel for the error.

177
00:10:44,715 --> 00:10:50,775
Then we go back to our existing project
and now add this SGTP service as we will

178
00:10:50,865 --> 00:10:54,110
be running the service at STTP Port 80 81.

179
00:10:54,500 --> 00:10:59,540
So the service address will be
SGTP, local host 80 81, and we

180
00:10:59,540 --> 00:11:03,230
then give the service name with
which we would like to register it.

181
00:11:03,730 --> 00:11:08,290
Moving on, we define a Hello Handler
inside, which we then get the registered

182
00:11:08,290 --> 00:11:13,035
SGTP service using GET SGTP Service
Method on the go first context.

183
00:11:13,535 --> 00:11:18,275
Then we call the GET method on that
service, specifying the get endpoint

184
00:11:18,275 --> 00:11:22,865
that we have registered on our other
service, and then give the argument

185
00:11:22,865 --> 00:11:27,214
as name that is the endpoint that
must be hit on our registered service.

186
00:11:27,785 --> 00:11:30,845
We then return the response
received if we encounter no error.

187
00:11:31,345 --> 00:11:33,325
Now let's run both of our services.

188
00:11:33,355 --> 00:11:38,335
And go to Postman and hit a URL that
is local host 80 80 slash hello.

189
00:11:38,835 --> 00:11:43,265
We can see that we get hello the is
actually Freshed from the other server.

190
00:11:44,015 --> 00:11:47,675
If we also look at the logs in our
terminal, we can see that go for

191
00:11:47,675 --> 00:11:52,025
also logs Be call to any external
S TT P services that you called

192
00:11:52,085 --> 00:11:53,975
inside your running applications.

193
00:11:54,305 --> 00:11:56,195
Having the same correlation id.

194
00:11:56,255 --> 00:12:01,115
As the parent span where it is called,
we can also go and check the traces and

195
00:12:01,115 --> 00:12:03,605
see that the traces are in a hierarchy.

196
00:12:03,815 --> 00:12:06,995
One of go first's strength is
its flexibility in configuring

197
00:12:06,995 --> 00:12:11,045
interservice communication, making
it both powerful and simple to use.

198
00:12:11,405 --> 00:12:15,065
Let's start with authentication
methods and then move on to the other

199
00:12:15,065 --> 00:12:18,785
configurable options like circuit
breakers, retries, and health checks

200
00:12:18,815 --> 00:12:21,305
in gopher, authentication in Gopher.

201
00:12:21,720 --> 00:12:24,450
When services communicate,
they must be secure.

202
00:12:24,570 --> 00:12:29,190
Goer provides multiple authentication
options to ensure only authorized

203
00:12:29,190 --> 00:12:31,800
services can interact like API.

204
00:12:31,800 --> 00:12:37,235
Key authentication, basic authentication,
and OAuth basic authentication.

205
00:12:37,235 --> 00:12:42,245
Uses a username and password to verify
identity before processing the request.

206
00:12:42,755 --> 00:12:46,145
API Key authentication is
a straightforward method.

207
00:12:46,175 --> 00:12:51,935
Where request must include a predefined
secret, API Key and OAuth authentication

208
00:12:51,935 --> 00:12:56,585
is ideal for external API access
requiring a client ID client, secret

209
00:12:56,585 --> 00:13:00,815
token, URL, et cetera, to fetch
authentication tokens dynamically.

210
00:13:01,025 --> 00:13:04,475
Each method serves a different
security need, allowing you

211
00:13:04,475 --> 00:13:05,945
to choose what fits best.

212
00:13:06,275 --> 00:13:09,875
Now, while making API requests,
we often include headers like.

213
00:13:09,945 --> 00:13:12,495
User agent, content type, et cetera.

214
00:13:13,065 --> 00:13:16,875
Some of these headers stay the
same for all requests, while others

215
00:13:16,875 --> 00:13:21,975
change dynamically depending upon
the request context, the header, for

216
00:13:21,975 --> 00:13:24,345
example, content type application.

217
00:13:24,345 --> 00:13:26,895
JSON always remains the same.

218
00:13:26,955 --> 00:13:32,685
Most of the times for the API request, so
to avoid adding them manually every time.

219
00:13:32,715 --> 00:13:37,365
COFA lets you define default headers once,
and they're automatically added to all of

220
00:13:37,365 --> 00:13:39,825
your requests sent to that SGTP service.

221
00:13:40,185 --> 00:13:42,705
Also, when working with multiple services.

222
00:13:42,705 --> 00:13:45,940
We must ensure they're available
before sending the request.

223
00:13:46,270 --> 00:13:50,410
Gofer lets you configure custom
health checks that pings a services

224
00:13:50,410 --> 00:13:52,930
health endpoint at regular intervals.

225
00:13:53,170 --> 00:13:56,830
If the health check fails, gofer
marks the service as unavailable

226
00:13:56,830 --> 00:13:58,360
and stop sending request.

227
00:13:58,690 --> 00:13:59,380
The Health Check.

228
00:13:59,380 --> 00:14:02,710
Timeout ensures that if a service
doesn't respond within a given

229
00:14:02,710 --> 00:14:04,750
time, go for treats it as down.

230
00:14:05,260 --> 00:14:06,610
This prevents long waits.

231
00:14:06,620 --> 00:14:08,570
And help protect failures faster.

232
00:14:09,410 --> 00:14:13,160
Now, these failures happen due
to network delays, temporary

233
00:14:13,160 --> 00:14:15,320
outages, or high server load.

234
00:14:15,560 --> 00:14:19,670
So instead of failing immediately,
we can also configure our SGTP

235
00:14:19,670 --> 00:14:21,890
services to automatically retry the.

236
00:14:22,060 --> 00:14:23,920
Request for a specified number of time.

237
00:14:24,340 --> 00:14:29,350
For example, if a payment service
times out gofer allows you to set

238
00:14:29,350 --> 00:14:33,610
up a retry config that helps you
to retry, for example, up to five

239
00:14:33,610 --> 00:14:35,590
times before marking it as a failure.

240
00:14:36,250 --> 00:14:40,240
This improves reliability by
handling temporary issues gracefully.

241
00:14:40,480 --> 00:14:44,680
While these retries help with temporary
failures, they aren't always the

242
00:14:44,680 --> 00:14:49,390
solution because cost to external
services can fail repeatedly due to

243
00:14:49,390 --> 00:14:54,285
a. Service being completely down high
traffic, causing extreme delays and

244
00:14:54,285 --> 00:14:56,595
misconfiguration or deployment issues.

245
00:14:57,165 --> 00:15:02,325
Rying indefinitely in such cases, can
base resources and can overload the

246
00:15:02,325 --> 00:15:04,380
failing service, making things even worse.

247
00:15:05,160 --> 00:15:09,150
If multiple clients keep retrying,
this could even lead to an accidental

248
00:15:09,420 --> 00:15:11,790
denial of service attack on your system.

249
00:15:12,030 --> 00:15:15,740
So instead of blindly retrying,
gofo introduces a circuit breaker

250
00:15:15,740 --> 00:15:19,670
pattern that can protect your system
by detecting the repetitive failures

251
00:15:19,700 --> 00:15:21,740
and stopping request to that service.

252
00:15:22,105 --> 00:15:26,545
Changing its state to open when
failures exceed the threshold, making

253
00:15:26,545 --> 00:15:30,955
periodic requests to the health check
endpoint that is by default slash

254
00:15:31,285 --> 00:15:35,935
wellknown slash alive at the interval
set in the config and automatically

255
00:15:35,935 --> 00:15:41,425
resuming this request being sent to the
service once the service recovers by.

256
00:15:41,425 --> 00:15:45,025
Using this gopher ensures your
system stays stable without

257
00:15:45,025 --> 00:15:46,915
overwhelming failing services.

258
00:15:47,065 --> 00:15:49,285
With this, we come to
the end of this video.

259
00:15:49,435 --> 00:15:52,495
Let's take a moment to recap
what we have covered today.

260
00:15:52,675 --> 00:15:55,945
We started by exploring the
challenges that you usually face

261
00:15:55,945 --> 00:15:58,045
in interservice SG communication.

262
00:15:58,045 --> 00:16:00,955
That is latency, failures, and security.

263
00:16:01,045 --> 00:16:04,135
We then explored BofA, which is
a framework that is designed to

264
00:16:04,135 --> 00:16:08,545
tackle these challenges head on and
deep dived into its features that

265
00:16:08,545 --> 00:16:10,285
is circuit breaker for resilience.

266
00:16:10,465 --> 00:16:14,485
Authentication for security
observability and health monitoring.

267
00:16:14,695 --> 00:16:18,535
And finally, we saw these
features in action in a live demo.

268
00:16:18,685 --> 00:16:22,525
So if you are as excited about
goer as I am, I encourage you

269
00:16:22,525 --> 00:16:24,685
to try goer in your own project.

270
00:16:24,805 --> 00:16:27,685
Whether you are building a new
microservice or enhancing an

271
00:16:27,685 --> 00:16:31,090
existing one, goer can help you
focus on what matters the most.

272
00:16:31,525 --> 00:16:33,895
That is delivering value to your users.

273
00:16:34,015 --> 00:16:39,025
For more info checkout or documentation
at goer, you can also join our Discord

274
00:16:39,025 --> 00:16:42,625
channel for any feedback or design
discussions regarding the same.

275
00:16:42,805 --> 00:16:44,845
Thank you so much for joining me today.

276
00:16:44,845 --> 00:16:47,905
I hope this session can give
you a clear understanding of how

277
00:16:47,905 --> 00:16:51,685
GOER can simplify interservice
communication and microservices.

278
00:16:51,805 --> 00:16:54,295
If you have any questions
or want to learn more.

279
00:16:54,510 --> 00:16:58,260
Please feel free to visit our website
and reach out to our community.

280
00:16:58,410 --> 00:17:02,610
Let's continue building resilient,
secure, and observable systems together.

281
00:17:02,760 --> 00:17:04,830
Thanks for watching and enjoy the rest of.

