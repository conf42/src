1
00:00:00,500 --> 00:00:05,150
Hi, I'm VA Boyer and I'm a
developer advocate at IWS.

2
00:00:05,650 --> 00:00:10,420
Hello, I'm VA Boyer and I'm a developer
advocate at Amazon Web Services.

3
00:00:10,900 --> 00:00:15,400
So today I'll talk about application
resilience and we'll look to answer

4
00:00:15,400 --> 00:00:17,320
the question, whose job is it?

5
00:00:17,320 --> 00:00:19,450
Anyway, thank you for joining.

6
00:00:19,950 --> 00:00:25,380
During my recent talks on continuous
resilience, I've been asked many

7
00:00:25,380 --> 00:00:27,090
thought provoking questions.

8
00:00:27,660 --> 00:00:30,869
One of the questions that I keep
being asked time and time again

9
00:00:30,919 --> 00:00:35,360
is it possible for application
resilience and innovation to coexist?

10
00:00:35,839 --> 00:00:41,629
So in this session, we'll look at a few
features to look to answer this question.

11
00:00:41,629 --> 00:00:42,589
So we'll look at.

12
00:00:43,089 --> 00:00:46,179
Cultural transformation
for digital transformation.

13
00:00:46,929 --> 00:00:49,959
And then we'll look at the
shared responsibility model

14
00:00:50,019 --> 00:00:51,519
in software development.

15
00:00:52,149 --> 00:00:55,179
And then lastly, we will look
at the technical considerations

16
00:00:55,179 --> 00:00:56,829
for shared responsibility.

17
00:00:57,609 --> 00:01:02,139
We'll look at how all these points work
together to ensure the coexistence of

18
00:01:02,139 --> 00:01:04,749
application resilience and innovation.

19
00:01:05,079 --> 00:01:05,815
So let's begin.

20
00:01:06,315 --> 00:01:10,304
So beyond application resilience,
organizations are looking to

21
00:01:10,304 --> 00:01:11,925
innovate for their customers.

22
00:01:12,464 --> 00:01:17,175
So the questions they ask themselves
is, does the pursuit of application

23
00:01:17,175 --> 00:01:19,815
resilience not hold back innovation?

24
00:01:20,315 --> 00:01:24,065
How do teams organize in order
to ensure that there is both

25
00:01:24,065 --> 00:01:26,825
application resilience and innovation?

26
00:01:27,245 --> 00:01:32,465
And who in the team is responsible
for application resilience and who is

27
00:01:32,465 --> 00:01:34,804
responsible for applic for innovation?

28
00:01:35,304 --> 00:01:39,234
So I talked about continuous
resilience and a quick catch up on what

29
00:01:39,294 --> 00:01:41,335
continuous resilience is all about.

30
00:01:41,934 --> 00:01:47,514
Continuous resilience is when teams move
away from a robustness centric approach

31
00:01:47,574 --> 00:01:49,975
to instead facing up to the fact that.

32
00:01:50,330 --> 00:01:55,429
Applications will fail at some point, and
thus embracing failure with an intention

33
00:01:55,429 --> 00:02:00,559
to build capabilities that ensure that
there's resilience in the applications

34
00:02:00,860 --> 00:02:03,499
when they ultimately experience failure.

35
00:02:03,499 --> 00:02:03,529
I.

36
00:02:04,030 --> 00:02:08,530
Organizations that seek to digitally
transform and become tomorrows disruptors

37
00:02:08,919 --> 00:02:12,790
are not able to do this without
undergoing cultural transformation

38
00:02:13,720 --> 00:02:16,239
silos in software development or care.

39
00:02:16,630 --> 00:02:21,760
When various roles that contribute towards
software development rarely interact

40
00:02:21,760 --> 00:02:26,859
or talk to each other, ultimately this
results in the absence of teamwork.

41
00:02:27,815 --> 00:02:32,285
Silos within a software development
lifecycle get in the way of communication

42
00:02:32,285 --> 00:02:36,695
and collaboration, thus slowing
down innovation and the delivery

43
00:02:36,695 --> 00:02:38,555
of business value to customers.

44
00:02:39,125 --> 00:02:43,625
It's also worth mentioning that silos
can introduce conflicts within roles,

45
00:02:43,954 --> 00:02:48,305
which can manifest through statements
such as that is not my job, and

46
00:02:48,305 --> 00:02:52,355
further compromising a quality product
being delivered to the customer.

47
00:02:52,854 --> 00:02:57,774
So as teams seek to move out of the
silo development approach, communication

48
00:02:57,774 --> 00:03:00,224
between teams becomes very important.

49
00:03:00,854 --> 00:03:05,384
Communication moves teams towards
a shared responsibility model, and

50
00:03:05,384 --> 00:03:07,244
it's very important for innovation.

51
00:03:08,144 --> 00:03:12,644
So there are tools that teams
can explore that support,

52
00:03:12,644 --> 00:03:14,714
collaboration and communication.

53
00:03:14,714 --> 00:03:18,464
So teams can explore tools that
better support collaboration

54
00:03:18,464 --> 00:03:19,874
during software development.

55
00:03:20,429 --> 00:03:24,569
Tools like GitHub are very popular
among developers as they offer

56
00:03:24,569 --> 00:03:28,139
collaborative features that
make life easier for developers.

57
00:03:28,169 --> 00:03:33,179
Features such as code reviews, pool
request notifications, and more.

58
00:03:33,679 --> 00:03:37,789
Software development projects can be
better organized using tools such as

59
00:03:37,849 --> 00:03:43,819
Trello, which lets teams organize projects
into boards so that teams can have a view

60
00:03:44,179 --> 00:03:48,439
of us on the to-do list, what's being
worked on and what's done in order to

61
00:03:48,439 --> 00:03:50,899
eliminate confusion with project status.

62
00:03:51,399 --> 00:03:54,039
So I briefly talked about shared
responsibility model in the

63
00:03:54,039 --> 00:03:57,549
previous section, and I'll expand
on it a little bit more here.

64
00:03:58,049 --> 00:04:02,129
Good quality code is only just
one of the contributing factors in

65
00:04:02,129 --> 00:04:07,739
application resilience, performance
efficiency, security and functional

66
00:04:07,739 --> 00:04:12,719
suitability go hand in hand with good
quality code towards contributing

67
00:04:13,219 --> 00:04:14,884
towards your application resilience.

68
00:04:15,394 --> 00:04:19,204
If you decide to tackle these
contributing factors individually,

69
00:04:19,594 --> 00:04:23,844
it's easy to fall back into siloed
functions where individual roles

70
00:04:23,994 --> 00:04:28,314
within teams are responsible for only
some of these contributing factors.

71
00:04:28,314 --> 00:04:33,699
I. It's however more beneficial for
everyone in the team and ultimately

72
00:04:33,699 --> 00:04:37,900
in the organizations to make
quality a shared responsibility.

73
00:04:38,259 --> 00:04:43,989
This approach reduces development costs
and ultimately the customer or the end

74
00:04:43,989 --> 00:04:46,359
user benefits from a better product.

75
00:04:46,859 --> 00:04:52,739
Now I'm going to paraphrase Eric Madar,
who wrote for devops.com, and he said

76
00:04:52,739 --> 00:04:58,889
that team members are equally ultimately
responsible for application resilience.

77
00:04:59,389 --> 00:05:03,739
Outdated organizational structures,
however, tend to place responsibilities

78
00:05:03,739 --> 00:05:08,509
on a single employee, on a
single team, or on a single role.

79
00:05:09,009 --> 00:05:14,439
Organizing team structures around products
instead of projects will accelerate

80
00:05:14,439 --> 00:05:19,449
innovation and increase the quality
of work due to increased collaboration

81
00:05:19,449 --> 00:05:21,879
that is fostered by this team structure.

82
00:05:22,449 --> 00:05:25,059
So now I'm talking about
shared responsibility.

83
00:05:25,449 --> 00:05:29,259
I'm talking about collaboration,
and it's starting to sound like I

84
00:05:29,259 --> 00:05:34,329
have gone and started a whole other
conversation on a popular term.

85
00:05:34,434 --> 00:05:34,464
DevOps.

86
00:05:34,964 --> 00:05:39,854
So in the book DevOps for Dummies,
author Emily Freeman describes

87
00:05:39,854 --> 00:05:44,234
DevOps as a philosophy that is
meant to build a culture of trust,

88
00:05:44,744 --> 00:05:49,634
a culture of collaboration, and a
culture of continuous improvement.

89
00:05:50,134 --> 00:05:55,354
So Emily Feather goes on to give a guide
on how to design your organization so

90
00:05:55,354 --> 00:05:59,705
that you support this collaboration
and this continuous improvement.

91
00:06:00,499 --> 00:06:05,090
So is the culture of your organization
healthy in that the worst of tech

92
00:06:05,090 --> 00:06:10,069
culture is avoided with diversity
of thought being encouraged?

93
00:06:11,030 --> 00:06:14,389
Are your team members empowered
to make dec decisions without

94
00:06:14,449 --> 00:06:18,139
always consulting management for
every decision that they make?

95
00:06:18,639 --> 00:06:23,439
So staying with this topic of DevOps
a little bit longer, it is worth

96
00:06:23,439 --> 00:06:28,059
reiterating that building a common
DevOps team or having DevOps forecast

97
00:06:28,059 --> 00:06:32,439
members in the team introduces
shared responsibility in the team.

98
00:06:32,939 --> 00:06:39,629
So over time, several essential practices
have emerged when teams are adopting

99
00:06:39,629 --> 00:06:46,379
DevOps, and these practices are continuous
integration, continuous delivery.

100
00:06:47,144 --> 00:06:52,874
Infrastructure is code and monitoring and
logging, but we will look at these in a

101
00:06:52,874 --> 00:06:55,064
little bit more detail a little bit later.

102
00:06:55,564 --> 00:07:00,604
So talking about technical considerations
for a shared responsibility.

103
00:07:01,104 --> 00:07:05,304
So now that the culture has
been addressed, what technical

104
00:07:05,639 --> 00:07:09,474
considerations will support this
shared responsibility in teams?

105
00:07:09,974 --> 00:07:13,364
First we look at distributed
architectures and how they can

106
00:07:13,364 --> 00:07:15,974
support this shared responsibility.

107
00:07:16,474 --> 00:07:20,684
So there is this really
insightful books that I read.

108
00:07:21,194 --> 00:07:26,054
It's the title of the book is Fundamentals
of Software Architecture, where the

109
00:07:26,054 --> 00:07:31,784
authors contrast to architecture
styles monolithic versus distributed.

110
00:07:32,284 --> 00:07:37,564
Monolithic is described as a single
deployment unit of all your code, or as

111
00:07:37,564 --> 00:07:43,304
distributed is described as involving
multiple deployment units that are

112
00:07:43,304 --> 00:07:46,124
connected through remote access protocols.

113
00:07:46,624 --> 00:07:50,644
An example of a distributed architecture
is a microservices architecture.

114
00:07:51,140 --> 00:07:54,860
Which is an architectural style
that structures an application as a

115
00:07:54,860 --> 00:08:00,559
collection of loosely coupled services,
which implement business capabilities.

116
00:08:01,059 --> 00:08:06,009
It's a way of breaking up a monolithic
software into various components that

117
00:08:06,009 --> 00:08:11,199
can function separately, that have
specific tasks and that communicate with

118
00:08:11,349 --> 00:08:16,959
each other through a simple application
programming interface known as an API.

119
00:08:17,459 --> 00:08:22,619
The second technical consideration that
tends to support shared responsibility

120
00:08:22,619 --> 00:08:25,859
is continuous integration and delivery.

121
00:08:26,759 --> 00:08:32,579
So there's a white paper by AWS that
introduces DevOps, and this white paper

122
00:08:32,579 --> 00:08:37,799
highlights AWS capabilities that help
you accelerate your DevOps journey.

123
00:08:38,429 --> 00:08:43,559
And it also talks about services that can
help remove the undifferentiated heavy

124
00:08:43,559 --> 00:08:45,209
lifting that's associated with DevOps.

125
00:08:46,034 --> 00:08:46,814
Adaptation.

126
00:08:47,534 --> 00:08:53,594
It expands on these essential practices
when adopting DevOps, some of which are

127
00:08:53,594 --> 00:08:56,024
already briefly talked about previously.

128
00:08:56,834 --> 00:09:03,104
So this white paper highlights AWS
capabilities that help you accelerate

129
00:09:03,435 --> 00:09:05,414
when you are on your DevOps journey.

130
00:09:05,774 --> 00:09:08,555
And I already talked
about the services that.

131
00:09:08,645 --> 00:09:13,625
Are available that can help
you remove all this work that

132
00:09:13,625 --> 00:09:16,265
goes with you adopting DevOps.

133
00:09:16,985 --> 00:09:18,605
So what are these practices?

134
00:09:19,105 --> 00:09:21,775
The first practice is
continuous integration.

135
00:09:22,705 --> 00:09:27,175
Continuous integration is a software
development practice where developers

136
00:09:27,655 --> 00:09:33,025
regularly merge their code changes
into a central repository, after which

137
00:09:33,355 --> 00:09:36,085
automated bills and tests are then run.

138
00:09:36,585 --> 00:09:41,535
GitHub Actions is a continuous integration
and continuous delivery platform that

139
00:09:41,535 --> 00:09:46,485
allows you to automate your, build your
test, and your deployment pipeline.

140
00:09:47,205 --> 00:09:52,395
It lets you create workflows that
build and test every pool request

141
00:09:52,515 --> 00:09:57,495
to your repository or deploy,
merge pool requests to production.

142
00:09:57,995 --> 00:10:01,265
The next practice we'll look
at is infrastructure is code.

143
00:10:01,765 --> 00:10:05,814
Infrastructure as code is a practice
in which infrastructure is provisioned

144
00:10:05,814 --> 00:10:10,824
and managed using code and software
development techniques such as vision

145
00:10:10,824 --> 00:10:13,045
control and continuous integration.

146
00:10:13,735 --> 00:10:18,655
So when we talk about infrastructure
as code, look at considering tools

147
00:10:18,655 --> 00:10:23,035
like Terraform, which lets you automate
the provision of your infrastructure,

148
00:10:23,035 --> 00:10:28,045
including databases, servers, and
firewall policies among others

149
00:10:28,435 --> 00:10:30,625
across multiple cloud platforms.

150
00:10:31,125 --> 00:10:35,505
If you're looking to get started with
Terraform, you will find a link that

151
00:10:35,505 --> 00:10:40,334
I will share at the end of this talk
that will help you get started with

152
00:10:40,515 --> 00:10:42,344
infrastructure as code and terraform.

153
00:10:42,844 --> 00:10:44,884
Then we look at monitoring and logging.

154
00:10:45,384 --> 00:10:49,854
Monitoring and logging enables
organizations to see how application and

155
00:10:49,854 --> 00:10:55,014
infrastructure performance impacts the
experience of their products and user.

156
00:10:55,514 --> 00:11:00,704
Open Telemetry is a collection of
tools, collection of APIs and SDKs.

157
00:11:01,604 --> 00:11:06,464
Use it to instrument to generate,
to collect and to export telemetry

158
00:11:06,464 --> 00:11:11,054
data such as metrics, logs, and
traces to help you analyze your

159
00:11:11,054 --> 00:11:13,094
software's performance and behavior.

160
00:11:13,594 --> 00:11:17,434
At the end of this talk, I do
link a tutorial that is very

161
00:11:17,434 --> 00:11:20,674
helpful if you're looking to
get started with open telemetry.

162
00:11:21,174 --> 00:11:25,874
Now we will look at communication and
collaboration practices are established

163
00:11:25,874 --> 00:11:30,584
to bring teams closer and by building
workflows and distributing the

164
00:11:30,584 --> 00:11:33,524
responsibilities for communications.

165
00:11:34,024 --> 00:11:39,094
When we talk about security, security
should be a crosscutting consent.

166
00:11:39,904 --> 00:11:43,444
Your continuous integration in
your continuous delivery pipelines

167
00:11:43,924 --> 00:11:48,274
and all related services should
be safeguarded and proper access

168
00:11:48,274 --> 00:11:50,074
control permissions should be set up.

169
00:11:50,574 --> 00:11:56,289
The Open web application security project
known as OSP is a foundation that works

170
00:11:56,289 --> 00:11:58,389
to improve the security of software.

171
00:11:58,889 --> 00:12:03,839
Their programs include community led
open source software projects, and they

172
00:12:03,839 --> 00:12:07,769
have over 250 local chapters worldwide.

173
00:12:08,699 --> 00:12:14,489
The OS Foundation has published a list
of top 10 security risks to avoid in

174
00:12:14,549 --> 00:12:19,634
order to change the software development
culture towards a more secure culture.

175
00:12:20,134 --> 00:12:25,624
So to conclude, it seems that
the old saying remains true.

176
00:12:26,124 --> 00:12:30,084
You cannot keep on doing the same
things and expecting different results.

177
00:12:30,924 --> 00:12:35,304
Teams will have to evolve in order to
ensure innovation for their customers.

178
00:12:35,804 --> 00:12:39,944
Teams will have to evolve into a
shared responsibility model in order

179
00:12:39,944 --> 00:12:44,384
to be better positioned to work
towards application resilience.

180
00:12:44,884 --> 00:12:49,684
So to end, I asked you a few questions
that I want to leave you with.

181
00:12:50,184 --> 00:12:54,714
Do you still have siloed functions as
part of a software development cycle?

182
00:12:55,584 --> 00:12:59,424
Another question I would ask you
is, are you in the process of

183
00:12:59,424 --> 00:13:03,294
transitioning from siloed functions
to a shared responsibility team?

184
00:13:03,864 --> 00:13:07,614
And I'd also ask you, have
you fully transitioned to a

185
00:13:07,614 --> 00:13:09,444
shared responsibility team?

186
00:13:09,944 --> 00:13:15,105
With that, I thank you very much and if
you scan that QR code, you will access

187
00:13:15,105 --> 00:13:17,655
a link where you will find my LinkedIn.

188
00:13:18,585 --> 00:13:22,125
Please do connect and also you'll
find all the links that I've been

189
00:13:22,125 --> 00:13:23,925
talking about throughout this talk.

190
00:13:24,824 --> 00:13:25,215
Thank you.

