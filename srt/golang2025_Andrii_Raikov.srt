1
00:00:00,210 --> 00:00:01,410
Hello everyone.

2
00:00:01,800 --> 00:00:07,410
I'm Andre and I'm here to present,
the Rabbit Hole of Dependency in

3
00:00:07,410 --> 00:00:10,910
Goal and let's slowly get started.

4
00:00:11,599 --> 00:00:14,509
First of all, again, I am Andre.

5
00:00:14,570 --> 00:00:17,210
I am a principles of twin
engineer at Delivery here.

6
00:00:17,960 --> 00:00:25,290
We are using Goal a lot in all of our
services, and I have a lot of examples.

7
00:00:25,769 --> 00:00:30,109
Good and bad, how to work with,
dependencies, and that's why

8
00:00:30,109 --> 00:00:34,969
today I want to show you, some
problems we had in our code base.

9
00:00:35,469 --> 00:00:40,940
So if you want to, contact me and
discuss some of the topics, you can

10
00:00:41,089 --> 00:00:43,650
easily, contact me by any of this.

11
00:00:44,400 --> 00:00:48,430
LinkedIn or, Twitter or Medium, whatever.

12
00:00:48,669 --> 00:00:50,739
Please feel free to reach me out there.

13
00:00:51,239 --> 00:00:53,400
yeah, let's slowly get started.

14
00:00:53,519 --> 00:00:59,009
And first of all, I want to ask
you, can you clearly name couple of

15
00:00:59,009 --> 00:01:03,239
dependencies in your current goal
and project and why do you need them?

16
00:01:03,739 --> 00:01:10,539
Just take your time, think a bit
about this and, the next question

17
00:01:10,539 --> 00:01:14,649
I would like to ask you, can you
clearly the name, couple of indirect

18
00:01:14,649 --> 00:01:18,779
dependencies in your goal and
project, and why do you need them?

19
00:01:19,559 --> 00:01:27,780
Again, take maybe, press some, pause
on the video and think about, but

20
00:01:28,110 --> 00:01:32,740
during the presentation, I would,
ask you now to think about this.

21
00:01:33,369 --> 00:01:35,469
and yeah, but we are going through.

22
00:01:35,969 --> 00:01:39,704
first of all, I prepare a very
simple goal program for you

23
00:01:40,364 --> 00:01:42,134
and yeah, you see it almost.

24
00:01:42,299 --> 00:01:44,219
It doesn't have any dependency.

25
00:01:44,219 --> 00:01:46,379
It doesn't have any glue in the program.

26
00:01:46,619 --> 00:01:50,969
It uses very default print
end and it prints volt.

27
00:01:51,539 --> 00:01:57,600
So if we just take this and compile
our Compile it file will be, or

28
00:01:57,600 --> 00:01:59,850
almost one and a half megabytes.

29
00:02:00,350 --> 00:02:05,185
this sounds decent, is a
B. We in my presentation.

30
00:02:05,685 --> 00:02:08,384
Let's just to use some imports.

31
00:02:08,415 --> 00:02:12,945
Let's import very another very
standard library from their goal.

32
00:02:12,945 --> 00:02:14,204
And it's FMT.

33
00:02:14,655 --> 00:02:15,855
Everyone is using it.

34
00:02:16,200 --> 00:02:22,065
It, I can't imagine any goal and
projects where this is not being used.

35
00:02:22,425 --> 00:02:24,255
So we are using FMT to do the same.

36
00:02:24,255 --> 00:02:30,495
Just to print Hello Vault, and
check how cha how the size of our

37
00:02:30,495 --> 00:02:32,625
application is going to change.

38
00:02:33,315 --> 00:02:34,755
Surprising, surprising.

39
00:02:34,875 --> 00:02:40,945
It's actually changed it, and it is two
more, one more megabyte in the project.

40
00:02:41,845 --> 00:02:45,904
So if you compare, the size of
our application, it's actually

41
00:02:45,904 --> 00:02:48,334
changed it almost in half.

42
00:02:48,755 --> 00:02:52,475
It's plus 50% of compared
to the previous result.

43
00:02:52,975 --> 00:02:59,904
And, why this happens, I will explain a
bit more in the, And let's look, if we

44
00:03:00,504 --> 00:03:03,174
add more dependencies into your code.

45
00:03:03,894 --> 00:03:09,774
So we added in o why we agent, because
we want to read some, we provide in

46
00:03:09,774 --> 00:03:14,964
when we on the program, and maybe I put
them, for example, just put my name.

47
00:03:15,054 --> 00:03:15,474
Hello.

48
00:03:15,624 --> 00:03:21,264
and, if you go into compile this, the
compile it, size of the competitive

49
00:03:21,264 --> 00:03:23,484
program almost doesn't change.

50
00:03:23,934 --> 00:03:27,384
And this is something which,
already should, rings a bell.

51
00:03:27,504 --> 00:03:28,314
What is going on?

52
00:03:28,314 --> 00:03:34,664
Actually, I just edit maybe huge, another
dependency to the code, but actually

53
00:03:34,664 --> 00:03:37,049
it's not reflected in the, application.

54
00:03:37,094 --> 00:03:37,454
Yeah.

55
00:03:37,454 --> 00:03:41,184
And here you can see, if
you compare it was 51%.

56
00:03:41,244 --> 00:03:42,534
Right now it's 53.

57
00:03:42,534 --> 00:03:49,104
But yeah, not the big change, but
the answer, to this, not, this is

58
00:03:49,104 --> 00:03:54,784
not a problem, but answer to this,
puzzle, lies in the FMT library.

59
00:03:55,174 --> 00:03:59,324
If you check FMT Library, you will
find out that, in print go and.

60
00:03:59,589 --> 00:04:05,149
Some other of them you actually
already include in IO and o Libraries.

61
00:04:05,629 --> 00:04:10,909
So this is a hidden dependency
coming this FMT, when you include

62
00:04:10,909 --> 00:04:13,789
it, all of this is actually used.

63
00:04:13,889 --> 00:04:16,159
for example, reflect io.

64
00:04:16,159 --> 00:04:22,939
We are using, I don't know, for output
in your prints to some re writers.

65
00:04:23,549 --> 00:04:29,569
It's very common in GoLink reflect you
might use if you, for example, when

66
00:04:29,569 --> 00:04:34,319
you format it, you want to output the
type of your, variable you providing.

67
00:04:34,709 --> 00:04:41,899
Or if you want to print, some information
about the content of the object, SST Con

68
00:04:41,899 --> 00:04:48,329
we're using to convert integer, or not
only integer, but numbers and into strings

69
00:04:48,829 --> 00:04:51,049
sync is puzzle me why we need sync.

70
00:04:51,049 --> 00:04:55,109
But most probably, it has
some usages in the packages.

71
00:04:55,229 --> 00:04:59,909
And yeah, for sure you have Unicode
because you made play around with Unicode.

72
00:05:00,629 --> 00:05:07,049
So when you include fmt, you also include
a bunch of other dependencies among this.

73
00:05:07,549 --> 00:05:12,579
This is something you need to understand
when you are working this, your program.

74
00:05:13,079 --> 00:05:15,059
So yeah, this is what I already mentioned.

75
00:05:15,569 --> 00:05:21,149
Agent FMT, you bring a lot of hidden
dependencies and this hidden dependencies,

76
00:05:21,149 --> 00:05:23,759
they may have another hidden dependencies.

77
00:05:24,249 --> 00:05:28,244
and we can go into this
rabbit hole very deep.

78
00:05:28,454 --> 00:05:33,914
Maybe I don't recommend, but
yeah, we can do this actually.

79
00:05:34,414 --> 00:05:39,914
So if we, try to do something more
sophisticated or what I wanted

80
00:05:39,914 --> 00:05:45,564
to experiment, I, okay, if I move
my coat to some external library,

81
00:05:45,894 --> 00:05:50,874
how this is going to affect the
size of my package at the end.

82
00:05:51,324 --> 00:05:53,124
So I created external library.

83
00:05:53,124 --> 00:05:53,394
This is.

84
00:05:53,894 --> 00:05:58,384
Of this library and, yeah,
I format it as a library.

85
00:05:58,444 --> 00:06:02,664
I upload to the GitHub and
I imported it in my program.

86
00:06:02,874 --> 00:06:07,734
So it's a simple function,
message, print, and when I compile

87
00:06:07,734 --> 00:06:09,504
it and when I check the size.

88
00:06:10,239 --> 00:06:12,039
The size almost didn't change.

89
00:06:12,459 --> 00:06:17,419
So moving your dependency to a external
library doesn't, bring something

90
00:06:17,419 --> 00:06:21,859
new actually, because you already
have all of this in your program.

91
00:06:22,359 --> 00:06:25,659
So yeah, if you compare
size almost didn't change.

92
00:06:25,659 --> 00:06:26,649
Absolutely the same.

93
00:06:27,149 --> 00:06:33,439
So then the need to ask ourselves a
couple of questions, what if we try

94
00:06:33,439 --> 00:06:35,554
to do something more interesting?

95
00:06:36,154 --> 00:06:40,834
And like we were playing around
with pretty simple quote before

96
00:06:41,334 --> 00:06:43,264
we were just, printing some out.

97
00:06:43,324 --> 00:06:49,884
What if I need to, print out the list
of, S3 buckets I have in my account?

98
00:06:50,814 --> 00:06:53,664
And the quote for this program
will be also very simple,

99
00:06:54,564 --> 00:06:55,914
compared to the previous one.

100
00:06:55,914 --> 00:07:01,184
So we have some external dependencies we
introducing, Some generic library for AWS.

101
00:07:01,364 --> 00:07:04,364
We have sessions because
we need to authenticate.

102
00:07:04,994 --> 00:07:10,934
We have S3 itself, and then we create
in session, we create, a new service.

103
00:07:11,384 --> 00:07:14,764
And the call please lead the packets
and then go in, in the, in the

104
00:07:14,764 --> 00:07:16,834
loop to print all of these buckets.

105
00:07:17,374 --> 00:07:18,664
Very simple quote.

106
00:07:19,164 --> 00:07:20,394
What can go wrong?

107
00:07:20,534 --> 00:07:22,784
nothing can go wrong,
but what will the result?

108
00:07:22,814 --> 00:07:24,584
Let's check what this is a result.

109
00:07:25,214 --> 00:07:30,284
So when we compile our
application, actually the size

110
00:07:30,284 --> 00:07:32,204
of the application jumps a lot.

111
00:07:32,704 --> 00:07:38,584
And this is interesting, thing I
would say because if you compare

112
00:07:38,584 --> 00:07:44,074
like our size of application,
actually increase it by almost 900%.

113
00:07:44,584 --> 00:07:52,504
So these goers here exactly for
completion to show how the size of the

114
00:07:52,504 --> 00:07:58,989
application increasing, so you really
can see it jumped to a bigger number.

115
00:07:59,489 --> 00:08:06,119
So why this happened, if you
ask ourselves, yeah, maybe

116
00:08:06,549 --> 00:08:08,049
this is a huge package.

117
00:08:08,049 --> 00:08:13,499
It has a lot of APIs, it has
a lot of, different objects.

118
00:08:13,739 --> 00:08:18,579
So maybe all of this together
creates a huge, dependency.

119
00:08:19,164 --> 00:08:22,464
Hidden dependency, injecting,
and what I thought.

120
00:08:23,454 --> 00:08:23,514
Okay.

121
00:08:23,514 --> 00:08:29,624
AWS states, for web services, this is
Amazon Web Services, so it means it

122
00:08:29,684 --> 00:08:37,774
has some API and we can call this API
directly, and just get the same result.

123
00:08:38,374 --> 00:08:38,884
For sure.

124
00:08:38,884 --> 00:08:42,184
It has some, complications
about authentication.

125
00:08:42,244 --> 00:08:45,664
We need to sign our request,
but we can figure out this.

126
00:08:46,354 --> 00:08:50,134
So what I did, I just asked
Chad GPT to generate the code.

127
00:08:50,194 --> 00:08:53,774
This code actually work and the
code itself doesn't, that is

128
00:08:53,774 --> 00:08:55,574
not interesting for us at all.

129
00:08:55,844 --> 00:08:56,444
It works.

130
00:08:56,444 --> 00:08:57,164
You can believe.

131
00:08:57,224 --> 00:09:01,504
What is more interested for us
as this list of, dependencies, we

132
00:09:01,504 --> 00:09:06,394
have, so we have a working court,
which can call list of buckets.

133
00:09:07,069 --> 00:09:11,739
without all of these, AWS dependencies,
this is clearly only from the,

134
00:09:12,039 --> 00:09:14,419
default, goal length packages.

135
00:09:14,959 --> 00:09:19,479
So when we compile it, our
size is, has decreased.

136
00:09:20,199 --> 00:09:23,479
It's less, six megabytes less right now.

137
00:09:24,044 --> 00:09:26,744
but still it's eight megabytes.

138
00:09:26,744 --> 00:09:32,474
And the program I was showing before,
it's actually, like hundred lines of code.

139
00:09:32,564 --> 00:09:34,185
It's not something huge.

140
00:09:34,615 --> 00:09:36,944
amount of, dependencies.

141
00:09:36,944 --> 00:09:39,405
We important is also not that huge.

142
00:09:39,775 --> 00:09:42,464
why do we have these, problem these.

143
00:09:42,964 --> 00:09:46,805
Still, I would say inflated
size of the application.

144
00:09:47,194 --> 00:09:49,834
And yeah, you can see
it decrease it a lot.

145
00:09:49,834 --> 00:09:55,295
It decrease it almost 400% compared to
the previous one, but still it's big.

146
00:09:55,795 --> 00:10:01,735
What can we do to solve this problem with
our application or why this happened?

147
00:10:02,525 --> 00:10:05,375
and again, we implemented
only one EPA call.

148
00:10:05,464 --> 00:10:13,215
In our program, and this S3 has multiple
calls, to list object, to add object,

149
00:10:13,215 --> 00:10:15,555
remove object update to get versions.

150
00:10:15,555 --> 00:10:19,515
It's huge amount of API calls.

151
00:10:20,355 --> 00:10:25,680
So maybe the six megabytes we
just, removed from our application.

152
00:10:25,830 --> 00:10:31,230
The six megabytes is, exactly
implementation of this code, but still.

153
00:10:31,730 --> 00:10:33,320
Our application is still big.

154
00:10:33,820 --> 00:10:34,870
It's still big.

155
00:10:35,400 --> 00:10:38,280
if we compare to the previous
one, it was two mega pies.

156
00:10:38,280 --> 00:10:39,210
Right now it's eight.

157
00:10:39,210 --> 00:10:41,760
So these six more megas of the program.

158
00:10:42,120 --> 00:10:45,440
So which of this dependency take, all the.

159
00:10:46,025 --> 00:10:50,165
Credits for being, for abusing,
the size of our application.

160
00:10:50,375 --> 00:10:51,875
So I did another experiment.

161
00:10:51,875 --> 00:10:53,645
I started to remove one by one.

162
00:10:53,975 --> 00:10:57,425
This crypto sounds a
good candidate to remove.

163
00:10:57,425 --> 00:11:02,305
So what I did, I commented code
to still keep, the program they

164
00:11:02,305 --> 00:11:04,345
were can and try to compile.

165
00:11:04,705 --> 00:11:05,485
I did it.

166
00:11:05,735 --> 00:11:06,935
so yeah, I remove it.

167
00:11:06,995 --> 00:11:12,095
Crypto, there is no crypto
independencies anymore and I compile it.

168
00:11:12,845 --> 00:11:18,065
I compiled it, but size of
application didn't change much.

169
00:11:18,065 --> 00:11:21,065
You can see the again,
on the four kilobytes.

170
00:11:21,565 --> 00:11:21,985
okay.

171
00:11:22,445 --> 00:11:26,195
my thought was let's proceed
removing more and let's find out

172
00:11:26,255 --> 00:11:31,325
which one actually is the reason for
this inflated size of application.

173
00:11:31,835 --> 00:11:39,125
So we also remove it, Yeah, there is no
encoding in, our application and run and.

174
00:11:39,625 --> 00:11:41,905
This is not the mistake, actually.

175
00:11:42,305 --> 00:11:46,415
this is two different screenshots,
but unfortunately, there is no effect.

176
00:11:46,915 --> 00:11:49,165
Nothing has changed in our program.

177
00:11:49,405 --> 00:11:54,725
So most probably this accordion comes with
another dependencies, as a hidden one.

178
00:11:54,725 --> 00:11:58,715
So yeah, we need to build the three
of dependencies to understand,

179
00:11:59,195 --> 00:12:02,285
what could be abuser of our size.

180
00:12:02,785 --> 00:12:05,105
yeah, still we have eight megabytes.

181
00:12:05,165 --> 00:12:10,145
Nothing has changed that much, so I
decided to proceed to removing stuff.

182
00:12:10,385 --> 00:12:16,275
So I remove it time library,
and nothing has changed.

183
00:12:16,545 --> 00:12:17,205
Almost.

184
00:12:17,385 --> 00:12:22,505
I remove IO and the same, we
know I already included in fmt.

185
00:12:23,005 --> 00:12:25,075
You not bring anything.

186
00:12:25,555 --> 00:12:29,545
But we have on the FMT Os,
which is also included in the

187
00:12:29,915 --> 00:12:31,715
FMT as a hidden dependency.

188
00:12:32,320 --> 00:12:34,835
And we have net fm, net HT TP.

189
00:12:35,195 --> 00:12:39,145
And what I did next, I created
a simple program using only, net

190
00:12:39,145 --> 00:12:42,815
htt p just to call, random URL.

191
00:12:43,595 --> 00:12:48,635
And yeah, if we compile
it, actually it bring it.

192
00:12:49,415 --> 00:12:52,115
Our application becomes
like five megabytes.

193
00:12:52,615 --> 00:12:53,065
So yeah.

194
00:12:53,275 --> 00:12:59,035
And net HT TP is another very
common library we have in Golan.

195
00:12:59,175 --> 00:13:04,665
maybe 99% of application using it
because we need to communicate our

196
00:13:04,665 --> 00:13:06,465
application with other applications.

197
00:13:06,645 --> 00:13:12,905
So we are using it so it brings
another batch of dependencies and yeah.

198
00:13:13,405 --> 00:13:18,295
And why I'm bringing this, I am for
sure not encourage you to remove all

199
00:13:18,295 --> 00:13:23,725
your dependencies from Sakoda base,
and I'm not encourage you to remove or

200
00:13:23,725 --> 00:13:29,815
implement nett TP on your own to have
zero dependency and very light code.

201
00:13:30,295 --> 00:13:36,465
And, but what I'm trying to say, most
probably you would never, bother yourself

202
00:13:36,465 --> 00:13:41,100
to, Look into size of your application
when you remove something or add

203
00:13:41,100 --> 00:13:47,045
something, and you didn't know that how
many dependencies it brings when you

204
00:13:47,045 --> 00:13:49,355
add a small lever to your application.

205
00:13:50,285 --> 00:13:51,725
And yeah.

206
00:13:52,225 --> 00:13:56,515
And maybe net CDP is not the
biggest one, but this is common one.

207
00:13:56,515 --> 00:13:59,975
And when you add it, you really
don't understand what it brings

208
00:14:00,215 --> 00:14:03,785
to your application amongst
this, what the dependencies of

209
00:14:03,785 --> 00:14:06,185
dependencies go to your application.

210
00:14:06,685 --> 00:14:12,570
And what I want to bring into the
table that when you work with,

211
00:14:13,070 --> 00:14:16,460
in the beef company, for example,
like delivery here or even smaller.

212
00:14:17,090 --> 00:14:20,880
You need some, culture
of dependency management.

213
00:14:21,420 --> 00:14:25,080
If you don't have it,
you can face some issues.

214
00:14:25,170 --> 00:14:31,230
And the second part of my talk will
be, again, exactly about these issues.

215
00:14:31,680 --> 00:14:35,220
We face it in our quarter
basis, couple of times.

216
00:14:35,820 --> 00:14:41,760
And, I mentioned in this slide, yeah, it's
you risk to have very poor code quality.

217
00:14:42,030 --> 00:14:48,490
It doesn't really, go to these bad
things, poor code quality, but it

218
00:14:48,490 --> 00:14:53,020
leads to a lot of technical depth,
which you can remove forever.

219
00:14:53,520 --> 00:14:56,475
Okay, and proceed with my presentation.

220
00:14:56,475 --> 00:14:59,235
I want to give you some small example.

221
00:14:59,835 --> 00:15:03,465
So just imagine you have a
service, some global service.

222
00:15:03,615 --> 00:15:07,995
I call it the STS because this
is common name, around the world.

223
00:15:08,025 --> 00:15:14,895
And, it stays for, service to service
tokens and this service commonly used

224
00:15:14,895 --> 00:15:19,965
in different, ecosystems, to create a
token to, communicate between services.

225
00:15:20,175 --> 00:15:22,725
So let's imagine we have
this global service.

226
00:15:23,565 --> 00:15:28,335
Since this is a global service and
everyone need to adopt it, we also want

227
00:15:28,395 --> 00:15:36,175
to support our teams to not implement the
well every time, but reuse, as something.

228
00:15:36,685 --> 00:15:38,785
So we create some library.

229
00:15:39,220 --> 00:15:45,640
So in different languages,
Java, python, Ruby Rolling.

230
00:15:45,940 --> 00:15:51,100
We implementing some help levers, which
abstract communication or abstract some.

231
00:15:51,100 --> 00:15:53,590
This a P layer for your application.

232
00:15:54,130 --> 00:15:58,660
So some teams just need to plug
and play and use this library.

233
00:15:59,160 --> 00:16:02,010
sounds easy and sounds
like a common sense.

234
00:16:02,010 --> 00:16:05,730
And this is what we're using
in on daily basis all the time.

235
00:16:05,790 --> 00:16:11,500
So we have this service, we have this
library, and we have, service a, this

236
00:16:11,500 --> 00:16:17,230
is just some business, service, which
executes some business and it needs

237
00:16:17,230 --> 00:16:19,260
to use this, service to service token.

238
00:16:19,920 --> 00:16:24,630
So we use this library and yeah,
what I forgot to mention, the

239
00:16:24,630 --> 00:16:26,940
library has version and version one.

240
00:16:27,440 --> 00:16:29,430
This is important, for future.

241
00:16:29,835 --> 00:16:36,405
And yeah, we're using everything works and
then team decides to implement version two

242
00:16:36,975 --> 00:16:42,865
and what they actually do, unfortunately,
and this happens, this happened in my

243
00:16:42,865 --> 00:16:48,390
career couple of times, and in Delivery
Hero as well, guys, implementing new

244
00:16:48,710 --> 00:16:50,355
features and changing the contract.

245
00:16:50,925 --> 00:16:52,425
The change in interfaces.

246
00:16:52,575 --> 00:16:58,785
And this leads to inconsistency and low
record compatibility between version one

247
00:16:58,785 --> 00:17:02,475
and version two, and what happens next?

248
00:17:03,065 --> 00:17:09,255
even if team, of service a, if they want
to migrate to a new version, they would

249
00:17:09,255 --> 00:17:15,235
need to, do some extra effort to do this
migration because interfaces change it.

250
00:17:15,725 --> 00:17:17,495
they need to rewrite some code.

251
00:17:17,900 --> 00:17:21,530
And maybe not in one place,
but in multiple places.

252
00:17:22,040 --> 00:17:27,740
This leads to the case when team
decides to stay with version

253
00:17:27,740 --> 00:17:29,600
one because it works for them.

254
00:17:29,810 --> 00:17:34,550
And in software engineering they have
this proverb, if it works, don't touch it.

255
00:17:35,240 --> 00:17:37,580
So the team is not going to touch it.

256
00:17:37,640 --> 00:17:40,640
It'll stay and they'll not
going to use version two.

257
00:17:41,600 --> 00:17:46,880
And here another problem because,
like teams who create in, these global

258
00:17:46,880 --> 00:17:52,280
services who maintaining the libraries
for these, global services, they

259
00:17:52,280 --> 00:17:55,190
also don't have a lot of capacity.

260
00:17:55,370 --> 00:18:00,230
So they can maintain both versions
simultaneously and usually they

261
00:18:00,230 --> 00:18:02,480
say, okay, this is deprecated.

262
00:18:02,930 --> 00:18:04,190
We are not supporting it.

263
00:18:05,150 --> 00:18:06,740
We'll not implement new features.

264
00:18:06,740 --> 00:18:09,050
We'll not implement security updates.

265
00:18:09,050 --> 00:18:14,090
You all of you should use this
new amazing, shiny version tool.

266
00:18:14,590 --> 00:18:15,070
Okay?

267
00:18:15,100 --> 00:18:21,095
So team of service A stays with this
technical depth almost forever, I would

268
00:18:21,215 --> 00:18:26,175
say, and then happens what happened
in my experience multiple times.

269
00:18:26,550 --> 00:18:27,960
We have another global service.

270
00:18:28,815 --> 00:18:35,715
And, it's a global service doing some
stuff, but, and also another team

271
00:18:35,715 --> 00:18:42,285
decided, okay, to help team needs to
implement this library, to support, easy.

272
00:18:42,385 --> 00:18:46,355
Plug and play, for
other, for our consumers.

273
00:18:46,625 --> 00:18:46,985
Okay.

274
00:18:46,985 --> 00:18:51,435
They did, but they also use
this, service to service token.

275
00:18:52,095 --> 00:18:56,115
And for sure, since they
creating a new service, they're

276
00:18:56,115 --> 00:18:57,915
not going to use old version.

277
00:18:58,365 --> 00:19:00,345
They're going directly with version too.

278
00:19:00,885 --> 00:19:05,265
Which has different interfaces
compared to the version one, and

279
00:19:05,265 --> 00:19:07,005
they starts to create a problem.

280
00:19:07,515 --> 00:19:13,895
If service a wants to use, this service
and they use this library, it may

281
00:19:14,045 --> 00:19:20,665
have some dependency and, dependency
on what is implemented in SDS.

282
00:19:21,235 --> 00:19:25,345
And in this case, when you try
to install the library from the.

283
00:19:26,070 --> 00:19:27,630
another global service.

284
00:19:27,780 --> 00:19:28,380
It won't work.

285
00:19:28,950 --> 00:19:29,970
What it'll tell you.

286
00:19:29,970 --> 00:19:35,890
It'll tell you that, oh, I see,
different implementation or of some

287
00:19:35,890 --> 00:19:41,370
functionality, which has the same name
and it stays for the same, library.

288
00:19:41,370 --> 00:19:42,510
Actually, it'll fail.

289
00:19:43,010 --> 00:19:46,910
And this something what happened,
in my company couple of times.

290
00:19:46,960 --> 00:19:50,470
And this is something,
really huge problem for us.

291
00:19:50,970 --> 00:19:56,490
and if you look what the problems, yeah,
it's hard to maintain multiple versions.

292
00:19:56,490 --> 00:20:02,080
As I mentioned, the team, which created,
this library, they may not have capacity

293
00:20:02,080 --> 00:20:06,430
to maintain version one and version
two and keep different interfaces.

294
00:20:06,950 --> 00:20:11,000
These are hard to push as a
teams to migrate to new version.

295
00:20:11,150 --> 00:20:14,880
As I said, they also don't have
capacity and for them to, assure

296
00:20:14,880 --> 00:20:19,110
their product people that technical
debt is something bad and we need to

297
00:20:19,110 --> 00:20:21,510
migrate, it's usually very complicated.

298
00:20:22,500 --> 00:20:27,475
At some point, the loop will be closed
and you will end up with some services

299
00:20:27,810 --> 00:20:30,150
are not able to use your libraries.

300
00:20:30,660 --> 00:20:33,290
As I mentioned in the, example, Above.

301
00:20:34,040 --> 00:20:37,670
It actually takes a lot of time
to end up to the situation.

302
00:20:37,910 --> 00:20:41,330
This is a problem because
what he described, it didn't

303
00:20:41,900 --> 00:20:43,760
happen in day or week.

304
00:20:43,820 --> 00:20:47,270
It happened during like
year or couple of year.

305
00:20:47,930 --> 00:20:50,600
And then this situation
evolve with evolve.

306
00:20:50,600 --> 00:20:54,980
But you may develop more code
in service A where with this

307
00:20:54,980 --> 00:20:57,490
old dependency to, old library.

308
00:20:57,850 --> 00:20:59,350
And at some point it's.

309
00:20:59,680 --> 00:21:04,480
Super complicated to avoid this
technical debt or get out of it.

310
00:21:04,960 --> 00:21:09,430
You have years of development of on
top of this and it's more and more

311
00:21:09,430 --> 00:21:16,660
complicated to change or write your
pot and it's really requires a huge

312
00:21:16,690 --> 00:21:19,060
investments to fix the problem.

313
00:21:19,420 --> 00:21:24,460
And sometimes people even say, okay, it's
really easy to start a greenfield project

314
00:21:25,030 --> 00:21:27,790
rather than trying to solve it in place.

315
00:21:28,290 --> 00:21:32,455
and yeah, what is the biggest problem,
was in this case I need to mention

316
00:21:32,455 --> 00:21:36,995
because also the team who is maintaining
the library, they did the mistake.

317
00:21:37,350 --> 00:21:41,080
they need to, acknowledge
this and understand, when they

318
00:21:41,080 --> 00:21:43,545
were, create a new version.

319
00:21:43,785 --> 00:21:46,755
What they did, they just said,
okay, we have version two, and

320
00:21:46,755 --> 00:21:48,555
they changed it in version.

321
00:21:49,260 --> 00:21:55,260
So in the same version, it shouldn't be
changes in the contract actually, but

322
00:21:55,320 --> 00:22:02,445
unfortunately the guys did this and, it
created all of these, following, problems.

323
00:22:02,945 --> 00:22:07,715
What they had to do, and usually most
probably working with core programs,

324
00:22:07,715 --> 00:22:09,515
you notice this multiple times.

325
00:22:09,515 --> 00:22:14,045
They had to create kind of separate
folder in their project and call it.

326
00:22:14,545 --> 00:22:19,875
Should have a separate goal mode actually,
then it'll be, use it as a separate

327
00:22:20,025 --> 00:22:24,035
package, and it'll solve the problem.

328
00:22:24,035 --> 00:22:28,395
I described it previously because
if you look at your, go some,

329
00:22:28,395 --> 00:22:33,555
and this is go some from the Real
project, for example, Google, Google.

330
00:22:34,055 --> 00:22:39,495
Has this amount of different,
hidden or indirect dependencies.

331
00:22:39,825 --> 00:22:40,095
Why?

332
00:22:40,095 --> 00:22:44,145
Because, we have dependency, then
we have another dependencies and

333
00:22:44,145 --> 00:22:46,095
we have another hidden dependency.

334
00:22:46,515 --> 00:22:52,155
And it could be different or like
huge amount of layers or dependencies.

335
00:22:52,365 --> 00:22:58,865
And each of them may have their own
go model these, specified versions.

336
00:22:59,225 --> 00:23:03,595
And this can end up, so in this case,
guys was keeping, the contract the

337
00:23:03,595 --> 00:23:08,825
same, maybe adding new features, some,
fixes, but the contract was the same

338
00:23:08,885 --> 00:23:10,685
and did, this didn't break anything.

339
00:23:11,405 --> 00:23:16,030
In our case, the break happened on
the hand then yeah, we can proceed

340
00:23:16,450 --> 00:23:21,280
without code modifications, beef
code, modifications, I would say.

341
00:23:21,780 --> 00:23:27,030
So unfortunately this is very common
example and in my years in the company

342
00:23:27,030 --> 00:23:33,120
I have seen this multiple times
so far for in different projects,

343
00:23:33,120 --> 00:23:35,490
and this happens over and over.

344
00:23:35,990 --> 00:23:41,840
If you go to the next example, I
have these I called helper packages.

345
00:23:42,080 --> 00:23:48,140
This is also very common at some point,
like when our project evolve, we, write

346
00:23:48,140 --> 00:23:52,580
and write in cotton and we find out
we have some common parts we can reuse

347
00:23:52,820 --> 00:23:54,840
and move to the some, common library.

348
00:23:55,545 --> 00:24:00,705
First of all, inside the project for
sure, and we create this helper packages

349
00:24:00,705 --> 00:24:06,165
or it, called, or whatever it may have
different names, but idea the same.

350
00:24:06,465 --> 00:24:11,125
We applying the dry principle and
we, remove duplications of the code.

351
00:24:11,845 --> 00:24:14,080
And in this example, I have package goer.

352
00:24:15,025 --> 00:24:17,155
And I have some helper.

353
00:24:17,515 --> 00:24:22,065
Helper has some random function,
just for this, just example.

354
00:24:22,675 --> 00:24:28,165
and what we decided, okay, we are
going to create another function inside

355
00:24:28,165 --> 00:24:30,615
our go, inside our helper package.

356
00:24:31,035 --> 00:24:35,735
And this, function is going to print
some information about our goer.

357
00:24:36,515 --> 00:24:39,045
So it was going to, just.

358
00:24:39,545 --> 00:24:45,160
Print informatic the name with the
age and position and then, yeah,

359
00:24:45,250 --> 00:24:48,190
we can call it in our main project.

360
00:24:48,690 --> 00:24:49,170
Oops.

361
00:24:49,670 --> 00:24:50,900
Ah, yeah.

362
00:24:51,830 --> 00:24:55,880
we can call it in our main
project and we call it India.

363
00:24:56,375 --> 00:24:57,545
This is how it works.

364
00:24:57,755 --> 00:25:00,425
Unfortunately, place its
slides in the wrong position.

365
00:25:00,425 --> 00:25:00,635
Yeah.

366
00:25:00,815 --> 00:25:02,955
What is the wrong, wrong in this example?

367
00:25:03,285 --> 00:25:08,825
So we have helpers and we have
dependency to the goer object or

368
00:25:09,305 --> 00:25:11,165
another library in our project.

369
00:25:12,035 --> 00:25:16,845
And at some point it can lead
to the situation when, we would

370
00:25:16,845 --> 00:25:18,825
need some helpers from the goer.

371
00:25:19,325 --> 00:25:21,815
Package and then what happens?

372
00:25:21,815 --> 00:25:27,005
We will create a link to their helper
functions here and it'll create

373
00:25:27,125 --> 00:25:29,725
circle dependency infinity loop.

374
00:25:29,725 --> 00:25:34,525
I would say to avoid this, what we
would need to create another helpers.

375
00:25:34,735 --> 00:25:39,165
Let's call it ER helpers, and this
again, duplication of the code.

376
00:25:39,165 --> 00:25:42,465
So we are not solving situation,
we are making it worse.

377
00:25:42,965 --> 00:25:44,915
Oh yeah, this is what I already mentioned.

378
00:25:45,755 --> 00:25:50,285
because when you create the helper,
it's, and when you use a helper from

379
00:25:50,285 --> 00:25:55,295
one library, you, automatically adding
this dependency to the goer package to

380
00:25:55,295 --> 00:25:58,145
all packages where you use it helper.

381
00:25:58,775 --> 00:26:04,145
And this creates some dependency tree,
which at the end could lead you to

382
00:26:04,145 --> 00:26:06,625
the, Dependence, circle or dependency.

383
00:26:07,195 --> 00:26:07,465
Yeah.

384
00:26:07,965 --> 00:26:13,455
In my example, it's like very short pass
to do this, but usually again, it takes

385
00:26:13,965 --> 00:26:19,005
a month, years until you at some point
need touse something from the helper

386
00:26:19,005 --> 00:26:24,375
when you are inside the goer package
and you can't because it doesn't work.

387
00:26:24,875 --> 00:26:30,205
So how to solve it, this is a easy
example and I see such examples.

388
00:26:30,595 --> 00:26:31,795
Everywhere in the code.

389
00:26:32,195 --> 00:26:35,795
this info function should
be part of our object.

390
00:26:35,825 --> 00:26:40,325
It should be met inside our
object, so we can easily access

391
00:26:40,325 --> 00:26:41,735
information from the object.

392
00:26:41,735 --> 00:26:45,755
We even don't need to make this
information public, so it could

393
00:26:45,755 --> 00:26:50,585
be these lowercase name or case
age, and then we can print this

394
00:26:50,585 --> 00:26:53,465
information and this is how it used.

395
00:26:53,705 --> 00:26:54,995
This is better, I would say.

396
00:26:55,535 --> 00:26:57,635
You can argue with me, but
this is better actually.

397
00:26:58,135 --> 00:27:01,735
and as I already mentioned,
this is another problem I

398
00:27:01,735 --> 00:27:04,495
see in our code base a lot.

399
00:27:04,885 --> 00:27:11,125
So people are misconceptions, people
not really thinking in advance and

400
00:27:11,125 --> 00:27:16,345
not applying common sense when they're
moving some parts to the helpers and.

401
00:27:17,335 --> 00:27:20,545
Sometimes they don't see, this
pattern, that these should

402
00:27:20,545 --> 00:27:22,555
be a method of the object.

403
00:27:22,765 --> 00:27:25,285
This shouldn't be
separate helper function.

404
00:27:25,465 --> 00:27:29,665
There is no any reason to have
it as a separate function,

405
00:27:29,665 --> 00:27:31,585
create all of these dependencies.

406
00:27:32,085 --> 00:27:35,774
So going back, I have, no,
not going back, going user.

407
00:27:35,955 --> 00:27:40,544
I have another very common example
related to the helpers because

408
00:27:40,935 --> 00:27:42,615
when you try to apply this.

409
00:27:43,199 --> 00:27:44,159
Right principle.

410
00:27:44,159 --> 00:27:46,979
You try to apply it almost everywhere.

411
00:27:47,550 --> 00:27:52,199
So you start to know, first
of all, you try to remote

412
00:27:52,290 --> 00:27:54,389
applications inside your services.

413
00:27:54,659 --> 00:28:00,350
Then you see that another service, also
has dependency, and you move in already

414
00:28:00,380 --> 00:28:02,930
some applications from different services.

415
00:28:03,560 --> 00:28:04,520
And so on and so forth.

416
00:28:04,790 --> 00:28:10,520
So this is example, we have a service,
a and yeah, at some point we decided

417
00:28:10,520 --> 00:28:14,810
we need to create a helper package
because we have some dependency,

418
00:28:15,080 --> 00:28:17,090
duplications in our code base.

419
00:28:17,270 --> 00:28:18,470
We created helpers.

420
00:28:18,620 --> 00:28:20,660
It work for us perfectly.

421
00:28:21,360 --> 00:28:28,710
but then, We have very similar service, b
with very similar helpers, labor insight.

422
00:28:29,550 --> 00:28:36,420
And then we think, okay, there is no
reason to do modifications in two places.

423
00:28:36,750 --> 00:28:41,580
Let's move out this, package
to some, external one, and

424
00:28:41,580 --> 00:28:43,050
then they're going to reuse.

425
00:28:43,560 --> 00:28:47,100
But here again, we have the
same problem with capacity.

426
00:28:47,760 --> 00:28:52,320
Maybe one team has enough time to
work on the technical debris, removing

427
00:28:52,320 --> 00:28:54,480
these helpers from here or here.

428
00:28:55,140 --> 00:28:58,470
Maybe another team doesn't have
the pen, capacity to do this.

429
00:28:58,980 --> 00:29:03,270
And we end up in situations like
this one service using this helpers.

430
00:29:03,750 --> 00:29:05,400
Another service doesn't do this.

431
00:29:05,400 --> 00:29:05,760
Helpers.

432
00:29:06,615 --> 00:29:08,835
Or maybe even worse.

433
00:29:09,045 --> 00:29:15,345
And this I dislike more, that this
service still has a library with helpers

434
00:29:15,405 --> 00:29:21,855
and some part of the code still use it,
but also we already trying to know to

435
00:29:21,915 --> 00:29:28,625
migrate to the new solution and some
of our, parts of our code using the new

436
00:29:28,625 --> 00:29:31,175
implementation from the external library.

437
00:29:32,000 --> 00:29:38,250
This is a huge problem and because
implementations here may go into

438
00:29:38,250 --> 00:29:41,790
different directions, they may
have similar name of the function

439
00:29:41,790 --> 00:29:47,820
with different implementations and
different behavior, and also with

440
00:29:47,820 --> 00:29:49,680
different vulnerabilities Actually.

441
00:29:50,180 --> 00:29:54,675
But unfortunately this is not the
worst case I have seen in Codebase.

442
00:29:55,195 --> 00:29:57,650
Actually, the worst one is this one.

443
00:29:58,150 --> 00:30:03,580
in this situation we have another
service also implementing this library.

444
00:30:04,150 --> 00:30:08,610
And, for some reason, for example, we
have another, library we are using from

445
00:30:08,610 --> 00:30:10,740
this service, or I don't know, some.

446
00:30:11,130 --> 00:30:12,330
Batch of services.

447
00:30:12,780 --> 00:30:18,940
And then it opens us the door to, use,
helpers from this service as well.

448
00:30:18,940 --> 00:30:24,000
If we embedded it as a, not embedded,
if we use it as a dependency in

449
00:30:24,000 --> 00:30:29,795
service a and then we have, three
dependency with absolutely similar code.

450
00:30:29,795 --> 00:30:32,285
So our principle just fail it.

451
00:30:32,810 --> 00:30:34,190
Drastically failed.

452
00:30:34,610 --> 00:30:37,850
And I want to emphasize
this is the real case.

453
00:30:37,940 --> 00:30:40,700
This is the real case I have
seen on code base couple of

454
00:30:40,700 --> 00:30:44,159
times, which, made me very sad.

455
00:30:44,659 --> 00:30:45,019
Yeah.

456
00:30:45,519 --> 00:30:48,714
And yeah, I. About conclusions.

457
00:30:48,884 --> 00:30:52,844
your team acquires strong
dependency management culture.

458
00:30:52,904 --> 00:30:57,344
Not only your team, it should be
enforce it on the company level.

459
00:30:57,645 --> 00:31:00,614
It should be enforce it on the team level.

460
00:31:01,005 --> 00:31:04,880
You need to work with your product
people to prioritize technical depth

461
00:31:05,420 --> 00:31:08,094
and remove, unnecessary dependencies.

462
00:31:08,469 --> 00:31:13,059
As you remember, I asked you at
the beginning, can you name a

463
00:31:13,059 --> 00:31:17,619
couple of dependencies you have
in your current project, and then

464
00:31:17,979 --> 00:31:21,579
can you name a couple of indirect
dependencies you have in your project?

465
00:31:22,119 --> 00:31:26,679
Hope you can name some of
them actually, but let's go.

466
00:31:27,159 --> 00:31:31,029
you need to commend dependency
policies, so it should be written,

467
00:31:31,089 --> 00:31:33,039
it should be followed by the people.

468
00:31:33,549 --> 00:31:36,339
You should use this guidance to minimize.

469
00:31:36,729 --> 00:31:42,309
And the define what dependencies
are, how they should be used.

470
00:31:42,939 --> 00:31:45,699
You should do regular dependency audit.

471
00:31:46,399 --> 00:31:48,109
you need to update versions.

472
00:31:48,439 --> 00:31:51,589
You need to detect and
fix vulnerabilities.

473
00:31:52,009 --> 00:31:57,239
This is actually a super serious stuff
because you may, use some library in your

474
00:31:57,239 --> 00:32:03,079
code base, which is, indirectly using
another library, having, Vulnerability

475
00:32:03,289 --> 00:32:08,219
and you already expose it to the problem,
because your application could be attacked

476
00:32:08,719 --> 00:32:12,109
and you even don't know why actually.

477
00:32:12,109 --> 00:32:17,359
So please update your versions,
check your vulnerabilities.

478
00:32:17,719 --> 00:32:22,189
There are some tools to do this,
so please follow the best practice

479
00:32:22,249 --> 00:32:24,049
and follow the common sense.

480
00:32:25,019 --> 00:32:26,989
don't skip imports.

481
00:32:27,979 --> 00:32:33,769
During PR review, this is a problem
I, noticed multiple times with guys.

482
00:32:34,109 --> 00:32:37,654
so I mentioned this let go quickly back.

483
00:32:38,154 --> 00:32:43,074
Yeah, the, this slide, this happened
because actually guys were ignoring these

484
00:32:43,074 --> 00:32:46,134
first sections of imports in the program.

485
00:32:46,374 --> 00:32:50,694
They was keeping on what could go
wrong in the imports, but imports was

486
00:32:50,694 --> 00:32:56,544
saying, okay, the new library is going
to be added to your project, and this

487
00:32:56,544 --> 00:33:01,484
library is very different from what you
should use actually, if this won't be.

488
00:33:01,984 --> 00:33:07,534
it'll be solved way before when we face
it, some circle dependencies in our code

489
00:33:07,654 --> 00:33:14,754
base or when, different parts of the
code using look similar, implementation,

490
00:33:14,754 --> 00:33:18,744
but actually implementations
are super different in them.

491
00:33:19,244 --> 00:33:21,044
And yeah, that's all from my site.

492
00:33:21,044 --> 00:33:22,814
I have a couple of slides, so yeah.

493
00:33:23,364 --> 00:33:28,514
we are hiring and if you want
to help me to build, this good,

494
00:33:28,684 --> 00:33:32,524
dependency management culture in
delivery Europe, please join us.

495
00:33:32,644 --> 00:33:38,284
We have couple of, positions in the
company and yeah, if you have any

496
00:33:38,284 --> 00:33:43,004
questions or you want to discuss, this
topic or any other topic, please don't

497
00:33:43,004 --> 00:33:46,584
hesitate to contact me, using any of this.

498
00:33:47,084 --> 00:33:51,054
Or websites and thank you guys.

499
00:33:51,444 --> 00:33:52,224
Have a nice day.

500
00:33:52,259 --> 00:33:52,749
Bye-bye.

