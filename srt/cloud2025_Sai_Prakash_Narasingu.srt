1
00:00:00,010 --> 00:00:00,720
Hey, everyone.

2
00:00:01,070 --> 00:00:04,740
Today I'll be presenting on cloud
native observability, enhancing

3
00:00:04,740 --> 00:00:06,280
monitoring and performance.

4
00:00:06,780 --> 00:00:10,929
So when we think of cloud, applications,
the first thing that come into our mind

5
00:00:10,940 --> 00:00:17,989
is SAS software, probably, high volume
internet sites like YouTube, Netflix.

6
00:00:18,169 --> 00:00:23,000
so in order for these services to be
delivered to the customers, the users.

7
00:00:23,190 --> 00:00:24,040
efficiently.

8
00:00:24,780 --> 00:00:29,140
Constantly behind the scenes, there
are a ton of engineers that are

9
00:00:29,610 --> 00:00:32,180
continuously monitoring these services.

10
00:00:32,280 --> 00:00:38,860
they're trying to identify potential
bottlenecks, optimizations, and,

11
00:00:38,960 --> 00:00:43,870
Basically trying to see what the
health of all these systems are as

12
00:00:43,870 --> 00:00:49,110
the systems mostly run on at a data
center delivering these services.

13
00:00:49,140 --> 00:00:54,720
So let's get into some details
of what I'll be presenting today.

14
00:00:55,220 --> 00:00:56,110
So we'll go over.

15
00:00:56,670 --> 00:00:58,660
What is cloud observability?

16
00:00:59,220 --> 00:01:00,450
Why is it important?

17
00:01:00,980 --> 00:01:04,070
Some key observability
tools and technologies.

18
00:01:04,530 --> 00:01:05,929
What are the benefits?

19
00:01:06,370 --> 00:01:07,680
Best practices?

20
00:01:08,160 --> 00:01:10,939
We'll go through some
real world use cases.

21
00:01:11,170 --> 00:01:13,279
What are our current challenges?

22
00:01:13,299 --> 00:01:15,159
And, what lies ahead?

23
00:01:15,289 --> 00:01:17,370
What is the future of cloud observability?

24
00:01:17,760 --> 00:01:18,870
Cloud observability, sorry.

25
00:01:19,690 --> 00:01:21,730
what is cloud observability?

26
00:01:21,840 --> 00:01:23,220
Cloud native observability?

27
00:01:23,270 --> 00:01:28,470
The definition is Observability is
the ability to measure the internal

28
00:01:28,500 --> 00:01:32,440
state of a system based on its outputs.

29
00:01:33,425 --> 00:01:39,575
In cloud native environments, it
involves logs, metrics, and traces.

30
00:01:40,185 --> 00:01:47,824
The key components are metrics, which is
insights on how a system is performing.

31
00:01:48,325 --> 00:01:56,355
Logs is constant events of What the
system is running or what it's doing.

32
00:01:57,215 --> 00:02:01,515
Traces is the overall flow of that system.

33
00:02:01,545 --> 00:02:04,915
How, how it's part of
the overall topology.

34
00:02:05,255 --> 00:02:06,795
Where are the requests coming in?

35
00:02:06,874 --> 00:02:08,265
Where is it going?

36
00:02:09,054 --> 00:02:16,595
So in a nutshell, it is a way to gather
logs, metrics and traces from a system

37
00:02:17,085 --> 00:02:20,295
and using it for monitoring purposes.

38
00:02:20,795 --> 00:02:25,644
So why is observability
important in cloud native?

39
00:02:25,704 --> 00:02:30,164
in general terms, applications,
cloud native services.

40
00:02:30,685 --> 00:02:36,484
So modern services are
mostly microservices as.

41
00:02:36,874 --> 00:02:40,874
Microservices keep evolving,
they start getting complicated.

42
00:02:41,234 --> 00:02:45,774
Lots of APIs get embedded into
it, lots of, CRUD operations.

43
00:02:45,834 --> 00:02:51,954
there is some level of, complexity that,
kicks into, these overall architectures

44
00:02:52,314 --> 00:02:56,864
with all the interdependencies across,
different microservices based on

45
00:02:56,864 --> 00:02:58,654
their, distributor architecture.

46
00:02:59,469 --> 00:03:04,809
in order to get a visibility into those
kind of architectures, observability

47
00:03:04,809 --> 00:03:11,959
is really important so that we exactly
find, any performance issues at a

48
00:03:11,959 --> 00:03:14,449
specific, microservice level or a module.

49
00:03:15,389 --> 00:03:17,519
the next one is real time monitoring.

50
00:03:17,869 --> 00:03:24,499
So overall, observability is key to
identify potential issues in the system.

51
00:03:25,499 --> 00:03:30,209
it helps us gain insights of how
the system is actually performing,

52
00:03:31,039 --> 00:03:35,839
gets, gives us a lot of visibility
onto, the application based on

53
00:03:35,839 --> 00:03:40,619
the metrics or, visibility that
has basically been configured on

54
00:03:40,639 --> 00:03:42,729
different kinds of applications.

55
00:03:43,189 --> 00:03:47,949
Better visibility gives us faster,
issue resolving capabilities.

56
00:03:47,959 --> 00:03:51,999
So that's another reason why
observability is, so important.

57
00:03:52,629 --> 00:03:56,909
covering scalability and
performance, it ensures smooth auto

58
00:03:56,909 --> 00:03:58,489
scaling and resource allocation.

59
00:03:58,939 --> 00:04:04,754
So as we constantly monitor these,
services, servers, applications,

60
00:04:05,174 --> 00:04:06,584
we have better insights.

61
00:04:06,584 --> 00:04:11,794
we are better equipped with making
better decisions on how to leverage.

62
00:04:11,874 --> 00:04:15,324
if the system is constantly
running at a high load.

63
00:04:15,324 --> 00:04:19,479
It helps us make a decision to,
auto scale, to more, to beef

64
00:04:19,479 --> 00:04:24,339
up the, to beef up the system
more, in case of low utilization.

65
00:04:24,874 --> 00:04:26,624
We can always ramp down.

66
00:04:26,644 --> 00:04:33,064
So it helps us gain a lot of visibility
that eventually helps to design the

67
00:04:33,434 --> 00:04:41,314
system better on the scalability
aspect of the architecture as well.

68
00:04:41,314 --> 00:04:43,004
Same goes with improved debugging.

69
00:04:43,814 --> 00:04:51,049
With modern application, modern
services, there is tend to be constant

70
00:04:51,079 --> 00:04:57,609
issues, performance issues that we
try to identify, bugs, probably any

71
00:04:58,109 --> 00:05:00,859
customer issues, latency related issues.

72
00:05:01,269 --> 00:05:08,909
So with improved monitoring, it helps
engineers to identify the issue.

73
00:05:09,409 --> 00:05:14,779
So it helps reduce the mean time
to identify the issue as well as

74
00:05:14,829 --> 00:05:16,389
to resolve the issue eventually.

75
00:05:16,739 --> 00:05:21,199
so the turnaround to issue
identification to delivering back those

76
00:05:21,539 --> 00:05:25,729
bottlenecks issues to the customer
is much more faster with, cleaner

77
00:05:25,729 --> 00:05:31,060
visibility or, higher visibility
into these services or applications.

78
00:05:31,560 --> 00:05:35,390
So some of the key observability
tools and technologies today in

79
00:05:35,390 --> 00:05:38,580
the modern world is Prometheus.

80
00:05:38,610 --> 00:05:44,560
It's primarily used to scrape metrics
from different systems applications.

81
00:05:44,570 --> 00:05:50,820
So it collects metrics as well as
it helps to monitor those metrics.

82
00:05:51,480 --> 00:05:56,110
Grafana is another open source, library
or, visualization that is really

83
00:05:56,110 --> 00:06:00,080
popular, getting popular with lot
of, third party plugins integration.

84
00:06:00,360 --> 00:06:04,030
So it primarily helps in, creating
visualizations, Based on the metrics

85
00:06:04,030 --> 00:06:10,000
that's in, some of these, backends
like Prometheus or Influx db.

86
00:06:10,510 --> 00:06:15,380
So it helps us query, those metrics
continuously have some alerting in

87
00:06:15,380 --> 00:06:19,710
place to allow the user in case there
are, some anomalies or something

88
00:06:19,710 --> 00:06:22,120
that exceeds a certain, threshold.

89
00:06:22,620 --> 00:06:27,520
One thing that's becoming
popular is with OpenTelemetry.

90
00:06:28,050 --> 00:06:32,540
Earlier, pre OpenTelemetry, there
were multiple vendors in the market.

91
00:06:32,560 --> 00:06:38,520
Everybody had their own API or own
agents that were Constantly scraping

92
00:06:38,520 --> 00:06:44,470
metrics or, collecting metrics from
the applications or systems, building

93
00:06:44,470 --> 00:06:48,690
a schema that is vendor specific and
sending it to their own backends.

94
00:06:49,080 --> 00:06:54,650
So once the user or once the
organization is, Is starting

95
00:06:54,650 --> 00:06:56,460
to use that specific vendor.

96
00:06:56,490 --> 00:07:01,660
They're pretty much married to that
vendor So in order to port to migrate

97
00:07:01,660 --> 00:07:06,690
to a different customer to different
vendor, sorry It's extremely hard.

98
00:07:06,700 --> 00:07:09,700
There is very limited vendor portability.

99
00:07:10,190 --> 00:07:14,325
So as an industry everybody came
up with some Standards on how we

100
00:07:14,325 --> 00:07:19,375
collect not how we collect some of
these metrics at the same time how

101
00:07:19,395 --> 00:07:21,525
we reported back onto the back ends.

102
00:07:21,825 --> 00:07:26,205
So the back end has a defined
schema, which is what is

103
00:07:26,205 --> 00:07:27,865
included in open telemetry.

104
00:07:28,270 --> 00:07:34,460
It also provides a standardization for
tracing across different, applications

105
00:07:34,500 --> 00:07:39,830
or different tiers of an application,
to overall stitch, how the request

106
00:07:39,830 --> 00:07:44,880
is flowing from one tier to another
or one system to another system.

107
00:07:44,940 --> 00:07:45,450
and.

108
00:07:45,880 --> 00:07:49,700
Giving us a lot more insights into,
the overall end to end picture.

109
00:07:50,530 --> 00:07:54,660
So instrumentation is actually,
the process to instrument

110
00:07:54,760 --> 00:07:57,830
the applications via agents.

111
00:07:57,860 --> 00:08:00,480
So OpenTelemetry is really popular.

112
00:08:00,940 --> 00:08:03,700
So Eager is again, very
popular with OpenTelemetry.

113
00:08:04,200 --> 00:08:08,630
it is one of the backends where, when
you use the agents, you can export

114
00:08:08,630 --> 00:08:11,390
it back onto the Ager's platform.

115
00:08:11,720 --> 00:08:19,000
So different applications, once it reports
into, the Ager exporter, Ager is, has a

116
00:08:19,000 --> 00:08:25,230
really smart way to constitute all those
different backends and present an overall

117
00:08:25,570 --> 00:08:29,130
end to end picture of how the request
is actually flowing within the system,

118
00:08:29,510 --> 00:08:32,050
trying to, create those dependencies.

119
00:08:32,540 --> 00:08:33,350
onto the system.

120
00:08:33,850 --> 00:08:35,550
Next is Elastic Stack.

121
00:08:36,070 --> 00:08:40,280
It's mostly on log
aggregation and analytics.

122
00:08:40,780 --> 00:08:46,190
Helps in collecting the logs,
providing some analytics on top of it.

123
00:08:46,460 --> 00:08:50,940
regarding unified monitoring, the
centralized visibility across cloud

124
00:08:50,940 --> 00:08:54,410
native environments is very important.

125
00:08:54,450 --> 00:08:59,820
proactive issue detection Adaptable
to dynamic workloads, especially on

126
00:08:59,820 --> 00:09:05,250
scalability front is very important
Also when we say cloud native it has

127
00:09:05,250 --> 00:09:13,020
to be very DevOps friendly because
modern cloud native Software is being

128
00:09:13,080 --> 00:09:17,510
delivered iteratively or every two,
three weeks, maybe once a quarter.

129
00:09:17,880 --> 00:09:20,660
So it has to be DevOps friendly.

130
00:09:20,660 --> 00:09:26,210
So there should be some kind of continuous
integration, continuous deployment model.

131
00:09:26,570 --> 00:09:32,370
So the best practice in that is use an
open standard, which is open telemetry.

132
00:09:33,090 --> 00:09:35,530
Use some Grafana dashboards.

133
00:09:35,690 --> 00:09:41,470
For visualizations, have some
automation in place to, to find

134
00:09:41,530 --> 00:09:46,120
anomalies, based on the trend that
is being observed on the metrics.

135
00:09:46,120 --> 00:09:51,000
Any spikes, anomalies should be
quickly detected and reported back.

136
00:09:51,500 --> 00:09:54,890
to potentially find any
bottlenecks or performance issues.

137
00:09:55,390 --> 00:09:59,080
So some of the real world use
cases, I said, as I mentioned,

138
00:09:59,090 --> 00:10:04,980
Netflix uses open telemetry for the
distributed tracing and microservices.

139
00:10:05,310 --> 00:10:07,240
So all the microservices.

140
00:10:07,740 --> 00:10:13,260
Interdependencies is measured using open
telemetries to, to identify potential

141
00:10:13,260 --> 00:10:18,250
bottlenecks in across, handling the
overall requests at which specific

142
00:10:18,250 --> 00:10:20,560
microservice there is potential issue.

143
00:10:21,280 --> 00:10:26,390
Same with Uber, it implements Ager
for end to end transaction monitoring.

144
00:10:26,890 --> 00:10:33,260
Airbnb uses Prometheus and Grafana
for real time performance monitoring.

145
00:10:33,760 --> 00:10:34,810
Challenges.

146
00:10:35,360 --> 00:10:38,650
These systems keep
getting bigger and bigger.

147
00:10:39,220 --> 00:10:45,650
There are more number of metrics
being available on, on a yearly basis.

148
00:10:45,720 --> 00:10:46,910
It keeps increasing.

149
00:10:47,270 --> 00:10:51,910
So there is huge volumes of
telemetry data that gets exported.

150
00:10:52,400 --> 00:10:57,810
So the cost goes up, as well as
different cloud environments has.

151
00:10:58,030 --> 00:11:03,570
It has different, ways of presenting
the data, different kinds of metrics.

152
00:11:03,940 --> 00:11:07,740
So there is standard on the
collection part, but there is no

153
00:11:07,740 --> 00:11:10,420
standard on the visualization front.

154
00:11:10,430 --> 00:11:11,270
So that is.

155
00:11:11,770 --> 00:11:16,620
Future trends, AI driven anomaly
detection is a big thing right now.

156
00:11:17,160 --> 00:11:24,000
most of the observability organizations
like vendors are primarily focused

157
00:11:24,000 --> 00:11:28,080
on, on, on how to leverage AI, to use.

158
00:11:28,410 --> 00:11:32,830
AI has a pass through for every metric
or have some kind of machine learning

159
00:11:32,830 --> 00:11:39,950
models to, to constantly scrape data,
analyze, and then, report any anomalies.

160
00:11:39,960 --> 00:11:43,850
So that is excited to see
how that's going to shape up.

161
00:11:44,480 --> 00:11:51,840
Similar with more widespread adoption
of eBPF for deep observability, as

162
00:11:51,840 --> 00:11:55,780
well as increased integration of
observability with security tools.

163
00:11:56,640 --> 00:11:59,730
So when it comes to
security services, not many.

164
00:12:00,230 --> 00:12:06,010
Not much of it is, observable or
there is a lot of restrictions.

165
00:12:06,420 --> 00:12:12,890
So in the future, how it turns out for
especially security related tools is

166
00:12:12,890 --> 00:12:14,780
going to be something to watch out.

167
00:12:15,680 --> 00:12:17,540
So that's pretty much it.

168
00:12:17,620 --> 00:12:18,650
Thank you so much.

