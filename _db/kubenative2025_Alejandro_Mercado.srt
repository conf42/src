1
00:00:00,500 --> 00:00:00,890
Hi.

2
00:00:01,390 --> 00:00:04,689
Good morning, good
afternoon, good evening.

3
00:00:05,189 --> 00:00:11,370
I am going to talk about observability
in Kubernetes, unlocking the power of

4
00:00:11,459 --> 00:00:15,180
EBPF, so pretty honored to be here.

5
00:00:15,660 --> 00:00:18,060
So let's start with this presentation.

6
00:00:18,110 --> 00:00:19,700
How it's going to be helpful.

7
00:00:19,760 --> 00:00:20,840
Pretty sure about that.

8
00:00:21,340 --> 00:00:23,980
It's an observability in Kubernetes.

9
00:00:24,280 --> 00:00:28,600
A cha a key challenge in
modern container environments.

10
00:00:28,990 --> 00:00:35,290
So first, and first, I am Alex Alejandro
Mercado Rice and Bar in Mexico City.

11
00:00:35,830 --> 00:00:37,180
I am the Bobs.

12
00:00:37,350 --> 00:00:40,020
I am E-V-P-F-M two CS for sure.

13
00:00:40,770 --> 00:00:42,030
So I would like to.

14
00:00:42,735 --> 00:00:46,675
Start this presentation with this
phrase that this observability

15
00:00:47,395 --> 00:00:49,195
is another data problem.

16
00:00:49,285 --> 00:00:55,840
So I went to a conference and I got this
phrase that I think is pretty accurate.

17
00:00:56,050 --> 00:01:01,989
So the problem is how to get this
data, how to clean this data, how

18
00:01:01,989 --> 00:01:04,149
to get advantage of this data.

19
00:01:04,899 --> 00:01:07,660
So observability is a data problem.

20
00:01:08,060 --> 00:01:14,180
That arises when trying to understand
complex systems to effectively observe

21
00:01:14,210 --> 00:01:19,930
complex systems, you need to solve
classic challenges of managing large

22
00:01:19,930 --> 00:01:23,250
scale teal time sensitive data.

23
00:01:23,679 --> 00:01:29,169
It's about that this data management
challenges must be addressed while

24
00:01:29,469 --> 00:01:34,539
maintaining the performance needed for
real time operational decision making.

25
00:01:35,039 --> 00:01:40,699
This talk is focused on Kubernetes,
but EVPF, it's a wide range, can be

26
00:01:40,699 --> 00:01:45,189
applied to a wide range of technologies,
but I heavily use Kubernetes, so

27
00:01:45,549 --> 00:01:48,459
this is my main topic of interest.

28
00:01:48,459 --> 00:01:52,209
So Kubernetes provides
a high level abstracted.

29
00:01:53,049 --> 00:01:56,289
View of container
orchestration, as you may know.

30
00:01:56,739 --> 00:02:01,059
So Kubernetes is a pre brief introduction.

31
00:02:01,059 --> 00:02:07,169
Of course, Kubernetes hides low
level system details from application

32
00:02:07,169 --> 00:02:13,079
developers and heavily relies on core
Linux functionalities underneath.

33
00:02:13,579 --> 00:02:19,099
Kubernetes inner workers are in
their inner workings, are deeply

34
00:02:19,099 --> 00:02:24,279
rooted in the powerful functionality
of the Linux operation system.

35
00:02:24,779 --> 00:02:28,069
So what is EBPF?

36
00:02:28,569 --> 00:02:30,549
Maybe you have heard about EVPF.

37
00:02:30,549 --> 00:02:36,009
It's quite famous now that
actually it's not a new technology.

38
00:02:36,399 --> 00:02:41,889
It's can, has been around too many
years, but it's, I can say that no

39
00:02:41,889 --> 00:02:44,169
nowadays is taking new dimensions.

40
00:02:44,169 --> 00:02:50,429
So EVPF is a kernel virtual machine that
allows you we can think about EVPF as

41
00:02:50,429 --> 00:02:52,589
a kernel virtual machine that allows.

42
00:02:53,249 --> 00:02:56,999
Due to run sandboxes programs,
and this is quite important

43
00:02:56,999 --> 00:02:59,649
because it is going to be safer.

44
00:03:00,149 --> 00:03:03,969
We, we are going to talk a little
more about that in a second.

45
00:03:03,969 --> 00:03:11,669
So allows due to run sandbox programs
internal space without changing kernel

46
00:03:11,669 --> 00:03:14,849
source code or loading kernel models.

47
00:03:14,909 --> 00:03:19,109
So it provides the benefits
of programmability.

48
00:03:19,844 --> 00:03:22,664
Without the risk of
traditional current models.

49
00:03:22,844 --> 00:03:23,294
Yep.

50
00:03:23,294 --> 00:03:23,474
Yeah.

51
00:03:23,474 --> 00:03:26,584
This is going to be like the advantage.

52
00:03:27,184 --> 00:03:30,634
So have you ever used EVPF?

53
00:03:31,234 --> 00:03:32,374
Maybe yes.

54
00:03:32,374 --> 00:03:38,384
But you didn't notice because
maybe it is like a low visibility

55
00:03:38,384 --> 00:03:42,234
technology, but it's heavily used in.

56
00:03:42,914 --> 00:03:45,044
Many application and companies of course.

57
00:03:45,374 --> 00:03:48,524
So eeb, pfs, sobi, and applications.

58
00:03:49,074 --> 00:03:50,064
We can say that.

59
00:03:50,184 --> 00:03:54,764
Building on the previous slide
overview of Eeb PS, we can say that

60
00:03:54,764 --> 00:03:58,244
EVPF has become OBI and versatile.

61
00:03:58,934 --> 00:04:02,264
It's evident driving natural
and ability to interact with

62
00:04:02,349 --> 00:04:04,064
various NEL objects have enabled.

63
00:04:04,564 --> 00:04:10,414
To find a wide range of applications,
for instance, EBPF Powers, load

64
00:04:10,414 --> 00:04:17,084
Balancing and DDoS, the denial of
service protection on major website.

65
00:04:17,954 --> 00:04:24,044
So it ensures reliable
and scalable performance.

66
00:04:24,779 --> 00:04:29,864
It's also being used to create data
statistic apps on Android devices.

67
00:04:30,645 --> 00:04:37,754
Providing users with value valuable
insights in the Kubernetes ecosystem.

68
00:04:38,294 --> 00:04:41,804
EBPF is at the heart
of network management.

69
00:04:42,304 --> 00:04:48,734
We are going to see in a few moments,
tools like cel, leveraging it for advance

70
00:04:48,794 --> 00:04:51,764
monitoring and networking capabilities.

71
00:04:52,264 --> 00:04:59,874
Yeah, so the Kubernetes ecosystem and
EVPF may, maybe you have heard of one of

72
00:04:59,874 --> 00:05:04,944
these applications that we can see a lot
of applications moving in this space.

73
00:05:04,944 --> 00:05:08,155
Security networking and service mesh.

74
00:05:09,025 --> 00:05:14,034
So moving to the service mesh
landscape, we can find Kuma and

75
00:05:14,664 --> 00:05:17,155
Helium service mesh, both of.

76
00:05:17,380 --> 00:05:22,180
W, which leverage EVPF to
enhance service to service

77
00:05:22,180 --> 00:05:27,640
communication and provide robust
observability and security features.

78
00:05:28,140 --> 00:05:34,060
For system security, we can
find Falco, TeraGo and Tracy.

79
00:05:34,560 --> 00:05:38,180
These tools have emerged as a
powerful solutions for runtime,

80
00:05:38,180 --> 00:05:43,430
security monitoring and policy
enforcement in Kubernetes environments.

81
00:05:44,000 --> 00:05:45,650
So maybe you have heard about them.

82
00:05:45,980 --> 00:05:51,770
If you are using Kubernetes, these
tools can detect and prevent a wide

83
00:05:51,770 --> 00:05:58,219
range of security threats from unitized
access to system level anomalies.

84
00:05:58,719 --> 00:06:02,910
We can mention this is just one
of many this is open source.

85
00:06:02,940 --> 00:06:04,140
We can mention Pixie.

86
00:06:04,680 --> 00:06:11,430
This project utilizes EBPF to offer
deep visibility and insights into the

87
00:06:11,430 --> 00:06:15,420
performance and behavior of Kubernetes
applications and infrastructure.

88
00:06:15,920 --> 00:06:19,790
P'S EVPF base in instrumentation provides.

89
00:06:20,675 --> 00:06:26,765
Comprehensive observability enable
developer and availability engineers

90
00:06:27,125 --> 00:06:30,005
to 25 and resolve issues quickly.

91
00:06:30,505 --> 00:06:37,234
Of course, there are many other tools, as
I said, in the proprietary and open source

92
00:06:37,234 --> 00:06:40,385
sites in both sides of the technology.

93
00:06:40,895 --> 00:06:46,724
So as we have seen EV pfs has
become a transformative technology.

94
00:06:47,224 --> 00:06:52,084
In Kubernetes, in the Kubernetes
ecosystem, empowering users to enhance

95
00:06:52,084 --> 00:06:56,974
networking, service, mesh security,
and observability, of course, within

96
00:06:56,974 --> 00:06:58,954
their containerized environments.

97
00:06:59,764 --> 00:07:05,584
This, I think that showcases the
variability and power of VPPF.

98
00:07:06,084 --> 00:07:11,414
So we are going to send in
this next slide, so yeah,

99
00:07:11,444 --> 00:07:12,874
to talk about the power of.

100
00:07:13,374 --> 00:07:16,074
To talk about the power of
EV pfs, it's about that.

101
00:07:16,074 --> 00:07:18,735
It's about how we run these programs.

102
00:07:18,765 --> 00:07:22,995
So building on the previous slides
overview of how the Kubernetes

103
00:07:22,995 --> 00:07:31,765
ecosystem ES EVPF, we can say that
the power why are we using EVPF

104
00:07:32,265 --> 00:07:35,995
in these cases, scenarios and.

105
00:07:36,495 --> 00:07:45,105
I align it to why many companies are
using EBPF is because EBPF is a powerful

106
00:07:45,434 --> 00:07:53,400
Linux cardinal technology that extends
the classic BPF, the Berkeley package

107
00:07:53,400 --> 00:07:55,710
filter that is, was done many years.

108
00:07:56,280 --> 00:08:01,290
So it allowed programs to be
attached to various kernel projects.

109
00:08:02,174 --> 00:08:07,784
Including key proofs, trace
points, and net network schedulers.

110
00:08:08,145 --> 00:08:14,385
So this gives developers and system
administrations administrators

111
00:08:14,865 --> 00:08:17,850
unprecedented visibility and
control over the system Behavior.

112
00:08:18,350 --> 00:08:22,309
I can say that EBPF programs
can observe and modify the

113
00:08:22,309 --> 00:08:24,020
behavior of the Linux carload.

114
00:08:24,520 --> 00:08:25,360
In real time.

115
00:08:26,260 --> 00:08:27,040
Imagine that.

116
00:08:27,340 --> 00:08:33,240
So providing a level of access and
observability previously unattainable,

117
00:08:33,740 --> 00:08:37,460
this makes E-B-P-F-A crucial technology.

118
00:08:37,789 --> 00:08:44,270
So it is a major player, I can say for
enhancing network performance security

119
00:08:44,540 --> 00:08:49,074
observability within the Kubernetes
ecosystem, as we saw in previous slide.

120
00:08:49,574 --> 00:08:55,604
So moving forward, we will explore the
unique position of the kernel space

121
00:08:56,084 --> 00:09:03,104
and YVPF ability to operate within
this privilege domain is so impactful,

122
00:09:03,604 --> 00:09:10,089
so well, as you may know, we have
the kernel space and the user space

123
00:09:10,589 --> 00:09:12,209
if you come from this background.

124
00:09:12,300 --> 00:09:13,140
If not, don't worry.

125
00:09:13,140 --> 00:09:13,860
We are going to.

126
00:09:14,515 --> 00:09:16,615
Get deeper in into this explanation.

127
00:09:17,275 --> 00:09:23,755
The kernel space is where the core of
the operation operating system resides.

128
00:09:24,255 --> 00:09:27,855
This is a highly privileged and
critical component, as you may know,

129
00:09:28,214 --> 00:09:33,824
as it manage access to the systems
system, physical resources such as

130
00:09:33,824 --> 00:09:36,545
memory disks, and the net worth.

131
00:09:37,045 --> 00:09:43,965
So the kernel exposes the resources
in abstracted forms like files,

132
00:09:43,965 --> 00:09:50,475
sockets, and processes, providing an a
standardized interface for applications

133
00:09:50,865 --> 00:09:52,635
to interact with the hardware.

134
00:09:53,135 --> 00:09:59,005
This separation of concerns
between the kernel and user space.

135
00:09:59,485 --> 00:10:04,705
Applications is a fundamental design
principle of modern operation systems.

136
00:10:05,065 --> 00:10:09,715
So we will explore the distinction
between kernel space and user space

137
00:10:10,075 --> 00:10:15,595
and how application must interface with
the kernel to access system resources.

138
00:10:16,095 --> 00:10:16,275
Oops.

139
00:10:16,775 --> 00:10:21,605
The Cornell expose these resources in
abstraction ledgers, as I said, such

140
00:10:21,605 --> 00:10:23,645
as files, sockets, and processes.

141
00:10:24,395 --> 00:10:28,085
Now let's turn our intention to the,

142
00:10:28,585 --> 00:10:29,510
to the user space.

143
00:10:30,010 --> 00:10:32,700
Just let me change the slide.

144
00:10:32,880 --> 00:10:38,395
Yeah, so the user space, which is the
domain where application processes run.

145
00:10:38,895 --> 00:10:44,210
In, in, so in the user space,
application processes have access

146
00:10:44,210 --> 00:10:48,440
to the resources provided by the
kernel, but they cannot directly

147
00:10:48,440 --> 00:10:50,420
interact with the physical hardware.

148
00:10:50,450 --> 00:10:55,290
So this is like a pretty big
difference between the spaces.

149
00:10:55,680 --> 00:11:00,450
All access to resources must go
through the kernel, which act,

150
00:11:00,810 --> 00:11:04,875
act as an intermediary between
the user space and the hardware.

151
00:11:05,375 --> 00:11:09,245
This separation concerns between
the kernel and user space is a

152
00:11:09,245 --> 00:11:17,765
fundamental design principle of modern
operational system operation systems,

153
00:11:18,005 --> 00:11:24,455
and it's essential for maintaining
stability, security, and efficiency.

154
00:11:24,955 --> 00:11:27,730
So how do we do that.

155
00:11:28,230 --> 00:11:33,110
We are going to explore
system calls or system calls.

156
00:11:33,610 --> 00:11:41,360
So system calls or calls are the primary
interface between the kernel and user

157
00:11:41,480 --> 00:11:47,040
space, allowing application to request
the kernel to perform a variety of tax.

158
00:11:47,540 --> 00:11:53,800
However, these system calls
come at a cost system calls.

159
00:11:53,800 --> 00:11:58,840
I can say they're quite expensive
operations requiring hundreds or even

160
00:11:58,840 --> 00:12:02,170
thousands of CPU cycles to complete.

161
00:12:02,920 --> 00:12:08,800
This is because they required
transitioning between the user space and

162
00:12:08,800 --> 00:12:10,805
nel between the user and Cardinal modes.

163
00:12:11,439 --> 00:12:18,939
Which involves flu chain, the C,
the CPU, catchy saving and restoring

164
00:12:18,939 --> 00:12:21,939
registers potentially other overhead.

165
00:12:22,439 --> 00:12:27,510
The high cost of system calls is an
important consideration for application

166
00:12:27,510 --> 00:12:29,910
design and performance optimization.

167
00:12:29,910 --> 00:12:35,745
So developers should strive to minimize
the number of system calls where possible.

168
00:12:36,620 --> 00:12:38,449
Batch or combine them.

169
00:12:39,140 --> 00:12:43,400
So this will help to reduce
overall overhead and improve

170
00:12:43,400 --> 00:12:45,230
the application efficiency.

171
00:12:45,730 --> 00:12:50,800
So looking ahead the next slide, we'd
explore some options for applications

172
00:12:50,829 --> 00:12:58,689
that require new kernel features, such as
implementing the functionality directly

173
00:12:59,189 --> 00:13:03,270
in the kernel or asking the kernel to
send all relevant data to the application.

174
00:13:03,770 --> 00:13:08,960
So understanding these trade offs
will be crucial for designing

175
00:13:09,050 --> 00:13:13,130
high performance scalable systems.

176
00:13:13,610 --> 00:13:17,815
So you can see at this slide
the cost of system calls.

177
00:13:18,415 --> 00:13:21,865
As I said this, you have
to take care about that.

178
00:13:21,925 --> 00:13:22,915
This, these trade up.

179
00:13:22,970 --> 00:13:26,980
The kernel space and
user space trade offs.

180
00:13:27,310 --> 00:13:32,350
Building on our previous discussion
of the cost of the system calls,

181
00:13:32,380 --> 00:13:35,860
we now turn to the trade offs
between implementing new features

182
00:13:36,400 --> 00:13:40,960
in the kernel versus in user space.

183
00:13:41,305 --> 00:13:46,015
So applications may offer, require
new kernel features to support

184
00:13:46,015 --> 00:13:51,485
their needs and maybe you are going
to ask what kind of new features.

185
00:13:51,485 --> 00:13:56,315
So it just can be new network
protocols, advance load,

186
00:13:56,315 --> 00:14:01,775
balance, the algorithms, traffic
redirection for sidecar containers.

187
00:14:01,775 --> 00:14:04,715
I dunno, it's just a couple of examples.

188
00:14:04,955 --> 00:14:07,745
So generally there are
two main options for.

189
00:14:08,090 --> 00:14:11,030
Implementing these new features

190
00:14:11,530 --> 00:14:15,340
so we can ask the kernel to handle
everything for the application.

191
00:14:16,150 --> 00:14:20,800
For example, sending all the internal
traffic to the application to implement a

192
00:14:20,800 --> 00:14:27,775
new protocol or maybe this approach well,
but this approach is costly in terms of,

193
00:14:27,835 --> 00:14:30,625
or very expensive in terms of performance.

194
00:14:30,675 --> 00:14:33,945
We have the second alternative
that is to implement the new

195
00:14:33,945 --> 00:14:35,865
feature directly in the kernel.

196
00:14:36,365 --> 00:14:40,475
Of course, this allows for more
efficient and optimized implementation.

197
00:14:40,505 --> 00:14:46,355
Implementation, but it requires
close collaboration between the

198
00:14:46,355 --> 00:14:48,785
application and the kernel developers.

199
00:14:48,785 --> 00:14:51,065
So it's not that easy.

200
00:14:51,575 --> 00:14:53,690
It's not that easy thing I can say.

201
00:14:53,690 --> 00:14:56,595
So the decision to
implement in the kernel.

202
00:14:57,485 --> 00:15:03,925
Our user space involves carefully
waiting the trade off between performance

203
00:15:03,925 --> 00:15:07,885
flexibility and development complexity.

204
00:15:08,385 --> 00:15:11,815
So take a look of these
cartoons that are hilarious.

205
00:15:11,865 --> 00:15:15,680
By the way I'm going to share the
slides, so don't worry if you want

206
00:15:15,730 --> 00:15:18,030
to take a look after this talk, but.

207
00:15:18,550 --> 00:15:23,079
It's going to be public available,
so yeah, that's the problem.

208
00:15:23,179 --> 00:15:28,349
If, the colonel is controlled by
a committee, so it can take, I can

209
00:15:28,349 --> 00:15:32,759
say a year to, to make a change
because, it's pretty important.

210
00:15:32,759 --> 00:15:35,099
So everybody must agree.

211
00:15:35,099 --> 00:15:38,999
And and again, when you get
the new release, maybe this is.

212
00:15:39,499 --> 00:15:41,989
Not useful anymore for your application.

213
00:15:42,039 --> 00:15:48,529
So having this new approach of eeb PF
based development, but you can have a new

214
00:15:48,529 --> 00:15:52,399
feature or capability in a couple of days.

215
00:15:52,519 --> 00:15:54,859
So this is quite, quite a fun phone.

216
00:15:55,359 --> 00:15:57,974
So moving forward.

217
00:15:58,474 --> 00:16:05,234
Kernel programming with EVPF, is we
can do or build this or develop this

218
00:16:05,234 --> 00:16:11,964
program with c it is the main language,
but also you can use roast or but

219
00:16:11,964 --> 00:16:15,129
it's like in constrain it is not like.

220
00:16:15,809 --> 00:16:20,494
The full C version that we
currently own it's limited.

221
00:16:20,994 --> 00:16:29,024
So EBPF programs are load directly into
the kernel, allowing them to interact

222
00:16:29,024 --> 00:16:30,854
with the core system at low level.

223
00:16:31,354 --> 00:16:36,024
It's not assembly but we are
allowed to interact with the

224
00:16:36,024 --> 00:16:37,614
core system at the low level.

225
00:16:37,664 --> 00:16:43,574
These programs can be attached to
various barriers or many events such as

226
00:16:44,334 --> 00:16:50,334
receivable, net network packet packets,
or packages or calling kernel functions

227
00:16:50,334 --> 00:16:53,244
and other system level activities.

228
00:16:53,744 --> 00:17:02,119
So the E-E-B-P-F program is executed
for each occurrence of detached band.

229
00:17:02,969 --> 00:17:09,599
En enable you to monitor, manipulate,
or filter these in real time.

230
00:17:09,599 --> 00:17:15,839
So this powerful integration with
the kernel is a key strength of A

231
00:17:15,839 --> 00:17:22,609
BPF, but also cause some risks, which
we will discuss in the next slide.

232
00:17:23,109 --> 00:17:24,939
One question that is.

233
00:17:25,419 --> 00:17:32,364
Very common is that if EBPF is dangerous
we have we need to understand potential

234
00:17:32,364 --> 00:17:40,254
risk and how to use this powerful tool
responsibly while EBPF does provide

235
00:17:40,254 --> 00:17:45,294
access to the kernel internal is,
it's not in the inherently dangerous.

236
00:17:45,294 --> 00:17:46,884
Remember about the sandbox?

237
00:17:47,679 --> 00:17:54,249
But the key is to be mindful of how
you utilize this capability as you

238
00:17:54,249 --> 00:18:01,934
can, as you see here, the way or how
you use it, it can be dangerous so

239
00:18:02,839 --> 00:18:10,269
concerns around EBPF often stem from
the fact that it allows code execution

240
00:18:10,269 --> 00:18:12,399
in a highly privileged kernel content.

241
00:18:13,389 --> 00:18:19,449
How, however, by default administrative
privileges are required to

242
00:18:19,449 --> 00:18:25,149
load eeb EBPF programs, which
helps mitigate unitized access.

243
00:18:25,959 --> 00:18:31,239
That said, the potential for
meat use is real reals, for real.

244
00:18:31,749 --> 00:18:36,399
For example, you could attach a
an E-E-V-P-F program to all kernel

245
00:18:36,399 --> 00:18:40,829
function or block the entire
network, or all system calls this is.

246
00:18:41,329 --> 00:18:41,959
I, I don't know.

247
00:18:41,959 --> 00:18:43,279
Why do you want to do that?

248
00:18:43,279 --> 00:18:44,989
But it can be done.

249
00:18:45,489 --> 00:18:50,019
So it's important to strike a
balance as A BPF can also make

250
00:18:50,019 --> 00:18:55,570
the kernel more resilient, making
it harder to crash by mistake.

251
00:18:56,139 --> 00:19:01,870
So the developer is
responsible for using EBPF.

252
00:19:02,370 --> 00:19:06,450
Judiciously, I can say with
a deep understanding of its

253
00:19:06,450 --> 00:19:11,360
capabilities and limitations as
we will see on the next slide.

254
00:19:11,360 --> 00:19:17,729
The Kubernetes ecosystem, this is
slide, is increasingly leveraging EVPF

255
00:19:17,790 --> 00:19:20,219
to enhancing networking monitoring.

256
00:19:20,834 --> 00:19:24,405
And security in container
based environments.

257
00:19:24,905 --> 00:19:32,525
By leveraging EBPF in a careful and
controlled manner, we cannot lock its

258
00:19:32,525 --> 00:19:35,255
vast potential while mitigating risks.

259
00:19:35,285 --> 00:19:40,514
So you can see this we have already
talked a little bit about cilium,

260
00:19:41,235 --> 00:19:45,195
but we have other use cases.

261
00:19:45,695 --> 00:19:46,415
So yeah.

262
00:19:47,015 --> 00:19:52,274
Cilium is one of the biggest or
more important projects in the

263
00:19:53,175 --> 00:19:54,915
Cloud Native Computing Foundation.

264
00:19:55,875 --> 00:20:00,975
So it's a networking project that
leverage EVPF to provide dynamic

265
00:20:00,975 --> 00:20:05,445
network control and visibility, I
can say for container basis systems.

266
00:20:05,945 --> 00:20:10,070
Looking ahead, we will explore
how another Kubernetes tool.

267
00:20:10,750 --> 00:20:17,940
Like WPO scope, employee CBPF to
accurately track TCP connections between

268
00:20:17,940 --> 00:20:22,170
containers and what's the point of that?

269
00:20:22,350 --> 00:20:24,660
It's offer valuable insight.

270
00:20:25,160 --> 00:20:29,660
So many observability tools or
platforms or solutions are using it.

271
00:20:30,160 --> 00:20:32,560
This is a little bit more about cilium.

272
00:20:33,070 --> 00:20:36,784
Which is very famous of
course, based on EBPF.

273
00:20:37,284 --> 00:20:40,334
Maybe you have heard
about web wave of scope.

274
00:20:41,084 --> 00:20:48,884
It's about tracking TCP connections, so it
also leverage EBPF technology to provide

275
00:20:48,884 --> 00:20:53,864
the talent insight into the network
activity, which in a Kubernetes clusters.

276
00:20:54,364 --> 00:21:00,245
If you ask or wonder if I can use the
VPF along with other tools, of course

277
00:21:00,245 --> 00:21:04,235
you can integrate it with, we're going
to talk a little more about that.

278
00:21:04,235 --> 00:21:08,764
But of course you can use any
backend, maybe Prometheus,

279
00:21:09,034 --> 00:21:10,854
maybe graph, you name it.

280
00:21:10,854 --> 00:21:16,724
Met in this case, WaPo scope
uses EBPF to track TCP connection

281
00:21:16,724 --> 00:21:18,379
between containers accurately.

282
00:21:19,259 --> 00:21:23,669
By attaching A BPF programs
to current level proofs.

283
00:21:24,419 --> 00:21:30,419
So WaPo scope can observe and report
on the network traffic, offering

284
00:21:30,419 --> 00:21:34,799
valuable information for troubleshooting
and performing optimization.

285
00:21:35,299 --> 00:21:39,829
So looking ahead, as we explore the
potential of EVPF and Kubernetes,

286
00:21:40,369 --> 00:21:44,809
we will see how this technology
can be applied to collect detailed.

287
00:21:45,309 --> 00:21:51,099
Per boat or per container network
statistics enable application defined

288
00:21:51,099 --> 00:21:57,939
sandboxing and even audit cube, CTL
accept sessions further expanding

289
00:21:58,089 --> 00:22:03,219
observability and control capabilities,
which in the Kubernetes ecosystem.

290
00:22:03,719 --> 00:22:08,279
But before that we can see
another potential EBPF use cases.

291
00:22:08,779 --> 00:22:16,809
It's this because of, based on
the EBPS, flexibility allows for

292
00:22:16,809 --> 00:22:21,489
a wide range of applications from
granular network monitoring to

293
00:22:21,489 --> 00:22:23,999
find grain security controls.

294
00:22:23,999 --> 00:22:28,969
So one key use cases is PO and
container level network Statistic.

295
00:22:29,524 --> 00:22:34,594
So by attaching EVPF program to see
groups, we can collect detailed purpo

296
00:22:34,594 --> 00:22:36,844
or prayer container network statistic.

297
00:22:37,444 --> 00:22:42,724
So this way we can provide deeper
insight into resource utilization

298
00:22:43,224 --> 00:22:44,754
and potential bottlenecks.

299
00:22:44,814 --> 00:22:48,234
So be pretty sure that we
are going to hear more about

300
00:22:48,744 --> 00:22:52,394
EBPF solutions new use cases.

301
00:22:52,574 --> 00:22:54,704
This is for sure I can guarantee.

302
00:22:55,664 --> 00:23:03,084
Another innovative application is
applied LSM, with all of this movement

303
00:23:03,084 --> 00:23:10,724
about ai, we are going to see applied
application applied on LSM, which

304
00:23:10,754 --> 00:23:15,824
allows unprivileged applications to
build their own sandboxes and restrict

305
00:23:15,824 --> 00:23:18,344
their own actions using the VPF.

306
00:23:18,844 --> 00:23:23,164
This enable enhancing security
and isolation with the need

307
00:23:23,224 --> 00:23:24,694
for elevated privileges.

308
00:23:24,694 --> 00:23:26,764
So this is one of the key advantage.

309
00:23:27,264 --> 00:23:31,524
So we, in the kuber talking again
about the Kubernetes systems.

310
00:23:32,259 --> 00:23:38,199
We can audit QCTL exec sessions,
recording a login, the exact

311
00:23:38,319 --> 00:23:42,399
sequence of comments executed
during these interactive sessions.

312
00:23:42,939 --> 00:23:46,839
So this improves security
and accountability, which

313
00:23:46,839 --> 00:23:48,309
in the Kubernetes clusters.

314
00:23:48,809 --> 00:23:53,879
As EVPF continues to evolve,
we can expect to see even more

315
00:23:53,879 --> 00:23:57,869
groundbreaking applications that
pushes the boundaries of what's

316
00:23:57,869 --> 00:24:02,789
possible in the Kubernetes ecosystem
and unlocking new possibilities for

317
00:24:02,789 --> 00:24:05,909
observability, security and performance.

318
00:24:06,119 --> 00:24:08,139
Yeah I am repeating a lot.

319
00:24:08,139 --> 00:24:10,959
This word, security networking.

320
00:24:11,459 --> 00:24:17,979
Observability because right now there are
the main use cases, but for sure we are

321
00:24:17,979 --> 00:24:20,679
going to see more and more eventually.

322
00:24:21,179 --> 00:24:25,639
So as a conclusion, if you want
to take something from this talk,

323
00:24:26,189 --> 00:24:30,064
I want to say that about them or
remark, the powerful combination of

324
00:24:30,064 --> 00:24:37,944
Kubernetes and EVPF, the ability of
EVPF to dynamically attach to kernel

325
00:24:37,944 --> 00:24:40,164
objects and execute custom programs.

326
00:24:40,664 --> 00:24:46,754
Execute custom programs provides
in parallel visibly visibility

327
00:24:46,754 --> 00:24:51,404
and control, visibly and control
of anything, because we have the,

328
00:24:51,475 --> 00:24:58,540
this visibility and control are the
Linux kernel level, so we can enable

329
00:24:58,725 --> 00:25:04,094
Kubernetes tools to enhance networking,
monitoring, and now ING capabilities.

330
00:25:04,849 --> 00:25:10,849
For instance, we can use EVPF to collect
detailed per part, per container network.

331
00:25:11,089 --> 00:25:16,429
A side card network statistics
provide valuable insights

332
00:25:16,429 --> 00:25:17,959
into the network behavior.

333
00:25:18,459 --> 00:25:19,089
What else?

334
00:25:19,139 --> 00:25:26,029
Maybe additionally, A BPF based
landlock LSM allows some privilege

335
00:25:26,029 --> 00:25:28,069
application to, with their own sandboxes.

336
00:25:28,569 --> 00:25:32,830
And restrict their own actions
in enhancing the security of

337
00:25:32,830 --> 00:25:34,209
their Kubernetes environment.

338
00:25:34,709 --> 00:25:40,409
Furthermore, EBPF programs can be used
to record and log the exact sequence

339
00:25:40,739 --> 00:25:49,530
of comments executed during QCTL exec
sessions so you can know or enable robust

340
00:25:49,830 --> 00:25:52,179
auditing capabilities, governance and.

341
00:25:53,160 --> 00:25:58,950
Who is doing what, or performing
activities is important of not just

342
00:25:58,950 --> 00:26:04,830
big company event, small, medium
companies needs to know and to have this

343
00:26:04,830 --> 00:26:08,250
governance visibility and transparency.

344
00:26:08,250 --> 00:26:15,379
So EPF is giving us, given us this
capabilities, so as EVPF continues

345
00:26:15,379 --> 00:26:17,720
to evolve, we can expect to.

346
00:26:18,229 --> 00:26:23,809
See even more in innovative applications
that push the boundaries of what's

347
00:26:23,809 --> 00:26:27,289
possible in the Kubernetes system,
locking new possibilities for

348
00:26:27,289 --> 00:26:33,310
observability security a performance
between container based systems.

349
00:26:33,810 --> 00:26:40,069
So just to conclude the next
slide, we explore the integration

350
00:26:40,699 --> 00:26:42,769
of Open Telemetry and EVPF.

351
00:26:43,264 --> 00:26:46,144
Like I, I think that this
a winning combination.

352
00:26:46,644 --> 00:26:52,094
And maybe you are asking how or
what's the point of using both

353
00:26:52,094 --> 00:26:54,194
technology and think about it.

354
00:26:54,234 --> 00:27:00,964
In the OI model open Telemetry
works on layer six and seven.

355
00:27:01,504 --> 00:27:03,514
So it's more about the application.

356
00:27:04,024 --> 00:27:06,649
So the data that is
collect is more about them.

357
00:27:07,149 --> 00:27:13,470
Layer six and seven, as I said, and EBPF
is on the one and layer one and two.

358
00:27:13,919 --> 00:27:18,489
The correlation of the information of
the logs, it's going to be actually

359
00:27:18,489 --> 00:27:23,695
there are a couple of projects
also under development about this

360
00:27:23,695 --> 00:27:25,919
combination of correlation of data.

361
00:27:25,919 --> 00:27:26,790
So it's going to be.

362
00:27:27,290 --> 00:27:30,980
About bringing the boat
of these two world.

363
00:27:31,700 --> 00:27:35,790
So yeah it's not one or another.

364
00:27:35,790 --> 00:27:40,350
I think it's going to be the best
of the boat technology, so yeah.

365
00:27:40,850 --> 00:27:46,910
So this integration will enable
advanced use cases such as those

366
00:27:47,390 --> 00:27:54,590
distributed tracing metrics, collection,
logging, while benefiting from the

367
00:27:54,590 --> 00:27:57,365
performance flexibility of EVPF.

368
00:27:57,865 --> 00:28:01,120
And as I said the metrics
collected in the application.

369
00:28:01,240 --> 00:28:05,470
More visibility, more data, and
more insights that we are going to

370
00:28:05,470 --> 00:28:08,100
get from these 2 1 2 technologies.

371
00:28:08,100 --> 00:28:14,930
So this integration will enable
advanced usage case and Kubernetes

372
00:28:15,120 --> 00:28:18,340
also well in the Kubernetes systems.

373
00:28:18,510 --> 00:28:19,080
So

374
00:28:19,580 --> 00:28:21,590
last but not least.

375
00:28:22,090 --> 00:28:25,659
I just want to conclude my
presentation with this list of

376
00:28:25,659 --> 00:28:27,580
recommended reading readings.

377
00:28:28,240 --> 00:28:35,350
If you wonder where to go from here
this list of recommendations will

378
00:28:35,350 --> 00:28:37,900
help you to explore EBPF in that.

379
00:28:38,109 --> 00:28:43,960
So this includes the Eeb PF
compiler collections, which provide

380
00:28:43,960 --> 00:28:46,060
a set of eeb PS based tools.

381
00:28:46,560 --> 00:28:50,670
And examples for working with
this power field technology.

382
00:28:51,170 --> 00:28:54,749
There, there is also a video that
I like pretty much about Brenda,

383
00:28:54,749 --> 00:29:00,649
Greg is I can say an expert in the
field that provides an overview

384
00:29:00,649 --> 00:29:03,319
of EVPS capabilities and cases.

385
00:29:03,819 --> 00:29:09,590
And of course you can explore the ZI
project, how the ZI projects leverage.

386
00:29:10,235 --> 00:29:15,195
EBPF or networking and security
and you can find a lot of

387
00:29:15,195 --> 00:29:16,625
resources on the internet.

388
00:29:16,625 --> 00:29:21,935
And of course in the EBPF foundation,
they have a lot of resources,

389
00:29:21,935 --> 00:29:23,795
lot of tutorials and blocks.

390
00:29:24,305 --> 00:29:29,825
So exploring these resources, we
gain a comprehensive understanding

391
00:29:29,825 --> 00:29:34,745
of EBPF and its diverse
application and why it's taking.

392
00:29:35,245 --> 00:29:36,685
The word by the storm.

393
00:29:37,185 --> 00:29:41,115
Yeah, I think that at itself for me.

394
00:29:41,715 --> 00:29:44,055
So this is my contact.

395
00:29:44,125 --> 00:29:48,565
I am going to be around
if you want to reach me.

396
00:29:48,805 --> 00:29:50,870
Please add me to LinkedIn.

397
00:29:50,920 --> 00:29:52,690
And yeah, that's it.

398
00:29:52,750 --> 00:29:57,970
Thank you very much for
listening to me and have fun

399
00:29:57,970 --> 00:30:00,700
with this with EVPF technology.

400
00:30:01,420 --> 00:30:02,110
Bye-bye.

